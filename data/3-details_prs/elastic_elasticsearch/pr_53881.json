{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjA0ODAw", "number": 53881, "title": "[DOCS] Adds description of analysis_stats object and its properties to GET DFA stats API docs", "bodyText": "This PR contains the documentation of the new analysis_stats object and its properties that are exposed in GET DFA stats.\nPreview: http://elasticsearch_53881.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/get-dfanalytics-stats.html", "createdAt": "2020-03-20T15:48:12Z", "url": "https://github.com/elastic/elasticsearch/pull/53881", "merged": true, "mergeCommit": {"oid": "85d9b34dc50d98a3cb28696966125682fb777683"}, "closed": true, "closedAt": "2020-03-31T11:27:55Z", "author": {"login": "szabosteve"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPifjbgH2gAyMzkxNjA0ODAwOmRhMWE4MDIxNWY0ODE3M2FmY2FlNGViOTJiZDI5YzQxZDNkYzk1MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTAJ1TgFqTM4NDU4MTY4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "da1a80215f48173afcae4eb92bd29c41d3dc9519", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/da1a80215f48173afcae4eb92bd29c41d3dc9519", "committedDate": "2020-03-20T15:46:11Z", "message": "[DOCS] Adds description of analysis_stats object and its properties to GET DFA stats API docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "842dc3520335580dc94517f4f3a8c1ea9ddc20bb", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/842dc3520335580dc94517f4f3a8c1ea9ddc20bb", "committedDate": "2020-03-23T12:35:22Z", "message": "[DOCS] Fixes typos."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65317aae29d90268ae01270414ac60f238472eb8", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/65317aae29d90268ae01270414ac60f238472eb8", "committedDate": "2020-03-25T10:02:51Z", "message": "[DOCS] Adds hyperparameter related properties."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19884971f46b1d90c5996e76d5541835623f233", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/c19884971f46b1d90c5996e76d5541835623f233", "committedDate": "2020-03-26T14:18:19Z", "message": "[DOCS] Organizes content to collapsible sections."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7751b67dfb3844808e74787a8d1846d61cbd267", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7751b67dfb3844808e74787a8d1846d61cbd267", "committedDate": "2020-03-26T14:57:43Z", "message": "[DOCS] Adjusts indentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b743b35f0e6703a8e7652880f7f1d88d625ec100", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/b743b35f0e6703a8e7652880f7f1d88d625ec100", "committedDate": "2020-03-27T08:46:24Z", "message": "[DOCS] Adds child attributes role."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc0936d95b3678e90186ec0e9c87785a8fd35fda", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/bc0936d95b3678e90186ec0e9c87785a8fd35fda", "committedDate": "2020-03-27T08:58:37Z", "message": "[DOCS] Adds role to analysis_stats."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTM2ODAx", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-382936801", "createdAt": "2020-03-27T14:59:39Z", "commit": {"oid": "bc0936d95b3678e90186ec0e9c87785a8fd35fda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1OTozOVrOF81Auw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1OTozOVrOF81Auw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNzQxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [role=\"child_attributes\"]", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r399327419", "createdAt": "2020-03-27T14:59:39Z", "author": {"login": "szabosteve"}, "path": "docs/reference/ml/df-analytics/apis/get-dfanalytics-stats.asciidoc", "diffHunk": "@@ -35,7 +35,7 @@ privileges:\n   \n For more information, see <<security-privileges>> and <<built-in-roles>>.\n \n-\n+[role=\"child_attributes\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0936d95b3678e90186ec0e9c87785a8fd35fda"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5989ef03e43655c8c1105f62c4bc3f68e34a6474", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/5989ef03e43655c8c1105f62c4bc3f68e34a6474", "committedDate": "2020-03-27T15:00:24Z", "message": "Update docs/reference/ml/df-analytics/apis/get-dfanalytics-stats.asciidoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/bbcae4be77b580d72c110d1465deb2da3de99cda", "committedDate": "2020-03-27T15:07:25Z", "message": "[DOCS] Fixes markup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNzQ2MTA1", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-383746105", "createdAt": "2020-03-30T11:03:24Z", "commit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowMzoyNFrOF9kgMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNzoyNFrOF9k8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTUyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            An object containing the hyperparameters of the {classanalysis}.\n          \n          \n            \n            An object containing the parameters of the {classanalysis}.\n          \n      \n    \n    \n  \n\nAlso the section is called \"hyperparameters\" not all of these parameters are estimated in a hyperparameter  optimization procedure. Hence, I would use the word \"parameters\" here.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400105522", "createdAt": "2020-03-30T11:03:24Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNjgwMw==", "bodyText": "Since eta can be specified explicitly in the request body, maybe you can cross-reference it here?", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400106803", "createdAt": "2020-03-30T11:05:44Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `accuracy` and `minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzIyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The maximum number of trees.\n          \n          \n            \n            The maximum number of trees in the forest.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400107225", "createdAt": "2020-03-30T11:06:39Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `accuracy` and `minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMDg3OA==", "bodyText": "After elastic/ml-cpp#1096 is through, it will be called alpha, it can be cross-referenced with analysis config.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400110878", "createdAt": "2020-03-30T11:13:35Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `accuracy` and `minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.\n+\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+\n+`regularization_depth_penalty_multiplier`::::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTI3NA==", "bodyText": "This parameter will be called gamma, the same as in the analysis config.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400111274", "createdAt": "2020-03-30T11:14:18Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `accuracy` and `minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.\n+\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+\n+`regularization_depth_penalty_multiplier`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`regularization_leaf_weight_penalty_multiplier`::::\n+(double)\n+Regularization factor to penalize large leaf weights. This parameter is also \n+referred to as `lambda`.\n+\n+`regularization_soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+\n+`regularization_soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+\n+`regularization_tree_size_penalty_multiplier`::::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTc1OQ==", "bodyText": "This guy will be simply called lambda", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400111759", "createdAt": "2020-03-30T11:15:17Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `accuracy` and `minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.\n+\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+\n+`regularization_depth_penalty_multiplier`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`regularization_leaf_weight_penalty_multiplier`::::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjgzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            metric. Possible values are `accuracy` and `minimum_recall`.\n          \n          \n            \n            metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n          \n      \n    \n    \n  \n\nSchema will be updated.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400112833", "createdAt": "2020-03-30T11:17:24Z", "author": {"login": "valeriy42"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,357 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the hyperparameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `accuracy` and `minimum_recall`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcae4be77b580d72c110d1465deb2da3de99cda"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79c45a28eb468f42874294b67e49bd4bfc8fe41a", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/79c45a28eb468f42874294b67e49bd4bfc8fe41a", "committedDate": "2020-03-30T11:33:41Z", "message": "Update docs/reference/ml/ml-shared.asciidoc\n\nCo-Authored-By: Valeriy Khakhutskyy <1292899+valeriy42@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ebe5529c7045f5ed588240530d3dd89e4e185df", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/6ebe5529c7045f5ed588240530d3dd89e4e185df", "committedDate": "2020-03-30T11:35:17Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Valeriy Khakhutskyy <1292899+valeriy42@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8b05e545b9621fd9b544e737fcbdc9067727da3", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8b05e545b9621fd9b544e737fcbdc9067727da3", "committedDate": "2020-03-30T13:21:40Z", "message": "[DOCS] Addresses feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTM2MTU1", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-383936155", "createdAt": "2020-03-30T14:52:17Z", "commit": {"oid": "f8b05e545b9621fd9b544e737fcbdc9067727da3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/d4471d50fd922b1e635ce497799ac16285d9a898", "committedDate": "2020-03-30T15:04:55Z", "message": "[DOCS] Modifies the name of two properties."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTcwNjk0", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-383970694", "createdAt": "2020-03-30T15:26:43Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTI3MDUy", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384127052", "createdAt": "2020-03-30T18:37:08Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozNzowOFrOF93DwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozNzowOFrOF93DwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwOTUzNg==", "bodyText": "Minor suggestion for clarity:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Specifies with what rate to increase `eta` for every new tree added to the \n          \n          \n            \n            Specifies the rate at which the `eta` increases for each new tree that is added to the", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400409536", "createdAt": "2020-03-30T18:37:08Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTI4ODYy", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384128862", "createdAt": "2020-03-30T18:39:41Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozOTo0MVrOF93Jnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozOTo0MVrOF93Jnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTAzOQ==", "bodyText": "I think you can likely simplify this as follows:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n          \n          \n            \n            forest. For example, a rate of `1.05` increases `eta`", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400411039", "createdAt": "2020-03-30T18:39:41Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTMwMzk2", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384130396", "createdAt": "2020-03-30T18:41:50Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0MTo1MVrOF93OZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0MTo1MVrOF93OZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjI2Mg==", "bodyText": "I think this should be capitalized:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            hyperparameter optimization steps in the bayesian optimization procedure. \n          \n          \n            \n            hyperparameter optimization steps in the Bayesian optimization procedure.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400412262", "createdAt": "2020-03-30T18:41:51Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTMxODIz", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384131823", "createdAt": "2020-03-30T18:43:51Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0Mzo1MVrOF93S8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0Mzo1MVrOF93S8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzQyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Maximum number of steps is determined as the number of undefined hyperparameters \n          \n          \n            \n            The maximum number of steps is determined based on the number of undefined hyperparameters", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400413426", "createdAt": "2020-03-30T18:43:51Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTMyNjQz", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384132643", "createdAt": "2020-03-30T18:45:00Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NTowMFrOF93Vog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NTowMFrOF93Vog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNDExNA==", "bodyText": "Synching with definition above this one:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Maximum number of folds for the cross-validation procedure.\n          \n          \n            \n            The maximum number of folds for the cross-validation procedure.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400414114", "createdAt": "2020-03-30T18:45:00Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTM0MTg0", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384134184", "createdAt": "2020-03-30T18:47:08Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NzowOFrOF93aVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NzowOFrOF93aVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTMxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            An object containing the paramters of the {reganalysis}.\n          \n          \n            \n            An object containing the parameters of the {reganalysis}.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400415319", "createdAt": "2020-03-30T18:47:08Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.\n+\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+======\n+//End class_hyperparameters\n+\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+\n+//Begin class_timing_stats\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n++\n+.Properties of `timing_stats`\n+[%collapsible%open]\n+======\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+\n+`iteration_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} since the last iteration in milliseconds.\n+======\n+//End class_timing_stats\n+\n+//Begin class_validation_loss\n+`validation_loss`::::\n+(object)\n+An object containing information about validation loss.\n++\n+.Properties of `validation_loss`\n+[%collapsible%open]\n+======\n+`loss_type`::::\n+(string)\n+The name of the loss metric. For example, `binomial_logistic`.\n+\n+`fold_values`::::\n+(array of strings)\n+Validation loss values for every added decision tree during the forest growing \n+procedure.\n+======\n+//End class_validation_loss\n+=====\n+//End classification_stats\n+\n+//Begin outlier_detection_stats\n+`outlier_detection_stats`:::\n+(object)\n+An object containing statistical data about the {oldetection} job.\n++\n+.Properties of `outlier_detection_stats`\n+[%collapsible%open]\n+=====\n+//Begin parameters\n+`parameters`::::\n+(object)\n+The list of job parameters specified by the user or determined by algorithmic \n+heuristics.\n++\n+.Properties of `parameters`\n+[%collapsible%open]\n+======\n+`compute_feature_influence`::::\n+(boolean)\n+If true, feature influence calculation is enabled.\n+\n+`feature_influence_threshold`::::\n+(double)\n+The minimum {olscore} that a document needs to have to calculate its feature \n+influence score.\n+\n+`method`::::\n+(string)\n+The method that {oldetection} uses. Possible values are `lof`, `ldof`, \n+`distance_kth_nn`, `distance_knn`, and `ensemble`.\n+\n+`n_neighbors`::::\n+(integer)\n+The value for how many nearest neighbors each method of {oldetection} uses to \n+calculate its outlier score.\n+\n+`outlier_fraction`::::\n+(double)\n+The proportion of the data set that is assumed to be outlying prior to \n+{oldetection}.\n+\n+`standardization_enabled`::::\n+(boolean)\n+If true, then the following operation is performed on the columns before \n+computing {olscores}: (x_i - mean(x_i)) / sd(x_i).\n+======\n+//End parameters\n+\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+\n+//Begin od_timing_stats\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n++\n+.Property of `timing_stats`\n+[%collapsible%open]\n+======\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+======\n+//End od_timing_stats\n+=====\n+//End outlier_detection_stats\n+\n+//Begin regression_stats\n+`regression_stats`:::\n+(object)\n+An object containing statistical data about the {reganalysis}.\n++\n+.Properties of `regression_stats`\n+[%collapsible%open]\n+=====\n+//Begin reg_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the paramters of the {reganalysis}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTM1MzU5", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384135359", "createdAt": "2020-03-30T18:48:42Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0ODo0MlrOF93eAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0ODo0MlrOF93eAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjI1OA==", "bodyText": "Clarifying to match earlier similar definition:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Specifies with what rate to increase `eta` for every new tree added to the \n          \n          \n            \n            Specifies the rate at which the `eta` increases for every new tree that is added to the", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400416258", "createdAt": "2020-03-30T18:48:42Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.\n+\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+======\n+//End class_hyperparameters\n+\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+\n+//Begin class_timing_stats\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n++\n+.Properties of `timing_stats`\n+[%collapsible%open]\n+======\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+\n+`iteration_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} since the last iteration in milliseconds.\n+======\n+//End class_timing_stats\n+\n+//Begin class_validation_loss\n+`validation_loss`::::\n+(object)\n+An object containing information about validation loss.\n++\n+.Properties of `validation_loss`\n+[%collapsible%open]\n+======\n+`loss_type`::::\n+(string)\n+The name of the loss metric. For example, `binomial_logistic`.\n+\n+`fold_values`::::\n+(array of strings)\n+Validation loss values for every added decision tree during the forest growing \n+procedure.\n+======\n+//End class_validation_loss\n+=====\n+//End classification_stats\n+\n+//Begin outlier_detection_stats\n+`outlier_detection_stats`:::\n+(object)\n+An object containing statistical data about the {oldetection} job.\n++\n+.Properties of `outlier_detection_stats`\n+[%collapsible%open]\n+=====\n+//Begin parameters\n+`parameters`::::\n+(object)\n+The list of job parameters specified by the user or determined by algorithmic \n+heuristics.\n++\n+.Properties of `parameters`\n+[%collapsible%open]\n+======\n+`compute_feature_influence`::::\n+(boolean)\n+If true, feature influence calculation is enabled.\n+\n+`feature_influence_threshold`::::\n+(double)\n+The minimum {olscore} that a document needs to have to calculate its feature \n+influence score.\n+\n+`method`::::\n+(string)\n+The method that {oldetection} uses. Possible values are `lof`, `ldof`, \n+`distance_kth_nn`, `distance_knn`, and `ensemble`.\n+\n+`n_neighbors`::::\n+(integer)\n+The value for how many nearest neighbors each method of {oldetection} uses to \n+calculate its outlier score.\n+\n+`outlier_fraction`::::\n+(double)\n+The proportion of the data set that is assumed to be outlying prior to \n+{oldetection}.\n+\n+`standardization_enabled`::::\n+(boolean)\n+If true, then the following operation is performed on the columns before \n+computing {olscores}: (x_i - mean(x_i)) / sd(x_i).\n+======\n+//End parameters\n+\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+\n+//Begin od_timing_stats\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n++\n+.Property of `timing_stats`\n+[%collapsible%open]\n+======\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+======\n+//End od_timing_stats\n+=====\n+//End outlier_detection_stats\n+\n+//Begin regression_stats\n+`regression_stats`:::\n+(object)\n+An object containing statistical data about the {reganalysis}.\n++\n+.Properties of `regression_stats`\n+[%collapsible%open]\n+=====\n+//Begin reg_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the paramters of the {reganalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 248}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTM2Nzcx", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384136771", "createdAt": "2020-03-30T18:50:35Z", "commit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MDozNVrOF93iiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MDozNVrOF93iiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzQxOQ==", "bodyText": "A multiplier responsible ...\n\nThis content seems to duplicate an earlier definition.  Can the content be re-used?", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400417419", "createdAt": "2020-03-30T18:50:35Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,355 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the bayesian optimization procedure. \n+Maximum number of steps is determined as the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+\n+`num_folds`::::\n+(integer)\n+Maximum number of folds for the cross-validation procedure.\n+\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+======\n+//End class_hyperparameters\n+\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+\n+//Begin class_timing_stats\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n++\n+.Properties of `timing_stats`\n+[%collapsible%open]\n+======\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+\n+`iteration_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} since the last iteration in milliseconds.\n+======\n+//End class_timing_stats\n+\n+//Begin class_validation_loss\n+`validation_loss`::::\n+(object)\n+An object containing information about validation loss.\n++\n+.Properties of `validation_loss`\n+[%collapsible%open]\n+======\n+`loss_type`::::\n+(string)\n+The name of the loss metric. For example, `binomial_logistic`.\n+\n+`fold_values`::::\n+(array of strings)\n+Validation loss values for every added decision tree during the forest growing \n+procedure.\n+======\n+//End class_validation_loss\n+=====\n+//End classification_stats\n+\n+//Begin outlier_detection_stats\n+`outlier_detection_stats`:::\n+(object)\n+An object containing statistical data about the {oldetection} job.\n++\n+.Properties of `outlier_detection_stats`\n+[%collapsible%open]\n+=====\n+//Begin parameters\n+`parameters`::::\n+(object)\n+The list of job parameters specified by the user or determined by algorithmic \n+heuristics.\n++\n+.Properties of `parameters`\n+[%collapsible%open]\n+======\n+`compute_feature_influence`::::\n+(boolean)\n+If true, feature influence calculation is enabled.\n+\n+`feature_influence_threshold`::::\n+(double)\n+The minimum {olscore} that a document needs to have to calculate its feature \n+influence score.\n+\n+`method`::::\n+(string)\n+The method that {oldetection} uses. Possible values are `lof`, `ldof`, \n+`distance_kth_nn`, `distance_knn`, and `ensemble`.\n+\n+`n_neighbors`::::\n+(integer)\n+The value for how many nearest neighbors each method of {oldetection} uses to \n+calculate its outlier score.\n+\n+`outlier_fraction`::::\n+(double)\n+The proportion of the data set that is assumed to be outlying prior to \n+{oldetection}.\n+\n+`standardization_enabled`::::\n+(boolean)\n+If true, then the following operation is performed on the columns before \n+computing {olscores}: (x_i - mean(x_i)) / sd(x_i).\n+======\n+//End parameters\n+\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+\n+//Begin od_timing_stats\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n++\n+.Property of `timing_stats`\n+[%collapsible%open]\n+======\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+======\n+//End od_timing_stats\n+=====\n+//End outlier_detection_stats\n+\n+//Begin regression_stats\n+`regression_stats`:::\n+(object)\n+An object containing statistical data about the {reganalysis}.\n++\n+.Properties of `regression_stats`\n+[%collapsible%open]\n+=====\n+//Begin reg_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the paramters of the {reganalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies with what rate to increase `eta` for every new tree added to the \n+forest. The rate of 1.0 does not change `eta`, the rate of 1.05 increases `eta` \n+by 5%.\n+\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4471d50fd922b1e635ce497799ac16285d9a898"}, "originalPosition": 274}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7281a69776182cfc3581af07572c549841167187", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/7281a69776182cfc3581af07572c549841167187", "committedDate": "2020-03-31T06:11:55Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7bec16545e994f52234222a7304327e960024cc", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7bec16545e994f52234222a7304327e960024cc", "committedDate": "2020-03-31T09:27:52Z", "message": "[DOCS] Single-sources shared parameters."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTYzNjA0", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384563604", "createdAt": "2020-03-31T09:37:52Z", "commit": {"oid": "a7bec16545e994f52234222a7304327e960024cc"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozNzo1MlrOF-NYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0Mjo1NFrOF-NlDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NTM0MQ==", "bodyText": "I wonder if we could substitue returned with a more suitable verb here. Perhaps ... when the statistics were reported?", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400775341", "createdAt": "2020-03-31T09:37:52Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,335 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+tag::dfas-alpha[]\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+end::dfas-alpha[]\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+tag::dfas-downsample-factor[]\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+end::dfas-downsample-factor[]\n+\n+tag::dfas-eta[]\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+end::dfas-eta[]\n+\n+tag::dfas-eta-growth[]\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies the rate at which the `eta` increases for each new tree that is added to the \n+forest. For example, a rate of `1.05` increases `eta` by 5%.\n+end::dfas-eta-growth[]\n+\n+tag::dfas-feature-bag-fraction[]\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+end::dfas-feature-bag-fraction[]\n+\n+tag::dfas-gamma[]\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+end::dfas-gamma[]\n+\n+tag::dfas-lambda[]\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+end::dfas-lambda[]\n+\n+tag::dfas-max-attempts[]\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+end::dfas-max-attempts[]\n+\n+tag::dfas-max-optimization-rounds[]\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the Bayesian optimization procedure. \n+The maximum number of steps is determined based on the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+end::dfas-max-optimization-rounds[]\n+\n+tag::dfas-max-trees[]\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+end::dfas-max-trees[]\n+\n+tag::dfas-num-folds[]\n+`num_folds`::::\n+(integer)\n+The maximum number of folds for the cross-validation procedure.\n+end::dfas-num-folds[]\n+\n+tag::dfas-num-splits[]\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+end::dfas-num-splits[]\n+\n+tag::dfas-soft-limit[]\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+end::dfas-soft-limit[]\n+\n+tag::dfas-soft-tolerance[]\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+end::dfas-soft-tolerance[]\n+======\n+//End class_hyperparameters\n+\n+tag::dfas-iteration[]\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+end::dfas-iteration[]\n+\n+tag::dfas-timestamp[]\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7bec16545e994f52234222a7304327e960024cc"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjgyNg==", "bodyText": "I would rather say here \"number of iterations in the classification analysis\" instead of the DFA job, as iterations is not a concept that is relevant for all analyses.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400776826", "createdAt": "2020-03-31T09:40:13Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,335 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+tag::dfas-alpha[]\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+end::dfas-alpha[]\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+tag::dfas-downsample-factor[]\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+end::dfas-downsample-factor[]\n+\n+tag::dfas-eta[]\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+end::dfas-eta[]\n+\n+tag::dfas-eta-growth[]\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies the rate at which the `eta` increases for each new tree that is added to the \n+forest. For example, a rate of `1.05` increases `eta` by 5%.\n+end::dfas-eta-growth[]\n+\n+tag::dfas-feature-bag-fraction[]\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+end::dfas-feature-bag-fraction[]\n+\n+tag::dfas-gamma[]\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+end::dfas-gamma[]\n+\n+tag::dfas-lambda[]\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+end::dfas-lambda[]\n+\n+tag::dfas-max-attempts[]\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+end::dfas-max-attempts[]\n+\n+tag::dfas-max-optimization-rounds[]\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the Bayesian optimization procedure. \n+The maximum number of steps is determined based on the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+end::dfas-max-optimization-rounds[]\n+\n+tag::dfas-max-trees[]\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+end::dfas-max-trees[]\n+\n+tag::dfas-num-folds[]\n+`num_folds`::::\n+(integer)\n+The maximum number of folds for the cross-validation procedure.\n+end::dfas-num-folds[]\n+\n+tag::dfas-num-splits[]\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+end::dfas-num-splits[]\n+\n+tag::dfas-soft-limit[]\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+end::dfas-soft-limit[]\n+\n+tag::dfas-soft-tolerance[]\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+end::dfas-soft-tolerance[]\n+======\n+//End class_hyperparameters\n+\n+tag::dfas-iteration[]\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7bec16545e994f52234222a7304327e960024cc"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NzYwOQ==", "bodyText": "This should explain this is the runtime of the analysis itself, not the whole job's. Note the job involves other steps that take time (e.g. reindexing, etc.) that are not accounted for by this measurement.", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400777609", "createdAt": "2020-03-31T09:41:33Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,335 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+tag::dfas-alpha[]\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+end::dfas-alpha[]\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+tag::dfas-downsample-factor[]\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+end::dfas-downsample-factor[]\n+\n+tag::dfas-eta[]\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+end::dfas-eta[]\n+\n+tag::dfas-eta-growth[]\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies the rate at which the `eta` increases for each new tree that is added to the \n+forest. For example, a rate of `1.05` increases `eta` by 5%.\n+end::dfas-eta-growth[]\n+\n+tag::dfas-feature-bag-fraction[]\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+end::dfas-feature-bag-fraction[]\n+\n+tag::dfas-gamma[]\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+end::dfas-gamma[]\n+\n+tag::dfas-lambda[]\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+end::dfas-lambda[]\n+\n+tag::dfas-max-attempts[]\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+end::dfas-max-attempts[]\n+\n+tag::dfas-max-optimization-rounds[]\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the Bayesian optimization procedure. \n+The maximum number of steps is determined based on the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+end::dfas-max-optimization-rounds[]\n+\n+tag::dfas-max-trees[]\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+end::dfas-max-trees[]\n+\n+tag::dfas-num-folds[]\n+`num_folds`::::\n+(integer)\n+The maximum number of folds for the cross-validation procedure.\n+end::dfas-num-folds[]\n+\n+tag::dfas-num-splits[]\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+end::dfas-num-splits[]\n+\n+tag::dfas-soft-limit[]\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+end::dfas-soft-limit[]\n+\n+tag::dfas-soft-tolerance[]\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+end::dfas-soft-tolerance[]\n+======\n+//End class_hyperparameters\n+\n+tag::dfas-iteration[]\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+end::dfas-iteration[]\n+\n+tag::dfas-timestamp[]\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+end::dfas-timestamp[]\n+\n+//Begin class_timing_stats\n+tag::dfas-timing-stats[]\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n+end::dfas-timing-stats[]\n++\n+.Properties of `timing_stats`\n+[%collapsible%open]\n+======\n+tag::dfas-timing-stats-elapsed[]\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7bec16545e994f52234222a7304327e960024cc"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3ODE5NQ==", "bodyText": "It might be simpler to explain this as \"Runtime of the latest iteration of the classification analysis in milliseconds\"", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400778195", "createdAt": "2020-03-31T09:42:26Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,335 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+tag::dfas-alpha[]\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+end::dfas-alpha[]\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+tag::dfas-downsample-factor[]\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+end::dfas-downsample-factor[]\n+\n+tag::dfas-eta[]\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+end::dfas-eta[]\n+\n+tag::dfas-eta-growth[]\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies the rate at which the `eta` increases for each new tree that is added to the \n+forest. For example, a rate of `1.05` increases `eta` by 5%.\n+end::dfas-eta-growth[]\n+\n+tag::dfas-feature-bag-fraction[]\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+end::dfas-feature-bag-fraction[]\n+\n+tag::dfas-gamma[]\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+end::dfas-gamma[]\n+\n+tag::dfas-lambda[]\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+end::dfas-lambda[]\n+\n+tag::dfas-max-attempts[]\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+end::dfas-max-attempts[]\n+\n+tag::dfas-max-optimization-rounds[]\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the Bayesian optimization procedure. \n+The maximum number of steps is determined based on the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+end::dfas-max-optimization-rounds[]\n+\n+tag::dfas-max-trees[]\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+end::dfas-max-trees[]\n+\n+tag::dfas-num-folds[]\n+`num_folds`::::\n+(integer)\n+The maximum number of folds for the cross-validation procedure.\n+end::dfas-num-folds[]\n+\n+tag::dfas-num-splits[]\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+end::dfas-num-splits[]\n+\n+tag::dfas-soft-limit[]\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+end::dfas-soft-limit[]\n+\n+tag::dfas-soft-tolerance[]\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+end::dfas-soft-tolerance[]\n+======\n+//End class_hyperparameters\n+\n+tag::dfas-iteration[]\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+end::dfas-iteration[]\n+\n+tag::dfas-timestamp[]\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+end::dfas-timestamp[]\n+\n+//Begin class_timing_stats\n+tag::dfas-timing-stats[]\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n+end::dfas-timing-stats[]\n++\n+.Properties of `timing_stats`\n+[%collapsible%open]\n+======\n+tag::dfas-timing-stats-elapsed[]\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+end::dfas-timing-stats-elapsed[]\n+\n+tag::dfas-timing-stats-iteration[]\n+`iteration_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} since the last iteration in milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7bec16545e994f52234222a7304327e960024cc"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3ODUxMA==", "bodyText": "name -> type ?", "url": "https://github.com/elastic/elasticsearch/pull/53881#discussion_r400778510", "createdAt": "2020-03-31T09:42:54Z", "author": {"login": "dimitris-athanasiou"}, "path": "docs/reference/ml/ml-shared.asciidoc", "diffHunk": "@@ -507,6 +507,335 @@ tag::data-frame-analytics-stats[]\n An array of statistics objects for {dfanalytics-jobs}, which are\n sorted by the `id` value in ascending order.\n \n+//Begin analysis_stats\n+`analysis_stats`::\n+(object)\n+An object containing statistical data about the analysis.\n++\n+.Properties of `analysis_stats`\n+[%collapsible%open]\n+====\n+//Begin classification_stats\n+`classification_stats`:::\n+(object)\n+An object containing statistical data about the {classanalysis}.\n++\n+.Properties of `classification_stats`\n+[%collapsible%open]\n+=====\n+//Begin class_hyperparameters\n+`hyperparameters`::::\n+(object)\n+An object containing the parameters of the {classanalysis}.\n++\n+.Properties of `hyperparameters`\n+[%collapsible%open]\n+======\n+tag::dfas-alpha[]\n+`alpha`::::\n+(double)\n+Regularization factor to penalize deeper trees when training decision trees.\n+end::dfas-alpha[]\n+\n+`class_assignment_objective`::::\n+(string)\n+Defines whether class assignment maximizes the accuracy or the minimum recall \n+metric. Possible values are `maximize_accuracy` and `maximize_minimum_recall`.\n+\n+tag::dfas-downsample-factor[]\n+`downsample_factor`::::\n+(double)\n+The value of the downsample factor.\n+end::dfas-downsample-factor[]\n+\n+tag::dfas-eta[]\n+`eta`::::\n+(double)\n+The value of the eta hyperparameter.\n+end::dfas-eta[]\n+\n+tag::dfas-eta-growth[]\n+`eta_growth_rate_per_tree`::::\n+(double)\n+Specifies the rate at which the `eta` increases for each new tree that is added to the \n+forest. For example, a rate of `1.05` increases `eta` by 5%.\n+end::dfas-eta-growth[]\n+\n+tag::dfas-feature-bag-fraction[]\n+`feature_bag_fraction`::::\n+(double)\n+The fraction of features that is used when selecting a random bag for each \n+candidate split.\n+end::dfas-feature-bag-fraction[]\n+\n+tag::dfas-gamma[]\n+`gamma`::::\n+(double)\n+Regularization factor to penalize trees with large numbers of nodes.\n+end::dfas-gamma[]\n+\n+tag::dfas-lambda[]\n+`lambda`::::\n+(double)\n+Regularization factor to penalize large leaf weights.\n+end::dfas-lambda[]\n+\n+tag::dfas-max-attempts[]\n+`max_attempts_to_add_tree`::::\n+(integer)\n+If the algorithm fails to determine a non-trivial tree (more than a single \n+leaf), this parameter determines how many of such consecutive failures are \n+tolerated. Once the number of attempts exceeds the threshold, the forest \n+training stops.\n+end::dfas-max-attempts[]\n+\n+tag::dfas-max-optimization-rounds[]\n+`max_optimization_rounds_per_hyperparameter`::::\n+(integer)\n+A multiplier responsible for determining the maximum number of \n+hyperparameter optimization steps in the Bayesian optimization procedure. \n+The maximum number of steps is determined based on the number of undefined hyperparameters \n+times the maximum optimization rounds per hyperparameter.\n+end::dfas-max-optimization-rounds[]\n+\n+tag::dfas-max-trees[]\n+`max_trees`::::\n+(integer)\n+The maximum number of trees in the forest.\n+end::dfas-max-trees[]\n+\n+tag::dfas-num-folds[]\n+`num_folds`::::\n+(integer)\n+The maximum number of folds for the cross-validation procedure.\n+end::dfas-num-folds[]\n+\n+tag::dfas-num-splits[]\n+`num_splits_per_feature`::::\n+(integer)\n+Determines the maximum number of splits for every feature that can occur in a \n+decision tree when the tree is trained.\n+end::dfas-num-splits[]\n+\n+tag::dfas-soft-limit[]\n+`soft_tree_depth_limit`::::\n+(double)\n+Tree depth limit is used for calculating the tree depth penalty. This is a soft \n+limit, it can be exceeded.\n+end::dfas-soft-limit[]\n+\n+tag::dfas-soft-tolerance[]\n+`soft_tree_depth_tolerance`::::\n+(double)\n+Tree depth tolerance is used for calculating the tree depth penalty. This is a \n+soft limit, it can be exceeded.\n+end::dfas-soft-tolerance[]\n+======\n+//End class_hyperparameters\n+\n+tag::dfas-iteration[]\n+`iteration`::::\n+(integer)\n+The number of iterations on the {dfanalytics-job}.\n+end::dfas-iteration[]\n+\n+tag::dfas-timestamp[]\n+`timestamp`::::\n+(date)\n+The timestamp when the statistics returned in milliseconds since the epoch.\n+end::dfas-timestamp[]\n+\n+//Begin class_timing_stats\n+tag::dfas-timing-stats[]\n+`timing_stats`::::\n+(object)\n+An object containing time statistics about the {dfanalytics-job}.\n+end::dfas-timing-stats[]\n++\n+.Properties of `timing_stats`\n+[%collapsible%open]\n+======\n+tag::dfas-timing-stats-elapsed[]\n+`elapsed_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} in milliseconds.\n+end::dfas-timing-stats-elapsed[]\n+\n+tag::dfas-timing-stats-iteration[]\n+`iteration_time`::::\n+(integer)\n+Runtime of the {dfanalytics-job} since the last iteration in milliseconds.\n+end::dfas-timing-stats-iteration[]\n+======\n+//End class_timing_stats\n+\n+//Begin class_validation_loss\n+tag::dfas-validation-loss[]\n+`validation_loss`::::\n+(object)\n+An object containing information about validation loss.\n+end::dfas-validation-loss[]\n++\n+.Properties of `validation_loss`\n+[%collapsible%open]\n+======\n+tag::dfas-validation-loss-type[]\n+`loss_type`::::\n+(string)\n+The name of the loss metric. For example, `binomial_logistic`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7bec16545e994f52234222a7304327e960024cc"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2461f86a684a819ec11f78c9bb4af4a8dfa296", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/1e2461f86a684a819ec11f78c9bb4af4a8dfa296", "committedDate": "2020-03-31T09:58:59Z", "message": "[DOCS] Addresses feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTgxNjg3", "url": "https://github.com/elastic/elasticsearch/pull/53881#pullrequestreview-384581687", "createdAt": "2020-03-31T10:01:23Z", "commit": {"oid": "1e2461f86a684a819ec11f78c9bb4af4a8dfa296"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1923, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}