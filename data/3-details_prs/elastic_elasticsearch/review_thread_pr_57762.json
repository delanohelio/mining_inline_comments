{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4Njc0MzEy", "number": 57762, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozMjo0OFrOEDEtsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMDo1MlrOEDbqIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU4NDE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozMjo0OFrOGf62ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozMjo0OFrOGf62ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMzMyMg==", "bodyText": "This'd probably be a little cleaner as a private final method with early returns.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436123322", "createdAt": "2020-06-05T19:32:48Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -269,8 +275,36 @@ public ValuesSourceConfig(\n         this.unmapped = unmapped;\n         this.script = script;\n         this.scriptValueType = scriptValueType;\n+        this.missing = missing;\n+        this.timeZone = timeZone;\n+        this.format = format == null ? DocValueFormat.RAW : format;\n         this.nowSupplier = nowSupplier;\n \n+        if (!valid()) {\n+            // TODO: resolve no longer generates invalid configs.  Once VSConfig is immutable, we can drop this check\n+            throw new IllegalStateException(\n+                \"value source config is invalid; must have either a field context or a script or marked as unwrapped\");\n+        }\n+\n+        final ValuesSource vs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU4NzQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNDoyMFrOGf644A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1Mzo0M1rOGf7elA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMzg3Mg==", "bodyText": "Isn't |= the compound bitwise-or-then-assign operator?", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436123872", "createdAt": "2020-06-05T19:34:20Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -285,8 +319,12 @@ public FieldContext fieldContext() {\n         return script;\n     }\n \n-    public boolean unmapped() {\n-        return unmapped;\n+    /**\n+     * Returns true if the values source configured by this object can yield values.  We might not be able to yield values if, for example,\n+     * the specified field does not exist on this index.\n+     */\n+    public boolean hasValues() {\n+        return fieldContext != null || script != null || missing != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMzUyNA==", "bodyText": "Ignore this. On my browser |= and != look very similar.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436133524", "createdAt": "2020-06-05T19:53:43Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -285,8 +319,12 @@ public FieldContext fieldContext() {\n         return script;\n     }\n \n-    public boolean unmapped() {\n-        return unmapped;\n+    /**\n+     * Returns true if the values source configured by this object can yield values.  We might not be able to yield values if, for example,\n+     * the specified field does not exist on this index.\n+     */\n+    public boolean hasValues() {\n+        return fieldContext != null || script != null || missing != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMzg3Mg=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU5MTUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNTo1MlrOGf67cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNTo1MlrOGf67cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNDUyOQ==", "bodyText": "Run it through the code-formatter?", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436124529", "createdAt": "2020-06-05T19:35:52Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -154,10 +154,9 @@ private static ValuesSourceConfig internalResolve(QueryShardContext context,\n         if (valuesSourceType == null) {\n             valuesSourceType = defaultValueSourceType;\n         }\n-        config = new ValuesSourceConfig(valuesSourceType, fieldContext, unmapped, aggregationScript, scriptValueType, context::nowInMillis);\n-        config.format(resolveFormat(format, valuesSourceType, timeZone, fieldType));\n-        config.missing(missing);\n-        config.timezone(timeZone);\n+        DocValueFormat docValueFormat = resolveFormat(format, valuesSourceType, timeZone, fieldType);\n+        config = new ValuesSourceConfig(valuesSourceType, fieldContext, unmapped, aggregationScript, scriptValueType, missing,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU5MjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNjowMlrOGf67ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNjowMlrOGf67ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNDYxMQ==", "bodyText": "Can this be final too?", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436124611", "createdAt": "2020-06-05T19:36:02Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -239,18 +241,19 @@ public static ValuesSourceConfig resolveFieldOnly(MappedFieldType fieldType,\n      * Convenience method for creating unmapped configs\n      */\n     public static ValuesSourceConfig resolveUnmapped(ValuesSourceType valuesSourceType, QueryShardContext queryShardContext) {\n-        return new ValuesSourceConfig(valuesSourceType, null, true, null, null, queryShardContext::nowInMillis);\n+        return new ValuesSourceConfig(valuesSourceType, null, true, null, null, null, null, null, queryShardContext::nowInMillis);\n     }\n \n     private final ValuesSourceType valuesSourceType;\n-    private FieldContext fieldContext;\n-    private AggregationScript.LeafFactory script;\n-    private ValueType scriptValueType;\n-    private boolean unmapped;\n-    private DocValueFormat format = DocValueFormat.RAW;\n-    private Object missing;\n-    private ZoneId timeZone;\n-    private LongSupplier nowSupplier;\n+    private final FieldContext fieldContext;\n+    private final AggregationScript.LeafFactory script;\n+    private final ValueType scriptValueType;\n+    private final boolean unmapped;\n+    private final DocValueFormat format;\n+    private final Object missing;\n+    private final ZoneId timeZone;\n+    private final LongSupplier nowSupplier;\n+    private ValuesSource valuesSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDI5Mzg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1MDozMVrOGgcFVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1MDozMVrOGgcFVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2NzczNA==", "bodyText": "\ud83d\udc4d to getting the prepared rounding in the ctor.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436667734", "createdAt": "2020-06-08T12:50:31Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "diffHunk": "@@ -76,18 +75,21 @@ public long minDocCount() {\n     }\n \n     @Override\n-    protected Aggregator doCreateInternal(ValuesSource valuesSource,\n-                                            SearchContext searchContext,\n-                                            Aggregator parent,\n-                                            boolean collectsFromSingleBucket,\n-                                            Map<String, Object> metadata) throws IOException {\n+    protected Aggregator doCreateInternal(\n+        SearchContext searchContext,\n+        Aggregator parent,\n+        boolean collectsFromSingleBucket,\n+        Map<String, Object> metadata) throws IOException {\n         AggregatorSupplier aggregatorSupplier = queryShardContext.getValuesSourceRegistry().getAggregator(config,\n             DateHistogramAggregationBuilder.NAME);\n         if (aggregatorSupplier instanceof DateHistogramAggregationSupplier == false) {\n             throw new AggregationExecutionException(\"Registry miss-match - expected DateHistogramAggregationSupplier, found [\" +\n                 aggregatorSupplier.getClass().toString() + \"]\");\n         }\n-        Rounding.Prepared preparedRounding = valuesSource.roundingPreparer(queryShardContext.getIndexReader()).apply(shardRounding);\n+        // TODO: Is there a reason not to get the prepared rounding in the supplier itself?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDMyNTQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1ODowMFrOGgcYuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1ODowMFrOGgcYuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3MjY5OQ==", "bodyText": "Can this be a ctor reference like the others? It looks like it from here.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436672699", "createdAt": "2020-06-08T12:58:00Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java", "diffHunk": "@@ -106,17 +105,16 @@ protected XPackLicenseState getLicenseState() {\n \n     private static void registerGeoShapeBoundsAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoBoundsAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSource, wrapLongitude, metadata)\n-                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, (GeoShapeValuesSource) valuesSource,\n-                wrapLongitude, metadata));\n+            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata)\n+                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDMzNjMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1OTo0NlrOGgcfYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDowNDo0MVrOGiKMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NDQwMQ==", "bodyText": "I think it'd be a little cleaner to make a \"wrapper\" MetricAggregatorSupplier that checks the license state and calls a ctor reference if it is allowed.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436674401", "createdAt": "2020-06-08T12:59:46Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java", "diffHunk": "@@ -106,17 +105,16 @@ protected XPackLicenseState getLicenseState() {\n \n     private static void registerGeoShapeBoundsAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoBoundsAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSource, wrapLongitude, metadata)\n-                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, (GeoShapeValuesSource) valuesSource,\n-                wrapLongitude, metadata));\n+            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata)\n+                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata));\n     }\n \n     private void registerGeoShapeCentroidAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoCentroidAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoCentroidAggregatorSupplier) (name, aggregationContext, parent, valuesSource, metadata)\n+            (MetricAggregatorSupplier) (name, valuesSourceConfig, aggregationContext, parent, metadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzI5OQ==", "bodyText": "I'm +0 on this right now.  It doesn't come up that often, and I'm not sure the wrapper actually makes it any clearer.  If you feel strongly, I can do it (or would be happy to review your version if you like), but I don't think it's a big gain over what we have now personally.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r438387299", "createdAt": "2020-06-10T20:24:33Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java", "diffHunk": "@@ -106,17 +105,16 @@ protected XPackLicenseState getLicenseState() {\n \n     private static void registerGeoShapeBoundsAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoBoundsAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSource, wrapLongitude, metadata)\n-                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, (GeoShapeValuesSource) valuesSource,\n-                wrapLongitude, metadata));\n+            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata)\n+                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata));\n     }\n \n     private void registerGeoShapeCentroidAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoCentroidAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoCentroidAggregatorSupplier) (name, aggregationContext, parent, valuesSource, metadata)\n+            (MetricAggregatorSupplier) (name, valuesSourceConfig, aggregationContext, parent, metadata)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NDQwMQ=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MTgxOA==", "bodyText": "If we only do it once I guess it doesn't buy much. I think it'd be a little clearer that we're just checking the license and then doing the ctor reference thing, but its no big deal.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r438471818", "createdAt": "2020-06-11T00:04:41Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java", "diffHunk": "@@ -106,17 +105,16 @@ protected XPackLicenseState getLicenseState() {\n \n     private static void registerGeoShapeBoundsAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoBoundsAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSource, wrapLongitude, metadata)\n-                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, (GeoShapeValuesSource) valuesSource,\n-                wrapLongitude, metadata));\n+            (GeoBoundsAggregatorSupplier) (name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata)\n+                -> new GeoShapeBoundsAggregator(name, aggregationContext, parent, valuesSourceConfig, wrapLongitude, metadata));\n     }\n \n     private void registerGeoShapeCentroidAggregator(ValuesSourceRegistry.Builder builder) {\n         builder.register(GeoCentroidAggregationBuilder.NAME, GeoShapeValuesSourceType.instance(),\n-            (GeoCentroidAggregatorSupplier) (name, aggregationContext, parent, valuesSource, metadata)\n+            (MetricAggregatorSupplier) (name, valuesSourceConfig, aggregationContext, parent, metadata)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NDQwMQ=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDM0MzM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/SpatialPluginTests.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMDo1MlrOGgcjrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoyNDowMFrOGgogbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NTUwMQ==", "bodyText": "This is a super long number of arguments! I'm glad we don't call the ctor very much though.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436675501", "createdAt": "2020-06-08T13:00:52Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/SpatialPluginTests.java", "diffHunk": "@@ -35,8 +35,8 @@ public void testGeoCentroidLicenseCheck() {\n             List<Consumer<ValuesSourceRegistry.Builder>> registrar = plugin.getAggregationExtentions();\n             registrar.forEach(c -> c.accept(registryBuilder));\n             ValuesSourceRegistry registry = registryBuilder.build();\n-            GeoCentroidAggregatorSupplier centroidSupplier = (GeoCentroidAggregatorSupplier) registry.getAggregator(\n-                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, false, null, null, null),\n+            MetricAggregatorSupplier centroidSupplier = (MetricAggregatorSupplier) registry.getAggregator(\n+                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, true, null, null, null, null, null, null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NDAxMg==", "bodyText": "Yeah, outside of testing, the only thing that should be calling that constructor is the various resolve factory methods, which are what the rest of the framework should call.  Not that they don't have a lot of arguments too.  I suppose we could have a default constructor for tests, but I don't like adding production code that's only supposed to be called from tests.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436694012", "createdAt": "2020-06-08T13:20:55Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/SpatialPluginTests.java", "diffHunk": "@@ -35,8 +35,8 @@ public void testGeoCentroidLicenseCheck() {\n             List<Consumer<ValuesSourceRegistry.Builder>> registrar = plugin.getAggregationExtentions();\n             registrar.forEach(c -> c.accept(registryBuilder));\n             ValuesSourceRegistry registry = registryBuilder.build();\n-            GeoCentroidAggregatorSupplier centroidSupplier = (GeoCentroidAggregatorSupplier) registry.getAggregator(\n-                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, false, null, null, null),\n+            MetricAggregatorSupplier centroidSupplier = (MetricAggregatorSupplier) registry.getAggregator(\n+                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, true, null, null, null, null, null, null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NTUwMQ=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5OTc5OQ==", "bodyText": "How often do we call it in tests? It doesn't look like we call it directly very often. I think mostly we use the production resolution framework.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436699799", "createdAt": "2020-06-08T13:27:04Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/SpatialPluginTests.java", "diffHunk": "@@ -35,8 +35,8 @@ public void testGeoCentroidLicenseCheck() {\n             List<Consumer<ValuesSourceRegistry.Builder>> registrar = plugin.getAggregationExtentions();\n             registrar.forEach(c -> c.accept(registryBuilder));\n             ValuesSourceRegistry registry = registryBuilder.build();\n-            GeoCentroidAggregatorSupplier centroidSupplier = (GeoCentroidAggregatorSupplier) registry.getAggregator(\n-                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, false, null, null, null),\n+            MetricAggregatorSupplier centroidSupplier = (MetricAggregatorSupplier) registry.getAggregator(\n+                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, true, null, null, null, null, null, null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NTUwMQ=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NzQ3Mw==", "bodyText": "Correct, there's only a handful of cases we call the constructor from tests.  I meant I didn't want to add a new test-only constructor just to clean up this case.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436867473", "createdAt": "2020-06-08T17:18:17Z", "author": {"login": "not-napoleon"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/SpatialPluginTests.java", "diffHunk": "@@ -35,8 +35,8 @@ public void testGeoCentroidLicenseCheck() {\n             List<Consumer<ValuesSourceRegistry.Builder>> registrar = plugin.getAggregationExtentions();\n             registrar.forEach(c -> c.accept(registryBuilder));\n             ValuesSourceRegistry registry = registryBuilder.build();\n-            GeoCentroidAggregatorSupplier centroidSupplier = (GeoCentroidAggregatorSupplier) registry.getAggregator(\n-                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, false, null, null, null),\n+            MetricAggregatorSupplier centroidSupplier = (MetricAggregatorSupplier) registry.getAggregator(\n+                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, true, null, null, null, null, null, null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NTUwMQ=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3MTI3Ng==", "bodyText": "I'm happy with that, yeah.", "url": "https://github.com/elastic/elasticsearch/pull/57762#discussion_r436871276", "createdAt": "2020-06-08T17:24:00Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/SpatialPluginTests.java", "diffHunk": "@@ -35,8 +35,8 @@ public void testGeoCentroidLicenseCheck() {\n             List<Consumer<ValuesSourceRegistry.Builder>> registrar = plugin.getAggregationExtentions();\n             registrar.forEach(c -> c.accept(registryBuilder));\n             ValuesSourceRegistry registry = registryBuilder.build();\n-            GeoCentroidAggregatorSupplier centroidSupplier = (GeoCentroidAggregatorSupplier) registry.getAggregator(\n-                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, false, null, null, null),\n+            MetricAggregatorSupplier centroidSupplier = (MetricAggregatorSupplier) registry.getAggregator(\n+                new ValuesSourceConfig(GeoShapeValuesSourceType.instance(), null, true, null, null, null, null, null, null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NTUwMQ=="}, "originalCommit": {"oid": "93cf920dbc2510f3fc54236dc7613c2ad57c3ee4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3602, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}