{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTIzNTY1", "number": 60316, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMDoyMlrOEVIMWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOToxMTowMlrOEVIa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTg5Nzg3OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultSemanticAnalysisPhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMDoyMlrOG7tcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowMTowNlrOG8Smfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2Mzc5MA==", "bodyText": "Does this close #51841?", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465263790", "createdAt": "2020-08-04T19:00:22Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultSemanticAnalysisPhase.java", "diffHunk": "@@ -261,13 +261,6 @@ public void visitFunction(SFunction userFunctionNode, ScriptScope scriptScope) {\n         if (methodEscape) {\n             functionScope.setCondition(userFunctionNode, MethodEscape.class);\n         }\n-\n-        // TODO: do not specialize for execute\n-        // TODO: https://github.com/elastic/elasticsearch/issues/51841", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MjUxMA==", "bodyText": "Yes!", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465872510", "createdAt": "2020-08-05T17:01:06Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultSemanticAnalysisPhase.java", "diffHunk": "@@ -261,13 +261,6 @@ public void visitFunction(SFunction userFunctionNode, ScriptScope scriptScope) {\n         if (methodEscape) {\n             functionScope.setCondition(userFunctionNode, MethodEscape.class);\n         }\n-\n-        // TODO: do not specialize for execute\n-        // TODO: https://github.com/elastic/elasticsearch/issues/51841", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2Mzc5MA=="}, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkwMjQ4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMTo0MVrOG7tfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowMjowOFrOG8So5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NDQ5Mg==", "bodyText": "Should you mention injectStaticFields here?", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465264492", "createdAt": "2020-08-04T19:01:41Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -176,26 +179,187 @@\n import org.elasticsearch.painless.symbol.Decorations.UnaryType;\n import org.elasticsearch.painless.symbol.Decorations.UpcastPainlessCast;\n import org.elasticsearch.painless.symbol.Decorations.ValueType;\n+import org.elasticsearch.painless.symbol.FunctionTable;\n import org.elasticsearch.painless.symbol.FunctionTable.LocalFunction;\n import org.elasticsearch.painless.symbol.ScriptScope;\n import org.elasticsearch.painless.symbol.SemanticScope.Variable;\n+import org.objectweb.asm.Opcodes;\n \n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.MethodType;\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Pattern;\n \n-public class DefaultUserTreeToIRTreeVisitor implements UserTreeVisitor<ScriptScope> {\n+public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope> {\n \n-    private ClassNode irClassNode;\n+    protected ClassNode irClassNode;\n \n-    protected IRNode visit(ANode userNode, ScriptScope scriptScope) {\n-        if (userNode == null) {\n-            return null;\n-        } else {\n-            userNode.visit(this, scriptScope);\n-            return scriptScope.getDecoration(userNode, IRNodeDecoration.class).getIRNode();\n+    /**\n+     * This injects additional ir nodes required for resolving the def type at runtime.\n+     * This includes injection of ir nodes to add a function to call\n+     * {@link DefBootstrap#bootstrap(PainlessLookup, FunctionTable, Lookup, String, MethodType, int, int, Object...)}\n+     * to do the runtime resolution.\n+     */\n+    protected void injectBootstrapMethod(ScriptScope scriptScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MzEyNg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465873126", "createdAt": "2020-08-05T17:02:08Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -176,26 +179,187 @@\n import org.elasticsearch.painless.symbol.Decorations.UnaryType;\n import org.elasticsearch.painless.symbol.Decorations.UpcastPainlessCast;\n import org.elasticsearch.painless.symbol.Decorations.ValueType;\n+import org.elasticsearch.painless.symbol.FunctionTable;\n import org.elasticsearch.painless.symbol.FunctionTable.LocalFunction;\n import org.elasticsearch.painless.symbol.ScriptScope;\n import org.elasticsearch.painless.symbol.SemanticScope.Variable;\n+import org.objectweb.asm.Opcodes;\n \n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.MethodType;\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Pattern;\n \n-public class DefaultUserTreeToIRTreeVisitor implements UserTreeVisitor<ScriptScope> {\n+public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope> {\n \n-    private ClassNode irClassNode;\n+    protected ClassNode irClassNode;\n \n-    protected IRNode visit(ANode userNode, ScriptScope scriptScope) {\n-        if (userNode == null) {\n-            return null;\n-        } else {\n-            userNode.visit(this, scriptScope);\n-            return scriptScope.getDecoration(userNode, IRNodeDecoration.class).getIRNode();\n+    /**\n+     * This injects additional ir nodes required for resolving the def type at runtime.\n+     * This includes injection of ir nodes to add a function to call\n+     * {@link DefBootstrap#bootstrap(PainlessLookup, FunctionTable, Lookup, String, MethodType, int, int, Object...)}\n+     * to do the runtime resolution.\n+     */\n+    protected void injectBootstrapMethod(ScriptScope scriptScope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NDQ5Mg=="}, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkzMzcxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOToxMDo0NVrOG7tyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNToyOVrOG8TG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTMwNA==", "bodyText": "remove indent", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465269304", "createdAt": "2020-08-04T19:10:45Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -332,11 +388,11 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n             memberCallNode.setLocation(internalLocation);\n             memberCallNode.setExpressionType(ScriptException.class);\n             memberCallNode.setLocalFunction(new LocalFunction(\n-                    \"convertToScriptException\",\n-                    ScriptException.class,\n-                    Arrays.asList(Throwable.class, Map.class),\n-                    true,\n-                    false\n+                            \"convertToScriptException\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDc5OQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465880799", "createdAt": "2020-08-05T17:15:29Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -332,11 +388,11 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n             memberCallNode.setLocation(internalLocation);\n             memberCallNode.setExpressionType(ScriptException.class);\n             memberCallNode.setLocalFunction(new LocalFunction(\n-                    \"convertToScriptException\",\n-                    ScriptException.class,\n-                    Arrays.asList(Throwable.class, Map.class),\n-                    true,\n-                    false\n+                            \"convertToScriptException\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTMwNA=="}, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkzMzkxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOToxMDo1MFrOG7tyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNTo0OVrOG8THkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTM0NQ==", "bodyText": "remove indent", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465269345", "createdAt": "2020-08-04T19:10:50Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -367,15 +423,15 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n             callSubNode.setExpressionType(Map.class);\n             callSubNode.setBox(PainlessExplainError.class);\n             callSubNode.setMethod(new PainlessMethod(\n-                    PainlessExplainError.class.getMethod(\n-                            \"getHeaders\",\n-                            PainlessLookup.class),\n-                    PainlessExplainError.class,\n-                    null,\n-                    Collections.emptyList(),\n-                    null,\n-                    null,\n-                    null\n+                            PainlessExplainError.class.getMethod(\n+                                    \"getHeaders\",\n+                                    PainlessLookup.class),\n+                            PainlessExplainError.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDk3OQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465880979", "createdAt": "2020-08-05T17:15:49Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -367,15 +423,15 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n             callSubNode.setExpressionType(Map.class);\n             callSubNode.setBox(PainlessExplainError.class);\n             callSubNode.setMethod(new PainlessMethod(\n-                    PainlessExplainError.class.getMethod(\n-                            \"getHeaders\",\n-                            PainlessLookup.class),\n-                    PainlessExplainError.class,\n-                    null,\n-                    Collections.emptyList(),\n-                    null,\n-                    null,\n-                    null\n+                            PainlessExplainError.class.getMethod(\n+                                    \"getHeaders\",\n+                                    PainlessLookup.class),\n+                            PainlessExplainError.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTM0NQ=="}, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkzNDQ4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOToxMDo1OFrOG7tysA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNjoyMFrOG8TIvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTQyNA==", "bodyText": "remove indent", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465269424", "createdAt": "2020-08-04T19:10:58Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -418,11 +474,11 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n                 memberCallNode.setLocation(internalLocation);\n                 memberCallNode.setExpressionType(ScriptException.class);\n                 memberCallNode.setLocalFunction(new LocalFunction(\n-                        \"convertToScriptException\",\n-                        ScriptException.class,\n-                        Arrays.asList(Throwable.class, Map.class),\n-                        true,\n-                        false\n+                                \"convertToScriptException\",\n+                                ScriptException.class,\n+                                Arrays.asList(Throwable.class, Map.class),\n+                                true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTI3OQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465881279", "createdAt": "2020-08-05T17:16:20Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -418,11 +474,11 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n                 memberCallNode.setLocation(internalLocation);\n                 memberCallNode.setExpressionType(ScriptException.class);\n                 memberCallNode.setLocalFunction(new LocalFunction(\n-                        \"convertToScriptException\",\n-                        ScriptException.class,\n-                        Arrays.asList(Throwable.class, Map.class),\n-                        true,\n-                        false\n+                                \"convertToScriptException\",\n+                                ScriptException.class,\n+                                Arrays.asList(Throwable.class, Map.class),\n+                                true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTQyNA=="}, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkzNDkwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOToxMTowMlrOG7ty5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyMjo0N1rOG8TXQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTQ3Nw==", "bodyText": "remove indent", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465269477", "createdAt": "2020-08-04T19:11:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -452,13 +508,13 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n                 callSubNode.setExpressionType(Map.class);\n                 callSubNode.setBox(Collections.class);\n                 callSubNode.setMethod(new PainlessMethod(\n-                        Collections.class.getMethod(\"emptyMap\"),\n-                        Collections.class,\n-                        null,\n-                        Collections.emptyList(),\n-                        null,\n-                        null,\n-                        null\n+                                Collections.class.getMethod(\"emptyMap\"),\n+                                Collections.class,\n+                                null,\n+                                Collections.emptyList(),\n+                                null,\n+                                null,\n+                                null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NDk5Mg==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/60316#discussion_r465884992", "createdAt": "2020-08-05T17:22:47Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java", "diffHunk": "@@ -452,13 +508,13 @@ protected static void injectSandboxExceptions(FunctionNode functionNode) {\n                 callSubNode.setExpressionType(Map.class);\n                 callSubNode.setBox(Collections.class);\n                 callSubNode.setMethod(new PainlessMethod(\n-                        Collections.class.getMethod(\"emptyMap\"),\n-                        Collections.class,\n-                        null,\n-                        Collections.emptyList(),\n-                        null,\n-                        null,\n-                        null\n+                                Collections.class.getMethod(\"emptyMap\"),\n+                                Collections.class,\n+                                null,\n+                                Collections.emptyList(),\n+                                null,\n+                                null,\n+                                null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTQ3Nw=="}, "originalCommit": {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4"}, "originalPosition": 347}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2782, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}