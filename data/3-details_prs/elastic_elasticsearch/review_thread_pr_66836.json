{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTUwODQ0", "number": 66836, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNjoyMDowMVrOFJkNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNjoyMDowMVrOFJkNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTc0NzMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/TransportChangePasswordActionTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNjoyMDowMVrOIL8-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNjowMjoxMFrOIMHotg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwNDM0Nw==", "bodyText": "These still can be the same as the one returned by getFastHashingAlgorithmForTest. We need to use a randomFrom in both places with different contents", "url": "https://github.com/elastic/elasticsearch/pull/66836#discussion_r549404347", "createdAt": "2020-12-28T16:20:01Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/TransportChangePasswordActionTests.java", "diffHunk": "@@ -169,7 +169,7 @@ public void testIncorrectPasswordHashingAlgorithm() {\n         TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null,\n             TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet());\n         Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(),\n-            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt\")).build();\n+            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt4\")).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530c4d6b7866c836c541398009736a654cf6c159"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwNjM2NA==", "bodyText": "I take the comment back:) still leave this up to Yang but I think we should use two randomFrom either way to make sure this won't fail if we ever  change the implementation of getFastHashingAlgorithmForTest", "url": "https://github.com/elastic/elasticsearch/pull/66836#discussion_r549406364", "createdAt": "2020-12-28T16:26:34Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/TransportChangePasswordActionTests.java", "diffHunk": "@@ -169,7 +169,7 @@ public void testIncorrectPasswordHashingAlgorithm() {\n         TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null,\n             TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet());\n         Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(),\n-            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt\")).build();\n+            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt4\")).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwNDM0Nw=="}, "originalCommit": {"oid": "530c4d6b7866c836c541398009736a654cf6c159"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NjUyOQ==", "bodyText": "Or randomOtherThan ? (drive by comment, I haven't checked the underlying logic)", "url": "https://github.com/elastic/elasticsearch/pull/66836#discussion_r549556529", "createdAt": "2020-12-29T03:38:30Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/TransportChangePasswordActionTests.java", "diffHunk": "@@ -169,7 +169,7 @@ public void testIncorrectPasswordHashingAlgorithm() {\n         TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null,\n             TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet());\n         Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(),\n-            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt\")).build();\n+            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt4\")).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwNDM0Nw=="}, "originalCommit": {"oid": "530c4d6b7866c836c541398009736a654cf6c159"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3ODkzNA==", "bodyText": "I've looked now.\nI'd propose:\n        final String systemHash = randomValueOtherThan(\n            hasher.name().toLowerCase(Locale.ROOT),\n            () -> randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt\"));\n        Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), systemHash).build();", "url": "https://github.com/elastic/elasticsearch/pull/66836#discussion_r549578934", "createdAt": "2020-12-29T06:02:10Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/TransportChangePasswordActionTests.java", "diffHunk": "@@ -169,7 +169,7 @@ public void testIncorrectPasswordHashingAlgorithm() {\n         TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null,\n             TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet());\n         Settings passwordHashingSettings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(),\n-            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt\")).build();\n+            randomFrom(\"pbkdf2_50000\", \"pbkdf2_100000\", \"bcrypt11\", \"bcrypt8\", \"bcrypt4\")).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwNDM0Nw=="}, "originalCommit": {"oid": "530c4d6b7866c836c541398009736a654cf6c159"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4378, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}