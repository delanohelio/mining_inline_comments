{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDUzMzY5", "number": 57277, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowMzo0NFrOEAf2hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToxNDoxMFrOEArYCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTU3MzE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AbstractHistogramAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowMzo0NFrOGb0EYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowMzo0NFrOGb0EYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxNzgyNQ==", "bodyText": "There was a TODO that the range and numeric version of the aggregator shared a ton of code. Now they share a superclass that provides all that code.", "url": "https://github.com/elastic/elasticsearch/pull/57277#discussion_r431817825", "createdAt": "2020-05-28T13:03:44Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AbstractHistogramAggregator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations.bucket.histogram;\n+\n+import org.apache.lucene.util.CollectionUtil;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.BucketOrder;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;\n+import org.elasticsearch.search.aggregations.bucket.histogram.InternalHistogram.EmptyBucketInfo;\n+import org.elasticsearch.search.aggregations.bucket.terms.LongKeyedBucketOrds;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+/**\n+ * Base class for functionality shared between aggregators for this\n+ * {@code histogram} aggregation.\n+ */\n+public abstract class AbstractHistogramAggregator extends BucketsAggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889efb9eba352d23a418f78f8731c4d38b42456"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTU3NDc0OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowNDoxMVrOGb0FZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowNDoxMVrOGb0FZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxODA4NA==", "bodyText": "I moved this check into the ctor so I can use the ctor reference that we've been doing elsewhere.", "url": "https://github.com/elastic/elasticsearch/pull/57277#discussion_r431818084", "createdAt": "2020-05-28T13:04:11Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java", "diffHunk": "@@ -52,36 +51,11 @@\n \n     static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n         builder.register(HistogramAggregationBuilder.NAME, CoreValuesSourceType.RANGE,\n-            new HistogramAggregatorSupplier() {\n-                @Override\n-                public Aggregator build(String name, AggregatorFactories factories, double interval, double offset,\n-                                        BucketOrder order, boolean keyed, long minDocCount, double minBound, double maxBound,\n-                                        ValuesSource valuesSource, DocValueFormat formatter, SearchContext context,\n-                                        Aggregator parent, Map<String, Object> metadata) throws IOException {\n-                    ValuesSource.Range rangeValueSource = (ValuesSource.Range) valuesSource;\n-                    if (rangeValueSource.rangeType().isNumeric() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889efb9eba352d23a418f78f8731c4d38b42456"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTU3NTY0OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowNDoyNFrOGb0F8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowNDoyNFrOGb0F8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxODIyNQ==", "bodyText": "this is the important line!", "url": "https://github.com/elastic/elasticsearch/pull/57277#discussion_r431818225", "createdAt": "2020-05-28T13:04:24Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java", "diffHunk": "@@ -117,10 +91,6 @@ protected Aggregator doCreateInternal(ValuesSource valuesSource,\n                                             Aggregator parent,\n                                             boolean collectsFromSingleBucket,\n                                             Map<String, Object> metadata) throws IOException {\n-        if (collectsFromSingleBucket == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889efb9eba352d23a418f78f8731c4d38b42456"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTU3OTI3OnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/NumericHistogramAggregatorTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowNToxOFrOGb0IMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowNToxOFrOGb0IMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxODgwMg==", "bodyText": "We do this kind of thing all over the place so I figured I'd make a utility method for it.", "url": "https://github.com/elastic/elasticsearch/pull/57277#discussion_r431818802", "createdAt": "2020-05-28T13:05:18Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/NumericHistogramAggregatorTests.java", "diffHunk": "@@ -55,11 +64,9 @@ public void testLongs() throws Exception {\n             HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"my_agg\")\n                     .field(\"field\")\n                     .interval(5);\n-            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n-            fieldType.setName(\"field\");\n             try (IndexReader reader = w.getReader()) {\n                 IndexSearcher searcher = new IndexSearcher(reader);\n-                InternalHistogram histogram = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889efb9eba352d23a418f78f8731c4d38b42456"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTQ2MTIxOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToxNDoxMFrOGcG9jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToxNDoxMFrOGcG9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyNzM3Mg==", "bodyText": "nice touch. likely usable across many future tests", "url": "https://github.com/elastic/elasticsearch/pull/57277#discussion_r432127372", "createdAt": "2020-05-28T21:14:10Z", "author": {"login": "talevy"}, "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -864,4 +866,50 @@ private void cleanupReleasables() {\n         Releasables.close(releasables);\n         releasables.clear();\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1efc38444e19a6f9adcac002055feb3f178ca252"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3843, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}