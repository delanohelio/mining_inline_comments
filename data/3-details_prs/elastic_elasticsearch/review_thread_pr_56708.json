{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTIyNjEx", "number": 56708, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1ODo1OVrOD_7Vjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjo1M1rOEAFKNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU5MDU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1ODo1OVrOGa4oGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoxMToxOFrOGbCmKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzkyOA==", "bodyText": "In general I consider Enum#ordinal to be a smell. It\u2019s a maintenance burden (to ensure they\u2019re kept in order, what if you want to insert values (equal or different), what if you want to skip a value, etc.). Even in this simple case I\u2019d avoid as a general best practice and add a dedicated field with a value we fully control. This helps reinforce avoiding the use in our codebase (imagine how dangerous this can be for serialization). From the Javadocs:\n\nMost programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as EnumSet and EnumMap.\n\nLet\u2019s change this.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430843928", "createdAt": "2020-05-27T03:58:59Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,16 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN, //most specific - little logging\n+    INFO,\n+    DEBUG,\n+    TRACE; //least specific - lots of logging\n     public static SlowLogLevel parse(String level) {\n         return valueOf(level.toUpperCase(Locale.ROOT));\n     }\n+\n+    boolean isLevelEnabledFor(SlowLogLevel levelToBeUsed) {\n+        // info is less specific then warn\n+        return this.ordinal() >= levelToBeUsed.ordinal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3NjAyMw==", "bodyText": "Agree - this was a shortcut that should be avoided. I will add a field.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430876023", "createdAt": "2020-05-27T06:04:19Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,16 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN, //most specific - little logging\n+    INFO,\n+    DEBUG,\n+    TRACE; //least specific - lots of logging\n     public static SlowLogLevel parse(String level) {\n         return valueOf(level.toUpperCase(Locale.ROOT));\n     }\n+\n+    boolean isLevelEnabledFor(SlowLogLevel levelToBeUsed) {\n+        // info is less specific then warn\n+        return this.ordinal() >= levelToBeUsed.ordinal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzkyOA=="}, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4NTU2NA==", "bodyText": "I am  also  not sure about the method name.\nI wanted to avoid isMoreSpecificThan or isLessSpecificThan (used in log4j) as they don't seem to be too  obvious to me.\nDo you think we should stick with isLevelEnabledFor for now? any other ideas?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430885564", "createdAt": "2020-05-27T06:31:05Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,16 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN, //most specific - little logging\n+    INFO,\n+    DEBUG,\n+    TRACE; //least specific - lots of logging\n     public static SlowLogLevel parse(String level) {\n         return valueOf(level.toUpperCase(Locale.ROOT));\n     }\n+\n+    boolean isLevelEnabledFor(SlowLogLevel levelToBeUsed) {\n+        // info is less specific then warn\n+        return this.ordinal() >= levelToBeUsed.ordinal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzkyOA=="}, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNzI3NA==", "bodyText": "I agree, the isMoreSpecificThan and isLessSpecificThan naming is not great. I like your choice of isLevelEnabeldFor.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431007274", "createdAt": "2020-05-27T10:11:18Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,16 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN, //most specific - little logging\n+    INFO,\n+    DEBUG,\n+    TRACE; //least specific - lots of logging\n     public static SlowLogLevel parse(String level) {\n         return valueOf(level.toUpperCase(Locale.ROOT));\n     }\n+\n+    boolean isLevelEnabledFor(SlowLogLevel levelToBeUsed) {\n+        // info is less specific then warn\n+        return this.ordinal() >= levelToBeUsed.ordinal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzkyOA=="}, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU5OTA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/IndexingSlowLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDowNToxOFrOGa4tYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDowNToxOFrOGa4tYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTI4Mg==", "bodyText": "then -> than", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430845282", "createdAt": "2020-05-27T04:05:18Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingSlowLog.java", "diffHunk": "@@ -149,13 +152,14 @@ public void postIndex(ShardId shardId, Engine.Index indexOperation, Engine.Index\n         if (result.getResultType() == Engine.Result.Type.SUCCESS) {\n             final ParsedDocument doc = indexOperation.parsedDoc();\n             final long tookInNanos = result.getTook();\n-            if (indexWarnThreshold >= 0 && tookInNanos > indexWarnThreshold) {\n+            // when logger level is more specific then WARN AND event is within threshold it should be logged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU5OTk2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDowNTo1MlrOGa4t4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjoxODo1OFrOGa65Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTQwOQ==", "bodyText": "4010?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430845409", "createdAt": "2020-05-27T04:05:52Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.logging;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.filter.RegexFilter;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+\n+public class MockAppender extends AbstractAppender {\n+    public LogEvent lastEvent;\n+\n+    public MockAppender(final String name) throws IllegalAccessException {\n+        super(name, RegexFilter.createFilter(\".*(\\n.*)*\", new String[0], false, null, null), null);\n+    }\n+\n+    @Override\n+    public void append(LogEvent event) {//4010", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MTAzNQ==", "bodyText": "removed", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430881035", "createdAt": "2020-05-27T06:18:58Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.logging;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.filter.RegexFilter;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+\n+public class MockAppender extends AbstractAppender {\n+    public LogEvent lastEvent;\n+\n+    public MockAppender(final String name) throws IllegalAccessException {\n+        super(name, RegexFilter.createFilter(\".*(\\n.*)*\", new String[0], false, null, null), null);\n+    }\n+\n+    @Override\n+    public void append(LogEvent event) {//4010", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTQwOQ=="}, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzYwMzM5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDowODoyNlrOGa4wAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjoyMDowOVrOGa66ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTk1NA==", "bodyText": "Formatting nit: (){\nThere a few other spacing issues in tests (no space before some commas, etc).", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430845954", "createdAt": "2020-05-27T04:08:26Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.logging;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.filter.RegexFilter;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+\n+public class MockAppender extends AbstractAppender {\n+    public LogEvent lastEvent;\n+\n+    public MockAppender(final String name) throws IllegalAccessException {\n+        super(name, RegexFilter.createFilter(\".*(\\n.*)*\", new String[0], false, null, null), null);\n+    }\n+\n+    @Override\n+    public void append(LogEvent event) {//4010\n+        lastEvent = event.toImmutable();\n+    }\n+\n+    ParameterizedMessage lastParameterizedMessage() {\n+        return (ParameterizedMessage) lastEvent.getMessage();\n+    }\n+\n+    public LogEvent getLastEventAndReset(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MTQ2Ng==", "bodyText": "fixed. Will fix the formatting in tests too.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430881466", "createdAt": "2020-05-27T06:20:09Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.logging;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.filter.RegexFilter;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+\n+public class MockAppender extends AbstractAppender {\n+    public LogEvent lastEvent;\n+\n+    public MockAppender(final String name) throws IllegalAccessException {\n+        super(name, RegexFilter.createFilter(\".*(\\n.*)*\", new String[0], false, null, null), null);\n+    }\n+\n+    @Override\n+    public void append(LogEvent event) {//4010\n+        lastEvent = event.toImmutable();\n+    }\n+\n+    ParameterizedMessage lastParameterizedMessage() {\n+        return (ParameterizedMessage) lastEvent.getMessage();\n+    }\n+\n+    public LogEvent getLastEventAndReset(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTk1NA=="}, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzYwNzc1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/SlowLogLevelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDoxMTo1NFrOGa4y0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjoyMToxNlrOGa68lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NjY3NQ==", "bodyText": "I think testing can be more comprehensive here? For example, it\u2019s too far off to test every case?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430846675", "createdAt": "2020-05-27T04:11:54Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/index/SlowLogLevelTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+\n+public class SlowLogLevelTest extends ESTestCase {\n+\n+    public void testLevelOrdering(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MTk0MA==", "bodyText": "I don't mind covering all test cases here. Will add all of them", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430881940", "createdAt": "2020-05-27T06:21:16Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/index/SlowLogLevelTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+\n+public class SlowLogLevelTest extends ESTestCase {\n+\n+    public void testLevelOrdering(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NjY3NQ=="}, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDU4NjAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDowNzo1N1rOGbCfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTowMTo1NlrOGbENzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTUyOA==", "bodyText": "I find it somewhat counterintuitive that the most specific logging level has the lowest \"value\" here. Perhaps change the meaning from \"precedence\" to \"specificity\" and then the values can be:\nWARN(3)\nINFO(2)\nDEBUG(1)\nTRACE(0)\n\nand then the comparison can be <= instead of >= which I find more intuitive. That is:\nSlowLogLevel.TRACE.isLevelEnabledFor(SlowLogLevel.WARN)\n\namounts to a comparison of\n0 <= 3\n\nwhich is true, and makes sense because TRACE is less specific than WARN.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431005528", "createdAt": "2020-05-27T10:07:57Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,23 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN(0), //most specific - little logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1319c72347d0f5e858db747117567640fe6398"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNzk4MA==", "bodyText": "I tried to follow the ordering they use in org.apache.logging.log4j.spi.StandardLevel where the lower the number the less logs it will allow. OFF being 0 and trace being highest number.\nBut I also find your reasoning good. The higher the number the more important the log is.\nI am on the fence now :)", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431017980", "createdAt": "2020-05-27T10:30:47Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,23 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN(0), //most specific - little logging", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTUyOA=="}, "originalCommit": {"oid": "db1319c72347d0f5e858db747117567640fe6398"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzMzgwNg==", "bodyText": "as per our discussion I think we should use your ordering and wording. The more specific the log level the higher the specificity value and less logs.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431033806", "createdAt": "2020-05-27T11:01:56Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,23 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN(0), //most specific - little logging", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTUyOA=="}, "originalCommit": {"oid": "db1319c72347d0f5e858db747117567640fe6398"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE4NDU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/IndexingSlowLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNDozOVrOGbIgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNDozOVrOGbIgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNDExNA==", "bodyText": "A nit here, sorry: I know this is carried over from the code that you moved, but this is labeled as a Javadoc /** on a private field. It should be a regular comment /*. Also no reason to not make this comment use the full 140 columns that are available. \ud83d\ude07", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431104114", "createdAt": "2020-05-27T13:04:39Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingSlowLog.java", "diffHunk": "@@ -76,6 +61,23 @@\n     public static final Setting<SlowLogLevel> INDEX_INDEXING_SLOWLOG_LEVEL_SETTING =\n         new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX +\".level\", SlowLogLevel.TRACE.name(), SlowLogLevel::parse, Property.Dynamic,\n             Property.IndexScope);\n+\n+    private final Logger indexLogger;\n+    private final Index index;\n+\n+    private boolean reformat;\n+    private long indexWarnThreshold;\n+    private long indexInfoThreshold;\n+    private long indexDebugThreshold;\n+    private long indexTraceThreshold;\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE4NzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNTowNFrOGbIiiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNTowNFrOGbIiiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNDY0OA==", "bodyText": "Nit: space between the // and the start of the comment", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431104648", "createdAt": "2020-05-27T13:05:04Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,23 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN(3), //most specific - little logging\n+    INFO(2),\n+    DEBUG(1),\n+    TRACE(0); //least specific - lots of logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTE5OTg5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjo1M1rOGbIrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjo1M1rOGbIrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjg1Mg==", "bodyText": "Maybe we can do this a random number of times, in a loop, say up to 64 or something like that, just to really exercise that no new ones are created?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431106852", "createdAt": "2020-05-27T13:06:53Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java", "diffHunk": "@@ -48,6 +61,141 @@\n import static org.hamcrest.Matchers.startsWith;\n \n public class IndexingSlowLogTests extends ESTestCase {\n+    static MockAppender appender;\n+    static Logger testLogger1 = LogManager.getLogger(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_PREFIX + \".index\");\n+\n+    @BeforeClass\n+    public static void init() throws IllegalAccessException {\n+        appender = new MockAppender(\"trace_appender\");\n+        appender.start();\n+        Loggers.addAppender(testLogger1, appender);\n+    }\n+\n+    @AfterClass\n+    public static void cleanup() {\n+        appender.stop();\n+        Loggers.removeAppender(testLogger1, appender);\n+    }\n+\n+\n+    public void testLevelPrecedence() {\n+        String uuid = UUIDs.randomBase64UUID();\n+        IndexMetadata metadata = createIndexMetadata(SlowLogLevel.WARN, \"index-precedence\", uuid);\n+        IndexSettings settings = new IndexSettings(metadata, Settings.EMPTY);\n+        IndexingSlowLog log = new IndexingSlowLog(settings);\n+\n+\n+        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n+        Engine.Index index = new Engine.Index(new Term(\"_id\", Uid.encodeId(\"doc_id\")), randomNonNegativeLong(), doc);\n+        Engine.IndexResult result = Mockito.mock(Engine.IndexResult.class);//(0, 0, SequenceNumbers.UNASSIGNED_SEQ_NO, false);\n+        Mockito.when(result.getResultType()).thenReturn(Engine.Result.Type.SUCCESS);\n+\n+        {\n+            //level set to WARN, should only log when WARN limit is breached\n+            Mockito.when(result.getTook()).thenReturn(40L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(41L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+\n+        }\n+\n+        {\n+            // level set INFO, should log when INFO level is breached\n+            settings.updateIndexMetadata(createIndexMetadata(SlowLogLevel.INFO, \"index\", uuid));\n+            Mockito.when(result.getTook()).thenReturn(30L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(31L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+\n+        {\n+            // level set DEBUG, should log when DEBUG level is breached\n+            settings.updateIndexMetadata(createIndexMetadata(SlowLogLevel.DEBUG, \"index\", uuid));\n+            Mockito.when(result.getTook()).thenReturn(20L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(21L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+\n+        {\n+            // level set TRACE, should log when TRACE level is breached\n+            settings.updateIndexMetadata(createIndexMetadata(SlowLogLevel.TRACE, \"index\", uuid));\n+            Mockito.when(result.getTook()).thenReturn(10L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(11L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+    }\n+\n+    public void testTwoLoggersDifferentLevel() {\n+        IndexSettings index1Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.WARN, \"index1\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log1 = new IndexingSlowLog(index1Settings);\n+\n+        IndexSettings index2Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.TRACE, \"index2\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log2 = new IndexingSlowLog(index2Settings);\n+\n+\n+        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n+        Engine.Index index = new Engine.Index(new Term(\"_id\", Uid.encodeId(\"doc_id\")), randomNonNegativeLong(), doc);\n+        Engine.IndexResult result = Mockito.mock(Engine.IndexResult.class);\n+        Mockito.when(result.getResultType()).thenReturn(Engine.Result.Type.SUCCESS);\n+\n+        {\n+            // level set WARN, should not log\n+            Mockito.when(result.getTook()).thenReturn(11L);\n+            log1.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            // level set TRACE, should log\n+            log2.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+    }\n+\n+    public void testMultipleSlowLoggersUseSingleLog4jLogger() {\n+        LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+\n+        IndexSettings index1Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.WARN, \"index1\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log1 = new IndexingSlowLog(index1Settings);\n+\n+        int numberOfLoggersBefore = context.getLoggers().size();\n+\n+\n+        IndexSettings index2Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.TRACE, \"index2\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log2 = new IndexingSlowLog(index2Settings);\n+        context = (LoggerContext) LogManager.getContext(false);\n+\n+        int numberOfLoggersAfter = context.getLoggers().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 388, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}