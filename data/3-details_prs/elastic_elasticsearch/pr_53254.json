{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTEwMjA2", "number": 53254, "title": "Handle SamlAuthenticationState between APIs", "bodyText": "After successful validation of an AuthnRequest the caller of the\n/validate API needs to call /init to generate the SAML response\nthat it can then send to the SP. There is some context that needs\nto be carried from the response of the /validate API to the\nrequest to the /init API. This context is encapsulated in the\nSamlAuthenticationState object that is serialized to a json\nobject in the SamlValidateAuthnRequestResponse. This can be\ntreated as an opaque blob for the caller of the API that just\nneeds to pass it to the subsequent request to the /init API. At\nthe same time we enable SAML responses that indicate failure\n(as opposed to returning a 4xx) for both the /init API as\ndictated by the SAML 2.0 Web Browser SSO profile.\nAdditionally these small adjustements were made:\n\nSaml Service Providers must indicate a single NameID format that\nthey want to use upon registration, instead of multiple. This is\nused to validate the NameID Policy of the AuthnRequest if it\nexists or to determine the NameID format for the response\notherwise.\nIf no NameID Policy is set in the AuthnRequest and the SP has\nnot registered a desired one, an IDP wide default NameID format\nis returned.\nJSON response fomat for the RestSamlInitiateSingleSignOnAction\nhas been reviewed as discussed.\nAll Rest actions have been moved under the same package", "createdAt": "2020-03-07T06:15:23Z", "url": "https://github.com/elastic/elasticsearch/pull/53254", "merged": true, "mergeCommit": {"oid": "33ce27b795157fc9a90aaa88bd4fbf4be51f27cf"}, "closed": true, "closedAt": "2020-03-13T07:30:17Z", "author": {"login": "jkakavas"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLOQN5AH2gAyMzg1MTEwMjA2OjFkNjM2ZjdiOGM2YzQyNWNlMjhlM2UzNWIwODk0MTIwNzc1MDE4MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNKSioAH2gAyMzg1MTEwMjA2OjQ1NWVkZWZhYzU1NzBkNDA5NWNjYzVkMWNiNGJhMjU4NWVkN2QxMWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d636f7b8c6c425ce28e3e35b089412077501800", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/1d636f7b8c6c425ce28e3e35b089412077501800", "committedDate": "2020-03-07T05:55:38Z", "message": "Handle SamlAuthenticationState between APIs\n\nAfter successful validation of an AuthnRequest the caller of the\n/validate API needs to call /init to generate the SAML response\nthat it can then send to the SP. There is some context that needs\nto be carried from the response of the /validate API to the\nrequest to the /init API. This context is encaptulated in the\nSamlAuthenticationState object that is serialized to a json\nobject in the SamlValidateAuthnRequestResponse. This can be\ntreated as an opaque blob for the caller of the API that just\nneeds to pass it to the subsequent request to the /init API. At\nthe same time we enable SAML responses that indicate failure\n(as opposed to returning a 4xx) for both the /init API as\ndictated by the SAML 2.0 Web Browser SSO profile.\n\nAdditionally these small adjustements were made:\n\n- Saml Service Providers must indicate a single NameID format that\n  they want to use upon registration, instead of multiple. This is\n  used to validate the NameID Policy of the AuthnRequest if it\n  exists or to determine the NameID format for the response\n  otherwise.\n- If no NameID Policy is set in the AuthnRequest and the SP has\n  not registered a desired one, an IDP wide default NameID format\n  is returned.\n- JSON response fomat for the RestSamlInitiateSingleSignOnAction\n  has been reviewed as discussed.\n- All Rest actions have been moved under the same package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55a461e18ffeb9eed8d633f509e1029edccf527", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e55a461e18ffeb9eed8d633f509e1029edccf527", "committedDate": "2020-03-07T06:09:34Z", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into handle-authn-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b50bee9aebd46fd5a71671984942f4e1bd4b00", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/05b50bee9aebd46fd5a71671984942f4e1bd4b00", "committedDate": "2020-03-07T06:22:55Z", "message": "minor cleanup of leftovers from another approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/a46ee7f2af181c4537950979f8363c7641f6f40f", "committedDate": "2020-03-07T06:26:32Z", "message": "cleanup whitespace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzI4MjA4", "url": "https://github.com/elastic/elasticsearch/pull/53254#pullrequestreview-370728208", "createdAt": "2020-03-07T07:03:19Z", "commit": {"oid": "e55a461e18ffeb9eed8d633f509e1029edccf527"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzowMzoyMFrOFzM-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzowMzoyMFrOFzM-hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDMwOA==", "bodyText": "This ended up bothering me quite a bit but I raised the PR as is to discuss it. If this ends up in a cookie, a malicious user could forge the inResponseTo of  a SAML Response. This in itself is not a additional threat as it wouldn't allow any attack vectors that are not already mitigated by other means ( signature validation etc. )\nThe requestedNameIdFormat can also be forged after the NameIdPolicy is validated but then again the only attack vector this enables is that a malicious user could i.e.have a persistent NameID generated for an SP that only needs/handles transient ones.\nFinally the entityId is used only for the SamlInitiateSingleSignOnResponse and could easiliy be even omitted , and the requestedAcsUrl can potentially be forged to send SAML Response messages to attacker controlled URLs.\nAlthough we could accept the risk these potential issues carry, it makes me think: Is this user facing state control the right trade off to satisfy the API design ( the split between /validate and /init ) and the interplay between them ?\nIs the alternative of having the /validate API require secondary authentication too and able to respond with SAML Responses worth it ?That would mean that the user needs to be authenticated before the AuthnRequest will be parsed and validated. It would also mean that we would respond with authentication failure even if i.e. there is also an error and we can't satisfy the NameIdPolicy ( one might argue that in these cases we should reply with InvalidNameIdPolicy regardless of auhtn failure because even if the authentication was correct, we would still fail )", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r389234308", "createdAt": "2020-03-07T07:03:20Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlAuthenticationState.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.ValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a state object that can be used during an SP initiated flow in order to pass necessary parameters from the response of the\n+ * /validate API to the /init API. State properties are not integrity protected, might end up in a cookie on the user's side and as such\n+ * are treated as tainted parameters for informational purposes only. No authentication/authorization decisions should be made based on\n+ * these.\n+ */\n+public class SamlAuthenticationState implements Writeable, ToXContentObject {\n+    private String entityId;\n+    private String requestedAcsUrl;\n+    @Nullable\n+    private String requestedNameidFormat;\n+    @Nullable\n+    private String authnRequestId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e55a461e18ffeb9eed8d633f509e1029edccf527"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTM1MTU4", "url": "https://github.com/elastic/elasticsearch/pull/53254#pullrequestreview-370935158", "createdAt": "2020-03-09T06:17:37Z", "commit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjoxNzozN1rOFzb4lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjoyMzo1MFrOFzb-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3ODU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"for this Service Provider which is [{}]\", requestedFormat, sp.getAllowedNameIdFormat());\n          \n          \n            \n                                    \" for this Service Provider which is [{}]\", requestedFormat, sp.getAllowedNameIdFormat());", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r389478549", "createdAt": "2020-03-09T06:17:37Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java", "diffHunk": "@@ -172,36 +170,34 @@ private void validateAuthnRequest(AuthnRequest authnRequest, SamlServiceProvider\n                 return;\n             }\n         }\n-\n+        final Map<String, Object> authnState = new HashMap<>();\n         checkDestination(authnRequest);\n-        checkAcs(authnRequest, sp);\n-\n-        Map<String, Object> authnState = buildAuthnState(authnRequest, sp);\n+        checkAcs(authnRequest, sp, authnState);\n+        validateNameIdPolicy(authnRequest, sp, authnState);\n+        authnState.put(SamlAuthenticationState.Fields.ENTITY_ID.getPreferredName(), sp.getEntityId());\n+        authnState.put(SamlAuthenticationState.Fields.AUTHN_REQUEST_ID.getPreferredName(), authnRequest.getID());\n         final SamlValidateAuthnRequestResponse response = new SamlValidateAuthnRequestResponse(sp.getEntityId(),\n             authnRequest.isForceAuthn(), authnState);\n         logger.trace(new ParameterizedMessage(\"Validated AuthnResponse from queryString [{}] and extracted [{}]\",\n             parsedQueryString.queryString, response));\n         listener.onResponse(response);\n     }\n \n-    private Map<String, Object> buildAuthnState(AuthnRequest request, SamlServiceProvider sp) {\n-        Map<String, Object> authnState = new HashMap<>();\n+    private void validateNameIdPolicy(AuthnRequest request, SamlServiceProvider sp, Map<String, Object> authnState) {\n         final NameIDPolicy nameIDPolicy = request.getNameIDPolicy();\n         if (null != nameIDPolicy) {\n             final String requestedFormat = request.getNameIDPolicy().getFormat();\n+            final String allowedFormat = sp.getAllowedNameIdFormat();\n             if (Strings.hasText(requestedFormat)) {\n-                authnState.put(\"nameid_format\", requestedFormat);\n-                // we should not throw an error. Pass this as additional data so that the /saml/init API can\n-                // return a SAML response with the appropriate status (3.4.1.1 in the core spec)\n-                if (requestedFormat.equals(UNSPECIFIED) == false && sp.getAllowedNameIdFormats().contains(requestedFormat) == false) {\n-                    logger.warn(() ->\n-                        new ParameterizedMessage(\"The requested NameID format [{}] doesn't match the allowed NameID formats\" +\n-                            \"for this Service Provider are {}\", requestedFormat, sp.getAllowedNameIdFormats()));\n-                    authnState.put(\"error\", \"invalid_nameid_policy\");\n+                if (allowedFormat != null && requestedFormat.equals(UNSPECIFIED) == false\n+                    && requestedFormat.equals(allowedFormat) == false) {\n+                    throw new ElasticsearchSecurityException(\"The requested NameID format [{}] doesn't match the allowed NameID format\" +\n+                        \"for this Service Provider which is [{}]\", requestedFormat, sp.getAllowedNameIdFormat());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3OTA0Mw==", "bodyText": "Is this for template support? Or for concurrency?\nGiven we know that it must equal the SP's registered ACS, it seems unnecessary here (but I'm not objecting, just trying to understand).", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r389479043", "createdAt": "2020-03-09T06:19:58Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java", "diffHunk": "@@ -264,6 +260,7 @@ private void checkAcs(AuthnRequest request, SamlServiceProvider sp) {\n             throw new ElasticsearchSecurityException(\"The registered ACS URL for this Service Provider is [{}] but the authentication \" +\n                 \"request contained [{}]\", sp.getAssertionConsumerService(), acs);\n         }\n+        authnState.put(SamlAuthenticationState.Fields.ACS_URL.getPreferredName(), acs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3OTUwMA==", "bodyText": "Nit: Extra line.", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r389479500", "createdAt": "2020-03-09T06:21:45Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -215,4 +212,16 @@ private Status buildStatus() {\n \n         return status;\n     }\n+\n+    private NameID buildNameId(SamlServiceProvider serviceProvider, @Nullable SamlAuthenticationState authnState) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        if (authnState != null && authnState.getRequestedNameidFormat() != null) {\n+            nameID.setFormat(authnState.getRequestedNameidFormat());\n+        } else {\n+            nameID.setFormat(serviceProvider.getAllowedNameIdFormat() != null ? serviceProvider.getAllowedNameIdFormat() :\n+                idp.getServiceProviderDefaults().nameIdFormat);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3OTU4Mg==", "bodyText": "No Value for the NameID? If that's intentional, can we add a TODO here to set it?", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r389479582", "createdAt": "2020-03-09T06:22:14Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -215,4 +212,16 @@ private Status buildStatus() {\n \n         return status;\n     }\n+\n+    private NameID buildNameId(SamlServiceProvider serviceProvider, @Nullable SamlAuthenticationState authnState) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        if (authnState != null && authnState.getRequestedNameidFormat() != null) {\n+            nameID.setFormat(authnState.getRequestedNameidFormat());\n+        } else {\n+            nameID.setFormat(serviceProvider.getAllowedNameIdFormat() != null ? serviceProvider.getAllowedNameIdFormat() :\n+                idp.getServiceProviderDefaults().nameIdFormat);\n+\n+        }\n+        return nameID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3OTk2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String nameIdFormat;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                public String nameIdFormat;", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r389479967", "createdAt": "2020-03-09T06:23:50Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderDocument.java", "diffHunk": "@@ -242,11 +242,12 @@ public int hashCode() {\n \n     public String acs;\n \n+    public String nameIdFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46ee7f2af181c4537950979f8363c7641f6f40f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9527dbc65a8ca5081cdb73a635ee5f480d5ada46", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/9527dbc65a8ca5081cdb73a635ee5f480d5ada46", "committedDate": "2020-03-09T09:30:54Z", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into handle-authn-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e7b077d226d852b9b971b50ee7b54ade190d76b2", "committedDate": "2020-03-09T09:39:08Z", "message": "address preliminary comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjc3OTUy", "url": "https://github.com/elastic/elasticsearch/pull/53254#pullrequestreview-373277952", "createdAt": "2020-03-12T04:54:23Z", "commit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo1NDoyNFrOF1RNuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo1OTo1NFrOF1RSIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMDg4OA==", "bodyText": "Can't this be handled in the validation on the request? Why would we do it inside the action?", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r391400888", "createdAt": "2020-03-12T04:54:24Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -49,34 +52,68 @@ public TransportSamlInitiateSingleSignOnAction(TransportService transportService\n     @Override\n     protected void doExecute(Task task, SamlInitiateSingleSignOnRequest request,\n                              ActionListener<SamlInitiateSingleSignOnResponse> listener) {\n+        final SamlAuthenticationState authenticationState = request.getSamlAuthenticationState();\n+        if (authenticationState != null) {\n+            final ValidationException validationException = authenticationState.validate();\n+            if (validationException != null) {\n+                listener.onFailure(validationException);\n+                return;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMTQ4Mw==", "bodyText": "I feel like it would be good (in a follow up probably) to actually indicate to the caller (in the JSON response) that this a failure rather than success.", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r391401483", "createdAt": "2020-03-12T04:57:09Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -49,34 +52,68 @@ public TransportSamlInitiateSingleSignOnAction(TransportService transportService\n     @Override\n     protected void doExecute(Task task, SamlInitiateSingleSignOnRequest request,\n                              ActionListener<SamlInitiateSingleSignOnResponse> listener) {\n+        final SamlAuthenticationState authenticationState = request.getSamlAuthenticationState();\n+        if (authenticationState != null) {\n+            final ValidationException validationException = authenticationState.validate();\n+            if (validationException != null) {\n+                listener.onFailure(validationException);\n+                return;\n+            }\n+        }\n         identityProvider.getRegisteredServiceProvider(request.getSpEntityId(), ActionListener.wrap(\n             sp -> {\n-                try {\n-                    if (null == sp) {\n-                        final String message = \"Service Provider with Entity ID [\" + request.getSpEntityId()\n-                            + \"] is not registered with this Identity Provider\";\n-                        logger.debug(message);\n-                        listener.onFailure(new IllegalArgumentException(message));\n+                if (null == sp) {\n+                    final String message = \"Service Provider with Entity ID [\" + request.getSpEntityId()\n+                        + \"] is not registered with this Identity Provider\";\n+                    logger.debug(message);\n+                    listener.onFailure(new IllegalArgumentException(message));\n+                    return;\n+                }\n+                final SecondaryAuthentication secondaryAuthentication = SecondaryAuthentication.readFromContext(securityContext);\n+                if (secondaryAuthentication == null) {\n+                    if (authenticationState != null) {\n+                        final FailedAuthenticationResponseMessageBuilder builder =\n+                            new FailedAuthenticationResponseMessageBuilder(samlFactory, Clock.systemUTC(), identityProvider)\n+                                .setInResponseTo(authenticationState.getAuthnRequestId())\n+                                .setAcsUrl(authenticationState.getRequestedAcsUrl())\n+                                .setPrimaryStatusCode(StatusCode.REQUESTER)\n+                                .setSecondaryStatusCode(StatusCode.AUTHN_FAILED);\n+                        final Response response = builder.build();\n+                        listener.onResponse(new SamlInitiateSingleSignOnResponse(\n+                            authenticationState.getRequestedAcsUrl(),\n+                            samlFactory.getXmlContent(response),\n+                            authenticationState.getEntityId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMTg1MA==", "bodyText": "Nit, extra space.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Processes a SAML AuthnRequest, validates it,  extracts necessary information and returns a {@link SamlValidateAuthnRequestResponse}\n          \n          \n            \n             * Processes a SAML AuthnRequest, validates it, extracts necessary information and returns a {@link SamlValidateAuthnRequestResponse}", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r391401850", "createdAt": "2020-03-12T04:59:01Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java", "diffHunk": "@@ -50,8 +51,8 @@\n import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_REDIRECT_BINDING_URI;\n import static org.opensaml.saml.saml2.core.NameIDType.UNSPECIFIED;\n \n-/*\n- * Processes a SAML AuthnRequest, validates it and extracts necessary information\n+/**\n+ * Processes a SAML AuthnRequest, validates it,  extracts necessary information and returns a {@link SamlValidateAuthnRequestResponse}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjAxNg==", "bodyText": "For completeness, it would probably be worth putting the sp entity id in the message.\nThe caller should know it, but the logger won't.", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r391402016", "createdAt": "2020-03-12T04:59:54Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java", "diffHunk": "@@ -150,17 +151,14 @@ private void validateAuthnRequest(AuthnRequest authnRequest, SamlServiceProvider\n                 }\n                 final Set<X509Credential> spSigningCredentials = sp.getSpSigningCredentials();\n                 if (spSigningCredentials == null || spSigningCredentials.isEmpty()) {\n-                    logAndRespond(\n-                        \"Unable to validate signature of authentication request, \" +\n-                            \"Service Provider hasn't registered signing credentials\",\n-                        listener);\n+                    logAndRespond(\"Unable to validate signature of authentication request, \" +\n+                        \"Service Provider hasn't registered signing credentials\", listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjgwNTM1", "url": "https://github.com/elastic/elasticsearch/pull/53254#pullrequestreview-373280535", "createdAt": "2020-03-12T05:04:47Z", "commit": {"oid": "e7b077d226d852b9b971b50ee7b54ade190d76b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58d9453615f7d6f0f69485f4d9eb91252f9eb68", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/a58d9453615f7d6f0f69485f4d9eb91252f9eb68", "committedDate": "2020-03-12T13:25:15Z", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into handle-authn-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cbdb10a9058afa734246e5222f59fbfcf0c0fbc", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/2cbdb10a9058afa734246e5222f59fbfcf0c0fbc", "committedDate": "2020-03-12T14:20:03Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4816d77cf2e48a5525b9cfb8c90308fec6165d0e", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/4816d77cf2e48a5525b9cfb8c90308fec6165d0e", "committedDate": "2020-03-12T14:29:53Z", "message": "Merge branch 'feature-internal-idp' into handle-authn-state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDA5Nzgz", "url": "https://github.com/elastic/elasticsearch/pull/53254#pullrequestreview-374009783", "createdAt": "2020-03-13T02:26:42Z", "commit": {"oid": "4816d77cf2e48a5525b9cfb8c90308fec6165d0e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjoyNjo0M1rOF11paQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjoyNzozN1rOF11qGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5NzgwMQ==", "bodyText": "Since this only handles a failure response, I think it's worth naming it accordingly.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void possiblyReplyWithSamlResponse(SamlAuthenticationState authenticationState, String statusCode, Exception e,\n          \n          \n            \n                private void possiblyReplyWithSamlFailure(SamlAuthenticationState authenticationState, String statusCode, Exception e,", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r391997801", "createdAt": "2020-03-13T02:26:43Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -140,4 +123,23 @@ private void buildUserFromAuthentication(SecondaryAuthentication secondaryAuthen\n             }\n         );\n     }\n+\n+    private void possiblyReplyWithSamlResponse(SamlAuthenticationState authenticationState, String statusCode, Exception e,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4816d77cf2e48a5525b9cfb8c90308fec6165d0e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5Nzk3Ng==", "bodyText": "Should we log too? (it can be part of the TODO)", "url": "https://github.com/elastic/elasticsearch/pull/53254#discussion_r391997976", "createdAt": "2020-03-13T02:27:37Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java", "diffHunk": "@@ -140,4 +123,23 @@ private void buildUserFromAuthentication(SecondaryAuthentication secondaryAuthen\n             }\n         );\n     }\n+\n+    private void possiblyReplyWithSamlResponse(SamlAuthenticationState authenticationState, String statusCode, Exception e,\n+                                               ActionListener<SamlInitiateSingleSignOnResponse> listener) {\n+        if (authenticationState != null) {\n+            final FailedAuthenticationResponseMessageBuilder builder =\n+                new FailedAuthenticationResponseMessageBuilder(samlFactory, Clock.systemUTC(), identityProvider)\n+                    .setInResponseTo(authenticationState.getAuthnRequestId())\n+                    .setAcsUrl(authenticationState.getRequestedAcsUrl())\n+                    .setPrimaryStatusCode(statusCode);\n+            final Response response = builder.build();\n+            //TODO: Indicate SAML Response status is failure in the response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4816d77cf2e48a5525b9cfb8c90308fec6165d0e"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9049b0b8ae8ec4345d0cf1fdb62605443e6cac68", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/9049b0b8ae8ec4345d0cf1fdb62605443e6cac68", "committedDate": "2020-03-13T05:57:11Z", "message": "Merge branch 'feature-internal-idp' into handle-authn-state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455edefac5570d4095ccc5d1cb4ba2585ed7d11c", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/455edefac5570d4095ccc5d1cb4ba2585ed7d11c", "committedDate": "2020-03-13T06:26:24Z", "message": "address feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1608, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}