{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDY0MDYz", "number": 63037, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODoyODo1N1rOEo7L7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDowMTowNFrOEo9Zgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzQ4MjA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODoyODo1N1rOHaS0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODoyODo1N1rOHaS0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzMzI3NQ==", "bodyText": "Since hidden indices are included in snapshot by default (#57325) I think we should also allow them to be cloned and support IndicesOptions.", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497333275", "createdAt": "2020-09-30T08:28:57Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> {\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    // TODO: the current logic does not allow for specifying index resolution parameters like hidden and such. Do we care about cloning\n+    //        system or hidden indices?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzUxOTIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozODowMVrOHaTKnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozODowMVrOHaTKnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTAzNw==", "bodyText": "Can we add some Javadoc please? It's not obvious that source/target are concerning snapshots and indices may be in fact the names of indices to retain when cloning the source snapshot.", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497339037", "createdAt": "2020-09-30T08:38:01Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> {\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    // TODO: the current logic does not allow for specifying index resolution parameters like hidden and such. Do we care about cloning\n+    //        system or hidden indices?\n+    private String[] indices;\n+\n+    public CloneSnapshotRequest(StreamInput in) throws IOException {\n+        super(in);\n+        repository = in.readString();\n+        source = in.readString();\n+        target = in.readString();\n+        indices = in.readStringArray();\n+    }\n+\n+    public CloneSnapshotRequest(String repository, String source, String target, String[] indices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzUyMDE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozODoxOFrOHaTLSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozODoxOFrOHaTLSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTIwOQ==", "bodyText": "Can we document this method?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497339209", "createdAt": "2020-09-30T08:38:18Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> {\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    // TODO: the current logic does not allow for specifying index resolution parameters like hidden and such. Do we care about cloning\n+    //        system or hidden indices?\n+    private String[] indices;\n+\n+    public CloneSnapshotRequest(StreamInput in) throws IOException {\n+        super(in);\n+        repository = in.readString();\n+        source = in.readString();\n+        target = in.readString();\n+        indices = in.readStringArray();\n+    }\n+\n+    public CloneSnapshotRequest(String repository, String source, String target, String[] indices) {\n+        this.repository = repository;\n+        this.source = source;\n+        this.target = target;\n+        this.indices = indices;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeString(repository);\n+        out.writeString(source);\n+        out.writeString(target);\n+        out.writeStringArray(indices);\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (source == null) {\n+            validationException = addValidationError(\"source snapshot name is missing\", null);\n+        }\n+        if (target == null) {\n+            validationException = addValidationError(\"target snapshot name is missing\", null);\n+        }\n+        if (repository == null) {\n+            validationException = addValidationError(\"repository is missing\", validationException);\n+        }\n+        if (indices == null) {\n+            validationException = addValidationError(\"indices is null\", validationException);\n+        } else if (indices.length == 0) {\n+            validationException = addValidationError(\"indices patterns are empty\", validationException);\n+        } else {\n+            for (String index : indices) {\n+                if (index == null) {\n+                    validationException = addValidationError(\"index is null\", validationException);\n+                    break;\n+                }\n+            }\n+        }\n+        return validationException;\n+    }\n+\n+    public String[] indices() {\n+        return this.indices;\n+    }\n+\n+    public CloneSnapshotRequest indices(String... indices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzUyMTM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozODozNVrOHaTL8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozODozNVrOHaTL8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTM3OA==", "bodyText": "Can we document this method?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497339378", "createdAt": "2020-09-30T08:38:35Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequestBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.action.support.master.MasterNodeOperationRequestBuilder;\n+import org.elasticsearch.client.ElasticsearchClient;\n+import org.elasticsearch.common.Strings;\n+\n+public class CloneSnapshotRequestBuilder extends MasterNodeOperationRequestBuilder<CloneSnapshotRequest, AcknowledgedResponse,\n+                                                                                   CloneSnapshotRequestBuilder> {\n+\n+    protected CloneSnapshotRequestBuilder(ElasticsearchClient client, ActionType<AcknowledgedResponse> action,\n+                                          CloneSnapshotRequest request) {\n+        super(client, action, request);\n+    }\n+\n+    public CloneSnapshotRequestBuilder(ElasticsearchClient client, ActionType<AcknowledgedResponse> action,\n+                                       String repository, String source, String target) {\n+        this(client, action, new CloneSnapshotRequest(repository, source, target, Strings.EMPTY_ARRAY));\n+    }\n+\n+    public CloneSnapshotRequestBuilder setIndices(String... indices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU0Mzc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0NDoyMFrOHaTaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1OToxNFrOHaUAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0Mjk3Nw==", "bodyText": "Can't we just reuse or adapt filterIndices() so that restore and clone indices parameter work the same?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497342977", "createdAt": "2020-09-30T08:44:20Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotUtils.java", "diffHunk": "@@ -118,4 +125,44 @@\n         }\n         return List.copyOf(result);\n     }\n+\n+    /**\n+     * Finds the {@link IndexId}s in the given source snapshot that match the given index patterns for a snapshot clone operation.\n+     *\n+     * @param sourceSnapshotId source snapshot id\n+     * @param targetSnapshot   target snapshot that the clone operation would create\n+     * @param repositoryData   repository data of the repository that the clone\n+     * @param indexPatterns    index patterns to clone from source- to target snapshot\n+     * @return list of index ids to clone\n+     * @throws SnapshotException on failure to find concrete request index ids or any index ids\n+     */\n+    static List<IndexId> findIndexIdsToClone(SnapshotId sourceSnapshotId, Snapshot targetSnapshot, RepositoryData repositoryData,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1Mjc5Mw==", "bodyText": "\ud83e\udd26 yea let's do that and use IndicesOptions on the request, that makes it all fall into place much more nicely :) Thanks!", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497352793", "createdAt": "2020-09-30T08:59:14Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotUtils.java", "diffHunk": "@@ -118,4 +125,44 @@\n         }\n         return List.copyOf(result);\n     }\n+\n+    /**\n+     * Finds the {@link IndexId}s in the given source snapshot that match the given index patterns for a snapshot clone operation.\n+     *\n+     * @param sourceSnapshotId source snapshot id\n+     * @param targetSnapshot   target snapshot that the clone operation would create\n+     * @param repositoryData   repository data of the repository that the clone\n+     * @param indexPatterns    index patterns to clone from source- to target snapshot\n+     * @return list of index ids to clone\n+     * @throws SnapshotException on failure to find concrete request index ids or any index ids\n+     */\n+    static List<IndexId> findIndexIdsToClone(SnapshotId sourceSnapshotId, Snapshot targetSnapshot, RepositoryData repositoryData,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0Mjk3Nw=="}, "originalCommit": {"oid": "756c0515ff25b31e6f1d2aa26da77c052fbf0f89"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzgzNjMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo1ODo0OFrOHaWOHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDoyMjoxNVrOHaXA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTA4NQ==", "bodyText": "Can we comment this for now and only uncomment it once REST integration tests and the whole feature are done?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497389085", "createdAt": "2020-09-30T09:58:48Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "diffHunk": "@@ -659,6 +663,7 @@ public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {\n         registerHandler.accept(new RestCleanupRepositoryAction());\n         registerHandler.accept(new RestGetSnapshotsAction());\n         registerHandler.accept(new RestCreateSnapshotAction());\n+        registerHandler.accept(new RestCloneSnapshotAction());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5Nzk3Mw==", "bodyText": "Mainly made this active here to make sure our RestController can handle the shared path with the create-snapshot action. Turned it only accepts this if the parameter names are the same across both actions so I left it in place to make sure we don't break anything.\nI'm only going to merge this to master before final completion anyway, so maybe we can just leave it?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497397973", "createdAt": "2020-09-30T10:14:39Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "diffHunk": "@@ -659,6 +663,7 @@ public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {\n         registerHandler.accept(new RestCleanupRepositoryAction());\n         registerHandler.accept(new RestGetSnapshotsAction());\n         registerHandler.accept(new RestCreateSnapshotAction());\n+        registerHandler.accept(new RestCloneSnapshotAction());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTA4NQ=="}, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwMjA4NQ==", "bodyText": "Turned it only accepts this if the parameter names are the same across both actions so I left it in place to make sure we don't break anything.\n\nOk, I did not think about this. Let's keep it as it is and wait for the full feature to be done and merged before backporting it.", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497402085", "createdAt": "2020-09-30T10:22:15Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "diffHunk": "@@ -659,6 +663,7 @@ public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {\n         registerHandler.accept(new RestCleanupRepositoryAction());\n         registerHandler.accept(new RestGetSnapshotsAction());\n         registerHandler.accept(new RestCreateSnapshotAction());\n+        registerHandler.accept(new RestCloneSnapshotAction());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTA4NQ=="}, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzg0MDQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo1OTo1M1rOHaWQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDoyMzo0OVrOHaXD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw==", "bodyText": "Hidden indices are snapshotted by default so I think they should be cloned by default too? WDYT?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497389733", "createdAt": "2020-09-30T09:59:53Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5MzE2MA==", "bodyText": "I went with the defaults for restore here. I figured it's probably less likely that one would clone a hidden index so those seemed more natural?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497393160", "createdAt": "2020-09-30T10:05:38Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw=="}, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5OTY1Nw==", "bodyText": "Actually I'm more concerned about the following use case:\ncreate a snapshot of all indices (it includes hidden ones) -> clone this snapshot and remove some large index I don't care anymore (it also removes hidden indices right?) -> delete the previous snapshot as I now have a lighter snapshot (but the hidden indices are gone silently)\nor maybe I'm missing something?", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497399657", "createdAt": "2020-09-30T10:17:41Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw=="}, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwMjg3Nw==", "bodyText": "Sold :), that's a conceivable use case for sure!", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497402877", "createdAt": "2020-09-30T10:23:49Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4OTczMw=="}, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzg0NDUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDowMTowNFrOHaWTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDowMTowNFrOHaWTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5MDM5Nw==", "bodyText": "Also serialize indices options", "url": "https://github.com/elastic/elasticsearch/pull/63037#discussion_r497390397", "createdAt": "2020-09-30T10:01:04Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/clone/CloneSnapshotRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.snapshots.clone;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class CloneSnapshotRequest extends MasterNodeRequest<CloneSnapshotRequest> implements IndicesRequest.Replaceable{\n+\n+    private final String repository;\n+\n+    private final String source;\n+\n+    private final String target;\n+\n+    private String[] indices;\n+\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();\n+\n+    public CloneSnapshotRequest(StreamInput in) throws IOException {\n+        super(in);\n+        repository = in.readString();\n+        source = in.readString();\n+        target = in.readString();\n+        indices = in.readStringArray();\n+    }\n+\n+    /**\n+     * Creates a clone snapshot request for cloning the given source snapshot's indices into the given target snapshot on the given\n+     * repository.\n+     *\n+     * @param repository repository that source snapshot belongs to and that the target snapshot will be created in\n+     * @param source     source snapshot name\n+     * @param target     target snapshot name\n+     * @param indices    indices to clone from source to target\n+     */\n+    public CloneSnapshotRequest(String repository, String source, String target, String[] indices) {\n+        this.repository = repository;\n+        this.source = source;\n+        this.target = target;\n+        this.indices = indices;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        super.writeTo(out);\n+        out.writeString(repository);\n+        out.writeString(source);\n+        out.writeString(target);\n+        out.writeStringArray(indices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59de423dfcb725fd30abc360f62d097fa33169f9"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3278, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}