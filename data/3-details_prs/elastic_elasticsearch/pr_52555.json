{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjMwNzQw", "number": 52555, "title": "Support joda style date patterns in 7.x", "bodyText": "If an index was created in version 6 and contain a date field with a joda-style pattern it should still be allowed to search and insert document into it.\nThose created in 6 but date pattern starts with 8, it should be considered as java style.", "createdAt": "2020-02-20T09:01:02Z", "url": "https://github.com/elastic/elasticsearch/pull/52555", "merged": true, "mergeCommit": {"oid": "2438b899eb0b1bdf03746bb764e67ea86ca40f08"}, "closed": true, "closedAt": "2020-03-12T07:57:04Z", "author": {"login": "pgomulka"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGLG-SABqjMwNTYwNTU5Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMseAJAH2gAyMzc3NjMwNzQwOmJkYTljNDcwNjlkOGZiNDE4NzFiNDIwNjZjNWE2MmZjNzE0MmY3NGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9990233d2dc20fd85ba54777d4fe9ea30912cac9", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/9990233d2dc20fd85ba54777d4fe9ea30912cac9", "committedDate": "2020-02-20T10:11:30Z", "message": "support for java.style created in 6"}, "afterCommit": {"oid": "9b79406e1ac7709a690641d974b2da112ad6c83a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/9b79406e1ac7709a690641d974b2da112ad6c83a", "committedDate": "2020-02-20T13:25:54Z", "message": "tests passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04d376a2bb572d6158683e940f3ae5b87f30e7b5", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/04d376a2bb572d6158683e940f3ae5b87f30e7b5", "committedDate": "2020-02-20T13:31:23Z", "message": "datefieldmapper checks for index version\n\nrolling upgrade test for joda-java\n\nsupport for java.style created in 6\n\ntests passing\n\nrevert not needed changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75b3458ddd47bf2e09207e89ced24b996a384703", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/75b3458ddd47bf2e09207e89ced24b996a384703", "committedDate": "2020-02-20T13:28:23Z", "message": "revert not needed changes"}, "afterCommit": {"oid": "04d376a2bb572d6158683e940f3ae5b87f30e7b5", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/04d376a2bb572d6158683e940f3ae5b87f30e7b5", "committedDate": "2020-02-20T13:31:23Z", "message": "datefieldmapper checks for index version\n\nrolling upgrade test for joda-java\n\nsupport for java.style created in 6\n\ntests passing\n\nrevert not needed changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02fa66ed8c7ad3f1c664eb7cdd6ba21e7cdaf0d", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f02fa66ed8c7ad3f1c664eb7cdd6ba21e7cdaf0d", "committedDate": "2020-02-20T14:27:03Z", "message": "normalize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "601e691cd8db961280d83813419be437cacbfcdb", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/601e691cd8db961280d83813419be437cacbfcdb", "committedDate": "2020-02-20T14:31:27Z", "message": "encoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b23e9d3b3d2b1b81d86b61c2e283be2df65119e", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/1b23e9d3b3d2b1b81d86b61c2e283be2df65119e", "committedDate": "2020-02-20T14:32:11Z", "message": "revert encoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "424c6701754ad808c6639bd32d14022c1efd5475", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/424c6701754ad808c6639bd32d14022c1efd5475", "committedDate": "2020-02-20T14:38:48Z", "message": "type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85701cdac6085f257d55df7f2044eaad31d6d1b1", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/85701cdac6085f257d55df7f2044eaad31d6d1b1", "committedDate": "2020-02-20T17:03:10Z", "message": "support date range"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a280ff566b8577c76da03d16ae6abbcbc04b0f6d", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/a280ff566b8577c76da03d16ae6abbcbc04b0f6d", "committedDate": "2020-02-20T17:08:36Z", "message": "todos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4291101ec1907e855cf283d5d25e5cf9187d6e80", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/4291101ec1907e855cf283d5d25e5cf9187d6e80", "committedDate": "2020-02-20T17:11:14Z", "message": "todos and debugging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjY1NjQw", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-362265640", "createdAt": "2020-02-20T22:01:08Z", "commit": {"oid": "4291101ec1907e855cf283d5d25e5cf9187d6e80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMTowOFrOFskp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMTowOFrOFskp4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MjIxMQ==", "bodyText": "Shouldn't this be uncommented?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r382282211", "createdAt": "2020-02-20T22:01:08Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java", "diffHunk": "@@ -138,7 +139,13 @@ protected void setupFieldType(BuilderContext context) {\n                     Objects.equals(builder.pattern, formatter.pattern()) == false;\n \n                 if (hasPatternChanged || Objects.equals(builder.locale, formatter.locale()) == false) {\n-                    fieldType().setDateTimeFormatter(DateFormatter.forPattern(pattern).withLocale(locale));\n+                    DateFormatter dateTimeFormatter;\n+//                    if (Joda.isJodaStyleIndex(context,pattern) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4291101ec1907e855cf283d5d25e5cf9187d6e80"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ccbc4e0bf3c86e72de11f70987dff4146f9897", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/95ccbc4e0bf3c86e72de11f70987dff4146f9897", "committedDate": "2020-02-21T09:37:23Z", "message": "range test that failes - notfinished"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "146ce9089462f7f4dca9697ef9f96f2961b64220", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/146ce9089462f7f4dca9697ef9f96f2961b64220", "committedDate": "2020-02-21T10:37:16Z", "message": "6.87 range test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beed11d0ace1bc0767b36f213c6ad7b7b2fdc0b9", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/beed11d0ace1bc0767b36f213c6ad7b7b2fdc0b9", "committedDate": "2020-02-21T16:48:22Z", "message": "test with more ingestion and replicas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc631ddebdc5881eb5c41789e4e2a5252560cd13", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/dc631ddebdc5881eb5c41789e4e2a5252560cd13", "committedDate": "2020-02-21T19:38:36Z", "message": "test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71fdcef80a510c5deae26462c18c7cff2746439b", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/71fdcef80a510c5deae26462c18c7cff2746439b", "committedDate": "2020-02-21T19:56:40Z", "message": "imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d44cf7156de8866c80d94b3f753a24153df2db3", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/2d44cf7156de8866c80d94b3f753a24153df2db3", "committedDate": "2020-02-24T09:00:58Z", "message": "imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd7c389a39d3db8bd4a5699a080e8be724499a9b", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/bd7c389a39d3db8bd4a5699a080e8be724499a9b", "committedDate": "2020-02-24T09:03:10Z", "message": "Merge branch '7.x' into joda/enable_joda_indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e56350e334d60a3185b1dac64af7d1f7f31ac8da", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/e56350e334d60a3185b1dac64af7d1f7f31ac8da", "committedDate": "2020-02-24T09:57:06Z", "message": "import fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5727a9b42d18a202505b18638659e4a7363802f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/e5727a9b42d18a202505b18638659e4a7363802f", "committedDate": "2020-02-24T10:14:58Z", "message": "extend basing joda test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a65b1e63c0aca122f338099d90dc5f576c7bf9f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/3a65b1e63c0aca122f338099d90dc5f576c7bf9f", "committedDate": "2020-02-24T10:16:22Z", "message": "warning fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "380bda0493a3b2ddbc5d50a85aa0b6fd31881ade", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/380bda0493a3b2ddbc5d50a85aa0b6fd31881ade", "committedDate": "2020-02-24T13:20:39Z", "message": "typo fixg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60440096f785fc1b924928f6ac8b5241fdc9ba8f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/60440096f785fc1b924928f6ac8b5241fdc9ba8f", "committedDate": "2020-02-25T08:53:38Z", "message": "test data fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb289f9853445a9625180ad4c9ec01d3937890d9", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/cb289f9853445a9625180ad4c9ec01d3937890d9", "committedDate": "2020-02-25T13:16:03Z", "message": "remove assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/dbfb7baef34bf9b1cff1967eec6d74beac35d0b8", "committedDate": "2020-02-25T13:31:18Z", "message": "missing quote"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b65bec70a8e6d0d892b095734f0885bff2181cfe", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/b65bec70a8e6d0d892b095734f0885bff2181cfe", "committedDate": "2020-02-27T17:49:27Z", "message": "more changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDY3MDM4", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-366067038", "createdAt": "2020-02-27T23:16:56Z", "commit": {"oid": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzoxNjo1NlrOFvkiow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzoxNzoyNFrOFvkjSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNjA4Mw==", "bodyText": "nit: maybe just \"isJodaPattern\", since this is about the pattern, not an index", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r385426083", "createdAt": "2020-02-27T23:16:56Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/common/joda/Joda.java", "diffHunk": "@@ -336,6 +338,12 @@ public DateTimeField getField(Chronology chronology) {\n         }\n     };\n \n+    public static boolean isJodaStyleIndex(Mapper.BuilderContext context, String pattern) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNjI1MA==", "bodyText": "nit: no need for these newlines?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r385426250", "createdAt": "2020-02-27T23:17:24Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "diffHunk": "@@ -548,6 +555,8 @@ public DateFieldType fieldType() {\n         return (DateFieldType) super.fieldType();\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfb7baef34bf9b1cff1967eec6d74beac35d0b8"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a789c0b2a965c8dfae2d733b954d5f076bbeeeb", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/4a789c0b2a965c8dfae2d733b954d5f076bbeeeb", "committedDate": "2020-02-28T11:50:06Z", "message": "rename and empty line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e6e213c446751897c2657f39f6cb21dbecb125", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/12e6e213c446751897c2657f39f6cb21dbecb125", "committedDate": "2020-03-01T10:58:04Z", "message": "java test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a018f55714153cb72a1f9086bf6a0f788312f46a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/a018f55714153cb72a1f9086bf6a0f788312f46a", "committedDate": "2020-03-01T11:41:51Z", "message": "testing joda backed fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddddf2f57c362adf6ce54b749d87f730d0f063b", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/4ddddf2f57c362adf6ce54b749d87f730d0f063b", "committedDate": "2020-03-01T17:35:34Z", "message": "warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e9ce99552d6888bea5822ed0a746c55b4ffd4f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/e6e9ce99552d6888bea5822ed0a746c55b4ffd4f", "committedDate": "2020-03-01T19:26:35Z", "message": "skipping 7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5019677cee990ec02cb81b8c287ffe33c4d047c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/c5019677cee990ec02cb81b8c287ffe33c4d047c", "committedDate": "2020-03-02T10:43:10Z", "message": "tests passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79ee333fb5ea9c7f26c37e61d3db25a7283c3dc", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d79ee333fb5ea9c7f26c37e61d3db25a7283c3dc", "committedDate": "2020-03-02T11:05:57Z", "message": "import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d262231f9ec4ee785f4f270afe996f4526c4012c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d262231f9ec4ee785f4f270afe996f4526c4012c", "committedDate": "2020-03-02T11:35:27Z", "message": "codestyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/077dfeb02bff273e45454c6df0d5851f133651e2", "committedDate": "2020-03-02T13:30:12Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzM3MzM5", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-367337339", "createdAt": "2020-03-02T16:25:28Z", "commit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNToyOVrOFwmFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNToyOVrOFwmFAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5OTg0MA==", "bodyText": "this is used when using dynamic date formats setting. - so at index creation https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-field-mapping.html", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386499840", "createdAt": "2020-03-02T16:25:29Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java", "diffHunk": "@@ -341,6 +341,7 @@ private static IndexOptions nodeIndexOptionValue(final Object propNode) {\n     }\n \n     public static DateFormatter parseDateTimeFormatter(Object node) {\n+        //todo pg debug this..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzM5ODA2", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-367339806", "createdAt": "2020-03-02T16:28:32Z", "commit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyODozM1rOFwmMmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyODozM1rOFwmMmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMTc4Ng==", "bodyText": "this will happen when there is a mixed env with 7.7 and 7.0. Overall I think it is ok to assume it is java. most of the time it would work so no point breaking too many people", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386501786", "createdAt": "2020-03-02T16:28:33Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,21 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {\n+                //if stream is from 7.7 it will have a flag indicating if format is joda\n+                boolean isJoda = in.readBoolean();\n+                this.formatter = isJoda ? Joda.forPattern(datePattern) : DateFormatter.forPattern(datePattern);\n+            } else if (Joda.isJodaPattern(in.getVersion(), datePattern)) {\n+                //when received a stream from 6.0-6.latest it can be java if starts with 8 otherwise joda\n+                this.formatter = Joda.forPattern(datePattern);\n+            }else{\n+                // unknown if this is joda or java for versions earlier then [7.0-7.7).\n+                //todo consider throwing exception.. .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzQwOTgy", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-367340982", "createdAt": "2020-03-02T16:29:55Z", "commit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyOTo1NVrOFwmQIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyOTo1NVrOFwmQIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMjY5MQ==", "bodyText": "@polyfractal is this a high perf piece of code? Is a instanceof too expensive here?\nthis could be refactored to a method on a DateFormatter class", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386502691", "createdAt": "2020-03-02T16:29:55Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -224,6 +241,10 @@ public void writeTo(StreamOutput out) throws IOException {\n                 out.writeString(timeZone.getId());\n                 out.writeVInt(resolution.ordinal());\n             }\n+            if (out.getVersion().onOrAfter(Version.CURRENT)) {\n+                //in order not to loose information if the formatter is a joda we send a flag\n+                out.writeBoolean(formatter instanceof JodaDateFormatter);//todo pg consider refactor to isJoda method..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077dfeb02bff273e45454c6df0d5851f133651e2"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cfebf2a5936b49d68d345816accd6dd3bc0786b", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/1cfebf2a5936b49d68d345816accd6dd3bc0786b", "committedDate": "2020-03-02T16:31:08Z", "message": "todo cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/567ef7afb80d994cd525b81b97560bc70f797157", "committedDate": "2020-03-02T16:41:18Z", "message": "typoos fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDI4Mzk3", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-367428397", "createdAt": "2020-03-02T18:32:40Z", "commit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxODozMjo0MVrOFwqdMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowOTo0MFrOFwrq1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MTU2OA==", "bodyText": "Where is this set?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386571568", "createdAt": "2020-03-02T18:32:41Z", "author": {"login": "rjernst"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ * This test cannot be implemented in yml because in mixed cluster\n+ * there are 3 options of warnings to be returned (it was refactored few times).\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    private static final Version UPGRADE_FROM_VERSION =\n+        Version.fromString(System.getProperty(\"tests.upgrade_from_version\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4Nzg1MA==", "bodyText": "This sounds like a bug? It should probably warrant an issue?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386587850", "createdAt": "2020-03-02T19:02:33Z", "author": {"login": "rjernst"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ * This test cannot be implemented in yml because in mixed cluster\n+ * there are 3 options of warnings to be returned (it was refactored few times).\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    private static final Version UPGRADE_FROM_VERSION =\n+        Version.fromString(System.getProperty(\"tests.upgrade_from_version\"));\n+\n+    private static final String V_6_8_1_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'.\" +\n+        \" Prefix your date format with '8' to use the new specifier.\";\n+\n+    private static final String V_7_0_0_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'. \" +\n+        \"Use new java.time date format specifiers.\";\n+\n+    private static final String V_6_8_0_WARNING = \"Use of 'Y' (year-of-era) will change to 'y' in the next major version of Elasticsearch. \"\n+        + \"Prefix your date format with '8' to use the new specifier.\";\n+\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_it\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+\n+                Version minVersion = getMinVersion();\n+                if (minVersion.equals(Version.V_6_8_0)) {\n+                    createTestIndex.setOptions(expectWarnings(V_6_8_0_WARNING));\n+                } else if (minVersion.onOrAfter(Version.V_6_8_1) && minVersion.before(Version.V_7_0_0)) {\n+                    createTestIndex.setOptions(expectWarnings(V_6_8_1_PLUS_WARNING));\n+                } else {\n+                    createTestIndex.setOptions(expectWarnings(V_7_0_0_PLUS_WARNING));\n+                }\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(200, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_it/_doc\");\n+\n+                break;\n+            case MIXED:\n+                postNewDoc(\"joda_it/_doc\");\n+\n+                Request search = dateRangeSearch(\"joda_it/_search\");\n+\n+                RequestOptions options = expectVersionSpecificWarnings(\n+                    consumer -> consumer.compatible(V_6_8_0_WARNING, V_6_8_1_PLUS_WARNING, V_7_0_0_PLUS_WARNING));\n+\n+                search.setOptions(options);\n+\n+                Response searchResp = client().performRequest(search);\n+                assertEquals(200, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"joda_it/_doc\");\n+                search = dateRangeSearch(\"joda_it/_search\");\n+                //somehow  this can at times not have a warning..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTA1NQ==", "bodyText": "nit: it's unclear to me what the suffix \"_it\" means. perhaps use the index names \"joda_time\" and \"java_time\"?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386589055", "createdAt": "2020-03-02T19:04:54Z", "author": {"login": "rjernst"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ * This test cannot be implemented in yml because in mixed cluster\n+ * there are 3 options of warnings to be returned (it was refactored few times).\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    private static final Version UPGRADE_FROM_VERSION =\n+        Version.fromString(System.getProperty(\"tests.upgrade_from_version\"));\n+\n+    private static final String V_6_8_1_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'.\" +\n+        \" Prefix your date format with '8' to use the new specifier.\";\n+\n+    private static final String V_7_0_0_PLUS_WARNING = \"'Y' year-of-era should be replaced with 'y'. Use 'Y' for week-based-year.; \" +\n+        \"'Z' time zone offset/id fails when parsing 'Z' for Zulu timezone. Consider using 'X'. \" +\n+        \"Use new java.time date format specifiers.\";\n+\n+    private static final String V_6_8_0_WARNING = \"Use of 'Y' (year-of-era) will change to 'y' in the next major version of Elasticsearch. \"\n+        + \"Prefix your date format with '8' to use the new specifier.\";\n+\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_it\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDI3Mw==", "bodyText": "CURRENT should not be used in serialization logic since it is constantly changing. This should be the specific version this will be backported to", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386590273", "createdAt": "2020-03-02T19:07:18Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,20 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTQ0Ng==", "bodyText": "This could be refactored to set isJoda based on version/joda pattern check and then always use the conditional on the next line.", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r386591446", "createdAt": "2020-03-02T19:09:40Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,20 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            if (in.getVersion().onOrAfter(Version.CURRENT)) {\n+                //if stream is from 7.7 it will have a flag indicating if format is joda\n+                boolean isJoda = in.readBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ef7afb80d994cd525b81b97560bc70f797157"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815648e361e5aa4a392a17fe56ec64372a9baa54", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/815648e361e5aa4a392a17fe56ec64372a9baa54", "committedDate": "2020-03-03T08:13:31Z", "message": "code review follow up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae3ab0a01fbc6c39efe5aa35dea91118f1cad945", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ae3ab0a01fbc6c39efe5aa35dea91118f1cad945", "committedDate": "2020-03-03T15:16:26Z", "message": "fix upgrade from version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTMwNTU3", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-368130557", "createdAt": "2020-03-03T16:28:12Z", "commit": {"oid": "ae3ab0a01fbc6c39efe5aa35dea91118f1cad945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyODoxMlrOFxNKeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyODoxMlrOFxNKeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MDIxOA==", "bodyText": "baseName is prefixed with v, right? I don't think that is correct, this should be bwcVersion which is parseable by Version.fromString", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r387140218", "createdAt": "2020-03-03T16:28:12Z", "author": {"login": "rjernst"}, "path": "qa/rolling-upgrade/build.gradle", "diffHunk": "@@ -80,6 +80,7 @@ for (Version bwcVersion : bwcVersions.wireCompatible) {\n     doFirst {\n       project.delete(\"${buildDir}/cluster/shared/repo/${baseName}\")\n     }\n+    systemProperty 'tests.upgrade_from_version', \"${baseName}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae3ab0a01fbc6c39efe5aa35dea91118f1cad945"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6ad6fd2945cb3d18815b076ebc24c396a4f4ef", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/5d6ad6fd2945cb3d18815b076ebc24c396a4f4ef", "committedDate": "2020-03-04T14:39:08Z", "message": "removal of warrnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b16ced732c19161dc398a476330c37e477c3aef", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/1b16ced732c19161dc398a476330c37e477c3aef", "committedDate": "2020-03-04T14:40:46Z", "message": "javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "091151a209ccb65f73b3b31fd259b61bfbf9ac57", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/091151a209ccb65f73b3b31fd259b61bfbf9ac57", "committedDate": "2020-03-04T15:10:49Z", "message": "imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04285f1b972e74bb2d97507a09118897fc2a575b", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/04285f1b972e74bb2d97507a09118897fc2a575b", "committedDate": "2020-03-04T16:42:34Z", "message": "force refresh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da574a60c47f8c868525b7ad53f9e3f5da188f76", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/da574a60c47f8c868525b7ad53f9e3f5da188f76", "committedDate": "2020-03-04T16:52:57Z", "message": "Merge branch '7.x' into joda/enable_joda_indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810505fcb0a2952d1664d82a4c3b97809d873f42", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/810505fcb0a2952d1664d82a4c3b97809d873f42", "committedDate": "2020-03-04T17:47:03Z", "message": "flush after post doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ea0e89e107c033bebf326a29f7a314c273f4d0", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1ea0e89e107c033bebf326a29f7a314c273f4d0", "committedDate": "2020-03-04T17:47:16Z", "message": "Merge branch 'joda/enable_joda_indices' of github.com:pgomulka/elasticsearch into joda/enable_joda_indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c6c6aa677263fafb22e9457238977a9a99e33c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3c6c6aa677263fafb22e9457238977a9a99e33c", "committedDate": "2020-03-04T18:43:04Z", "message": "import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f8739b3f1f84c6fba490dbe31df03ee02117d1", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d3f8739b3f1f84c6fba490dbe31df03ee02117d1", "committedDate": "2020-03-05T10:15:15Z", "message": "assert on body"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "675b3d114444a8b56f4268f3e5789f303a068fe3", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/675b3d114444a8b56f4268f3e5789f303a068fe3", "committedDate": "2020-03-09T08:09:26Z", "message": "sout remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/729d3101d22909c0706b5b795c57082feb4b336c", "committedDate": "2020-03-09T09:15:36Z", "message": "refresh instead of flush"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDA5NjE2", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-371009616", "createdAt": "2020-03-09T09:18:49Z", "commit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToxODo0OVrOFzfjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1Njo0MlrOFzpJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODcyOA==", "bodyText": "We shouldn't add this method to the REST client, it's trappy by design given how it ignores all responses but the last one?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389538728", "createdAt": "2020-03-09T09:18:49Z", "author": {"login": "jpountz"}, "path": "client/rest/src/main/java/org/elasticsearch/client/RestClient.java", "diffHunk": "@@ -235,6 +235,17 @@ public Response performRequest(Request request) throws IOException {\n         return performRequest(nextNodes(), internalRequest, null);\n     }\n \n+    public Response performRequest(Request request,  int times) throws IOException {\n+        Response response = null;\n+        InternalRequest internalRequest = new InternalRequest(request);\n+        NodeTuple<Iterator<Node>> iteratorNodeTuple = nextNodes();\n+        for(int i=0;i<times;i++){\n+            response = performRequest(iteratorNodeTuple, internalRequest, null);\n+        }\n+        return response;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTAwNA==", "bodyText": "Thanks for adding javadocs to this test suite. This isn't common practice in our code base, but is definitely useful in this case.", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389541004", "createdAt": "2020-03-09T09:23:26Z", "author": {"login": "jpountz"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MTM0NA==", "bodyText": "Can you use a more specific name, something like JodaCompatibilityIT?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389651344", "createdAt": "2020-03-09T13:15:08Z", "author": {"login": "jpountz"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzA0Nw==", "bodyText": "maybe use a different name, when I first saw the method I assumed it would check for shard failures, like ElasticsearchAssertions#assertSearchResponse, but this one actually checks the content.", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389653047", "createdAt": "2020-03-09T13:18:20Z", "author": {"login": "jpountz"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_time\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+                createTestIndex.setOptions(ignoreWarnings());\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"joda_time\", minute);\n+\n+                Request search = dateRangeSearch(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+\n+                Response searchResp = client().performRequest(search,3);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"joda_time\", 4);\n+\n+                search = searchWithAgg(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+                //making sure all nodes were used for search\n+                searchResp = client().performRequest(search,3);\n+                assertSearchResponse(searchResp);\n+                break;\n+        }\n+    }\n+\n+    public void testJavaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"java_time\", \"8yyyy-MM-dd'T'HH:mm:ssXXX\");\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"java_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"java_time\", minute);\n+\n+                Request search = dateRangeSearch(\"java_time\");\n+                Response searchResp = client().performRequest(search);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"java_time\", 4);\n+\n+                search = searchWithAgg(\"java_time\");\n+                //making sure all nodes were used for search\n+                searchResp = client().performRequest(search,3);\n+                assertSearchResponse(searchResp);\n+                break;\n+        }\n+    }\n+\n+    private RequestOptions ignoreWarnings() {\n+        RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder();\n+        options.setWarningsHandler(WarningsHandler.PERMISSIVE);\n+        return options.build();\n+    }\n+\n+    private void assertSearchResponse(Response searchResp) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzYzOQ==", "bodyText": "Can we go further and assert that the total number of shards is equal to the number of successful shards?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389653639", "createdAt": "2020-03-09T13:19:25Z", "author": {"login": "jpountz"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class DateFieldsIT extends AbstractRollingTestCase {\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_time\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+                createTestIndex.setOptions(ignoreWarnings());\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"joda_time\", minute);\n+\n+                Request search = dateRangeSearch(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+\n+                Response searchResp = client().performRequest(search,3);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NTM0OQ==", "bodyText": "I'm not seeing this flag?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389655349", "createdAt": "2020-03-09T13:21:12Z", "author": {"login": "jpountz"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/DateFieldsIT.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag on DocValues is used to indicate that an index was created in 6.x and has a joda pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NzA3Nw==", "bodyText": "I think you meant onOrAfter. But this makes me wonder whether we need this condition of the boolean expression, pre-6.x indices are not supported anyway in 7.", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389657077", "createdAt": "2020-03-09T13:22:53Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/common/joda/Joda.java", "diffHunk": "@@ -336,6 +337,12 @@ public DateTimeField getField(Chronology chronology) {\n         }\n     };\n \n+    public static boolean isJodaPattern(Version version, String pattern) {\n+        return version.before(Version.V_7_0_0)\n+            && version.after(Version.V_6_0_0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2ODc4MA==", "bodyText": "can you add javadocs?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389668780", "createdAt": "2020-03-09T13:33:16Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/common/joda/Joda.java", "diffHunk": "@@ -336,6 +337,12 @@ public DateTimeField getField(Chronology chronology) {\n         }\n     };\n \n+    public static boolean isJodaPattern(Version version, String pattern) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5NTgyNw==", "bodyText": "can you add more details about when it gets incorrect? If my understanding is correct, this happens if an index is created on 6.x and the cluster is later upgraded to 7.x (x<7)?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r389695827", "createdAt": "2020-03-09T13:56:42Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/search/DocValueFormat.java", "diffHunk": "@@ -208,6 +210,19 @@ public DateTime(StreamInput in) throws IOException {\n                 this.timeZone = ZoneId.of(zoneId);\n                 this.resolution = DateFieldMapper.Resolution.ofOrdinal(in.readVInt());\n             }\n+            final boolean isJoda;\n+            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                //if stream is from 7.7 Node it will have a flag indicating if format is joda\n+                isJoda = in.readBoolean();\n+            } else {\n+                //when received a stream from 6.0-6.latest Node it can be java if starts with 8 otherwise joda\n+                // If a stream is from [7.0 - 7.7) it will assume (sometimes incorrectly) that the date is java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "729d3101d22909c0706b5b795c57082feb4b336c"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecf57f58f0efe33e484ff9441aff0855653343f2", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ecf57f58f0efe33e484ff9441aff0855653343f2", "committedDate": "2020-03-10T11:31:39Z", "message": "code review follow up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed29d2c96ee67ce9edeeb23e55480c6a955d436", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/5ed29d2c96ee67ce9edeeb23e55480c6a955d436", "committedDate": "2020-03-10T19:14:00Z", "message": "Merge branch '7.x' into joda/enable_joda_indices"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDM1Njc1", "url": "https://github.com/elastic/elasticsearch/pull/52555#pullrequestreview-373035675", "createdAt": "2020-03-11T18:50:34Z", "commit": {"oid": "5ed29d2c96ee67ce9edeeb23e55480c6a955d436"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1MDozNFrOF1EY0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1MDozNFrOF1EY0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MDczNg==", "bodyText": "remove?", "url": "https://github.com/elastic/elasticsearch/pull/52555#discussion_r391190736", "createdAt": "2020-03-11T18:50:34Z", "author": {"login": "jpountz"}, "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/JodaCompatibilityIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.upgrades;\n+\n+import org.apache.http.HttpStatus;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.WarningsHandler;\n+import org.elasticsearch.common.Booleans;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.rest.action.search.RestSearchAction.TOTAL_HITS_AS_INT_PARAM;\n+\n+/**\n+ * This is test is meant to verify that when upgrading from 6.x version to 7.7 or newer it is able to parse date fields with joda pattern.\n+ *\n+ * The test is indexing documents and searches with use of joda or java pattern.\n+ * In order to make sure that serialization logic is used a search call is executed 3 times (using all nodes).\n+ * It cannot be guaranteed that serialization logic will always be used as it might happen that\n+ * all shards are allocated on the same node and client is connecting to it.\n+ * Because of this warnings assertions have to be ignored.\n+ *\n+ * A special flag used when serializing {@link DocValueFormat.DateTime#writeTo DocValueFormat.DateTime::writeTo}\n+ * is used to indicate that an index was created in 6.x and has a joda pattern. The same flag is read when\n+ * {@link DocValueFormat.DateTime#DateTime(StreamInput)} deserializing.\n+ * When upgrading from 7.0-7.6 to 7.7 there is no way to tell if a pattern was created in 6.x as this flag cannot be added.\n+ * Hence a skip assume section in init()\n+ *\n+ * @see org.elasticsearch.search.DocValueFormat.DateTime\n+ */\n+public class JodaCompatibilityIT extends AbstractRollingTestCase {\n+\n+    @BeforeClass\n+    public static void init(){\n+        assumeTrue(\"upgrading from 7.0-7.6 will fail parsing joda formats\",\n+            UPGRADE_FROM_VERSION.before(Version.V_7_0_0));\n+    }\n+\n+    public void testJodaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"joda_time\", \"YYYY-MM-dd'T'HH:mm:ssZZ\");\n+                createTestIndex.setOptions(ignoreWarnings());\n+\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"joda_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"joda_time\", minute);\n+\n+                Request search = dateRangeSearch(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+\n+                performOnAllNodes(search, r -> assertEquals(HttpStatus.SC_OK, r.getStatusLine().getStatusCode()));\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"joda_time\", 4);\n+\n+                search = searchWithAgg(\"joda_time\");\n+                search.setOptions(ignoreWarnings());\n+                //making sure all nodes were used for search\n+                performOnAllNodes(search, r -> assertResponseHasAllDocuments(r));\n+                break;\n+        }\n+    }\n+\n+    public void testJavaBackedDocValueAndDateFields() throws Exception {\n+        switch (CLUSTER_TYPE) {\n+            case OLD:\n+                Request createTestIndex = indexWithDateField(\"java_time\", \"8yyyy-MM-dd'T'HH:mm:ssXXX\");\n+                Response resp = client().performRequest(createTestIndex);\n+                assertEquals(HttpStatus.SC_OK, resp.getStatusLine().getStatusCode());\n+\n+                postNewDoc(\"java_time\", 1);\n+\n+                break;\n+            case MIXED:\n+                int minute = Booleans.parseBoolean(System.getProperty(\"tests.first_round\")) ? 2 : 3;\n+                postNewDoc(\"java_time\", minute);\n+\n+                Request search = dateRangeSearch(\"java_time\");\n+                Response searchResp = client().performRequest(search);\n+                assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+                break;\n+            case UPGRADED:\n+                postNewDoc(\"java_time\", 4);\n+\n+                search = searchWithAgg(\"java_time\");\n+                //making sure all nodes were used for search\n+                performOnAllNodes(search, r -> assertResponseHasAllDocuments(r));\n+\n+                break;\n+        }\n+    }\n+\n+    private RequestOptions ignoreWarnings() {\n+        RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder();\n+        options.setWarningsHandler(WarningsHandler.PERMISSIVE);\n+        return options.build();\n+    }\n+\n+    private void performOnAllNodes(Request search, Consumer<Response> consumer) throws IOException {\n+        List<Node> nodes = client().getNodes();\n+        for (Node node : nodes) {\n+            client().setNodes(Collections.singletonList(node));\n+            Response response = client().performRequest(search);\n+            consumer.accept(response);\n+            assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+        }\n+        client().setNodes(nodes);\n+    }\n+\n+    private void assertResponseHasAllDocuments(Response searchResp) {\n+        assertEquals(HttpStatus.SC_OK, searchResp.getStatusLine().getStatusCode());\n+        try {\n+            assertEquals(removeWhiteSpace(\"{\" +\n+                    \"  \\\"_shards\\\": {\" +\n+                    \"    \\\"total\\\": 3,\" +\n+                    \"    \\\"successful\\\": 3\" +\n+                    \"  },\"+\n+                    \"  \\\"hits\\\": {\" +\n+                    \"    \\\"total\\\": 4,\" +\n+                    \"    \\\"hits\\\": [\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:01+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      },\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:02+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      },\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:03+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      },\" +\n+                    \"      {\" +\n+                    \"        \\\"_source\\\": {\" +\n+                    \"          \\\"datetime\\\": \\\"2020-01-01T00:00:04+01:00\\\"\" +\n+                    \"        }\" +\n+                    \"      }\" +\n+                    \"    ]\" +\n+                    \"  }\" +\n+                    \"}\"),\n+                EntityUtils.toString(searchResp.getEntity(), StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            throw new AssertionError(\"Exception during response parising\", e);\n+        }\n+    }\n+\n+    private String removeWhiteSpace(String input) {\n+        return input.replaceAll(\"[\\\\n\\\\r\\\\t\\\\ ]\", \"\");\n+    }\n+\n+    private Request dateRangeSearch(String endpoint) {\n+        Request search = new Request(\"GET\", endpoint+\"/_search\");\n+        search.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n+        search.addParameter(\"filter_path\", \"hits.total,hits.hits._source.datetime,_shards.total,_shards.successful\");\n+        search.setJsonEntity(\"\" +\n+                \"{\\n\" +\n+                \"  \\\"track_total_hits\\\": true,\\n\" +\n+                \"  \\\"sort\\\": \\\"datetime\\\",\\n\" +\n+                \"  \\\"query\\\": {\\n\" +\n+                \"    \\\"range\\\": {\\n\" +\n+                \"      \\\"datetime\\\": {\\n\" +\n+                \"        \\\"gte\\\": \\\"2020-01-01T00:00:00+01:00\\\",\\n\" +\n+                \"        \\\"lte\\\": \\\"2020-01-02T00:00:00+01:00\\\"\\n\" +\n+                \"      }\\n\" +\n+                \"    }\\n\" +\n+                \"  }\\n\" +\n+                \"}\\n\"\n+        );\n+        return search;\n+    }\n+\n+    private Request searchWithAgg(String endpoint) throws IOException {\n+        Request search = new Request(\"GET\", endpoint+\"/_search\");\n+        search.addParameter(TOTAL_HITS_AS_INT_PARAM, \"true\");\n+        search.addParameter(\"filter_path\", \"hits.total,hits.hits._source.datetime,_shards.total,_shards.successful\");\n+\n+        search.setJsonEntity(\"{\\n\" +\n+            \"  \\\"track_total_hits\\\": true,\\n\" +\n+            \"  \\\"sort\\\": \\\"datetime\\\",\\n\" +\n+            \"  \\\"query\\\": {\\n\" +\n+            \"    \\\"range\\\": {\\n\" +\n+            \"      \\\"datetime\\\": {\\n\" +\n+            \"        \\\"gte\\\": \\\"2020-01-01T00:00:00+01:00\\\",\\n\" +\n+            \"        \\\"lte\\\": \\\"2020-01-02T00:00:00+01:00\\\"\\n\" +\n+            \"      }\\n\" +\n+            \"    }\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"aggs\\\" : {\\n\" +\n+            \"    \\\"docs_per_year\\\" : {\\n\" +\n+            \"      \\\"date_histogram\\\" : {\\n\" +\n+            \"        \\\"field\\\" : \\\"date\\\",\\n\" +\n+            \"        \\\"calendar_interval\\\" : \\\"year\\\"\\n\" +\n+            \"      }\\n\" +\n+            \"    }\\n\" +\n+            \"  }\\n\" +\n+            \"}\\n\"\n+        );\n+        return search;\n+    }\n+    private Request indexWithDateField(String indexName, String format) {\n+        Request createTestIndex = new Request(\"PUT\", indexName);\n+        createTestIndex.addParameter(\"include_type_name\", \"false\");\n+        createTestIndex.setJsonEntity(\"{\\n\" +\n+            \"  \\\"settings\\\": {\\n\" +\n+            \"    \\\"index.number_of_shards\\\": 3\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"mappings\\\": {\\n\" +\n+            \"      \\\"properties\\\": {\\n\" +\n+            \"        \\\"datetime\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"date\\\",\\n\" +\n+            \"          \\\"format\\\": \\\"\" + format + \"\\\"\\n\" +\n+            \"        }\\n\" +\n+            \"      }\\n\" +\n+            \"  }\\n\" +\n+            \"}\"\n+        );\n+        return createTestIndex;\n+    }\n+\n+    private void postNewDoc(String endpoint, int minute) throws IOException {\n+        Request putDoc = new Request(\"POST\", endpoint+\"/_doc\");\n+        putDoc.addParameter(\"refresh\", \"true\");\n+        putDoc.addParameter(\"wait_for_active_shards\", \"all\");\n+        putDoc.setJsonEntity(\"{\\n\" +\n+            \"  \\\"datetime\\\": \\\"2020-01-01T00:00:0\" + minute + \"+01:00\\\"\\n\" +\n+            \"}\"\n+        );\n+        Response resp = client().performRequest(putDoc);\n+        assertEquals(HttpStatus.SC_CREATED, resp.getStatusLine().getStatusCode());\n+//        flush(endpoint,true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed29d2c96ee67ce9edeeb23e55480c6a955d436"}, "originalPosition": 268}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda9c47069d8fb41871b42066c5a62fc7142f74a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/bda9c47069d8fb41871b42066c5a62fc7142f74a", "committedDate": "2020-03-11T19:41:46Z", "message": "remove comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}