{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDcyNzk3", "number": 58418, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1NTozOVrOEH6uog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1ODowN1rOEH6xgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM3Njk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/SearchHit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1NTozOVrOGnj_fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzoxMzo1OFrOGoFx3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNzM0MA==", "bodyText": "It would be great to have a a test for this too.", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444137340", "createdAt": "2020-06-23T10:55:39Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/search/SearchHit.java", "diffHunk": "@@ -635,7 +635,12 @@ public XContentBuilder toInnerXContent(XContentBuilder builder, Params params) t\n         } else {\n             builder.field(Fields._SCORE, score);\n         }\n+\n         for (DocumentField field : metaFields.values()) {\n+            // ignore empty metadata fields\n+            if (field.getValues().size() == 0) {\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MDkxMA==", "bodyText": "++, I pushed b947758", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444690910", "createdAt": "2020-06-24T07:13:58Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/SearchHit.java", "diffHunk": "@@ -635,7 +635,12 @@ public XContentBuilder toInnerXContent(XContentBuilder builder, Params params) t\n         } else {\n             builder.field(Fields._SCORE, score);\n         }\n+\n         for (DocumentField field : metaFields.values()) {\n+            // ignore empty metadata fields\n+            if (field.getValues().size() == 0) {\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNzM0MA=="}, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM3ODgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/SearchHit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1NjoxNVrOGnkAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzoxNDowNFrOGoFyDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNzYyOQ==", "bodyText": "nit: documentFields.isEmpty() == false?", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444137629", "createdAt": "2020-06-23T10:56:15Z", "author": {"login": "cbuescher"}, "path": "server/src/main/java/org/elasticsearch/search/SearchHit.java", "diffHunk": "@@ -647,10 +652,15 @@ public XContentBuilder toInnerXContent(XContentBuilder builder, Params params) t\n         if (source != null) {\n             XContentHelper.writeRawField(SourceFieldMapper.NAME, source, builder, params);\n         }\n-        if (!documentFields.isEmpty()) {\n+        if (!documentFields.isEmpty() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MDk1Ng==", "bodyText": "b947758", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444690956", "createdAt": "2020-06-24T07:14:04Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/SearchHit.java", "diffHunk": "@@ -647,10 +652,15 @@ public XContentBuilder toInnerXContent(XContentBuilder builder, Params params) t\n         if (source != null) {\n             XContentHelper.writeRawField(SourceFieldMapper.NAME, source, builder, params);\n         }\n-        if (!documentFields.isEmpty()) {\n+        if (!documentFields.isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNzYyOQ=="}, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM4NDM1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/SearchHitTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1ODowN1rOGnkEAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo0ODowNlrOGoQk5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODQ5OA==", "bodyText": "Can we also check that the fields object is not only empty in the xContent rendering but really not present? I think the parsed object would contain an empty map regardless.", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444138498", "createdAt": "2020-06-23T10:58:07Z", "author": {"login": "cbuescher"}, "path": "server/src/test/java/org/elasticsearch/search/SearchHitTests.java", "diffHunk": "@@ -353,6 +353,42 @@ public void testWeirdScriptFields() throws Exception {\n         }\n     }\n \n+    public void testToXContentEmptyFields() throws IOException {\n+        Map<String, DocumentField> fields = new HashMap<>();\n+        fields.put(\"foo\", new DocumentField(\"foo\", Collections.emptyList()));\n+        fields.put(\"bar\", new DocumentField(\"bar\", Collections.emptyList()));\n+        SearchHit hit = new SearchHit(0, \"_id\", fields, Collections.emptyMap());\n+        {\n+            BytesReference originalBytes = toShuffledXContent(hit, XContentType.JSON, ToXContent.EMPTY_PARAMS, randomBoolean());\n+            final SearchHit parsed;\n+            try (XContentParser parser = createParser(XContentType.JSON.xContent(), originalBytes)) {\n+                parser.nextToken(); // jump to first START_OBJECT\n+                parsed = SearchHit.fromXContent(parser);\n+                assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n+                assertNull(parser.nextToken());\n+            }\n+            assertThat(parsed.getFields().size(), equalTo(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MDM3OQ==", "bodyText": "I am not sure I understand, we check if the empty fields are removed when rendering to xcontent. What kind of test are you expecting ?", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444690379", "createdAt": "2020-06-24T07:12:53Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/SearchHitTests.java", "diffHunk": "@@ -353,6 +353,42 @@ public void testWeirdScriptFields() throws Exception {\n         }\n     }\n \n+    public void testToXContentEmptyFields() throws IOException {\n+        Map<String, DocumentField> fields = new HashMap<>();\n+        fields.put(\"foo\", new DocumentField(\"foo\", Collections.emptyList()));\n+        fields.put(\"bar\", new DocumentField(\"bar\", Collections.emptyList()));\n+        SearchHit hit = new SearchHit(0, \"_id\", fields, Collections.emptyMap());\n+        {\n+            BytesReference originalBytes = toShuffledXContent(hit, XContentType.JSON, ToXContent.EMPTY_PARAMS, randomBoolean());\n+            final SearchHit parsed;\n+            try (XContentParser parser = createParser(XContentType.JSON.xContent(), originalBytes)) {\n+                parser.nextToken(); // jump to first START_OBJECT\n+                parsed = SearchHit.fromXContent(parser);\n+                assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n+                assertNull(parser.nextToken());\n+            }\n+            assertThat(parsed.getFields().size(), equalTo(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODQ5OA=="}, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0Mjk5Ng==", "bodyText": "Sorry that I wasn't clear, what I mean is that both hits:\n{\u00a0\n    [...], \n    \"_source\" : { ... },\n    \"fields\" : { }\n}\n\nand\n{ \n    [...], \n    \"_source\" : { ... }\n}\n\nwould be parsed to a SearchHit where getFields() returns an empty map, but it would be nice to check that we really don't render the fields object at all when there are no entries to the documentFields with size>0. It's only about checking the output of the rendering step directly rather than parsing it, because then we cannot tell the difference in the test. Not sure if that's clearer now and if such a test is necessary but I think it would be good to add, but not a bit deal if not...", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444742996", "createdAt": "2020-06-24T08:50:07Z", "author": {"login": "cbuescher"}, "path": "server/src/test/java/org/elasticsearch/search/SearchHitTests.java", "diffHunk": "@@ -353,6 +353,42 @@ public void testWeirdScriptFields() throws Exception {\n         }\n     }\n \n+    public void testToXContentEmptyFields() throws IOException {\n+        Map<String, DocumentField> fields = new HashMap<>();\n+        fields.put(\"foo\", new DocumentField(\"foo\", Collections.emptyList()));\n+        fields.put(\"bar\", new DocumentField(\"bar\", Collections.emptyList()));\n+        SearchHit hit = new SearchHit(0, \"_id\", fields, Collections.emptyMap());\n+        {\n+            BytesReference originalBytes = toShuffledXContent(hit, XContentType.JSON, ToXContent.EMPTY_PARAMS, randomBoolean());\n+            final SearchHit parsed;\n+            try (XContentParser parser = createParser(XContentType.JSON.xContent(), originalBytes)) {\n+                parser.nextToken(); // jump to first START_OBJECT\n+                parsed = SearchHit.fromXContent(parser);\n+                assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n+                assertNull(parser.nextToken());\n+            }\n+            assertThat(parsed.getFields().size(), equalTo(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODQ5OA=="}, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzgxMg==", "bodyText": "Got it, thanks. I pushed 459cb60", "url": "https://github.com/elastic/elasticsearch/pull/58418#discussion_r444867812", "createdAt": "2020-06-24T12:48:06Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/SearchHitTests.java", "diffHunk": "@@ -353,6 +353,42 @@ public void testWeirdScriptFields() throws Exception {\n         }\n     }\n \n+    public void testToXContentEmptyFields() throws IOException {\n+        Map<String, DocumentField> fields = new HashMap<>();\n+        fields.put(\"foo\", new DocumentField(\"foo\", Collections.emptyList()));\n+        fields.put(\"bar\", new DocumentField(\"bar\", Collections.emptyList()));\n+        SearchHit hit = new SearchHit(0, \"_id\", fields, Collections.emptyMap());\n+        {\n+            BytesReference originalBytes = toShuffledXContent(hit, XContentType.JSON, ToXContent.EMPTY_PARAMS, randomBoolean());\n+            final SearchHit parsed;\n+            try (XContentParser parser = createParser(XContentType.JSON.xContent(), originalBytes)) {\n+                parser.nextToken(); // jump to first START_OBJECT\n+                parsed = SearchHit.fromXContent(parser);\n+                assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n+                assertNull(parser.nextToken());\n+            }\n+            assertThat(parsed.getFields().size(), equalTo(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODQ5OA=="}, "originalCommit": {"oid": "6f8588b2e23785f5dc8075ea3b7dd81a2b741f35"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}