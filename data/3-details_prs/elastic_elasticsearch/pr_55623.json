{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTA2NDY3", "number": 55623, "title": "Let realms gracefully terminate the authN chain", "bodyText": "AuthN realms are ordered as a chain so that the credentials of a given\nuser are verified in succession. Upon the first successful verification,\nthe user is authenticated. Realms do however have the option to cut short\nthis iterative process, when the credentials don't verify and the user\ncannot exist in any other realm. This mechanism is currently used by\nthe Reserved and the Kerberos realm.\nThis commit improves the early termination operation by allowing\nrealms to gracefully terminate authentication, as if the chain has been\ntried out completely. Previously, early termination resulted in an\nauthentication error which varies the response body compared\nto the failed authentication outcome where no realm could verify the\ncredentials successfully.\nReserved users are hence denied authentication in exactly the same\nway as other users are when no realm can validate their credentials.", "createdAt": "2020-04-22T19:49:01Z", "url": "https://github.com/elastic/elasticsearch/pull/55623", "merged": true, "mergeCommit": {"oid": "11d2480a42b8b209cdda4a659e8179ecc7c8045f"}, "closed": true, "closedAt": "2020-05-04T19:23:34Z", "author": {"login": "albertzaharovits"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaNKaRgH2gAyNDA3NTA2NDY3OmNmYjU4YmRiZWFlZDNjYjQ5YTBmOGM3NmJjYzU3YjgyM2I1NTU3MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd_TMOAFqTQwNDk2NjkzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cfb58bdbeaed3cb49a0f8c76bcc57b823b555706", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/cfb58bdbeaed3cb49a0f8c76bcc57b823b555706", "committedDate": "2020-04-22T19:08:15Z", "message": "No test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/7384532f7d757f8b7a615fbe7742a82f1789bad9", "committedDate": "2020-04-22T20:31:56Z", "message": "And the tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzA1NDE1", "url": "https://github.com/elastic/elasticsearch/pull/55623#pullrequestreview-398705415", "createdAt": "2020-04-23T01:50:13Z", "commit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1MDoxNFrOGKS_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTo1MDoxNFrOGKS_oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MDE0NA==", "bodyText": "I didn't test, but the same goal could be achieved by calling userListener.onResponse(null) in the else block, i.e.:\nif (result.getException() != null) {\n    ...\n} else {\n   ...\n   userListener.onResponse(null);\n}\nThis leverages the existing logic inside consumeUser so that changes to the following IteratingActionListener's error handler is not needed. I personally feels this would be simpler and easy to reason about.", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r413450144", "createdAt": "2020-04-23T01:50:14Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage());\n+                                    }\n+                                    userListener.onFailure(result.getException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODY4Njkx", "url": "https://github.com/elastic/elasticsearch/pull/55623#pullrequestreview-398868691", "createdAt": "2020-04-23T08:22:25Z", "commit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMjoyNVrOGKc8HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMjoyNVrOGKc8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxMzA4NQ==", "bodyText": "This is more of a question: why were token and authenticationToken both used in differently places? Should we prefer one over the other?", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r413613085", "createdAt": "2020-04-23T08:22:25Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -488,7 +492,13 @@ private void consumeToken(AuthenticationToken token) {\n                 final IteratingActionListener<User, Realm> authenticatingListener =\n                     new IteratingActionListener<>(ContextPreservingActionListener.wrapPreservingContext(ActionListener.wrap(\n                         (user) -> consumeUser(user, messages),\n-                        (e) -> listener.onFailure(request.exceptionProcessingRequest(e, token))), threadContext),\n+                        (e) -> {\n+                            if (e != null) {\n+                                listener.onFailure(request.exceptionProcessingRequest(e, token));\n+                            } else {\n+                                listener.onFailure(request.authenticationFailed(authenticationToken));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzkzMDcy", "url": "https://github.com/elastic/elasticsearch/pull/55623#pullrequestreview-402393072", "createdAt": "2020-04-29T06:32:35Z", "commit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjozMjozNVrOGNxXUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjozNzo0MVrOGNxehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5MzQ1Ng==", "bodyText": "Nit, can we avoid unnecessarily splitting string literals over multiple lines\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n          \n          \n            \n                                                                    \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n          \n          \n            \n                                                    logger.info(new ParameterizedMessage(\n          \n          \n            \n                                                        \"Authentication of [{}] was exceptionally terminated by realm [{}] - {}\",\n          \n          \n            \n                                                        authenticationToken.principal(), realm.name(),", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417093456", "createdAt": "2020-04-29T06:32:35Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5Mzc1Nw==", "bodyText": "I don't think exceptionally and gracefully are accurate descriptions. In one case an exception was provided, and in another it wasn't but it doesn't follow that one is graceful and the other isn't.", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417093757", "createdAt": "2020-04-29T06:33:28Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDMzMA==", "bodyText": "It seems weird to have an onFailure with a possibly null exception. I get that it's handled correctly below, but can't it be handled here and be more idiomatic?", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417094330", "createdAt": "2020-04-29T06:35:01Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage());\n+                                    }\n+                                    userListener.onFailure(result.getException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NTMwMA==", "bodyText": "\ud83d\udc4d I think we should be consistent here.", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417095300", "createdAt": "2020-04-29T06:37:41Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -488,7 +492,13 @@ private void consumeToken(AuthenticationToken token) {\n                 final IteratingActionListener<User, Realm> authenticatingListener =\n                     new IteratingActionListener<>(ContextPreservingActionListener.wrapPreservingContext(ActionListener.wrap(\n                         (user) -> consumeUser(user, messages),\n-                        (e) -> listener.onFailure(request.exceptionProcessingRequest(e, token))), threadContext),\n+                        (e) -> {\n+                            if (e != null) {\n+                                listener.onFailure(request.exceptionProcessingRequest(e, token));\n+                            } else {\n+                                listener.onFailure(request.authenticationFailed(authenticationToken));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxMzA4NQ=="}, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3465cf0eb3e5d8f00fddd0330d87cfc4d16f06ff", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/3465cf0eb3e5d8f00fddd0330d87cfc4d16f06ff", "committedDate": "2020-05-04T09:40:16Z", "message": "Merge branch 'master' into authn_chain_gracefull_terminate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "author": {"user": {"login": "albertzaharovits", "name": "Albert Zaharovits"}}, "url": "https://github.com/elastic/elasticsearch/commit/24d85304b4bfe4030ced90ab5c73009b1c286ed4", "committedDate": "2020-05-04T10:35:04Z", "message": "Review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTY2OTMx", "url": "https://github.com/elastic/elasticsearch/pull/55623#pullrequestreview-404966931", "createdAt": "2020-05-04T13:05:18Z", "commit": {"oid": "24d85304b4bfe4030ced90ab5c73009b1c286ed4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzowNToxOFrOGP_XHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzowNToxOFrOGP_XHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxOTkzNA==", "bodyText": "I would choose null over the static exception as well. Afterall, the original error from ReservedRealm is null.\nAlternatively, if we wanna have some brainstorming here, we could give the IteratingActionListener a non-default iterationPredicate so it can terminate earlier even with a null user response, e.g. something like the follows:\nfinal AtomicBoolean terminated = new AtomicBoolean(false);\nfinal BiConsumer<Realm, ActionListener<User>> realmAuthenticatingConsumer = (realm, userListener) -> {\n   ...\n   if (request.getException() == null) {\n        logger.info(...);\n        terminated.set(true);\n        userListener.onResponse(null)\n   } else {\n        logger.info(...);\n        userListener.onFailure(request.getException());\n   }\n   ...\n};\n...\nfinal IteratingActionListener<User, Realm> authenticatingListener =\n    new IteratingActionListener<>(..., \n        Function.identity(), \n        user -> Objects.isNull(user) && terminated.get() == false);\nYet another option is to have a static NOT_AUTHENTICATED_USER object as a static field in User class and use it to signal earlier termination:\n   if (request.getException() == null) {\n        logger.info(...);\n        userListener.onResponse(User.NOT_AUTHENTICATED_USER)\n   } else {\n        logger.info(...);\n        userListener.onFailure(request.getException());\n   }\nIn consumeUser(), we will then need to check both null and this object, i.e.\nif (user == null || user == User.NOT_AUTHENTICATED_USER) { ... }\nOr we could give IteratingActionListener a transform function of response -> null ? User.NOT_AUTHENTICATED_USER : response so that consumeUser() can drop the null check.\nBoth of the alternatives reuse the logic in consumeUser, but add complexity elsewhere. I don't think they are better, just different choices. I personally would probably go with the static User field approach, but the null exception approach is fine with me.", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r419419934", "createdAt": "2020-05-04T13:05:18Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage());\n+                                    }\n+                                    userListener.onFailure(result.getException());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDMzMA=="}, "originalCommit": {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 490, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}