{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzUzNzU2", "number": 52486, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzoxOTowNFrODhyP-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDo0OTozMlrODiAhwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzUyODkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzoxOTowNVrOFstn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNzoxOTowNVrOFstn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyOTE3NQ==", "bodyText": "Small comment, could just be if (context != null && context.fieldMapper(...)) { ... }", "url": "https://github.com/elastic/elasticsearch/pull/52486#discussion_r382429175", "createdAt": "2020-02-21T07:19:05Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java", "diffHunk": "@@ -136,17 +134,28 @@ public String getWriteableName() {\n         return NAME;\n     }\n \n+    @Override\n+    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n+        if (ids.isEmpty()) {\n+            return new MatchNoneQueryBuilder();\n+        }\n+        QueryShardContext context = queryRewriteContext.convertToShardContext();\n+        if (context != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a284be94000e0e8857679295454a6f0f4d04f6db"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTgzMTQ4OnYy", "diffSide": "RIGHT", "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozNToxNVrOFtD16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozNToxNVrOFtD16w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MzE5NQ==", "bodyText": "This looks unused, I think it can just be deleted?", "url": "https://github.com/elastic/elasticsearch/pull/52486#discussion_r382793195", "createdAt": "2020-02-21T20:35:15Z", "author": {"login": "jtibshirani"}, "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorFieldMapper.java", "diffHunk": "@@ -491,7 +488,13 @@ static Query toQuery(QueryShardContext context, boolean mapUnmappedFieldsAsStrin\n         // as an analyzed string.\n         context.setAllowUnmappedFields(false);\n         context.setMapUnmappedFieldAsString(mapUnmappedFieldsAsString);\n-        return queryBuilder.toQuery(context);\n+    }\n+\n+    static Query parseQuery(QueryShardContext context, boolean mapUnmappedFieldsAsString, XContentParser parser) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f7b3c453ed6e3d234e20ce71c06fbef93b3585"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTg2ODE2OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDo0OTozMlrOFtEMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODo0MDoxNVrOFuQmtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5ODk4Nw==", "bodyText": "For my knowledge, I'm wondering why this change (and the ones to AbstractQueryTestCase) were necessary.", "url": "https://github.com/elastic/elasticsearch/pull/52486#discussion_r382798987", "createdAt": "2020-02-21T20:49:32Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java", "diffHunk": "@@ -103,7 +104,7 @@ public final Query toQuery(QueryShardContext context) throws IOException {\n             if (boost != DEFAULT_BOOST) {\n                 if (query instanceof SpanQuery) {\n                     query = new SpanBoostQuery((SpanQuery) query, boost);\n-                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f7b3c453ed6e3d234e20ce71c06fbef93b3585"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczNzcwOQ==", "bodyText": "I made this change as a way to keep tests simple. For instance here is what ConstantScoreQueryBuilderTests#doAssertLuceneQuery looks like in master today.\n    @Override\n    protected void doAssertLuceneQuery(ConstantScoreQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        Query innerQuery = queryBuilder.innerQuery().toQuery(context);\n        if (innerQuery == null) {\n            assertThat(query, nullValue());\n        } else {\n            assertThat(query, instanceOf(ConstantScoreQuery.class));\n            ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) query;\n            assertThat(constantScoreQuery.getQuery(), instanceOf(innerQuery.getClass()));\n        }\n    }\n\nThis test only worked because most queries on unmapped fields would create the same query as on a keyword field. But with this change, queries on unmapped fields get rewritten as a MatchNoneQueryBuilder. And when its inner query rewrites to a MatchNoneQueryBuilder, ConstantScoreQueryBuilder itself rewrites to a MatchNoneQueryBuilder. So I updated the logic this way:\n    @Override\n    protected void doAssertLuceneQuery(ConstantScoreQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        Query innerQuery = queryBuilder.innerQuery().rewrite(context).toQuery(context);\n        if (innerQuery == null) {\n            assertThat(query, nullValue());\n        } else if (innerQuery instanceof MatchNoDocsQuery) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else {\n            assertThat(query, instanceOf(ConstantScoreQuery.class));\n            ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) query;\n            assertThat(constantScoreQuery.getQuery(), instanceOf(innerQuery.getClass()));\n        }\n    }\n\nBut this fails if the inner query is wrapped in a BoostQuery. So I had to either change AbstractQueryBuilder to no longer wrap MatchNoDocsQuery with a boost, or change this test (and a couple other ones IIRC) to check whether the inner query might be wrapped inside a BoostQuery. I chose the former, which sounded simpler to me.", "url": "https://github.com/elastic/elasticsearch/pull/52486#discussion_r383737709", "createdAt": "2020-02-25T08:58:47Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java", "diffHunk": "@@ -103,7 +104,7 @@ public final Query toQuery(QueryShardContext context) throws IOException {\n             if (boost != DEFAULT_BOOST) {\n                 if (query instanceof SpanQuery) {\n                     query = new SpanBoostQuery((SpanQuery) query, boost);\n-                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5ODk4Nw=="}, "originalCommit": {"oid": "51f7b3c453ed6e3d234e20ce71c06fbef93b3585"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDg2OA==", "bodyText": "Thanks for the clear explanation!", "url": "https://github.com/elastic/elasticsearch/pull/52486#discussion_r384050868", "createdAt": "2020-02-25T18:40:15Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java", "diffHunk": "@@ -103,7 +104,7 @@ public final Query toQuery(QueryShardContext context) throws IOException {\n             if (boost != DEFAULT_BOOST) {\n                 if (query instanceof SpanQuery) {\n                     query = new SpanBoostQuery((SpanQuery) query, boost);\n-                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5ODk4Nw=="}, "originalCommit": {"oid": "51f7b3c453ed6e3d234e20ce71c06fbef93b3585"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3951, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}