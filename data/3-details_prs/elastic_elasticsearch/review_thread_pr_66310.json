{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5OTEyOTUw", "number": 66310, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDowMzoxOFrOFVsLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTozMzo0M1rOFVvAOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4Mjg4MjU4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDowMzoxOFrOIeSFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMDoxMzoyN1rOIlZG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNDU3Nw==", "bodyText": "I think it would be easier to read if the count were the first parameter.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568624577", "createdAt": "2021-02-02T14:03:18Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY1NzE1OQ==", "bodyText": "Maybe rename to compareAndRun? I think this name helps with the intuition from \"compare and swap\".\n\"counter\" is used too much so maybe drop it if there's a parameter with the name counter already.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568657159", "createdAt": "2021-02-02T14:44:16Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNDU3Nw=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY1OTc5Mg==", "bodyText": "Runnable -> CheckedRunnable, to avoid worrying about the checked/unchecked exceptions at this low level.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568659792", "createdAt": "2021-02-02T14:47:23Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNDU3Nw=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY2NjIzNA==", "bodyText": "Your analogy of AtomicInteger makes sense. The name compareAndRun also sounds good and to the point. The count parameter naturally should become the first parameter after the method name change to follow the convention of compareAndSet. Thanks!\nI decided to keep Runnable instead of changing it to CheckedRunnable. In fact, I started with CheckedRunnable, but I think it has a few disadvantages:\n\nIf we don't handle the exception of CheckedRunnable, the method would have a signature like:\npublic <E extends Exception> boolean compareAndRun(long count, CheckedRunnable<E> runnable) throws E\nIt forces its caller to handle exceptions even when the Runnable may not throw any exception (as in the NativePrivilegesStore case)\nIf we handle the exception inside the method and only bubble up RuntimeException, it will make the method easier to call because no exception handling is forced onto the caller. However, the method itself has no knowledge about he Runnable so it cannot perform meaningful handling other than maybe wrap it with a RuntimeException. It works, but makes it hard if the caller cares about the real exception and wants to handle it.\n\nMy understanding is that CheckedRunnable is better when possible exception types are limited and the method knows well how to handle (or ignore) them. Therefore, I prefer to just using Runnable. It works similar to above item 2, but giving caller full control of how exception should or should not be handled.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r570666234", "createdAt": "2021-02-05T01:48:46Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNDU3Nw=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjA3OTU5Mg==", "bodyText": "Okay, sounds good to me. It's not going to be a big difference in practice anyway.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r576079592", "createdAt": "2021-02-15T10:13:27Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODYyNDU3Nw=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MzExODA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNDo1MDowNFrOIeUXww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwMTo0OToxNVrOIgOtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2MTk1NQ==", "bodyText": "Executing the runnable parameter like this feels forced. I would simplify it by renaming this increment with no parameters.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568661955", "createdAt": "2021-02-02T14:50:04Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {\n+        assert count >= 0 : \"Count must be non-negative\";\n+        try (ReleasableLock ignored = countingReadLock.acquire()) {\n+            if (count == counter.get()) {\n+                logger.debug(\"Count matches [{}], executing runnable\", count);\n+                runnable.run();\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Increment the internal counter before executing the given runnable.\n+     * The counter is incremented in a write-locking block so that no other runnable\n+     * can be executed by methods of the same manager when the counter is being incremented.\n+     */\n+    public void incrementAndRun(Runnable runnable) {\n+        try (ReleasableLock ignored = countingWriteLock.acquire()) {\n+            counter.incrementAndGet();\n+        }\n+        runnable.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY2NjQyNg==", "bodyText": "Good point! Updated!", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r570666426", "createdAt": "2021-02-05T01:49:15Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {\n+\n+    private static final Logger logger = LogManager.getLogger(CountingRunner.class);\n+\n+    private final AtomicLong counter = new AtomicLong();\n+    private final ReadWriteLock countingLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock countingReadLock = new ReleasableLock(countingLock.readLock());\n+    private final ReleasableLock countingWriteLock = new ReleasableLock(countingLock.writeLock());\n+\n+    public long getCount() {\n+        return counter.get();\n+    }\n+\n+    /**\n+     * Execute the given runnable if the internal counter matches the given count.\n+     * The counter check is performed inside a read-locking block to prevent incrementing of\n+     * the counter, i.e. call to {@link CountingRunner#incrementAndRun} will be blocked.\n+     * But it does *not* block other invocations of {@link CountingRunner#runIfCountMatches}.\n+     *\n+     * @return true if the runnable is executed, other false.\n+     */\n+    public boolean runIfCountMatches(Runnable runnable, long count) {\n+        assert count >= 0 : \"Count must be non-negative\";\n+        try (ReleasableLock ignored = countingReadLock.acquire()) {\n+            if (count == counter.get()) {\n+                logger.debug(\"Count matches [{}], executing runnable\", count);\n+                runnable.run();\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Increment the internal counter before executing the given runnable.\n+     * The counter is incremented in a write-locking block so that no other runnable\n+     * can be executed by methods of the same manager when the counter is being incremented.\n+     */\n+    public void incrementAndRun(Runnable runnable) {\n+        try (ReleasableLock ignored = countingWriteLock.acquire()) {\n+            counter.incrementAndGet();\n+        }\n+        runnable.run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2MTk1NQ=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MzM0NTIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTozMzo0M1rOIeWk0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMDoxMzo1MVrOIlZH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODA2Ng==", "bodyText": "As discussed, we both agree that encapsulating a cache inside this class is the wrong abstraction (which is InvalidationCountingCacheWrapper), although I struggle to put it in words in a comment.\nI still tend to have more ambitious hopes for this cache invalidation pattern, but I very much fear we can sunk in it and not achieve much.\nOverall, I think abstraction here is good enough!\nBut its rich history is showing in the description and in the names. We should polish these.\nI would think about this class as a special type of atomic integer, which has a fancy method \"run if integer constant\", such that the run block of code cannot overlap with changes (increments) to the integer.\nIt's hard to explain it's usage in the caching context, so I would steer away from it completely.\nFor example, we rely that changes to the underlying data (eg api key docs) are performed before calling increment and that we call getCount before we retrieve the underlying data, so that we ensure the sequence modify data -> increment -> getCount -> read data -> cache data .\nMy explicit suggestion is to rename to CounterCompare, or anythign else that inspires that the runnable and the counter cannot overlap.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568698066", "createdAt": "2021-02-02T15:33:43Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODcwMDM5NA==", "bodyText": "Another suggestion, if you think this is unlikely to be used outside of caching contexts, it might be useful to make it a static inner class of Cache.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r568700394", "createdAt": "2021-02-02T15:36:43Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODA2Ng=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY3MDU0Mw==", "bodyText": "After some thoughts and taking your advice onboard, I came up with the name LockingAtomicCounter. It is an unexciting name, but I think it conveys the major idea here: a counter with RWLock to ensure its value stays the same until the reading side finishes its task.\nI think your analogy of AtomicInteger is a great one. In concept, compareAndSet and compareAndRun are very similiar. They are both executing some operation if the counter value matches the expectation. The only difference is that the operation of the former is a single setValue, but the later can have an arbitrary Runnable. This is also the reason that I went with the name of LockingAtomicCounter, which I hope makes its behaviour easier to understand.\nI updated the comments accordingly.\nAs for the location of this class, I'd prefer to have it stay inside xpack security for the time being because:\n\nThe usages that I can think of for now are security caches\nIt in theory operates at a higher level than a single cache, e.g. ApiKeyDocCache is a wrapper for two vanila caches.\nThe way it ends right now really does not say anything about caching anymore. So I have hope that it could still be useful elsewhere.", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r570670543", "createdAt": "2021-02-05T02:01:58Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODA2Ng=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjA3OTg2Mg==", "bodyText": "I came up with the name LockingAtomicCounter\n\nSGTM", "url": "https://github.com/elastic/elasticsearch/pull/66310#discussion_r576079862", "createdAt": "2021-02-15T10:13:51Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/support/CountingRunner.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * An utility class that keeps a counter when executing runnables.\n+ * It is designed to help minimizing the possibility of caching stable results in a {@link Cache}.\n+ */\n+public class CountingRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY5ODA2Ng=="}, "originalCommit": {"oid": "8696de5bf25c6137b7c41a2b913df9b4577e3e11"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4594, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}