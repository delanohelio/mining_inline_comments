{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDMwMTI1", "number": 51355, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDo0OTowOFrODaYpZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNDowMFrODbDj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkzMzgzOnYy", "diffSide": "RIGHT", "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDo0OTowOVrOFhT29w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjowNDozNlrOFhUmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MjY5NQ==", "bodyText": "This doesn't look like a real API key to me (or am I confused?)\n$ printf \"%s\" 'VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw' | base64 -D\nVuaCfGcBCdbkQm-e5aOxZL\ufffds%\n\nI think maybe we should we show the base64 process as well?\nString apiKeyId = \"uqlEyn8B_gQ_jlvwDIvM\"\nString apiKeySecret = \"HxHWk2m4RN-V_qg9cDpuX\"\nString apiKeyAuth = Base64.getEncoder().encodeToString((apiKeyId + \":\" + apiKeySecret).getBytes());", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370472695", "createdAt": "2020-01-24T04:49:09Z", "author": {"login": "tvernum"}, "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -400,5 +402,81 @@ public HttpAsyncClientBuilder customizeHttpClient(\n                 });\n             //end::rest-client-config-encrypted-communication\n         }\n+        {\n+            //tag::rest-client-config-trust-ca-pem\n+            Path caCertificatePath = Paths.get(\"/path/to/ca.crt\");\n+            CertificateFactory factory =\n+                CertificateFactory.getInstance(\"X.509\");\n+            Certificate trustedCa;\n+            try (InputStream is = Files.newInputStream(caCertificatePath)) {\n+                trustedCa = factory.generateCertificate(is);\n+            }\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            trustStore.load(null, null);\n+            trustStore.setCertificateEntry(\"ca\", trustedCa);\n+            SSLContextBuilder sslContextBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null);\n+            final SSLContext sslContext = sslContextBuilder.build();\n+            RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-trust-ca-pem\n+        }\n+        {\n+            String trustStorePass = \"\";\n+            String keyStorePass = \"\";\n+            //tag::rest-client-config-mutual-tls-authentication\n+            Path trustStorePath = Paths.get(\"/path/to/your/truststore.p12\");\n+            Path keyStorePath = Paths.get(\"/path/to/your/keystore.p12\");\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            KeyStore keyStore = KeyStore.getInstance(\"pkcs12\");\n+            try (InputStream is = Files.newInputStream(trustStorePath)) {\n+                trustStore.load(is, trustStorePass.toCharArray());\n+            }\n+            try (InputStream is = Files.newInputStream(keyStorePath)) {\n+                keyStore.load(is, keyStorePass.toCharArray());\n+            }\n+            SSLContextBuilder sslBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null)\n+                .loadKeyMaterial(keyStore, keyStorePass.toCharArray());\n+            final SSLContext sslContext = sslBuilder.build();\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-mutual-tls-authentication\n+        }\n+        {\n+            //tag::rest-client-auth-bearer-token\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"Bearer u6iuAxZ0RG1Kcm5jVFI4eU4tZU9aVFEwT2F3\")};\n+            builder.setDefaultHeaders(defaultHeaders);\n+            //end::rest-client-auth-bearer-token\n+        }\n+        {\n+            //tag::rest-client-auth-api-key\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"ApiKey VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw==\")};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4NDg3NA==", "bodyText": "This doesn't look like a real API key to me (or am I confused?)\n\nIt's not. An API Key doesn't fit in the 72 line limit and since there was no way to add an API key that would work in a request to an arbitrary cluster either way ... I cheated.\nYou're right, since the create API key only returns the ID and secret now, it makes sense to show how to base64 encode it too, which also thankfully solves the above issue too.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370484874", "createdAt": "2020-01-24T06:04:36Z", "author": {"login": "jkakavas"}, "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -400,5 +402,81 @@ public HttpAsyncClientBuilder customizeHttpClient(\n                 });\n             //end::rest-client-config-encrypted-communication\n         }\n+        {\n+            //tag::rest-client-config-trust-ca-pem\n+            Path caCertificatePath = Paths.get(\"/path/to/ca.crt\");\n+            CertificateFactory factory =\n+                CertificateFactory.getInstance(\"X.509\");\n+            Certificate trustedCa;\n+            try (InputStream is = Files.newInputStream(caCertificatePath)) {\n+                trustedCa = factory.generateCertificate(is);\n+            }\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            trustStore.load(null, null);\n+            trustStore.setCertificateEntry(\"ca\", trustedCa);\n+            SSLContextBuilder sslContextBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null);\n+            final SSLContext sslContext = sslContextBuilder.build();\n+            RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-trust-ca-pem\n+        }\n+        {\n+            String trustStorePass = \"\";\n+            String keyStorePass = \"\";\n+            //tag::rest-client-config-mutual-tls-authentication\n+            Path trustStorePath = Paths.get(\"/path/to/your/truststore.p12\");\n+            Path keyStorePath = Paths.get(\"/path/to/your/keystore.p12\");\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            KeyStore keyStore = KeyStore.getInstance(\"pkcs12\");\n+            try (InputStream is = Files.newInputStream(trustStorePath)) {\n+                trustStore.load(is, trustStorePass.toCharArray());\n+            }\n+            try (InputStream is = Files.newInputStream(keyStorePath)) {\n+                keyStore.load(is, keyStorePass.toCharArray());\n+            }\n+            SSLContextBuilder sslBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null)\n+                .loadKeyMaterial(keyStore, keyStorePass.toCharArray());\n+            final SSLContext sslContext = sslBuilder.build();\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-mutual-tls-authentication\n+        }\n+        {\n+            //tag::rest-client-auth-bearer-token\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"Bearer u6iuAxZ0RG1Kcm5jVFI4eU4tZU9aVFEwT2F3\")};\n+            builder.setDefaultHeaders(defaultHeaders);\n+            //end::rest-client-auth-bearer-token\n+        }\n+        {\n+            //tag::rest-client-auth-api-key\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"ApiKey VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw==\")};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MjY5NQ=="}, "originalCommit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTk2NDI3OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNToyMDoxN1rOFhUJRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNToyMDoxN1rOFhUJRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NzM4MQ==", "bodyText": "Can we split this on two lines to that it is easier to read in the docs?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            openssl pkcs12 -export -in client.crt -inkey private_key.pem -name \"client\" -out client.p12\n          \n          \n            \n            openssl pkcs12 -export -in client.crt -inkey private_key.pem \\\n          \n          \n            \n                -name \"client\" -out client.p12", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370477381", "createdAt": "2020-01-24T05:20:17Z", "author": {"login": "tvernum"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,74 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n+a client certificate during the TLS handshake in order to authenticate. The following is an example of setting up the client for TLS\n+authentication with a certificate and a private key that are stored in a PKCS#12 keystore.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-mutual-tls-authentication]\n+--------------------------------------------------\n+\n+if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them\n+directly to build an SSLContext, without relying on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you\n+can use external tools to build a keystore from your PEM files, as shown in the following example:\n+\n+```\n+openssl pkcs12 -export -in client.crt -inkey private_key.pem -name \"client\" -out client.p12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDA1MjM1OnYy", "diffSide": "RIGHT", "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjozNjo1NFrOFhU9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjozNjo1NFrOFhU9SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MDY5Ng==", "bodyText": ":) Sorry, my fault :)", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370490696", "createdAt": "2020-01-24T06:36:54Z", "author": {"login": "tvernum"}, "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -474,7 +475,8 @@ public HttpAsyncClientBuilder customizeHttpClient(\n             String apiKeySecret = \"HxHWk2m4RN-V_qg9cDpuX\";\n             String apiKeyAuth =\n                 Base64.getEncoder().encodeToString(\n-                    (apiKeyId + \":\" + apiKeySecret).getBytes());\n+                    (apiKeyId + \":\" + apiKeySecret)\n+                        .getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e57234cdc9c04f5a179848699573ac9a8ff86c3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYyNzg0OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo0OTo1NVrOFhj1xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo0OTo1NVrOFhj1xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNDUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n          \n          \n            \n            If you want the client to authenticate with an Elasticsearch access token, set the relevant HTTP request header.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370734535", "createdAt": "2020-01-24T16:49:55Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYzMDc3OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MDo1MVrOFhj3pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MDo1MVrOFhj3pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n          \n          \n            \n            If you want the client to authenticate with an Elasticsearch API key, set the relevant HTTP request header.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735013", "createdAt": "2020-01-24T16:50:51Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYzMjUxOnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MToyM1rOFhj4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MToyM1rOFhj4pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n          \n          \n            \n            When accessing an Elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735269", "createdAt": "2020-01-24T16:51:23Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYzMzM4OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MTozOVrOFhj5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MTozOVrOFhj5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTQwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            elasticsearch is using.\n          \n          \n            \n            Elasticsearch is using.", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735408", "createdAt": "2020-01-24T16:51:39Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYzNDQyOnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjowMFrOFhj51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjowMFrOFhj51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTU3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n          \n          \n            \n             The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735573", "createdAt": "2020-01-24T16:52:00Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYzNTI3OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjoxOFrOFhj6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1MjoxOFrOFhj6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n          \n          \n            \n            The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370735729", "createdAt": "2020-01-24T16:52:18Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTYzNjkyOnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1Mjo1MVrOFhj7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1Mjo1MVrOFhj7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n          \n          \n            \n            When Elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370736008", "createdAt": "2020-01-24T16:52:51Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY0MjQ4OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NDozM1rOFhj--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0ODozMlrOFhlb8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjg4OA==", "bodyText": "When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured ...\n\nThe use of \"i.e.\" here implies that this is the only situation where ES requires TLS authentication, which seems unlikely to me.  Should it be \"e.g.\" or \"for example\" instead?", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370736888", "createdAt": "2020-01-24T16:54:33Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczOTU1Ng==", "bodyText": "A PKI realm is actually the most common case to require TLS Client authentication on the HTTP layer. Otherwise the client authenticates with some other means ( credentials, tokens, api keys ) and not with a client certificate. I", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370739556", "createdAt": "2020-01-24T17:00:07Z", "author": {"login": "jkakavas"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjg4OA=="}, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MDU3NA==", "bodyText": "Unless it's the only case, I'd still recommend \"e.g.\" instead of \"i.e.\".", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370740574", "createdAt": "2020-01-24T17:02:17Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjg4OA=="}, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NDY3Nw==", "bodyText": "It is the only documented case , but a user might elect to enable it and just disregard the authentication information ( by not specifying a PKI realm ) I guess, so I'll apply the suggestion.\nBy the way, thanks for that , I did not know that distinction and was using e.g and i.e. interchangeably for years \u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370744677", "createdAt": "2020-01-24T17:11:28Z", "author": {"login": "jkakavas"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjg4OA=="}, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2MDY5MQ==", "bodyText": "Words are fun i.e. crazy-making :)", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370760691", "createdAt": "2020-01-24T17:48:32Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNjg4OA=="}, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY0NjY5OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NTo1NlrOFhkBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NTo1NlrOFhkBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNzU0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in the following example\n          \n          \n            \n            in the following example:", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370737548", "createdAt": "2020-01-24T16:55:56Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY0ODQ2OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NjozNVrOFhkCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NjozNVrOFhkCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNzg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in the following example\n          \n          \n            \n            in the following example:", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370737844", "createdAt": "2020-01-24T16:56:35Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY1NTE0OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0NFrOFhkG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0NFrOFhkG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczODkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them\n          \n          \n            \n            If the client certificate and key are not available in a keystore but rather as PEM encoded files, you cannot use them", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370738925", "createdAt": "2020-01-24T16:58:44Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n+a client certificate during the TLS handshake in order to authenticate. The following is an example of setting up the client for TLS\n+authentication with a certificate and a private key that are stored in a PKCS#12 keystore.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-mutual-tls-authentication]\n+--------------------------------------------------\n+\n+if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY1OTQ0OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMDoyMFrOFhkJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMDoyMFrOFhkJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczOTY1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            directly to build an SSLContext, without relying on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you\n          \n          \n            \n            directly to build an SSLContext. You must rely on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370739654", "createdAt": "2020-01-24T17:00:20Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n+a client certificate during the TLS handshake in order to authenticate. The following is an example of setting up the client for TLS\n+authentication with a certificate and a private key that are stored in a PKCS#12 keystore.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-mutual-tls-authentication]\n+--------------------------------------------------\n+\n+if the client certificate and key are not available in a keystore but as PEM encoded files, there is no possibility to use them\n+directly to build an SSLContext, without relying on external libraries to parse the PEM key into a PrivateKey instance. Alternatively, you", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk0MzQyOnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NToyOVrOFhm6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0NToyOVrOFhm6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDc4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n          \n          \n            \n            When elasticsearch is configured to require client TLS authentication, e.g. when a PKI realm is configured, the client needs to provide", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370784786", "createdAt": "2020-01-24T18:45:29Z", "author": {"login": "jkakavas"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+Configuring the client to authenticate with an elasticsearch access token can be accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+Configuring the client to authenticate with an elasticsearch API Key can be also accomplished by setting the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njk2NDc1OnYy", "diffSide": "RIGHT", "path": "docs/java-rest/low-level/configuration.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNDowMFrOFiUtrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNDowMFrOFiUtrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When Elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide\n          \n          \n            \n            When Elasticsearch is configured to require client TLS authentication, for example when a PKI realm is configured, the client needs to provide", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r371535279", "createdAt": "2020-01-27T23:14:00Z", "author": {"login": "lcawl"}, "path": "docs/java-rest/low-level/configuration.asciidoc", "diffHunk": "@@ -64,21 +64,75 @@ include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-disa\n --------------------------------------------------\n <1> Disable preemptive authentication\n \n+=== Other authentication methods\n+\n+==== Elasticsearch Token Service tokens\n+\n+If you want the client to authenticate with an Elasticsearch access token, set the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example:\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-bearer-token]\n+--------------------------------------------------\n+\n+==== Elasticsearch API keys\n+\n+If you want the client to authenticate with an Elasticsearch API key, set the relevant HTTP request header.\n+If the client makes requests on behalf of a single user only, you can set the necessary `Authorization` header as a default header as shown\n+in the following example:\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-auth-api-key]\n+--------------------------------------------------\n+\n === Encrypted communication\n \n-Encrypted communication can also be configured through the\n+Encrypted communication using TLS can also be configured through the\n `HttpClientConfigCallback`. The\n https://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/impl/nio/client/HttpAsyncClientBuilder.html[`org.apache.http.impl.nio.client.HttpAsyncClientBuilder`]\n  received as an argument exposes multiple methods to configure encrypted\n  communication: `setSSLContext`, `setSSLSessionStrategy` and\n  `setConnectionManager`, in order of precedence from the least important.\n- The following is an example:\n+\n+When accessing an Elasticsearch cluster that is setup for TLS on the HTTP layer, the client needs to trust the certificate that\n+Elasticsearch is using.\n+ The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when\n+ that CA certificate is available in a PKCS#12 keystore:\n \n [\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n --------------------------------------------------\n include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-encrypted-communication]\n --------------------------------------------------\n \n+The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when\n+that CA certificate is available as a PEM encoded file.\n+\n+[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n+--------------------------------------------------\n+include-tagged::{doc-tests}/RestClientDocumentation.java[rest-client-config-trust-ca-pem]\n+--------------------------------------------------\n+\n+When Elasticsearch is configured to require client TLS authentication, i.e. when a PKI realm is configured, the client needs to provide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f19a284cb4bd6594e657e47164696d5ca78adec"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4461, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}