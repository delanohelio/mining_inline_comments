{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODI4NDE0", "number": 65905, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo0MjozOFrOFBApSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo1MDo0MFrOFCG8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjAzNDY0OnYy", "diffSide": "RIGHT", "path": "distribution/src/config/jvm.options", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo0MjozOFrOH_k6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoyOTowOFrOIFxTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ==", "bodyText": "Still need to think about how to change this. Should we remove this section entirely? Continue to include it also recommend folks stick with auto-determined heap size?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r536427049", "createdAt": "2020-12-04T22:42:38Z", "author": {"login": "mark-vieira"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDEyMw==", "bodyText": "We may want to leave it in with a note, since until now our users have always had to configure it, and our training courses will expect it to exist. Maybe we can remove it in master but retain it with a comment in 7.x?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537440123", "createdAt": "2020-12-07T11:41:04Z", "author": {"login": "pugnascotia"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwOTg0MQ==", "bodyText": "It's tricky. Either way (removing, or commenting out), we are going to potentially break automation here. For example, if there's automation in place that downloads our tar archive, explodes it, and uses sed to replace the heap size.\nThat leads me to wonder out loud if we should not break users here. I'd propose the following: in 7.x, we leave this as-is in the jvm.options file. Perhaps we provide a warning when the heap size is set manually by a user, pointing them to documentation for machine-dependent heap sizes. In Cloud, we still want to activate the machine-dependent heap sizes, so we'd need deployments there to remove the -Xms/-Xmx flags from their jvm.options file.\nIn 8.0, we remove this from the default jvm.options file.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538009841", "createdAt": "2020-12-08T03:39:36Z", "author": {"login": "jasontedor"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwNTY0NQ==", "bodyText": "I understand the concern, though I'm not sure about a warning. I don't think we intend to disallow setting the heap manually right? Yet a warning for setting the heap would seem like just that. Such a sed replacement in practice would seem fragile. It could break on any change to the default.\nI'm conflicted. I don't see a way to warn some users without annoying others. But I do think this is something we can followup on, so in this PR I will restore the original value.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538905645", "createdAt": "2020-12-09T00:12:28Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwMzY4MQ==", "bodyText": "My suggestion was:\n\nPerhaps we provide a warning when the heap size is set manually by a user, pointing them to documentation for machine-dependent heap sizes.\n\nNot a warning that we will disallow setting the heap size manually, but a permanent warning that the heap size is being set manually and we recommend not for the optimal experience.\n\nBut I do think this is something we can followup on, so in this PR I will restore the original value.\n\nAre you saying then that the default experience will be to not get machine-dependent heap sizing? That seems contrary to our goals here.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539303681", "createdAt": "2020-12-09T13:26:14Z", "author": {"login": "jasontedor"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2NDcxMg==", "bodyText": "If we leave the jvm.options as is, the default will remain not getting machine-dependent heap sizing. If we emit a warning, any user who chooses to not want to use machine-dependent heap sizing will get an annoying warning they cannot use. Do we agree on those statements?\nMy suggestion was to leave the jvm.options as is (so as not to break the theoretical users that could be using sed to replace the heap size), and then follow up with whatever we decide to do regarding helping users convert within 7.x. This suggestion is because cloud will not rely on the default.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539764712", "createdAt": "2020-12-10T01:03:34Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwMjkyMg==", "bodyText": "If we leave the jvm.options as is, the default will remain not getting machine-dependent heap sizing. If we emit a warning, any user who chooses to not want to use machine-dependent heap sizing will get an annoying warning they cannot use. Do we agree on those statements?\n\nWhy can't they use it? The point of the warning is to tell them to stop setting the heap size manually, let Elasticsearch do it for them. The warning is useful to them.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539802922", "createdAt": "2020-12-10T02:46:03Z", "author": {"login": "jasontedor"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzM0MA==", "bodyText": "Sorry, not sure how \"cannot use\" got in my response, it was meant to be \"cannot remove\". That is it is a persistent warning that the only way to remove is to go with ES's memory choices. The warning is useful in that they find out they could be using our automatic heap sizing, but are we saying users will never tune heap anymore? I personally get annoyed if there are warnings I cannot remove with normal usage.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539983340", "createdAt": "2020-12-10T08:51:02Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODQwMg==", "bodyText": "Jason and I spoke and came to an agreement on the above discussion. @jasontedor Let me know if I missed or misunderstood anything.\nWe should add a warning when heap size is manually specified, since our goal is to have users use the auto heap. There are however some issues that prevent us from doing that in this PR. First is a technical issue: how do we pass back the message when the only output of the jvm options parser is the final jvm options?. The second issue is allowing cloud time to adapt to using auto sizing so that we do not spew errors across all cloud deployments. I created #66308 to ensure we followup with adding this warning.\nRegarding whether to leave the heap options or remove them in a minor, we think the auto heap sizing is important enough that we don't want to have any more new users specifying heap. So, we should remove the Xmx/Xms from jvm.options. Users should no longer be relying on modifying jvm.options, but instead specifying these in jvm.options.d files.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r542918402", "createdAt": "2020-12-14T23:21:26Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyMTY3NQ==", "bodyText": "@mark-vieira @jasontedor I've removed Xmx/Xms in 88a81a1, but left in a comment explaining where the heap size should be set if it needs to be.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r542921675", "createdAt": "2020-12-14T23:29:08Z", "author": {"login": "rjernst"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ=="}, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjgwMTQzOnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/DockerRun.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNTo1ODo0MlrOH_qvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowNjoxOVrOIDGCSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyMjUzOA==", "bodyText": "The intention here was to then specifically add a docker packaging test which leverages this to set the container memory limit and assert that the auto configured heap is as we'd expect.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r536522538", "createdAt": "2020-12-05T05:58:42Z", "author": {"login": "mark-vieira"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/DockerRun.java", "diffHunk": "@@ -75,6 +76,13 @@ public DockerRun uid(Integer uid, Integer gid) {\n         return this;\n     }\n \n+    public DockerRun memory(String memoryLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe45b7e4a09d17ea5038a46b05189b58bc2ff97"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2NDA2NQ==", "bodyText": "Are we going to add such a test?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537464065", "createdAt": "2020-12-07T12:21:29Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/DockerRun.java", "diffHunk": "@@ -75,6 +76,13 @@ public DockerRun uid(Integer uid, Integer gid) {\n         return this;\n     }\n \n+    public DockerRun memory(String memoryLimit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyMjUzOA=="}, "originalCommit": {"oid": "afe45b7e4a09d17ea5038a46b05189b58bc2ff97"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNTUyOA==", "bodyText": "To close the loop here - @rjernst wrote a basic, and I've fleshed it out and debugged it locally. All good now, I think.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r540115528", "createdAt": "2020-12-10T12:06:19Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/DockerRun.java", "diffHunk": "@@ -75,6 +76,13 @@ public DockerRun uid(Integer uid, Integer gid) {\n         return this;\n     }\n \n+    public DockerRun memory(String memoryLimit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyMjUzOA=="}, "originalCommit": {"oid": "afe45b7e4a09d17ea5038a46b05189b58bc2ff97"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzcyMjEyOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/MachineDependentHeapTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo1ODowNlrOIAjX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowOTo0N1rOIC8Z3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MDQ1Mw==", "bodyText": "Javadoc comments on the test cases help to ensure that the implementation of test matches its intent.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537450453", "createdAt": "2020-12-07T11:58:06Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/MachineDependentHeapTests.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.junit.Assert.assertThat;\n+\n+public class MachineDependentHeapTests extends LaunchersTestCase {\n+\n+    public void testDetermineHeapSize() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1NzcyNA==", "bodyText": "While I agree this can be helpful on complex tests, I think it is overkill on simple tests, such as these, that the name of the class and method generally make obvious what is being tested. In this particular case, I've renamed the method to testDefaultHeapSize() since it is testing the default when no configuration exists.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539957724", "createdAt": "2020-12-10T08:09:47Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/MachineDependentHeapTests.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.junit.Assert.assertThat;\n+\n+public class MachineDependentHeapTests extends LaunchersTestCase {\n+\n+    public void testDetermineHeapSize() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MDQ1Mw=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzc0NDgzOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowMzozOVrOIAjlRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowNDowNVrOIC8NSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1Mzg5NQ==", "bodyText": "My preference is to use assertThat pretty much everywhere these days. Not saying you should change it, but I find the messages it generates to be more readable.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537453895", "createdAt": "2020-12-07T12:03:39Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.DATA;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.MASTER_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.ML_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.UNKNOWN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.fail;\n+\n+public class NodeRoleParserTests extends LaunchersTestCase {\n+\n+    public void testMasterOnlyNode() {\n+        MachineDependentHeap.MachineNodeRole nodeRole = parseConfig(sb -> sb.append(\"node.roles: [master]\"));\n+        assertEquals(nodeRole, MASTER_ONLY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1NDUwNw==", "bodyText": "Changed to assertThat.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539954507", "createdAt": "2020-12-10T08:04:05Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.DATA;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.MASTER_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.ML_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.UNKNOWN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.fail;\n+\n+public class NodeRoleParserTests extends LaunchersTestCase {\n+\n+    public void testMasterOnlyNode() {\n+        MachineDependentHeap.MachineNodeRole nodeRole = parseConfig(sb -> sb.append(\"node.roles: [master]\"));\n+        assertEquals(nodeRole, MASTER_ONLY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1Mzg5NQ=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzc1MTYwOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowNToxOFrOIAjpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1OTowOVrOIC8CsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NDkxNw==", "bodyText": "Can we have tests for garbage input and invalid YAML too? I was going to suggest a JSON config, but the parser ought to parse that quite happily \ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537454917", "createdAt": "2020-12-07T12:05:18Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.DATA;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.MASTER_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.ML_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.UNKNOWN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.fail;\n+\n+public class NodeRoleParserTests extends LaunchersTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1MTc5Mw==", "bodyText": "Added a test for invalid yaml (which is the same as garbage)", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539951793", "createdAt": "2020-12-10T07:59:09Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.DATA;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.MASTER_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.ML_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.UNKNOWN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.fail;\n+\n+public class NodeRoleParserTests extends LaunchersTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NDkxNw=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzc2MjUyOnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowODowMlrOIAjvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo0ODowN1rOIC7rSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NjU1Mw==", "bodyText": "This changes makes me uncomfortable. Is it not possible that we might happen to calculate the heap to be this size, causing the test to fail?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537456553", "createdAt": "2020-12-07T12:08:02Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java", "diffHunk": "@@ -311,7 +311,7 @@ public void test73CustomJvmOptionsDirectoryFilesWithoutOptionsExtensionIgnored()\n             startElasticsearch();\n \n             final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n-            assertThat(nodesResponse, containsString(\"\\\"heap_init_in_bytes\\\":1073741824\"));\n+            assertThat(nodesResponse, not(containsString(\"\\\"heap_init_in_bytes\\\":536870912\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk0NTgwMg==", "bodyText": "I've rewritten the test to pass a bogus option, so that java should fail to start if the option is used.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539945802", "createdAt": "2020-12-10T07:48:07Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java", "diffHunk": "@@ -311,7 +311,7 @@ public void test73CustomJvmOptionsDirectoryFilesWithoutOptionsExtensionIgnored()\n             startElasticsearch();\n \n             final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n-            assertThat(nodesResponse, containsString(\"\\\"heap_init_in_bytes\\\":1073741824\"));\n+            assertThat(nodesResponse, not(containsString(\"\\\"heap_init_in_bytes\\\":536870912\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NjU1Mw=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzU0NDg4OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0NzoyMVrOIBFrAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzozMTo0OFrOIC7Lfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjQxOQ==", "bodyText": "I don't think check is sufficient. A user can also set -XX:MaxHeapSize and -XX:MinHeapSize for which -Xmx and -Xms are synonyms.\nNote that in JvmErgonomics#choose we start up a second JVM and extract whether or not a setting was passed in on the command line. We might want to reuse that here and then check if MinHeapSize or MaxHeapSize are passed on the command line. This might be more reliable?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538012419", "createdAt": "2020-12-08T03:47:21Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkzNzY2Mg==", "bodyText": "I've moved the method to find the final options so it is reused here.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539937662", "createdAt": "2020-12-10T07:31:48Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjQxOQ=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzU0ODQwOnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0ODo1MlrOIBFs1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzozMzoyMFrOIC7OZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjg4NA==", "bodyText": "I wonder if this should contain the full path? Or if we should return UNKNOWN and let startup fail us here too?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538012884", "createdAt": "2020-12-08T03:48:52Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkzODQwNA==", "bodyText": "I like returning UNKOWN and letting Elasticsearch handle the misconfiguration.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539938404", "createdAt": "2020-12-10T07:33:20Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjg4NA=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzU1MDQ4OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0OTo0NVrOIBFt6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0OTo0NVrOIBFt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzE2Mw==", "bodyText": "Return UNKNOWN and let Elasticsearch handle it?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538013163", "createdAt": "2020-12-08T03:49:45Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzU1MjM5OnYy", "diffSide": "RIGHT", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo1MDo0MFrOIBFu7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo0OToxM1rOIFx1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg==", "bodyText": "Why is voting only included here? And what about transform nodes? Can we check with the ML team how those should be handled?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538013422", "createdAt": "2020-12-08T03:50:40Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk0MTg0OA==", "bodyText": "Not sure what was intended here, but I've removed the voting_only from both master and ML cases.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539941848", "createdAt": "2020-12-10T07:40:21Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk0NzM3OQ==", "bodyText": "After looking through the unit tests, it appears this was intended to support an ML node being a voting only node. However, I think there was confusion in what voting_only does, since it actually requires the master role as well. So I think removing them was correct.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r539947379", "createdAt": "2020-12-10T07:51:11Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyODkyNg==", "bodyText": "The intention here is that any node can have the voting_only role as well, and I believe cloud will do this to ensure there is an available tiebreaker node. Essentially, for the purposes of assigning memory based on the amount of work the node will do, the voting_only role is irrelevant, and if an ML node has the role, it should still be considered ML_ONLY. The scenario with master is much less likely however so we can probably remove it.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r542528926", "createdAt": "2020-12-14T16:37:16Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyOTg2MQ==", "bodyText": "voting_only must be used in combination with master. So it's not possible to have ml+voting_only and nothing else, it would be ml+master+voting_only. For a master+voting_only, you would never have this, since there would be no point to not make the node a normal master eligible node. The point of voting only is to make the node a master voter in combination with other node roles yet do a little extra work to tiebreak, but as far as configuration, the voting_only has to always be specified with master. (at least this is my understanding)", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r542929861", "createdAt": "2020-12-14T23:47:42Z", "author": {"login": "rjernst"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMDQyNw==", "bodyText": "Ah, understood.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r542930427", "createdAt": "2020-12-14T23:49:13Z", "author": {"login": "mark-vieira"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg=="}, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1756, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}