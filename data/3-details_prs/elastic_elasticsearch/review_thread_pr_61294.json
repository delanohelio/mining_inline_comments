{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjY3MTQx", "number": 61294, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MTozN1rOEaFqdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MTozN1rOEaFqdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzkxMjIwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo1MTozN1rOHDS4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDoyMzo1OVrOHEEDSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNzAyNg==", "bodyText": "Brief explanation of all the seemingly trivial overrides here, because they take expressions.\nTwo sentences or so.", "url": "https://github.com/elastic/elasticsearch/pull/61294#discussion_r473217026", "createdAt": "2020-08-19T17:51:37Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -0,0 +1,824 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.AnalyzerCaster;\n+import org.elasticsearch.painless.Operation;\n+import org.elasticsearch.painless.ir.BinaryMathNode;\n+import org.elasticsearch.painless.ir.BinaryNode;\n+import org.elasticsearch.painless.ir.BooleanNode;\n+import org.elasticsearch.painless.ir.CastNode;\n+import org.elasticsearch.painless.ir.ComparisonNode;\n+import org.elasticsearch.painless.ir.ConditionalNode;\n+import org.elasticsearch.painless.ir.ConstantNode;\n+import org.elasticsearch.painless.ir.DeclarationNode;\n+import org.elasticsearch.painless.ir.DoWhileLoopNode;\n+import org.elasticsearch.painless.ir.DupNode;\n+import org.elasticsearch.painless.ir.ElvisNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.FlipArrayIndexNode;\n+import org.elasticsearch.painless.ir.FlipCollectionIndexNode;\n+import org.elasticsearch.painless.ir.FlipDefIndexNode;\n+import org.elasticsearch.painless.ir.ForEachSubArrayNode;\n+import org.elasticsearch.painless.ir.ForEachSubIterableNode;\n+import org.elasticsearch.painless.ir.ForLoopNode;\n+import org.elasticsearch.painless.ir.IfElseNode;\n+import org.elasticsearch.painless.ir.IfNode;\n+import org.elasticsearch.painless.ir.InstanceofNode;\n+import org.elasticsearch.painless.ir.InvokeCallDefNode;\n+import org.elasticsearch.painless.ir.InvokeCallMemberNode;\n+import org.elasticsearch.painless.ir.InvokeCallNode;\n+import org.elasticsearch.painless.ir.ListInitializationNode;\n+import org.elasticsearch.painless.ir.MapInitializationNode;\n+import org.elasticsearch.painless.ir.NewArrayNode;\n+import org.elasticsearch.painless.ir.NewObjectNode;\n+import org.elasticsearch.painless.ir.NullNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.ir.ReturnNode;\n+import org.elasticsearch.painless.ir.StatementExpressionNode;\n+import org.elasticsearch.painless.ir.StoreBraceDefNode;\n+import org.elasticsearch.painless.ir.StoreBraceNode;\n+import org.elasticsearch.painless.ir.StoreDotDefNode;\n+import org.elasticsearch.painless.ir.StoreDotNode;\n+import org.elasticsearch.painless.ir.StoreDotShortcutNode;\n+import org.elasticsearch.painless.ir.StoreFieldMemberNode;\n+import org.elasticsearch.painless.ir.StoreListShortcutNode;\n+import org.elasticsearch.painless.ir.StoreMapShortcutNode;\n+import org.elasticsearch.painless.ir.StoreVariableNode;\n+import org.elasticsearch.painless.ir.StringConcatenationNode;\n+import org.elasticsearch.painless.ir.ThrowNode;\n+import org.elasticsearch.painless.ir.UnaryMathNode;\n+import org.elasticsearch.painless.ir.WhileLoopNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.painless.Operation.NE;\n+\n+public class DefaultConstantFoldingOptimizationPhase extends IRTreeBaseVisitor<Consumer<ExpressionNode>> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7771740fe01be20450bd6a5475ddd070225b37d2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyMjczMA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/61294#discussion_r474022730", "createdAt": "2020-08-20T14:23:59Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -0,0 +1,824 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.phase;\n+\n+import org.elasticsearch.painless.AnalyzerCaster;\n+import org.elasticsearch.painless.Operation;\n+import org.elasticsearch.painless.ir.BinaryMathNode;\n+import org.elasticsearch.painless.ir.BinaryNode;\n+import org.elasticsearch.painless.ir.BooleanNode;\n+import org.elasticsearch.painless.ir.CastNode;\n+import org.elasticsearch.painless.ir.ComparisonNode;\n+import org.elasticsearch.painless.ir.ConditionalNode;\n+import org.elasticsearch.painless.ir.ConstantNode;\n+import org.elasticsearch.painless.ir.DeclarationNode;\n+import org.elasticsearch.painless.ir.DoWhileLoopNode;\n+import org.elasticsearch.painless.ir.DupNode;\n+import org.elasticsearch.painless.ir.ElvisNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n+import org.elasticsearch.painless.ir.FlipArrayIndexNode;\n+import org.elasticsearch.painless.ir.FlipCollectionIndexNode;\n+import org.elasticsearch.painless.ir.FlipDefIndexNode;\n+import org.elasticsearch.painless.ir.ForEachSubArrayNode;\n+import org.elasticsearch.painless.ir.ForEachSubIterableNode;\n+import org.elasticsearch.painless.ir.ForLoopNode;\n+import org.elasticsearch.painless.ir.IfElseNode;\n+import org.elasticsearch.painless.ir.IfNode;\n+import org.elasticsearch.painless.ir.InstanceofNode;\n+import org.elasticsearch.painless.ir.InvokeCallDefNode;\n+import org.elasticsearch.painless.ir.InvokeCallMemberNode;\n+import org.elasticsearch.painless.ir.InvokeCallNode;\n+import org.elasticsearch.painless.ir.ListInitializationNode;\n+import org.elasticsearch.painless.ir.MapInitializationNode;\n+import org.elasticsearch.painless.ir.NewArrayNode;\n+import org.elasticsearch.painless.ir.NewObjectNode;\n+import org.elasticsearch.painless.ir.NullNode;\n+import org.elasticsearch.painless.ir.NullSafeSubNode;\n+import org.elasticsearch.painless.ir.ReturnNode;\n+import org.elasticsearch.painless.ir.StatementExpressionNode;\n+import org.elasticsearch.painless.ir.StoreBraceDefNode;\n+import org.elasticsearch.painless.ir.StoreBraceNode;\n+import org.elasticsearch.painless.ir.StoreDotDefNode;\n+import org.elasticsearch.painless.ir.StoreDotNode;\n+import org.elasticsearch.painless.ir.StoreDotShortcutNode;\n+import org.elasticsearch.painless.ir.StoreFieldMemberNode;\n+import org.elasticsearch.painless.ir.StoreListShortcutNode;\n+import org.elasticsearch.painless.ir.StoreMapShortcutNode;\n+import org.elasticsearch.painless.ir.StoreVariableNode;\n+import org.elasticsearch.painless.ir.StringConcatenationNode;\n+import org.elasticsearch.painless.ir.ThrowNode;\n+import org.elasticsearch.painless.ir.UnaryMathNode;\n+import org.elasticsearch.painless.ir.WhileLoopNode;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.painless.Operation.NE;\n+\n+public class DefaultConstantFoldingOptimizationPhase extends IRTreeBaseVisitor<Consumer<ExpressionNode>> {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNzAyNg=="}, "originalCommit": {"oid": "7771740fe01be20450bd6a5475ddd070225b37d2"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 839, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}