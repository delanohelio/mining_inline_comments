{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTM3MDk5", "number": 51832, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMTowNlrODc6Agg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMTowNlrODc6Agg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM3MTIyOnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMTowNlrOFlM-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyNzoxMFrOFlNKfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NDExNg==", "bodyText": "Should be the following instead? The other uses of stringMatchers in this method aren't wrapped in Arrays.asList.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(logfile, anyOf(Arrays.asList(stringMatchers)));\n          \n          \n            \n                        assertThat(logfile, anyOf(stringMatchers));", "url": "https://github.com/elastic/elasticsearch/pull/51832#discussion_r374554116", "createdAt": "2020-02-04T09:21:06Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -310,23 +316,28 @@ public void startElasticsearch() throws Exception {\n         return Archives.startElasticsearchWithTty(installation, sh, password);\n     }\n \n-\n     public void assertElasticsearchFailure(Shell.Result result, String expectedMessage, Packages.JournaldWrapper journaldWrapper) {\n+        assertElasticsearchFailure(result, Collections.singletonList(expectedMessage), journaldWrapper);\n+    }\n \n+    public void assertElasticsearchFailure(Shell.Result result, List<String> expectedMessages, Packages.JournaldWrapper journaldWrapper) {\n+        @SuppressWarnings(\"unchecked\")\n+        Matcher<String>[] stringMatchers = expectedMessages.stream().map(CoreMatchers::containsString).toArray(Matcher[]::new);\n         if (Files.exists(installation.logs.resolve(\"elasticsearch.log\"))) {\n \n             // If log file exists, then we have bootstrapped our logging and the\n             // error should be in the logs\n             assertTrue(\"log file exists\", Files.exists(installation.logs.resolve(\"elasticsearch.log\")));\n             String logfile = FileUtils.slurp(installation.logs.resolve(\"elasticsearch.log\"));\n-            assertThat(logfile, containsString(expectedMessage));\n+\n+            assertThat(logfile, anyOf(Arrays.asList(stringMatchers)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32766a59a437d1710163e247d63c3d1a833fd742"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NzMxMA==", "bodyText": "Both work as anyOf has multiple signatures, one that takes a vararg ( so we can pass an array of Matcher ) and it also has one that takes an Iterable ( so we can pass a List  ). That said, the Arrays.asList is a leftover from a previous attempt and we gain nothing from converting the Array to a List, so I'll change for consistency", "url": "https://github.com/elastic/elasticsearch/pull/51832#discussion_r374557310", "createdAt": "2020-02-04T09:27:10Z", "author": {"login": "jkakavas"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -310,23 +316,28 @@ public void startElasticsearch() throws Exception {\n         return Archives.startElasticsearchWithTty(installation, sh, password);\n     }\n \n-\n     public void assertElasticsearchFailure(Shell.Result result, String expectedMessage, Packages.JournaldWrapper journaldWrapper) {\n+        assertElasticsearchFailure(result, Collections.singletonList(expectedMessage), journaldWrapper);\n+    }\n \n+    public void assertElasticsearchFailure(Shell.Result result, List<String> expectedMessages, Packages.JournaldWrapper journaldWrapper) {\n+        @SuppressWarnings(\"unchecked\")\n+        Matcher<String>[] stringMatchers = expectedMessages.stream().map(CoreMatchers::containsString).toArray(Matcher[]::new);\n         if (Files.exists(installation.logs.resolve(\"elasticsearch.log\"))) {\n \n             // If log file exists, then we have bootstrapped our logging and the\n             // error should be in the logs\n             assertTrue(\"log file exists\", Files.exists(installation.logs.resolve(\"elasticsearch.log\")));\n             String logfile = FileUtils.slurp(installation.logs.resolve(\"elasticsearch.log\"));\n-            assertThat(logfile, containsString(expectedMessage));\n+\n+            assertThat(logfile, anyOf(Arrays.asList(stringMatchers)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NDExNg=="}, "originalCommit": {"oid": "32766a59a437d1710163e247d63c3d1a833fd742"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 56, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}