{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTQwOTI4", "number": 65150, "title": "URI parts ingest processor ", "bodyText": "Adds a new uri_parts processor that decomposes a URI into its constituent parts. E.g.:\nPOST _ingest/pipeline/_simulate?verbose\n{\n  \"pipeline\": {\n    \"processors\": [\n      {\n        \"url_parts\": {\n          \"field\": \"uri_field\",\n          \"target_field\": \"url\",\n          \"keep_original\": true,\n          \"remove_if_successful\": true\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_source\": {\n        \"uri_field\": \"http://user:pw@www.google.com:80/blarg.gif#ref\"\n      }\n    }\n  ]\n}\n\nresults in:\n\"processor_type\" : \"uri_parts\",\n\"status\" : \"success\",\n\"doc\" : {\n  \"_index\" : \"_index\",\n  \"_id\" : \"_id\",\n  \"_source\" : {\n    \"url\" : {\n      \"path\" : \"/blarg.gif\",\n      \"fragment\" : \"ref\",\n      \"extension\" : \"gif\",\n      \"password\" : \"pw\",\n      \"original\" : \"http://user:pw@www.google.com:80/blarg.gif#ref\",\n      \"scheme\" : \"http\",\n      \"port\" : 80,\n      \"user_info\" : \"user:pw\",\n      \"domain\" : \"www.google.com\",\n      \"username\" : \"user\"\n    }\n  }\n\nThe processor relies on the java.net.URI class to parse the URI and attempts to map the parts into ECS fields. Some ECS fields are not part of the URI spec, so see the table below for how those are handled:\n\n\n\nURL Parts Processor\nECS\njava.net.URI\nComments\n\n\n\n\ndomain\nurl.domain\ngetHost()\n\n\n\nextension\nurl.extension\n\nThis is not part of the URI spec and is manually parsed out of the path element on a best-effort basis if a . exists in the path\n\n\nfragment\nurl.fragment\ngetFragment()\n\n\n\n\nurl.full\n\n\n\n\noriginal\nurl.original\n\nThe processor includes an option to retain the original URL\n\n\npassword\nurl.password\n\nThe URI spec defines an \"authority\" field but does not define either username or password though they are commonly presented with the username:password convention. The username and password fields are parsed out of the user_info field on a best-effort basis if a : exists.\n\n\npath\nurl.path\ngetPath()\n\n\n\nport\nurl.port\ngetPort()\n\n\n\nquery\nurl.query\ngetQuery()\n\n\n\n\nurl.registered_domain\n\n\n\n\nscheme\nurl.scheme\ngetProtocol()\n\n\n\n\nurl.top_level_domain\n\n\n\n\nusername\nurl.username\n\nSee comment on password above\n\n\nuser_info\n\ngetUserInfo()\nCorresponds to the \"authority\" field of the URI spec without the domain\n\n\n\nAlso introduces a new module for ingest processors.\nCloses #57481", "createdAt": "2020-11-17T16:30:11Z", "url": "https://github.com/elastic/elasticsearch/pull/65150", "merged": true, "mergeCommit": {"oid": "ccf4b63b5b2e3491c09aaefa49124762db8916f0"}, "closed": true, "closedAt": "2020-11-20T14:43:52Z", "author": {"login": "danhermann"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddbx-sAH2gAyNTIyNTQwOTI4OmRmNzg2ZjhjZWJjNTJjMDdlNGViMzgxOWI3ZTQwYmMzMzI3ODc1YWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeXvoEAH2gAyNTIyNTQwOTI4OmMxMjg1MjJlNGFmZWYwMmRkMjRmNTI3OWQ5ZmVlNDgzYmE5MjFiOGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "df786f8cebc52c07e4eb3819b7e40bc3327875af", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/df786f8cebc52c07e4eb3819b7e40bc3327875af", "committedDate": "2020-11-17T16:03:04Z", "message": "URL parts processor with new ingest module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7650216f62b61f4a625887937406787557694c", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d7650216f62b61f4a625887937406787557694c", "committedDate": "2020-11-17T16:36:28Z", "message": "spotless making code less readable :("}}, {"__typename": "PullRequestCommit", "commit": {"oid": "828914e249183e31c86cadf6041936c5ae3af7e3", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/828914e249183e31c86cadf6041936c5ae3af7e3", "committedDate": "2020-11-17T16:49:30Z", "message": "forbidden APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf2715201ea493f835e8e013e86dd2cc58de363", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/caf2715201ea493f835e8e013e86dd2cc58de363", "committedDate": "2020-11-17T22:32:45Z", "message": "add tests, don't remove target field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTQxNTEz", "url": "https://github.com/elastic/elasticsearch/pull/65150#pullrequestreview-532941513", "createdAt": "2020-11-18T01:18:31Z", "commit": {"oid": "caf2715201ea493f835e8e013e86dd2cc58de363"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMToxODozMlrOH1SCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTozNDoyN1rOH1SWiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjA2NA==", "bodyText": "Are there limitations on which schemes that this can parse? Would these parse?\n\nftp://ftp.is.co.za/rfc/rfc1808.txt\nldap://[2001:db8::7]/c=GB?objectClass?one\ntelnet://192.0.2.16:80/\n\nPerhaps using java.net.URI would be more forgiving and not require a URLStreamHandler to be loaded.", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r525632064", "createdAt": "2020-11-18T01:18:32Z", "author": {"login": "andrewkroh"}, "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UrlPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UrlPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"url_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UrlPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URL url;\n+        try {\n+            url = new URL(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf2715201ea493f835e8e013e86dd2cc58de363"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNTQyOQ==", "bodyText": "ECS isn't clear on what's correct here, but what does getHost return for bracked IPv6 addresses?\n@elastic/ecs Should url.domain include the brackets that are required when using IPv6 addresses in URLs? https://www.ietf.org/rfc/rfc2732.txt", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r525635429", "createdAt": "2020-11-18T01:28:40Z", "author": {"login": "andrewkroh"}, "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UrlPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UrlPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"url_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UrlPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URL url;\n+        try {\n+            url = new URL(value);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"unable to parse URL [\" + value + \"]\");\n+        }\n+        var urlParts = new HashMap<String, Object>();\n+        urlParts.put(\"domain\", url.getHost());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf2715201ea493f835e8e013e86dd2cc58de363"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNzI1Ng==", "bodyText": "Similarly parts of the URL are required for parsing to work?", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r525637256", "createdAt": "2020-11-18T01:34:27Z", "author": {"login": "andrewkroh"}, "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UrlPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UrlPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"url_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UrlPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URL url;\n+        try {\n+            url = new URL(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjA2NA=="}, "originalCommit": {"oid": "caf2715201ea493f835e8e013e86dd2cc58de363"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c9163fabd8d91ce375138d4c649307f311a9ea6", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c9163fabd8d91ce375138d4c649307f311a9ea6", "committedDate": "2020-11-18T17:27:20Z", "message": "switch to java.net.URI and add additional test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzM3OTU3", "url": "https://github.com/elastic/elasticsearch/pull/65150#pullrequestreview-533737957", "createdAt": "2020-11-18T18:06:11Z", "commit": {"oid": "0c9163fabd8d91ce375138d4c649307f311a9ea6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b9effef3197e36bec1e8aba515f75bdb0262cf", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/30b9effef3197e36bec1e8aba515f75bdb0262cf", "committedDate": "2020-11-18T20:11:10Z", "message": "disable testing conventions check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44bb39448e815e65dc9e51bd8e7f8ca1a2e897a4", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/44bb39448e815e65dc9e51bd8e7f8ca1a2e897a4", "committedDate": "2020-11-18T20:17:06Z", "message": "spotless. again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b052cb443611b0d00552408350ad7192562ea62", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/6b052cb443611b0d00552408350ad7192562ea62", "committedDate": "2020-11-18T21:04:54Z", "message": "rename URL to URI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzkxMTc0", "url": "https://github.com/elastic/elasticsearch/pull/65150#pullrequestreview-535391174", "createdAt": "2020-11-20T12:35:53Z", "commit": {"oid": "6b052cb443611b0d00552408350ad7192562ea62"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjozNTo1NFrOH3N_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjozNTo1NFrOH3N_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2Mjk1NQ==", "bodyText": "would this fail with IndexOutOfBounds for http://user:@www.google.com:80/blarg.gif#ref ? (no password)\nShall we add a test for this?", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r527662955", "createdAt": "2020-11-20T12:35:54Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UriPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UriPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"uri_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UriPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URI uri;\n+        try {\n+            uri = new URI(value);\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"unable to parse URI [\" + value + \"]\");\n+        }\n+        var uriParts = new HashMap<String, Object>();\n+        uriParts.put(\"domain\", uri.getHost());\n+        if (uri.getFragment() != null) {\n+            uriParts.put(\"fragment\", uri.getFragment());\n+        }\n+        if (keepOriginal) {\n+            uriParts.put(\"original\", value);\n+        }\n+        final String path = uri.getPath();\n+        if (path != null) {\n+            uriParts.put(\"path\", path);\n+            if (path.contains(\".\")) {\n+                int periodIndex = path.lastIndexOf('.');\n+                uriParts.put(\"extension\", periodIndex < path.length() ? path.substring(periodIndex + 1) : \"\");\n+            }\n+        }\n+        if (uri.getPort() != -1) {\n+            uriParts.put(\"port\", uri.getPort());\n+        }\n+        if (uri.getQuery() != null) {\n+            uriParts.put(\"query\", uri.getQuery());\n+        }\n+        uriParts.put(\"scheme\", uri.getScheme());\n+        final String userInfo = uri.getUserInfo();\n+        if (userInfo != null) {\n+            uriParts.put(\"user_info\", userInfo);\n+            if (userInfo.contains(\":\")) {\n+                int colonIndex = userInfo.indexOf(\":\");\n+                uriParts.put(\"username\", userInfo.substring(0, colonIndex));\n+                uriParts.put(\"password\", colonIndex < userInfo.length() ? userInfo.substring(colonIndex + 1) : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b052cb443611b0d00552408350ad7192562ea62"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c128522e4afef02dd24f5279d9fee483ba921b8a", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/c128522e4afef02dd24f5279d9fee483ba921b8a", "committedDate": "2020-11-20T13:54:48Z", "message": "test case for blank password in user info"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 983, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}