{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTE1NjQx", "number": 54068, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTowMjo0NFrODqvdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo0NTowNlrODrm4sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTQ0Mjc5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTowMjo0NFrOF6rF9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTowMjo0NFrOF6rF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2Nzc2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r397067765", "createdAt": "2020-03-24T11:02:44Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "diffHunk": "@@ -315,9 +345,13 @@ public int hashCode() {\n     }\n \n     @Override\n-    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets) {\n-        // no need for an extra range filter as this is already done by checkpoints\n-        return null;\n+    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets, long synchronizationTimestamp) {\n+        if (synchronizationTimestamp > 0) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c551e2ca460a2de0123c26e29f22bc51ee8cbb"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU2MzMxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozODoxMlrOF6sR3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyMToyMVrOF7BkYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NzE5Ng==", "bodyText": "Do we know if this rounding will always round down? I think we will want it to always round down. If it does not, then it might be prudent to do synchronizationTimestamp - interval.getMilliseconds() in the rounding.", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r397087196", "createdAt": "2020-03-24T11:38:12Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "diffHunk": "@@ -315,9 +345,13 @@ public int hashCode() {\n     }\n \n     @Override\n-    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets) {\n-        // no need for an extra range filter as this is already done by checkpoints\n-        return null;\n+    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets, long synchronizationTimestamp) {\n+        if (synchronizationTimestamp > 0) {\n+\n+            return new RangeQueryBuilder(field).gte(rounding.round(synchronizationTimestamp)).format(\"epoch_millis\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c551e2ca460a2de0123c26e29f22bc51ee8cbb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNjAwMQ==", "bodyText": "sorry, forgot to answer: yes it does, this method is used for all histogram aggregations. For getting the next bucket there is nextRoundingValue.", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r397436001", "createdAt": "2020-03-24T20:21:21Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "diffHunk": "@@ -315,9 +345,13 @@ public int hashCode() {\n     }\n \n     @Override\n-    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets) {\n-        // no need for an extra range filter as this is already done by checkpoints\n-        return null;\n+    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets, long synchronizationTimestamp) {\n+        if (synchronizationTimestamp > 0) {\n+\n+            return new RangeQueryBuilder(field).gte(rounding.round(synchronizationTimestamp)).format(\"epoch_millis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NzE5Ng=="}, "originalCommit": {"oid": "95c551e2ca460a2de0123c26e29f22bc51ee8cbb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU3NDkwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MTo1MlrOF6sZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MTo1MlrOF6sZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4OTA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Rounding.Builder roundingBuilder;\n          \n          \n            \n                    if (timeUnit != null) {\n          \n          \n            \n                        roundingBuilder = new Rounding.Builder(timeUnit);\n          \n          \n            \n            \n          \n          \n            \n                    } else {\n          \n          \n            \n                        roundingBuilder = new Rounding.Builder(TimeValue.parseTimeValue(interval.toString(), \"createRounding\"));\n          \n          \n            \n                    }\n          \n          \n            \n                    final Rounding.Builder roundingBuilder = timeUnit != null ? new Rounding.Builder(timeUnit) : new Rounding.Builder(TimeValue.parseTimeValue(interval.toString(), \"createRounding\"));", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r397089091", "createdAt": "2020-03-24T11:41:52Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "diffHunk": "@@ -195,11 +208,27 @@ private void writeInterval(Interval interval, StreamOutput out) throws IOExcepti\n     private static final ConstructingObjectParser<DateHistogramGroupSource, Void> LENIENT_PARSER = createParser(true);\n \n     private final Interval interval;\n-    private ZoneId timeZone;\n+    private final ZoneId timeZone;\n+    private Rounding rounding;\n \n-    public DateHistogramGroupSource(String field, ScriptConfig scriptConfig, Interval interval) {\n+    public DateHistogramGroupSource(String field, ScriptConfig scriptConfig, Interval interval, ZoneId timeZone) {\n         super(field, scriptConfig);\n         this.interval = interval;\n+        this.timeZone = timeZone;\n+\n+        Rounding.DateTimeUnit timeUnit = DateHistogramAggregationBuilder.DATE_FIELD_UNITS.get(interval.toString());\n+        final Rounding.Builder roundingBuilder;\n+        if (timeUnit != null) {\n+            roundingBuilder = new Rounding.Builder(timeUnit);\n+\n+        } else {\n+            roundingBuilder = new Rounding.Builder(TimeValue.parseTimeValue(interval.toString(), \"createRounding\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c551e2ca460a2de0123c26e29f22bc51ee8cbb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTY3NzEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/Pivot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoxMjoxOFrOF6tZew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoxOToxMVrOF6vxOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNTUzMQ==", "bodyText": "It seems we are needlessly adding an if branch. I think we should probably just supply both the synchronizationField and the lastSynchronizationCheckpoint to getIncrementalBucketUpdateFilterQuery.\n(similar comment for the more than one group source entry)", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r397105531", "createdAt": "2020-03-24T12:12:18Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/Pivot.java", "diffHunk": "@@ -189,44 +189,37 @@ public boolean supportsIncrementalBucketUpdate() {\n         );\n     }\n \n-    public QueryBuilder filterBuckets(Map<String, Set<String>> changedBuckets) {\n-\n-        if (changedBuckets == null || changedBuckets.isEmpty()) {\n-            return null;\n-        }\n+    public QueryBuilder filterBuckets(\n+        Map<String, Set<String>> changedBuckets,\n+        String synchronizationField,\n+        long lastSynchronizationCheckpoint\n+    ) {\n \n         if (config.getGroupConfig().getGroups().size() == 1) {\n             Entry<String, SingleGroupSource> entry = config.getGroupConfig().getGroups().entrySet().iterator().next();\n-            // it should not be possible to get into this code path\n-            assert (entry.getValue().supportsIncrementalBucketUpdate());\n \n             logger.trace(\"filter by bucket: \" + entry.getKey() + \"/\" + entry.getValue().getField());\n-            if (changedBuckets.containsKey(entry.getKey())) {\n-                return entry.getValue().getIncrementalBucketUpdateFilterQuery(changedBuckets.get(entry.getKey()));\n-            } else {\n-                // should never happen\n-                throw new RuntimeException(\"Could not find bucket value for key \" + entry.getKey());\n-            }\n+            Set<String> changedBucketsByGroup = changedBuckets.get(entry.getKey());\n+\n+            // important: the fields must match to apply this optimization\n+            long synchronizationTimestamp = entry.getKey().equals(synchronizationField) ? lastSynchronizationCheckpoint : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c551e2ca460a2de0123c26e29f22bc51ee8cbb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0NDM3OQ==", "bodyText": "\ud83d\udc4d This is a bug, entry.getKey() returns the name of the group, not the field that is used (entry.getValue().getField()), but I think I will follow your suggestion and pass it in and let the GroupSource decide what to do.", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r397144379", "createdAt": "2020-03-24T13:19:11Z", "author": {"login": "hendrikmuhs"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/Pivot.java", "diffHunk": "@@ -189,44 +189,37 @@ public boolean supportsIncrementalBucketUpdate() {\n         );\n     }\n \n-    public QueryBuilder filterBuckets(Map<String, Set<String>> changedBuckets) {\n-\n-        if (changedBuckets == null || changedBuckets.isEmpty()) {\n-            return null;\n-        }\n+    public QueryBuilder filterBuckets(\n+        Map<String, Set<String>> changedBuckets,\n+        String synchronizationField,\n+        long lastSynchronizationCheckpoint\n+    ) {\n \n         if (config.getGroupConfig().getGroups().size() == 1) {\n             Entry<String, SingleGroupSource> entry = config.getGroupConfig().getGroups().entrySet().iterator().next();\n-            // it should not be possible to get into this code path\n-            assert (entry.getValue().supportsIncrementalBucketUpdate());\n \n             logger.trace(\"filter by bucket: \" + entry.getKey() + \"/\" + entry.getValue().getField());\n-            if (changedBuckets.containsKey(entry.getKey())) {\n-                return entry.getValue().getIncrementalBucketUpdateFilterQuery(changedBuckets.get(entry.getKey()));\n-            } else {\n-                // should never happen\n-                throw new RuntimeException(\"Could not find bucket value for key \" + entry.getKey());\n-            }\n+            Set<String> changedBucketsByGroup = changedBuckets.get(entry.getKey());\n+\n+            // important: the fields must match to apply this optimization\n+            long synchronizationTimestamp = entry.getKey().equals(synchronizationField) ? lastSynchronizationCheckpoint : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNTUzMQ=="}, "originalCommit": {"oid": "95c551e2ca460a2de0123c26e29f22bc51ee8cbb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDUwMzQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozODo0OFrOF8C2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozODo0OFrOF8C2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (synchronizationField != null && field != null && synchronizationField.equals(field) && synchronizationTimestamp > 0) {\n          \n          \n            \n                    if (synchronizationField != null && synchronizationField.equals(field) && synchronizationTimestamp > 0) {", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r398505665", "createdAt": "2020-03-26T11:38:48Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/transforms/pivot/DateHistogramGroupSource.java", "diffHunk": "@@ -315,9 +344,16 @@ public int hashCode() {\n     }\n \n     @Override\n-    public QueryBuilder getIncrementalBucketUpdateFilterQuery(Set<String> changedBuckets) {\n-        // no need for an extra range filter as this is already done by checkpoints\n-        return null;\n+    public QueryBuilder getIncrementalBucketUpdateFilterQuery(\n+        Set<String> changedBuckets,\n+        String synchronizationField,\n+        long synchronizationTimestamp\n+    ) {\n+        if (synchronizationField != null && field != null && synchronizationField.equals(field) && synchronizationTimestamp > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d94133ed508acde7634f710f0a03b38f4e168d"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDUyNDY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/Pivot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo0NTowNlrOF8DDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTo0NTowNlrOF8DDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwODk3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.trace(\"filter by bucket: \" + entry.getKey() + \"/\" + entry.getValue().getField());\n          \n          \n            \n                        logger.trace(() -> new ParameterizedMessage(\"filter by bucket: {}/{}\", entry.getKey(), entry.getValue().getField()));\n          \n      \n    \n    \n  \n\nnit", "url": "https://github.com/elastic/elasticsearch/pull/54068#discussion_r398508973", "createdAt": "2020-03-26T11:45:06Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/pivot/Pivot.java", "diffHunk": "@@ -189,44 +188,31 @@ public boolean supportsIncrementalBucketUpdate() {\n         );\n     }\n \n-    public QueryBuilder filterBuckets(Map<String, Set<String>> changedBuckets) {\n-\n-        if (changedBuckets == null || changedBuckets.isEmpty()) {\n-            return null;\n-        }\n+    public QueryBuilder filterBuckets(\n+        Map<String, Set<String>> changedBuckets,\n+        String synchronizationField,\n+        long lastSynchronizationCheckpoint\n+    ) {\n+        assert changedBuckets != null;\n \n         if (config.getGroupConfig().getGroups().size() == 1) {\n             Entry<String, SingleGroupSource> entry = config.getGroupConfig().getGroups().entrySet().iterator().next();\n-            // it should not be possible to get into this code path\n-            assert (entry.getValue().supportsIncrementalBucketUpdate());\n-\n             logger.trace(\"filter by bucket: \" + entry.getKey() + \"/\" + entry.getValue().getField());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d94133ed508acde7634f710f0a03b38f4e168d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4156, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}