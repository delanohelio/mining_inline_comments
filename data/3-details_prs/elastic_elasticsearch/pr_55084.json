{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDI5NTMw", "number": 55084, "title": "EQL: Add number function", "bodyText": "Resolves #54471\nAdded function to parse numbers from strings.\nOne note is that the resolved DataType is double. Since it can return integer, float, or number. Double seemed to be the most inclusive.", "createdAt": "2020-04-10T19:02:19Z", "url": "https://github.com/elastic/elasticsearch/pull/55084", "merged": true, "mergeCommit": {"oid": "b0863cc194687c352af8b0e200c0b221fbc7f5d0"}, "closed": true, "closedAt": "2020-05-13T20:07:37Z", "author": {"login": "rw-access"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWVvzPAH2gAyNDAyMDI5NTMwOjgzMDliOGYzMjVmZjQ5MWZhMWJmMWQzNzA3ODdhM2E4MjNlNWJmODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg972BAH2gAyNDAyMDI5NTMwOmMyZTkwMjMzYWU2OTYzY2E4YWQwZTQ1YjIwODVhYTEwZDA4N2RiZjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8309b8f325ff491fa1bf1d370787a3a823e5bf80", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/8309b8f325ff491fa1bf1d370787a3a823e5bf80", "committedDate": "2020-04-10T18:52:38Z", "message": "EQL: Add number function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b698eb9f9922199069b89168ece053edab8602e", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/4b698eb9f9922199069b89168ece053edab8602e", "committedDate": "2020-04-10T18:58:41Z", "message": "EQL: Fix the locale used for number for deterministic functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/750f6bb9c678ebb9269b213d3cb0527933502704", "committedDate": "2020-04-10T19:26:47Z", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTk2NzIw", "url": "https://github.com/elastic/elasticsearch/pull/55084#pullrequestreview-393596720", "createdAt": "2020-04-15T09:15:38Z", "commit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNTozOFrOGFw8mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo0ODoyMlrOGFyJVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODAxMA==", "bodyText": "Use the same name for the first argument as in ToNumber.java (value instead of source).", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698010", "createdAt": "2020-04-15T09:15:38Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODU0NA==", "bodyText": "Did you forget the base here?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698544", "createdAt": "2020-04-15T09:16:35Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {\n+        super(source, expression, Arrays.asList(src, base));\n+        this.source = src;\n+        this.base = base;\n+\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToNumberFunctionPipe(source(), expression(), newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODczMg==", "bodyText": "base?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698732", "createdAt": "2020-04-15T09:16:52Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {\n+        super(source, expression, Arrays.asList(src, base));\n+        this.source = src;\n+        this.base = base;\n+\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToNumberFunctionPipe(source(), expression(), newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        if (newSource == source) {\n+            return this;\n+        }\n+        return replaceChildren(Collections.singletonList(newSource));\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODg0Mg==", "bodyText": "base?\nAnd the rest of the class.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408698842", "createdAt": "2020-04-15T09:17:04Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe source, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {\n+        super(source, expression, Arrays.asList(src, base));\n+        this.source = src;\n+        this.base = base;\n+\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return new ToNumberFunctionPipe(source(), expression(), newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        if (newSource == source) {\n+            return this;\n+        }\n+        return replaceChildren(Collections.singletonList(newSource));\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery();\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        return source.resolved();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMDA0NQ==", "bodyText": "I think we should add a new FunctionDefinition[] array for math/numerical functions.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408700045", "createdAt": "2020-04-15T09:19:07Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,6 +38,7 @@ public EqlFunctionRegistry() {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n+                def(ToNumber.class, ToNumber::new, \"number\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMDYwNg==", "bodyText": "You forgot base.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408700606", "createdAt": "2020-04-15T09:20:07Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTE4Ng==", "bodyText": "Use value instead of source to have a consistent naming throughout the function classes.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408701186", "createdAt": "2020-04-15T09:21:06Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTgyNg==", "bodyText": "When can source be a Number? Shouldn't always be a String?\nIn the function definition you also added the isStringAndExact restriction....", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408701826", "createdAt": "2020-04-15T09:22:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjUzNw==", "bodyText": "What if the source string is   0x? (leading whitespaces)\nHow does the EQL Endpoint work in this case?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408702537", "createdAt": "2020-04-15T09:23:15Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzEwNA==", "bodyText": "instanceof Number doesn't match the error message, which talks about an integer.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408703104", "createdAt": "2020-04-15T09:24:08Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwNzg3NQ==", "bodyText": "Here I would prefer to see in the error message the original base. If that is null because the user didn't provide one, then print radix.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408707875", "createdAt": "2020-04-15T09:32:12Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());\n+        } catch (ParseException e) {\n+            throw new EqlIllegalArgumentException(\"Unable to convert [{}] to number of base [{}]\", source, radix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODEyMg==", "bodyText": "How are the EQL endpoints dealing with locale?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408708122", "createdAt": "2020-04-15T09:32:39Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODU5MA==", "bodyText": "base missing.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408708590", "createdAt": "2020-04-15T09:33:29Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());\n+        } catch (ParseException e) {\n+            throw new EqlIllegalArgumentException(\"Unable to convert [{}] to number of base [{}]\", source, radix);\n+        }\n+\n+    }\n+\n+    protected Processor source() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        ToNumberFunctionProcessor other = (ToNumberFunctionProcessor) obj;\n+        return Objects.equals(source(), other.source());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODcxNQ==", "bodyText": "base missing.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408708715", "createdAt": "2020-04-15T09:33:39Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    public static Integer parseHexadecimal(String source) {\n+        source = source.startsWith(\"0x\") ? source.substring(2) : source;\n+        return Integer.parseInt(source, 16);\n+    }\n+\n+    public static Object doProcess(Object source, Object base) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        if (source instanceof Number) {\n+            return source;\n+        }\n+\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+\n+        boolean detectedHexPrefix = source.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", source);\n+        }\n+\n+        int radix = ((Number) base).intValue();\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            source = source.toString().substring(2);\n+        }\n+\n+        // custom bases need to use parseInt\n+        if (radix != 10) {\n+            return Integer.parseInt(source.toString(), radix);\n+        }\n+\n+        // otherwise, we should allow for doubles\n+        try {\n+            return NumberFormat.getNumberInstance(Locale.US).parse(source.toString());\n+        } catch (ParseException e) {\n+            throw new EqlIllegalArgumentException(\"Unable to convert [{}] to number of base [{}]\", source, radix);\n+        }\n+\n+    }\n+\n+    protected Processor source() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNzY1NA==", "bodyText": "Can you add more tests here, please?\nThe way I see it, there are tests (just one) for no argument number function and for base 16. How about base 2, explicit base 10, and custom bases?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r408717654", "createdAt": "2020-04-15T09:48:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -849,24 +849,8 @@ process where modulo(11, add(serial_event_id, 1)) == serial_event_id'''\n expected_event_ids  = [1, 2, 3, 5, 11]\n description = \"test built-in math functions\"\n \n-[[queries]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82e8076d5d7ba89ea1e53c5290c15bdb5392b9da", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/82e8076d5d7ba89ea1e53c5290c15bdb5392b9da", "committedDate": "2020-04-16T15:56:04Z", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea3d9491c50dc49eb12c1136c0da4e64428fbcd3", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea3d9491c50dc49eb12c1136c0da4e64428fbcd3", "committedDate": "2020-04-16T18:37:56Z", "message": "EQL: Add more ToNumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20aa77fba1f7fba820ee16502956cbe21e73cf1f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/20aa77fba1f7fba820ee16502956cbe21e73cf1f", "committedDate": "2020-04-16T22:06:32Z", "message": "EQL: Add more number ToNumberProcessor unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867e122d094da2ba0c68231a352ee225acfc460c", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/867e122d094da2ba0c68231a352ee225acfc460c", "committedDate": "2020-04-16T22:33:20Z", "message": "EQL: Remove unnecessary overrides, fix processor methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2321d845c357e62b83ffc57b9cacca89231facd", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/e2321d845c357e62b83ffc57b9cacca89231facd", "committedDate": "2020-04-16T22:45:37Z", "message": "EQL: Remove additional unnecessary overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a123c7d0886ae794dd26a401c00e1202158dddd6", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/a123c7d0886ae794dd26a401c00e1202158dddd6", "committedDate": "2020-04-16T22:47:18Z", "message": "EQL: Lint fixes for ToNumber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c9949375d04ee8a3f6783995a9f32548baab7d", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/86c9949375d04ee8a3f6783995a9f32548baab7d", "committedDate": "2020-04-16T22:51:38Z", "message": "EQL: ToNumber renames from PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1dac67508fedaf845da2d3feb08a26268e5b83a", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/c1dac67508fedaf845da2d3feb08a26268e5b83a", "committedDate": "2020-04-16T23:20:01Z", "message": "EQL: Remove NumberFormat locale handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ec36d8e7c1b0c0bdf8ec07c506cf9ca59a79a1", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/22ec36d8e7c1b0c0bdf8ec07c506cf9ca59a79a1", "committedDate": "2020-04-16T23:40:40Z", "message": "EQL: Removed NumberFormat from ToNumber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/0e8d77c4c640cd44f21e3c90a8c1669e6c06846d", "committedDate": "2020-04-21T20:32:28Z", "message": "Merge branch 'master' into eql/number-function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjQ1ODE1", "url": "https://github.com/elastic/elasticsearch/pull/55084#pullrequestreview-398245815", "createdAt": "2020-04-22T14:24:45Z", "commit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyNDo0NlrOGJ5SDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo0MDowNVrOGJ6FOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyODg3OA==", "bodyText": "Change the src parameter name to match the one of the internal variable - value.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413028878", "createdAt": "2020-04-22T14:24:46Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression src, Expression base) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMTg2Ng==", "bodyText": "Same here: change src to value to have a consistent naming.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413031866", "createdAt": "2020-04-22T14:28:06Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberFunctionPipe.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ToNumberFunctionPipe extends Pipe {\n+\n+    private final Pipe value, base;\n+\n+    public ToNumberFunctionPipe(Source source, Expression expression, Pipe src, Pipe base) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNjA0OQ==", "bodyText": "I believe we should add a new package for the numeric/math functions. At the moment this is ...function.scalar.string. ES SQL has .math. Probably worth doing the same here. Add a package ...function.scalar.math.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413036049", "createdAt": "2020-04-22T14:32:59Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNjQ5MQ==", "bodyText": "I would still like to see here more tests.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413036491", "createdAt": "2020-04-22T14:33:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -849,24 +849,8 @@ process where modulo(11, add(serial_event_id, 1)) == serial_event_id'''\n expected_event_ids  = [1, 2, 3, 5, 11]\n description = \"test built-in math functions\"\n \n-[[queries]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNzY1NA=="}, "originalCommit": {"oid": "750f6bb9c678ebb9269b213d3cb0527933502704"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzODQwMQ==", "bodyText": "I think here you are missing the base.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413038401", "createdAt": "2020-04-22T14:35:51Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression src, Expression base) {\n+        super(source, Arrays.asList(src, base != null ? base : new Literal(source, null, DataTypes.NULL)));\n+        this.value = src;\n+        this.base = arguments().get(1);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution valueResolution = isStringAndExact(value, sourceText(), ParamOrdinal.FIRST);\n+        if (valueResolution.unresolved()) {\n+            return valueResolution;\n+        }\n+\n+        return isInteger(base, sourceText(), ParamOrdinal.SECOND);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new ToNumberFunctionPipe(source(), this, Expressions.pipe(value), Expressions.pipe(base));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return value.foldable() && base.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(value.fold(), base.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, ToNumber::new, value, base);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate valueScript = asScript(value);\n+        ScriptTemplate baseScript = asScript(base);\n+\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s)\"),\n+                \"number\",\n+                valueScript.template()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzODY3OA==", "bodyText": "This should be a two parameters function, no?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413038678", "createdAt": "2020-04-22T14:36:08Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumber.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression src, Expression base) {\n+        super(source, Arrays.asList(src, base != null ? base : new Literal(source, null, DataTypes.NULL)));\n+        this.value = src;\n+        this.base = arguments().get(1);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution valueResolution = isStringAndExact(value, sourceText(), ParamOrdinal.FIRST);\n+        if (valueResolution.unresolved()) {\n+            return valueResolution;\n+        }\n+\n+        return isInteger(base, sourceText(), ParamOrdinal.SECOND);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new ToNumberFunctionPipe(source(), this, Expressions.pipe(value), Expressions.pipe(base));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return value.foldable() && base.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(value.fold(), base.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, ToNumber::new, value, base);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate valueScript = asScript(value);\n+        ScriptTemplate baseScript = asScript(base);\n+\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0MTk3OQ==", "bodyText": "Extra unnecessary empty line.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r413041979", "createdAt": "2020-04-22T14:40:05Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/ToNumberProcessorTests.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n+import static org.elasticsearch.xpack.ql.tree.Source.EMPTY;\n+\n+\n+public class ToNumberProcessorTests extends ESTestCase {\n+\n+    private static Object process(Object value, Object base) {\n+        return new ToNumber(EMPTY, l(value), l(base)).makePipe().asProcessor().process(null);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8d77c4c640cd44f21e3c90a8c1669e6c06846d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e23e9a17fc16be79bf93bfef482e24a5892e9b1", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e23e9a17fc16be79bf93bfef482e24a5892e9b1", "committedDate": "2020-04-22T19:57:57Z", "message": "EQL: Add number function tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b0ac6f4aa3dcfea7e3ebec5d8e1d995e105e931", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/1b0ac6f4aa3dcfea7e3ebec5d8e1d995e105e931", "committedDate": "2020-04-22T20:10:48Z", "message": "EQL: ToNumberProcessorTests formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867fc01a7fc39285c118792283e3457e4e1c85b3", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/867fc01a7fc39285c118792283e3457e4e1c85b3", "committedDate": "2020-04-22T20:12:30Z", "message": "EQL: Remove newline in ToNumberProcessorTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33e2ffa7b6cac74ea437075076f79909d5e95115", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/33e2ffa7b6cac74ea437075076f79909d5e95115", "committedDate": "2020-04-22T21:04:41Z", "message": "EQL: Add number(..., null) test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b49ea23970b774a2d015cb7ef9b87c75260a221f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/b49ea23970b774a2d015cb7ef9b87c75260a221f", "committedDate": "2020-05-05T20:06:01Z", "message": "Merge branch 'master' into eql/number-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6501b4b66bc75f8e95c96f79010c7e072553f81", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/a6501b4b66bc75f8e95c96f79010c7e072553f81", "committedDate": "2020-05-05T20:46:53Z", "message": "Create expression.function.scalar.math package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae345c4265b903097fe95af0af1bcb886389927", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ae345c4265b903097fe95af0af1bcb886389927", "committedDate": "2020-05-05T21:58:15Z", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "326328df936632ca0140a52c675cb224e2542ae1", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/326328df936632ca0140a52c675cb224e2542ae1", "committedDate": "2020-05-08T17:31:09Z", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzU5Njc1", "url": "https://github.com/elastic/elasticsearch/pull/55084#pullrequestreview-410759675", "createdAt": "2020-05-13T09:42:21Z", "commit": {"oid": "326328df936632ca0140a52c675cb224e2542ae1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo0MjoyMlrOGUpxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoxMDoyN1rOGUuf-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTEzNg==", "bodyText": "nitpick: please, remove the whitespace between the Painless script parameters: {eql}.%s(%s,%s)", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424309136", "createdAt": "2020-05-13T09:42:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumber.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.math.ToNumberFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific function for parsing strings into numbers.\n+ */\n+public class ToNumber extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression value, base;\n+\n+    public ToNumber(Source source, Expression value, Expression base) {\n+        super(source, Arrays.asList(value, base != null ? base : new Literal(source, null, DataTypes.NULL)));\n+        this.value = value;\n+        this.base = arguments().get(1);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution valueResolution = isStringAndExact(value, sourceText(), ParamOrdinal.FIRST);\n+        if (valueResolution.unresolved()) {\n+            return valueResolution;\n+        }\n+\n+        return isInteger(base, sourceText(), ParamOrdinal.SECOND);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new ToNumberFunctionPipe(source(), this, Expressions.pipe(value), Expressions.pipe(base));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return value.foldable() && base.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(value.fold(), base.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, ToNumber::new, value, base);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate valueScript = asScript(value);\n+        ScriptTemplate baseScript = asScript(base);\n+\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s, %s)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326328df936632ca0140a52c675cb224e2542ae1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4NjU1NA==", "bodyText": "assertNull(process(123, null)) is missing.", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424386554", "createdAt": "2020-05-13T12:10:27Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumberProcessorTests.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n+import static org.elasticsearch.xpack.ql.tree.Source.EMPTY;\n+\n+\n+public class ToNumberProcessorTests extends ESTestCase {\n+\n+    private static Object process(Object value, Object base) {\n+        return new ToNumber(EMPTY, l(value), l(base)).makePipe().asProcessor().process(null);\n+    }\n+\n+    private static String error(Object value, Object base) {\n+        QlIllegalArgumentException saie = expectThrows(QlIllegalArgumentException.class,\n+            () -> new ToNumber(EMPTY, l(value), l(base)).makePipe().asProcessor().process(null));\n+        return saie.getMessage();\n+    }\n+\n+    public void toNumberWithPositiveInteger() {\n+        int number = randomIntBetween(0, 1000);\n+\n+        assertEquals(number, process(Integer.toString(number), null));\n+        assertEquals(number, process(\"0x\" + Integer.toHexString(number), null));\n+\n+        assertEquals(number, process(Integer.toString(number), 10));\n+        assertEquals(number, process(Integer.toOctalString(number), 8));\n+        assertEquals(number, process(Integer.toHexString(number), 16));\n+        assertEquals(number, process(\"0x\" + Integer.toHexString(number), 16));\n+    }\n+\n+    public void toNumberWithNegativeInteger() {\n+        int posInt = randomIntBetween(1, 1000);\n+        int negInt = -posInt;\n+\n+        assertEquals(negInt, process(Integer.toString(negInt), null));\n+\n+        assertEquals(negInt, process(Integer.toString(negInt), 10));\n+        assertEquals(negInt, process(\"-\" + Integer.toOctalString(posInt), 8));\n+        assertEquals(negInt, process(\"-\" + Integer.toHexString(posInt), 16));\n+\n+        assertEquals(negInt, process(\"-0x\" + Integer.toHexString(posInt), 16));\n+    }\n+\n+    public void toNumberWithPositiveFloat() {\n+        double number = randomDoubleBetween(0.0, 1000.0, true);\n+\n+        assertEquals(number, process(Double.toString(number), null));\n+        assertEquals(number, process(Double.toString(number), 10));\n+    }\n+\n+    public void toNumberWithNegativeFloat() {\n+        double number = randomDoubleBetween(-1000.0, -0.1, true);\n+\n+        assertEquals(number, process(Double.toString(number), null));\n+        assertEquals(number, process(Double.toString(number), 10));\n+    }\n+\n+    public void toNumberWithMissingInput() {\n+        assertNull(process(null, null));\n+        assertNull(process(null, 8));\n+        assertNull(process(null, 10));\n+        assertNull(process(null, 16));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326328df936632ca0140a52c675cb224e2542ae1"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa3fe5a7bc5adec96ae152024ba1e70c858ae4f", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/faa3fe5a7bc5adec96ae152024ba1e70c858ae4f", "committedDate": "2020-05-13T14:36:59Z", "message": "Merge remote-tracking branch 'origin/master' into eql/number-function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae", "committedDate": "2020-05-13T14:42:04Z", "message": "EQL: Remove painless whitespace for ToNumber.asScript"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc5NzM4", "url": "https://github.com/elastic/elasticsearch/pull/55084#pullrequestreview-411179738", "createdAt": "2020-05-13T18:13:59Z", "commit": {"oid": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzo1OVrOGU9xEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNTowOFrOGU9zpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjY4OQ==", "bodyText": "just curious, why Integer? should we use Long as a base type? Long.valueOf()?", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424636689", "createdAt": "2020-05-13T18:13:59Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+        out.writeNamedWriteable(base);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    private static Number parseDecimal(String source) {\n+        try {\n+            return Integer.valueOf(source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzM1MA==", "bodyText": "same question here as above about Long vs Integer", "url": "https://github.com/elastic/elasticsearch/pull/55084#discussion_r424637350", "createdAt": "2020-05-13T18:15:08Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/math/ToNumberFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.math;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class ToNumberFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"num\";\n+\n+    private final Processor value, base;\n+\n+    public ToNumberFunctionProcessor(Processor value, Processor base) {\n+        this.value = value;\n+        this.base = base;\n+    }\n+\n+    public ToNumberFunctionProcessor(StreamInput in) throws IOException {\n+        value = in.readNamedWriteable(Processor.class);\n+        base = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(value);\n+        out.writeNamedWriteable(base);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(value.process(input), base.process(input));\n+    }\n+\n+    private static Number parseDecimal(String source) {\n+        try {\n+            return Integer.valueOf(source);\n+        } catch (NumberFormatException e) {\n+            return Double.valueOf(source);\n+        }\n+    }\n+\n+    public static Object doProcess(Object value, Object base) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        if (!(value instanceof String || value instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", value);\n+        }\n+\n+        boolean detectedHexPrefix = value.toString().startsWith(\"0x\");\n+\n+        if (base == null) {\n+            base = detectedHexPrefix ? 16 : 10;\n+        } else if (base instanceof Integer == false) {\n+            throw new EqlIllegalArgumentException(\"An integer base is required; received [{}]\", base);\n+        }\n+\n+        int radix = (Integer) base;\n+\n+        if (detectedHexPrefix && radix == 16) {\n+            value = value.toString().substring(2);\n+        }\n+\n+        try {\n+            if (radix == 10) {\n+                return parseDecimal(value.toString());\n+            } else {\n+                return Integer.parseInt(value.toString(), radix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef2ce45c46c76120f1fa8962f5b590e1a50a7ae"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e90233ae6963ca8ad0e45b2085aa10d087dbf8", "author": {"user": {"login": "rw-access", "name": "Ross Wolf"}}, "url": "https://github.com/elastic/elasticsearch/commit/c2e90233ae6963ca8ad0e45b2085aa10d087dbf8", "committedDate": "2020-05-13T19:21:14Z", "message": "EQL: Add Long support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3480, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}