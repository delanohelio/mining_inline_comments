{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjI3NTE0", "number": 55162, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjozM1rODxzhkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjozM1rODxzhkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTUwOTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjozM1rOGFfIjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjowMzozNlrOGFinJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNjE1OA==", "bodyText": "Should this be a VLong not ZLong?", "url": "https://github.com/elastic/elasticsearch/pull/55162#discussion_r408406158", "createdAt": "2020-04-14T20:12:33Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "diffHunk": "@@ -97,109 +110,84 @@ protected void writeNodesTo(StreamOutput out, List<NodeResponse> nodes) throws I\n             out.writeList(nodes);\n         }\n \n+        public EnumCounters<Item> getStats() {\n+            List<EnumCounters<Item>> countersPerNode = getNodes()\n+                .stream()\n+                .map(AnalyticsStatsAction.NodeResponse::getStats)\n+                .collect(Collectors.toList());\n+            return EnumCounters.merge(Item.class, countersPerNode);\n+        }\n+\n         @Override\n         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-            builder.startArray(\"stats\");\n-            for (NodeResponse node : getNodes()) {\n-                node.toXContent(builder, params);\n+            EnumCounters<Item> stats = getStats();\n+            builder.startObject(\"stats\");\n+            for (Item item : Item.values()) {\n+                builder.field(item.name().toLowerCase(Locale.ROOT) + \"_usage\", stats.get(item));\n             }\n-            builder.endArray();\n-\n+            builder.endObject();\n             return builder;\n         }\n     }\n \n-    public static class NodeResponse extends BaseNodeResponse implements ToXContentObject {\n-        static final ParseField BOXPLOT_USAGE = new ParseField(\"boxplot_usage\");\n-        static final ParseField CUMULATIVE_CARDINALITY_USAGE = new ParseField(\"cumulative_cardinality_usage\");\n-        static final ParseField STRING_STATS_USAGE = new ParseField(\"string_stats_usage\");\n-        static final ParseField TOP_METRICS_USAGE = new ParseField(\"top_metrics_usage\");\n-        static final ParseField T_TEST_USAGE = new ParseField(\"t_test_usage\");\n-\n-        private final long boxplotUsage;\n-        private final long cumulativeCardinalityUsage;\n-        private final long stringStatsUsage;\n-        private final long topMetricsUsage;\n-        private final long ttestUsage;\n-\n-        public NodeResponse(DiscoveryNode node, long boxplotUsage, long cumulativeCardinalityUsage, long stringStatsUsage,\n-                long topMetricsUsage, long ttestUsage) {\n+    public static class NodeResponse extends BaseNodeResponse {\n+        private final EnumCounters<Item> counters;\n+\n+        public NodeResponse(DiscoveryNode node, EnumCounters<Item> counters) {\n             super(node);\n-            this.boxplotUsage = boxplotUsage;\n-            this.cumulativeCardinalityUsage = cumulativeCardinalityUsage;\n-            this.stringStatsUsage = stringStatsUsage;\n-            this.topMetricsUsage = topMetricsUsage;\n-            this.ttestUsage = ttestUsage;\n+            this.counters = counters;\n         }\n \n         public NodeResponse(StreamInput in) throws IOException {\n             super(in);\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                boxplotUsage = in.readVLong();\n-            } else {\n-                boxplotUsage = 0;\n-            }\n-            cumulativeCardinalityUsage = in.readZLong();\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                stringStatsUsage = in.readVLong();\n-                topMetricsUsage = in.readVLong();\n-            } else {\n-                topMetricsUsage = 0;\n-                stringStatsUsage = 0;\n-            }\n             if (in.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                ttestUsage = in.readVLong();\n+                counters = new EnumCounters<>(in, Item.class);\n             } else {\n-                ttestUsage = 0;\n+                counters = new EnumCounters<>(Item.class);\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.BOXPLOT, in.readVLong());\n+                }\n+                counters.inc(Item.CUMULATIVE_CARDINALITY, in.readZLong());\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.STRING_STATS, in.readVLong());\n+                    counters.inc(Item.TOP_METRICS, in.readVLong());\n+                }\n             }\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(boxplotUsage);\n-            }\n-            out.writeVLong(cumulativeCardinalityUsage);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(stringStatsUsage);\n-                out.writeVLong(topMetricsUsage);\n-            }\n             if (out.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                out.writeVLong(ttestUsage);\n+                counters.writeTo(out);\n+            } else {\n+                if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    out.writeVLong(counters.get(Item.BOXPLOT));\n+                }\n+                out.writeZLong(counters.get(Item.CUMULATIVE_CARDINALITY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c081089e932eba5132fe93d7ba2aa5c64ee9702"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMjU2OQ==", "bodyText": "It was ZLong in 7.6, got partially changed by mistake in 7.7. So, I am returning to back to the original serialization method and I will open a PR to fix it in 7.7. Good catch, thanks for reminding me!", "url": "https://github.com/elastic/elasticsearch/pull/55162#discussion_r408422569", "createdAt": "2020-04-14T20:42:32Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "diffHunk": "@@ -97,109 +110,84 @@ protected void writeNodesTo(StreamOutput out, List<NodeResponse> nodes) throws I\n             out.writeList(nodes);\n         }\n \n+        public EnumCounters<Item> getStats() {\n+            List<EnumCounters<Item>> countersPerNode = getNodes()\n+                .stream()\n+                .map(AnalyticsStatsAction.NodeResponse::getStats)\n+                .collect(Collectors.toList());\n+            return EnumCounters.merge(Item.class, countersPerNode);\n+        }\n+\n         @Override\n         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-            builder.startArray(\"stats\");\n-            for (NodeResponse node : getNodes()) {\n-                node.toXContent(builder, params);\n+            EnumCounters<Item> stats = getStats();\n+            builder.startObject(\"stats\");\n+            for (Item item : Item.values()) {\n+                builder.field(item.name().toLowerCase(Locale.ROOT) + \"_usage\", stats.get(item));\n             }\n-            builder.endArray();\n-\n+            builder.endObject();\n             return builder;\n         }\n     }\n \n-    public static class NodeResponse extends BaseNodeResponse implements ToXContentObject {\n-        static final ParseField BOXPLOT_USAGE = new ParseField(\"boxplot_usage\");\n-        static final ParseField CUMULATIVE_CARDINALITY_USAGE = new ParseField(\"cumulative_cardinality_usage\");\n-        static final ParseField STRING_STATS_USAGE = new ParseField(\"string_stats_usage\");\n-        static final ParseField TOP_METRICS_USAGE = new ParseField(\"top_metrics_usage\");\n-        static final ParseField T_TEST_USAGE = new ParseField(\"t_test_usage\");\n-\n-        private final long boxplotUsage;\n-        private final long cumulativeCardinalityUsage;\n-        private final long stringStatsUsage;\n-        private final long topMetricsUsage;\n-        private final long ttestUsage;\n-\n-        public NodeResponse(DiscoveryNode node, long boxplotUsage, long cumulativeCardinalityUsage, long stringStatsUsage,\n-                long topMetricsUsage, long ttestUsage) {\n+    public static class NodeResponse extends BaseNodeResponse {\n+        private final EnumCounters<Item> counters;\n+\n+        public NodeResponse(DiscoveryNode node, EnumCounters<Item> counters) {\n             super(node);\n-            this.boxplotUsage = boxplotUsage;\n-            this.cumulativeCardinalityUsage = cumulativeCardinalityUsage;\n-            this.stringStatsUsage = stringStatsUsage;\n-            this.topMetricsUsage = topMetricsUsage;\n-            this.ttestUsage = ttestUsage;\n+            this.counters = counters;\n         }\n \n         public NodeResponse(StreamInput in) throws IOException {\n             super(in);\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                boxplotUsage = in.readVLong();\n-            } else {\n-                boxplotUsage = 0;\n-            }\n-            cumulativeCardinalityUsage = in.readZLong();\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                stringStatsUsage = in.readVLong();\n-                topMetricsUsage = in.readVLong();\n-            } else {\n-                topMetricsUsage = 0;\n-                stringStatsUsage = 0;\n-            }\n             if (in.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                ttestUsage = in.readVLong();\n+                counters = new EnumCounters<>(in, Item.class);\n             } else {\n-                ttestUsage = 0;\n+                counters = new EnumCounters<>(Item.class);\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.BOXPLOT, in.readVLong());\n+                }\n+                counters.inc(Item.CUMULATIVE_CARDINALITY, in.readZLong());\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.STRING_STATS, in.readVLong());\n+                    counters.inc(Item.TOP_METRICS, in.readVLong());\n+                }\n             }\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(boxplotUsage);\n-            }\n-            out.writeVLong(cumulativeCardinalityUsage);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(stringStatsUsage);\n-                out.writeVLong(topMetricsUsage);\n-            }\n             if (out.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                out.writeVLong(ttestUsage);\n+                counters.writeTo(out);\n+            } else {\n+                if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    out.writeVLong(counters.get(Item.BOXPLOT));\n+                }\n+                out.writeZLong(counters.get(Item.CUMULATIVE_CARDINALITY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNjE1OA=="}, "originalCommit": {"oid": "7c081089e932eba5132fe93d7ba2aa5c64ee9702"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MzE0MA==", "bodyText": "I opened #55183. Not sure if it will make it into 7.7.0 or not.", "url": "https://github.com/elastic/elasticsearch/pull/55162#discussion_r408463140", "createdAt": "2020-04-14T22:03:36Z", "author": {"login": "imotov"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "diffHunk": "@@ -97,109 +110,84 @@ protected void writeNodesTo(StreamOutput out, List<NodeResponse> nodes) throws I\n             out.writeList(nodes);\n         }\n \n+        public EnumCounters<Item> getStats() {\n+            List<EnumCounters<Item>> countersPerNode = getNodes()\n+                .stream()\n+                .map(AnalyticsStatsAction.NodeResponse::getStats)\n+                .collect(Collectors.toList());\n+            return EnumCounters.merge(Item.class, countersPerNode);\n+        }\n+\n         @Override\n         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-            builder.startArray(\"stats\");\n-            for (NodeResponse node : getNodes()) {\n-                node.toXContent(builder, params);\n+            EnumCounters<Item> stats = getStats();\n+            builder.startObject(\"stats\");\n+            for (Item item : Item.values()) {\n+                builder.field(item.name().toLowerCase(Locale.ROOT) + \"_usage\", stats.get(item));\n             }\n-            builder.endArray();\n-\n+            builder.endObject();\n             return builder;\n         }\n     }\n \n-    public static class NodeResponse extends BaseNodeResponse implements ToXContentObject {\n-        static final ParseField BOXPLOT_USAGE = new ParseField(\"boxplot_usage\");\n-        static final ParseField CUMULATIVE_CARDINALITY_USAGE = new ParseField(\"cumulative_cardinality_usage\");\n-        static final ParseField STRING_STATS_USAGE = new ParseField(\"string_stats_usage\");\n-        static final ParseField TOP_METRICS_USAGE = new ParseField(\"top_metrics_usage\");\n-        static final ParseField T_TEST_USAGE = new ParseField(\"t_test_usage\");\n-\n-        private final long boxplotUsage;\n-        private final long cumulativeCardinalityUsage;\n-        private final long stringStatsUsage;\n-        private final long topMetricsUsage;\n-        private final long ttestUsage;\n-\n-        public NodeResponse(DiscoveryNode node, long boxplotUsage, long cumulativeCardinalityUsage, long stringStatsUsage,\n-                long topMetricsUsage, long ttestUsage) {\n+    public static class NodeResponse extends BaseNodeResponse {\n+        private final EnumCounters<Item> counters;\n+\n+        public NodeResponse(DiscoveryNode node, EnumCounters<Item> counters) {\n             super(node);\n-            this.boxplotUsage = boxplotUsage;\n-            this.cumulativeCardinalityUsage = cumulativeCardinalityUsage;\n-            this.stringStatsUsage = stringStatsUsage;\n-            this.topMetricsUsage = topMetricsUsage;\n-            this.ttestUsage = ttestUsage;\n+            this.counters = counters;\n         }\n \n         public NodeResponse(StreamInput in) throws IOException {\n             super(in);\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                boxplotUsage = in.readVLong();\n-            } else {\n-                boxplotUsage = 0;\n-            }\n-            cumulativeCardinalityUsage = in.readZLong();\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                stringStatsUsage = in.readVLong();\n-                topMetricsUsage = in.readVLong();\n-            } else {\n-                topMetricsUsage = 0;\n-                stringStatsUsage = 0;\n-            }\n             if (in.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                ttestUsage = in.readVLong();\n+                counters = new EnumCounters<>(in, Item.class);\n             } else {\n-                ttestUsage = 0;\n+                counters = new EnumCounters<>(Item.class);\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.BOXPLOT, in.readVLong());\n+                }\n+                counters.inc(Item.CUMULATIVE_CARDINALITY, in.readZLong());\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.STRING_STATS, in.readVLong());\n+                    counters.inc(Item.TOP_METRICS, in.readVLong());\n+                }\n             }\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(boxplotUsage);\n-            }\n-            out.writeVLong(cumulativeCardinalityUsage);\n-            if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                out.writeVLong(stringStatsUsage);\n-                out.writeVLong(topMetricsUsage);\n-            }\n             if (out.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                out.writeVLong(ttestUsage);\n+                counters.writeTo(out);\n+            } else {\n+                if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    out.writeVLong(counters.get(Item.BOXPLOT));\n+                }\n+                out.writeZLong(counters.get(Item.CUMULATIVE_CARDINALITY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNjE1OA=="}, "originalCommit": {"oid": "7c081089e932eba5132fe93d7ba2aa5c64ee9702"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1154, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}