{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDg5MTQ2", "number": 59342, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToxNDo0N1rOENJEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoyNzo1M1rOEOE1yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE1NTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToxNDo0N1rOGvqGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTowMjo1NVrOGwCmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNTk2MQ==", "bodyText": "The existing expression of licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_DLS_FLS) has a potential racing issue between the two license checks. I noticed we have been somewhat inconsistent in handling this. In some places, e.g. ResizeRequestInterceptor, we use licenseState.copyCurrentLicenseState() to ensure checks are always done against the same license. In other places including this one, no special handling is done. The new changes also retain this behaviour. My question is: what is our recommend approach for this subtle issue? I am OK with either approach as long as it is consistently applied.\nI am also curious about the benefit of the new MemoizedSupplier. Why do we need to check the license deeper in the loop? Isn't it sufficient and more efficient to check in the outermost if statement?", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r452625961", "createdAt": "2020-07-10T05:14:47Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "diffHunk": "@@ -41,7 +42,8 @@ public BulkShardRequestInterceptor(ThreadPool threadPool, XPackLicenseState lice\n     @Override\n     public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine, AuthorizationInfo authorizationInfo,\n                           ActionListener<Void> listener) {\n-        boolean shouldIntercept = licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_DLS_FLS);\n+        boolean shouldIntercept = licenseState.isSecurityEnabled();\n+        var licenseChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcbfb2fc3f5e52563bccf3865d04b643cf28f7d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNzQzNA==", "bodyText": "what is our recommend approach for this subtle issue?\n\nIt is true there is a race condition, but in practice I don't think we need to worry about it. This is an extreme edge case, where the license changes mid request. AFAIU, the copy method was added to handle the race condition in tests, not for any problem found by users. That said, the long term solution to this is to change all of our checks to use a stashed copy in the ThreadContext that would be inserted when the request is first received. That idea is described in #53909.\n\nI am also curious about the benefit of the new MemoizedSupplier. Why do we need to check the license deeper in the loop?\n\nWe don't know if DLS/FLS is actually used until we resolve the each indices' access controls inside the loop. Thus we need to check when resolving each index. It is true this is similar to the problem described above, and could be partially solved by copying the license state. However, it also means needlessly updating the last used time in quick succession. I could go either way, but thought reducing those updates was worthwhile given the simpleness of implementing the MemoizedSupplier.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r453027434", "createdAt": "2020-07-10T19:02:55Z", "author": {"login": "rjernst"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "diffHunk": "@@ -41,7 +42,8 @@ public BulkShardRequestInterceptor(ThreadPool threadPool, XPackLicenseState lice\n     @Override\n     public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine, AuthorizationInfo authorizationInfo,\n                           ActionListener<Void> listener) {\n-        boolean shouldIntercept = licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_DLS_FLS);\n+        boolean shouldIntercept = licenseState.isSecurityEnabled();\n+        var licenseChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNTk2MQ=="}, "originalCommit": {"oid": "5bcbfb2fc3f5e52563bccf3865d04b643cf28f7d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE2Njc0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMToyMVrOGvqMbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMToyMVrOGvqMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzU2Ng==", "bodyText": "Ah I see, the license checking is moved here because we need to accurately tracking the usage, i.e. only check it when it is absolutely necessary. In this case, I wonder whether we should check it after the instanceof, i.e. bulkItemRequest.request() instanceof UpdateRequest && licenseChecker.get().", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r452627566", "createdAt": "2020-07-10T05:21:21Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "diffHunk": "@@ -54,7 +56,7 @@ public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine,\n                     boolean fls = indexAccessControl.getFieldPermissions().hasFieldLevelSecurity();\n                     boolean dls = indexAccessControl.getDocumentPermissions().hasDocumentLevelPermissions();\n                     if (fls || dls) {\n-                        if (bulkItemRequest.request() instanceof UpdateRequest) {\n+                        if (licenseChecker.get() && bulkItemRequest.request() instanceof UpdateRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcbfb2fc3f5e52563bccf3865d04b643cf28f7d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE3NDAyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/TransportGetFeatureUsageAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyNTo0OVrOGvqQpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTozODowOVrOGxAxww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODY0Nw==", "bodyText": "IIUC, the feature usage is reported for the local node only? So in cloud with coordinating node setup, how can user get the feature usages for nodes other than the coordinating ones?", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r452628647", "createdAt": "2020-07-10T05:25:49Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/TransportGetFeatureUsageAction.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.license;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class TransportGetFeatureUsageAction extends HandledTransportAction<GetFeatureUsageRequest, GetFeatureUsageResponse> {\n+\n+    public static final ActionType<GetFeatureUsageResponse> TYPE =\n+        new ActionType<>(\"cluster:admin/xpack/license/feature_usage\", GetFeatureUsageResponse::new);\n+\n+    private final XPackLicenseState licenseState;\n+\n+    @Inject\n+    public TransportGetFeatureUsageAction(TransportService transportService, ActionFilters actionFilters,\n+                                          XPackLicenseState licenseState) {\n+        super(TYPE.name(), transportService, actionFilters, GetFeatureUsageRequest::new);\n+        this.licenseState = licenseState;\n+    }\n+\n+\n+    @Override\n+    protected void doExecute(Task task, GetFeatureUsageRequest request, ActionListener<GetFeatureUsageResponse> listener) {\n+        Map<XPackLicenseState.Feature, Long> featureUsage = licenseState.getLastUsed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcbfb2fc3f5e52563bccf3865d04b643cf28f7d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyODU3MA==", "bodyText": "Cloud will need to hit every node in the cluster, not just coordinating nodes. AFAIU they can do this (this would be on their backend infrastructure side, and so would not be going through eg load balancers). It would be similar to eg health checks that hit each node.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r453028570", "createdAt": "2020-07-10T19:05:26Z", "author": {"login": "rjernst"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/TransportGetFeatureUsageAction.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.license;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class TransportGetFeatureUsageAction extends HandledTransportAction<GetFeatureUsageRequest, GetFeatureUsageResponse> {\n+\n+    public static final ActionType<GetFeatureUsageResponse> TYPE =\n+        new ActionType<>(\"cluster:admin/xpack/license/feature_usage\", GetFeatureUsageResponse::new);\n+\n+    private final XPackLicenseState licenseState;\n+\n+    @Inject\n+    public TransportGetFeatureUsageAction(TransportService transportService, ActionFilters actionFilters,\n+                                          XPackLicenseState licenseState) {\n+        super(TYPE.name(), transportService, actionFilters, GetFeatureUsageRequest::new);\n+        this.licenseState = licenseState;\n+    }\n+\n+\n+    @Override\n+    protected void doExecute(Task task, GetFeatureUsageRequest request, ActionListener<GetFeatureUsageResponse> listener) {\n+        Map<XPackLicenseState.Feature, Long> featureUsage = licenseState.getLastUsed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODY0Nw=="}, "originalCommit": {"oid": "5bcbfb2fc3f5e52563bccf3865d04b643cf28f7d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NjE0Nw==", "bodyText": "Ok so this API is more geared towards Cloud internal management instead of end-users. Then it is fine.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454046147", "createdAt": "2020-07-14T01:38:09Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/TransportGetFeatureUsageAction.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.license;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class TransportGetFeatureUsageAction extends HandledTransportAction<GetFeatureUsageRequest, GetFeatureUsageResponse> {\n+\n+    public static final ActionType<GetFeatureUsageResponse> TYPE =\n+        new ActionType<>(\"cluster:admin/xpack/license/feature_usage\", GetFeatureUsageResponse::new);\n+\n+    private final XPackLicenseState licenseState;\n+\n+    @Inject\n+    public TransportGetFeatureUsageAction(TransportService transportService, ActionFilters actionFilters,\n+                                          XPackLicenseState licenseState) {\n+        super(TYPE.name(), transportService, actionFilters, GetFeatureUsageRequest::new);\n+        this.licenseState = licenseState;\n+    }\n+\n+\n+    @Override\n+    protected void doExecute(Task task, GetFeatureUsageRequest request, ActionListener<GetFeatureUsageResponse> listener) {\n+        Map<XPackLicenseState.Feature, Long> featureUsage = licenseState.getLastUsed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODY0Nw=="}, "originalCommit": {"oid": "5bcbfb2fc3f5e52563bccf3865d04b643cf28f7d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTg5ODA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjowMTowNVrOGxBLew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjo0NDoyM1rOGxcKcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MjczMQ==", "bodyText": "This worries me a bit since a copy can now mutate the original object. It is not an issue for the time being since no such usage exists. But might be a confusing behaviour in future?", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454052731", "createdAt": "2020-07-14T02:01:05Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -564,7 +607,7 @@ public static boolean isAllowedByOperationMode(\n      */\n     public XPackLicenseState copyCurrentLicenseState() {\n         return executeAgainstStatus(status ->\n-            new XPackLicenseState(listeners, isSecurityEnabled, isSecurityExplicitlyEnabled, status));\n+            new XPackLicenseState(listeners, isSecurityEnabled, isSecurityExplicitlyEnabled, status, lastUsed, epochMillisProvider));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95a4ea679c38db714143c23915c95faddc82f30"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NDgzMg==", "bodyText": "That's exactly the intention. The copy is meant for read purposes, but mutation purposes must be unified, otherwise we would would not be able to check what checks have been done across copies.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454494832", "createdAt": "2020-07-14T16:44:23Z", "author": {"login": "rjernst"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -564,7 +607,7 @@ public static boolean isAllowedByOperationMode(\n      */\n     public XPackLicenseState copyCurrentLicenseState() {\n         return executeAgainstStatus(status ->\n-            new XPackLicenseState(listeners, isSecurityEnabled, isSecurityExplicitlyEnabled, status));\n+            new XPackLicenseState(listeners, isSecurityEnabled, isSecurityExplicitlyEnabled, status, lastUsed, epochMillisProvider));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1MjczMQ=="}, "originalCommit": {"oid": "d95a4ea679c38db714143c23915c95faddc82f30"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTkxOTkxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMzoxMFrOGxBYhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMzoxMFrOGxBYhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NjA2OA==", "bodyText": "We are using both frozenLicenseState here and the original licenseState with MemoizedSupplier below. Given the current change, there is no benefit of having frozenLicenseState anymore. It can probably just be removed.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454056068", "createdAt": "2020-07-14T02:13:10Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java", "diffHunk": "@@ -52,23 +53,22 @@ public void intercept(RequestInfo requestInfo, AuthorizationEngine authorization\n             final XPackLicenseState frozenLicenseState = licenseState.copyCurrentLicenseState();\n             final AuditTrail auditTrail = auditTrailService.get();\n             if (frozenLicenseState.isSecurityEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95a4ea679c38db714143c23915c95faddc82f30"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTkyMDcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMzo0M1rOGxBZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoxMzo0M1rOGxBZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NjIwNA==", "bodyText": "Same here for using frozenLicenseState and licenseState together.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454056204", "createdAt": "2020-07-14T02:13:43Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java", "diffHunk": "@@ -48,19 +49,18 @@ public void intercept(RequestInfo requestInfo, AuthorizationEngine authorization\n             final XPackLicenseState frozenLicenseState = licenseState.copyCurrentLicenseState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95a4ea679c38db714143c23915c95faddc82f30"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTk0ODI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoyNzo1M1rOGxBpEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzowNDo0N1rOGxc9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MDMwNA==", "bodyText": "This method does not seem to be used anywhere? But the inner class VotingOnlyNodeFeatureSet#UsageInfoAction also has a availabe() method which internally uses licenseState.checkFeature. But all other XPackInfoFeatureTransportAction uses licenseState.isAllowed. Is this inconsistency intended?", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454060304", "createdAt": "2020-07-14T02:27:53Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java", "diffHunk": "@@ -43,7 +43,7 @@ public String name() {\n \n     @Override\n     public boolean available() {\n-        return licenseState != null && licenseState.isAllowed(Feature.VOTING_ONLY);\n+        return licenseState != null && licenseState.checkFeature(Feature.VOTING_ONLY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95a4ea679c38db714143c23915c95faddc82f30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNzg0NA==", "bodyText": "I've fixed the checkFeature usage, it was incorrect. I'll address the unused class in a followup.", "url": "https://github.com/elastic/elasticsearch/pull/59342#discussion_r454507844", "createdAt": "2020-07-14T17:04:47Z", "author": {"login": "rjernst"}, "path": "x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java", "diffHunk": "@@ -43,7 +43,7 @@ public String name() {\n \n     @Override\n     public boolean available() {\n-        return licenseState != null && licenseState.isAllowed(Feature.VOTING_ONLY);\n+        return licenseState != null && licenseState.checkFeature(Feature.VOTING_ONLY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2MDMwNA=="}, "originalCommit": {"oid": "d95a4ea679c38db714143c23915c95faddc82f30"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1954, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}