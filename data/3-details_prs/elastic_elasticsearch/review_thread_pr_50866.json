{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTYyNTEy", "number": 50866, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTowODo1OVrODXxnqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoxNTo0NVrODX56gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjU2ODA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTowODo1OVrOFdQV8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTozNDo1MVrOFdRFMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDc4NQ==", "bodyText": "Is !/ intended as a visual marker in the path? The location is later only used for the message in the Exception, so I guess so, but curious about it.", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366220785", "createdAt": "2020-01-14T09:08:59Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIzMjg4Mg==", "bodyText": "No, it's a special marker inside the URL to indicate the path inside the archive:\njar:/my/file.jar!/org/my/package/clazz.class", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366232882", "createdAt": "2020-01-14T09:34:51Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDc4NQ=="}, "originalCommit": {"oid": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjU2ODQwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTowOTowNlrOFdQWHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTozNjo0MVrOFdRIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDgzMQ==", "bodyText": "Maybe attemptClassLoad()?", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366220831", "createdAt": "2020-01-14T09:09:06Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);\n                         }\n                     }\n-                    return FileVisitResult.CONTINUE;\n                 }\n-            });\n+            }\n+            // for folders, just use the FileSystems API\n+            else {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n+                            String fileName = file.toString();\n+                            // Chop off the root and file extension\n+                            String className = fileName.substring(rootLength, fileName.length() - \".class\".length());\n+                            // Go from \"path\" style to class style\n+                            className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n+                            maybeLoadClass(clazz, className, fileName, results);\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+            }\n         }\n         subclassCache.put(clazz, results);\n         return results;\n     }\n \n+    @SuppressForbidden(reason = \"test reads from jar\")\n+    private static JarInputStream jarStream(Path path) throws IOException {\n+        return new JarInputStream(path.toUri().toURL().openStream());\n+    }\n+\n+    /**\n+     * Load classes from predefined packages (hack to limit the scope) and if they match the hierarchy, add them to the cache\n+     */\n+    private static <T> void maybeLoadClass(Class<T> clazz, String className, String location, List<Class<? extends T>> results)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIzMzczNw==", "bodyText": "Depending on the name, the class might be loaded or not hence the 'maybe' versus attempt which suggests the loading will happen always (but it might fail).", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366233737", "createdAt": "2020-01-14T09:36:41Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);\n                         }\n                     }\n-                    return FileVisitResult.CONTINUE;\n                 }\n-            });\n+            }\n+            // for folders, just use the FileSystems API\n+            else {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n+                            String fileName = file.toString();\n+                            // Chop off the root and file extension\n+                            String className = fileName.substring(rootLength, fileName.length() - \".class\".length());\n+                            // Go from \"path\" style to class style\n+                            className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n+                            maybeLoadClass(clazz, className, fileName, results);\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+            }\n         }\n         subclassCache.put(clazz, results);\n         return results;\n     }\n \n+    @SuppressForbidden(reason = \"test reads from jar\")\n+    private static JarInputStream jarStream(Path path) throws IOException {\n+        return new JarInputStream(path.toUri().toURL().openStream());\n+    }\n+\n+    /**\n+     * Load classes from predefined packages (hack to limit the scope) and if they match the hierarchy, add them to the cache\n+     */\n+    private static <T> void maybeLoadClass(Class<T> clazz, String className, String location, List<Class<? extends T>> results)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDgzMQ=="}, "originalCommit": {"oid": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzkyNzA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoxNTo0NVrOFddRDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoxNTo0NVrOFddRDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMjUyNg==", "bodyText": "Shouldn't the results be a Set instead of List?", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366432526", "createdAt": "2020-01-14T16:15:45Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);\n                         }\n                     }\n-                    return FileVisitResult.CONTINUE;\n                 }\n-            });\n+            }\n+            // for folders, just use the FileSystems API\n+            else {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n+                            String fileName = file.toString();\n+                            // Chop off the root and file extension\n+                            String className = fileName.substring(rootLength, fileName.length() - \".class\".length());\n+                            // Go from \"path\" style to class style\n+                            className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n+                            maybeLoadClass(clazz, className, fileName, results);\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+            }\n         }\n         subclassCache.put(clazz, results);\n         return results;\n     }\n \n+    @SuppressForbidden(reason = \"test reads from jar\")\n+    private static JarInputStream jarStream(Path path) throws IOException {\n+        return new JarInputStream(path.toUri().toURL().openStream());\n+    }\n+\n+    /**\n+     * Load classes from predefined packages (hack to limit the scope) and if they match the hierarchy, add them to the cache\n+     */\n+    private static <T> void maybeLoadClass(Class<T> clazz, String className, String location, List<Class<? extends T>> results)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4839, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}