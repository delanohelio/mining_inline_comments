{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDI3NDg5", "number": 62985, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0OTozOFrOEoj09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTozNDoxOVrOEpFpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTY1NDkzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0OTozOFrOHZuK8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0OTozOFrOHZuK8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMjkxNQ==", "bodyText": "This is needed so that you can run compat tests for a project that may no longer have YAML REST tests in master. Also, there may be cases where a module is completely deleted in master, but we will still want to use this plugin to only test compatibility.\nThis basically ensures that the execution of \"compat\" YAML tests is not directly coupled to the existence of \"normal\" YAML rest tests.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r496732915", "createdAt": "2020-09-29T13:49:38Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -58,8 +58,10 @@\n     final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n     final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n     String sourceSetName;\n+    boolean skipHasRestTestCheck;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTY2MzU2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1MToyMVrOHZuQYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1MToyMVrOHZuQYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczNDMwNw==", "bodyText": "This is needed as a way to copy the 7.x module/plugin tests to the source set. For \"normal\" YAML tests they are already in the source set (since they are part of the current source code).", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r496734307", "createdAt": "2020-09-29T13:51:21Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -58,8 +58,10 @@\n     final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n     final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n     String sourceSetName;\n+    boolean skipHasRestTestCheck;\n     Configuration coreConfig;\n     Configuration xpackConfig;\n+    Configuration additionalConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA5NjA5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0NTo0NVrOHZ8E5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo1OToxMlrOHavGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ==", "bodyText": "Why are we peeking at the source? Instead can we produce the files as an artifact? This would allow us to test against already released versions in the same way, just grab the zip of the spec/test files of that released version.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r496960741", "createdAt": "2020-09-29T18:45:45Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5MDM0Ng==", "bodyText": "The artifacts we produce only contain the OSS core api and tests. I need the x-pack core api/tests as well as all of the OSS/X-pack module/plugin API/tests. Back filling those I think is a reasonable approach as a long term solution, but I think sourcing like this is decent temporary approach.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497090346", "createdAt": "2020-09-29T22:11:17Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NDEzMA==", "bodyText": "I tend to agree with @rjernst that peeking into other source folders is kind of an anti pattern. Instead sharing it declaratively as described here: https://docs.gradle.org/current/userguide/cross_project_publications.html is what we should aim for.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497594130", "createdAt": "2020-09-30T15:17:24Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMjI2Mw==", "bodyText": "Ideally I think the bwc project would just share the checkoutDir as an artifact. Can you put a TODO in there to look into this after #62473 I will then pick that up at one. point. This PR does quite some rework on the bwc setup", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497602263", "createdAt": "2020-09-30T15:28:13Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5NjgwMA==", "bodyText": "Thanks, exposing the checkoutDir as an artifact, I think will clean this up. I added a TODO in the code to come back to this.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497796800", "createdAt": "2020-09-30T20:59:12Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDc0MQ=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTE1Njg0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToyNTo0MVrOHajHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo1NzozMVrOHavDbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMDMzMA==", "bodyText": "We'd like to get away from using the project property within task actions. I'm currently working on #62968 Instead using project.copy{} we should inject a FileSystemOperations service and use that one for these kind of operations. See for example the LoggedExec task how this service is injected: https://github.com/elastic/elasticsearch/pull/62968/files#diff-babd4b74d83a9cea8bf0823cf6b71b66", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497600330", "createdAt": "2020-09-30T15:25:41Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -132,7 +142,7 @@ void copy() {\n         if (BuildParams.isInternal()) {\n             getLogger().debug(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n             project.copy(c -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5NTk0OQ==", "bodyText": "I added some TODO's for the new project.copy's to ensure it uses the newer style once that PR lands. I didn't make the change now to avoid avoid copy/paste code from your PR (which could merge clash). If this PR beats yours then feel free to add it to your, else I will circle back to this.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497795949", "createdAt": "2020-09-30T20:57:31Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -132,7 +142,7 @@ void copy() {\n         if (BuildParams.isInternal()) {\n             getLogger().debug(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n             project.copy(c -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMDMzMA=="}, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTE1ODA3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToyNTo1NFrOHajIBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToyNTo1NFrOHajIBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMDUxOQ==", "bodyText": "same as above", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497600519", "createdAt": "2020-09-30T15:25:54Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -164,6 +174,13 @@ void copy() {\n                 c.include(xpackPatternSet.getIncludes());\n             });\n         }\n+        // copy any additional config\n+        if (additionalConfig != null) {\n+            project.copy(c -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTE5NTA5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTozNDoxOVrOHajfoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTozNDoxOVrOHajfoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwNjU2MA==", "bodyText": "same here. We should not rely on file dependencies and provide these dependencies as artifacts of the bwc project.", "url": "https://github.com/elastic/elasticsearch/pull/62985#discussion_r497606560", "createdAt": "2020-09-30T15:34:19Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestCompatTestPlugin.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.test.RestTestBasePlugin;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.testclusters.TestDistribution;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.createTestCluster;\n+import static org.elasticsearch.gradle.test.rest.RestTestUtil.setupDependencies;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests from a prior major version against this version's cluster.\n+ */\n+public class YamlRestCompatTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestCompatTest\";\n+    private static final Path RELATIVE_API_PATH = Path.of(\"rest-api-spec/api\");\n+    private static final Path RELATIVE_TEST_PATH = Path.of(\"rest-api-spec/test\");\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+        project.getPluginManager().apply(YamlRestTestPlugin.class);\n+\n+        RestResourcesExtension extension = project.getExtensions().getByType(RestResourcesExtension.class);\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlCompatTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+        SourceSet yamlTestSourceSet = sourceSets.getByName(YamlRestTestPlugin.SOURCE_SET_NAME);\n+        GradleUtils.extendSourceSet(project, YamlRestTestPlugin.SOURCE_SET_NAME, SOURCE_SET_NAME);\n+\n+        // create the test cluster container, and always use the default distribution\n+        ElasticsearchCluster testCluster = createTestCluster(project, yamlCompatTestSourceSet);\n+        testCluster.setTestDistribution(TestDistribution.DEFAULT);\n+\n+        // TODO: this is pretty fragile but the existing logic to checkout prior version branches isn't general purpose\n+        // eventually we will want to test against multiple minor versions and will need a better way to checkout an arbitrary prior branch\n+        // however, for now we will just get a reference to the checkout directory for \":distribution:bwc:minor:checkoutBwcBranch\"\n+        int priorMajorVersion = VersionProperties.getElasticsearchVersion().getMajor() - 1;\n+        final Path checkoutDir = project.findProject(\":distribution:bwc:minor\")\n+            .getBuildDir()\n+            .toPath()\n+            .resolve(\"bwc\")\n+            .resolve(\"checkout-\" + priorMajorVersion + \".x\");\n+\n+        // copy compatible rest specs\n+        Configuration compatSpec = project.getConfigurations().create(\"compatSpec\");\n+        Configuration xpackCompatSpec = project.getConfigurations().create(\"xpackCompatSpec\");\n+        Configuration additionalCompatSpec = project.getConfigurations().create(\"additionalCompatSpec\");\n+        Provider<CopyRestApiTask> copyCompatYamlSpecTask = project.getTasks()\n+            .register(\"copyRestApiCompatSpecsTask\", CopyRestApiTask.class, task -> {\n+                task.includeCore.set(extension.restApi.getIncludeCore());\n+                task.includeXpack.set(extension.restApi.getIncludeXpack());\n+                task.sourceSetName = SOURCE_SET_NAME;\n+                task.skipHasRestTestCheck = true;\n+                task.coreConfig = compatSpec;\n+                project.getDependencies()\n+                    .add(\n+                        task.coreConfig.getName(),\n+                        project.files(checkoutDir.resolve(\"rest-api-spec/src/main/resources\").resolve(RELATIVE_API_PATH))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b05ce5150374b40ea2615db6915e543992eabd"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3254, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}