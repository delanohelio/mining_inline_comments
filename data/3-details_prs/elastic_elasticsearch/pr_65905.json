{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODI4NDE0", "number": 65905, "title": "Autodetermine heap settings based on node roles and total system memory", "bodyText": "This commit expands our JVM egonomics to also automatically determine\nappropriate heap size based on the total available system memory as well\nas the roles assigned to the node. Role determination is done via a\nnaive parsing of elasticsearch.yml. No settings validation is done and\nonly the 'node.roles' setting is taken into consideration.\nFor heap purposes a node falls into one of four (4) categories:\n\nA 'master-only' node. This is a node with only the 'master' role.\nA 'ml-only' node. Similarly, a node with only the 'ml' role.\nA 'data' node. This is basically the 'other' case. A node with any\nset of roles other than only master or only ml is considered a 'data'\nnode, to include things like coordinating-only or \"tie-breaker\" nodes.\nUnknown. This is the case if legacy settings are used. In this\nscenario we fallback to the old default heap options of 1GB.\n\nIn all cases we short-circuit if a user provides explicit heap options\nso we only ever auto-determine heap if no existing heap options exist.\nStarting with this commit the default heap settings (1GB) are now\nremoved from the default jvm.options which means we'll start auto-\nsetting heap as the new default.", "createdAt": "2020-12-04T22:38:10Z", "url": "https://github.com/elastic/elasticsearch/pull/65905", "merged": true, "mergeCommit": {"oid": "a393db9a9a549baf8abd0f74d17bf0248a7fe34b"}, "closed": true, "closedAt": "2020-12-16T07:10:50Z", "author": {"login": "mark-vieira"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi_nJHAH2gAyNTMyODI4NDE0OjAwOTg2MzJkY2ExNjVhNTgzZTBiNDZmMGViYTM4Yzk5ZDBjNjQ4YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmo2wTAH2gAyNTMyODI4NDE0OjliMWNmNzdkNmQ3NmMzMDdkNGY5NWNmNGNhZDY5OTZmOTYzNDIwNGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/0098632dca165a583e0b46f0eba38c99d0c648aa", "committedDate": "2020-12-04T22:37:26Z", "message": "Autodetermine heap settings based on node roles and total system memory\n\nThis commit expands our JVM egonomics to also automatically determine\nappropriate heap size based on the total available system memory as well\nas the roles assigned to the node. Role determination is done via a\nnaive parsing of elasticsearch.yml. No settings validation is done and\nonly the 'node.roles' setting is taken into consideration.\n\nFor heap purposes a node falls into one of four (4) categories:\n\n1. A 'master-only' node. This is a node with only the 'master' role.\n2. A 'ml-only' node. Similarly, a node with only the 'ml' role.\n3. A 'data' node. This is basically the 'other' case. A node with any\nset of roles other than only master or only ml is considered a 'data'\nnode, to include things like coordinating-only or \"tie-breaker\" nodes.\n4. Unknown. This is the case if legacy settings are used. In this\nscenario we fallback to the old default heap options of 1GB.\n\nIn all cases we short-circuit if a user provides explicit heap options\nso we only ever auto-determine heap if no existing heap options exist.\nStarting with this commit the default heap settings (1GB) are now\nremoved from the default jvm.options which means we'll start auto-\nsetting heap as the new default."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzQ2MzA3", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-545346307", "createdAt": "2020-12-04T22:42:38Z", "commit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo0MjozOFrOH_k6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo0MjozOFrOH_k6KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNzA0OQ==", "bodyText": "Still need to think about how to change this. Should we remove this section entirely? Continue to include it also recommend folks stick with auto-determined heap size?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r536427049", "createdAt": "2020-12-04T22:42:38Z", "author": {"login": "mark-vieira"}, "path": "distribution/src/config/jvm.options", "diffHunk": "@@ -36,8 +36,8 @@\n # Xms represents the initial size of the JVM heap\n # Xmx represents the maximum size of the JVM heap\n \n--Xms${heap.min}\n--Xmx${heap.max}\n+# -Xms${heap.min}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0098632dca165a583e0b46f0eba38c99d0c648aa"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "045ddea34d0e032772e1aedc8afd8fa045c7360c", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/045ddea34d0e032772e1aedc8afd8fa045c7360c", "committedDate": "2020-12-04T22:55:28Z", "message": "Fix spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57b8a9b470b376d6f8fdde98a465c3950764713", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/c57b8a9b470b376d6f8fdde98a465c3950764713", "committedDate": "2020-12-05T00:18:46Z", "message": "Fix existing packaging tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372d7e833c04d53c9380bd7ab308d2dac806e6b2", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/372d7e833c04d53c9380bd7ab308d2dac806e6b2", "committedDate": "2020-12-05T01:06:58Z", "message": "More packaging test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c49f4864fb83b0b90dafe0b0b83a9ed9d5f86c5", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c49f4864fb83b0b90dafe0b0b83a9ed9d5f86c5", "committedDate": "2020-12-05T01:40:57Z", "message": "More fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe45b7e4a09d17ea5038a46b05189b58bc2ff97", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/afe45b7e4a09d17ea5038a46b05189b58bc2ff97", "committedDate": "2020-12-05T02:58:26Z", "message": "Set heap size when starting windows service in packaging tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NDE0NTY0", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-545414564", "createdAt": "2020-12-05T05:58:42Z", "commit": {"oid": "afe45b7e4a09d17ea5038a46b05189b58bc2ff97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNTo1ODo0MlrOH_qvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNTo1ODo0MlrOH_qvKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyMjUzOA==", "bodyText": "The intention here was to then specifically add a docker packaging test which leverages this to set the container memory limit and assert that the auto configured heap is as we'd expect.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r536522538", "createdAt": "2020-12-05T05:58:42Z", "author": {"login": "mark-vieira"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/util/DockerRun.java", "diffHunk": "@@ -75,6 +76,13 @@ public DockerRun uid(Integer uid, Integer gid) {\n         return this;\n     }\n \n+    public DockerRun memory(String memoryLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe45b7e4a09d17ea5038a46b05189b58bc2ff97"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/bf25202cf78c5b360fc7e2d1cff286a62b44b56f", "committedDate": "2020-12-05T06:23:57Z", "message": "Add some better exception handling for poorly formatted config files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDgwNTM5", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546080539", "createdAt": "2020-12-07T11:58:05Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo1ODowNlrOIAjX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo1ODowNlrOIAjX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1MDQ1Mw==", "bodyText": "Javadoc comments on the test cases help to ensure that the implementation of test matches its intent.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537450453", "createdAt": "2020-12-07T11:58:06Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/MachineDependentHeapTests.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.junit.Assert.assertThat;\n+\n+public class MachineDependentHeapTests extends LaunchersTestCase {\n+\n+    public void testDetermineHeapSize() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDg0NTc4", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546084578", "createdAt": "2020-12-07T12:03:39Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowMzozOVrOIAjlRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowMzozOVrOIAjlRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1Mzg5NQ==", "bodyText": "My preference is to use assertThat pretty much everywhere these days. Not saying you should change it, but I find the messages it generates to be more readable.", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537453895", "createdAt": "2020-12-07T12:03:39Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.DATA;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.MASTER_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.ML_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.UNKNOWN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.fail;\n+\n+public class NodeRoleParserTests extends LaunchersTestCase {\n+\n+    public void testMasterOnlyNode() {\n+        MachineDependentHeap.MachineNodeRole nodeRole = parseConfig(sb -> sb.append(\"node.roles: [master]\"));\n+        assertEquals(nodeRole, MASTER_ONLY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDg1ODE3", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546085817", "createdAt": "2020-12-07T12:05:18Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowNToxOFrOIAjpRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowNToxOFrOIAjpRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NDkxNw==", "bodyText": "Can we have tests for garbage input and invalid YAML too? I was going to suggest a JSON config, but the parser ought to parse that quite happily \ud83d\ude04", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537454917", "createdAt": "2020-12-07T12:05:18Z", "author": {"login": "pugnascotia"}, "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/NodeRoleParserTests.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.DATA;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.MASTER_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.ML_ONLY;\n+import static org.elasticsearch.tools.launchers.MachineDependentHeap.MachineNodeRole.UNKNOWN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.fail;\n+\n+public class NodeRoleParserTests extends LaunchersTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDg3Njg2", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546087686", "createdAt": "2020-12-07T12:08:02Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowODowMlrOIAjvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjowODowMlrOIAjvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1NjU1Mw==", "bodyText": "This changes makes me uncomfortable. Is it not possible that we might happen to calculate the heap to be this size, causing the test to fail?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r537456553", "createdAt": "2020-12-07T12:08:02Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java", "diffHunk": "@@ -311,7 +311,7 @@ public void test73CustomJvmOptionsDirectoryFilesWithoutOptionsExtensionIgnored()\n             startElasticsearch();\n \n             final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n-            assertThat(nodesResponse, containsString(\"\\\"heap_init_in_bytes\\\":1073741824\"));\n+            assertThat(nodesResponse, not(containsString(\"\\\"heap_init_in_bytes\\\":536870912\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzI0MTYx", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546724161", "createdAt": "2020-12-08T03:47:21Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0NzoyMVrOIBFrAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0NzoyMVrOIBFrAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjQxOQ==", "bodyText": "I don't think check is sufficient. A user can also set -XX:MaxHeapSize and -XX:MinHeapSize for which -Xmx and -Xms are synonyms.\nNote that in JvmErgonomics#choose we start up a second JVM and extract whether or not a setting was passed in on the command line. We might want to reuse that here and then check if MinHeapSize or MaxHeapSize are passed on the command line. This might be more reliable?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538012419", "createdAt": "2020-12-08T03:47:21Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzI0NjU5", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546724659", "createdAt": "2020-12-08T03:48:51Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0ODo1MlrOIBFs1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0ODo1MlrOIBFs1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjg4NA==", "bodyText": "I wonder if this should contain the full path? Or if we should return UNKNOWN and let startup fail us here too?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538012884", "createdAt": "2020-12-08T03:48:52Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzI0OTI1", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546724925", "createdAt": "2020-12-08T03:49:44Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0OTo0NVrOIBFt6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0OTo0NVrOIBFt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzE2Mw==", "bodyText": "Return UNKNOWN and let Elasticsearch handle it?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538013163", "createdAt": "2020-12-08T03:49:45Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzI1MTc0", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546725174", "createdAt": "2020-12-08T03:50:40Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo1MDo0MFrOIBFu7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo1MDo0MFrOIBFu7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMzQyMg==", "bodyText": "Why is voting only included here? And what about transform nodes? Can we check with the ML team how those should be handled?", "url": "https://github.com/elastic/elasticsearch/pull/65905#discussion_r538013422", "createdAt": "2020-12-08T03:50:40Z", "author": {"login": "jasontedor"}, "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/MachineDependentHeap.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.tools.launchers;\n+\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+/**\n+ * Determines optimal default heap settings based on available system memory and assigned node roles.\n+ */\n+public final class MachineDependentHeap {\n+    private static final long GB = 1024L * 1024L * 1024L; // 1GB\n+    private static final long MAX_HEAP_SIZE = GB * 31; // 31GB\n+    private static final long MAX_ML_HEAP_SIZE = GB * 2; // 2GB\n+    private static final long MIN_HEAP_SIZE = 1024 * 1024 * 128; // 128MB\n+    private static final int DEFAULT_HEAP_SIZE_MB = 1024;\n+    private static final String ELASTICSEARCH_YML = \"elasticsearch.yml\";\n+\n+    private final SystemMemoryInfo systemMemoryInfo;\n+\n+    public MachineDependentHeap(SystemMemoryInfo systemMemoryInfo) {\n+        this.systemMemoryInfo = systemMemoryInfo;\n+    }\n+\n+    /**\n+     * Calculate heap options.\n+     *\n+     * @param configDir path to config directory\n+     * @param userDefinedJvmOptions JVM arguments provided by the user\n+     * @return final heap options, or an empty collection if user provided heap options are to be used\n+     * @throws IOException if unable to load elasticsearch.yml\n+     */\n+    public List<String> determineHeapSettings(Path configDir, List<String> userDefinedJvmOptions) throws IOException {\n+        if (userDefinedJvmOptions.stream().anyMatch(s -> s.startsWith(\"-Xms\") || s.startsWith(\"-Xmx\"))) {\n+            // User has explicitly set memory settings so we use those\n+            return Collections.emptyList();\n+        }\n+\n+        Path config = configDir.resolve(ELASTICSEARCH_YML);\n+        try (InputStream in = Files.newInputStream(config)) {\n+            return determineHeapSettings(in);\n+        }\n+    }\n+\n+    List<String> determineHeapSettings(InputStream config) {\n+        MachineNodeRole nodeRole = NodeRoleParser.parse(config);\n+\n+        try {\n+            long availableSystemMemory = systemMemoryInfo.availableSystemMemory();\n+            return options(nodeRole.heap(availableSystemMemory));\n+        } catch (SystemMemoryInfo.SystemMemoryInfoException e) {\n+            // If unable to determine system memory (ex: incompatible jdk version) fallback to defaults\n+            return options(DEFAULT_HEAP_SIZE_MB);\n+        }\n+    }\n+\n+    private static List<String> options(int heapSize) {\n+        return List.of(\"-Xms\" + heapSize + \"m\", \"-Xmx\" + heapSize + \"m\");\n+    }\n+\n+    /**\n+     * Parses role information from elasticsearch.yml and determines machine node role.\n+     */\n+    static class NodeRoleParser {\n+        private static final Set<String> LEGACY_ROLE_SETTINGS = Set.of(\n+            \"node.master\",\n+            \"node.ingest\",\n+            \"node.data\",\n+            \"node.voting_only\",\n+            \"node.ml\",\n+            \"node.transform\",\n+            \"node.remote_cluster_client\"\n+        );\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public static MachineNodeRole parse(InputStream config) {\n+            Yaml yaml = new Yaml();\n+            Map<String, Object> root;\n+            try {\n+                root = yaml.load(config);\n+            } catch (ClassCastException ex) {\n+                // Strangely formatted config, so just return defaults and let startup settings validation catch the problem\n+                return MachineNodeRole.UNKNOWN;\n+            } catch (YAMLException ex) {\n+                throw new IllegalStateException(\"Unable to parse elasticsearch.yml:\", ex);\n+            }\n+\n+            if (root != null) {\n+                Map<String, Object> map = flatten(root, null);\n+\n+                if (hasLegacySettings(map.keySet())) {\n+                    // We don't attempt to auto-determine heap if legacy role settings are used\n+                    return MachineNodeRole.UNKNOWN;\n+                } else {\n+                    List<String> roles = null;\n+                    try {\n+                        if (map.containsKey(\"node.roles\")) {\n+                            roles = (List<String>) map.get(\"node.roles\");\n+                        }\n+                    } catch (ClassCastException ex) {\n+                        throw new IllegalStateException(\"Unable to parse elasticsearch.yml. Expected 'node.roles' to be a list.\");\n+                    }\n+\n+                    if (roles == null || roles.isEmpty()) {\n+                        // If roles are missing or empty (coordinating node) assume defaults and consider this a data node\n+                        return MachineNodeRole.DATA;\n+                    } else if (containsOnly(roles, \"master\", \"voting_only\")) {\n+                        return MachineNodeRole.MASTER_ONLY;\n+                    } else if (containsOnly(roles, \"ml\", \"voting_only\")) {\n+                        return MachineNodeRole.ML_ONLY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzI1ODg0", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-546725884", "createdAt": "2020-12-08T03:52:54Z", "commit": {"oid": "bf25202cf78c5b360fc7e2d1cff286a62b44b56f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba5c66318d81adc42aca83a54e82ecb066391cb", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/6ba5c66318d81adc42aca83a54e82ecb066391cb", "committedDate": "2020-12-09T00:13:49Z", "message": "restore heap defaults in jvm.options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e6966c9ebf7afe7fd6fc1bfe8bc18f73fa9427a", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/8e6966c9ebf7afe7fd6fc1bfe8bc18f73fa9427a", "committedDate": "2020-12-10T07:30:30Z", "message": "Reuse findFinalOptions from ergonomics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3726e7afb59403f23130dd7ec1cee4735f592d5", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/e3726e7afb59403f23130dd7ec1cee4735f592d5", "committedDate": "2020-12-10T07:41:03Z", "message": "cleanup role responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2efc239694714b29e57022f371723c0eff288e4c", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/2efc239694714b29e57022f371723c0eff288e4c", "committedDate": "2020-12-10T08:10:36Z", "message": "address tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5daf41c8567939999e9dc0b0ce8facb06ca36ac0", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/5daf41c8567939999e9dc0b0ce8facb06ca36ac0", "committedDate": "2020-12-10T08:30:14Z", "message": "docker test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6f432a559c40f5b99831b380fcf4a1bcd1026fe", "author": {"user": {"login": "pugnascotia", "name": "Rory Hunter"}}, "url": "https://github.com/elastic/elasticsearch/commit/c6f432a559c40f5b99831b380fcf4a1bcd1026fe", "committedDate": "2020-12-10T12:04:21Z", "message": "Fix up Docker test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44c784910cd45cecf7d54ca5800b707db84636d", "author": {"user": {"login": "pugnascotia", "name": "Rory Hunter"}}, "url": "https://github.com/elastic/elasticsearch/commit/d44c784910cd45cecf7d54ca5800b707db84636d", "committedDate": "2020-12-10T12:26:04Z", "message": "More fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c7565c7b0d2a6324bd9bcd3d35e5ff77bf84a7d", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/1c7565c7b0d2a6324bd9bcd3d35e5ff77bf84a7d", "committedDate": "2020-12-11T00:11:51Z", "message": "Merge branch 'master' into HEAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca205399baef8e825a0cc8d16a0b0f43952da6e", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/8ca205399baef8e825a0cc8d16a0b0f43952da6e", "committedDate": "2020-12-11T00:12:13Z", "message": "checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f96e4ff7b4cb08a5d76e127cce7e2ba5c60a2bb7", "author": {"user": {"login": "jtibshirani", "name": "Julie Tibshirani"}}, "url": "https://github.com/elastic/elasticsearch/commit/f96e4ff7b4cb08a5d76e127cce7e2ba5c60a2bb7", "committedDate": "2020-12-11T00:04:11Z", "message": "Adjust skip version in fvh REST tests.\n\nWe can expand the compatible versions now that the bug fix has been packported."}, "afterCommit": {"oid": "8ca205399baef8e825a0cc8d16a0b0f43952da6e", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/8ca205399baef8e825a0cc8d16a0b0f43952da6e", "committedDate": "2020-12-11T00:12:13Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d025bb2a336efbef9d12921761acb165c91368", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/f3d025bb2a336efbef9d12921761acb165c91368", "committedDate": "2020-12-11T18:47:11Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec827f0d03766376f1d394f001b300ad6b9f5919", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/ec827f0d03766376f1d394f001b300ad6b9f5919", "committedDate": "2020-12-12T19:52:18Z", "message": "null guard"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjE4MTIx", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-551618121", "createdAt": "2020-12-14T16:59:25Z", "commit": {"oid": "ec827f0d03766376f1d394f001b300ad6b9f5919"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75cb18b89e105b375dffd6e972fc31a4b76f5c34", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/75cb18b89e105b375dffd6e972fc31a4b76f5c34", "committedDate": "2020-12-14T19:04:57Z", "message": "Add fix for earlier jdks which used InitialHeap instead of MinHeap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36892b9bcef9baf189e1af4a4fcf0cc7c418eb0", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/c36892b9bcef9baf189e1af4a4fcf0cc7c418eb0", "committedDate": "2020-12-14T22:55:16Z", "message": "Merge branch 'master' into machine-dependent-heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a81a11a80cc2805b74913c0f337bc28c4c4474", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/88a81a11a80cc2805b74913c0f337bc28c4c4474", "committedDate": "2020-12-14T23:27:40Z", "message": "Remove Xmx/Xms from jvm.options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca7e564d081a87aaef734ee1557d6a9d49c5f810", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/ca7e564d081a87aaef734ee1557d6a9d49c5f810", "committedDate": "2020-12-15T20:34:27Z", "message": "Set 1g heap for packaging tests by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "755cfac1b1a6264fc5f5670f6ff865b765fe5f99", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/755cfac1b1a6264fc5f5670f6ff865b765fe5f99", "committedDate": "2020-12-15T20:43:49Z", "message": "guard for no installation yet when setting heap to 1g"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c3552e932da0d30917c079f3895af56677619ad", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/1c3552e932da0d30917c079f3895af56677619ad", "committedDate": "2020-12-15T20:54:19Z", "message": "fix format oops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODg5MTYz", "url": "https://github.com/elastic/elasticsearch/pull/65905#pullrequestreview-552889163", "createdAt": "2020-12-15T21:16:57Z", "commit": {"oid": "1c3552e932da0d30917c079f3895af56677619ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "472df8f75c1727dde1e609070b7f43200312e985", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/472df8f75c1727dde1e609070b7f43200312e985", "committedDate": "2020-12-15T21:32:21Z", "message": "tweak tests overriding heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759e76f28f8a9bb9a2b16f6d92b2b20b8f26e483", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/759e76f28f8a9bb9a2b16f6d92b2b20b8f26e483", "committedDate": "2020-12-15T22:05:32Z", "message": "Use temp config directory when appropriate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7e71eb160cb291c9161cd7d321138420bba1a0", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/7c7e71eb160cb291c9161cd7d321138420bba1a0", "committedDate": "2020-12-15T22:24:32Z", "message": "Merge branch 'master' into machine-dependent-heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f407562d4b85716e165e9ec03ef9dd5582017f7e", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/f407562d4b85716e165e9ec03ef9dd5582017f7e", "committedDate": "2020-12-15T23:10:29Z", "message": "More packaging test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c45424c412778c490c2003b557515835a1eabcb", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/8c45424c412778c490c2003b557515835a1eabcb", "committedDate": "2020-12-15T23:53:04Z", "message": "Even more packaging test fixes for platform-specific line separators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "557af6ac10194906115e51d7c367a136dfd2a1f1", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/557af6ac10194906115e51d7c367a136dfd2a1f1", "committedDate": "2020-12-16T00:06:09Z", "message": "Fix forbidden apis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47baa29d5749677223abf936b1343c2f4babae8b", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/47baa29d5749677223abf936b1343c2f4babae8b", "committedDate": "2020-12-16T00:08:28Z", "message": "Only create parent when required"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6032e8b286b56b31a2221dc59ecf053dd60782a", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/b6032e8b286b56b31a2221dc59ecf053dd60782a", "committedDate": "2020-12-16T00:32:49Z", "message": "No need to set default args since we do it in PackagingTestCase setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bce1e4f665fdb76a09542eeed842ec1aeafb9012", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/bce1e4f665fdb76a09542eeed842ec1aeafb9012", "committedDate": "2020-12-16T01:13:24Z", "message": "Fix docker packaging tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6fed4b0c9b8654deec58e3fef1419f45cd63946", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/f6fed4b0c9b8654deec58e3fef1419f45cd63946", "committedDate": "2020-12-16T01:24:37Z", "message": "Ensure we add a newline so we can safely append to this file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f7d4dbe54f488ad3d48c5d6827fe4227f86feb", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/41f7d4dbe54f488ad3d48c5d6827fe4227f86feb", "committedDate": "2020-12-16T03:44:13Z", "message": "Merge branch 'master' into machine-dependent-heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7068cd02844673e2ab8b7ce790ee3cd029c9a103", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/7068cd02844673e2ab8b7ce790ee3cd029c9a103", "committedDate": "2020-12-16T04:17:00Z", "message": "Fix packaging test when heap is overriden"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df4ba2e47887567ee1b4d6995b906cc5190cfab7", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/df4ba2e47887567ee1b4d6995b906cc5190cfab7", "committedDate": "2020-12-16T04:24:38Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a53668d694b0846ee888b694d529e6fd1a057d4", "author": {"user": {"login": "rjernst", "name": "Ryan Ernst"}}, "url": "https://github.com/elastic/elasticsearch/commit/2a53668d694b0846ee888b694d529e6fd1a057d4", "committedDate": "2020-12-16T05:30:16Z", "message": "remove heap options before removing rpm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1cf77d6d76c307d4f95cf4cad6996f9634204b", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/9b1cf77d6d76c307d4f95cf4cad6996f9634204b", "committedDate": "2020-12-16T06:22:22Z", "message": "Fix rpm tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4008, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}