{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDc4NDU5", "number": 63738, "title": "Rework parent-join to not require access to DocumentMapper", "bodyText": "Parent joins work using a cluster of field mappers: the join field itself;\na set of subfields that allow multiple relationships between parents and\nchildren to be defined; and a metadata field that acts to only allow a\nsingle join field per index to be defined.  The various queries and\naggregations that use this infrastructure retrieve the join field mapper\nvia a static method and then build themselves by pulling individual\nrelationship mappers from this main mapper.\nUsing mappers rather than MappedFieldTypes means that we need to\nexpose DocumentMapper at search time, which is something we are\ntrying to avoid.  This commit refactors things so that the join relations\nare encapsulated in a Joiner object, which lives instead on the\nMappedFieldType associated with the metadata join field.  Rather than\nusing the ParentJoinFieldMapper and connected ParentIdFieldMappers,\nwe can now build queries and aggregations using this Joiner object,\nretrieved via the QueryShardContext or AggregationContext using\na static helper method on Joiner itself.  In addition, the mappers are\nrefactored to parametrized form, and the Builders for the metadata and\nrelation mappers are removed as they are always constructed directly\nby the join field mapper, and never via parsable user input.", "createdAt": "2020-10-15T12:49:40Z", "url": "https://github.com/elastic/elasticsearch/pull/63738", "merged": true, "mergeCommit": {"oid": "70d88ef62d7ea287907c98b3f3263e3b08e60f3f"}, "closed": true, "closedAt": "2020-10-19T11:17:49Z", "author": {"login": "romseygeek"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR3ZoDgH2gAyNTA0MDc4NDU5OjVlOGQ5YTJiMTQzNmQ4OGU0ODM5NjBjZWE0ZGExNmFmNDNkZGRkNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUBnsfgH2gAyNTA0MDc4NDU5OmMxNTcwN2IyMzdhNGVjZDE4Y2MyM2YzNDM3NTVkN2FkYmFkZjFhYjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e8d9a2b1436d88e483960cea4da16af43dddd6f", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e8d9a2b1436d88e483960cea4da16af43dddd6f", "committedDate": "2020-10-12T17:26:43Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94677abf81f56bff6958fead064325eaf709c161", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/94677abf81f56bff6958fead064325eaf709c161", "committedDate": "2020-10-15T07:47:27Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e26177a1336738501ab3e711328136ca53f0e4", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/69e26177a1336738501ab3e711328136ca53f0e4", "committedDate": "2020-10-15T09:19:24Z", "message": "compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d63079df3e8a3db09fa84dfb2fa8207750b303cd", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/d63079df3e8a3db09fa84dfb2fa8207750b303cd", "committedDate": "2020-10-15T09:19:27Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6dc26dc8b1d091511e6640d2140a7b3e2d85a4", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/4c6dc26dc8b1d091511e6640d2140a7b3e2d85a4", "committedDate": "2020-10-15T10:47:44Z", "message": "Convert all to parametrized mappers; data shared via Joiner object on metadata field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bff02ef95c26b1c26d7bf8046903fc4939a2fce", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/2bff02ef95c26b1c26d7bf8046903fc4939a2fce", "committedDate": "2020-10-15T12:39:37Z", "message": "inner hits tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60fe6984334c75e3fd537c9444a8b5397d18a938", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/60fe6984334c75e3fd537c9444a8b5397d18a938", "committedDate": "2020-10-15T13:23:40Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/join"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzczNjc3", "url": "https://github.com/elastic/elasticsearch/pull/63738#pullrequestreview-509373677", "createdAt": "2020-10-15T13:23:44Z", "commit": {"oid": "2bff02ef95c26b1c26d7bf8046903fc4939a2fce"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94881383264490f3fba12b851218a15b6d525e64", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/94881383264490f3fba12b851218a15b6d525e64", "committedDate": "2020-10-15T14:54:39Z", "message": "Undo parametrization; move LateParsingQuery back into HasChildQueryBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc374f4c4dec20dd81059ccbe20806e432ee1741", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/dc374f4c4dec20dd81059ccbe20806e432ee1741", "committedDate": "2020-10-15T14:59:32Z", "message": "unwind a couple more changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a36a52c616904daa39f307afd42f4bea7329af82", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/a36a52c616904daa39f307afd42f4bea7329af82", "committedDate": "2020-10-15T15:01:49Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba97d3518d4f09bc8145a7cc6e0754eb6c6e90c5", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/ba97d3518d4f09bc8145a7cc6e0754eb6c6e90c5", "committedDate": "2020-10-15T15:20:03Z", "message": "imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "committedDate": "2020-10-15T15:26:49Z", "message": "javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjU0Nzk4", "url": "https://github.com/elastic/elasticsearch/pull/63738#pullrequestreview-510254798", "createdAt": "2020-10-16T08:23:38Z", "commit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyMzozOFrOHitwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzowMlrOHiufCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2MzMxNg==", "bodyText": "nit: is there a reason why this method starts with get while the two above don't?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506163316", "createdAt": "2020-10-16T08:23:38Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {\n+        if (isMapped.test(MetaJoinFieldMapper.NAME) == false) {\n+            return null;\n+        }\n+        MetaJoinFieldMapper.MetaJoinFieldType ft\n+            = (MetaJoinFieldMapper.MetaJoinFieldType) getFieldType.apply(MetaJoinFieldMapper.NAME);\n+        String joinField = ft.getJoinField();\n+        if (isMapped.test(joinField) == false) {\n+            return null;\n+        }\n+        ParentJoinFieldMapper.JoinFieldType jft =\n+            (ParentJoinFieldMapper.JoinFieldType) getFieldType.apply(joinField);\n+        return jft.getJoiner();\n+    }\n+\n+    private final Map<String, Set<String>> parentsToChildren = new HashMap<>();\n+    private final Map<String, String> childrenToParents = new HashMap<>();\n+\n+    private final String joinField;\n+\n+    /**\n+     * Constructs a Joiner based on a join field and a set of relations\n+     */\n+    public Joiner(String joinField, List<Relations> relations) {\n+        this.joinField = joinField;\n+        for (Relations r : relations) {\n+            for (String child : r.children) {\n+                parentsToChildren.put(r.parent, r.children);\n+                if (childrenToParents.containsKey(child)) {\n+                    throw new IllegalArgumentException(\"[\" + child + \"] cannot have multiple parents\");\n+                }\n+                childrenToParents.put(child, r.parent);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @return the join field for the index\n+     */\n+    public String getJoinField() {\n+        return joinField;\n+    }\n+\n+    /**\n+     * @return a filter for documents of a specific join type\n+     */\n+    public Query filter(String relationType) {\n+        return new TermQuery(new Term(joinField, relationType));\n+    }\n+\n+    /**\n+     * @return a filter for parent documents of a specific child type\n+     */\n+    public Query parentFilter(String childType) {\n+        return new TermQuery(new Term(joinField, childrenToParents.get(childType)));\n+    }\n+\n+    /**\n+     * @return a filter for child documents of a specific parent type\n+     */\n+    public Query getChildrenFilter(String parentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2ODgxNg==", "bodyText": "shall we make this package private?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506168816", "createdAt": "2020-10-16T08:29:40Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MDgxMA==", "bodyText": "could this be package private?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506170810", "createdAt": "2020-10-16T08:31:55Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {\n+        if (isMapped.test(MetaJoinFieldMapper.NAME) == false) {\n+            return null;\n+        }\n+        MetaJoinFieldMapper.MetaJoinFieldType ft\n+            = (MetaJoinFieldMapper.MetaJoinFieldType) getFieldType.apply(MetaJoinFieldMapper.NAME);\n+        String joinField = ft.getJoinField();\n+        if (isMapped.test(joinField) == false) {\n+            return null;\n+        }\n+        ParentJoinFieldMapper.JoinFieldType jft =\n+            (ParentJoinFieldMapper.JoinFieldType) getFieldType.apply(joinField);\n+        return jft.getJoiner();\n+    }\n+\n+    private final Map<String, Set<String>> parentsToChildren = new HashMap<>();\n+    private final Map<String, String> childrenToParents = new HashMap<>();\n+\n+    private final String joinField;\n+\n+    /**\n+     * Constructs a Joiner based on a join field and a set of relations\n+     */\n+    public Joiner(String joinField, List<Relations> relations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MDk3MA==", "bodyText": "make this final?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506170970", "createdAt": "2020-10-16T08:32:05Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3Mzk1NQ==", "bodyText": "parse looks unused?", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506173955", "createdAt": "2020-10-16T08:35:29Z", "author": {"login": "javanna"}, "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Defines a relationship between a parent type and a set of child types\n+ */\n+class Relations {\n+\n+    final String parent;\n+    final Set<String> children;\n+\n+    Relations(String parent, Set<String> children) {\n+        this.parent = parent;\n+        this.children = children;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Relations relation = (Relations) o;\n+        return Objects.equals(parent, relation.parent) &&\n+            Objects.equals(children, relation.children);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(parent, children);\n+    }\n+\n+    static List<Relations> parse(Object node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTI0MQ==", "bodyText": "you may also remove getMapper from this class , one less usage of getMapperService ;)", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506175241", "createdAt": "2020-10-16T08:37:02Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -187,6 +189,11 @@ public MappedFieldType getFieldType(String path) {\n             return context.getFieldType(path);\n         }\n \n+        @Override\n+        public boolean isFieldMapped(String field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9afe0c36a6fc0bf925be3ad2dbc5b765c4f1d1", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/3d9afe0c36a6fc0bf925be3ad2dbc5b765c4f1d1", "committedDate": "2020-10-16T13:38:05Z", "message": "Merge remote-tracking branch 'origin/master' into mapper/join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "author": {"user": {"login": "romseygeek", "name": "Alan Woodward"}}, "url": "https://github.com/elastic/elasticsearch/commit/9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "committedDate": "2020-10-16T13:52:22Z", "message": "deef"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTkzOTU1", "url": "https://github.com/elastic/elasticsearch/pull/63738#pullrequestreview-511593955", "createdAt": "2020-10-19T09:51:35Z", "commit": {"oid": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c15707b237a4ecd18cc23f343755d7adbadf1ab1", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/c15707b237a4ecd18cc23f343755d7adbadf1ab1", "committedDate": "2020-10-19T10:28:59Z", "message": "Merge branch 'master' into mapper/join"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3990, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}