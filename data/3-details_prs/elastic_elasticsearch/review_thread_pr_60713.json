{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTg5NTM5", "number": 60713, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowNjowMVrOEVgEgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyOTo1OFrOEVgluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTgwOTk0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowNjowMVrOG8Sxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozODowMFrOG8V5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTMyMg==", "bodyText": "Seems we don't really need this method then.", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465875322", "createdAt": "2020-08-05T17:06:01Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjU4MA==", "bodyText": "removed all of those", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465926580", "createdAt": "2020-08-05T18:38:00Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTMyMg=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTgxMTM2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowNjoyMlrOG8SyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozODoyM1rOG8V6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTUzOA==", "bodyText": "Can we have these delegate to NamedDomainObjectContainer.maybeCreate() as well?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465875538", "createdAt": "2020-08-05T17:06:22Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);\n+        // return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name, Action<T> action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjc1MA==", "bodyText": "see above. all maybeCreate's have been removed", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465926750", "createdAt": "2020-08-05T18:38:23Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);\n+        // return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name, Action<T> action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTUzOA=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTgxNjIwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/testKit/jdk-download/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowNzo1MVrOG8S1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzo0MDo1MVrOG8T-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NjM0OA==", "bodyText": "Is this file even used anymore since we've removed the old testkit tests?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465876348", "createdAt": "2020-08-05T17:07:51Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/testKit/jdk-download/build.gradle", "diffHunk": "@@ -1,12 +1,21 @@\n-project.gradle.projectsEvaluated {\n+allprojects{ p ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5NTA0Mg==", "bodyText": "nope. cleaning up", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465895042", "createdAt": "2020-08-05T17:40:51Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/testKit/jdk-download/build.gradle", "diffHunk": "@@ -1,12 +1,21 @@\n-project.gradle.projectsEvaluated {\n+allprojects{ p ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NjM0OA=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTgyMDA3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowOTowMlrOG8S38Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozOTowMlrOG8V7jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3Njk3Nw==", "bodyText": "This argument should probably be called archiveFIle.", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465876977", "createdAt": "2020-08-05T17:09:02Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNzA1NA==", "bodyText": "fixed", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465927054", "createdAt": "2020-08-05T18:39:02Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3Njk3Nw=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTgzMDQ3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxMTo1M1rOG8S-pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzozOTozMVrOG8T7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3ODY5NA==", "bodyText": "Is this necessary if it's only used to generate the directory name? Also, do we account for .zip or .tgz here?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465878694", "createdAt": "2020-08-05T17:11:53Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;\n+\n+    static String removeExtension(String inputFileName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5NDMxNQ==", "bodyText": "actually we should be able to remove this.", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465894315", "createdAt": "2020-08-05T17:39:31Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;\n+\n+    static String removeExtension(String inputFileName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3ODY5NA=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg0MzIyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNToyMFrOG8TGkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzozODoyN1rOG8T5mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDcyMQ==", "bodyText": "Is this interface required to be annotated as well?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465880721", "createdAt": "2020-08-05T17:15:20Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5Mzc4Ng==", "bodyText": "nope... fixing", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893786", "createdAt": "2020-08-05T17:38:27Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDcyMQ=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg0ODYxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxNjo1M1rOG8TJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzozODoxMlrOG8T5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw==", "bodyText": "Since this is largly copied from SymbolicLinkPreservingUntarTask should we centralize that in a utility somewhere?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465881597", "createdAt": "2020-08-05T17:16:53Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.logging.Logging;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+@CacheableTransform\n+public abstract class SymbolicLinkPreservingUntarTransform implements UnpackTransform {\n+\n+    public void unpack(File tarFile, File targetDir) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MjMwNA==", "bodyText": "Actually, now that I look at it that task is no longer used. Can we remove it?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465882304", "createdAt": "2020-08-05T17:18:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.logging.Logging;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+@CacheableTransform\n+public abstract class SymbolicLinkPreservingUntarTransform implements UnpackTransform {\n+\n+    public void unpack(File tarFile, File targetDir) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzY2Mg==", "bodyText": "will remove check again and remove", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893662", "createdAt": "2020-08-05T17:38:12Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.logging.Logging;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+@CacheableTransform\n+public abstract class SymbolicLinkPreservingUntarTransform implements UnpackTransform {\n+\n+    public void unpack(File tarFile, File targetDir) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg4ODYxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyODowNVrOG8TjCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzozNzo0NVrOG8T4Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODAwOQ==", "bodyText": "Should we give this a more specific name?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465888009", "createdAt": "2020-08-05T17:28:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzQyMw==", "bodyText": "Its something that already is provided by gradle itself. therefore I kept the name", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893423", "createdAt": "2020-08-05T17:37:45Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODAwOQ=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg5Mzc0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyOTozOFrOG8Tmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzozNzowNlrOG8T2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODg3NQ==", "bodyText": "Should we register .tgz as well?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465888875", "createdAt": "2020-08-05T17:29:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n+            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n+            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        });\n \n-                // ensure a root level jdk download task exists\n-                setupRootJdkDownload(project.getRootProject(), jdk);\n-            }\n+        ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzA1OA==", "bodyText": "Seems for this particular jdk download its not required.", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893058", "createdAt": "2020-08-05T17:37:06Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n+            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n+            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        });\n \n-                // ensure a root level jdk download task exists\n-                setupRootJdkDownload(project.getRootProject(), jdk);\n-            }\n+        ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODg3NQ=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg5NDk5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyOTo1OFrOG8TnOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzozNzoyNlrOG8T3bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4OTA4MA==", "bodyText": "\"noneTransformSpec\"?", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465889080", "createdAt": "2020-08-05T17:29:58Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzIzMA==", "bodyText": "idea is drunk :) fixing...", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893230", "createdAt": "2020-08-05T17:37:26Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4OTA4MA=="}, "originalCommit": {"oid": "31d056acb99e48750119305074ab329004f39cf2"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2646, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}