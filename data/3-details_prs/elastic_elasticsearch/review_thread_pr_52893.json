{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwODk3ODE1", "number": 52893, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxNDozNVrODjzwcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMjo0MFrODjz6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc0NzM5OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxNDozNVrOFv0icw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozNzo0MlrOFwY1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4ODE3OQ==", "bodyText": "This doesn't throw an exception though!", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r385688179", "createdAt": "2020-02-28T13:14:35Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "diffHunk": "@@ -302,18 +306,40 @@ public Value parse(XContentParser parser, Value value, Context context) throws I\n                         }\n                     }\n \n+                    // Check if this field is in an exclusive set, if it is then mark\n+                    // it as seen.  If the set is already marked, then we have a duplicate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4OTE2NQ==", "bodyText": "Oh, I see. It does, but later. Got it. Maybe update the comment. Not sure.", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r385689165", "createdAt": "2020-02-28T13:17:03Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "diffHunk": "@@ -302,18 +306,40 @@ public Value parse(XContentParser parser, Value value, Context context) throws I\n                         }\n                     }\n \n+                    // Check if this field is in an exclusive set, if it is then mark\n+                    // it as seen.  If the set is already marked, then we have a duplicate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4ODE3OQ=="}, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4Mjg2Nw==", "bodyText": "I rewrote the comments a bit to make things clearer", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r386282867", "createdAt": "2020-03-02T09:37:42Z", "author": {"login": "romseygeek"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "diffHunk": "@@ -302,18 +306,40 @@ public Value parse(XContentParser parser, Value value, Context context) throws I\n                         }\n                     }\n \n+                    // Check if this field is in an exclusive set, if it is then mark\n+                    // it as seen.  If the set is already marked, then we have a duplicate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4ODE3OQ=="}, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc2NjU2OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMDo1NVrOFv0tRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozNzozMlrOFwY1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MDk1MQ==", "bodyText": "I think it might be worth mentioning that it doesn't make foo or bar required.", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r385690951", "createdAt": "2020-02-28T13:20:55Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java", "diffHunk": "@@ -294,6 +295,23 @@ public void declareRequiredFieldSet(String... requiredSet) {\n         this.requiredFieldSets.add(requiredSet);\n     }\n \n+    /**\n+     * Declares a set of fields of which at most one must appear for parsing to succeed\n+     *\n+     * E.g. <code>declareExclusiveFieldSet(\"foo\", \"bar\");</code> means that only one of 'foo'\n+     * or 'bar' must be present, and if both appear then an exception will be thrown.\n+     *\n+     * Multiple exclusive sets may be declared", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4Mjc3MQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r386282771", "createdAt": "2020-03-02T09:37:32Z", "author": {"login": "romseygeek"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java", "diffHunk": "@@ -294,6 +295,23 @@ public void declareRequiredFieldSet(String... requiredSet) {\n         this.requiredFieldSets.add(requiredSet);\n     }\n \n+    /**\n+     * Declares a set of fields of which at most one must appear for parsing to succeed\n+     *\n+     * E.g. <code>declareExclusiveFieldSet(\"foo\", \"bar\");</code> means that only one of 'foo'\n+     * or 'bar' must be present, and if both appear then an exception will be thrown.\n+     *\n+     * Multiple exclusive sets may be declared", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MDk1MQ=="}, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc3MTExOnYy", "diffSide": "RIGHT", "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMjoxMVrOFv0v1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozNzoyNlrOFwY03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MTYwNQ==", "bodyText": "I tend to put this on the variable that needs it for extra paranoia.", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r385691605", "createdAt": "2020-02-28T13:22:11Z", "author": {"login": "nik9000"}, "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java", "diffHunk": "@@ -316,113 +318,52 @@ protected void doXContent(XContentBuilder builder, Params params) throws IOExcep\n         builder.endObject();\n     }\n \n-    public static PercolateQueryBuilder fromXContent(XContentParser parser) throws IOException {\n-        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n-\n-        String field = null;\n-        String name = null;\n-\n-        String indexedDocumentIndex = null;\n-        String indexedDocumentId = null;\n-        String indexedDocumentRouting = null;\n-        String indexedDocumentPreference = null;\n-        Long indexedDocumentVersion = null;\n-\n-        List<BytesReference> documents = new ArrayList<>();\n-\n-        String queryName = null;\n-        String currentFieldName = null;\n-\n-        boolean documentsSpecified = false;\n-        boolean documentSpecified = false;\n-\n-        XContentParser.Token token;\n-        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n-            if (token == XContentParser.Token.FIELD_NAME) {\n-                currentFieldName = parser.currentName();\n-            } else if (token == XContentParser.Token.START_ARRAY) {\n-                if (DOCUMENTS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    if (documentSpecified) {\n-                        throw new IllegalArgumentException(\"[\" + PercolateQueryBuilder.NAME +\n-                            \"] Either specified [document] or [documents], not both\");\n-                    }\n-                    documentsSpecified = true;\n-                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n-                        if (token == XContentParser.Token.START_OBJECT) {\n-                            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n-                                builder.copyCurrentStructure(parser);\n-                                builder.flush();\n-                                documents.add(BytesReference.bytes(builder));\n-                            }\n-                        } else {\n-                            throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                                \"] query does not support [\" + token + \"]\");\n-                        }\n-                    }\n-                } else {\n-                    throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                        \"] query does not field name [\" + currentFieldName + \"]\");\n-                }\n-            } else if (token == XContentParser.Token.START_OBJECT) {\n-                if (DOCUMENT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    if (documentsSpecified) {\n-                        throw new IllegalArgumentException(\"[\" + PercolateQueryBuilder.NAME +\n-                            \"] Either specified [document] or [documents], not both\");\n-                    }\n-                    documentSpecified = true;\n-                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n-                        builder.copyCurrentStructure(parser);\n-                        builder.flush();\n-                        documents.add(BytesReference.bytes(builder));\n-                    }\n-                } else {\n-                    throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                            \"] query does not support field name [\" + currentFieldName + \"]\");\n-                }\n-            } else if (token.isValue() || token == XContentParser.Token.VALUE_NULL) {\n-                if (QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    field = parser.text();\n-                } else if (NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    name = parser.textOrNull();\n-                } else if (INDEXED_DOCUMENT_FIELD_INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentIndex = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_ID.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentId = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentRouting = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_PREFERENCE.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentPreference = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentVersion = parser.longValue();\n-                } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    boost = parser.floatValue();\n-                } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    queryName = parser.text();\n-                } else {\n-                    throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                            \"] query does not support [\" + currentFieldName + \"]\");\n-                }\n-            } else {\n-                throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                        \"] query does not support [\" + token + \"]\");\n-            }\n-        }\n-\n-        PercolateQueryBuilder queryBuilder;\n-        if (documents.isEmpty() == false) {\n-            queryBuilder = new PercolateQueryBuilder(field, documents, XContentType.JSON);\n-        } else if (indexedDocumentId != null) {\n-            queryBuilder = new PercolateQueryBuilder(field, indexedDocumentIndex, indexedDocumentId, indexedDocumentRouting,\n-                indexedDocumentPreference, indexedDocumentVersion);\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4MjcxOA==", "bodyText": "TIL you can do this on variables - thanks!", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r386282718", "createdAt": "2020-03-02T09:37:26Z", "author": {"login": "romseygeek"}, "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java", "diffHunk": "@@ -316,113 +318,52 @@ protected void doXContent(XContentBuilder builder, Params params) throws IOExcep\n         builder.endObject();\n     }\n \n-    public static PercolateQueryBuilder fromXContent(XContentParser parser) throws IOException {\n-        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n-\n-        String field = null;\n-        String name = null;\n-\n-        String indexedDocumentIndex = null;\n-        String indexedDocumentId = null;\n-        String indexedDocumentRouting = null;\n-        String indexedDocumentPreference = null;\n-        Long indexedDocumentVersion = null;\n-\n-        List<BytesReference> documents = new ArrayList<>();\n-\n-        String queryName = null;\n-        String currentFieldName = null;\n-\n-        boolean documentsSpecified = false;\n-        boolean documentSpecified = false;\n-\n-        XContentParser.Token token;\n-        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n-            if (token == XContentParser.Token.FIELD_NAME) {\n-                currentFieldName = parser.currentName();\n-            } else if (token == XContentParser.Token.START_ARRAY) {\n-                if (DOCUMENTS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    if (documentSpecified) {\n-                        throw new IllegalArgumentException(\"[\" + PercolateQueryBuilder.NAME +\n-                            \"] Either specified [document] or [documents], not both\");\n-                    }\n-                    documentsSpecified = true;\n-                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n-                        if (token == XContentParser.Token.START_OBJECT) {\n-                            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n-                                builder.copyCurrentStructure(parser);\n-                                builder.flush();\n-                                documents.add(BytesReference.bytes(builder));\n-                            }\n-                        } else {\n-                            throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                                \"] query does not support [\" + token + \"]\");\n-                        }\n-                    }\n-                } else {\n-                    throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                        \"] query does not field name [\" + currentFieldName + \"]\");\n-                }\n-            } else if (token == XContentParser.Token.START_OBJECT) {\n-                if (DOCUMENT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    if (documentsSpecified) {\n-                        throw new IllegalArgumentException(\"[\" + PercolateQueryBuilder.NAME +\n-                            \"] Either specified [document] or [documents], not both\");\n-                    }\n-                    documentSpecified = true;\n-                    try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n-                        builder.copyCurrentStructure(parser);\n-                        builder.flush();\n-                        documents.add(BytesReference.bytes(builder));\n-                    }\n-                } else {\n-                    throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                            \"] query does not support field name [\" + currentFieldName + \"]\");\n-                }\n-            } else if (token.isValue() || token == XContentParser.Token.VALUE_NULL) {\n-                if (QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    field = parser.text();\n-                } else if (NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    name = parser.textOrNull();\n-                } else if (INDEXED_DOCUMENT_FIELD_INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentIndex = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_ID.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentId = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentRouting = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_PREFERENCE.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentPreference = parser.text();\n-                } else if (INDEXED_DOCUMENT_FIELD_VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    indexedDocumentVersion = parser.longValue();\n-                } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    boost = parser.floatValue();\n-                } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n-                    queryName = parser.text();\n-                } else {\n-                    throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                            \"] query does not support [\" + currentFieldName + \"]\");\n-                }\n-            } else {\n-                throw new ParsingException(parser.getTokenLocation(), \"[\" + PercolateQueryBuilder.NAME +\n-                        \"] query does not support [\" + token + \"]\");\n-            }\n-        }\n-\n-        PercolateQueryBuilder queryBuilder;\n-        if (documents.isEmpty() == false) {\n-            queryBuilder = new PercolateQueryBuilder(field, documents, XContentType.JSON);\n-        } else if (indexedDocumentId != null) {\n-            queryBuilder = new PercolateQueryBuilder(field, indexedDocumentIndex, indexedDocumentId, indexedDocumentRouting,\n-                indexedDocumentPreference, indexedDocumentVersion);\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MTYwNQ=="}, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc3Mjc1OnYy", "diffSide": "LEFT", "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMjo0MFrOFv0wug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMjo0MFrOFv0wug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MTgzNA==", "bodyText": "Nice to see all this go!", "url": "https://github.com/elastic/elasticsearch/pull/52893#discussion_r385691834", "createdAt": "2020-02-28T13:22:40Z", "author": {"login": "nik9000"}, "path": "modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java", "diffHunk": "@@ -316,113 +318,52 @@ protected void doXContent(XContentBuilder builder, Params params) throws IOExcep\n         builder.endObject();\n     }\n \n-    public static PercolateQueryBuilder fromXContent(XContentParser parser) throws IOException {\n-        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n-\n-        String field = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fb03dd184d84999cf1324590c20bcdd0d3f15"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3701, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}