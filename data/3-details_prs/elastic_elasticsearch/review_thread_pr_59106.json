{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDM5NzAw", "number": 59106, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoxMzowN1rOEMJcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyMjo0MVrOEMJq7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTczMDUwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoxMzowN1rOGuF0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyNjo1NFrOGuGVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4Mjk3Mg==", "bodyText": "maybe add a unit test that tests with a cluster state with no templates, but a few data streams and then\nadding a template shoudl still work. This to simulate the restore scenario?", "url": "https://github.com/elastic/elasticsearch/pull/59106#discussion_r450982972", "createdAt": "2020-07-07T16:13:07Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java", "diffHunk": "@@ -1062,6 +1064,83 @@ public void testPutExistingComposableTemplateIsNoop() throws Exception {\n         assertThat(metadataIndexTemplateService.addIndexTemplateV2(state, false, \"foo\", template), equalTo(state));\n     }\n \n+    public void testUnreferencedDataStreamsWhenAddingTemplate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91dc38d378946036bccea6d6a0644bc57e5e7bc4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MTUxMg==", "bodyText": "\ud83d\udc4d I re-organized this test so that it has that behavior", "url": "https://github.com/elastic/elasticsearch/pull/59106#discussion_r450991512", "createdAt": "2020-07-07T16:26:54Z", "author": {"login": "dakrone"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java", "diffHunk": "@@ -1062,6 +1064,83 @@ public void testPutExistingComposableTemplateIsNoop() throws Exception {\n         assertThat(metadataIndexTemplateService.addIndexTemplateV2(state, false, \"foo\", template), equalTo(state));\n     }\n \n+    public void testUnreferencedDataStreamsWhenAddingTemplate() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4Mjk3Mg=="}, "originalCommit": {"oid": "91dc38d378946036bccea6d6a0644bc57e5e7bc4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTc2ODEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyMjo0MVrOGuGLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyODoyOFrOGuGZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4ODk0Nw==", "bodyText": "If we read the data streams inside this function we can make it static. What do you think?", "url": "https://github.com/elastic/elasticsearch/pull/59106#discussion_r450988947", "createdAt": "2020-07-07T16:22:41Z", "author": {"login": "andreidan"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -520,35 +521,43 @@ public ClusterState addIndexTemplateV2(final ClusterState currentState, final bo\n      */\n     private static void validateDataStreamsStillReferenced(ClusterState state, String templateName,\n                                                            ComposableIndexTemplate newTemplate) {\n-\n         final Set<String> dataStreams = state.metadata().dataStreams().keySet();\n \n-        // Generate a metadata as if the new template were actually in the cluster state\n-        final Metadata metadataWithoutTemplate = Metadata.builder(state.metadata()).put(templateName, newTemplate).build();\n-        final Set<String> dataStreamsWithoutTemplates = new HashSet<>();\n-        // For each data stream that we have, see whether it's covered by a different\n-        // template (which is great), or whether it's now uncovered by any template\n-        for (String dataStream : dataStreams) {\n-            final String matchingTemplate = findV2Template(metadataWithoutTemplate, dataStream, false);\n-            if (matchingTemplate == null) {\n-                dataStreamsWithoutTemplates.add(dataStream);\n-            } else {\n-                // We found a template that still matches, great! Buuuuttt... check whether it\n-                // is a data stream template, as it's only useful if it has a data stream definition\n-                if (metadataWithoutTemplate.templatesV2().get(matchingTemplate).getDataStreamTemplate() == null) {\n-                    dataStreamsWithoutTemplates.add(dataStream);\n+        Function<Metadata, Set<String>> findUnreferencedDataStreams = meta -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9a48af23ce2fd5716ee4b78842bb473881be85"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MjQ3MQ==", "bodyText": "I don't think it makes too big of a difference (the Function part is simply for re-using the code), if you think it would be better, I can split it into a separate static function though?", "url": "https://github.com/elastic/elasticsearch/pull/59106#discussion_r450992471", "createdAt": "2020-07-07T16:28:28Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java", "diffHunk": "@@ -520,35 +521,43 @@ public ClusterState addIndexTemplateV2(final ClusterState currentState, final bo\n      */\n     private static void validateDataStreamsStillReferenced(ClusterState state, String templateName,\n                                                            ComposableIndexTemplate newTemplate) {\n-\n         final Set<String> dataStreams = state.metadata().dataStreams().keySet();\n \n-        // Generate a metadata as if the new template were actually in the cluster state\n-        final Metadata metadataWithoutTemplate = Metadata.builder(state.metadata()).put(templateName, newTemplate).build();\n-        final Set<String> dataStreamsWithoutTemplates = new HashSet<>();\n-        // For each data stream that we have, see whether it's covered by a different\n-        // template (which is great), or whether it's now uncovered by any template\n-        for (String dataStream : dataStreams) {\n-            final String matchingTemplate = findV2Template(metadataWithoutTemplate, dataStream, false);\n-            if (matchingTemplate == null) {\n-                dataStreamsWithoutTemplates.add(dataStream);\n-            } else {\n-                // We found a template that still matches, great! Buuuuttt... check whether it\n-                // is a data stream template, as it's only useful if it has a data stream definition\n-                if (metadataWithoutTemplate.templatesV2().get(matchingTemplate).getDataStreamTemplate() == null) {\n-                    dataStreamsWithoutTemplates.add(dataStream);\n+        Function<Metadata, Set<String>> findUnreferencedDataStreams = meta -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4ODk0Nw=="}, "originalCommit": {"oid": "df9a48af23ce2fd5716ee4b78842bb473881be85"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2111, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}