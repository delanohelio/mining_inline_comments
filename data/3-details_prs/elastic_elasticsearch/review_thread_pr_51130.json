{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODM4NTQ0", "number": 51130, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1Mjo1OVrODYw_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyODo1N1rODZfaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk1MTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1Mjo1OVrOFez3gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NTo0NFrOFf17LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTM5NA==", "bodyText": "Could we call the listener here directly? ie. listener.onFailure(new UnsupportedOperationException())", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r367851394", "createdAt": "2020-01-17T09:52:59Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "diffHunk": "@@ -28,11 +29,21 @@ protected Client getClient() {\n         return client;\n     }\n \n-    public abstract void evaluateCondition(IndexMetaData indexMetaData, Listener listener);\n+    public void evaluateCondition(Settings settings, IndexMetaData indexMetaData, Listener listener){\n+        evaluateCondition(indexMetaData, listener);\n+    }\n+\n+    public void evaluateCondition(IndexMetaData indexMetaData, Listener listener){\n+        try {\n+            throw new UnsupportedOperationException();\n+        } catch (UnsupportedOperationException e) {\n+            listener.onFailure(e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NzgxNg==", "bodyText": "On second thought, would it make sense to have only one method? ie. add the Settings as parameter? Or even more, maybe pass the timeout directly (as currently that's the only reason we want to modify this signature) ?", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r367857816", "createdAt": "2020-01-17T10:07:11Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "diffHunk": "@@ -28,11 +29,21 @@ protected Client getClient() {\n         return client;\n     }\n \n-    public abstract void evaluateCondition(IndexMetaData indexMetaData, Listener listener);\n+    public void evaluateCondition(Settings settings, IndexMetaData indexMetaData, Listener listener){\n+        evaluateCondition(indexMetaData, listener);\n+    }\n+\n+    public void evaluateCondition(IndexMetaData indexMetaData, Listener listener){\n+        try {\n+            throw new UnsupportedOperationException();\n+        } catch (UnsupportedOperationException e) {\n+            listener.onFailure(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTM5NA=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODM0OQ==", "bodyText": "I think it would make more sense to change the single, abstract, method. We should be able to pass in the Settings where necessary and just ignore them on the steps that don't need them.", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368158349", "createdAt": "2020-01-17T22:14:26Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "diffHunk": "@@ -28,11 +29,21 @@ protected Client getClient() {\n         return client;\n     }\n \n-    public abstract void evaluateCondition(IndexMetaData indexMetaData, Listener listener);\n+    public void evaluateCondition(Settings settings, IndexMetaData indexMetaData, Listener listener){\n+        evaluateCondition(indexMetaData, listener);\n+    }\n+\n+    public void evaluateCondition(IndexMetaData indexMetaData, Listener listener){\n+        try {\n+            throw new UnsupportedOperationException();\n+        } catch (UnsupportedOperationException e) {\n+            listener.onFailure(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTM5NA=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMzY3Nw==", "bodyText": "I didn't want to change classes that don't need timeout and this parameter is useless for them. But you are right that this is messy, I refectored it back to single abstract method with TimeValue masterTimeout parameter as suggested by @andreidan", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368933677", "createdAt": "2020-01-21T10:55:44Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncWaitStep.java", "diffHunk": "@@ -28,11 +29,21 @@ protected Client getClient() {\n         return client;\n     }\n \n-    public abstract void evaluateCondition(IndexMetaData indexMetaData, Listener listener);\n+    public void evaluateCondition(Settings settings, IndexMetaData indexMetaData, Listener listener){\n+        evaluateCondition(indexMetaData, listener);\n+    }\n+\n+    public void evaluateCondition(IndexMetaData indexMetaData, Listener listener){\n+        try {\n+            throw new UnsupportedOperationException();\n+        } catch (UnsupportedOperationException e) {\n+            listener.onFailure(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTM5NA=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mjk2Nzc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo1ODoyMFrOFe0BUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1Njo1MVrOFf19Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzkwNQ==", "bodyText": "We don't work with null cluster states so I think this null check could be dropped. Or is there a particular case where a null ClusterState is passed in?", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r367853905", "createdAt": "2020-01-17T09:58:20Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "diffHunk": "@@ -60,14 +64,21 @@ public boolean equals(Object obj) {\n         }\n         Step other = (Step) obj;\n         return Objects.equals(key, other.key) &&\n-                Objects.equals(nextStepKey, other.nextStepKey);\n+            Objects.equals(nextStepKey, other.nextStepKey);\n     }\n \n     @Override\n     public String toString() {\n         return key + \" => \" + nextStepKey;\n     }\n \n+    protected TimeValue getMasterTimeout(ClusterState clusterState){\n+        if(clusterState == null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODg0Ng==", "bodyText": "I think this should be Objects.requireNonNull(clusterState, \"cannot determine master timeout when cluster state is null\");, even though I agree and think it won't be possible (could still be possible if someone invokes it incorrectly)", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368158846", "createdAt": "2020-01-17T22:16:23Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "diffHunk": "@@ -60,14 +64,21 @@ public boolean equals(Object obj) {\n         }\n         Step other = (Step) obj;\n         return Objects.equals(key, other.key) &&\n-                Objects.equals(nextStepKey, other.nextStepKey);\n+            Objects.equals(nextStepKey, other.nextStepKey);\n     }\n \n     @Override\n     public String toString() {\n         return key + \" => \" + nextStepKey;\n     }\n \n+    protected TimeValue getMasterTimeout(ClusterState clusterState){\n+        if(clusterState == null){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzkwNQ=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNDIwNg==", "bodyText": "null cluster states were used by multiple tests, I've fixed them to use empty/minimal cluster state instead and method use Objects.requireNonNull now", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368934206", "createdAt": "2020-01-21T10:56:51Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "diffHunk": "@@ -60,14 +64,21 @@ public boolean equals(Object obj) {\n         }\n         Step other = (Step) obj;\n         return Objects.equals(key, other.key) &&\n-                Objects.equals(nextStepKey, other.nextStepKey);\n+            Objects.equals(nextStepKey, other.nextStepKey);\n     }\n \n     @Override\n     public String toString() {\n         return key + \" => \" + nextStepKey;\n     }\n \n+    protected TimeValue getMasterTimeout(ClusterState clusterState){\n+        if(clusterState == null){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzkwNQ=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkwNjk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNzowNFrOFfGpXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NzoxOFrOFf1-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTA3MA==", "bodyText": "This method can be static", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368159070", "createdAt": "2020-01-17T22:17:04Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "diffHunk": "@@ -60,14 +64,21 @@ public boolean equals(Object obj) {\n         }\n         Step other = (Step) obj;\n         return Objects.equals(key, other.key) &&\n-                Objects.equals(nextStepKey, other.nextStepKey);\n+            Objects.equals(nextStepKey, other.nextStepKey);\n     }\n \n     @Override\n     public String toString() {\n         return key + \" => \" + nextStepKey;\n     }\n \n+    protected TimeValue getMasterTimeout(ClusterState clusterState){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNDQ1NQ==", "bodyText": "You're right, changed", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368934455", "createdAt": "2020-01-21T10:57:18Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/Step.java", "diffHunk": "@@ -60,14 +64,21 @@ public boolean equals(Object obj) {\n         }\n         Step other = (Step) obj;\n         return Objects.equals(key, other.key) &&\n-                Objects.equals(nextStepKey, other.nextStepKey);\n+            Objects.equals(nextStepKey, other.nextStepKey);\n     }\n \n     @Override\n     public String toString() {\n         return key + \" => \" + nextStepKey;\n     }\n \n+    protected TimeValue getMasterTimeout(ClusterState clusterState){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTA3MA=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkxMTcwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxOTozMlrOFfGsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1ODoxMlrOFf1_1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTgwMA==", "bodyText": "can this use the getMasterTimeout method instead?", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368159800", "createdAt": "2020-01-17T22:19:32Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStep.java", "diffHunk": "@@ -113,7 +119,8 @@ public void evaluateCondition(IndexMetaData indexMetaData, Listener listener) {\n                 \"index [%s] is not the write index for alias [%s]\", indexMetaData.getIndex().getName(), rolloverAlias)));\n         }\n \n-        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null);\n+        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null)\n+            .masterNodeTimeout(LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT_SETTING.get(settings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNDg3MQ==", "bodyText": "I pass now timeout value directly from caller (which uses getMasterTimeout", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368934871", "createdAt": "2020-01-21T10:58:12Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/WaitForRolloverReadyStep.java", "diffHunk": "@@ -113,7 +119,8 @@ public void evaluateCondition(IndexMetaData indexMetaData, Listener listener) {\n                 \"index [%s] is not the write index for alias [%s]\", indexMetaData.getIndex().getName(), rolloverAlias)));\n         }\n \n-        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null);\n+        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null)\n+            .masterNodeTimeout(LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT_SETTING.get(settings));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTgwMA=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkzOTY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjozNDo1NFrOFfG9JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1ODo0MFrOFf2AzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDEzMg==", "bodyText": "I think we can do all this without mocking. I think by subclassing NoOpClient to check the executed request's master node timeout we can essentially do this check. I think this will be cleaner and less likely to break in the future than mocks.", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368164132", "createdAt": "2020-01-17T22:34:54Z", "author": {"login": "dakrone"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Stubber;\n+\n+import static org.elasticsearch.xpack.core.ilm.LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public abstract class AbstractStepMasterTimeoutTestCase<T extends AsyncActionStep> extends AbstractStepTestCase<T> {\n+\n+    protected Client client;\n+    protected AdminClient adminClient;\n+    protected IndicesAdminClient indicesClient;\n+\n+    @Before\n+    public void setup() {\n+        client = Mockito.mock(Client.class);\n+        adminClient = Mockito.mock(AdminClient.class);\n+        Mockito.when(client.admin()).thenReturn(adminClient);\n+        indicesClient = Mockito.mock(IndicesAdminClient.class);\n+        Mockito.when(adminClient.indices()).thenReturn(indicesClient);\n+    }\n+\n+    public void testMasterTimeout() {\n+        checkMasterTimeout(TimeValue.timeValueSeconds(30),\n+            ClusterState.builder(ClusterName.DEFAULT).metaData(MetaData.builder().build()).build());\n+        checkMasterTimeout(TimeValue.timeValueSeconds(10),\n+            ClusterState.builder(ClusterName.DEFAULT)\n+                .metaData(MetaData.builder()\n+                    .persistentSettings(Settings.builder().put(LIFECYCLE_STEP_MASTER_TIMEOUT, \"10s\").build())\n+                    .build())\n+                .build());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private void checkMasterTimeout(TimeValue timeValue, ClusterState currentClusterState) {\n+        IndexMetaData indexMetadata = getIndexMetaData();\n+\n+        Stubber checkTimeout = Mockito.doAnswer(invocation -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNTExNg==", "bodyText": "Yes, this is much better idea, changed", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368935116", "createdAt": "2020-01-21T10:58:40Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Stubber;\n+\n+import static org.elasticsearch.xpack.core.ilm.LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public abstract class AbstractStepMasterTimeoutTestCase<T extends AsyncActionStep> extends AbstractStepTestCase<T> {\n+\n+    protected Client client;\n+    protected AdminClient adminClient;\n+    protected IndicesAdminClient indicesClient;\n+\n+    @Before\n+    public void setup() {\n+        client = Mockito.mock(Client.class);\n+        adminClient = Mockito.mock(AdminClient.class);\n+        Mockito.when(client.admin()).thenReturn(adminClient);\n+        indicesClient = Mockito.mock(IndicesAdminClient.class);\n+        Mockito.when(adminClient.indices()).thenReturn(indicesClient);\n+    }\n+\n+    public void testMasterTimeout() {\n+        checkMasterTimeout(TimeValue.timeValueSeconds(30),\n+            ClusterState.builder(ClusterName.DEFAULT).metaData(MetaData.builder().build()).build());\n+        checkMasterTimeout(TimeValue.timeValueSeconds(10),\n+            ClusterState.builder(ClusterName.DEFAULT)\n+                .metaData(MetaData.builder()\n+                    .persistentSettings(Settings.builder().put(LIFECYCLE_STEP_MASTER_TIMEOUT, \"10s\").build())\n+                    .build())\n+                .build());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private void checkMasterTimeout(TimeValue timeValue, ClusterState currentClusterState) {\n+        IndexMetaData indexMetadata = getIndexMetaData();\n+\n+        Stubber checkTimeout = Mockito.doAnswer(invocation -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDEzMg=="}, "originalCommit": {"oid": "090b6b470982040fc29a4fd701d5a221260d6939"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDU1NTc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyODo1OFrOFf566A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTowNzo1OFrOFg6fFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5OTE0NA==", "bodyText": "Most subclasses already shadow these mockings/instances in the tests where they are applicable. I think this base class should not attempt to instantiate more than it uses/templates (ie. ThreadPool) and if we decide to centralise all the mocks/stubs in the base class I think we should remove the re-declaration from the tests (eg. OpenFollowerIndexStepTests, RolloverStepTests etc). I think that could be a follow-up PR to reduce the scope of this one, so I propose we remove the mocks/stubs from the base class for now.\nWhat do you think?", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r368999144", "createdAt": "2020-01-21T13:28:58Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.test.client.NoOpClient;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+\n+import static org.elasticsearch.xpack.core.ilm.LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public abstract class AbstractStepMasterTimeoutTestCase<T extends AsyncActionStep> extends AbstractStepTestCase<T> {\n+\n+    protected Client client;\n+    protected AdminClient adminClient;\n+    protected IndicesAdminClient indicesClient;\n+    protected ThreadPool pool;\n+\n+    @Before\n+    public void setup() {\n+        client = Mockito.mock(Client.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d16cd68d9e44c1fa28e3ee9def7620b72d48d41"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NTgwNg==", "bodyText": "That makes sense. This change was mostly due to the fact that I needed to overwrite client used in tests from AbstractStepMasterTimeoutTestCase - client was passed on instance creation in createRandomInstance. For now on I reverted client initialization but added visible-for-testing method AsyncActionStep#setClient that lets you overwrite client after creation.\nI'll follow up soon with PR for centralizing this initialization and this method can be removed then.", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r369875806", "createdAt": "2020-01-23T00:18:41Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.test.client.NoOpClient;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+\n+import static org.elasticsearch.xpack.core.ilm.LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public abstract class AbstractStepMasterTimeoutTestCase<T extends AsyncActionStep> extends AbstractStepTestCase<T> {\n+\n+    protected Client client;\n+    protected AdminClient adminClient;\n+    protected IndicesAdminClient indicesClient;\n+    protected ThreadPool pool;\n+\n+    @Before\n+    public void setup() {\n+        client = Mockito.mock(Client.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5OTE0NA=="}, "originalCommit": {"oid": "4d16cd68d9e44c1fa28e3ee9def7620b72d48d41"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1Njk4MA==", "bodyText": "Thanks for making the change @probakowski\nI think now it's at least explicit (I found it rather confusing to see what client is used where before) but I agree it'll be nice to centralise the initialization process.", "url": "https://github.com/elastic/elasticsearch/pull/51130#discussion_r370056980", "createdAt": "2020-01-23T11:07:58Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/AbstractStepMasterTimeoutTestCase.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.master.MasterNodeRequest;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.test.client.NoOpClient;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+\n+import static org.elasticsearch.xpack.core.ilm.LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public abstract class AbstractStepMasterTimeoutTestCase<T extends AsyncActionStep> extends AbstractStepTestCase<T> {\n+\n+    protected Client client;\n+    protected AdminClient adminClient;\n+    protected IndicesAdminClient indicesClient;\n+    protected ThreadPool pool;\n+\n+    @Before\n+    public void setup() {\n+        client = Mockito.mock(Client.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5OTE0NA=="}, "originalCommit": {"oid": "4d16cd68d9e44c1fa28e3ee9def7620b72d48d41"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4508, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}