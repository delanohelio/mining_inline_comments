{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MDU2Mzk4", "number": 61596, "title": "Search - add case insensitive flag for \"term\" family of queries", "bodyText": "Adds case insensitive option to term, terms, terms_in_set,  prefix, wildcard queries\nFirst cut.\nCloses #61546", "createdAt": "2020-08-26T17:39:38Z", "url": "https://github.com/elastic/elasticsearch/pull/61596", "merged": true, "mergeCommit": {"oid": "fe9145fa5e7fb26c190725486eb6d573e5e311ef"}, "closed": true, "closedAt": "2020-09-18T16:17:09Z", "author": {"login": "markharwood"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDDANSgBqjM3MDA0NjYxNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKGxhcAH2gAyNDc0MDU2Mzk4OjgzZjU2NTgzNmI4N2JkZTg3YjA5MDRjYWJhNDk2MjAyYWViMTRlZjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e347bbc21c5232efeeac3b80a93fc371213c7c1", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/4e347bbc21c5232efeeac3b80a93fc371213c7c1", "committedDate": "2020-08-27T15:44:44Z", "message": "Missing Locale"}, "afterCommit": {"oid": "3ad28df1e1e18055942928902616d22a13f6bd0c", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/3ad28df1e1e18055942928902616d22a13f6bd0c", "committedDate": "2020-08-27T16:26:29Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ad28df1e1e18055942928902616d22a13f6bd0c", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/3ad28df1e1e18055942928902616d22a13f6bd0c", "committedDate": "2020-08-27T16:26:29Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}, "afterCommit": {"oid": "5b9a7bf76d235c46ae8f715f7f6d1c3a420d2b08", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/5b9a7bf76d235c46ae8f715f7f6d1c3a420d2b08", "committedDate": "2020-08-27T17:02:46Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b9a7bf76d235c46ae8f715f7f6d1c3a420d2b08", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/5b9a7bf76d235c46ae8f715f7f6d1c3a420d2b08", "committedDate": "2020-08-27T17:02:46Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}, "afterCommit": {"oid": "cc70b86f100c3d417c17f921205f08fcb224675e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/cc70b86f100c3d417c17f921205f08fcb224675e", "committedDate": "2020-08-27T17:59:45Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTI5MjQx", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-478129241", "createdAt": "2020-08-29T13:46:00Z", "commit": {"oid": "cc70b86f100c3d417c17f921205f08fcb224675e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzo0NjowMFrOHJbmbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzo0NjowMFrOHJbmbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MTQzNw==", "bodyText": "@markharwood  I see typo in CaseInsensitiveAutomatonQuery & AutomatonQuery. Shouldn't it be 'Automation' ? Or is there anything I missed to understand ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r479651437", "createdAt": "2020-08-29T13:46:00Z", "author": {"login": "vijaykriishna"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/search/CaseInsensitiveAutomatonQuery.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.AutomatonQuery;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Base class for queries that use case insensitive string patterns\n+ */\n+public class CaseInsensitiveAutomatonQuery extends AutomatonQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc70b86f100c3d417c17f921205f08fcb224675e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NDI4NDQ3", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-478428447", "createdAt": "2020-08-31T08:44:35Z", "commit": {"oid": "cc70b86f100c3d417c17f921205f08fcb224675e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc70b86f100c3d417c17f921205f08fcb224675e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/cc70b86f100c3d417c17f921205f08fcb224675e", "committedDate": "2020-08-27T17:59:45Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}, "afterCommit": {"oid": "c3ea3fffdc1b4a42599350ebca9a47b86c5be001", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/c3ea3fffdc1b4a42599350ebca9a47b86c5be001", "committedDate": "2020-09-01T09:04:49Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3ea3fffdc1b4a42599350ebca9a47b86c5be001", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/c3ea3fffdc1b4a42599350ebca9a47b86c5be001", "committedDate": "2020-09-01T09:04:49Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}, "afterCommit": {"oid": "e01f2c5882850f915227cf46c7f913aac8b1926b", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/e01f2c5882850f915227cf46c7f913aac8b1926b", "committedDate": "2020-09-04T16:48:51Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8daf10f77c14acf494674a341a614aae9c7491b", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/e8daf10f77c14acf494674a341a614aae9c7491b", "committedDate": "2020-09-07T08:48:00Z", "message": "Missing Locale"}, "afterCommit": {"oid": "970c3c73c23e260403caed27d8c8979972d2206e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/970c3c73c23e260403caed27d8c8979972d2206e", "committedDate": "2020-09-07T08:56:39Z", "message": "Missing Locale"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab4bdfea52f93d6eccef0578131b01396df940cf", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/ab4bdfea52f93d6eccef0578131b01396df940cf", "committedDate": "2020-09-07T10:24:21Z", "message": "Test fixes"}, "afterCommit": {"oid": "053aee19a799635daab588dd95123c60ec6b2fa7", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/053aee19a799635daab588dd95123c60ec6b2fa7", "committedDate": "2020-09-07T12:44:33Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "828e90744387cfd811f1c2ace5e0d183cb1e6051", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/828e90744387cfd811f1c2ace5e0d183cb1e6051", "committedDate": "2020-09-07T13:13:03Z", "message": "Doc changes"}, "afterCommit": {"oid": "0539abcd7f9272e670fcb1b14c6e95c8d9352da9", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/0539abcd7f9272e670fcb1b14c6e95c8d9352da9", "committedDate": "2020-09-07T13:49:01Z", "message": "Doc changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDkyNzk0", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-484092794", "createdAt": "2020-09-08T12:42:58Z", "commit": {"oid": "0539abcd7f9272e670fcb1b14c6e95c8d9352da9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo0Mjo1OVrOHObCdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo0Mjo1OVrOHObCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4NTExMQ==", "bodyText": "I'd copy the javadoc too, just so that when I hover over the method call I can see it.", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r484885111", "createdAt": "2020-09-08T12:42:59Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/regex/Regex.java", "diffHunk": "@@ -75,21 +75,31 @@ public static Automaton simpleMatchToAutomaton(String... patterns) {\n         return Operations.union(automata);\n     }\n \n+    // Case sensitive version of simple match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0539abcd7f9272e670fcb1b14c6e95c8d9352da9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDk4Mjg5", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-484098289", "createdAt": "2020-09-08T12:49:57Z", "commit": {"oid": "0539abcd7f9272e670fcb1b14c6e95c8d9352da9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjU2MTMy", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-484256132", "createdAt": "2020-09-08T15:27:09Z", "commit": {"oid": "29d895a7a3f3eebe6908d6cd3278fb27dc1eb7c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyNzowOVrOHOim1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyNzowOVrOHOim1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwOTExMA==", "bodyText": "what do we gain shortening CaseInsensitive to CI here?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485009110", "createdAt": "2020-09-08T15:27:09Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/ConstantFieldType.java", "diffHunk": "@@ -70,18 +70,40 @@ private static String valueToString(Object value) {\n     @Override\n     public final Query termQuery(Object value, QueryShardContext context) {\n         String pattern = valueToString(value);\n-        if (matches(pattern, context)) {\n+        if (matches(pattern, false, context)) {\n             return Queries.newMatchAllQuery();\n         } else {\n             return new MatchNoDocsQuery();\n         }\n     }\n \n+    @Override\n+    public final Query termQueryCI(Object value, QueryShardContext context) {\n+        String pattern = valueToString(value);\n+        if (matches(pattern, true, context)) {\n+            return Queries.newMatchAllQuery();\n+        } else {\n+            return new MatchNoDocsQuery();\n+        }\n+    }\n+    \n     @Override\n     public final Query termsQuery(List<?> values, QueryShardContext context) {\n         for (Object value : values) {\n             String pattern = valueToString(value);\n-            if (matches(pattern, context)) {\n+            if (matches(pattern, false, context)) {\n+                // `terms` queries are a disjunction, so one matching term is enough\n+                return Queries.newMatchAllQuery();\n+            }\n+        }\n+        return new MatchNoDocsQuery();\n+    }    \n+\n+    @Override\n+    public final Query termsQueryCI(List<?> values, QueryShardContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d895a7a3f3eebe6908d6cd3278fb27dc1eb7c7"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29d895a7a3f3eebe6908d6cd3278fb27dc1eb7c7", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/29d895a7a3f3eebe6908d6cd3278fb27dc1eb7c7", "committedDate": "2020-09-08T13:08:27Z", "message": "Added Javadoc"}, "afterCommit": {"oid": "b82974a8cdeceb53d716740004a2710800759d41", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/b82974a8cdeceb53d716740004a2710800759d41", "committedDate": "2020-09-09T09:30:14Z", "message": "Rename method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTAyNzIw", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-484902720", "createdAt": "2020-09-09T11:14:29Z", "commit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxNDoyOVrOHPCcgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTozNzoxNFrOHPDJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMDc1Mw==", "bodyText": "Do we need this extra class ? You could add helpers to create case insensitive prefix, wildcard and term automaton and then use the plain AutomatonQuery ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485530753", "createdAt": "2020-09-09T11:14:29Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/search/CaseInsensitiveAutomatonQuery.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.AutomatonQuery;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Base class for queries that use case insensitive string patterns\n+ */\n+public class CaseInsensitiveAutomatonQuery extends AutomatonQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMDkxNA==", "bodyText": "Same here, I don't think we need the extra class.", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485530914", "createdAt": "2020-09-09T11:14:48Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/search/CaseInsensitivePrefixQuery.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.MinimizationOperations;\n+import org.apache.lucene.util.automaton.Operations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/** A Query that matches documents containing terms with a specified prefix, regardless of case. \n+ * A PrefixQuery built by QueryParser for input like <code>App*</code>.\n+ */\n+\n+public class CaseInsensitivePrefixQuery extends CaseInsensitiveAutomatonQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMTA2Mw==", "bodyText": "Same here", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485531063", "createdAt": "2020-09-09T11:15:03Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/search/CaseInsensitiveTermQuery.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.MultiTermQuery;\n+import org.apache.lucene.util.BytesRef;\n+import org.apache.lucene.util.automaton.Automaton;\n+\n+/** A Query that matches documents containing terms with a specified prefix, regardless of case. \n+ * A PrefixQuery built by QueryParser for input like <code>App*</code>.\n+ *\n+ * <p>This query uses the {@link\n+ * MultiTermQuery#CONSTANT_SCORE_REWRITE}\n+ * rewrite method. */\n+\n+public class CaseInsensitiveTermQuery extends CaseInsensitiveAutomatonQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMTEzMA==", "bodyText": "And here ;)", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485531130", "createdAt": "2020-09-09T11:15:11Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/search/CaseInsensitiveWildcardQuery.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.lucene.search;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.util.automaton.Automata;\n+import org.apache.lucene.util.automaton.Automaton;\n+import org.apache.lucene.util.automaton.Operations;\n+\n+/** Implements the wildcard search query. Supported wildcards are <code>*</code>, which\n+ * matches any character sequence (including the empty one), and <code>?</code>,\n+ * which matches any single character. '\\' is the escape character.\n+ * <p>\n+ * Note this query can be slow, as it\n+ * needs to iterate over many terms. In order to prevent extremely slow WildcardQueries,\n+ * a Wildcard term should not start with the wildcard <code>*</code>\n+ * \n+ * Non-wildcard ASCII characters are converted into A or a variations\n+ *\n+ */\n+public class CaseInsensitiveWildcardQuery extends CaseInsensitiveAutomatonQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMTUyMw==", "bodyText": "Maybe mention that it only handles ascii ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485531523", "createdAt": "2020-09-09T11:16:00Z", "author": {"login": "jimczi"}, "path": "docs/reference/query-dsl/prefix-query.asciidoc", "diffHunk": "@@ -41,6 +41,10 @@ provided `<field>`.\n (Optional, string) Method used to rewrite the query. For valid values and more\n information, see the <<query-dsl-multi-term-rewrite, `rewrite` parameter>>.\n \n+`case_insensitive`::\n+(Optional, boolean) allows case insensitive matching of the\n+value with the indexed field values when set to true. Setting to false is disallowed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNjU0Nw==", "bodyText": "Would it be easier to lowercase only the ascii chars of the pattern and the str pre-matching ? That way you don't need to modify the indexOf and it's consistent with the lowercasing that we apply on queries.", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485536547", "createdAt": "2020-09-09T11:26:08Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/regex/Regex.java", "diffHunk": "@@ -79,17 +79,36 @@ public static Automaton simpleMatchToAutomaton(String... patterns) {\n      * Match a String against the given pattern, supporting the following simple\n      * pattern styles: \"xxx*\", \"*xxx\", \"*xxx*\" and \"xxx*yyy\" matches (with an\n      * arbitrary number of pattern parts), as well as direct equality.\n+     * Matching is case sensitive.\n      *\n      * @param pattern the pattern to match against\n      * @param str     the String to match\n      * @return whether the String matches the given pattern\n      */\n     public static boolean simpleMatch(String pattern, String str) {\n+        return simpleMatch(pattern, str, false);\n+    }\n+    \n+    \n+    /**\n+     * Match a String against the given pattern, supporting the following simple\n+     * pattern styles: \"xxx*\", \"*xxx\", \"*xxx*\" and \"xxx*yyy\" matches (with an\n+     * arbitrary number of pattern parts), as well as direct equality.\n+     *\n+     * @param pattern the pattern to match against\n+     * @param str     the String to match\n+     * @param caseInsensitive  true if case differences should be ignored\n+     * @return whether the String matches the given pattern\n+     */\n+    public static boolean simpleMatch(String pattern, String str, boolean caseInsensitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNjg2OQ==", "bodyText": "Should it use a specific locale to avoid lowercasing more than ASCII chars ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485536869", "createdAt": "2020-09-09T11:26:44Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java", "diffHunk": "@@ -53,7 +54,12 @@ public String typeName() {\n         }\n \n         @Override\n-        protected boolean matches(String pattern, QueryShardContext context) {\n+        protected boolean matches(String pattern, boolean caseInsensitive, QueryShardContext context) {\n+            if (caseInsensitive) {\n+                // Thankfully, all index names are lower-cased so we don't have to pass a case_insensitive mode flag\n+                // down to all the index name-matching logic. We just lower-case the search string\n+                pattern = pattern.toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzODU3Ng==", "bodyText": "Should we restrict the lowercasing to ASCII ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485538576", "createdAt": "2020-09-09T11:30:17Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptBooleanMappedFieldType.java", "diffHunk": "@@ -201,6 +229,9 @@ private static boolean toBoolean(Object value) {\n         } else {\n             sValue = value.toString();\n         }\n+        if (caseInsensitive) {\n+            sValue = sValue.toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTEwNg==", "bodyText": "We shouldn't rely on the root locale ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485539106", "createdAt": "2020-09-09T11:31:23Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermsQuery.java", "diffHunk": "@@ -12,25 +12,37 @@\n import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n \n import java.util.List;\n+import java.util.Locale;\n import java.util.Objects;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class StringScriptFieldTermsQuery extends AbstractStringScriptFieldQuery {\n     private final Set<String> terms;\n+    private final boolean caseInsensitive;\n \n     public StringScriptFieldTermsQuery(\n         Script script,\n         StringScriptFieldScript.LeafFactory leafFactory,\n         String fieldName,\n-        Set<String> terms\n+        Set<String> terms,\n+        boolean caseInsensitive\n     ) {\n         super(script, leafFactory, fieldName);\n-        this.terms = terms;\n+        if (caseInsensitive) {\n+            this.terms = terms.stream().map(s -> s.toLowerCase(Locale.ROOT)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTE4Ng==", "bodyText": "Same here ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485539186", "createdAt": "2020-09-09T11:31:32Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermsQuery.java", "diffHunk": "@@ -12,25 +12,37 @@\n import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n \n import java.util.List;\n+import java.util.Locale;\n import java.util.Objects;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class StringScriptFieldTermsQuery extends AbstractStringScriptFieldQuery {\n     private final Set<String> terms;\n+    private final boolean caseInsensitive;\n \n     public StringScriptFieldTermsQuery(\n         Script script,\n         StringScriptFieldScript.LeafFactory leafFactory,\n         String fieldName,\n-        Set<String> terms\n+        Set<String> terms,\n+        boolean caseInsensitive\n     ) {\n         super(script, leafFactory, fieldName);\n-        this.terms = terms;\n+        if (caseInsensitive) {\n+            this.terms = terms.stream().map(s -> s.toLowerCase(Locale.ROOT)).collect(Collectors.toSet());\n+        } else {\n+            this.terms = terms;\n+        }\n+        this.caseInsensitive = caseInsensitive;\n     }\n \n     @Override\n     protected boolean matches(List<String> values) {\n         for (String value : values) {\n+            if (caseInsensitive) {\n+                value = value.toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MjMwNw==", "bodyText": "I wonder what we should do here ? We'd need to add the support for case insensitive matching in TermInSetQuery if we want to avoid building giant boolean query in the keyword field. For now I think it's ok to not provide this option on terms query since we cannot support them efficiently ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r485542307", "createdAt": "2020-09-09T11:37:14Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java", "diffHunk": "@@ -176,7 +176,24 @@ public boolean isAggregatable() {\n      */\n     // TODO: Standardize exception types\n     public abstract Query termQuery(Object value, @Nullable QueryShardContext context);\n-\n+    \n+    \n+    // Case insensitive form of term query (not supported by all fields so must be overridden to enable)\n+    public Query termQueryCaseInsensitive(Object value, @Nullable QueryShardContext context) {\n+        throw new QueryShardException(context, \"[\" + name + \"] field which is of type [\" + typeName() + \n+            \"], does not support case insensitive term queries\");\n+    }    \n+\n+    \n+    // Case insensitive form of terms query\n+    public Query termsQueryCaseInsensitive(List<?> values, @Nullable QueryShardContext context) {        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7ee17a361ce2dd59d69424db16f0f12b67956d"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c8041878fc84cde8dccc14ab1e4a58e4c48441e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/0c8041878fc84cde8dccc14ab1e4a58e4c48441e", "committedDate": "2020-09-09T15:32:26Z", "message": "Removed specialised CI classes. Added helper function for lowercasing ASCII only and removed String.toLowercase(Locale.ROOT) uses.\nI have NOT removed terms query CI support yet as it looks like discussions ongoing."}, "afterCommit": {"oid": "698b62ac6e48619cb14cc2e5fdfa0daa4104aa1f", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/698b62ac6e48619cb14cc2e5fdfa0daa4104aa1f", "committedDate": "2020-09-15T08:32:50Z", "message": "Removed specialised CI classes. Added helper function for lowercasing ASCII only and removed String.toLowercase(Locale.ROOT) uses.\nI have NOT removed terms query CI support yet as it looks like discussions ongoing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzk2NzUw", "url": "https://github.com/elastic/elasticsearch/pull/61596#pullrequestreview-491396750", "createdAt": "2020-09-18T11:53:45Z", "commit": {"oid": "6676b9b7a21a8cb5e4f39b9ac479e2c8335910a3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1Mzo0NVrOHUKBPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1Mzo0NVrOHUKBPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NzcyNw==", "bodyText": "simpleMatchCaseInsensitive ?", "url": "https://github.com/elastic/elasticsearch/pull/61596#discussion_r490897727", "createdAt": "2020-09-18T11:53:45Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/common/regex/Regex.java", "diffHunk": "@@ -79,15 +79,39 @@ public static Automaton simpleMatchToAutomaton(String... patterns) {\n      * Match a String against the given pattern, supporting the following simple\n      * pattern styles: \"xxx*\", \"*xxx\", \"*xxx*\" and \"xxx*yyy\" matches (with an\n      * arbitrary number of pattern parts), as well as direct equality.\n+     * Matching is case sensitive.\n      *\n      * @param pattern the pattern to match against\n      * @param str     the String to match\n      * @return whether the String matches the given pattern\n      */\n     public static boolean simpleMatch(String pattern, String str) {\n+        return simpleMatch(pattern, str, false);\n+    }\n+    \n+    \n+    /**\n+     * Match a String against the given pattern, supporting the following simple\n+     * pattern styles: \"xxx*\", \"*xxx\", \"*xxx*\" and \"xxx*yyy\" matches (with an\n+     * arbitrary number of pattern parts), as well as direct equality.\n+     *\n+     * @param pattern the pattern to match against\n+     * @param str     the String to match\n+     * @param caseInsensitive  true if ASCII case differences should be ignored\n+     * @return whether the String matches the given pattern\n+     */\n+    public static boolean simpleMatch(String pattern, String str, boolean caseInsensitive) {\n         if (pattern == null || str == null) {\n             return false;\n         }\n+        if (caseInsensitive) {\n+            pattern = Strings.toLowercaseAscii(pattern);\n+            str = Strings.toLowercaseAscii(str);\n+        }\n+        return simpleMatchWithNormalizedStrings(pattern, str);\n+    }\n+    \n+    private static boolean simpleMatchWithNormalizedStrings(String pattern, String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6676b9b7a21a8cb5e4f39b9ac479e2c8335910a3"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6676b9b7a21a8cb5e4f39b9ac479e2c8335910a3", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/6676b9b7a21a8cb5e4f39b9ac479e2c8335910a3", "committedDate": "2020-09-15T09:56:18Z", "message": "Formatting"}, "afterCommit": {"oid": "de8c3d25091cf7da02f4e4e66160f286329c31b5", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/de8c3d25091cf7da02f4e4e66160f286329c31b5", "committedDate": "2020-09-18T13:03:57Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de8c3d25091cf7da02f4e4e66160f286329c31b5", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/de8c3d25091cf7da02f4e4e66160f286329c31b5", "committedDate": "2020-09-18T13:03:57Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}, "afterCommit": {"oid": "8f9ad7333722096c644394b4fca3f03e825d7c2e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/8f9ad7333722096c644394b4fca3f03e825d7c2e", "committedDate": "2020-09-18T13:16:25Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685a4199a1acc9eeeb614348cddb2f8084014b43", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/685a4199a1acc9eeeb614348cddb2f8084014b43", "committedDate": "2020-09-18T14:37:05Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f9ad7333722096c644394b4fca3f03e825d7c2e", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/8f9ad7333722096c644394b4fca3f03e825d7c2e", "committedDate": "2020-09-18T13:16:25Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}, "afterCommit": {"oid": "685a4199a1acc9eeeb614348cddb2f8084014b43", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/685a4199a1acc9eeeb614348cddb2f8084014b43", "committedDate": "2020-09-18T14:37:05Z", "message": "First cut at adding case insensitive flag for term, terms, termsInSet, prefix, wildcard queries\n\nCloses #61546"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f565836b87bde87b0904caba496202aeb14ef9", "author": {"user": {"login": "markharwood", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/83f565836b87bde87b0904caba496202aeb14ef9", "committedDate": "2020-09-18T14:50:00Z", "message": "Formatting fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4587, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}