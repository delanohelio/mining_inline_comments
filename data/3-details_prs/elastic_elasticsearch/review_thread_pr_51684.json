{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MTI3MDg5", "number": 51684, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowMzoxM1rODcPpZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTozMDoxMlrODcmeBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQzMDc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowMzoxM1rOFkMPTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoyMjozN1rOFkM0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MzU4Mw==", "bodyText": "can you show how this will look like? In particular, what does request.getHttpChannel() print?", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373493583", "createdAt": "2020-01-31T14:03:13Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -157,6 +189,10 @@ public void registerHandler(RestRequest.Method method, String path, RestHandler\n \n     @Override\n     public void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext) {\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(request.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\n+                \"Incoming request [{}][{}] on [{}]\", request.method(), request.uri(), request.getHttpChannel()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670bac4bab99c4aacdddeca62ac39cdc1c82178d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMzE4MA==", "bodyText": "Sure:\n[2020-01-31T15:22:15,288][TRACE][o.e.r.R.tracer           ] [runTask-0] Incoming request [GET][/_nodes/stats?pretty] on [Netty4HttpChannel{localAddress=/127.0.0.1:9200, remoteAddress=/127.0.0.1:37162}]", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373503180", "createdAt": "2020-01-31T14:22:37Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -157,6 +189,10 @@ public void registerHandler(RestRequest.Method method, String path, RestHandler\n \n     @Override\n     public void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext) {\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(request.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\n+                \"Incoming request [{}][{}] on [{}]\", request.method(), request.uri(), request.getHttpChannel()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MzU4Mw=="}, "originalCommit": {"oid": "670bac4bab99c4aacdddeca62ac39cdc1c82178d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQ0NDQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowNzo0NlrOFkMXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoxODo0MVrOFkSNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NTcyNQ==", "bodyText": "Should we use the same syntax as for transport-level logging, i.e., [{}][{}] received request?", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373495725", "createdAt": "2020-01-31T14:07:46Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -157,6 +189,10 @@ public void registerHandler(RestRequest.Method method, String path, RestHandler\n \n     @Override\n     public void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext) {\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(request.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\n+                \"Incoming request [{}][{}] on [{}]\", request.method(), request.uri(), request.getHttpChannel()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670bac4bab99c4aacdddeca62ac39cdc1c82178d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwNTYxNA==", "bodyText": "I think we can align them more closely yes if we're also going to log the response sending now. On it :)", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373505614", "createdAt": "2020-01-31T14:27:29Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -157,6 +189,10 @@ public void registerHandler(RestRequest.Method method, String path, RestHandler\n \n     @Override\n     public void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext) {\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(request.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\n+                \"Incoming request [{}][{}] on [{}]\", request.method(), request.uri(), request.getHttpChannel()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NTcyNQ=="}, "originalCommit": {"oid": "670bac4bab99c4aacdddeca62ac39cdc1c82178d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTQwNw==", "bodyText": "How about:\n[2020-01-31T10:09:34,141][TRACE][o.e.h.A.tracer           ] [testTracerLog] [43072717][OPTIONS][/internal/test] received request from [Netty4HttpChannel{localAddress=/127.0.0.1:9200, remoteAddress=/127.0.0.1:39464}]\n[2020-01-31T10:09:34,153][TRACE][o.e.h.A.tracer           ] [testTracerLog] [43072717] sent response to [Netty4HttpChannel{localAddress=/127.0.0.1:9200, remoteAddress=/127.0.0.1:39464}]\n\n\n?\nI used the hash code of the request to make a fake but good enough request id for each REST request.", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373591407", "createdAt": "2020-01-31T17:18:41Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -157,6 +189,10 @@ public void registerHandler(RestRequest.Method method, String path, RestHandler\n \n     @Override\n     public void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext) {\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(request.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\n+                \"Incoming request [{}][{}] on [{}]\", request.method(), request.uri(), request.getHttpChannel()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NTcyNQ=="}, "originalCommit": {"oid": "670bac4bab99c4aacdddeca62ac39cdc1c82178d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjczNTg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/http/DefaultRestChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTowNTozMVrOFkqTHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTowNjo0OFrOFkqVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk4NjA3OA==", "bodyText": "let's also include restResponse.status() here, as well as content type, length and X_OPAQUE_ID", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373986078", "createdAt": "2020-02-03T09:05:31Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/http/DefaultRestChannel.java", "diffHunk": "@@ -77,6 +84,9 @@ protected BytesStreamOutput newBytesOutput() {\n \n     @Override\n     public void sendResponse(RestResponse restResponse) {\n+        if (tracerLog != null) {\n+            tracerLog.trace(new ParameterizedMessage(\"[{}] sent response to [{}]\", request.hashCode(), httpChannel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd42306f81bace7102665f85cc5e97f0bcff77"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk4NjYxOA==", "bodyText": "Should we move this to the finally block where we have actually sent the response?\nThis allows us to log something different in case where sending the response failed.", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373986618", "createdAt": "2020-02-03T09:06:48Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/http/DefaultRestChannel.java", "diffHunk": "@@ -77,6 +84,9 @@ protected BytesStreamOutput newBytesOutput() {\n \n     @Override\n     public void sendResponse(RestResponse restResponse) {\n+        if (tracerLog != null) {\n+            tracerLog.trace(new ParameterizedMessage(\"[{}] sent response to [{}]\", request.hashCode(), httpChannel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk4NjA3OA=="}, "originalCommit": {"oid": "4fbd42306f81bace7102665f85cc5e97f0bcff77"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjc1NDQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToxMjoxMVrOFkqeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToxMjoxMVrOFkqeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk4ODk0OA==", "bodyText": "Instead of the hashCode here, I would prefer to generate an actual unique value for each request (AtomicLong generator could be in RestRequest AFAICS), and return that through a getRequestId() method.", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373988948", "createdAt": "2020-02-03T09:12:11Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -349,6 +375,15 @@ private void handleIncomingRequest(final HttpRequest httpRequest, final HttpChan\n             restRequest = innerRestRequest;\n         }\n \n+        final Logger trace;\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(httpRequest.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\"[{}][{}][{}] received request from [{}]\", restRequest.hashCode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd42306f81bace7102665f85cc5e97f0bcff77"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjc2MzM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToxNToxOFrOFkqjgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToxNToxOFrOFkqjgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MDI3NQ==", "bodyText": "let's add X_OPAQUE_ID here as well (this will make for great debugging)", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r373990275", "createdAt": "2020-02-03T09:15:18Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -349,6 +375,15 @@ private void handleIncomingRequest(final HttpRequest httpRequest, final HttpChan\n             restRequest = innerRestRequest;\n         }\n \n+        final Logger trace;\n+        if (tracerLog.isTraceEnabled() && shouldTraceRequest(httpRequest.uri())) {\n+            tracerLog.trace(new ParameterizedMessage(\"[{}][{}][{}] received request from [{}]\", restRequest.hashCode(),\n+                httpRequest.method(), httpRequest.uri(), httpChannel), exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd42306f81bace7102665f85cc5e97f0bcff77"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzE2OTk2OnYy", "diffSide": "RIGHT", "path": "docs/reference/modules/http.asciidoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTozMDoxMlrOFkuWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxMTowOVrOFl3J0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MjQwNQ==", "bodyText": "I wonder if we should rename AbstractHttpServerTransport to HttpServerTransport, so that this looks less ugly. @tbrooks8 thoughts?", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r374052405", "createdAt": "2020-02-03T11:30:12Z", "author": {"login": "ywelsch"}, "path": "docs/reference/modules/http.asciidoc", "diffHunk": "@@ -108,3 +108,33 @@ client HTTP responses, defaults to unbounded.\n \n It also uses the common\n <<modules-network,network settings>>.\n+\n+[float]\n+=== Rest Request Tracer\n+\n+The http module has a dedicated tracer logger which, when activated, logs incoming requests. The log can be dynamically activated\n+by setting the level of the `org.elasticsearch.http.AbstractHttpServerTransport.tracer` logger to `TRACE`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _cluster/settings\n+{\n+   \"transient\" : {\n+      \"logger.org.elasticsearch.http.AbstractHttpServerTransport.tracer\" : \"TRACE\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82eeaf013318d6b2897381770a3b11306163a27"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NjA3Mg==", "bodyText": "I'm all for the renaming. We could technically even use a logger name not tied to a specific class name couldn't we?\nI'm wondering if logger.org.elasticsearch.http.tracer isn't even better?", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r374196072", "createdAt": "2020-02-03T16:15:45Z", "author": {"login": "original-brownbear"}, "path": "docs/reference/modules/http.asciidoc", "diffHunk": "@@ -108,3 +108,33 @@ client HTTP responses, defaults to unbounded.\n \n It also uses the common\n <<modules-network,network settings>>.\n+\n+[float]\n+=== Rest Request Tracer\n+\n+The http module has a dedicated tracer logger which, when activated, logs incoming requests. The log can be dynamically activated\n+by setting the level of the `org.elasticsearch.http.AbstractHttpServerTransport.tracer` logger to `TRACE`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _cluster/settings\n+{\n+   \"transient\" : {\n+      \"logger.org.elasticsearch.http.AbstractHttpServerTransport.tracer\" : \"TRACE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MjQwNQ=="}, "originalCommit": {"oid": "f82eeaf013318d6b2897381770a3b11306163a27"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyODk4MQ==", "bodyText": "I am very much in favor of dedicated name. There is already a little bit of tension between TransportService.tracer and TransportLogger. So I think we are going to need to unify those at some point. I think that we should pick a natural name for the http logger which might be a guide for a unified transport tracer/logger.\nI feel a little weird about logger.org.elasticsearch.http.tracer as it seems kind of odd when all other logs will include a class. org.elasticsearch.http.Tracer? org.elasticsearch.http.HttpTracer? I'm not super opposed to logger.org.elasticsearch.http.tracer. It just feels weird (even if it kind of looks like what we currently do for the TransportService).", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r375028981", "createdAt": "2020-02-05T02:22:03Z", "author": {"login": "tbrooks8"}, "path": "docs/reference/modules/http.asciidoc", "diffHunk": "@@ -108,3 +108,33 @@ client HTTP responses, defaults to unbounded.\n \n It also uses the common\n <<modules-network,network settings>>.\n+\n+[float]\n+=== Rest Request Tracer\n+\n+The http module has a dedicated tracer logger which, when activated, logs incoming requests. The log can be dynamically activated\n+by setting the level of the `org.elasticsearch.http.AbstractHttpServerTransport.tracer` logger to `TRACE`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _cluster/settings\n+{\n+   \"transient\" : {\n+      \"logger.org.elasticsearch.http.AbstractHttpServerTransport.tracer\" : \"TRACE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MjQwNQ=="}, "originalCommit": {"oid": "f82eeaf013318d6b2897381770a3b11306163a27"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNDAwMQ==", "bodyText": "+1 to factor out the tracing functionality into its own class (e.g. org.elasticsearch.http.HttpTracer), which will serve as name for the logger to be configured.", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r375224001", "createdAt": "2020-02-05T12:21:42Z", "author": {"login": "ywelsch"}, "path": "docs/reference/modules/http.asciidoc", "diffHunk": "@@ -108,3 +108,33 @@ client HTTP responses, defaults to unbounded.\n \n It also uses the common\n <<modules-network,network settings>>.\n+\n+[float]\n+=== Rest Request Tracer\n+\n+The http module has a dedicated tracer logger which, when activated, logs incoming requests. The log can be dynamically activated\n+by setting the level of the `org.elasticsearch.http.AbstractHttpServerTransport.tracer` logger to `TRACE`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _cluster/settings\n+{\n+   \"transient\" : {\n+      \"logger.org.elasticsearch.http.AbstractHttpServerTransport.tracer\" : \"TRACE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MjQwNQ=="}, "originalCommit": {"oid": "f82eeaf013318d6b2897381770a3b11306163a27"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NTI2Ng==", "bodyText": "@ywelsch @tbrooks8 alright, extracted the whole trace logging logic into its own class in bf325ba :)", "url": "https://github.com/elastic/elasticsearch/pull/51684#discussion_r375245266", "createdAt": "2020-02-05T13:11:09Z", "author": {"login": "original-brownbear"}, "path": "docs/reference/modules/http.asciidoc", "diffHunk": "@@ -108,3 +108,33 @@ client HTTP responses, defaults to unbounded.\n \n It also uses the common\n <<modules-network,network settings>>.\n+\n+[float]\n+=== Rest Request Tracer\n+\n+The http module has a dedicated tracer logger which, when activated, logs incoming requests. The log can be dynamically activated\n+by setting the level of the `org.elasticsearch.http.AbstractHttpServerTransport.tracer` logger to `TRACE`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT _cluster/settings\n+{\n+   \"transient\" : {\n+      \"logger.org.elasticsearch.http.AbstractHttpServerTransport.tracer\" : \"TRACE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MjQwNQ=="}, "originalCommit": {"oid": "f82eeaf013318d6b2897381770a3b11306163a27"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 146, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}