{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDg5MDk0", "number": 59341, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMzoxMFrOENILRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0MTo1NVrOEPTDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjAwOTAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMzoxMFrOGvowlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMzoxMFrOGvowlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNDA1Mg==", "bodyText": "\ud83d\udc4d good idea!", "url": "https://github.com/elastic/elasticsearch/pull/59341#discussion_r452604052", "createdAt": "2020-07-10T03:33:10Z", "author": {"login": "jamesdorfman"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "diffHunk": "@@ -265,7 +264,7 @@ private void bucketBufferedDocs(final DoubleArray buffer, final int bufferSize,\n                 }\n             }\n \n-            mergeBuckets(mergeMap, numBuckets);\n+            mergeBuckets(mergeMap, bucketOrd + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd15a7c0974395c211b49a3baecd4b6e67f145c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDc1NTY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0MDowNlrOGy79lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyMTo1MFrOGzZOYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2NDQwNg==", "bodyText": "This is pretty late in the process... is there a reason we can't check these when parsing the request?  I don't see anything that needs the shard context but I might be missing something?", "url": "https://github.com/elastic/elasticsearch/pull/59341#discussion_r456064406", "createdAt": "2020-07-16T20:40:06Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregationBuilder.java", "diffHunk": "@@ -149,12 +158,32 @@ protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardC\n                                                        ValuesSourceConfig config,\n                                                        AggregatorFactory parent,\n                                                        AggregatorFactories.Builder subFactoriesBuilder) throws IOException {\n-\n         Settings settings = queryShardContext.getIndexSettings().getNodeSettings();\n         int maxBuckets = MultiBucketConsumerService.MAX_BUCKET_SETTING.get(settings);\n         if (numBuckets > maxBuckets) {\n-            throw new IllegalArgumentException(NUM_BUCKETS_FIELD.getPreferredName()+\n-                \" must be less than \" + maxBuckets);\n+            throw new IllegalArgumentException(NUM_BUCKETS_FIELD.getPreferredName() + \" must be less than \" + maxBuckets);\n+        }\n+        int initialBuffer = getInitialBuffer();\n+        int shardSize = getShardSize();\n+        if (initialBuffer < numBuckets) {\n+            // If numBuckets buckets are being returned, then at least that many must be stored in memory\n+            throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ebadc8fbda911cf228f132a463c6fe03693fbe"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0Mzg0Mg==", "bodyText": "Yeah, it is. We don't really have a validate stage for these and I didn't really want to do it in the parsing because I figured it was possible for it to \"escape\" validation sometimes.", "url": "https://github.com/elastic/elasticsearch/pull/59341#discussion_r456543842", "createdAt": "2020-07-17T16:21:50Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregationBuilder.java", "diffHunk": "@@ -149,12 +158,32 @@ protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardC\n                                                        ValuesSourceConfig config,\n                                                        AggregatorFactory parent,\n                                                        AggregatorFactories.Builder subFactoriesBuilder) throws IOException {\n-\n         Settings settings = queryShardContext.getIndexSettings().getNodeSettings();\n         int maxBuckets = MultiBucketConsumerService.MAX_BUCKET_SETTING.get(settings);\n         if (numBuckets > maxBuckets) {\n-            throw new IllegalArgumentException(NUM_BUCKETS_FIELD.getPreferredName()+\n-                \" must be less than \" + maxBuckets);\n+            throw new IllegalArgumentException(NUM_BUCKETS_FIELD.getPreferredName() + \" must be less than \" + maxBuckets);\n+        }\n+        int initialBuffer = getInitialBuffer();\n+        int shardSize = getShardSize();\n+        if (initialBuffer < numBuckets) {\n+            // If numBuckets buckets are being returned, then at least that many must be stored in memory\n+            throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2NDQwNg=="}, "originalCommit": {"oid": "66ebadc8fbda911cf228f132a463c6fe03693fbe"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDc2MjE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0MTo1NVrOGy8BrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0MTo1NVrOGy8BrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2NTQ1Mg==", "bodyText": "Side note for us to think about in the future: I wonder if we should escalate this sort of check to BucketsAggregator or something?  E.g. it doesn't make sense for any of the aggs to request > max_buckets and we can determine that up front at parsing.  Potentially save some heartache.\nLess of an issue since we've increased the threshold but still.", "url": "https://github.com/elastic/elasticsearch/pull/59341#discussion_r456065452", "createdAt": "2020-07-16T20:41:55Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregationBuilder.java", "diffHunk": "@@ -149,12 +158,32 @@ protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardC\n                                                        ValuesSourceConfig config,\n                                                        AggregatorFactory parent,\n                                                        AggregatorFactories.Builder subFactoriesBuilder) throws IOException {\n-\n         Settings settings = queryShardContext.getIndexSettings().getNodeSettings();\n         int maxBuckets = MultiBucketConsumerService.MAX_BUCKET_SETTING.get(settings);\n         if (numBuckets > maxBuckets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ebadc8fbda911cf228f132a463c6fe03693fbe"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1951, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}