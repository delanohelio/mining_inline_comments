{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MTM1NTg3", "number": 65275, "title": "Add basic Fleet plugin", "bodyText": "A very basic plugin to manage Fleet system indices.\nCurrently, just registers these patterns as system indices:\n\n.fleet-servers*\n.fleet-policies*\n.fleet-agents*\n.fleet-actions*\n\nRelates to #64971", "createdAt": "2020-11-19T18:02:42Z", "url": "https://github.com/elastic/elasticsearch/pull/65275", "merged": true, "mergeCommit": {"oid": "2c33f9fc7ba23f40a1426105f1d37157b28ba128"}, "closed": true, "closedAt": "2020-12-03T19:18:01Z", "author": {"login": "gwbrown"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeGoIvAH2gAyNTI0MTM1NTg3OmJlYzU0NzllOTUwZGI0ZDY4NGQwZDA5ZjAwZjVjYjE0MjllYWI0M2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdinXXogH2gAyNTI0MTM1NTg3OmRlZjRkYmM5MDU0ZDJmOTU3OGU1OWM5MTAzMTQ1ZWE3NTE0NGJhOTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/bec5479e950db4d684d0d09f00f5cb1429eab43e", "committedDate": "2020-11-19T17:58:14Z", "message": "Add basic Fleet plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODEwMzI3", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-534810327", "createdAt": "2020-11-19T20:10:04Z", "commit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxMDowNFrOH2vuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxMDowNFrOH2vuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzA0NA==", "bodyText": "Do you specifically want to check for 200, or would this be OK?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(response.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527167044", "createdAt": "2020-11-19T20:10:04Z", "author": {"login": "pugnascotia"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertThat(response.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODEzODM5", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-534813839", "createdAt": "2020-11-19T20:14:53Z", "commit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxNDo1M1rOH2v43g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxNDo1M1rOH2v43g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2OTc1OA==", "bodyText": "Maybe it would be more readable to assign module.getSystemIndexDescriptors(Settings.EMPTY) to a variable?", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527169758", "createdAt": "2020-11-19T20:14:53Z", "author": {"login": "pugnascotia"}, "path": "modules/fleet/src/test/java/org/elasticsearch/fleet/FleetModuleTests.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+\n+public class FleetModuleTests extends ESTestCase {\n+\n+    public void testFleetIndexNames() {\n+        FleetModule module = new FleetModule();\n+\n+        assertThat(\n+            module.getSystemIndexDescriptors(Settings.EMPTY).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0OTAxMDYx", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-534901061", "createdAt": "2020-11-19T22:14:27Z", "commit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDoyN1rOH20EGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDoyN1rOH20EGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODE3MA==", "bodyText": "These have changed slightly the following indexes are needed:\n.fleet-servers\n.fleet-policies\n.fleet-policies-leader\n.fleet-agents\n.fleet-actions\n.fleet-actions-results\n\nAs for the Agent check-ins that will occur in logs-elastic_agent.checkin-default. This will follow the indexing strategy of Fleet and will be a datastream. I don't know if this needs to be registered in this plugin or not?", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527238170", "createdAt": "2020-11-19T22:14:27Z", "author": {"login": "blakerouse"}, "path": "modules/fleet/src/javaRestTest/java/org/elasticsearch/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-outputs\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-enrollment-keys\" },\n+            new Object[] { \".fleet-policies-inputs\" },\n+            new Object[] { \".fleet-agents\" },\n+            new Object[] { \".fleet-agents-checkins\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec5479e950db4d684d0d09f00f5cb1429eab43e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891ea3b6bed48a8d1bb6dd768af01ad455861bff", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/891ea3b6bed48a8d1bb6dd768af01ad455861bff", "committedDate": "2020-11-19T23:08:49Z", "message": "Xpackify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d75f01cbb8b76b8f3b235f29306fade10275b56", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/1d75f01cbb8b76b8f3b235f29306fade10275b56", "committedDate": "2020-11-19T23:20:14Z", "message": "Correct indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a11b8b88fe61916fd0647c8f49cb1873d93f6a3", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/6a11b8b88fe61916fd0647c8f49cb1873d93f6a3", "committedDate": "2020-11-19T23:20:22Z", "message": "Merge branch 'master' into fleet-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/6d771ede9268be7753683b84ed335863709834d4", "committedDate": "2020-11-19T23:25:34Z", "message": "Use assertOK instead of asserting just 200"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjQ5Mjc1", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535249275", "createdAt": "2020-11-20T09:13:32Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzozM1rOH3HO-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzozM1rOH3HO-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjI1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527552251", "createdAt": "2020-11-20T09:13:33Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjQ5NjA1", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535249605", "createdAt": "2020-11-20T09:13:58Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzo1OFrOH3HP9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzo1OFrOH3HP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527552500", "createdAt": "2020-11-20T09:13:58Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjUxMDQ0", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535251044", "createdAt": "2020-11-20T09:15:55Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxNTo1NVrOH3HUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxNTo1NVrOH3HUMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MzU4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527553585", "createdAt": "2020-11-20T09:15:55Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjYwMjQ4", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535260248", "createdAt": "2020-11-20T09:27:55Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNzo1NlrOH3HwIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyNzo1NlrOH3HwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MDczNw==", "bodyText": "Nothing to change, but I kinda wish we could do something like:\nString.join(\"\\n\",\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"1\"))),\n\ttoJson(Map.of(\"foo\", \"bar\")),\n\ttoJson(Map.of(\"index\", Map.of(\"_index\", indexName, \"_id\", \"2\"))),\n\ttoJson(Map.of(\"baz\", \"tag\"))\n)", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527560737", "createdAt": "2020-11-20T09:27:56Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjYyMzky", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535262392", "createdAt": "2020-11-20T09:30:32Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMDozMlrOH3H2pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMDozMlrOH3H2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjQwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));\n          \n          \n            \n                    assertOK(response);", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527562406", "createdAt": "2020-11-20T09:30:32Z", "author": {"login": "pugnascotia"}, "path": "x-pack/plugin/fleet/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/fleet/FleetSystemIndexIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.fleet;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class FleetSystemIndexIT extends ESRestTestCase {\n+\n+    private final String indexName;\n+\n+    public FleetSystemIndexIT(@Name(\"indexName\") String indexName) {\n+        this.indexName = indexName;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> data() {\n+        return Arrays.asList(\n+            new Object[] { \".fleet-servers\" },\n+            new Object[] { \".fleet-policies\" },\n+            new Object[] { \".fleet-policies-leader\" },\n+            new Object[] { \".fleet-actions\" },\n+            new Object[] { \".fleet-actions-results\" },\n+            new Object[] { \".fleet-agents\" }\n+        );\n+    }\n+\n+    public void testCreateIndex() throws IOException {\n+        Request request = new Request(\"PUT\", \"/_fleet/\" + indexName);\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testBulkToFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+    }\n+\n+    public void testRefresh() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        request = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_refresh\");\n+        response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testGetFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\" + indexName + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\");\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request getRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response getResponse = client().performRequest(getRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+    }\n+\n+    public void testSearchFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request searchRequest = new Request(\"GET\", \"/_fleet/\" + indexName + \"/_search\");\n+        searchRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response getResponse = client().performRequest(searchRequest);\n+        assertThat(getResponse.getStatusLine().getStatusCode(), is(200));\n+        String responseBody = EntityUtils.toString(getResponse.getEntity());\n+        assertThat(responseBody, containsString(\"foo\"));\n+        assertThat(responseBody, containsString(\"bar\"));\n+        assertThat(responseBody, containsString(\"baz\"));\n+        assertThat(responseBody, containsString(\"tag\"));\n+    }\n+\n+    public void testDeleteFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request deleteRequest = new Request(\"DELETE\", \"/_fleet/\" + indexName + \"/_doc/1\");\n+        Response deleteResponse = client().performRequest(deleteRequest);\n+        assertThat(deleteResponse.getStatusLine().getStatusCode(), is(200));\n+    }\n+\n+    public void testDeleteByQueryFromFleetIndex() throws IOException {\n+        Request request = new Request(\"POST\", \"/_fleet/_bulk\");\n+        request.setJsonEntity(\n+            \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"1\\\" } }\\n{ \\\"foo\\\" : \\\"bar\\\" }\\n\"\n+                + \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"\"\n+                + indexName\n+                + \"\\\", \\\"_id\\\" : \\\"2\\\" } }\\n{ \\\"baz\\\" : \\\"tag\\\" }\\n\"\n+        );\n+        request.addParameter(\"refresh\", \"true\");\n+\n+        Response response = client().performRequest(request);\n+        assertOK(response);\n+\n+        Request dbqRequest = new Request(\"POST\", \"/_fleet/\" + indexName + \"/_delete_by_query\");\n+        dbqRequest.setJsonEntity(\"{ \\\"query\\\" : { \\\"match_all\\\" : {} } }\\n\");\n+        Response dbqResponse = client().performRequest(dbqRequest);\n+        assertThat(dbqResponse.getStatusLine().getStatusCode(), is(200));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjY0OTkw", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535264990", "createdAt": "2020-11-20T09:34:01Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTgxNjQx", "url": "https://github.com/elastic/elasticsearch/pull/65275#pullrequestreview-535581641", "createdAt": "2020-11-20T16:31:10Z", "commit": {"oid": "6d771ede9268be7753683b84ed335863709834d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eadbe01ab6900fe04a949a430bb17d0ccad7d86", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/7eadbe01ab6900fe04a949a430bb17d0ccad7d86", "committedDate": "2020-11-23T22:39:37Z", "message": "Use assertOK instead of asserting just 200 (more)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22602725caf46d897c2b5ec43dec204675af8ebc", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/22602725caf46d897c2b5ec43dec204675af8ebc", "committedDate": "2020-11-23T22:39:44Z", "message": "Fix package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4606ea28444c79e5d0b6eea2a85d61d8ade29547", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/4606ea28444c79e5d0b6eea2a85d61d8ade29547", "committedDate": "2020-11-23T22:49:58Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "575890f613e82bf96bc0cb7c30a55413310fdd8b", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/575890f613e82bf96bc0cb7c30a55413310fdd8b", "committedDate": "2020-11-23T22:57:21Z", "message": "Merge branch 'master' into fleet-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f451c1802d4ca63b9827b7aacd5c3c940a0c1ac", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/9f451c1802d4ca63b9827b7aacd5c3c940a0c1ac", "committedDate": "2020-12-03T18:22:19Z", "message": "Remove _fleet APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def4dbc9054d2f9578e59c9103145ea75144ba94", "author": {"user": {"login": "gwbrown", "name": "Gordon Brown"}}, "url": "https://github.com/elastic/elasticsearch/commit/def4dbc9054d2f9578e59c9103145ea75144ba94", "committedDate": "2020-12-03T18:22:29Z", "message": "Merge branch 'master' into fleet-plugin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 884, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}