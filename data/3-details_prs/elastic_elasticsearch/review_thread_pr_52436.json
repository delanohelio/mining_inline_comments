{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjgzMjcz", "number": 52436, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1NTo1M1rODggKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1NTo1M1rODggKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDA4MDIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1NTo1M1rOFqvg3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMToxMjozNVrOFq-bmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2Mjk3Mg==", "bodyText": "I think we can fold the loop into a convenience method on AtomicLong:\ndiff --git a/server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java b/server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java\nindex c30a8d0aaa2..aa14d608aa7 100644\n--- a/server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java\n+++ b/server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java\n@@ -21,6 +21,7 @@ package org.elasticsearch.common;\n \n import java.util.Base64;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * These are essentially flake ids but we use 6 (not 8) bytes for timestamp, and use 3 (not 2) bytes for sequence number. We also reorder\n@@ -37,7 +38,7 @@ class TimeBasedUUIDGenerator implements UUIDGenerator {\n     private final AtomicInteger sequenceNumber = new AtomicInteger(SecureRandomHolder.INSTANCE.nextInt());\n \n     // Used to ensure clock moves forward:\n-    private long lastTimestamp;\n+    private AtomicLong lastTimestamp = new AtomicLong();\n \n     private static final byte[] SECURE_MUNGED_ADDRESS = MacAddressProvider.getSecureMungedAddress();\n \n@@ -58,21 +59,22 @@ class TimeBasedUUIDGenerator implements UUIDGenerator {\n     @Override\n     public String getBase64UUID()  {\n         final int sequenceId = sequenceNumber.incrementAndGet() & 0xffffff;\n-        long timestamp = currentTimeMillis();\n \n-        synchronized (this) {\n-            // Don't let timestamp go backwards, at least \"on our watch\" (while this JVM is running).  We are still vulnerable if we are\n-            // shut down, clock goes backwards, and we restart... for this we randomize the sequenceNumber on init to decrease chance of\n-            // collision:\n-            timestamp = Math.max(lastTimestamp, timestamp);\n+        final long timestamp = lastTimestamp.updateAndGet(\n+            last -> {\n+                // Don't let timestamp go backwards, at least \"on our watch\" (while this JVM is running).  We are still vulnerable if we are\n+                // shut down, clock goes backwards, and we restart... for this we randomize the sequenceNumber on init to decrease chance of\n+                // collision:\n+                long nonBackwardsCurrentTimestamp = Math.max(last, currentTimeMillis());\n \n-            if (sequenceId == 0) {\n-                // Always force the clock to increment whenever sequence number is 0, in case we have a long time-slip backwards:\n-                timestamp++;\n-            }\n+                if (sequenceId == 0) {\n+                    // Always force the clock to increment whenever sequence number is 0, in case we have a long time-slip backwards:\n+                    nonBackwardsCurrentTimestamp++;\n+                }\n \n-            lastTimestamp = timestamp;\n-        }\n+                return nonBackwardsCurrentTimestamp;\n+            }\n+         );\n \n         final byte[] uuidBytes = new byte[15];\n         int i = 0;", "url": "https://github.com/elastic/elasticsearch/pull/52436#discussion_r380362972", "createdAt": "2020-02-17T20:55:53Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java", "diffHunk": "@@ -71,7 +74,9 @@ public String getBase64UUID()  {\n                 timestamp++;\n             }\n \n-            lastTimestamp = timestamp;\n+            if (this.lastTimestamp.compareAndSet(lastTimestamp, timestamp)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd07cfe9368a68043f369e93d7862bf14b0ef85"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3NDczMA==", "bodyText": "In your proposal we might call currentTimeMillis() multiple times, but I don't think we have to? It could be computed only once like in master or Tim's proposal?", "url": "https://github.com/elastic/elasticsearch/pull/52436#discussion_r380374730", "createdAt": "2020-02-17T21:41:56Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java", "diffHunk": "@@ -71,7 +74,9 @@ public String getBase64UUID()  {\n                 timestamp++;\n             }\n \n-            lastTimestamp = timestamp;\n+            if (this.lastTimestamp.compareAndSet(lastTimestamp, timestamp)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2Mjk3Mg=="}, "originalCommit": {"oid": "3bd07cfe9368a68043f369e93d7862bf14b0ef85"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYwNzM4Nw==", "bodyText": "I missed that, thanks. It can lifted out of the updateAndGet update function as @tbrooks8 did in bf13356.", "url": "https://github.com/elastic/elasticsearch/pull/52436#discussion_r380607387", "createdAt": "2020-02-18T11:12:35Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java", "diffHunk": "@@ -71,7 +74,9 @@ public String getBase64UUID()  {\n                 timestamp++;\n             }\n \n-            lastTimestamp = timestamp;\n+            if (this.lastTimestamp.compareAndSet(lastTimestamp, timestamp)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2Mjk3Mg=="}, "originalCommit": {"oid": "3bd07cfe9368a68043f369e93d7862bf14b0ef85"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3936, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}