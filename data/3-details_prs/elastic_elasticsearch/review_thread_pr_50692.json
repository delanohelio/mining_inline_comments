{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5ODE2NzI3", "number": 50692, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1NjowM1rODWgY1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo0NTo1M1rODWxm5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTI1OTEwOnYy", "diffSide": "RIGHT", "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1NjowM1rOFbTY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1NjowM1rOFbTY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3MzU1NQ==", "bodyText": "I think we should avoid the \"downgrade\" terminology (i.e. needs changes across the whole PR). This is not a downgrade in the classical sense. It is more of a \"revert to a previously good state\" scenario where, after a cluster was upgraded, we revert it back to a last good known state based on a backup.\nPerhaps we could frame these tests under the context of \"multi-version access to repo\"\nWe would have an old version cluster and a new version cluster.\nThere would be no \"upgrade\" in the classical sense.\nI would do the following:\nStep1: Add and write to repo on old cluster, then remove rep\nStep2: We add and write to repo on new cluster, then remove repo\nStep3: We add repo again and restore snapshot from step 1 on old cluster. We write a new snapshot, then remove repo\nStep4:  We add repo again and restore snapshots from step 1, step2, step3 on new cluster. We write a new snapshots and check if it can be restored.\nHave another test that does something similar, but instead of removing repo at the end of each step, remounts it as read-only, and uses same read-only repo in step+2 to restore.\nHave another test that only works in step1 and step2 and deletes all old snapshots in step2 and checks that snapshotting works as desired.", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364173555", "createdAt": "2020-01-08T10:56:03Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTI2ODQ5OnYy", "diffSide": "RIGHT", "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1OTo1NlrOFbTe8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzoyNjozN1rOFbWwoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTA4OA==", "bodyText": "perhaps these steps should just be abstractly named \"STEP1_OLD_CLUSTER, STEP2_NEW_CLUSTER, STEP3_OLD_CLUSTER, STEP4_NEW_CLUSTER\"", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175088", "createdAt": "2020-01-08T10:59:56Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyODc2OQ==", "bodyText": "Yea that sounds nicer :)", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364228769", "createdAt": "2020-01-08T13:26:37Z", "author": {"login": "original-brownbear"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTA4OA=="}, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTI3MDg0OnYy", "diffSide": "RIGHT", "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTowMDo1MFrOFbTgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTowMDo1MFrOFbTgTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTQzNw==", "bodyText": "do we need this?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175437", "createdAt": "2020-01-08T11:00:50Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTI3MTE4OnYy", "diffSide": "RIGHT", "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTowMDo1OFrOFbTggw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTowMDo1OFrOFbTggw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTQ5MQ==", "bodyText": "do we need this?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175491", "createdAt": "2020-01-08T11:00:58Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTI3MTU1OnYy", "diffSide": "RIGHT", "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTowMTowN1rOFbTgug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzoyNjoyN1rOFbWwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTU0Ng==", "bodyText": "do we need this?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364175546", "createdAt": "2020-01-08T11:01:07Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSLMPoliciesUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyODY4Nw==", "bodyText": "Nah I just blindly copy and pasted these, removed all but the repo and snapshot preserving now :)", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364228687", "createdAt": "2020-01-08T13:26:27Z", "author": {"login": "original-brownbear"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSLMPoliciesUponCompletion() {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NTU0Ng=="}, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTMxMjEzOnYy", "diffSide": "RIGHT", "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMToxODoyNVrOFbT5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMToxODoyNVrOFbT5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MTg0MQ==", "bodyText": "good idea. In my steps above, account for this as well", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364181841", "createdAt": "2020-01-08T11:18:25Z", "author": {"login": "ywelsch"}, "path": "qa/snapshot-repository-downgrade/src/test/java/org/elasticsearch/upgrades/ClusterDowngradeIT.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Downgrade tests that verify that a snapshot repository is not getting corrupted and continues to function properly during cluster\n+ * downgrades. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start from a cluster in an old version: {@link TestStep#OLD}</li>\n+ *     <li>Upgrade the cluster to the current version: {@link TestStep#UPGRADED}</li>\n+ *     <li>Downgrade the cluster back to the old version: {@link TestStep#DOWNGRADED}</li>\n+ *     <li>Once again upgrade the cluster to the current version: {@link TestStep#RE_UPGRADED}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class ClusterDowngradeIT extends ESRestTestCase {\n+\n+    protected enum TestStep {\n+        OLD,\n+        UPGRADED,\n+        DOWNGRADED,\n+        RE_UPGRADED;\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"old_cluster\":\n+                    return OLD;\n+                case \"upgraded_cluster\":\n+                    return UPGRADED;\n+                case \"downgraded_cluster\":\n+                    return DOWNGRADED;\n+                case \"re_upgraded_cluster\":\n+                    return RE_UPGRADED;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveIndicesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveTemplatesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveClusterSettings() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveRollupJobsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveILMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveSLMPoliciesUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateSnapshot() throws IOException {\n+        final String repoName = \"repo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            if (TEST_STEP == TestStep.OLD || TEST_STEP == TestStep.DOWNGRADED) {\n+                createIndex(client, \"test-index\", shards);\n+                assertThat(client.snapshot().createRepository(new PutRepositoryRequest(repoName).type(\"fs\").settings(\n+                    Settings.builder().put(\"location\", \".\")), RequestOptions.DEFAULT).isAcknowledged(), is(true));\n+            }\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP.toString().toLowerCase(Locale.ROOT));\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTMyNDcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMToyMzozMFrOFbUAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTo0MToxMFrOFbUacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MzcwOQ==", "bodyText": "why do we need to convert to a list here? Why is Collection not good enough=?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364183709", "createdAt": "2020-01-08T11:23:30Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +353,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final List<SnapshotId> snapshotIds = List.copyOf(repositoryData.getSnapshotIds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5MDMyMw==", "bodyText": "My bad, this was a left-over from when I used an API that needed a List to get all the snapshot versions before :)", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364190323", "createdAt": "2020-01-08T11:41:10Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +353,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final List<SnapshotId> snapshotIds = List.copyOf(repositoryData.getSnapshotIds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4MzcwOQ=="}, "originalCommit": {"oid": "72cfb1b8dbe85afe4976311e6a4fc84994298532"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDM5MTU4OnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoyMjo0N1rOFbeHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoyMjo0N1rOFbeHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0OTM4MA==", "bodyText": "reverted is a strange name. Perhaps use\nString oldClusterName = \"${baseName}-old\"\nString newClusterName = \"${baseName}-new\"", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364349380", "createdAt": "2020-01-08T17:22:47Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/build.gradle", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.elasticsearch.gradle.Version\n+import org.elasticsearch.gradle.info.BuildParams\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask\n+\n+apply plugin: 'elasticsearch.testclusters'\n+apply plugin: 'elasticsearch.standalone-test'\n+\n+tasks.register(\"bwcTest\") {\n+  description = 'Runs backwards compatibility tests.'\n+  group = 'verification'\n+}\n+\n+dependencies {\n+  testCompile project(':client:rest-high-level')\n+}\n+\n+for (Version bwcVersion : bwcVersions.indexCompatible) {\n+  String baseName = \"v${bwcVersion}\"\n+  String revertedClusterName = \"${baseName}-reverted\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDQxMzcwOnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzozMDo1NVrOFbeVhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMDoxNDoxMVrOFbinEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1MjkwMg==", "bodyText": "I'm confused by the terminology here. We're not starting a cluster again in step 3?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364352902", "createdAt": "2020-01-08T17:30:55Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQyMjkzMA==", "bodyText": "Reworded it a little, hope it's better now :)", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364422930", "createdAt": "2020-01-08T20:14:11Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1MjkwMg=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDQyMDg1OnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzozMzo0NlrOFbeaUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTowNzozMlrOFbu8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDEzMQ==", "bodyText": "why is it always taking the first node here?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364354131", "createdAt": "2020-01-08T17:33:46Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNTYxNw==", "bodyText": "It's taking all nodes? It's just creating the empty array for the conversion to Node not looking up [0]:)", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364405617", "createdAt": "2020-01-08T19:32:45Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDEzMQ=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyNDkxNg==", "bodyText": "Java \ud83d\udde1", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364624916", "createdAt": "2020-01-09T09:07:32Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDEzMQ=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDQyMjczOnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzozNDoyOVrOFbebjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo1NjoyN1rOFbiLRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDQ0Nw==", "bodyText": "check that the snapshot can be listed before deletion?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364354447", "createdAt": "2020-01-08T17:34:29Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQxNTgxNA==", "bodyText": "Sure :)", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364415814", "createdAt": "2020-01-08T19:56:27Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Again start a cluster in an old version: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Once again start a cluster running the current version: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NDQ0Nw=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDQ0MjYwOnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzo0MTozNFrOFbenfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTozNjowOFrOFbhpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NzUwMA==", "bodyText": "why 2 nodes? Isn't one node sufficient?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364357500", "createdAt": "2020-01-08T17:41:34Z", "author": {"login": "ywelsch"}, "path": "qa/repository-multi-version/build.gradle", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.elasticsearch.gradle.Version\n+import org.elasticsearch.gradle.info.BuildParams\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask\n+\n+apply plugin: 'elasticsearch.testclusters'\n+apply plugin: 'elasticsearch.standalone-test'\n+\n+tasks.register(\"bwcTest\") {\n+  description = 'Runs backwards compatibility tests.'\n+  group = 'verification'\n+}\n+\n+dependencies {\n+  testCompile project(':client:rest-high-level')\n+}\n+\n+for (Version bwcVersion : bwcVersions.indexCompatible) {\n+  String baseName = \"v${bwcVersion}\"\n+  String revertedClusterName = \"${baseName}-reverted\"\n+\n+  def clusterSettings = { v ->\n+    return {\n+      version = v\n+      numberOfNodes = 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNzA2MQ==", "bodyText": "It's probably pointless paranoia but I figured if I add all these tests, why not also cover the over the wire serialization in this scenario as well (I can't see how it would be important but who knows ... could be we're tripping some assertion in a Streamable constructor or so ... we have beefy CI machines so why not? :)).", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364407061", "createdAt": "2020-01-08T19:36:08Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/build.gradle", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.elasticsearch.gradle.Version\n+import org.elasticsearch.gradle.info.BuildParams\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask\n+\n+apply plugin: 'elasticsearch.testclusters'\n+apply plugin: 'elasticsearch.standalone-test'\n+\n+tasks.register(\"bwcTest\") {\n+  description = 'Runs backwards compatibility tests.'\n+  group = 'verification'\n+}\n+\n+dependencies {\n+  testCompile project(':client:rest-high-level')\n+}\n+\n+for (Version bwcVersion : bwcVersions.indexCompatible) {\n+  String baseName = \"v${bwcVersion}\"\n+  String revertedClusterName = \"${baseName}-reverted\"\n+\n+  def clusterSettings = { v ->\n+    return {\n+      version = v\n+      numberOfNodes = 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NzUwMA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDQ1MTQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzo0NTowM1rOFbetNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDo1NDo1M1rOFbyDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA==", "bodyText": "what if we can't load one of these snapshot info? Should we be lenient in that case? Will this o.w. break snapshotting in a way that wasn't broken before?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364358964", "createdAt": "2020-01-08T17:45:03Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwODY3Mg==", "bodyText": "This will brake snapshotting and deleting snapshots if a snap-uuid file doesn't exist.\nI think it's much better to fail this case than to quietly ignore it.\nWe simply should definitely not be making any updates to a corrupted repo ever IMO. This will not break restoring snapshots from the repo and users should simply move to a new repo when running into this kind of corruption. We discussed this before and I think the conclusion was that if a snap- file is missing ... what guarantees do we have some __ data file isn't missing as well and quietly causing any new snapshot that uses it to be corrupted as well.\nWe also already eliminated a number of other spots around repo corruption like this where we were lenient before but aren't any longer lately so I think this fits in with our general approach to corrupted repos just fine.", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364408672", "createdAt": "2020-01-08T19:40:08Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyNDcxMw==", "bodyText": "I'm mainly concerned about the situation in Cloud where repos that got previously broken due to eventual consistencies are not taking any new backups anymore, and require an operator to come in and fix the situation. I have a strong preference here to add special handling for the case where the meta file is not found and be lenient in that case (and assume it's an old style repo).", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364624713", "createdAt": "2020-01-09T09:07:00Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyNzY1NA==", "bodyText": "I'm mainly concerned about the situation in Cloud where repos that got previously broken due to eventual consistencies are not taking any new backups anymore, and require an operator to come in and fix the situation.\n\nI would argue that this is what we want. Assuming you have a snapshot in the index-N for which the snap- blob is missing at the repo root, then what guarantees do you have that the data blobs belonging to that snapshot and are referenced in the shard level index-N do actually exist and you're not just creating and endless stream of corrupted snapshots quietly? IMO this situation should be resolved in Cloud operationally (and if it turns out to be common, automated).", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364627654", "createdAt": "2020-01-09T09:13:44Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzMzgzOA==", "bodyText": "Assuming you have a snapshot in the index-N for which the snap- blob is missing at the repo root, then what guarantees do you have that the data blobs belonging to that snapshot and are referenced in the shard level index-N do actually exist and you're not just creating and endless stream of corrupted snapshots quietly?\n\nI don't see how these two are related. Having a missing top-level snap- blob does not entail that you have missing segment blobs. I therefore don't follow the argument for endless corrupted snapshots. In any case, I don't think it's the responsibility of the snapshot creation / snapshot deletion API to verify unrelated snapshots, which is what this API now suddenly does with the changes here as it happens to need a full top-level scan of the repo. Let's leave this kind of verification to a separate API that checks integrity of the repo.", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364633838", "createdAt": "2020-01-09T09:27:28Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0MTU0MA==", "bodyText": "I don't see how these two are related. Having a missing top-level snap- blob does not entail that you have missing segment blobs. I therefore don't follow the argument for endless corrupted snapshots.\n\nTwo points here:\n\nThe argument isn't specific to S3 here. The absence of a file that is supposed to be there but is not means that the repository is corrupted and other files could be missing for whatever reason (say a broken NFS setup).\nConcretely to the point, If a snap- blob is missing due to eventual consistency issues the sequence of events would be:\n\n\nsnap- and all the other meta and data blobs related to a snapshot were deleted and a new index-N was written\nNext operation failed to pick up index-N due to inconsistent listing and instead picked up index-(N-1) that still included the snapshot and then writes out index-N again still including the snapshot.\nIf the two operations were so close to each other, maybe we also picked up an older shard level index-N blob that references data blobs that are actually gone already? I don't think this can be ruled out at all and is somewhat likely even.\n\n\nI don't think it's the responsibility of the snapshot creation / snapshot deletion API to verify unrelated snapshots, which is what this API now suddenly does with the changes here as it happens to need a full top-level scan of the repo. Let's leave this kind of verification to a separate API that checks integrity of the repo.\n\nAgreed, I don't think it's the responsibility of snapshot create and delete to do any verification outright. But I though consensus was that if either of these operations detected the repository to be in a corrupted state, it wouldn't continue to make updates to the repo. If I remember correctly, the reasoning was precisely that if e.g. an NFS issue makes some files go missing and we continue to modify the repo ignoring/resiliently handling that corruption, then we take away any chance of the operator to fix the storage layer instead of losing those snapshots for good?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364641540", "createdAt": "2020-01-09T09:42:54Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY3NjAxMg==", "bodyText": "@ywelsch as discussed on another channel, I adjusted things to now ignored a missing snap-${uuid}.dat blob and assume old generation in that case.\nI also added a test for this scenario in 7d5d256 (I know it's a little hacky, but I still liked it better than starting to manually mess with files in the repos used by the REST/BwC tests).", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364676012", "createdAt": "2020-01-09T10:54:53Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -351,6 +354,26 @@ public TimeValue timeout() {\n         }, listener::onFailure);\n     }\n \n+    public boolean hasOldVersionSnapshots(String repositoryName, RepositoryData repositoryData, @Nullable SnapshotId excluded) {\n+        final Collection<SnapshotId> snapshotIds = repositoryData.getSnapshotIds();\n+        final boolean hasOldFormatSnapshots;\n+        if (snapshotIds.isEmpty()) {\n+            hasOldFormatSnapshots = false;\n+        } else {\n+            if (repositoryData.shardGenerations().totalShards() > 0) {\n+                hasOldFormatSnapshots = false;\n+            } else {\n+                final Repository repository = repositoriesService.repository(repositoryName);\n+                hasOldFormatSnapshots = snapshotIds.stream().map(repository::getSnapshotInfo).anyMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1ODk2NA=="}, "originalCommit": {"oid": "cc6740e999e6eadb94eb316778019fff3e07238c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjAzNTg2OnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMDoxMlrOFbuATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMDoxMlrOFbuATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwOTYxNA==", "bodyText": "suit -> suite", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364609614", "createdAt": "2020-01-09T08:30:12Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjA0MjM2OnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMjo1NlrOFbuEMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOToxNDoxN1rOFbvHng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxMDYxMQ==", "bodyText": "Use getTestName()", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364610611", "createdAt": "2020-01-09T08:32:56Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyNzg3MA==", "bodyText": "neat :) didn't know about that one", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364627870", "createdAt": "2020-01-09T09:14:17Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxMDYxMQ=="}, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjA3MTUzOnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo0MjozOVrOFbuU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOToxNDowOFrOFbvHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNDg4MA==", "bodyText": "I think it deserves its own utility method, something like assertSnapshotStatusSuccessful()", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364614880", "createdAt": "2020-01-09T08:42:39Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshotsIncludingToDelete = listSnapshots(repoName);\n+            // Every step creates one snapshot and we have to add one more for the temporary snapshot\n+            assertThat(snapshotsIncludingToDelete, hasSize(TEST_STEP.ordinal() + 1 + 1));\n+            assertThat(snapshotsIncludingToDelete.stream().map(\n+                sn -> (String) sn.get(\"snapshot\")).collect(Collectors.toList()), hasItem(snapshotToDeleteName));\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                for (TestStep value : TestStep.values()) {\n+                    ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + value, shards);\n+                }\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    public void testReadOnlyRepo() throws IOException {\n+        final String repoName = \"testReadOnlyRepo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            final boolean readOnly = TEST_STEP.ordinal() > 1; // only restore from read-only repo in steps 3 and 4\n+            createRepository(client, repoName, readOnly);\n+            if (readOnly == false) {\n+                createIndex(client, \"test-index\", shards);\n+                createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            }\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            switch (TEST_STEP) {\n+                case STEP1_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(1));\n+                    break;\n+                case STEP2_NEW_CLUSTER:\n+                case STEP4_NEW_CLUSTER:\n+                case STEP3_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(2));\n+                    break;\n+            }\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+            }\n+        }\n+    }\n+\n+    public void testUpgradeMovesRepoToNewMetaVersion() throws IOException {\n+        if (TEST_STEP.ordinal() > 1) {\n+            // Only testing the first 2 steps here\n+            return;\n+        }\n+        final String repoName = \"testUpgradeMovesRepoToNewMetaVersion\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            // Every step creates one snapshot\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyNzgxNg==", "bodyText": "Sounds good :) Done", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364627816", "createdAt": "2020-01-09T09:14:08Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshotsIncludingToDelete = listSnapshots(repoName);\n+            // Every step creates one snapshot and we have to add one more for the temporary snapshot\n+            assertThat(snapshotsIncludingToDelete, hasSize(TEST_STEP.ordinal() + 1 + 1));\n+            assertThat(snapshotsIncludingToDelete.stream().map(\n+                sn -> (String) sn.get(\"snapshot\")).collect(Collectors.toList()), hasItem(snapshotToDeleteName));\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                for (TestStep value : TestStep.values()) {\n+                    ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + value, shards);\n+                }\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    public void testReadOnlyRepo() throws IOException {\n+        final String repoName = \"testReadOnlyRepo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            final boolean readOnly = TEST_STEP.ordinal() > 1; // only restore from read-only repo in steps 3 and 4\n+            createRepository(client, repoName, readOnly);\n+            if (readOnly == false) {\n+                createIndex(client, \"test-index\", shards);\n+                createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            }\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            switch (TEST_STEP) {\n+                case STEP1_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(1));\n+                    break;\n+                case STEP2_NEW_CLUSTER:\n+                case STEP4_NEW_CLUSTER:\n+                case STEP3_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(2));\n+                    break;\n+            }\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+            }\n+        }\n+    }\n+\n+    public void testUpgradeMovesRepoToNewMetaVersion() throws IOException {\n+        if (TEST_STEP.ordinal() > 1) {\n+            // Only testing the first 2 steps here\n+            return;\n+        }\n+        final String repoName = \"testUpgradeMovesRepoToNewMetaVersion\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            // Every step creates one snapshot\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNDg4MA=="}, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjA4MDM3OnYy", "diffSide": "RIGHT", "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo0NTo1M1rOFbuaHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOToxNDowNlrOFbvHTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNjIyMw==", "bodyText": "Maybe check that the deletion is acked?", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364616223", "createdAt": "2020-01-09T08:45:53Z", "author": {"login": "tlrx"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshotsIncludingToDelete = listSnapshots(repoName);\n+            // Every step creates one snapshot and we have to add one more for the temporary snapshot\n+            assertThat(snapshotsIncludingToDelete, hasSize(TEST_STEP.ordinal() + 1 + 1));\n+            assertThat(snapshotsIncludingToDelete.stream().map(\n+                sn -> (String) sn.get(\"snapshot\")).collect(Collectors.toList()), hasItem(snapshotToDeleteName));\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                for (TestStep value : TestStep.values()) {\n+                    ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + value, shards);\n+                }\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    public void testReadOnlyRepo() throws IOException {\n+        final String repoName = \"testReadOnlyRepo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            final boolean readOnly = TEST_STEP.ordinal() > 1; // only restore from read-only repo in steps 3 and 4\n+            createRepository(client, repoName, readOnly);\n+            if (readOnly == false) {\n+                createIndex(client, \"test-index\", shards);\n+                createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            }\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            switch (TEST_STEP) {\n+                case STEP1_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(1));\n+                    break;\n+                case STEP2_NEW_CLUSTER:\n+                case STEP4_NEW_CLUSTER:\n+                case STEP3_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(2));\n+                    break;\n+            }\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+            }\n+        }\n+    }\n+\n+    public void testUpgradeMovesRepoToNewMetaVersion() throws IOException {\n+        if (TEST_STEP.ordinal() > 1) {\n+            // Only testing the first 2 steps here\n+            return;\n+        }\n+        final String repoName = \"testUpgradeMovesRepoToNewMetaVersion\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            // Every step creates one snapshot\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP1_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else {\n+                deleteSnapshot(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+                createSnapshot(client, repoName, \"snapshot-1\");\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-1\", shards);\n+                deleteSnapshot(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER);\n+                createSnapshot(client, repoName, \"snapshot-2\");\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-2\", shards);\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    private void deleteSnapshot(RestHighLevelClient client, String repoName, String name) throws IOException {\n+        client.snapshot().delete(new DeleteSnapshotRequest(repoName, name), RequestOptions.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyNzc4OQ==", "bodyText": "Sounds good :) Done", "url": "https://github.com/elastic/elasticsearch/pull/50692#discussion_r364627789", "createdAt": "2020-01-09T09:14:06Z", "author": {"login": "original-brownbear"}, "path": "qa/repository-multi-version/src/test/java/org/elasticsearch/upgrades/MultiVersionRepositoryAccessIT.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.upgrades;\n+\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotStatus;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n+import org.elasticsearch.client.Node;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.DeprecationHandler;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.snapshots.RestoreInfo;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+\n+/**\n+ * Tests that verify that a snapshot repository is not getting corrupted and continues to function properly when accessed by multiple\n+ * clusters of different versions. Concretely this test suit is simulating the following scenario:\n+ * <ul>\n+ *     <li>Start and run against a cluster in an old version: {@link TestStep#STEP1_OLD_CLUSTER}</li>\n+ *     <li>Start and run against a cluster running the current version: {@link TestStep#STEP2_NEW_CLUSTER}</li>\n+ *     <li>Run against the old version cluster from the first step: {@link TestStep#STEP3_OLD_CLUSTER}</li>\n+ *     <li>Run against the current version cluster from the second step: {@link TestStep#STEP4_NEW_CLUSTER}</li>\n+ * </ul>\n+ * TODO: Add two more steps: delete all old version snapshots from the repository, then downgrade again and verify that the repository\n+ *       is not being corrupted. This requires first merging the logic for reading the min_version field in RepositoryData back to 7.6.\n+ */\n+public class MultiVersionRepositoryAccessIT extends ESRestTestCase {\n+\n+    private enum TestStep {\n+        STEP1_OLD_CLUSTER(\"step1\"),\n+        STEP2_NEW_CLUSTER(\"step2\"),\n+        STEP3_OLD_CLUSTER(\"step3\"),\n+        STEP4_NEW_CLUSTER(\"step4\");\n+\n+        private final String name;\n+\n+        TestStep(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public static TestStep parse(String value) {\n+            switch (value) {\n+                case \"step1\":\n+                    return STEP1_OLD_CLUSTER;\n+                case \"step2\":\n+                    return STEP2_NEW_CLUSTER;\n+                case \"step3\":\n+                    return STEP3_OLD_CLUSTER;\n+                case \"step4\":\n+                    return STEP4_NEW_CLUSTER;\n+                default:\n+                    throw new AssertionError(\"unknown test step: \" + value);\n+            }\n+        }\n+    }\n+\n+    protected static final TestStep TEST_STEP = TestStep.parse(System.getProperty(\"tests.rest.suite\"));\n+\n+    @Override\n+    protected boolean preserveSnapshotsUponCompletion() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean preserveReposUponCompletion() {\n+        return true;\n+    }\n+\n+    public void testCreateAndRestoreSnapshot() throws IOException {\n+        final String repoName = \"testCreateAndRestoreSnapshot\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final String snapshotToDeleteName = \"snapshot-to-delete\";\n+            // Create a snapshot and delete it right away again to test the impact of each version's cleanup functionality that is run\n+            // as part of the snapshot delete\n+            createSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshotsIncludingToDelete = listSnapshots(repoName);\n+            // Every step creates one snapshot and we have to add one more for the temporary snapshot\n+            assertThat(snapshotsIncludingToDelete, hasSize(TEST_STEP.ordinal() + 1 + 1));\n+            assertThat(snapshotsIncludingToDelete.stream().map(\n+                sn -> (String) sn.get(\"snapshot\")).collect(Collectors.toList()), hasItem(snapshotToDeleteName));\n+            deleteSnapshot(client, repoName, snapshotToDeleteName);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                for (TestStep value : TestStep.values()) {\n+                    ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + value, shards);\n+                }\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    public void testReadOnlyRepo() throws IOException {\n+        final String repoName = \"testReadOnlyRepo\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            final boolean readOnly = TEST_STEP.ordinal() > 1; // only restore from read-only repo in steps 3 and 4\n+            createRepository(client, repoName, readOnly);\n+            if (readOnly == false) {\n+                createIndex(client, \"test-index\", shards);\n+                createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            }\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            switch (TEST_STEP) {\n+                case STEP1_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(1));\n+                    break;\n+                case STEP2_NEW_CLUSTER:\n+                case STEP4_NEW_CLUSTER:\n+                case STEP3_OLD_CLUSTER:\n+                    assertThat(snapshots, hasSize(2));\n+                    break;\n+            }\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP3_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else if (TEST_STEP == TestStep.STEP4_NEW_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+            }\n+        }\n+    }\n+\n+    public void testUpgradeMovesRepoToNewMetaVersion() throws IOException {\n+        if (TEST_STEP.ordinal() > 1) {\n+            // Only testing the first 2 steps here\n+            return;\n+        }\n+        final String repoName = \"testUpgradeMovesRepoToNewMetaVersion\";\n+        try (RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(adminClient().getNodes().toArray(new Node[0])))) {\n+            final int shards = 3;\n+            createIndex(client, \"test-index\", shards);\n+            createRepository(client, repoName, false);\n+            createSnapshot(client, repoName, \"snapshot-\" + TEST_STEP);\n+            final List<Map<String, Object>> snapshots = listSnapshots(repoName);\n+            // Every step creates one snapshot\n+            assertThat(snapshots, hasSize(TEST_STEP.ordinal() + 1));\n+            final SnapshotsStatusResponse statusResponse = client.snapshot().status(new SnapshotsStatusRequest(repoName,\n+                snapshots.stream().map(sn -> (String) sn.get(\"snapshot\")).toArray(String[]::new)), RequestOptions.DEFAULT);\n+            for (SnapshotStatus status : statusResponse.getSnapshots()) {\n+                assertThat(status.getShardsStats().getFailedShards(), is(0));\n+            }\n+            if (TEST_STEP == TestStep.STEP1_OLD_CLUSTER) {\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER, shards);\n+            } else {\n+                deleteSnapshot(client, repoName, \"snapshot-\" + TestStep.STEP1_OLD_CLUSTER);\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER, shards);\n+                createSnapshot(client, repoName, \"snapshot-1\");\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-1\", shards);\n+                deleteSnapshot(client, repoName, \"snapshot-\" + TestStep.STEP2_NEW_CLUSTER);\n+                createSnapshot(client, repoName, \"snapshot-2\");\n+                ensureSnapshotRestoreWorks(client, repoName, \"snapshot-2\", shards);\n+            }\n+        } finally {\n+            deleteRepository(repoName);\n+        }\n+    }\n+\n+    private void deleteSnapshot(RestHighLevelClient client, String repoName, String name) throws IOException {\n+        client.snapshot().delete(new DeleteSnapshotRequest(repoName, name), RequestOptions.DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNjIyMw=="}, "originalCommit": {"oid": "f1cda9ddbde710db0a7cb92fdc6da3485695c102"}, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4895, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}