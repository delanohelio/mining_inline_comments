{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzQzMDYx", "number": 56841, "title": "Create plugin for yamlTest task", "bodyText": "This commit creates a new Gradle plugin to provide a separate task name\nand source set for running YAML based REST tests. The only project\nconverted to use the new plugin in this PR is distribution/archives/integ-test-zip.\nFor which the testing has been moved to :rest-api-spec since it makes the most\nsense and it avoids a small but awkward change to the distribution plugin.\nThe remaining cases in modules, plugins, and x-pack will be handled in followups.\nThis plugin is distinctly different from the plugin introduced in #55896 since\nthe YAML REST tests are intended to be black box tests over HTTP. As such they\nshould not (by default) have access to the classpath for that which they are testing.\nThe YAML based REST tests will be moved to separate source sets (yamlRestTest).\nThe which source is the target for the test resources is dependent on if this\nnew plugin is applied. If it is not applied, it will default to the test source\nset.\nFurther, this introduces a breaking change for plugin developers that\nuse the YAML testing framework. They will now need to either use the new source set\nand matching task, or configure the rest resources to use the old \"test\" source set that\nmatches the  old integTest task. (The former should be preferred).\nAs part of this change (which is also breaking for plugin developers) the\nrest resources plugin has been removed from the build plugin and now requires\neither explicit application or application via the new YAML REST test plugin.\nPlugin developers should be able to fix the breaking changes to the YAML tests\nby adding apply plugin: 'elasticsearch.yaml-rest-test' and moving the YAML tests\nunder a yamlRestTest folder (instead of test)", "createdAt": "2020-05-15T18:37:54Z", "url": "https://github.com/elastic/elasticsearch/pull/56841", "merged": true, "mergeCommit": {"oid": "333a5d8cdf2783664d1d5a80d0b2534d6bbe635d"}, "closed": true, "closedAt": "2020-07-06T17:13:03Z", "author": {"login": "jakelandis"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchl8yaAH2gAyNDE4NzQzMDYxOjZmYjE2OGRmNmJmYjFmNTg5Mjk0NmQ0NWY4NGJmMzQyN2E2Y2IzOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyRgu1AH2gAyNDE4NzQzMDYxOjA3ZGRlZTViMDYyY2MxZmNkOGY4NDYwMjE0ZTE0ODdlNTdlMjZkMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6fb168df6bfb1f5892946d45f84bf3427a6cb391", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/6fb168df6bfb1f5892946d45f84bf3427a6cb391", "committedDate": "2020-05-15T17:58:28Z", "message": "introduce plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ae3626e09dee4d480dd7c2f579f85fdcb62f90", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/87ae3626e09dee4d480dd7c2f579f85fdcb62f90", "committedDate": "2020-05-15T18:26:01Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9baf83902291653bd8e3236cec33ec309a71e1a0", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/9baf83902291653bd8e3236cec33ec309a71e1a0", "committedDate": "2020-05-15T18:32:21Z", "message": "add another todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76cf101efa53bea1b161340e493df1a8663bf8d0", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/76cf101efa53bea1b161340e493df1a8663bf8d0", "committedDate": "2020-05-15T18:36:44Z", "message": "clean up comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/7e92d812bf3d55e0159adfd7081c05d415c50139", "committedDate": "2020-05-15T19:03:00Z", "message": "fix runner setup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTQ3MDcw", "url": "https://github.com/elastic/elasticsearch/pull/56841#pullrequestreview-413947070", "createdAt": "2020-05-18T21:20:37Z", "commit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMDozN1rOGXH4NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNTowM1rOGXIQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5OTUwOQ==", "bodyText": "FWIW, there's an open issue for this. Perhaps we can link it here.\n#47804", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426899509", "createdAt": "2020-05-18T21:20:37Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java", "diffHunk": "@@ -36,6 +36,8 @@\n     private static final String TESTS_CLUSTER = \"tests.cluster\";\n     private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n \n+    // TODO: refactor this so that work is not done in constructor and find usages and register them, not create them\n+    // See: https://docs.gradle.org/current/userguide/task_configuration_avoidance.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5OTkzNw==", "bodyText": "We should use orElseThrow() here and supply an exception with an appropriate message.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426899937", "createdAt": "2020-05-18T21:21:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -109,7 +111,8 @@ public FileTree getInputDir() {\n \n     @OutputDirectory\n     public File getOutputDir() {\n-        return new File(getTestSourceSet().getOutput().getResourcesDir(), REST_API_PREFIX);\n+        assert Util.getTestSourceSet(getProject()).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMTI2MQ==", "bodyText": "As mentioned in my comment, I don't think we need to support this case. We should require that all YAML tests live in the appropriate source set. This awkward conditional stuff is a great example of why.\nAlso, what happens if a project has both tests types? Which source set should this method return? As part of splitting these types of tests up there is no longer a canonical \"test source set\", as any given project might (and likely will) have several.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426901261", "createdAt": "2020-05-18T21:24:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/Util.java", "diffHunk": "@@ -129,15 +129,39 @@ public static FileTree getJavaTestAndMainSourceResources(Project project, Action\n     }\n \n     /**\n+     * Returns the source set for either the YamlTests or the standard test source set. Preference goes to YamlTest source set if it exists.\n+     *\n      * @param project The project to look for test Java resources.\n      * @return An Optional that contains the Java test SourceSet if it exists.\n      */\n+    public static Optional<SourceSet> getTestSourceSet(Project project) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMjA0OQ==", "bodyText": "We shouldn't have to do this. Let's just apply the correct plugin here, which is going to be the ElasticsearchJavaPlugin most likely. We don't want to have users have to worry about this.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426902049", "createdAt": "2020-05-18T21:26:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDQxMQ==", "bodyText": "For now we need to check if BuildParams.isInternal here and use an artifact dependency if not.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426904411", "createdAt": "2020-05-18T21:31:47Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDczNg==", "bodyText": "Shouldn't the PluginBuildPlugin be doing this?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426904736", "createdAt": "2020-05-18T21:32:32Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTU2Ng==", "bodyText": "Let's remove this. I don't think it should go here, plus using findByName is going to eagerly realize the task.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426905566", "createdAt": "2020-05-18T21:34:27Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTgxMQ==", "bodyText": "What's creating the precommit task in this scenario? Is it some other plugin we're applying?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r426905811", "createdAt": "2020-05-18T21:35:03Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlTestPlugin.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests. This will adda\n+ */\n+public class YamlTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        if (project.getPluginManager().hasPlugin(\"elasticsearch.build\") == false\n+            && project.getPluginManager().hasPlugin(\"elasticsearch.standalone-rest-test\") == false) {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.build or elasticsearch.standalone-rest-test plugin \" + \"must be applied before the YAML test plugin\"\n+            );\n+        }\n+\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        RestIntegTestTask yamlTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // run test tasks first if they exist since they are presumably faster and less resources intensive\n+        Task testTask = project.getTasks().findByName(\"test\");\n+        if (testTask != null) {\n+            yamlTestTask.mustRunAfter(testTask);\n+        }\n+\n+        // validation of the rest specification is wired to precommit, so ensure that runs first\n+        yamlTestTask.mustRunAfter(project.getTasks().getByName(\"precommit\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e92d812bf3d55e0159adfd7081c05d415c50139"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ef96f8e18d723852d0bb3cf660254e03959fef", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/d6ef96f8e18d723852d0bb3cf660254e03959fef", "committedDate": "2020-06-08T17:38:25Z", "message": "Merge remote-tracking branch 'upstream/master' into yamlTest_part1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84939b2672c408b2f64ef39bb94456e8798ca967", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/84939b2672c408b2f64ef39bb94456e8798ca967", "committedDate": "2020-06-08T19:38:11Z", "message": "review changes and move core tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b815cce6ebafe8773685694f708ea8cab342e08d", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/b815cce6ebafe8773685694f708ea8cab342e08d", "committedDate": "2020-06-08T19:44:39Z", "message": "checkstlyle and spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a71bc27fd0e07f4d6b095465d84bedb9f95375", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/d3a71bc27fd0e07f4d6b095465d84bedb9f95375", "committedDate": "2020-06-08T21:15:12Z", "message": "minor text changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc8f3ec4c3b18286f4c2cf4bfa57c25cda112b8", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/7fc8f3ec4c3b18286f4c2cf4bfa57c25cda112b8", "committedDate": "2020-06-08T21:58:59Z", "message": "remove temp code infavor explicit config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ccd5d836e1cb8665676b36f56d51bbc8b7f1337", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ccd5d836e1cb8665676b36f56d51bbc8b7f1337", "committedDate": "2020-06-08T22:56:45Z", "message": "remove rest-resources from build plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f37365198e7922d45da8c103f19c9547586b92", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/35f37365198e7922d45da8c103f19c9547586b92", "committedDate": "2020-06-08T23:26:23Z", "message": "update the example projects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282c160455db466f000c1ff6873836f2b0b41113", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/282c160455db466f000c1ff6873836f2b0b41113", "committedDate": "2020-06-08T23:43:03Z", "message": "more missed locations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97896f6a33fcfdeff11f0cb71b346f4fee1c17e", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/a97896f6a33fcfdeff11f0cb71b346f4fee1c17e", "committedDate": "2020-06-09T00:09:31Z", "message": "fix docker tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a43d3e753e31c2019c5e9f0621526375f58400ba", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/a43d3e753e31c2019c5e9f0621526375f58400ba", "committedDate": "2020-06-09T13:27:47Z", "message": "fix s3 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b11a424ccdaf0b2140702dc36598d193ba7310e", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/4b11a424ccdaf0b2140702dc36598d193ba7310e", "committedDate": "2020-06-09T15:02:53Z", "message": "fix some x-pack tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjU5OTEx", "url": "https://github.com/elastic/elasticsearch/pull/56841#pullrequestreview-427659911", "createdAt": "2020-06-10T01:58:45Z", "commit": {"oid": "4b11a424ccdaf0b2140702dc36598d193ba7310e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTo1ODo0NVrOGhiPaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTo1ODo0NVrOGhiPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzE5Mw==", "bodyText": "I just realized that moving these tests out of this project and into :rest-api-spec has the side effect of changing\nfrom: running these tests if anything changes (due to the dependsOn assemble)\nto: only running the tests if the any of the actual tests change.\nDo we want to keep the behavior of always running the core rest tests ?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r437817193", "createdAt": "2020-06-10T01:58:45Z", "author": {"login": "jakelandis"}, "path": "distribution/archives/build.gradle", "diffHunk": "@@ -330,12 +330,6 @@ configure(subprojects.findAll { it.name == 'integ-test-zip' }) {\n \n   group = \"org.elasticsearch.distribution.integ-test-zip\"\n \n-  restResources {\n-    restTests {\n-      includeCore '*'\n-    }\n-  }\n-\n   integTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b11a424ccdaf0b2140702dc36598d193ba7310e"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7b21891409963ad32e81698b6004ad2aef6e6f7", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/c7b21891409963ad32e81698b6004ad2aef6e6f7", "committedDate": "2020-06-23T16:34:08Z", "message": "Merge branch 'master' into yamlTest_part1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/53ae3934de8355acd70ad66a53636ca6188849cb", "committedDate": "2020-06-23T21:29:32Z", "message": "Merge branch 'master' into yamlTest_part1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjc3NDg5", "url": "https://github.com/elastic/elasticsearch/pull/56841#pullrequestreview-440277489", "createdAt": "2020-06-30T18:24:14Z", "commit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNDoxNFrOGrJIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODozNjoyMlrOGrJjUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTU4OA==", "bodyText": "Do we have to define this here and in each of the task implementations? Can we have this default just defined on place?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447891588", "createdAt": "2020-06-30T18:24:14Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/RestResourcesExtension.java", "diffHunk": "@@ -32,6 +32,7 @@\n \n     final RestResourcesSpec restApi;\n     final RestResourcesSpec restTests;\n+    private String sourceSetName = \"yamlRestTest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NDY0OA==", "bodyText": "The compile configuration is deprecated, please use \"implementation\" instead. Also, no need to construct the configuration name, you can request it via SourceSet.getImplementationConfigurationName().", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447894648", "createdAt": "2020-06-30T18:29:13Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NTI3Mw==", "bodyText": "We should use RestIntegTestTask.runner() method to configure the test runner task rather than fetch it by name.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447895273", "createdAt": "2020-06-30T18:30:19Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Njc2NQ==", "bodyText": "We should key this off the application of PluginBuildPlugin, not by a particular task. For example.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447896765", "createdAt": "2020-06-30T18:33:18Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA5OQ==", "bodyText": "Can we move this up where we configure other aspects of this task?", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447897099", "createdAt": "2020-06-30T18:33:57Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/YamlRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.plugin.PluginPropertiesExtension;\n+import org.elasticsearch.gradle.test.RestIntegTestTask;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.bundling.Zip;\n+\n+/**\n+ * Apply this plugin to run the YAML based REST tests.\n+ */\n+public class YamlRestTestPlugin implements Plugin<Project> {\n+\n+    public static final String SOURCE_SET_NAME = \"yamlRestTest\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        // yaml Rest tests require a Java test runner\n+        project.getPluginManager().apply(ElasticsearchJavaPlugin.class);\n+        // to spin up the external cluster\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        // to copy around the yaml tests and json spec\n+        project.getPluginManager().apply(RestResourcesPlugin.class);\n+\n+        // note - source sets are not created via org.elasticsearch.gradle.util.GradleUtils.addTestSourceSet since unlike normal tests\n+        // we only want the yamlRestTestSourceSet on the classpath by default. The yaml tests should be pure black box testing over HTTP and\n+        // such it should not need the main class on the class path. Also, there are some special setup steps unique to YAML REST tests.\n+\n+        // create source set\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        SourceSet yamlTestSourceSet = sourceSets.create(SOURCE_SET_NAME);\n+\n+        // create task - note can not use .register due to the work in RestIntegTestTask's constructor :(\n+        // see: https://github.com/elastic/elasticsearch/issues/47804\n+        RestIntegTestTask yamlRestTestTask = project.getTasks()\n+            .create(\n+                SOURCE_SET_NAME,\n+                RestIntegTestTask.class,\n+                task -> { task.dependsOn(project.getTasks().getByName(\"copyRestApiSpecsTask\")); }\n+            );\n+        yamlRestTestTask.setGroup(JavaBasePlugin.VERIFICATION_GROUP);\n+        yamlRestTestTask.setDescription(\"Runs the YAML based REST tests against an external cluster\");\n+\n+        // setup task dependency\n+        if (BuildParams.isInternal()) {\n+            project.getDependencies().add(SOURCE_SET_NAME + \"Compile\", project.project(\":test:framework\"));\n+        } else {\n+            project.getDependencies()\n+                .add(SOURCE_SET_NAME + \"Compile\", \"org.elasticsearch.test:framework:\" + VersionProperties.getElasticsearch());\n+        }\n+\n+        // setup the runner\n+        RestTestRunnerTask runner = (RestTestRunnerTask) project.getTasks().getByName(yamlRestTestTask.getName() + \"Runner\");\n+        runner.setTestClassesDirs(yamlTestSourceSet.getOutput().getClassesDirs());\n+        runner.setClasspath(yamlTestSourceSet.getRuntimeClasspath());\n+\n+        // if this a module or plugin, it may have an associated zip file with it's contents, add that to the test cluster\n+        boolean isModule = project.getPath().startsWith(\":modules:\");\n+        Zip bundle = (Zip) project.getTasks().findByName(\"bundlePlugin\");\n+        if (bundle != null) {\n+            yamlRestTestTask.dependsOn(bundle);\n+            if (isModule) {\n+                runner.getClusters().forEach(c -> c.module(bundle.getArchiveFile()));\n+            } else {\n+                runner.getClusters().forEach(c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile())));\n+            }\n+        }\n+\n+        // es-plugins may declare dependencies on additional modules, add those to the test cluster too.\n+        project.afterEvaluate(p -> {\n+            PluginPropertiesExtension pluginPropertiesExtension = project.getExtensions().findByType(PluginPropertiesExtension.class);\n+            if (pluginPropertiesExtension != null) { // not all projects are defined as plugins\n+                pluginPropertiesExtension.getExtendedPlugins().forEach(pluginName -> {\n+                    Project extensionProject = project.getProject().findProject(\":modules:\" + pluginName);\n+                    if (extensionProject != null) { // extension plugin may be defined, but not required to be a module\n+                        Zip extensionBundle = (Zip) extensionProject.getTasks().getByName(\"bundlePlugin\");\n+                        yamlRestTestTask.dependsOn(extensionBundle);\n+                        runner.getClusters().forEach(c -> c.module(extensionBundle.getArchiveFile()));\n+                    }\n+                });\n+            }\n+        });\n+\n+        // setup IDE\n+        GradleUtils.setupIdeForTestSourceSet(project, yamlTestSourceSet);\n+\n+        // make the new test run after unit tests\n+        yamlRestTestTask.mustRunAfter(project.getTasks().named(\"test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODQ0OQ==", "bodyText": "perhaps to make the migration less cumbersome we should default the rest resources plugin to continue to use the test source set, and only set it to yamlRestTest when the yaml rest test plugin is applied to a project.", "url": "https://github.com/elastic/elasticsearch/pull/56841#discussion_r447898449", "createdAt": "2020-06-30T18:36:22Z", "author": {"login": "mark-vieira"}, "path": "client/rest-high-level/build.gradle", "diffHunk": "@@ -30,6 +30,7 @@ group = 'org.elasticsearch.client'\n archivesBaseName = 'elasticsearch-rest-high-level-client'\n \n restResources {\n+  sourceSetName 'test'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ae3934de8355acd70ad66a53636ca6188849cb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6289b00b7fb71856968e2a6fa543202f4aa8cf7d", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/6289b00b7fb71856968e2a6fa543202f4aa8cf7d", "committedDate": "2020-07-01T00:23:17Z", "message": "review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02afa305711b7118a64ced93df1607097a5defcb", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/02afa305711b7118a64ced93df1607097a5defcb", "committedDate": "2020-07-01T00:34:48Z", "message": "minor review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceaeca383ab4f2d64acea598beb49e35528a4cc3", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/ceaeca383ab4f2d64acea598beb49e35528a4cc3", "committedDate": "2020-07-01T01:14:15Z", "message": "Merge branch 'master' into yamlTest_part1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a6f9eca711ba0895c204a1bbd4ae4cce6e16c2", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7a6f9eca711ba0895c204a1bbd4ae4cce6e16c2", "committedDate": "2020-07-01T02:17:39Z", "message": "ensure core specs are copied for x-pack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22c55da58d856a92002362e20fc1815e7f322a25", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/22c55da58d856a92002362e20fc1815e7f322a25", "committedDate": "2020-07-01T16:27:50Z", "message": "remove gymnastics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db94130fe326558b89706d5ec5052973295be1ff", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/db94130fe326558b89706d5ec5052973295be1ff", "committedDate": "2020-07-01T16:51:04Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b20a16662a871b3e557391e2a1c5b379733c50a0", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/b20a16662a871b3e557391e2a1c5b379733c50a0", "committedDate": "2020-07-01T17:50:14Z", "message": "fix newly introduced project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01990fa3d659d0ea932c94f7f9181b6c4e15add9", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/01990fa3d659d0ea932c94f7f9181b6c4e15add9", "committedDate": "2020-07-01T18:49:49Z", "message": "Merge branch 'master' into yamlTest_part1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ddee5b062cc1fcd8f8460214e1487e57e26d16", "author": {"user": {"login": "jakelandis", "name": "Jake Landis"}}, "url": "https://github.com/elastic/elasticsearch/commit/07ddee5b062cc1fcd8f8460214e1487e57e26d16", "committedDate": "2020-07-06T13:46:26Z", "message": "Merge remote-tracking branch 'upstream/master' into yamlTest_part1"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4803, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}