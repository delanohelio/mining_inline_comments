{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTMwNjkx", "number": 54400, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1OToxNFrODsqQ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzowMzoxNFrODsqW8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTU2Mzg1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1OToxNFrOF9oedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjowMjowNFrOF9w8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg==", "bodyText": "maybe open for discussion: return null only if he source is null and exception for the rest of params that should not be null?", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400170612", "createdAt": "2020-03-30T12:59:14Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMzQ0OQ==", "bodyText": "#54419", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400303449", "createdAt": "2020-03-30T15:54:16Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg=="}, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwOTI5MQ==", "bodyText": "Sound good. Looks like another pattern that could be extracted/reused depending on which way we want to proceed with null handling for consistency between all functions.", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400309291", "createdAt": "2020-03-30T16:02:04Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg=="}, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTU3MjMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzowMToxOVrOF9oj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NTozOFrOF9wpJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MjAwMw==", "bodyText": "nit: just a suggestion maybe extract the function to avoid repetition, for example:\nhttps://github.com/elastic/elasticsearch/pull/54380/files#diff-5ad1821091fb7e7473cbdfdded44fbcbR52", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400172003", "createdAt": "2020-03-30T13:01:19Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDQyMA==", "bodyText": "I believe that, at one point after all these string functions are done, we need to refactor them and extract some common code in a base class, if possible of course.", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400304420", "createdAt": "2020-03-30T15:55:38Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MjAwMw=="}, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTU3OTM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzowMzoxNFrOF9oocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxNzo0OFrOF9xm8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MzE3MQ==", "bodyText": "should include the pattern in both equals and hashCode?", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400173171", "createdAt": "2020-03-30T13:03:14Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);\n+        }\n+\n+        return source.toString().toLowerCase(Locale.ROOT).startsWith(pattern.toString().toLowerCase(Locale.ROOT));\n+    }\n+    \n+    protected Processor source() {\n+        return source;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        \n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        \n+        return Objects.equals(source(), ((StartsWithFunctionProcessor) obj).source());\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMDI0Mw==", "bodyText": "Good catch. Will fix.", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400320243", "createdAt": "2020-03-30T16:17:48Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);\n+        }\n+\n+        return source.toString().toLowerCase(Locale.ROOT).startsWith(pattern.toString().toLowerCase(Locale.ROOT));\n+    }\n+    \n+    protected Processor source() {\n+        return source;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        \n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        \n+        return Objects.equals(source(), ((StartsWithFunctionProcessor) obj).source());\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MzE3MQ=="}, "originalCommit": {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4058, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}