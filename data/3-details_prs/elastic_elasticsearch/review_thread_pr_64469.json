{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MDAwNTA0", "number": 64469, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyODozOVrOE1TSVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyODozOVrOE1TSVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzI1OTc1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/StringTermsTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyODozOVrOHtf9TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoyOTozN1rOHt86-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTU2NA==", "bodyText": "Can dict be a local variable?", "url": "https://github.com/elastic/elasticsearch/pull/64469#discussion_r517471564", "createdAt": "2020-11-04T16:28:39Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/StringTermsTests.java", "diffHunk": "@@ -34,13 +34,26 @@\n import java.util.Set;\n \n public class StringTermsTests extends InternalTermsTestCase {\n+    private BytesRef[] dict;\n+\n+    public synchronized void generateRandomDict() {\n+        if (dict == null) {\n+            Set<BytesRef> terms = new HashSet<>();\n+            int numTerms = randomIntBetween(2, 100);\n+            for (int i = 0; i < numTerms; i++) {\n+                terms.add(new BytesRef(randomAlphaOfLength(10)));\n+            }\n+            dict = terms.stream().toArray(BytesRef[]::new);\n+        }\n+    }\n \n     @Override\n     protected InternalTerms<?, ?> createTestInstance(String name,\n                                                      Map<String, Object> metadata,\n                                                      InternalAggregations aggregations,\n                                                      boolean showTermDocCountError,\n                                                      long docCountError) {\n+        generateRandomDict();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7e5eaa26e1c7a2a8c8f3d36bc525e06950b8cc5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3NDcxMw==", "bodyText": "I want to ensure that there are some equal keys in the instances that we try to merge so I build a single dictionary for the entire test suite. It could be easier if the class was not used by the AggregationTests.", "url": "https://github.com/elastic/elasticsearch/pull/64469#discussion_r517474713", "createdAt": "2020-11-04T16:33:09Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/StringTermsTests.java", "diffHunk": "@@ -34,13 +34,26 @@\n import java.util.Set;\n \n public class StringTermsTests extends InternalTermsTestCase {\n+    private BytesRef[] dict;\n+\n+    public synchronized void generateRandomDict() {\n+        if (dict == null) {\n+            Set<BytesRef> terms = new HashSet<>();\n+            int numTerms = randomIntBetween(2, 100);\n+            for (int i = 0; i < numTerms; i++) {\n+                terms.add(new BytesRef(randomAlphaOfLength(10)));\n+            }\n+            dict = terms.stream().toArray(BytesRef[]::new);\n+        }\n+    }\n \n     @Override\n     protected InternalTerms<?, ?> createTestInstance(String name,\n                                                      Map<String, Object> metadata,\n                                                      InternalAggregations aggregations,\n                                                      boolean showTermDocCountError,\n                                                      long docCountError) {\n+        generateRandomDict();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTU2NA=="}, "originalCommit": {"oid": "f7e5eaa26e1c7a2a8c8f3d36bc525e06950b8cc5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4NDkxNg==", "bodyText": "Could you override randomResultsToReduce?", "url": "https://github.com/elastic/elasticsearch/pull/64469#discussion_r517484916", "createdAt": "2020-11-04T16:47:39Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/StringTermsTests.java", "diffHunk": "@@ -34,13 +34,26 @@\n import java.util.Set;\n \n public class StringTermsTests extends InternalTermsTestCase {\n+    private BytesRef[] dict;\n+\n+    public synchronized void generateRandomDict() {\n+        if (dict == null) {\n+            Set<BytesRef> terms = new HashSet<>();\n+            int numTerms = randomIntBetween(2, 100);\n+            for (int i = 0; i < numTerms; i++) {\n+                terms.add(new BytesRef(randomAlphaOfLength(10)));\n+            }\n+            dict = terms.stream().toArray(BytesRef[]::new);\n+        }\n+    }\n \n     @Override\n     protected InternalTerms<?, ?> createTestInstance(String name,\n                                                      Map<String, Object> metadata,\n                                                      InternalAggregations aggregations,\n                                                      boolean showTermDocCountError,\n                                                      long docCountError) {\n+        generateRandomDict();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTU2NA=="}, "originalCommit": {"oid": "f7e5eaa26e1c7a2a8c8f3d36bc525e06950b8cc5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NjEwNw==", "bodyText": "++,  I pushed 3777760", "url": "https://github.com/elastic/elasticsearch/pull/64469#discussion_r517946107", "createdAt": "2020-11-05T10:29:37Z", "author": {"login": "jimczi"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/StringTermsTests.java", "diffHunk": "@@ -34,13 +34,26 @@\n import java.util.Set;\n \n public class StringTermsTests extends InternalTermsTestCase {\n+    private BytesRef[] dict;\n+\n+    public synchronized void generateRandomDict() {\n+        if (dict == null) {\n+            Set<BytesRef> terms = new HashSet<>();\n+            int numTerms = randomIntBetween(2, 100);\n+            for (int i = 0; i < numTerms; i++) {\n+                terms.add(new BytesRef(randomAlphaOfLength(10)));\n+            }\n+            dict = terms.stream().toArray(BytesRef[]::new);\n+        }\n+    }\n \n     @Override\n     protected InternalTerms<?, ?> createTestInstance(String name,\n                                                      Map<String, Object> metadata,\n                                                      InternalAggregations aggregations,\n                                                      boolean showTermDocCountError,\n                                                      long docCountError) {\n+        generateRandomDict();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MTU2NA=="}, "originalCommit": {"oid": "f7e5eaa26e1c7a2a8c8f3d36bc525e06950b8cc5"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4141, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}