{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMDUzNzE1", "number": 65850, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDoyOToyOFrOFA03FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDoyOToyOFrOFA03FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDEwMzg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/transport/TransportActionProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDoyOToyOFrOH_TUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNTo1MTozNVrOIAL5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODc5MQ==", "bodyText": "Rather than requiring every registration to record correctly whether the proxied task is cancellable or not, could we call wrapped.createTask() and decide whether to create a CancellableTask or just a regular Task based on whether the wrapped request's task was cancellable or not? At least we should assert that they match, or else we'll forget to update the argument to the proxy registration in future if we ever add cancellability  to another task.", "url": "https://github.com/elastic/elasticsearch/pull/65850#discussion_r536138791", "createdAt": "2020-12-04T14:29:28Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportActionProxy.java", "diffHunk": "@@ -117,27 +122,54 @@ public void writeTo(StreamOutput out) throws IOException {\n         }\n     }\n \n+    private static class CancellableProxyRequest<T extends TransportRequest> extends ProxyRequest<T> {\n+        CancellableProxyRequest(StreamInput in, Writeable.Reader<T> reader) throws IOException {\n+            super(in, reader);\n+        }\n+\n+        @Override\n+        public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {\n+            return new CancellableTask(id, type, action, \"\", parentTaskId, headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5535bc301fc088a256d7f22bf0bc1ff9ea19df18"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2NTc5Mg==", "bodyText": "+1, I added an assertion in 0a52a5b", "url": "https://github.com/elastic/elasticsearch/pull/65850#discussion_r537065792", "createdAt": "2020-12-06T15:51:35Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/transport/TransportActionProxy.java", "diffHunk": "@@ -117,27 +122,54 @@ public void writeTo(StreamOutput out) throws IOException {\n         }\n     }\n \n+    private static class CancellableProxyRequest<T extends TransportRequest> extends ProxyRequest<T> {\n+        CancellableProxyRequest(StreamInput in, Writeable.Reader<T> reader) throws IOException {\n+            super(in, reader);\n+        }\n+\n+        @Override\n+        public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {\n+            return new CancellableTask(id, type, action, \"\", parentTaskId, headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODc5MQ=="}, "originalCommit": {"oid": "5535bc301fc088a256d7f22bf0bc1ff9ea19df18"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1850, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}