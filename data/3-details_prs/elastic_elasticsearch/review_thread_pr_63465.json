{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODM1OTU0", "number": 63465, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxNjoxNlrOEtAmeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxNjoyMlrOEtAmmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjMxMjI1OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxNjoxNlrOHgjtwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjozNDowMVrOHgkY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwMTYzNA==", "bodyText": "Was this unused?", "url": "https://github.com/elastic/elasticsearch/pull/63465#discussion_r503901634", "createdAt": "2020-10-13T12:16:16Z", "author": {"login": "cbuescher"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -690,12 +634,6 @@ static boolean isMatchAll(Query q) {\n             return q instanceof MatchAllDocsQuery || q instanceof MatchAllButRequireVerificationQuery;\n         }\n \n-        protected String firstNgramToken(String fragment, Analyzer analyzer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a0721199dc68b96d6c2f3ab9ff4de73717d2f13"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxMjcwMw==", "bodyText": "Yes, IntelliJ flagged it up as never called", "url": "https://github.com/elastic/elasticsearch/pull/63465#discussion_r503912703", "createdAt": "2020-10-13T12:34:01Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -690,12 +634,6 @@ static boolean isMatchAll(Query q) {\n             return q instanceof MatchAllDocsQuery || q instanceof MatchAllButRequireVerificationQuery;\n         }\n \n-        protected String firstNgramToken(String fragment, Analyzer analyzer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwMTYzNA=="}, "originalCommit": {"oid": "8a0721199dc68b96d6c2f3ab9ff4de73717d2f13"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjMxMjU5OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxNjoyMlrOHgjuAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjozNTowMlrOHgkbqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwMTY5Nw==", "bodyText": "Just curious because haven't reviews that many of these moves to ParametrizedFieldMapper yet: These errors woll now happen automatically if no Parameter is defined?", "url": "https://github.com/elastic/elasticsearch/pull/63465#discussion_r503901697", "createdAt": "2020-10-13T12:16:22Z", "author": {"login": "cbuescher"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -185,115 +172,73 @@ private static int normalize(int codepoint) {\n \n     public static class Defaults {\n         public static final FieldType FIELD_TYPE = new FieldType();\n-\n         static {\n             FIELD_TYPE.setTokenized(false);\n             FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);\n             FIELD_TYPE.setStoreTermVectorOffsets(false);\n             FIELD_TYPE.setOmitNorms(true);\n             FIELD_TYPE.freeze();\n         }\n+        public static final TextSearchInfo TEXT_SEARCH_INFO\n+            = new TextSearchInfo(FIELD_TYPE, null, Lucene.KEYWORD_ANALYZER, Lucene.KEYWORD_ANALYZER);\n         public static final int IGNORE_ABOVE = Integer.MAX_VALUE;\n-        public static final String NULL_VALUE = null;\n     }\n \n-    public static class Builder extends FieldMapper.Builder<Builder> {\n-        protected int ignoreAbove = Defaults.IGNORE_ABOVE;\n-        protected String nullValue = Defaults.NULL_VALUE;\n+    private static WildcardFieldMapper toType(FieldMapper in) {\n+        return (WildcardFieldMapper) in;\n+    }\n \n-        public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE);\n-            builder = this;\n-        }\n+    public static class Builder extends ParametrizedFieldMapper.Builder {\n \n-        @Override\n-        public Builder docValues(boolean docValues) {\n-            if (docValues == false) {\n-                throw new MapperParsingException(\"The field [\" + name + \"] cannot have doc values = false\");\n-            }\n-            return this;\n-        }\n+        final Parameter<Integer> ignoreAbove\n+            = Parameter.intParam(\"ignore_above\", true, m -> toType(m).ignoreAbove, Defaults.IGNORE_ABOVE)\n+            .setValidator(v -> {\n+                if (v < 0) {\n+                    throw new IllegalArgumentException(\"[ignore_above] must be positive, got [\" + v + \"]\");\n+                }\n+            });\n+        final Parameter<String> nullValue\n+            = Parameter.stringParam(\"null_value\", false, m -> toType(m).nullValue, null).acceptsNull();\n \n-        @Override\n-        public Builder indexOptions(IndexOptions indexOptions) {\n-            if (indexOptions != IndexOptions.DOCS) {\n-                throw new MapperParsingException(\"The field [\" + name + \"] cannot have indexOptions = \" + indexOptions);\n-            }\n-            return this;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a0721199dc68b96d6c2f3ab9ff4de73717d2f13"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxMzM4Nw==", "bodyText": "Yes, for previously 'global' parameters that don't really make sense on a mapper, you'll get a deprecation warning in 7x and an error in master.", "url": "https://github.com/elastic/elasticsearch/pull/63465#discussion_r503913387", "createdAt": "2020-10-13T12:35:02Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -185,115 +172,73 @@ private static int normalize(int codepoint) {\n \n     public static class Defaults {\n         public static final FieldType FIELD_TYPE = new FieldType();\n-\n         static {\n             FIELD_TYPE.setTokenized(false);\n             FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);\n             FIELD_TYPE.setStoreTermVectorOffsets(false);\n             FIELD_TYPE.setOmitNorms(true);\n             FIELD_TYPE.freeze();\n         }\n+        public static final TextSearchInfo TEXT_SEARCH_INFO\n+            = new TextSearchInfo(FIELD_TYPE, null, Lucene.KEYWORD_ANALYZER, Lucene.KEYWORD_ANALYZER);\n         public static final int IGNORE_ABOVE = Integer.MAX_VALUE;\n-        public static final String NULL_VALUE = null;\n     }\n \n-    public static class Builder extends FieldMapper.Builder<Builder> {\n-        protected int ignoreAbove = Defaults.IGNORE_ABOVE;\n-        protected String nullValue = Defaults.NULL_VALUE;\n+    private static WildcardFieldMapper toType(FieldMapper in) {\n+        return (WildcardFieldMapper) in;\n+    }\n \n-        public Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE);\n-            builder = this;\n-        }\n+    public static class Builder extends ParametrizedFieldMapper.Builder {\n \n-        @Override\n-        public Builder docValues(boolean docValues) {\n-            if (docValues == false) {\n-                throw new MapperParsingException(\"The field [\" + name + \"] cannot have doc values = false\");\n-            }\n-            return this;\n-        }\n+        final Parameter<Integer> ignoreAbove\n+            = Parameter.intParam(\"ignore_above\", true, m -> toType(m).ignoreAbove, Defaults.IGNORE_ABOVE)\n+            .setValidator(v -> {\n+                if (v < 0) {\n+                    throw new IllegalArgumentException(\"[ignore_above] must be positive, got [\" + v + \"]\");\n+                }\n+            });\n+        final Parameter<String> nullValue\n+            = Parameter.stringParam(\"null_value\", false, m -> toType(m).nullValue, null).acceptsNull();\n \n-        @Override\n-        public Builder indexOptions(IndexOptions indexOptions) {\n-            if (indexOptions != IndexOptions.DOCS) {\n-                throw new MapperParsingException(\"The field [\" + name + \"] cannot have indexOptions = \" + indexOptions);\n-            }\n-            return this;\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwMTY5Nw=="}, "originalCommit": {"oid": "8a0721199dc68b96d6c2f3ab9ff4de73717d2f13"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}