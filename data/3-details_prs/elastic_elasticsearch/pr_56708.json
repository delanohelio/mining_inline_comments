{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTIyNjEx", "number": 56708, "title": "SlowLoggers using single logger", "bodyText": "Slow loggers should use single shared logger as otherwise when index is\ndeleted the log4j logger will remain reachable (log4j is caching) and\nwill create a memory leak.\ncloses #56171", "createdAt": "2020-05-13T17:59:36Z", "url": "https://github.com/elastic/elasticsearch/pull/56708", "merged": true, "mergeCommit": {"oid": "0e34b2f42eaa62219e2225d44224194d56419c61"}, "closed": true, "closedAt": "2020-05-27T14:38:31Z", "author": {"login": "pgomulka"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg8uxZgH2gAyNDE3NTIyNjExOmRkZmZlYzU3OWJhNDFiYTViNGRmODljZDVjMjc5Y2Y2ZDc5NTZkZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclZLPVgH2gAyNDE3NTIyNjExOmNiYTkzOWU2OGZiYjY0NDNmNzQ5MDA5NGUxNDI5Y2Y1MTY5MzQxNzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddffec579ba41ba5b4df89cd5c279cf6d7956dda", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ddffec579ba41ba5b4df89cd5c279cf6d7956dda", "committedDate": "2020-05-13T17:57:03Z", "message": "SlowLoggers using single logger\n\nSlow loggers should use single shared logger as otherwise when index is\ndeleted the log4j logger will remain reachable (log4j is caching) and\nwill create a memory leak."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69efa1129edf0feb6184f6450a770678fe9219a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d69efa1129edf0feb6184f6450a770678fe9219a", "committedDate": "2020-05-14T09:03:21Z", "message": "search slow log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90f51c9d0683545d15aeb7929040fde65801237", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/f90f51c9d0683545d15aeb7929040fde65801237", "committedDate": "2020-05-14T09:26:40Z", "message": "Merge branch '7.x' into slow-log-levels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07bca35123f0a8090e69917799b4376e078ec013", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/07bca35123f0a8090e69917799b4376e078ec013", "committedDate": "2020-05-14T11:44:17Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/037f92714c4e3a967911a1b748066ec37e06c818", "committedDate": "2020-05-26T14:07:31Z", "message": "test case for enum"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4ODQwNzkx", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-418840791", "createdAt": "2020-05-27T03:58:58Z", "commit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1ODo1OVrOGa4oGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDoxMTo1NFrOGa4y0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzkyOA==", "bodyText": "In general I consider Enum#ordinal to be a smell. It\u2019s a maintenance burden (to ensure they\u2019re kept in order, what if you want to insert values (equal or different), what if you want to skip a value, etc.). Even in this simple case I\u2019d avoid as a general best practice and add a dedicated field with a value we fully control. This helps reinforce avoiding the use in our codebase (imagine how dangerous this can be for serialization). From the Javadocs:\n\nMost programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as EnumSet and EnumMap.\n\nLet\u2019s change this.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430843928", "createdAt": "2020-05-27T03:58:59Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,16 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN, //most specific - little logging\n+    INFO,\n+    DEBUG,\n+    TRACE; //least specific - lots of logging\n     public static SlowLogLevel parse(String level) {\n         return valueOf(level.toUpperCase(Locale.ROOT));\n     }\n+\n+    boolean isLevelEnabledFor(SlowLogLevel levelToBeUsed) {\n+        // info is less specific then warn\n+        return this.ordinal() >= levelToBeUsed.ordinal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTI4Mg==", "bodyText": "then -> than", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430845282", "createdAt": "2020-05-27T04:05:18Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingSlowLog.java", "diffHunk": "@@ -149,13 +152,14 @@ public void postIndex(ShardId shardId, Engine.Index indexOperation, Engine.Index\n         if (result.getResultType() == Engine.Result.Type.SUCCESS) {\n             final ParsedDocument doc = indexOperation.parsedDoc();\n             final long tookInNanos = result.getTook();\n-            if (indexWarnThreshold >= 0 && tookInNanos > indexWarnThreshold) {\n+            // when logger level is more specific then WARN AND event is within threshold it should be logged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTQwOQ==", "bodyText": "4010?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430845409", "createdAt": "2020-05-27T04:05:52Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.logging;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.filter.RegexFilter;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+\n+public class MockAppender extends AbstractAppender {\n+    public LogEvent lastEvent;\n+\n+    public MockAppender(final String name) throws IllegalAccessException {\n+        super(name, RegexFilter.createFilter(\".*(\\n.*)*\", new String[0], false, null, null), null);\n+    }\n+\n+    @Override\n+    public void append(LogEvent event) {//4010", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NTk1NA==", "bodyText": "Formatting nit: (){\nThere a few other spacing issues in tests (no space before some commas, etc).", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430845954", "createdAt": "2020-05-27T04:08:26Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/common/logging/MockAppender.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.logging;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.filter.RegexFilter;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+\n+public class MockAppender extends AbstractAppender {\n+    public LogEvent lastEvent;\n+\n+    public MockAppender(final String name) throws IllegalAccessException {\n+        super(name, RegexFilter.createFilter(\".*(\\n.*)*\", new String[0], false, null, null), null);\n+    }\n+\n+    @Override\n+    public void append(LogEvent event) {//4010\n+        lastEvent = event.toImmutable();\n+    }\n+\n+    ParameterizedMessage lastParameterizedMessage() {\n+        return (ParameterizedMessage) lastEvent.getMessage();\n+    }\n+\n+    public LogEvent getLastEventAndReset(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NjY3NQ==", "bodyText": "I think testing can be more comprehensive here? For example, it\u2019s too far off to test every case?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r430846675", "createdAt": "2020-05-27T04:11:54Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/index/SlowLogLevelTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+\n+public class SlowLogLevelTest extends ESTestCase {\n+\n+    public void testLevelOrdering(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037f92714c4e3a967911a1b748066ec37e06c818"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db1319c72347d0f5e858db747117567640fe6398", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/db1319c72347d0f5e858db747117567640fe6398", "committedDate": "2020-05-27T06:47:51Z", "message": "test cases and ordering refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDQ2MTkx", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-419046191", "createdAt": "2020-05-27T10:07:57Z", "commit": {"oid": "db1319c72347d0f5e858db747117567640fe6398"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDowNzo1N1rOGbCfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDowNzo1N1rOGbCfWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTUyOA==", "bodyText": "I find it somewhat counterintuitive that the most specific logging level has the lowest \"value\" here. Perhaps change the meaning from \"precedence\" to \"specificity\" and then the values can be:\nWARN(3)\nINFO(2)\nDEBUG(1)\nTRACE(0)\n\nand then the comparison can be <= instead of >= which I find more intuitive. That is:\nSlowLogLevel.TRACE.isLevelEnabledFor(SlowLogLevel.WARN)\n\namounts to a comparison of\n0 <= 3\n\nwhich is true, and makes sense because TRACE is less specific than WARN.", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431005528", "createdAt": "2020-05-27T10:07:57Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,23 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN(0), //most specific - little logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1319c72347d0f5e858db747117567640fe6398"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDQ3OTA2", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-419047906", "createdAt": "2020-05-27T10:10:27Z", "commit": {"oid": "db1319c72347d0f5e858db747117567640fe6398"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee27b8800850122ff5a168a64957d6593702b102", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee27b8800850122ff5a168a64957d6593702b102", "committedDate": "2020-05-27T11:02:19Z", "message": "additional test cases and renaming of ordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c5be0b43103dc9a374661aaa426123baec4004", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/33c5be0b43103dc9a374661aaa426123baec4004", "committedDate": "2020-05-27T11:48:25Z", "message": "field rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3652dffbb955c4a3dab8f5624fd0ef088a7c1a6", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/d3652dffbb955c4a3dab8f5624fd0ef088a7c1a6", "committedDate": "2020-05-27T11:53:08Z", "message": "unnecessary dot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/af0847f9a34e058f15e96d02fcea887dc9ec1c86", "committedDate": "2020-05-27T11:54:25Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTgzNjg2", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-419183686", "createdAt": "2020-05-27T13:04:39Z", "commit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNDozOVrOGbIgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNDozOVrOGbIgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNDExNA==", "bodyText": "A nit here, sorry: I know this is carried over from the code that you moved, but this is labeled as a Javadoc /** on a private field. It should be a regular comment /*. Also no reason to not make this comment use the full 140 columns that are available. \ud83d\ude07", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431104114", "createdAt": "2020-05-27T13:04:39Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/IndexingSlowLog.java", "diffHunk": "@@ -76,6 +61,23 @@\n     public static final Setting<SlowLogLevel> INDEX_INDEXING_SLOWLOG_LEVEL_SETTING =\n         new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX +\".level\", SlowLogLevel.TRACE.name(), SlowLogLevel::parse, Property.Dynamic,\n             Property.IndexScope);\n+\n+    private final Logger indexLogger;\n+    private final Index index;\n+\n+    private boolean reformat;\n+    private long indexWarnThreshold;\n+    private long indexInfoThreshold;\n+    private long indexDebugThreshold;\n+    private long indexTraceThreshold;\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTg0MDU2", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-419184056", "createdAt": "2020-05-27T13:05:04Z", "commit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNTowNFrOGbIiiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNTowNFrOGbIiiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNDY0OA==", "bodyText": "Nit: space between the // and the start of the comment", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431104648", "createdAt": "2020-05-27T13:05:04Z", "author": {"login": "jasontedor"}, "path": "server/src/main/java/org/elasticsearch/index/SlowLogLevel.java", "diffHunk": "@@ -21,8 +21,23 @@\n import java.util.Locale;\n \n public enum SlowLogLevel {\n-    WARN, TRACE, INFO, DEBUG;\n+    WARN(3), //most specific - little logging\n+    INFO(2),\n+    DEBUG(1),\n+    TRACE(0); //least specific - lots of logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTg1Njc4", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-419185678", "createdAt": "2020-05-27T13:06:53Z", "commit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjo1M1rOGbIrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowNjo1M1rOGbIrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwNjg1Mg==", "bodyText": "Maybe we can do this a random number of times, in a loop, say up to 64 or something like that, just to really exercise that no new ones are created?", "url": "https://github.com/elastic/elasticsearch/pull/56708#discussion_r431106852", "createdAt": "2020-05-27T13:06:53Z", "author": {"login": "jasontedor"}, "path": "server/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java", "diffHunk": "@@ -48,6 +61,141 @@\n import static org.hamcrest.Matchers.startsWith;\n \n public class IndexingSlowLogTests extends ESTestCase {\n+    static MockAppender appender;\n+    static Logger testLogger1 = LogManager.getLogger(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_PREFIX + \".index\");\n+\n+    @BeforeClass\n+    public static void init() throws IllegalAccessException {\n+        appender = new MockAppender(\"trace_appender\");\n+        appender.start();\n+        Loggers.addAppender(testLogger1, appender);\n+    }\n+\n+    @AfterClass\n+    public static void cleanup() {\n+        appender.stop();\n+        Loggers.removeAppender(testLogger1, appender);\n+    }\n+\n+\n+    public void testLevelPrecedence() {\n+        String uuid = UUIDs.randomBase64UUID();\n+        IndexMetadata metadata = createIndexMetadata(SlowLogLevel.WARN, \"index-precedence\", uuid);\n+        IndexSettings settings = new IndexSettings(metadata, Settings.EMPTY);\n+        IndexingSlowLog log = new IndexingSlowLog(settings);\n+\n+\n+        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n+        Engine.Index index = new Engine.Index(new Term(\"_id\", Uid.encodeId(\"doc_id\")), randomNonNegativeLong(), doc);\n+        Engine.IndexResult result = Mockito.mock(Engine.IndexResult.class);//(0, 0, SequenceNumbers.UNASSIGNED_SEQ_NO, false);\n+        Mockito.when(result.getResultType()).thenReturn(Engine.Result.Type.SUCCESS);\n+\n+        {\n+            //level set to WARN, should only log when WARN limit is breached\n+            Mockito.when(result.getTook()).thenReturn(40L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(41L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+\n+        }\n+\n+        {\n+            // level set INFO, should log when INFO level is breached\n+            settings.updateIndexMetadata(createIndexMetadata(SlowLogLevel.INFO, \"index\", uuid));\n+            Mockito.when(result.getTook()).thenReturn(30L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(31L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+\n+        {\n+            // level set DEBUG, should log when DEBUG level is breached\n+            settings.updateIndexMetadata(createIndexMetadata(SlowLogLevel.DEBUG, \"index\", uuid));\n+            Mockito.when(result.getTook()).thenReturn(20L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(21L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+\n+        {\n+            // level set TRACE, should log when TRACE level is breached\n+            settings.updateIndexMetadata(createIndexMetadata(SlowLogLevel.TRACE, \"index\", uuid));\n+            Mockito.when(result.getTook()).thenReturn(10L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            Mockito.when(result.getTook()).thenReturn(11L);\n+            log.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+    }\n+\n+    public void testTwoLoggersDifferentLevel() {\n+        IndexSettings index1Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.WARN, \"index1\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log1 = new IndexingSlowLog(index1Settings);\n+\n+        IndexSettings index2Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.TRACE, \"index2\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log2 = new IndexingSlowLog(index2Settings);\n+\n+\n+        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n+        Engine.Index index = new Engine.Index(new Term(\"_id\", Uid.encodeId(\"doc_id\")), randomNonNegativeLong(), doc);\n+        Engine.IndexResult result = Mockito.mock(Engine.IndexResult.class);\n+        Mockito.when(result.getResultType()).thenReturn(Engine.Result.Type.SUCCESS);\n+\n+        {\n+            // level set WARN, should not log\n+            Mockito.when(result.getTook()).thenReturn(11L);\n+            log1.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNull(appender.getLastEventAndReset());\n+\n+            // level set TRACE, should log\n+            log2.postIndex(ShardId.fromString(\"[index][123]\"), index, result);\n+            assertNotNull(appender.getLastEventAndReset());\n+        }\n+    }\n+\n+    public void testMultipleSlowLoggersUseSingleLog4jLogger() {\n+        LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+\n+        IndexSettings index1Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.WARN, \"index1\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log1 = new IndexingSlowLog(index1Settings);\n+\n+        int numberOfLoggersBefore = context.getLoggers().size();\n+\n+\n+        IndexSettings index2Settings = new IndexSettings(createIndexMetadata(SlowLogLevel.TRACE, \"index2\", UUIDs.randomBase64UUID()),\n+            Settings.EMPTY);\n+        IndexingSlowLog log2 = new IndexingSlowLog(index2Settings);\n+        context = (LoggerContext) LogManager.getContext(false);\n+\n+        int numberOfLoggersAfter = context.getLoggers().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTg2MTc0", "url": "https://github.com/elastic/elasticsearch/pull/56708#pullrequestreview-419186174", "createdAt": "2020-05-27T13:07:25Z", "commit": {"oid": "af0847f9a34e058f15e96d02fcea887dc9ec1c86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba939e68fbb6443f7490094e1429cf516934178", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/cba939e68fbb6443f7490094e1429cf516934178", "committedDate": "2020-05-27T13:21:11Z", "message": "formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4919, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}