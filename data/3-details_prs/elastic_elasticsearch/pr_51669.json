{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDU3MzE1", "number": 51669, "title": "Use dedicated cache keys instead of relying on an absolute path", "bodyText": "Today cache files are identified in cache using a string representing an absolute path to a file on disk. This path is a sub directory of the current shard data path and as such already contains identification bits like the current index id and the shard id. It also contains the snapshot id that is passed at CacheDirectory creation time.\nWhile this has been done for quick prototyping and already been improved in #51520, it feels wrong to rely on a path converted to a string as cache keys. Instead we should have a distinct CacheKey object to identify CacheFile in cache.\nRelates #50693 (comment)", "createdAt": "2020-01-30T12:52:33Z", "url": "https://github.com/elastic/elasticsearch/pull/51669", "merged": true, "mergeCommit": {"oid": "101c41934a42e2b3cc55a8ce46b1dde982b83c66"}, "closed": true, "closedAt": "2020-01-31T09:52:03Z", "author": {"login": "tlrx"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_aA7NAH2gAyMzY5MDU3MzE1OjA5NGNlMjRhY2FmMjJiZDUyNzdmMjBiOGMyOGI2ZWZhYzUwMWY3YjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_rJa_AH2gAyMzY5MDU3MzE1OmU4YWZiZTc5NTZiZTgwMjdmMDU2ZDcwMzcyOTIwZTVkYjExY2E3ZWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/094ce24acaf22bd5277f20b8c28b6efac501f7b5", "committedDate": "2020-01-30T12:50:42Z", "message": "Add CacheKey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDEzNzA0", "url": "https://github.com/elastic/elasticsearch/pull/51669#pullrequestreview-351013704", "createdAt": "2020-01-30T17:38:53Z", "commit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozODo1M1rOFjz05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo0Mjo1N1rOFjz8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzYwNA==", "bodyText": "Could we have an EqualsHashCodeTestUtils#checkEqualsAndHashCode-based test for this?", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373093604", "createdAt": "2020-01-30T17:38:53Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;\n+    private final String fileName;\n+    private final long fileLength;\n+\n+    CacheKey(SnapshotId snapshotId, IndexId indexId, ShardId shardId, Path cacheDir, String fileName, long fileLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NDI1Ng==", "bodyText": "It feels strange to have the length as part of the key. I kinda see that it's here to make some plumbing a bit simpler, but I think I'd still rather move it back out again.", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373094256", "createdAt": "2020-01-30T17:40:18Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;\n+    private final String fileName;\n+    private final long fileLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NTU2MA==", "bodyText": "Similarly cacheDir. In my mind the thing in the cache is the Lucene file, which is uniquely identified by snapshot/index/shard/filename, and cacheDir is a bit of an implementation detail that I feel should be hidden here.", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373095560", "createdAt": "2020-01-30T17:42:57Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheKey.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.repositories.IndexId;\n+import org.elasticsearch.snapshots.SnapshotId;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+public class CacheKey {\n+\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n+    private final Path cacheDir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094ce24acaf22bd5277f20b8c28b6efac501f7b5"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "504271711a9456353b14364cba4aae161afeadab", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/504271711a9456353b14364cba4aae161afeadab", "committedDate": "2020-01-30T19:38:03Z", "message": "apply feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMjYxMTQx", "url": "https://github.com/elastic/elasticsearch/pull/51669#pullrequestreview-351261141", "createdAt": "2020-01-31T02:17:01Z", "commit": {"oid": "504271711a9456353b14364cba4aae161afeadab"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjoxNzowMVrOFj_wzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjoxNzowMVrOFj_wzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTE2NA==", "bodyText": "Maybe move this lambda to a method CacheKey#belongsTo(SnapshotId, IndexId, ShardId) (not sure about the name but that's the best I've got)", "url": "https://github.com/elastic/elasticsearch/pull/51669#discussion_r373289164", "createdAt": "2020-01-31T02:17:01Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -34,19 +37,33 @@\n     private static final int COPY_BUFFER_SIZE = 8192;\n \n     private final CacheService cacheService;\n+    private final SnapshotId snapshotId;\n+    private final IndexId indexId;\n+    private final ShardId shardId;\n     private final Path cacheDir;\n \n-    public CacheDirectory(Directory in, CacheService cacheService, Path cacheDir) throws IOException {\n+    public CacheDirectory(Directory in, CacheService cacheService, Path cacheDir, SnapshotId snapshotId, IndexId indexId, ShardId shardId)\n+        throws IOException {\n         super(in);\n         this.cacheService = Objects.requireNonNull(cacheService);\n         this.cacheDir = Files.createDirectories(cacheDir);\n+        this.snapshotId = Objects.requireNonNull(snapshotId);\n+        this.indexId = Objects.requireNonNull(indexId);\n+        this.shardId = Objects.requireNonNull(shardId);\n+    }\n+\n+    private CacheKey createCacheKey(String fileName) {\n+        return new CacheKey(snapshotId, indexId, shardId, fileName);\n     }\n \n     public void close() throws IOException {\n         super.close();\n         // Ideally we could let the cache evict/remove cached files by itself after the\n         // directory has been closed.\n-        cacheService.removeFromCache(key -> key.startsWith(cacheDir.toString()));\n+        cacheService.removeFromCache(key ->\n+            Objects.equals(key.getSnapshotId(), snapshotId) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504271711a9456353b14364cba4aae161afeadab"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8afbe7956be8027f056d70372920e5db11ca7ef", "author": {"user": {"login": "tlrx", "name": "Tanguy Leroux"}}, "url": "https://github.com/elastic/elasticsearch/commit/e8afbe7956be8027f056d70372920e5db11ca7ef", "committedDate": "2020-01-31T08:48:22Z", "message": "BelongsTo"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3088, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}