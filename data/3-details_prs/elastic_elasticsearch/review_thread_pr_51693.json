{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MjA5NzIx", "number": 51693, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowNzoyNFrODcr6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0MTowNlrODgvojQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDA2MTM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowNzoyNFrOFk20cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowNzoyNFrOFk20cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MTIxOA==", "bodyText": "In conjunction with my comment below, I think it makes sense for the config object to live with the PercentilesMethod enum, rather than one of the builders.  Kind of arbitrary which builder it lands on.", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r374191218", "createdAt": "2020-02-03T16:07:24Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java", "diffHunk": "@@ -30,19 +30,22 @@\n import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorFactories.Builder;\n import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesAggregationBuilder.PercentilesConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70449879ac2b5beb66e855562ef312760fe374f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDA3NzgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxMTo1N1rOFk2_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxMTo1N1rOFk2_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MzkyMg==", "bodyText": "We've got this same cascading if in two places now, and cascading if or switch blocks on enums are kind of dodgy to begin with.  I propose a method on PercentilesMethod that takes two args, compression and number of significant digits, ignores whichever doesn't apply to that method, and returns the config.  This has the added benefit that we don't need the unreachable throw block here (unreachable since it would have already thrown trying to parse the bad method name)", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r374193922", "createdAt": "2020-02-03T16:11:57Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java", "diffHunk": "@@ -246,16 +256,17 @@ public PercentilesMethod method() {\n     @Override\n     protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardContext, ValuesSourceConfig config,\n                                                        AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {\n-        switch (method) {\n-        case TDIGEST:\n-            return new TDigestPercentileRanksAggregatorFactory(name, config, values, compression, keyed, queryShardContext, parent,\n-                    subFactoriesBuilder, metaData);\n-        case HDR:\n-            return new HDRPercentileRanksAggregatorFactory(name, config, values, numberOfSignificantValueDigits, keyed, queryShardContext,\n-                    parent, subFactoriesBuilder, metaData);\n-        default:\n+        PercentilesConfig percentilesConfig;\n+        if (method.equals(PercentilesMethod.TDIGEST)) {\n+            percentilesConfig = new PercentilesConfig.TDigestConfig(compression);\n+        } else if (method.equals(PercentilesMethod.HDR)) {\n+            percentilesConfig = new PercentilesConfig.HdrHistoConfig(numberOfSignificantValueDigits);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70449879ac2b5beb66e855562ef312760fe374f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjYwMzIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/SearchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTozODoyOFrOFrHRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTozODoyOFrOFrHRMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1MjE3Nw==", "bodyText": "Nit: Inconsistent indentation", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r380752177", "createdAt": "2020-02-18T15:38:28Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/SearchModule.java", "diffHunk": "@@ -360,7 +360,8 @@ private void registerAggregations(List<SearchPlugin> plugins) {\n         registerAggregation(new AggregationSpec(PercentileRanksAggregationBuilder.NAME, PercentileRanksAggregationBuilder::new,\n                 PercentileRanksAggregationBuilder::parse)\n                         .addResultReader(InternalTDigestPercentileRanks.NAME, InternalTDigestPercentileRanks::new)\n-                        .addResultReader(InternalHDRPercentileRanks.NAME, InternalHDRPercentileRanks::new));\n+                        .addResultReader(InternalHDRPercentileRanks.NAME, InternalHDRPercentileRanks::new)\n+                .setAggregatorRegistrar(PercentileRanksAggregationBuilder::registerAggregators));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a536eda62b3ff742d05062e8ca861b1d44a3b16"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjYxNDUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0MTowNlrOFrHYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozNzowM1rOFwwK3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NDAwNQ==", "bodyText": "Are we intentionally not supporting dates here? Do we allow percentile ranks over date fields now?  I'm actually not sure, but we should probably make sure we're not losing functionality by accident.", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r380754005", "createdAt": "2020-02-18T15:41:06Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java", "diffHunk": "@@ -39,6 +44,22 @@\n     private final PercentilesConfig percentilesConfig;\n     private final boolean keyed;\n \n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(PercentileRanksAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a536eda62b3ff742d05062e8ca861b1d44a3b16"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NTE4MQ==", "bodyText": "Closing the loop on this: after implementing the \"supported type\" test in master, and adding percentiles/ranks to the testing, we need to support CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM, CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN\nPhew!", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r386665181", "createdAt": "2020-03-02T21:37:03Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java", "diffHunk": "@@ -39,6 +44,22 @@\n     private final PercentilesConfig percentilesConfig;\n     private final boolean keyed;\n \n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(PercentileRanksAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NDAwNQ=="}, "originalCommit": {"oid": "8a536eda62b3ff742d05062e8ca861b1d44a3b16"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 153, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}