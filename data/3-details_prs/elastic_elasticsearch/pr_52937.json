{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjM4MTAz", "number": 52937, "title": "Fix ingest pipeline _simulate api with empty docs never returns a res\u2026", "bodyText": "This PR relates to #52833.\nThe main changes are:\n\nReturn 400 status code with error message if the docs array is empty.\nReturn 400 status code with error message if the element in docs array is not a map.\nCheck whether the docs array is empty again when executing the pipeline simulate, avoiding no response.\nAdd some test code for the changes.", "createdAt": "2020-02-28T07:08:36Z", "url": "https://github.com/elastic/elasticsearch/pull/52937", "merged": true, "mergeCommit": {"oid": "7ba94d8324b453f79f4e1380af12689af0a4d4d8"}, "closed": true, "closedAt": "2020-03-11T15:05:07Z", "author": {"login": "gaobinlong"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIpZ8HgH2gAyMzgxMjM4MTAzOjJkMWU0ZTJiYjA0YTE3NjM5NzA3MzgxMDQxNDY4ZWJmOTM2OWJjYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMnovLAH2gAyMzgxMjM4MTAzOjYxZDIyNjBmZDQ1NTg2MWE1NTAzZjIzMjk1Y2RlOWQ5YjJlMWUxMWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d1e4e2bb04a17639707381041468ebf9369bcbe", "author": {"user": {"login": "gaobinlong", "name": "bellengao"}}, "url": "https://github.com/elastic/elasticsearch/commit/2d1e4e2bb04a17639707381041468ebf9369bcbe", "committedDate": "2020-02-28T05:51:55Z", "message": "Fix ingest pipeline _simulate api with empty docs never returns a response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/151e70f220f8636f3b0cb5e05ba6343a8962cc10", "committedDate": "2020-03-02T14:01:17Z", "message": "Merge branch 'master' into patch#52833"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjMxODgw", "url": "https://github.com/elastic/elasticsearch/pull/52937#pullrequestreview-367231880", "createdAt": "2020-03-02T14:19:20Z", "commit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOToyMVrOFwhHLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTowN1rOFwhLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"expected map in docs but found not\");\n          \n          \n            \n                            throw new IllegalArgumentException(\"malformed [docs] section, should include an inner object\");", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386418476", "createdAt": "2020-03-02T14:19:21Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java", "diffHunk": "@@ -173,8 +173,15 @@ static Parsed parse(Map<String, Object> config, boolean verbose, IngestService i\n     private static List<IngestDocument> parseDocs(Map<String, Object> config) {\n         List<Map<String, Object>> docs =\n             ConfigurationUtils.readList(null, null, config, Fields.DOCS);\n+        if (docs.isEmpty()) {\n+            throw new IllegalArgumentException(\"must specify at least one doc\");\n+        }\n         List<IngestDocument> ingestDocumentList = new ArrayList<>();\n-        for (Map<String, Object> dataMap : docs) {\n+        for (Object object : docs) {\n+            if ((object instanceof Map) ==  false) {\n+                throw new IllegalArgumentException(\"expected map in docs but found not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(e2.getMessage(), equalTo(\"expected map in docs but found not\"));\n          \n          \n            \n                    assertThat(e2.getMessage(), equalTo(\"malformed [docs] section, should include an inner object\"));", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386418798", "createdAt": "2020-03-02T14:19:47Z", "author": {"login": "danhermann"}, "path": "server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java", "diffHunk": "@@ -216,4 +218,33 @@ public void testNonExistentPipelineId() {\n             () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService));\n         assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n     }\n+\n+    public void testNotValidDocs() {\n+        Map<String, Object> requestContent = new HashMap<>();\n+        List<Map<String, Object>> docs = new ArrayList<>();\n+        Map<String, Object> pipelineConfig = new HashMap<>();\n+        List<Map<String, Object>> processors = new ArrayList<>();\n+        pipelineConfig.put(\"processors\", processors);\n+        requestContent.put(Fields.DOCS, docs);\n+        requestContent.put(Fields.PIPELINE, pipelineConfig);\n+        Exception e1 = expectThrows(IllegalArgumentException.class,\n+            () -> SimulatePipelineRequest.parse(requestContent, false, ingestService));\n+        assertThat(e1.getMessage(), equalTo(\"must specify at least one doc\"));\n+\n+        List<String> stringList = new ArrayList<>();\n+        stringList.add(\"test\");\n+        pipelineConfig.put(\"processors\", processors);\n+        requestContent.put(Fields.DOCS, stringList);\n+        requestContent.put(Fields.PIPELINE, pipelineConfig);\n+        Exception e2 = expectThrows(IllegalArgumentException.class,\n+            () -> SimulatePipelineRequest.parse(requestContent, false, ingestService));\n+        assertThat(e2.getMessage(), equalTo(\"expected map in docs but found not\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"must specify at least one doc\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"must specify at least one document in [docs]\");", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386419414", "createdAt": "2020-03-02T14:20:49Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java", "diffHunk": "@@ -173,8 +173,15 @@ static Parsed parse(Map<String, Object> config, boolean verbose, IngestService i\n     private static List<IngestDocument> parseDocs(Map<String, Object> config) {\n         List<Map<String, Object>> docs =\n             ConfigurationUtils.readList(null, null, config, Fields.DOCS);\n+        if (docs.isEmpty()) {\n+            throw new IllegalArgumentException(\"must specify at least one doc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTU5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(e1.getMessage(), equalTo(\"must specify at least one doc\"));\n          \n          \n            \n                    assertThat(e1.getMessage(), equalTo(\"must specify at least one document in [docs]\"));", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386419598", "createdAt": "2020-03-02T14:21:07Z", "author": {"login": "danhermann"}, "path": "server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java", "diffHunk": "@@ -216,4 +218,33 @@ public void testNonExistentPipelineId() {\n             () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService));\n         assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n     }\n+\n+    public void testNotValidDocs() {\n+        Map<String, Object> requestContent = new HashMap<>();\n+        List<Map<String, Object>> docs = new ArrayList<>();\n+        Map<String, Object> pipelineConfig = new HashMap<>();\n+        List<Map<String, Object>> processors = new ArrayList<>();\n+        pipelineConfig.put(\"processors\", processors);\n+        requestContent.put(Fields.DOCS, docs);\n+        requestContent.put(Fields.PIPELINE, pipelineConfig);\n+        Exception e1 = expectThrows(IllegalArgumentException.class,\n+            () -> SimulatePipelineRequest.parse(requestContent, false, ingestService));\n+        assertThat(e1.getMessage(), equalTo(\"must specify at least one doc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzEzMTcz", "url": "https://github.com/elastic/elasticsearch/pull/52937#pullrequestreview-367313173", "createdAt": "2020-03-02T15:57:09Z", "commit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NzowOVrOFwk78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NzowOVrOFwk78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTEzOA==", "bodyText": "Also maybe add a return statement here? Technically it is not needed because the for loop is skipped, but I find it easier to read.", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386481138", "createdAt": "2020-03-02T15:57:09Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java", "diffHunk": "@@ -69,6 +69,12 @@ public void execute(SimulatePipelineRequest.Parsed request, ActionListener<Simul\n             final AtomicInteger counter = new AtomicInteger();\n             final List<SimulateDocumentResult> responses =\n                 new CopyOnWriteArrayList<>(new SimulateDocumentBaseResult[request.getDocuments().size()]);\n+\n+            if (request.getDocuments().isEmpty()) {\n+                l.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e13721700b20f1ca4d83a22eb41fb5e95907fe3f", "author": {"user": {"login": "gaobinlong", "name": "bellengao"}}, "url": "https://github.com/elastic/elasticsearch/commit/e13721700b20f1ca4d83a22eb41fb5e95907fe3f", "committedDate": "2020-03-05T10:09:30Z", "message": "Merge remote-tracking branch 'origin/master' into patch#52833"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda6cfc4f52025b0f0a3c08599014479b488db5e", "author": {"user": {"login": "gaobinlong", "name": "bellengao"}}, "url": "https://github.com/elastic/elasticsearch/commit/cda6cfc4f52025b0f0a3c08599014479b488db5e", "committedDate": "2020-03-05T10:09:53Z", "message": "modify some error messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d2260fd455861a5503f23295cde9d9b2e1e11a", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/61d2260fd455861a5503f23295cde9d9b2e1e11a", "committedDate": "2020-03-11T14:03:58Z", "message": "Merge branch 'master' into patch#52833"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2078, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}