{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzY1ODQ0", "number": 57925, "title": "Improve error handling in async search code", "bodyText": "The exception that we caught when failing to schedule a thread was incorrect.\nWe may have failures when reducing the response before returning it, which were not handled correctly and may have caused get or submit async search task to not be properly unregistered from the task manager\nwhen the completion listener onFailure method is invoked, the search task has to be unregistered. Not doing so may cause the search task to be stuck in the task manager although it has completed.\n\nCloses #58995", "createdAt": "2020-06-10T10:37:22Z", "url": "https://github.com/elastic/elasticsearch/pull/57925", "merged": true, "mergeCommit": {"oid": "4366360895dbcd28bf993000b80c95f83ecb79a5"}, "closed": true, "closedAt": "2020-07-03T12:58:47Z", "author": {"login": "javanna"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp4lY7AFqTQyNzk4OTA2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxS_5HgFqTQ0MjM5NTAyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTg5MDY0", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-427989064", "createdAt": "2020-06-10T12:12:30Z", "commit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMjozMFrOGhx5Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMjozMFrOGhx5Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MzYzNA==", "bodyText": "I think this should have been RejectedExecutionException instead of ESRejectedExecutionException. Though I think widening it to Exception may not be a bad idea given that not being able to schedule this means not being able to return a response to the user.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438073634", "createdAt": "2020-06-10T12:12:30Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -218,17 +217,19 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                listener.onResponse(getResponseWithHeaders());\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTkwMDgx", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-427990081", "createdAt": "2020-06-10T12:14:00Z", "commit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDowMVrOGhx8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDowMVrOGhx8Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDQxNQ==", "bodyText": "I have not found a simple way to test this. Unit testing a transport action is a bit of a nightmare with all the required dependencies. And from an integ test, how do I trigger a failure when scheduling the wait for completion thread?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438074415", "createdAt": "2020-06-10T12:14:01Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -136,6 +136,11 @@ public void onFailure(Exception exc) {\n \n                 @Override\n                 public void onFailure(Exception exc) {\n+                    //this will only ever be called when there's an issue registering the completion listener. Mostly the issue will be\n+                    //when scheduling the thread that returns a response after the wait for completion timeout.\n+                    //Note that addCompletionListener may be executed asynchronously as it has to wait for onListShards to be called,\n+                    //which is why we need to rely on the listener rather than catching.\n+                    taskManager.unregister(searchTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTkwNDQ4", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-427990448", "createdAt": "2020-06-10T12:14:29Z", "commit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDoyOVrOGhx9NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxNDoyOVrOGhx9NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDY3Ng==", "bodyText": "here I added the same catch that we have below for storeFinalResponse. It's based on paranoia, but should not hurt?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438074676", "createdAt": "2020-06-10T12:14:29Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -183,18 +188,26 @@ private void onFinalResponse(CancellableTask submitTask,\n                                  AsyncSearchResponse response,\n                                  Runnable nextAction) {\n         if (submitTask.isCancelled() || searchTask.isCancelled()) {\n-            // the task was cancelled so we ensure that there is nothing stored in the response index.\n-            store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n-                resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n-                exc -> {\n-                    logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\", searchTask.getExecutionId()), exc);\n-                    unregisterTaskAndMoveOn(searchTask, nextAction);\n-                }));\n+            try {\n+                // the task was cancelled so we ensure that there is nothing stored in the response index.\n+                store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n+                    resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n+                    exc -> {\n+                        logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                            searchTask.getExecutionId().getEncoded()), exc);\n+                        unregisterTaskAndMoveOn(searchTask, nextAction);\n+                    }));\n+            } catch(Exception exc) {\n+                logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                        searchTask.getExecutionId().getEncoded()),\n+                    exc);\n+                unregisterTaskAndMoveOn(searchTask, nextAction);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzQzNDI5", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-428343429", "createdAt": "2020-06-10T18:58:15Z", "commit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo1ODoxNVrOGiCWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMjoxNFrOGiCd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MzIwNg==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438343206", "createdAt": "2020-06-10T18:58:15Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -218,17 +217,19 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                listener.onResponse(getResponseWithHeaders());\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MzYzNA=="}, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NDc2NA==", "bodyText": "I was thinking of this and I don't think we should add the failure here. It can be transient so a retry may fix the issue.  I'd prefer that we try/catch the call to toAsyncSearchResponse and use a plain ActionListener to notify the failure, wdyt ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438344764", "createdAt": "2020-06-10T19:01:17Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -150,8 +150,19 @@ void addShardFailure(int shardIndex, ShardSearchFailure failure) {\n      * This method is synchronized to ensure that we don't perform final reduces concurrently.\n      */\n     synchronized AsyncSearchResponse toAsyncSearchResponse(AsyncSearchTask task, long expirationTime) {\n-        return new AsyncSearchResponse(task.getExecutionId().getEncoded(), findOrBuildResponse(task),\n-                failure, isPartial, frozen == false, task.getStartTime(), expirationTime);\n+        SearchResponse searchResponse = null;\n+        Exception error = failure;\n+        try {\n+            searchResponse = findOrBuildResponse(task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTIxMg==", "bodyText": "We could also make the try/catch in deleteResponse and call onFailure instead of throwing an exception ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r438345212", "createdAt": "2020-06-10T19:02:14Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -183,18 +188,26 @@ private void onFinalResponse(CancellableTask submitTask,\n                                  AsyncSearchResponse response,\n                                  Runnable nextAction) {\n         if (submitTask.isCancelled() || searchTask.isCancelled()) {\n-            // the task was cancelled so we ensure that there is nothing stored in the response index.\n-            store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n-                resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n-                exc -> {\n-                    logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\", searchTask.getExecutionId()), exc);\n-                    unregisterTaskAndMoveOn(searchTask, nextAction);\n-                }));\n+            try {\n+                // the task was cancelled so we ensure that there is nothing stored in the response index.\n+                store.deleteResponse(searchTask.getExecutionId(), ActionListener.wrap(\n+                    resp -> unregisterTaskAndMoveOn(searchTask, nextAction),\n+                    exc -> {\n+                        logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                            searchTask.getExecutionId().getEncoded()), exc);\n+                        unregisterTaskAndMoveOn(searchTask, nextAction);\n+                    }));\n+            } catch(Exception exc) {\n+                logger.error(() -> new ParameterizedMessage(\"failed to clean async-search [{}]\",\n+                        searchTask.getExecutionId().getEncoded()),\n+                    exc);\n+                unregisterTaskAndMoveOn(searchTask, nextAction);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDY3Ng=="}, "originalCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a422a85742a41c7df163c22323e765c36c3328ec", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/a422a85742a41c7df163c22323e765c36c3328ec", "committedDate": "2020-06-25T10:22:59Z", "message": "Improve error handling in async search code\n\n- The exception that we caught when failing to schedule a thread was incorrect.\n- We may have failures when reducing the response before returning it, which were not handled correctly and may have caused get or submit async search task to not be properly unregistered from the task manager\n- when the completion listener onFailure method is invoked, the search task has to be unregistered. Not doing so may cause the search task to be stuck in the task manager although it has completed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a011129c662311160ecd9a0abdd3db394576fb6", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/1a011129c662311160ecd9a0abdd3db394576fb6", "committedDate": "2020-06-25T10:27:03Z", "message": "notify listener instead of try catch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5184732d89b49ea9fa96bbe4abfb7cd39a78c488", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/5184732d89b49ea9fa96bbe4abfb7cd39a78c488", "committedDate": "2020-06-25T15:48:32Z", "message": "iter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c342e911aae9ecb0f3a5382c8f7e8d088725405", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c342e911aae9ecb0f3a5382c8f7e8d088725405", "committedDate": "2020-06-10T10:36:27Z", "message": "Improve error handling in async search code\n\n- The exception that we caught when failing to schedule a thread was incorrect.\n- We may have failures when reducing the response before returning it, which were not handled correctly and may have caused get or submit async search task to not be properly unregistered from the task manager\n- when the completion listener onFailure method is invoked, the search task has to be unregistered. Not doing so may cause the search task to be stuck in the task manager although it has completed."}, "afterCommit": {"oid": "5184732d89b49ea9fa96bbe4abfb7cd39a78c488", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/5184732d89b49ea9fa96bbe4abfb7cd39a78c488", "committedDate": "2020-06-25T15:48:32Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb8d10e20a48d1a29bffe43511d487cebe3e0771", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/cb8d10e20a48d1a29bffe43511d487cebe3e0771", "committedDate": "2020-06-25T15:52:07Z", "message": "revert assertion error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbcb08d5a7c55b57fd6d5ecd285e64ec9fa19229", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/cbcb08d5a7c55b57fd6d5ecd285e64ec9fa19229", "committedDate": "2020-06-26T09:50:27Z", "message": "store initial response together with failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c98dbe2229cb87671329468223fa2f1d6f778c", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/27c98dbe2229cb87671329468223fa2f1d6f778c", "committedDate": "2020-06-26T12:04:39Z", "message": "fix compile error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f91a20477c68176fe579845a472280dc97ce1da", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/3f91a20477c68176fe579845a472280dc97ce1da", "committedDate": "2020-06-28T21:42:55Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/f01df9bd48e87c5945421272d2e4d4c6d89dc3c7", "committedDate": "2020-06-28T21:43:56Z", "message": "remove temporary changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODE1ODUz", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-438815853", "createdAt": "2020-06-28T21:45:44Z", "commit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo0NTo0NFrOGqAh9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTo0NTo0NFrOGqAh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMjA3MQ==", "bodyText": "I think this is simpler and even preserves status codes, not sure why we were using guessRootCauses", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r446702071", "createdAt": "2020-06-28T21:45:44Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -130,17 +131,7 @@ synchronized void updateWithFailure(Exception exc) {\n         //note that when search fails, we may have gotten partial results before the failure. In that case async\n         // search will return an error plus the last partial results that were collected.\n         this.isPartial = true;\n-        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(exc);\n-        if (rootCauses == null || rootCauses.length == 0) {\n-            this.failure = new ElasticsearchException(exc.getMessage(), exc) {\n-                @Override\n-                protected String getExceptionName() {\n-                    return getExceptionName(getCause());\n-                }\n-            };\n-        } else {\n-            this.failure = rootCauses[0];\n-        }\n+        this.failure = ExceptionsHelper.convertToElastic(exc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDI5MTM3", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-440029137", "createdAt": "2020-06-30T13:44:44Z", "commit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0NDo0NFrOGq9EWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1NTo0NVrOGq9k0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MzkxMg==", "bodyText": "should we copy the completion listeners in the synchronized block to avoid concurrent delete (unregister) ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447693912", "createdAt": "2020-06-30T13:44:44Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTM5MQ==", "bodyText": "we still need to cancel the cancellable on failure", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447695391", "createdAt": "2020-06-30T13:46:43Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -220,38 +218,45 @@ private void internalAddCompletionListener(ActionListener<AsyncSearchResponse> l\n                 // ensure that we consumes the listener only once\n                 AtomicBoolean hasRun = new AtomicBoolean(false);\n                 long id = completionId++;\n-\n                 final Cancellable cancellable;\n                 try {\n-                    cancellable = threadPool.schedule(() -> {\n-                        if (hasRun.compareAndSet(false, true)) {\n-                            // timeout occurred before completion\n-                            removeCompletionListener(id);\n-                            listener.onResponse(getResponseWithHeaders());\n-                        }\n-                    }, waitForCompletion, \"generic\");\n-                } catch (EsRejectedExecutionException exc) {\n+                     cancellable = threadPool.schedule(\n+                         () -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // timeout occurred before completion\n+                                removeCompletionListener(id);\n+                                getResponseWithHeaders(listener);\n+                            }\n+                        },\n+                        waitForCompletion,\n+                        \"generic\");\n+                } catch(Exception exc) {\n                     listener.onFailure(exc);\n                     return;\n                 }\n-                completionListeners.put(id, resp -> {\n-                    if (hasRun.compareAndSet(false, true)) {\n-                        // completion occurred before timeout\n-                        cancellable.cancel();\n-                        listener.onResponse(resp);\n-                    }\n-                });\n+                completionListeners.register(\n+                    id,\n+                    ActionListener.wrap(\n+                        resp -> {\n+                            if (hasRun.compareAndSet(false, true)) {\n+                                // completion occurred before timeout\n+                                cancellable.cancel();\n+                                listener.onResponse(resp);\n+                            }\n+                        },\n+                        listener::onFailure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzAwNQ==", "bodyText": "The other solution would be to build the error response when catching the exception in getResponse ? This way we don't need to differentiate between a failure during partial reduce and a fatal failure. They both return an async search response that contains a failure ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447697005", "createdAt": "2020-06-30T13:49:00Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -292,30 +297,41 @@ private void executeCompletionListeners() {\n         }\n         // we don't need to restore the response headers, they should be included in the current\n         // context since we are called by the search action listener.\n-        AsyncSearchResponse finalResponse = getResponse();\n-        for (Consumer<AsyncSearchResponse> listener : completionListeners.values()) {\n-            listener.accept(finalResponse);\n-        }\n-        completionListeners.clear();\n+        getResponse(completionListeners);\n+        //TODO is clearing the map necessary? we will only execute the listeners once anyways\n+        //completionListeners.clear();\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse}.\n      */\n-    private AsyncSearchResponse getResponse() {\n-        assert searchResponse.get() != null;\n-        checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis);\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, false);\n     }\n \n     /**\n      * Returns the current {@link AsyncSearchResponse} and restores the response headers\n      * in the local thread context.\n      */\n-    private AsyncSearchResponse getResponseWithHeaders() {\n+    private void getResponseWithHeaders(ActionListener<AsyncSearchResponse> listener) {\n+        getResponse(listener, true);\n+    }\n+\n+    private void getResponse(ActionListener<AsyncSearchResponse> listener, boolean restoreResponseHeaders) {\n         assert searchResponse.get() != null;\n         checkCancellation();\n-        return searchResponse.get().toAsyncSearchResponseWithHeaders(this, expirationTimeMillis);\n+        AsyncSearchResponse asyncSearchResponse;\n+        try {\n+            asyncSearchResponse = searchResponse.get().toAsyncSearchResponse(this, expirationTimeMillis, restoreResponseHeaders);\n+        } catch(Exception e) {\n+            listener.onFailure(e);\n+            return;\n+        }\n+        listener.onResponse(asyncSearchResponse);\n+    }\n+\n+    AsyncSearchResponse buildErrorResponse(SearchResponse searchResponse, Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NzcyMA==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447697720", "createdAt": "2020-06-30T13:49:57Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -130,17 +131,7 @@ synchronized void updateWithFailure(Exception exc) {\n         //note that when search fails, we may have gotten partial results before the failure. In that case async\n         // search will return an error plus the last partial results that were collected.\n         this.isPartial = true;\n-        ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(exc);\n-        if (rootCauses == null || rootCauses.length == 0) {\n-            this.failure = new ElasticsearchException(exc.getMessage(), exc) {\n-                @Override\n-                protected String getExceptionName() {\n-                    return getExceptionName(getCause());\n-                }\n-            };\n-        } else {\n-            this.failure = rootCauses[0];\n-        }\n+        this.failure = ExceptionsHelper.convertToElastic(exc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMjA3MQ=="}, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjIyNA==", "bodyText": "You don't really need a full plugin since we only use the FailReduceInternalAgg and are in charge of the registry in  AsyncSearchTaskTests  ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r447702224", "createdAt": "2020-06-30T13:55:45Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/FailReduceAggPlugin.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.search;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.common.breaker.CircuitBreaker;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ContextParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SearchPlugin;\n+import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorBase;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FailReduceAggPlugin extends Plugin implements SearchPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01df9bd48e87c5945421272d2e4d4c6d89dc3c7"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42af6bfd182f11c7808db9e8bc5b5b098dc989a9", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/42af6bfd182f11c7808db9e8bc5b5b098dc989a9", "committedDate": "2020-07-01T09:17:33Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e73685a5e74662506a721eec59322845729b8a4", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/7e73685a5e74662506a721eec59322845729b8a4", "committedDate": "2020-07-01T11:01:24Z", "message": "wip: go back to consumer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzcxNTY4", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-440771568", "createdAt": "2020-07-01T11:09:13Z", "commit": {"oid": "7e73685a5e74662506a721eec59322845729b8a4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTowOToxM1rOGrhb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTowOToxM1rOGrhb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4OTc1MQ==", "bodyText": "++, we should return the current stats (number of shards, shard failures, ...) and just omit the partial aggs.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448289751", "createdAt": "2020-07-01T11:09:13Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/MutableSearchResponse.java", "diffHunk": "@@ -191,14 +171,33 @@ private SearchResponse findOrBuildResponse(AsyncSearchTask task) {\n \n     /**\n      * Creates an {@link AsyncSearchResponse} based on the current state of the mutable response.\n-     * This method also restores the response headers in the current thread context if the final response is available.\n+     * The final reduce of the aggregations is executed if needed (partial response).\n+     * This method is synchronized to ensure that we don't perform final reduces concurrently.\n+     * This method also restores the response headers in the current thread context when requested, if the final response is available.\n      */\n-    synchronized AsyncSearchResponse toAsyncSearchResponseWithHeaders(AsyncSearchTask task, long expirationTime) {\n-        AsyncSearchResponse resp = toAsyncSearchResponse(task, expirationTime);\n-        if (responseHeaders != null) {\n+    synchronized AsyncSearchResponse toAsyncSearchResponse(AsyncSearchTask task,\n+                                                           long expirationTime,\n+                                                           boolean restoreResponseHeaders) {\n+        if (restoreResponseHeaders && responseHeaders != null) {\n             restoreResponseHeadersContext(threadContext, responseHeaders);\n         }\n-        return resp;\n+        return new AsyncSearchResponse(task.getExecutionId().getEncoded(), findOrBuildResponse(task),\n+            failure, isPartial, frozen == false, task.getStartTime(), expirationTime);\n+    }\n+\n+    synchronized AsyncSearchResponse buildErrorResponse(AsyncSearchTask task,\n+                                                        long expirationTime,\n+                                                        ElasticsearchException exception) {\n+        ElasticsearchException error;\n+        if (this.failure == null) {\n+            error = exception;\n+        } else {\n+            error = this.failure;\n+            error.addSuppressed(exception);\n+        }\n+        //TODO add some search response here rather than null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e73685a5e74662506a721eec59322845729b8a4"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4376ff5bf5f38b745568b78f1ad3fb01a6c4098c", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/4376ff5bf5f38b745568b78f1ad3fb01a6c4098c", "committedDate": "2020-07-02T09:04:47Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970", "committedDate": "2020-07-02T09:05:26Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDk0MTM0", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-441494134", "createdAt": "2020-07-02T09:10:51Z", "commit": {"oid": "9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToxMDo1MVrOGsEVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOToxMDo1MVrOGsEVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTU2Mg==", "bodyText": "is the additional wrapping ok? I think it's odd that we have to have it, but useful to clarify where errors come from: async search or search execution.", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r448861562", "createdAt": "2020-07-02T09:10:51Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -405,12 +425,10 @@ public void onResponse(SearchResponse response) {\n \n         @Override\n         public void onFailure(Exception exc) {\n-            if (searchResponse.get() == null) {\n-                // if the failure occurred before calling onListShards\n-                searchResponse.compareAndSet(null,\n-                    new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n-            }\n-            searchResponse.get().updateWithFailure(exc);\n+            // if the failure occurred before calling onListShards\n+            searchResponse.compareAndSet(null, new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n+            searchResponse.get().updateWithFailure(new ElasticsearchStatusException(\"error while executing search\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/57aa863cb69e04232836e2db098dec703af33f29", "committedDate": "2020-07-02T09:14:06Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODYyNDk2", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-441862496", "createdAt": "2020-07-02T16:44:24Z", "commit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo0NDoyNFrOGsVlqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo0Nzo1MFrOGsVtdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NDIzNQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449144235", "createdAt": "2020-07-02T16:44:24Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java", "diffHunk": "@@ -405,12 +425,10 @@ public void onResponse(SearchResponse response) {\n \n         @Override\n         public void onFailure(Exception exc) {\n-            if (searchResponse.get() == null) {\n-                // if the failure occurred before calling onListShards\n-                searchResponse.compareAndSet(null,\n-                    new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n-            }\n-            searchResponse.get().updateWithFailure(exc);\n+            // if the failure occurred before calling onListShards\n+            searchResponse.compareAndSet(null, new MutableSearchResponse(-1, -1, null, threadPool.getThreadContext()));\n+            searchResponse.get().updateWithFailure(new ElasticsearchStatusException(\"error while executing search\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MTU2Mg=="}, "originalCommit": {"oid": "9a8927ca1ad90c54a33c275d0fc5b7ba73d2e970"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NDkxNQ==", "bodyText": "Can you reword this comment to make it understandable ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449144915", "createdAt": "2020-07-02T16:45:27Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/TransportSubmitAsyncSearchAction.java", "diffHunk": "@@ -126,7 +126,10 @@ public void onFailure(Exception exc) {\n \n                 @Override\n                 public void onFailure(Exception exc) {\n-                    submitListener.onFailure(exc);\n+                    //this will only ever be called when there's an issue scheduling the thread will invoke\n+                    //the completion listener once the wait for completion timeout expires", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ==", "bodyText": "I don't think you can make that change without breaking BWC ? You'd need to wrap the exception if we read from an earlier version ?", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449145985", "createdAt": "2020-07-02T16:47:23Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NjIzMA==", "bodyText": "Although I think we should stick to an  Exception here to keep things simple", "url": "https://github.com/elastic/elasticsearch/pull/57925#discussion_r449146230", "createdAt": "2020-07-02T16:47:50Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/search/action/AsyncSearchResponse.java", "diffHunk": "@@ -30,7 +30,7 @@\n     @Nullable\n     private final SearchResponse searchResponse;\n     @Nullable\n-    private final Exception error;\n+    private final ElasticsearchException error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NTk4NQ=="}, "originalCommit": {"oid": "57aa863cb69e04232836e2db098dec703af33f29"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b52b7796be1716913e2fd79ac0519546a3e03366", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/b52b7796be1716913e2fd79ac0519546a3e03366", "committedDate": "2020-07-02T19:11:41Z", "message": "Merge branch 'master' into fix/completion_listener_failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c737abcbf531b23581177bc0f6ebe094ec6ec7c", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c737abcbf531b23581177bc0f6ebe094ec6ec7c", "committedDate": "2020-07-02T19:14:32Z", "message": "clarify comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b8596950b682776e4187ac870ca84910a6028a", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/e5b8596950b682776e4187ac870ca84910a6028a", "committedDate": "2020-07-02T19:32:14Z", "message": "simplify AsyncSearchResponse#status method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6fb544d3d1b3fad582279485c8a8cca66417db", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/6b6fb544d3d1b3fad582279485c8a8cca66417db", "committedDate": "2020-07-02T19:46:07Z", "message": "adapt to internalaggs changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd26c744ca91f58a804d20c4d722bd929fe815c3", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/fd26c744ca91f58a804d20c4d722bd929fe815c3", "committedDate": "2020-07-03T10:39:39Z", "message": "Revert \"simplify AsyncSearchResponse#status method\"\n\nThis reverts commit e5b8596950b682776e4187ac870ca84910a6028a."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2d0eb54cdab5dbbd40cb2d90db46e31a3f776d9", "author": {"user": {"login": "javanna", "name": "Luca Cavanna"}}, "url": "https://github.com/elastic/elasticsearch/commit/a2d0eb54cdab5dbbd40cb2d90db46e31a3f776d9", "committedDate": "2020-07-03T10:41:29Z", "message": "iter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzk1MDI1", "url": "https://github.com/elastic/elasticsearch/pull/57925#pullrequestreview-442395025", "createdAt": "2020-07-03T12:56:27Z", "commit": {"oid": "a2d0eb54cdab5dbbd40cb2d90db46e31a3f776d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 735, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}