{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTAwODg2", "number": 62276, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjoyNlrOEitH7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNDozN1rOEjieJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI2MzUxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjoyNlrOHQvIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNzo0MFrOHVcoyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMTQ5NA==", "bodyText": "PIT feedback:\n\npointInTimeBuilder method in SearchSource could be renamed to getPoint.. to follow the naming convention of the rest of the methods in the class\nSince the keepAlive is optional, it could be removed from the constructor and moved to a separate method (setKeepAlive()) in the PointInTimeBuilder class.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487311494", "createdAt": "2020-09-11T22:06:26Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0ODA3Mg==", "bodyText": "Since the keepAlive is optional, it could be removed from the constructor and moved to a separate method (setKeepAlive()) in the PointInTimeBuilder class.\n\nThanks Costin. I've opened #62720 for this.\n\npointInTimeBuilder method in SearchSource could be renamed to getPoint.. to follow the naming convention of the rest of the methods in the class\n\nWe do not use get/set in SearchSourceBuilder; hence, I will leave pointInTimeBuilder as is.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r492248072", "createdAt": "2020-09-21T18:01:36Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMTQ5NA=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTMzOA==", "bodyText": "We do not use get/set in SearchSourceBuilder; hence, I will leave pointInTimeBuilder as is.\n\nThanks for double-checking. There seems to be some inconsistency here - AggregationBuilder and SliceBuilder seem to use getter/setter while the other builders that I've checked (e.g. SortBuilder or HighlightBuilder) do not.\n:+1 from my side.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r492251338", "createdAt": "2020-09-21T18:07:40Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMTQ5NA=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTQ2NzU3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODowOTo0NFrOHRIh9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1MjoyMFrOHRSRpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyNzYwNg==", "bodyText": "Do I understand correctly that PITs are used only when there are more than one search requests internally (sequences) ?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487727606", "createdAt": "2020-09-14T08:09:44Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NzI2OQ==", "bodyText": "Correct.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487887269", "createdAt": "2020-09-14T12:52:20Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyNzYwNg=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTQ3NDA5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODoxMToyMVrOHRIltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1Nzo0MFrOHS3uZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyODU2Nw==", "bodyText": "What do we do on partial failures (shard failures) ? I wonder if these requests should run with allow_partial_search_results set to false ?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487728567", "createdAt": "2020-09-14T08:11:21Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4ODY1Mg==", "bodyText": "We don't support partial failures (it is set to false, inside RuntimeUtils#prepareRequest).", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487888652", "createdAt": "2020-09-14T12:54:27Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyODU2Nw=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0OTQxNA==", "bodyText": "cool, thanks", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r489549414", "createdAt": "2020-09-16T15:57:40Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyODU2Nw=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTQ3Nzc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODoxMjoxOVrOHRIn5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1Nzo1MVrOHS3u8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyOTEyNw==", "bodyText": "It would be nice to have tests that check that all PITs are closed when the request finishes ?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487729127", "createdAt": "2020-09-14T08:12:19Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);\n+            },\n+            // always close PIT in case of exceptions\n+            e -> {\n+                if (pitId != null) {\n+                    close(wrap(b -> {}, listener::onFailure));\n+                }\n+                listener.onFailure(e);\n+            }));\n+    }\n+\n+    private void openPIT(ActionListener<String> listener) {\n+        OpenPointInTimeRequest request = new OpenPointInTimeRequest(\n+            indices,\n+            IndexResolver.FIELD_CAPS_INDICES_OPTIONS,\n+            keepAlive,\n+            null,\n+            null\n+        );\n+        client.execute(OpenPointInTimeAction.INSTANCE, request, map(listener, OpenPointInTimeResponse::getSearchContextId));\n+    }\n+\n+    @Override\n+    public void close(ActionListener<Boolean> listener)  {\n+        client.execute(ClosePointInTimeAction.INSTANCE, new ClosePointInTimeRequest(pitId),\n+            map(listener, ClosePointInTimeResponse::isSucceeded));\n+        pitId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1MzYzMQ==", "bodyText": "Indeed. I've checked and found the assertion for no search contexts existed only in SQL so I moved it into QL to be reused into EQL as well. Commented out close to see the assertion being tripped.\nI believe that's enough.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488053631", "createdAt": "2020-09-14T16:10:10Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);\n+            },\n+            // always close PIT in case of exceptions\n+            e -> {\n+                if (pitId != null) {\n+                    close(wrap(b -> {}, listener::onFailure));\n+                }\n+                listener.onFailure(e);\n+            }));\n+    }\n+\n+    private void openPIT(ActionListener<String> listener) {\n+        OpenPointInTimeRequest request = new OpenPointInTimeRequest(\n+            indices,\n+            IndexResolver.FIELD_CAPS_INDICES_OPTIONS,\n+            keepAlive,\n+            null,\n+            null\n+        );\n+        client.execute(OpenPointInTimeAction.INSTANCE, request, map(listener, OpenPointInTimeResponse::getSearchContextId));\n+    }\n+\n+    @Override\n+    public void close(ActionListener<Boolean> listener)  {\n+        client.execute(ClosePointInTimeAction.INSTANCE, new ClosePointInTimeRequest(pitId),\n+            map(listener, ClosePointInTimeResponse::isSucceeded));\n+        pitId = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyOTEyNw=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0OTU1NQ==", "bodyText": "agreed, thanks", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r489549555", "createdAt": "2020-09-16T15:57:51Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one\n+        if (pitId == null) {\n+            openPIT(wrap(r -> {\n+                pitId = r;\n+                searchWithPIT(search, listener);\n+            }, listener::onFailure));\n+        }\n+        else {\n+            searchWithPIT(search, listener);\n+        }\n+    }\n+\n+    private void searchWithPIT(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // don't increase the keep alive\n+        search.source().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(pitId, null));\n+        // get the pid on each request\n+        super.search(search, wrap(r -> {\n+                pitId = r.pointInTimeId();\n+                listener.onResponse(r);\n+            },\n+            // always close PIT in case of exceptions\n+            e -> {\n+                if (pitId != null) {\n+                    close(wrap(b -> {}, listener::onFailure));\n+                }\n+                listener.onFailure(e);\n+            }));\n+    }\n+\n+    private void openPIT(ActionListener<String> listener) {\n+        OpenPointInTimeRequest request = new OpenPointInTimeRequest(\n+            indices,\n+            IndexResolver.FIELD_CAPS_INDICES_OPTIONS,\n+            keepAlive,\n+            null,\n+            null\n+        );\n+        client.execute(OpenPointInTimeAction.INSTANCE, request, map(listener, OpenPointInTimeResponse::getSearchContextId));\n+    }\n+\n+    @Override\n+    public void close(ActionListener<Boolean> listener)  {\n+        client.execute(ClosePointInTimeAction.INSTANCE, new ClosePointInTimeRequest(pitId),\n+            map(listener, ClosePointInTimeResponse::isSucceeded));\n+        pitId = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyOTEyNw=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzE5ODM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0Nzo1OVrOHRYn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0Nzo1OVrOHRYn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MTI1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Extension of basic query, adding awareness Point-in-Time awareness.\n          \n          \n            \n             * Extension of basic query, adding Point-in-Time awareness.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487991256", "createdAt": "2020-09-14T14:47:59Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzIwMjI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0ODo0N1rOHRYqRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoxMDoyNlrOHRccTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MTg3Ng==", "bodyText": "PIT or pit ID?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r487991876", "createdAt": "2020-09-14T14:48:47Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1MzgzOA==", "bodyText": "pitID", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488053838", "createdAt": "2020-09-14T16:10:26Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/PITAwareQueryClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.search;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.ClosePointInTimeResponse;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeAction;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeRequest;\n+import org.elasticsearch.xpack.core.search.action.OpenPointInTimeResponse;\n+import org.elasticsearch.xpack.eql.session.EqlSession;\n+import org.elasticsearch.xpack.ql.index.IndexResolver;\n+\n+import static org.elasticsearch.xpack.ql.util.ActionListeners.map;\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Extension of basic query, adding awareness Point-in-Time awareness.\n+ * Opens a point-in-time, uses it for all queries and closes it when disposed,\n+ * freeing consumer from doing any special management for it.\n+ */\n+public class PITAwareQueryClient extends BasicQueryClient {\n+\n+    private String pitId;\n+    private final TimeValue keepAlive;\n+\n+    public PITAwareQueryClient(EqlSession eqlSession) {\n+        super(eqlSession);\n+        this.keepAlive = eqlSession.configuration().requestTimeout();\n+    }\n+\n+    @Override\n+    protected void search(SearchRequest search, ActionListener<SearchResponse> listener) {\n+        // no pid, ask for one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MTg3Ng=="}, "originalCommit": {"oid": "ee156d037f161f3339dd446c7f297f37ff05ad86"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzU5Nzk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoxMjoxMFrOHRcg4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowMzoxOVrOHR8ajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1NTAxMQ==", "bodyText": "Add assertion that all search contexts are closed after each single test.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488055011", "createdAt": "2020-09-14T16:12:10Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -31,6 +31,11 @@\n     private static final String defaultValidationIndexName = \"eql_search_validation_test\";\n     private static final String validQuery = \"process where user = 'SYSTEM'\";\n \n+    @After\n+    public void checkSearchContent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98239bc865ac2219d185f9b427aa9c29e77d5ad"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzY3OA==", "bodyText": "Really minor: checkSearchContent or checkSearchContext?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488577678", "createdAt": "2020-09-15T11:03:19Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -31,6 +31,11 @@\n     private static final String defaultValidationIndexName = \"eql_search_validation_test\";\n     private static final String validQuery = \"process where user = 'SYSTEM'\";\n \n+    @After\n+    public void checkSearchContent() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1NTAxMQ=="}, "originalCommit": {"oid": "e98239bc865ac2219d185f9b427aa9c29e77d5ad"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzAwMzg4OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNDozN1rOHR8dPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoyMjoyNlrOHR_IPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3ODM2NQ==", "bodyText": "This check is being performed in other places in code. If we remove this one here, should it be removed anywhere else as well?", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488578365", "createdAt": "2020-09-15T11:04:37Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -43,14 +48,9 @@\n             {\"{\\\"query\\\": \\\"\" + validQuery + \"\\\", \\\"filter\\\": {}}\", \"query malformed, empty clause found\"}\n     };\n \n-    @BeforeClass\n-    public static void checkForSnapshot() {\n-        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6baac3a2acbead83b96818a3422de997a890299"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyMjE0Mg==", "bodyText": "There are several improvements that can be made to this class but I wanted to keep it separate:\n\nthe class / index name needs to be changed\nthe snapshot was suppose to be removed outside the feature flag - it hasn't so maybe there are cases for this.\nThe class should be refactored so it contains only the loading and utility tests, not any tests itself.", "url": "https://github.com/elastic/elasticsearch/pull/62276#discussion_r488622142", "createdAt": "2020-09-15T12:22:26Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlRestTestCase.java", "diffHunk": "@@ -43,14 +48,9 @@\n             {\"{\\\"query\\\": \\\"\" + validQuery + \"\\\", \\\"filter\\\": {}}\", \"query malformed, empty clause found\"}\n     };\n \n-    @BeforeClass\n-    public static void checkForSnapshot() {\n-        assumeTrue(\"Only works on snapshot builds for now\", Build.CURRENT.isSnapshot());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3ODM2NQ=="}, "originalCommit": {"oid": "c6baac3a2acbead83b96818a3422de997a890299"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1518, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}