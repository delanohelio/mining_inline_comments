{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDQ3MjM0", "number": 54520, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyNjo1NVrODtMHHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyNjo1NVrODtMHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzEwOTQyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/RestSubmitAsyncSearchActionTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyNjo1NVrOF-eFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyNjo1NVrOF-eFAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0ODgzMg==", "bodyText": "it would be cleaner to also clean up the channels being tracked due to the dispatchRequest calls from this test. I gave it a try though and it was not trivial, and the same should be done in RestCancellableNodeClientTests where we actually assume that we may have channels in the map already, hence we only check the delta since the test has started. I wonder if it's worth looking into cleaning the channels up after both tests have executed, or not.", "url": "https://github.com/elastic/elasticsearch/pull/54520#discussion_r401048832", "createdAt": "2020-03-31T16:26:55Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/RestSubmitAsyncSearchActionTests.java", "diffHunk": "@@ -72,8 +72,8 @@ public void testParameters() throws IOException {\n         boolean requestCache = randomBoolean();\n         doTestParameter(\"request_cache\", Boolean.toString(requestCache), requestCache,\n                 r -> r.getSearchRequest().requestCache());\n-        Integer batchReduceSize = randomIntBetween(2, 50);\n-        doTestParameter(\"batched_reduce_size\", Integer.toString(batchReduceSize), batchReduceSize,\n+        int batchedReduceSize = randomIntBetween(2, 50);\n+        doTestParameter(\"batched_reduce_size\", Integer.toString(batchedReduceSize), batchedReduceSize,\n                 r -> r.getSearchRequest().getBatchedReduceSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02faf42a4e6f03ae0b023baa3bad859c1571e508"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}