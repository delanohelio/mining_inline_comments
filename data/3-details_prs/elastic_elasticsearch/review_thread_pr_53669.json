{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODc4NDk0", "number": 53669, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0NzowN1rODpnS5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMDoxMFrODpoAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTYyMDIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0NzowN1rOF45vlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0NzowN1rOF45vlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMDY0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Validate a the pipeline aggregations in this factory.\n          \n          \n            \n                     * Validate the pipeline aggregations in this factory.", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395210646", "createdAt": "2020-03-19T17:47:07Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java", "diffHunk": "@@ -298,23 +297,59 @@ public Builder addPipelineAggregator(PipelineAggregationBuilder pipelineAggregat\n             return this;\n         }\n \n+        /**\n+         * Validate the root of the aggregation tree.\n+         */\n+        public ActionRequestValidationException validate(ActionRequestValidationException e) {\n+            PipelineAggregationBuilder.ValidationContext context =\n+                    PipelineAggregationBuilder.ValidationContext.forTreeRoot(aggregationBuilders, pipelineAggregatorBuilders, e);\n+            validatePipelines(context);\n+            return validateChildren(context.getValidationException());\n+        }\n+\n+        /**\n+         * Validate a the pipeline aggregations in this factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTYyNjkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0ODo1M1rOF45z7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxNzozOFrOF6SMNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMTc1Nw==", "bodyText": "Should we allow the validations to keep running down the tree, so we can tell the user all the problems at once?", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395211757", "createdAt": "2020-03-19T17:48:53Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java", "diffHunk": "@@ -298,23 +297,59 @@ public Builder addPipelineAggregator(PipelineAggregationBuilder pipelineAggregat\n             return this;\n         }\n \n+        /**\n+         * Validate the root of the aggregation tree.\n+         */\n+        public ActionRequestValidationException validate(ActionRequestValidationException e) {\n+            PipelineAggregationBuilder.ValidationContext context =\n+                    PipelineAggregationBuilder.ValidationContext.forTreeRoot(aggregationBuilders, pipelineAggregatorBuilders, e);\n+            validatePipelines(context);\n+            return validateChildren(context.getValidationException());\n+        }\n+\n+        /**\n+         * Validate a the pipeline aggregations in this factory.\n+         */\n+        private void validatePipelines(PipelineAggregationBuilder.ValidationContext context) {\n+            List<PipelineAggregationBuilder> orderedPipelineAggregators;\n+            try {\n+                orderedPipelineAggregators = resolvePipelineAggregatorOrder(pipelineAggregatorBuilders, aggregationBuilders);\n+            } catch (IllegalArgumentException iae) {\n+                context.addValidationError(iae.getMessage());\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMDMxMQ==", "bodyText": "I was tempted but I think the tree is pretty borked at this point and you'll end up with duplicate error messages all about the same thing. And I figured we were just returning a single error message right now so it probably isn't worse than it was before and we could do it later if we wanted it.", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395320311", "createdAt": "2020-03-19T21:08:04Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java", "diffHunk": "@@ -298,23 +297,59 @@ public Builder addPipelineAggregator(PipelineAggregationBuilder pipelineAggregat\n             return this;\n         }\n \n+        /**\n+         * Validate the root of the aggregation tree.\n+         */\n+        public ActionRequestValidationException validate(ActionRequestValidationException e) {\n+            PipelineAggregationBuilder.ValidationContext context =\n+                    PipelineAggregationBuilder.ValidationContext.forTreeRoot(aggregationBuilders, pipelineAggregatorBuilders, e);\n+            validatePipelines(context);\n+            return validateChildren(context.getValidationException());\n+        }\n+\n+        /**\n+         * Validate a the pipeline aggregations in this factory.\n+         */\n+        private void validatePipelines(PipelineAggregationBuilder.ValidationContext context) {\n+            List<PipelineAggregationBuilder> orderedPipelineAggregators;\n+            try {\n+                orderedPipelineAggregators = resolvePipelineAggregatorOrder(pipelineAggregatorBuilders, aggregationBuilders);\n+            } catch (IllegalArgumentException iae) {\n+                context.addValidationError(iae.getMessage());\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMTc1Nw=="}, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1OTc2NQ==", "bodyText": "Makes sense to me \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r396659765", "createdAt": "2020-03-23T18:17:38Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java", "diffHunk": "@@ -298,23 +297,59 @@ public Builder addPipelineAggregator(PipelineAggregationBuilder pipelineAggregat\n             return this;\n         }\n \n+        /**\n+         * Validate the root of the aggregation tree.\n+         */\n+        public ActionRequestValidationException validate(ActionRequestValidationException e) {\n+            PipelineAggregationBuilder.ValidationContext context =\n+                    PipelineAggregationBuilder.ValidationContext.forTreeRoot(aggregationBuilders, pipelineAggregatorBuilders, e);\n+            validatePipelines(context);\n+            return validateChildren(context.getValidationException());\n+        }\n+\n+        /**\n+         * Validate a the pipeline aggregations in this factory.\n+         */\n+        private void validatePipelines(PipelineAggregationBuilder.ValidationContext context) {\n+            List<PipelineAggregationBuilder> orderedPipelineAggregators;\n+            try {\n+                orderedPipelineAggregators = resolvePipelineAggregatorOrder(pipelineAggregatorBuilders, aggregationBuilders);\n+            } catch (IllegalArgumentException iae) {\n+                context.addValidationError(iae.getMessage());\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMTc1Nw=="}, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcyNzU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/PipelineAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxNzoyMVrOF461vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTowNTozMVrOF5AXdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyODYwNg==", "bodyText": "Ahh yes, this thing.  Would be nice someday if we could get rid of these instanceofs with some kind of isSequential() method on the agg.\nBattle for another day :)", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395228606", "createdAt": "2020-03-19T18:17:21Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/PipelineAggregationBuilder.java", "diffHunk": "@@ -64,11 +70,145 @@ public String getName() {\n     }\n \n     /**\n-     * Internal: Validates the state of this factory (makes sure the factory is properly\n-     * configured)\n+     * Makes sure this builder is properly configured.\n      */\n-    protected abstract void validate(AggregatorFactory parent, Collection<AggregationBuilder> aggregationBuilders,\n-            Collection<PipelineAggregationBuilder> pipelineAggregatorBuilders);\n+    protected abstract void validate(ValidationContext context);\n+    public abstract static class ValidationContext {\n+        /**\n+         * Build the context for the root of the aggregation tree.\n+         */\n+        public static ValidationContext forTreeRoot(Collection<AggregationBuilder> siblingAggregations,\n+                Collection<PipelineAggregationBuilder> siblingPipelineAggregations,\n+                ActionRequestValidationException validationFailuresSoFar) {\n+            return new ForTreeRoot(siblingAggregations, siblingPipelineAggregations, validationFailuresSoFar);\n+        }\n+\n+        /**\n+         * Build the context for a node inside the aggregation tree.\n+         */\n+        public static ValidationContext forInsideTree(AggregationBuilder parent,\n+                ActionRequestValidationException validationFailuresSoFar) {\n+            return new ForInsideTree(parent, validationFailuresSoFar);\n+        }\n+\n+\n+        private ActionRequestValidationException e;\n+\n+        private ValidationContext(ActionRequestValidationException validationFailuresSoFar) {\n+            this.e = validationFailuresSoFar;\n+        }\n+\n+        private static class ForTreeRoot extends ValidationContext {\n+            private final Collection<AggregationBuilder> siblingAggregations;\n+            private final Collection<PipelineAggregationBuilder> siblingPipelineAggregations;\n+\n+            ForTreeRoot(Collection<AggregationBuilder> siblingAggregations,\n+                    Collection<PipelineAggregationBuilder> siblingPipelineAggregations,\n+                    ActionRequestValidationException validationFailuresSoFar) {\n+                super(validationFailuresSoFar);\n+                this.siblingAggregations = Objects.requireNonNull(siblingAggregations);\n+                this.siblingPipelineAggregations = Objects.requireNonNull(siblingPipelineAggregations);\n+            }\n+\n+            @Override\n+            public Collection<AggregationBuilder> getSiblingAggregations() {\n+                return siblingAggregations;\n+            }\n+\n+            @Override\n+            public Collection<PipelineAggregationBuilder> getSiblingPipelineAggregations() {\n+                return siblingPipelineAggregations;\n+            }\n+\n+            @Override\n+            public void validateParentAggSequentiallyOrdered(String type, String name) {\n+                addValidationError(type + \" aggregation [\" + name\n+                        + \"] must have a histogram, date_histogram or auto_date_histogram as parent but doesn't have a parent\");\n+            }\n+        }\n+\n+        private static class ForInsideTree extends ValidationContext {\n+            private final AggregationBuilder parent;\n+\n+            ForInsideTree(AggregationBuilder parent, ActionRequestValidationException validationFailuresSoFar) {\n+                super(validationFailuresSoFar);\n+                this.parent = Objects.requireNonNull(parent);\n+            }\n+\n+            @Override\n+            public Collection<AggregationBuilder> getSiblingAggregations() {\n+                return parent.getSubAggregations();\n+            }\n+\n+            @Override\n+            public Collection<PipelineAggregationBuilder> getSiblingPipelineAggregations() {\n+                return parent.getPipelineAggregations();\n+            }\n+\n+            @Override\n+            public void validateParentAggSequentiallyOrdered(String type, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxOTE1OQ==", "bodyText": "+++++++++++++", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395319159", "createdAt": "2020-03-19T21:05:31Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/PipelineAggregationBuilder.java", "diffHunk": "@@ -64,11 +70,145 @@ public String getName() {\n     }\n \n     /**\n-     * Internal: Validates the state of this factory (makes sure the factory is properly\n-     * configured)\n+     * Makes sure this builder is properly configured.\n      */\n-    protected abstract void validate(AggregatorFactory parent, Collection<AggregationBuilder> aggregationBuilders,\n-            Collection<PipelineAggregationBuilder> pipelineAggregatorBuilders);\n+    protected abstract void validate(ValidationContext context);\n+    public abstract static class ValidationContext {\n+        /**\n+         * Build the context for the root of the aggregation tree.\n+         */\n+        public static ValidationContext forTreeRoot(Collection<AggregationBuilder> siblingAggregations,\n+                Collection<PipelineAggregationBuilder> siblingPipelineAggregations,\n+                ActionRequestValidationException validationFailuresSoFar) {\n+            return new ForTreeRoot(siblingAggregations, siblingPipelineAggregations, validationFailuresSoFar);\n+        }\n+\n+        /**\n+         * Build the context for a node inside the aggregation tree.\n+         */\n+        public static ValidationContext forInsideTree(AggregationBuilder parent,\n+                ActionRequestValidationException validationFailuresSoFar) {\n+            return new ForInsideTree(parent, validationFailuresSoFar);\n+        }\n+\n+\n+        private ActionRequestValidationException e;\n+\n+        private ValidationContext(ActionRequestValidationException validationFailuresSoFar) {\n+            this.e = validationFailuresSoFar;\n+        }\n+\n+        private static class ForTreeRoot extends ValidationContext {\n+            private final Collection<AggregationBuilder> siblingAggregations;\n+            private final Collection<PipelineAggregationBuilder> siblingPipelineAggregations;\n+\n+            ForTreeRoot(Collection<AggregationBuilder> siblingAggregations,\n+                    Collection<PipelineAggregationBuilder> siblingPipelineAggregations,\n+                    ActionRequestValidationException validationFailuresSoFar) {\n+                super(validationFailuresSoFar);\n+                this.siblingAggregations = Objects.requireNonNull(siblingAggregations);\n+                this.siblingPipelineAggregations = Objects.requireNonNull(siblingPipelineAggregations);\n+            }\n+\n+            @Override\n+            public Collection<AggregationBuilder> getSiblingAggregations() {\n+                return siblingAggregations;\n+            }\n+\n+            @Override\n+            public Collection<PipelineAggregationBuilder> getSiblingPipelineAggregations() {\n+                return siblingPipelineAggregations;\n+            }\n+\n+            @Override\n+            public void validateParentAggSequentiallyOrdered(String type, String name) {\n+                addValidationError(type + \" aggregation [\" + name\n+                        + \"] must have a histogram, date_histogram or auto_date_histogram as parent but doesn't have a parent\");\n+            }\n+        }\n+\n+        private static class ForInsideTree extends ValidationContext {\n+            private final AggregationBuilder parent;\n+\n+            ForInsideTree(AggregationBuilder parent, ActionRequestValidationException validationFailuresSoFar) {\n+                super(validationFailuresSoFar);\n+                this.parent = Objects.requireNonNull(parent);\n+            }\n+\n+            @Override\n+            public Collection<AggregationBuilder> getSiblingAggregations() {\n+                return parent.getSubAggregations();\n+            }\n+\n+            @Override\n+            public Collection<PipelineAggregationBuilder> getSiblingPipelineAggregations() {\n+                return parent.getPipelineAggregations();\n+            }\n+\n+            @Override\n+            public void validateParentAggSequentiallyOrdered(String type, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyODYwNg=="}, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTczNzI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/pipeline/BucketMetricsPipelineAggregationBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMDoxMVrOF467_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyMToyNVrOF46-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMDIwNg==", "bodyText": "Optional: should we remove this else statement and just leave the context error as the last statement in the method?\nI always feel like else are trappy/unnecessary when it's just doing some kind of error or return statement.  Less rightward drift if we remove.\nTotally optional, this might just be a quirk I've picked up :)", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395230206", "createdAt": "2020-03-19T18:20:11Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/pipeline/BucketMetricsPipelineAggregationBuilder.java", "diffHunk": "@@ -107,28 +104,27 @@ public GapPolicy gapPolicy() {\n     protected abstract PipelineAggregator createInternal(Map<String, Object> metaData);\n \n     @Override\n-    public void doValidate(AggregatorFactory parent, Collection<AggregationBuilder> aggBuilders,\n-            Collection<PipelineAggregationBuilder> pipelineAggregatorFactories) {\n+    protected void validate(ValidationContext context) {\n         if (bucketsPaths.length != 1) {\n-            throw new IllegalStateException(PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName()\n-                    + \" must contain a single entry for aggregation [\" + name + \"]\");\n+            context.addBucketPathValidationError(\"must contain a single entry for aggregation [\" + name + \"]\");\n+            return;\n         }\n         // Need to find the first agg name in the buckets path to check its a\n         // multi bucket agg: aggs are split with '>' and can optionally have a\n         // metric name after them by using '.' so need to split on both to get\n         // just the agg name\n         final String firstAgg = bucketsPaths[0].split(\"[>\\\\.]\")[0];\n-        Optional<AggregationBuilder> aggBuilder = aggBuilders.stream().filter((builder) -> builder.getName().equals(firstAgg))\n+        Optional<AggregationBuilder> aggBuilder = context.getSiblingAggregations().stream()\n+                .filter(builder -> builder.getName().equals(firstAgg))\n                 .findAny();\n         if (aggBuilder.isPresent()) {\n             if ((aggBuilder.get() instanceof MultiBucketAggregationBuilder) == false) {\n-                throw new IllegalArgumentException(\"The first aggregation in \" + PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName()\n+                context.addValidationError(\"The first aggregation in \" + PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName()\n                         + \" must be a multi-bucket aggregation for aggregation [\" + name + \"] found :\"\n                         + aggBuilder.get().getClass().getName() + \" for buckets path: \" + bucketsPaths[0]);\n             }\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMDk1NQ==", "bodyText": "Or, re-arrange so there's an isPresent() == false check first, and an instanceof check next, which avoids nesting.\nBut yeah, optional pending your preferences :D", "url": "https://github.com/elastic/elasticsearch/pull/53669#discussion_r395230955", "createdAt": "2020-03-19T18:21:25Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/pipeline/BucketMetricsPipelineAggregationBuilder.java", "diffHunk": "@@ -107,28 +104,27 @@ public GapPolicy gapPolicy() {\n     protected abstract PipelineAggregator createInternal(Map<String, Object> metaData);\n \n     @Override\n-    public void doValidate(AggregatorFactory parent, Collection<AggregationBuilder> aggBuilders,\n-            Collection<PipelineAggregationBuilder> pipelineAggregatorFactories) {\n+    protected void validate(ValidationContext context) {\n         if (bucketsPaths.length != 1) {\n-            throw new IllegalStateException(PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName()\n-                    + \" must contain a single entry for aggregation [\" + name + \"]\");\n+            context.addBucketPathValidationError(\"must contain a single entry for aggregation [\" + name + \"]\");\n+            return;\n         }\n         // Need to find the first agg name in the buckets path to check its a\n         // multi bucket agg: aggs are split with '>' and can optionally have a\n         // metric name after them by using '.' so need to split on both to get\n         // just the agg name\n         final String firstAgg = bucketsPaths[0].split(\"[>\\\\.]\")[0];\n-        Optional<AggregationBuilder> aggBuilder = aggBuilders.stream().filter((builder) -> builder.getName().equals(firstAgg))\n+        Optional<AggregationBuilder> aggBuilder = context.getSiblingAggregations().stream()\n+                .filter(builder -> builder.getName().equals(firstAgg))\n                 .findAny();\n         if (aggBuilder.isPresent()) {\n             if ((aggBuilder.get() instanceof MultiBucketAggregationBuilder) == false) {\n-                throw new IllegalArgumentException(\"The first aggregation in \" + PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName()\n+                context.addValidationError(\"The first aggregation in \" + PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName()\n                         + \" must be a multi-bucket aggregation for aggregation [\" + name + \"] found :\"\n                         + aggBuilder.get().getClass().getName() + \" for buckets path: \" + bucketsPaths[0]);\n             }\n         } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMDIwNg=="}, "originalCommit": {"oid": "7aaae7a405ee7806135bd45d0817fc4328930e0f"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4301, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}