{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDg5MDky", "number": 63688, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo0OTo0MVrOEuCHBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo0OTo0MVrOEuCHBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzA0NTE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/PredictionFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo0OTo0MVrOHiLtVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo0OTo0MVrOHiLtVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwNTQ2MA==", "bodyText": "There is one place where this might cause a mistake.\nLets assume the class labels are something that are NOT true or false, taco and hamburger for classes 0 and 1 respectively\nIf the user SPECIFICALLY selects the boolean prediction value type on inference, it will flag as follows:\ntaco will be false (since it starts with t but is not the word true)\nhamburger will be true (since it doesn't start with t or f, we revert to the class number).\nTo me, this is acceptable, as the user would have to specify the boolean result type. Knowing their classes labels were NOT actually boolean :/.", "url": "https://github.com/elastic/elasticsearch/pull/63688#discussion_r505605460", "createdAt": "2020-10-15T14:49:41Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/PredictionFieldType.java", "diffHunk": "@@ -52,22 +52,25 @@ public Object transformPredictedValue(Double value, String stringRep) {\n             case STRING:\n                 return stringRep == null ? value.toString() : stringRep;\n             case BOOLEAN:\n-                if ((areClose(value, 1.0D) || areClose(value, 0.0D)) == false) {\n-                    throw new IllegalArgumentException(\n-                        \"Cannot transform numbers other than 0.0 or 1.0 to boolean. Provided number [\" + value + \"]\");\n+                if (isNumberQuickCheck(stringRep)) {\n+                    try {\n+                        // 1 is true, 0 is false\n+                        return Integer.parseInt(stringRep) == 1;\n+                    } catch (NumberFormatException nfe) {\n+                        // do nothing, allow fall through to final fromDouble\n+                    }\n+                } else if (isBoolQuickCheck(stringRep)) { // if we start with t/f case insensitive, it indicates boolean string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15d05d129719d3db13083437a55fbe76122862e"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2865, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}