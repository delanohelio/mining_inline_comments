{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjI3Njk4", "number": 64664, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0NTo1N1rOE1xWzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMTozNlrOE2od3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODE4NjM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0NTo1N1rOHuPBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0NTo1N1rOHuPBJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0MjU5Nw==", "bodyText": "Aaah. It seems that IDEA rereads the settings from .editorconfig all the time.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518242597", "createdAt": "2020-11-05T17:45:57Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java", "diffHunk": "@@ -185,4 +183,4 @@ public int hashCode() {\n     public String toString() {\n         return delegate.keySet().toString();\n     }\n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODI2MDIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowMToyNVrOHuPvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowMToyNVrOHuPvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NDQ0NA==", "bodyText": "AttributeMap.builder(qContainer.scalarFunctions()).put().build()", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518254444", "createdAt": "2020-11-05T18:01:25Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -432,9 +432,8 @@ public FieldExtraction resolve(Attribute attribute) {\n \n         // update proc (if needed)\n         if (qContainer.scalarFunctions().size() != scalarFunctions.size()) {\n-            Map<Attribute, Pipe> procs = new LinkedHashMap<>(qContainer.scalarFunctions());\n-            procs.put(attr, proc);\n-            qContainer = qContainer.withScalarProcessors(new AttributeMap<>(procs));\n+            qContainer = qContainer.withScalarProcessors(\n+                AttributeMap.<Pipe>builder().putAll(qContainer.scalarFunctions).put(attr, proc).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODI3Nzk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNDoxOFrOHuP6Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0MzoyMFrOHuRTnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzI0Ng==", "bodyText": "Please format only the touched lines - there's a plugin/setting for IDEA that does that.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518257246", "createdAt": "2020-11-05T18:04:18Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -366,8 +366,8 @@ private FieldExtraction topHitFieldRef(FieldAttribute fieldAttr) {\n     private Tuple<QueryContainer, FieldExtraction> nestedHitFieldRef(FieldAttribute attr) {\n         String name = aliasName(attr);\n         Query q = rewriteToContainNestedField(query, attr.source(),\n-                attr.nestedParent().name(), name, \n-                SqlDataTypes.format(attr.field().getDataType()), \n+                attr.nestedParent().name(), name,\n+                SqlDataTypes.format(attr.field().getDataType()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MDA5Mw==", "bodyText": "For those such changes that touch code lines, it adds some more effort when checking the git history, or simply \"blame\". On the other hand, personally I have no problem when deleting whitespaces from empty lines, as long as it's in the touched files.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518280093", "createdAt": "2020-11-05T18:43:20Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -366,8 +366,8 @@ private FieldExtraction topHitFieldRef(FieldAttribute fieldAttr) {\n     private Tuple<QueryContainer, FieldExtraction> nestedHitFieldRef(FieldAttribute attr) {\n         String name = aliasName(attr);\n         Query q = rewriteToContainNestedField(query, attr.source(),\n-                attr.nestedParent().name(), name, \n-                SqlDataTypes.format(attr.field().getDataType()), \n+                attr.nestedParent().name(), name,\n+                SqlDataTypes.format(attr.field().getDataType()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzI0Ng=="}, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODI4NzQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNjo0OVrOHuQACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNjo0OVrOHuQACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1ODY5Nw==", "bodyText": "Extra space missing, should be (Alias) ne", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518258697", "createdAt": "2020-11-05T18:06:49Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +422,20 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n-            for (NamedExpression ne : a.aggregates()) {\n-                if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n-                }\n-            }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            List<Alias> aliases = a.aggregates().stream()\n+                .filter(ne -> ne instanceof Alias)\n+                .map(ne -> (Alias)ne)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMxMDUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMjo1M1rOHuQOKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxNzozMFrOHuQYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjMxNA==", "bodyText": "The initial code was using a Map of attributes, the change uses a List of Aliases which are then converted into a Map.\nThe use of streams doesn't seem to simplify things either - instead of one iteration there are too.\nThis needs reworking - just create an AttributeMap with the children and then combine that with the existing aliases.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518262314", "createdAt": "2020-11-05T18:12:53Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +422,20 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n-            for (NamedExpression ne : a.aggregates()) {\n-                if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n-                }\n-            }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            List<Alias> aliases = a.aggregates().stream()\n+                .filter(ne -> ne instanceof Alias)\n+                .map(ne -> (Alias)ne)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NDk5Ng==", "bodyText": "Ok, now that there is no chance of overwrite that makes more sense.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518264996", "createdAt": "2020-11-05T18:17:30Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +422,20 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n-            for (NamedExpression ne : a.aggregates()) {\n-                if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n-                }\n-            }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            List<Alias> aliases = a.aggregates().stream()\n+                .filter(ne -> ne instanceof Alias)\n+                .map(ne -> (Alias)ne)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjMxNA=="}, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODMxMTQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMzoxMlrOHuQOzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxODoxNFrOHuQaiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjQ3OA==", "bodyText": "Again, unneeded formatting.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518262478", "createdAt": "2020-11-05T18:13:12Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -171,7 +171,7 @@ public QueryContainer(Query query,\n \n             sortingColumns.add(new Tuple<>(Integer.valueOf(atIndex), comp));\n         }\n-        \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTQ4MQ==", "bodyText": "Seems I have to disable the EditorConfig, otherwise IDEA is too clever the resets these settings.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518265481", "createdAt": "2020-11-05T18:18:14Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -171,7 +171,7 @@ public QueryContainer(Query query,\n \n             sortingColumns.add(new Tuple<>(Integer.valueOf(atIndex), comp));\n         }\n-        \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjQ3OA=="}, "originalCommit": {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc4MTk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NDozNFrOHunVGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NDozNFrOHunVGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MDkyMA==", "bodyText": "A builder should just assemble a state, not question it's in-transit state.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518640920", "createdAt": "2020-11-06T09:54:34Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "diffHunk": "@@ -392,8 +378,15 @@ private Builder() {}\n             return this;\n         }\n \n+        public boolean isEmpty() {\n+            return map.isEmpty();\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc4ODA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NjoxNVrOHunY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NjoxNVrOHunY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MTkxMw==", "bodyText": "Shouldn't be called on a builder. Optimizations are good but in this case they simply get in the way.\nCreate two AttributeMaps if needed.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518641913", "createdAt": "2020-11-06T09:56:15Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +421,22 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n+\n+            AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n             for (NamedExpression ne : a.aggregates()) {\n                 if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n+                    Alias alias = (Alias) ne;\n+                    aliases.put(alias.toAttribute(), alias.child());\n                 }\n             }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            if (aliases.isEmpty() == false) {\n+                aliases.putAll(queryC.aliases());\n+                queryC = queryC.withAliases(aliases.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc5MjQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NzoyNFrOHunbnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NzoyNFrOHunbnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MjU4OQ==", "bodyText": "This change is not needed - there's no value in holding the alias reference.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518642589", "createdAt": "2020-11-06T09:57:24Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +421,22 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n+\n+            AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n             for (NamedExpression ne : a.aggregates()) {\n                 if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n+                    Alias alias = (Alias) ne;\n+                    aliases.put(alias.toAttribute(), alias.child());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzIxNTY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMTozNlrOHvhmPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDo1NzoyNlrOHwgiqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NTU4MA==", "bodyText": "Why not return the map directly? AttributeMap is immutable.\nTo guarantee that the builder is not used after build() is called, a flag could be used instead of copying things over.", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r519595580", "createdAt": "2020-11-09T07:21:36Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "diffHunk": "@@ -393,7 +379,10 @@ private Builder() {}\n         }\n \n         public AttributeMap<E> build() {\n-            return new AttributeMap<>(map);\n+            // copy, in case someone would do a .build, .put, .build sequence\n+            AttributeMap<E> m = new AttributeMap<>();\n+            m.addAll(map);\n+            return m;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44b0600ead8c215a9e807719ce48a6c59676878"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODE1MA==", "bodyText": "Changed, won't copy on .build(), only will copy once on the first .put() after a .build().", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r519998150", "createdAt": "2020-11-09T17:41:05Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "diffHunk": "@@ -393,7 +379,10 @@ private Builder() {}\n         }\n \n         public AttributeMap<E> build() {\n-            return new AttributeMap<>(map);\n+            // copy, in case someone would do a .build, .put, .build sequence\n+            AttributeMap<E> m = new AttributeMap<>();\n+            m.addAll(map);\n+            return m;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NTU4MA=="}, "originalCommit": {"oid": "b44b0600ead8c215a9e807719ce48a6c59676878"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyNjg1Nw==", "bodyText": "Removed the defensive copy completely: c4e3fc4", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r520626857", "createdAt": "2020-11-10T14:57:26Z", "author": {"login": "palesz"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "diffHunk": "@@ -393,7 +379,10 @@ private Builder() {}\n         }\n \n         public AttributeMap<E> build() {\n-            return new AttributeMap<>(map);\n+            // copy, in case someone would do a .build, .put, .build sequence\n+            AttributeMap<E> m = new AttributeMap<>();\n+            m.addAll(map);\n+            return m;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NTU4MA=="}, "originalCommit": {"oid": "b44b0600ead8c215a9e807719ce48a6c59676878"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3166, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}