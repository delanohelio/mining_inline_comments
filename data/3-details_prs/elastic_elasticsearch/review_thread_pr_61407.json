{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDk5Nzcw", "number": 61407, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1Mjo1MFrOEbDjQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOTozNzozMlrOEbts8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODA1MTg2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/fixtures/DistributionDownloadFixture.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1Mjo1MFrOHE2H5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1Mjo1MFrOHE2H5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0MzEwOQ==", "bodyText": "The duplication of this fake archive (src/integTest/... vs. src/testkit...) will disappear once the distribution resolution via artifact transforms is back on the branch", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r474843109", "createdAt": "2020-08-21T17:52:50Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/integTest/groovy/org/elasticsearch/gradle/fixtures/DistributionDownloadFixture.groovy", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.fixtures\n+\n+import org.elasticsearch.gradle.ElasticsearchDistribution\n+import org.elasticsearch.gradle.VersionProperties\n+import org.gradle.testkit.runner.BuildResult\n+import org.gradle.testkit.runner.GradleRunner\n+\n+class DistributionDownloadFixture {\n+\n+    public static final String INIT_SCRIPT = \"repositories-init.gradle\"\n+\n+    static BuildResult withMockedDistributionDownload(GradleRunner gradleRunner, Closure<BuildResult> buildRunClosure) {\n+        String urlPath = urlPath();\n+        return WiremockFixture.withWireMock(urlPath, filebytes(urlPath)) { server ->\n+            File initFile = new File(gradleRunner.getProjectDir(), INIT_SCRIPT)\n+            initFile.text = \"\"\"allprojects { p ->\n+                p.repositories.all { repo ->\n+                    repo.allowInsecureProtocol = true\n+                    repo.setUrl('${server.baseUrl()}')\n+                }\n+            }\"\"\"\n+            List<String> givenArguments = gradleRunner.getArguments()\n+            GradleRunner effectiveRunner = gradleRunner.withArguments(givenArguments + ['-I', initFile.getAbsolutePath()])\n+            return buildRunClosure.call(effectiveRunner)\n+        }\n+    }\n+\n+    private static String urlPath() {\n+        String version = VersionProperties.getElasticsearch()\n+        ElasticsearchDistribution.Platform platform = ElasticsearchDistribution.CURRENT_PLATFORM\n+        String fileType = ((ElasticsearchDistribution.CURRENT_PLATFORM == ElasticsearchDistribution.Platform.LINUX ||\n+                ElasticsearchDistribution.CURRENT_PLATFORM == ElasticsearchDistribution.Platform.DARWIN)) ? \"tar.gz\" : \"zip\"\n+        \"/downloads/elasticsearch/elasticsearch-${version}-${platform}-x86_64.$fileType\"\n+    }\n+\n+    private static byte[] filebytes(String urlPath) throws IOException {\n+        String suffix = urlPath.endsWith(\"zip\") ? \"zip\" : \"tar.gz\";\n+        return DistributionDownloadFixture.getResourceAsStream(\"/org/elasticsearch/gradle/fake_elasticsearch.\" + suffix).getBytes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDkzMDczOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyOToxOFrOHFzQIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyNDowOVrOHGmgDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0NDY0Mw==", "bodyText": "Is there a reason we can't just change the implementation of getDistroDir() to return this value? In what scenario would we use both?", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475844643", "createdAt": "2020-08-24T19:29:18Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -782,6 +787,10 @@ private void startElasticsearchProcess() {\n         reaper.registerPid(toString(), esProcess.pid());\n     }\n \n+    private Path getEffectiveDistroDir() {\n+        return canUseSharedDistribution() ? getExtractedDistributionDir().toFile().listFiles()[0].toPath() : getDistroDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NDMwMA==", "bodyText": "fixed", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r476684300", "createdAt": "2020-08-25T19:24:09Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -782,6 +787,10 @@ private void startElasticsearchProcess() {\n         reaper.registerPid(toString(), esProcess.pid());\n     }\n \n+    private Path getEffectiveDistroDir() {\n+        return canUseSharedDistribution() ? getExtractedDistributionDir().toFile().listFiles()[0].toPath() : getDistroDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0NDY0Mw=="}, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDk1NDUzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOTozNjoyNVrOHFzekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyMzoxMFrOHGmdvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODMzNg==", "bodyText": "Unlike creating a symlink, this is a costly operation so how do we handle scenarios in tests where we do things like restart nodes. Since this is called in the start() method do we do this copy every time?", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475848336", "createdAt": "2020-08-24T19:36:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1011,6 +1031,27 @@ private void createWorkingDir(Path distroExtractDir) throws IOException {\n      * @param destinationRoot destination to link to\n      */\n     private void syncWithLinks(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.createLink(d, s);\n+            } catch (IOException e) {\n+                // Note does not work for network drives, e.g. Vagrant\n+                throw new LinkCreationException(\"Failed to create hard link \" + d + \" pointing to \" + s, e);\n+            }\n+        });\n+    }\n+\n+    private void syncWithCopy(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.copy(s, d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3ODc2Ng==", "bodyText": "I have to check if we can avoid that. There seems some Test expect an explicit clean working dir.", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475878766", "createdAt": "2020-08-24T20:36:23Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1011,6 +1031,27 @@ private void createWorkingDir(Path distroExtractDir) throws IOException {\n      * @param destinationRoot destination to link to\n      */\n     private void syncWithLinks(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.createLink(d, s);\n+            } catch (IOException e) {\n+                // Note does not work for network drives, e.g. Vagrant\n+                throw new LinkCreationException(\"Failed to create hard link \" + d + \" pointing to \" + s, e);\n+            }\n+        });\n+    }\n+\n+    private void syncWithCopy(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.copy(s, d);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODMzNg=="}, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4MDQ2MQ==", "bodyText": "I think we can potentially manage the state in the node itself. Basically if the backing distribution extracted dir hasn't changed, and we've already performed a copy, then skip it. I can't see why any tests would need the working directory \"cleaned\" as those files should never actually be modified, if they did, then shared hard links wouldn't work. We do have to check if the configured distribution changed tho, as that is mutable in the case of BWC tests the bump the distribution version.", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475880461", "createdAt": "2020-08-24T20:39:38Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1011,6 +1031,27 @@ private void createWorkingDir(Path distroExtractDir) throws IOException {\n      * @param destinationRoot destination to link to\n      */\n     private void syncWithLinks(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.createLink(d, s);\n+            } catch (IOException e) {\n+                // Note does not work for network drives, e.g. Vagrant\n+                throw new LinkCreationException(\"Failed to create hard link \" + d + \" pointing to \" + s, e);\n+            }\n+        });\n+    }\n+\n+    private void syncWithCopy(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.copy(s, d);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODMzNg=="}, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MzcwOA==", "bodyText": "Files have only been copied (hard linked) if the expected directory already existed. This expected directory contains the version number so a change in the requested distribution version will trigger a redo of the linking/copying. To be clear: that has been the case before that change already and the behaviour hasn't changed with this PR", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r476683708", "createdAt": "2020-08-25T19:23:10Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1011,6 +1031,27 @@ private void createWorkingDir(Path distroExtractDir) throws IOException {\n      * @param destinationRoot destination to link to\n      */\n     private void syncWithLinks(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.createLink(d, s);\n+            } catch (IOException e) {\n+                // Note does not work for network drives, e.g. Vagrant\n+                throw new LinkCreationException(\"Failed to create hard link \" + d + \" pointing to \" + s, e);\n+            }\n+        });\n+    }\n+\n+    private void syncWithCopy(Path sourceRoot, Path destinationRoot) {\n+        sync(sourceRoot, destinationRoot, (Path d, Path s) -> {\n+            try {\n+                Files.copy(s, d);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODMzNg=="}, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDk1Njc4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOTozNzowN1rOHFzf6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDozODoyMFrOHF1Zdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODY4Mw==", "bodyText": "Is this additional config required for some reason?", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475848683", "createdAt": "2020-08-24T19:37:07Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1127,9 +1165,38 @@ private void createConfiguration() {\n         } catch (IOException e) {\n             throw new UncheckedIOException(\"Could not write config file: \" + configFile, e);\n         }\n+\n+        tweakJvmOptions(configFileRoot);\n         LOGGER.info(\"Written config file:{} for {}\", configFile, this);\n     }\n \n+    private void tweakJvmOptions(Path configFileRoot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3OTc5OQ==", "bodyText": "By default the jvm options write into the specific distro folder. If we say we don't rely on shared distro directories and keep using hard links and copy as a fallback we can remove it again. Otherwise we need this to keep the distro folders clean.", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475879799", "createdAt": "2020-08-24T20:38:20Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -1127,9 +1165,38 @@ private void createConfiguration() {\n         } catch (IOException e) {\n             throw new UncheckedIOException(\"Could not write config file: \" + configFile, e);\n         }\n+\n+        tweakJvmOptions(configFileRoot);\n         LOGGER.info(\"Written config file:{} for {}\", configFile, this);\n     }\n \n+    private void tweakJvmOptions(Path configFileRoot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODY4Mw=="}, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDk1NzkzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOTozNzozMlrOHFzgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyMzo1MFrOHGmfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODg2Ng==", "bodyText": "nit: canUseSharedDistribtuion() == false", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r475848866", "createdAt": "2020-08-24T19:37:32Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -990,8 +999,19 @@ private void waitForProcessToExit(ProcessHandle processHandle) {\n     }\n \n     private void createWorkingDir(Path distroExtractDir) throws IOException {\n-        if (Files.exists(getDistroDir()) == false) {\n-            syncWithLinks(distroExtractDir, getDistroDir());\n+        if (!canUseSharedDistribution()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NDEyMg==", "bodyText": "fixed", "url": "https://github.com/elastic/elasticsearch/pull/61407#discussion_r476684122", "createdAt": "2020-08-25T19:23:50Z", "author": {"login": "breskeby"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -990,8 +999,19 @@ private void waitForProcessToExit(ProcessHandle processHandle) {\n     }\n \n     private void createWorkingDir(Path distroExtractDir) throws IOException {\n-        if (Files.exists(getDistroDir()) == false) {\n-            syncWithLinks(distroExtractDir, getDistroDir());\n+        if (!canUseSharedDistribution()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0ODg2Ng=="}, "originalCommit": {"oid": "baa6a609a8a1d24e0a551af13257e060640d4168"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 896, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}