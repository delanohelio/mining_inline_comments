{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzUwMjcy", "number": 65791, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyOTo0N1rOFAD9oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToxNDoxNlrOFBudzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjA5MjQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyOTo0N1rOH-IfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxNjo1NVrOH-Yykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMjgzNA==", "bodyText": "Should the pattern be [0-9]+$ instead?  (so that it only matches if the generation is at the end of the index name)\nAlso maybe turn the pattern into a static pattern?", "url": "https://github.com/elastic/elasticsearch/pull/65791#discussion_r534912834", "createdAt": "2020-12-03T08:29:47Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1481,29 +1481,18 @@ public Metadata build() {\n         static void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLookup, @Nullable DataStreamMetadata dsMetadata) {\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    Map<String, IndexAbstraction> conflicts =\n-                        indicesLookup.subMap(DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\",\n-                            DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n-                            .entrySet().stream()\n-                            .filter(entry -> {\n-                                if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX) {\n-                                    return true;\n-                                } else {\n-                                    int indexNameCounter;\n-                                    try {\n-                                        indexNameCounter = IndexMetadata.parseIndexNameCounter(entry.getKey());\n-                                    } catch (IllegalArgumentException e) {\n-                                        // index name is not in the %s-%d+ format so it will not crash with backing indices\n-                                        return false;\n-                                    }\n-                                    return indexNameCounter > ds.getGeneration();\n-                                }\n-                            }).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+                    String prefix = DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\";\n+                    Set<String> conflicts =\n+                        indicesLookup.subMap(prefix, DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n+                            .keySet().stream()\n+                            .filter(s -> s.substring(prefix.length()).matches(\"[0-9]+\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6b7d0df481987e9e0352d0d8cf1e4cfe4548f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3OTkyMw==", "bodyText": "$ is not needed (matches return true only if whole region matches), but it won't hurt, I've added it.\nStatic pattern is good idea, I've added it as well.", "url": "https://github.com/elastic/elasticsearch/pull/65791#discussion_r535179923", "createdAt": "2020-12-03T12:16:55Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1481,29 +1481,18 @@ public Metadata build() {\n         static void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLookup, @Nullable DataStreamMetadata dsMetadata) {\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    Map<String, IndexAbstraction> conflicts =\n-                        indicesLookup.subMap(DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\",\n-                            DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n-                            .entrySet().stream()\n-                            .filter(entry -> {\n-                                if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX) {\n-                                    return true;\n-                                } else {\n-                                    int indexNameCounter;\n-                                    try {\n-                                        indexNameCounter = IndexMetadata.parseIndexNameCounter(entry.getKey());\n-                                    } catch (IllegalArgumentException e) {\n-                                        // index name is not in the %s-%d+ format so it will not crash with backing indices\n-                                        return false;\n-                                    }\n-                                    return indexNameCounter > ds.getGeneration();\n-                                }\n-                            }).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+                    String prefix = DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\";\n+                    Set<String> conflicts =\n+                        indicesLookup.subMap(prefix, DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n+                            .keySet().stream()\n+                            .filter(s -> s.substring(prefix.length()).matches(\"[0-9]+\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMjgzNA=="}, "originalCommit": {"oid": "fe6b7d0df481987e9e0352d0d8cf1e4cfe4548f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzQ0OTg0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1Mjo0NFrOIAg7-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1Mjo0NFrOIAg7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDU1Mg==", "bodyText": "nit: this needs formatting", "url": "https://github.com/elastic/elasticsearch/pull/65791#discussion_r537410552", "createdAt": "2020-12-07T10:52:44Z", "author": {"login": "andreidan"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java", "diffHunk": "@@ -1148,11 +1148,25 @@ public void testValidateDataStreamsIgnoresIndicesWithoutCounter() {\n \n             )\n             .build();\n-        // don't expect any exception when validating against non-backing indinces that don't conform to the backing indices naming\n+        // don't expect any exception when validating against non-backing indices that don't conform to the backing indices naming\n         // convention\n         validateDataStreams(metadata.getIndicesLookup(), (DataStreamMetadata) metadata.customs().get(DataStreamMetadata.TYPE));\n     }\n \n+    public void testValidateDataStreamsAllowsNamesThatStartsWithPrefix() {\n+        String dataStreamName = \"foo-datastream\";\n+        Metadata metadata = Metadata.builder(createIndices(10, 10, dataStreamName).metadata)\n+            .put(\n+                new IndexMetadata.Builder(DataStream.BACKING_INDEX_PREFIX+dataStreamName + \"-something-000012\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69eab07e52a40ebab861f0be286030ec3606cd00"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzU0MTkwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToxNDoxNlrOIAhxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjoxNzoxMlrOIAkDkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNDEzNQ==", "bodyText": "I don't think I understand this fix. Can you please document it a bit? I see we don't check the non concrete index anymore, but what else has changed?\nI also ported the testValidateDataStreamsAllowsNamesThatStartsWithPrefix on master and the test passes. Maybe this is supported already?", "url": "https://github.com/elastic/elasticsearch/pull/65791#discussion_r537424135", "createdAt": "2020-12-07T11:14:16Z", "author": {"login": "andreidan"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1481,29 +1483,18 @@ public Metadata build() {\n         static void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLookup, @Nullable DataStreamMetadata dsMetadata) {\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    Map<String, IndexAbstraction> conflicts =\n-                        indicesLookup.subMap(DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\",\n-                            DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n-                            .entrySet().stream()\n-                            .filter(entry -> {\n-                                if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX) {\n-                                    return true;\n-                                } else {\n-                                    int indexNameCounter;\n-                                    try {\n-                                        indexNameCounter = IndexMetadata.parseIndexNameCounter(entry.getKey());\n-                                    } catch (IllegalArgumentException e) {\n-                                        // index name is not in the %s-%d+ format so it will not crash with backing indices\n-                                        return false;\n-                                    }\n-                                    return indexNameCounter > ds.getGeneration();\n-                                }\n-                            }).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+                    String prefix = DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\";\n+                    Set<String> conflicts =\n+                        indicesLookup.subMap(prefix, DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n+                            .keySet().stream()\n+                            .filter(s -> NUMBER_PATTERN.matcher(s.substring(prefix.length())).matches())\n+                            .filter(s -> IndexMetadata.parseIndexNameCounter(s) > ds.getGeneration())\n+                            .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e6cd9d8a1c5193ac2466ef98e1dc05f3ac0036"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MTY0OA==", "bodyText": "test worked on master because generation number used in it was too small, it's fixed now so it should always pass with changes from this PR and always fail on current master", "url": "https://github.com/elastic/elasticsearch/pull/65791#discussion_r537461648", "createdAt": "2020-12-07T12:17:12Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1481,29 +1483,18 @@ public Metadata build() {\n         static void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLookup, @Nullable DataStreamMetadata dsMetadata) {\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    Map<String, IndexAbstraction> conflicts =\n-                        indicesLookup.subMap(DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\",\n-                            DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n-                            .entrySet().stream()\n-                            .filter(entry -> {\n-                                if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX) {\n-                                    return true;\n-                                } else {\n-                                    int indexNameCounter;\n-                                    try {\n-                                        indexNameCounter = IndexMetadata.parseIndexNameCounter(entry.getKey());\n-                                    } catch (IllegalArgumentException e) {\n-                                        // index name is not in the %s-%d+ format so it will not crash with backing indices\n-                                        return false;\n-                                    }\n-                                    return indexNameCounter > ds.getGeneration();\n-                                }\n-                            }).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+                    String prefix = DataStream.BACKING_INDEX_PREFIX + ds.getName() + \"-\";\n+                    Set<String> conflicts =\n+                        indicesLookup.subMap(prefix, DataStream.BACKING_INDEX_PREFIX + ds.getName() + \".\") // '.' is the char after '-'\n+                            .keySet().stream()\n+                            .filter(s -> NUMBER_PATTERN.matcher(s.substring(prefix.length())).matches())\n+                            .filter(s -> IndexMetadata.parseIndexNameCounter(s) > ds.getGeneration())\n+                            .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNDEzNQ=="}, "originalCommit": {"oid": "40e6cd9d8a1c5193ac2466ef98e1dc05f3ac0036"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}