{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzI5OTI0", "number": 65464, "title": "Gracefully handle exceptions from Security Providers", "bodyText": "In certain situations, such as when configured in FIPS 140 mode,\nthe Java security provider in use might throw a subclass of\njava.lang.Error. We currently do not catch these and as a result\nthe JVM exits, shutting down elasticsearch.\nThis commit attempts to address this by catching AssertionErrors\nthat we are aware that might be thrown when a PBKDF2 implementation\nis used from a Security Provider in FIPS 140 mode, with the password\ninput being less than 14 bytes (112 bits).\n\nIn our PBKDF2 family of hashers, we catch the AssertionError and\nthrow an ElasticsearchException while creating or verifying the\nhash. We throw on verification instead of simply returning false\non purpose so that the message bubbles up and the cause becomes\nobvious (otherwise it would be indistinguishable from a wrong\npassword).\nIn KeyStoreWrapper, we catch the AssertionError in order to\nwrap and rethrow with a helpful message. This can happen when using\nany of the keystore CLI commands, when the node starts or when we attempt\nto reload secure settings.\nIn the elasticsearch-users tool, we catch the AssertionError and\nthrow an appropriate UserException.\n\nTests are missing because it's not trivial to set CI in fips approved mode\nright now, and thus any tests would need to be muted. There is a parallel\neffort in #64024 to enable that\nand we can either hold off merging this until 64024 is merged and tests\nadded, or add tests in followup.", "createdAt": "2020-11-24T20:07:24Z", "url": "https://github.com/elastic/elasticsearch/pull/65464", "merged": true, "mergeCommit": {"oid": "e7d06843f9cce7ea3f3e22606cf1dc196658f801"}, "closed": true, "closedAt": "2020-11-26T13:57:34Z", "author": {"login": "jkakavas"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfvQl-gH2gAyNTI2NzI5OTI0OjEyZTE0NTc0NzUwYTJiZmJiNzdjZTU5Nzk5ZGRlMzZhNDBiMjgyMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgRVDyAH2gAyNTI2NzI5OTI0OmI0NmU4ZGIxNDUyYTM3YzE4ZWQ4MzI5MDRjYTI0Y2IzNzQ4NTU5Y2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/12e14574750a2bfbb77ce59799dde36a40b2822b", "committedDate": "2020-11-24T19:52:33Z", "message": "Gracefully handle exceptions from Security Providers\n\nIn certain situtations, such as when configured in FIPS 140 mode,\nthe Java security provider in use might throw a subclass of\njava.lang.Error. We currently do not catch these and as a result\nthe JVM exits, shutting down elasticsearch.\n\nThis commit attempts to address this by catching AssertionErrors\nthat we are aware that might be thrown when a PBKDF2 implementation\nis used from a Security Provider in FIPS 140 mode, with the password\ninput being less than 14 bytes (112 bits).\n\n- In our PBKDF2 family of hashers, we catch the AssertionError and\nthrow an ElasticsearchException while creating or verifying the\nhash. We throw on verification instead of simply returning false\non purpose so that the message bubbles up and the cause becomes\nobvious (otherwise it would be indistinguishable from a wrong\npassword).\n- In KeyStoreWrapper, we catch the AssertionError in order to\nwrap and rethrow with a helpful message. This can happen when using\nany of the keystore CLI commands, when the node starts or when we attempt\nto reload secure settings.\n- In the `elasticsearch-users` tool, we catch the AssertionError and\nthrow an appropriate UserException."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e88965ddb4b09198aed49de76f6eab31da76d2", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/54e88965ddb4b09198aed49de76f6eab31da76d2", "committedDate": "2020-11-24T20:08:46Z", "message": "remove unused import and add space"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODY1MjQ5", "url": "https://github.com/elastic/elasticsearch/pull/65464#pullrequestreview-537865249", "createdAt": "2020-11-24T20:07:53Z", "commit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDowNzo1M1rOH5TUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxMTo1NVrOH5Tcew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzQ3MQ==", "bodyText": "Because GeneralSecurityException can be thrown now too", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529847471", "createdAt": "2020-11-24T20:07:53Z", "author": {"login": "jkakavas"}, "path": "distribution/tools/keystore-cli/src/main/java/org/elasticsearch/common/settings/BaseKeyStoreCommand.java", "diffHunk": "@@ -68,7 +68,7 @@ protected final void execute(Terminal terminal, OptionSet options, Environment e\n                 keyStore.decrypt(keyStorePassword.getChars());\n             }\n             executeCommand(terminal, options, env);\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzUyMA==", "bodyText": "Because GeneralSecurityException can be thrown now too", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529847520", "createdAt": "2020-11-24T20:07:59Z", "author": {"login": "jkakavas"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -75,7 +75,7 @@ protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal termina\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTAwOQ==", "bodyText": "My thinking is that we should scope this tightly first and expand if/when we get reports/CI failures for additional errors. The ones we know are thrown are all AssertionError and catching all Error felt too wide of a net. Not holding a strong opinion on this, happy to discuss", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529849009", "createdAt": "2020-11-24T20:10:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -512,6 +512,8 @@ public static boolean verifyHash(SecureString data, char[] hash) {\n             PBEKeySpec keySpec = new PBEKeySpec(data.getChars(), salt, cost, PBKDF2_KEY_LENGTH);\n             result.put(Base64.getEncoder().encodeToString(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             return result.array();\n+        } catch (AssertionError ae){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw==", "bodyText": "Throw instead of returning false so that this is distinguishable from wrong password, which i believe is desired.", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r529849467", "createdAt": "2020-11-24T20:11:55Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d3207f69fd3598f1ccc7c96088059dca731536", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/b0d3207f69fd3598f1ccc7c96088059dca731536", "committedDate": "2020-11-24T20:48:53Z", "message": "We don't want to catch UserExceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f", "committedDate": "2020-11-24T21:11:19Z", "message": "Merge remote-tracking branch 'origin/master' into fips-exception-handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzcxMTQy", "url": "https://github.com/elastic/elasticsearch/pull/65464#pullrequestreview-538371142", "createdAt": "2020-11-25T10:48:26Z", "commit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0ODoyN1rOH5tnuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNTo1MlrOH5uTPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3ODMzMQ==", "bodyText": "Nit: why not catch (SecurityException | GeneralSecurityException e) as above?\nAlso KeyStoreWrapper#decrypt is declared to throw GeneralSecurityException as well. It wasn't a problem before or maybe it was just an oversight?", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530278331", "createdAt": "2020-11-25T10:48:27Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -75,7 +75,7 @@ protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal termina\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzUyMA=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng==", "bodyText": "I wonder whether we could just be very liberal and catch a Throwable here. So we are sure nothing is going to trip it regardless of the provider.", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530281046", "createdAt": "2020-11-25T10:52:37Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NzAzOQ==", "bodyText": "We throw ElasticsearchException in other places while throwing GeneralSecurityException here. Do we want to be consistent?\nNit: extra space (and the period?) at the end of the error message string :)", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530287039", "createdAt": "2020-11-25T11:02:04Z", "author": {"login": "ywangd"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {\n+            throw new GeneralSecurityException(\"Error generating an encryption key from the provided password. \", ae);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4OTQ3MA==", "bodyText": "Nit: I cannot help trying to make this error message read more like the others. So how about \"Error in using PBKDF2 implementation from the chosen Security Provider\". Also this string has an extra period at the end while the above one does not :)", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530289470", "createdAt": "2020-11-25T11:05:52Z", "author": {"login": "ywangd"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java", "diffHunk": "@@ -538,6 +540,8 @@ private static boolean verifyPbkdf2Hash(SecureString data, char[] hash) {\n                 .encode(secretKeyFactory.generateSecret(keySpec).getEncoded()));\n             final boolean result = CharArrays.constantTimeEquals(computedPwdHash, hashChars);\n             return result;\n+        } catch (AssertionError ae) {\n+            throw new ElasticsearchException(\"Can't use PBKDF2 implementation from the Security Provider in use.\", ae);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0OTQ2Nw=="}, "originalCommit": {"oid": "12e14574750a2bfbb77ce59799dde36a40b2822b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752b77acc654808bbcb23d620ecaf0d0aba1ca3b", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/752b77acc654808bbcb23d620ecaf0d0aba1ca3b", "committedDate": "2020-11-25T11:30:06Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTAwOTUz", "url": "https://github.com/elastic/elasticsearch/pull/65464#pullrequestreview-538500953", "createdAt": "2020-11-25T13:37:46Z", "commit": {"oid": "752b77acc654808bbcb23d620ecaf0d0aba1ca3b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzozNzo0NlrOH5zySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mzo0M1rOH50aYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3OTMzNw==", "bodyText": "+1 to leave it this way, we shoudn't catch potentially irrecoverable exceptions", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530379337", "createdAt": "2020-11-25T13:37:46Z", "author": {"login": "BigPandaToo"}, "path": "server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java", "diffHunk": "@@ -310,7 +310,12 @@ public boolean hasPassword() {\n     private Cipher createCipher(int opmode, char[] password, byte[] salt, byte[] iv) throws GeneralSecurityException {\n         PBEKeySpec keySpec = new PBEKeySpec(password, salt, KDF_ITERS, CIPHER_KEY_BITS);\n         SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KDF_ALGO);\n-        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n+        SecretKey secretKey;\n+        try {\n+            secretKey = keyFactory.generateSecret(keySpec);\n+        } catch (AssertionError ae) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4MTA0Ng=="}, "originalCommit": {"oid": "cf3cdc5f7afde6008e33f61a455f4c9b2cbe276f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTYwMg==", "bodyText": "Are we OK with just swallowing exceptions of any other causes?", "url": "https://github.com/elastic/elasticsearch/pull/65464#discussion_r530389602", "createdAt": "2020-11-25T13:53:43Z", "author": {"login": "BigPandaToo"}, "path": "server/src/main/java/org/elasticsearch/cli/KeyStoreAwareCommand.java", "diffHunk": "@@ -71,11 +71,11 @@ protected static SecureString readPassword(Terminal terminal, boolean withVerifi\n      * Decrypt the {@code keyStore}, prompting the user to enter the password in the {@link Terminal} if it is password protected\n      */\n     protected static void decryptKeyStore(KeyStoreWrapper keyStore, Terminal terminal)\n-        throws UserException, GeneralSecurityException, IOException {\n+        throws UserException, IOException {\n         try (SecureString keystorePassword = keyStore.hasPassword() ?\n             readPassword(terminal, false) : new SecureString(new char[0])) {\n             keyStore.decrypt(keystorePassword.getChars());\n-        } catch (SecurityException e) {\n+        } catch (SecurityException | GeneralSecurityException e) {\n             if (e.getCause() instanceof AEADBadTagException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752b77acc654808bbcb23d620ecaf0d0aba1ca3b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c70b54bf19667a17bdea61751cd5c7fb785c27fb", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/c70b54bf19667a17bdea61751cd5c7fb785c27fb", "committedDate": "2020-11-25T14:12:02Z", "message": "Merge remote-tracking branch 'origin/master' into fips-exception-handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTg0MjA0", "url": "https://github.com/elastic/elasticsearch/pull/65464#pullrequestreview-538584204", "createdAt": "2020-11-25T14:58:36Z", "commit": {"oid": "c70b54bf19667a17bdea61751cd5c7fb785c27fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTE2OTMx", "url": "https://github.com/elastic/elasticsearch/pull/65464#pullrequestreview-538916931", "createdAt": "2020-11-26T00:18:01Z", "commit": {"oid": "c70b54bf19667a17bdea61751cd5c7fb785c27fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b46e8db1452a37c18ed832904ca24cb3748559cb", "author": {"user": {"login": "jkakavas", "name": "Ioannis Kakavas"}}, "url": "https://github.com/elastic/elasticsearch/commit/b46e8db1452a37c18ed832904ca24cb3748559cb", "committedDate": "2020-11-26T11:34:12Z", "message": "Catch all Errors instead of only AssertionError subclasses"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4243, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}