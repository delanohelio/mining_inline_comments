{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDA4ODAz", "number": 50703, "title": "SQL: Optimisation fixes for conjunction merges", "bodyText": "This PR fixes the following issues around the way comparisions are\nmerged with ranges in conjunctions:\n\nthe decision to include the equality of the lower limit is corrected;\nthe selection of the upper limit is corrected to use the upper bound\nof the range;\nthe list of terms in the conjunction is sorted to have the ranges at\nthe bottom; this allows subsequent binary comarisions to find compatible\nranges and potentially be merged away. The end guarantee being that the\noptimisation takes place irrespective of the order of the conjunction\nterms in the statement.\n\nSome comments are also corrected.\nAddresses #49637", "createdAt": "2020-01-07T14:14:37Z", "url": "https://github.com/elastic/elasticsearch/pull/50703", "merged": true, "mergeCommit": {"oid": "9828cb143a41f1bda1219541f3a8fdc03bf6dd14"}, "closed": true, "closedAt": "2020-01-08T21:36:48Z", "author": {"login": "bpintea"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4A9I0AH2gAyMzYwMDA4ODAzOmY4YTczY2Q4YjUyODM4Y2FjNzI3YWE0ZmY3ODgxMmI1MWVkM2Y2NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4WbPMgH2gAyMzYwMDA4ODAzOjk1ODdiZmU4ZDZkNjVhZjliNDc2OGE3Y2ZiMDUxMDRkODQwMjMyNWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8a73cd8b52838cac727aa4ff78812b51ed3f647", "committedDate": "2020-01-07T13:41:28Z", "message": "SQL: Optimisation fixes for conjunction merges\n\nThis commit fixes the following issues around the way comparisions are\nmerged with ranges in conjunctions:\n* the decision to include the equality of the lower limit is corrected;\n* the selection of the upper limit is corrected to use the upper bound\nof the range;\n* the list of terms in the conjunction is sorted to have the ranges at\nthe bottom; this allows subsequent binary comarisions to find compatible\nranges and potentially be merged away. The end guarantee being that the\noptimisation takes place irrespective of the order of the conjunction\nterms in the statement.\n\nSome comments are also corrected."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzE2MzQ2", "url": "https://github.com/elastic/elasticsearch/pull/50703#pullrequestreview-339316346", "createdAt": "2020-01-07T15:38:36Z", "commit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozODozN1rOFa9FsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTozOTowMVrOFa9Gew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwODE3Ng==", "bodyText": "That's a big miss - were there no tests for this?", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r363808176", "createdAt": "2020-01-07T15:38:37Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1316,7 +1331,7 @@ private boolean findConjunctiveComparisonInRange(BinaryComparison main, List<Ran\n                                     ranges.remove(i);\n                                     ranges.add(i,\n                                             new Range(other.source(), other.value(),\n-                                                    main.right(), lowerEq ? true : other.includeLower(),\n+                                                    main.right(), lowerEq ? false : main instanceof GreaterThanOrEqual,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwODM3OQ==", "bodyText": "Likewise - a whole optimization being skipped...", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r363808379", "createdAt": "2020-01-07T15:39:01Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1325,19 +1340,19 @@ private boolean findConjunctiveComparisonInRange(BinaryComparison main, List<Ran\n                             }\n                         }\n                     } else if (main instanceof LessThan || main instanceof LessThanOrEqual) {\n-                        if (other.lower().foldable()) {\n-                            Integer comp = BinaryComparison.compare(value, other.lower().fold());\n+                        if (other.upper().foldable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5ODY2NTA2", "url": "https://github.com/elastic/elasticsearch/pull/50703#pullrequestreview-339866506", "createdAt": "2020-01-08T13:36:37Z", "commit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozNjozOFrOFbXCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozNjozOFrOFbXCnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMzM3NQ==", "bodyText": "Maybe extract this custom Comparator into its own variable inside CombineBinaryComparisons and re-use that, without creating it each time the combine method is called?", "url": "https://github.com/elastic/elasticsearch/pull/50703#discussion_r364233375", "createdAt": "2020-01-08T13:36:38Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java", "diffHunk": "@@ -1090,7 +1091,21 @@ private Expression combine(And and) {\n \n             boolean changed = false;\n \n-            for (Expression ex : Predicates.splitAnd(and)) {\n+            List<Expression> andExps = Predicates.splitAnd(and);\n+            // Ranges need to show up before BinaryComparisons in list, to allow the latter be optimized away into a Range, if possible\n+            andExps.sort(new Comparator<Expression>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a73cd8b52838cac727aa4ff78812b51ed3f647"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9587bfe8d6d65af9b4768a7cfb05104d8402325a", "author": {"user": {"login": "bpintea", "name": "Bogdan Pintea"}}, "url": "https://github.com/elastic/elasticsearch/commit/9587bfe8d6d65af9b4768a7cfb05104d8402325a", "committedDate": "2020-01-08T14:42:21Z", "message": "adress review observation on anon. comparator\n\nReplace anonymous comparator of split AND Expressions with a lambda."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3884, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}