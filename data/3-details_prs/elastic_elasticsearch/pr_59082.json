{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0ODM3Mzk2", "number": 59082, "title": "Share IT Infrastructure between Core Snapshot and SLM ITs", "bodyText": "For #58994 it would be useful to be able to share test infrastructure.\nThis PR shares AbstractSnapshotIntegTestCase for that purpose, dries up SLM tests\naccordingly and adds a shared and efficient (compared to the previous implementations)\nway of waiting for no running snapshot operations to the test infrastructure to dry things up further.\nNote: the shared way of waiting for no more running operations was extracted from #56911 so this PR also decreases the size of that huge PR :)", "createdAt": "2020-07-06T15:09:58Z", "url": "https://github.com/elastic/elasticsearch/pull/59082", "merged": true, "mergeCommit": {"oid": "4ed6c0e05d8a415ebb2ee272eead25091f06faac"}, "closed": true, "closedAt": "2020-07-07T08:39:23Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcySqASAH2gAyNDQ0ODM3Mzk2OjBjMTdjMGY1ZTRmNzZjMDkyODlkNDYxZjljNGVkODBjYzRkMmRhZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyhEUmgFqTQ0MzY0NzIwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec", "committedDate": "2020-07-06T15:06:28Z", "message": "Share IT Infrastructure between Core Snapshot and SLM ITs\n\nFor #58994 it would be useful to be able to share test infrastructure.\nThis PR shares `AbstractSnapshotIntegTestCase` for that purpose, dries up SLM tests\naccordingly and adds a shared and efficient (compared to the previous implementations)\nway of waiting for no running snapshot operations to the test infrastructure to dry things up further.\n\nNote: the shared way of waiting for no more running operations was extracted from #56911"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTcyMjk4", "url": "https://github.com/elastic/elasticsearch/pull/59082#pullrequestreview-443172298", "createdAt": "2020-07-06T15:17:47Z", "commit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxNzo0N1rOGtbzmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxNzo0N1rOGtbzmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5NDY4MA==", "bodyText": "I like this a lot better than:\ndataNodeClient().admin().cluster().prepareState().get().getState();\n+ busy assert.\nOften times the tests use this kind of waiting when the busy assert will fail for a bit and then waste a second or two until the next run because of exponential back-off (over the large number of tests that do this kind of waiting for a certain CS it's well worth taking this approach IMO, especially with the concurrent snapshot ITs adding a large number of new tests that need this thing).\nAlso, the client() approach can (in disruption ITs) randomly go for the client of an isolated node and then waste effort and time for retrying in the transport master node action.", "url": "https://github.com/elastic/elasticsearch/pull/59082#discussion_r450294680", "createdAt": "2020-07-06T15:17:47Z", "author": {"login": "original-brownbear"}, "path": "test/framework/src/main/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java", "diffHunk": "@@ -366,4 +374,36 @@ protected long getCountForIndex(String indexName) {\n     protected void assertDocCount(String index, long count) {\n         assertEquals(getCountForIndex(index), count);\n     }\n+\n+    protected void awaitNoMoreRunningOperations(String viaNode) throws Exception {\n+        logger.info(\"--> verify no more operations in the cluster state\");\n+        awaitClusterState(viaNode, state -> state.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries().isEmpty() &&\n+                state.custom(SnapshotDeletionsInProgress.TYPE, SnapshotDeletionsInProgress.EMPTY).hasDeletionsInProgress() == false);\n+    }\n+\n+    private void awaitClusterState(String viaNode, Predicate<ClusterState> statePredicate) throws Exception {\n+        final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, viaNode);\n+        final ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, viaNode);\n+        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());\n+        if (statePredicate.test(observer.setAndGetObservedState()) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTczNTI2", "url": "https://github.com/elastic/elasticsearch/pull/59082#pullrequestreview-443173526", "createdAt": "2020-07-06T15:19:06Z", "commit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxOTowN1rOGtb3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToxOTowN1rOGtb3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5NTU3MA==", "bodyText": "All of these methods were just copies from AbstractSnapshotIntegTestCase that's why no other changes to the code were needed here.", "url": "https://github.com/elastic/elasticsearch/pull/59082#discussion_r450295570", "createdAt": "2020-07-06T15:19:07Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/slm/SLMSnapshotBlockingIntegTests.java", "diffHunk": "@@ -522,49 +487,4 @@ private String executePolicy(String policyId) {\n             return \"bad\";\n         }\n     }\n-\n-    public static String blockMasterFromFinalizingSnapshotOnIndexFile(final String repositoryName) {\n-        final String masterName = internalCluster().getMasterName();\n-        ((MockRepository)internalCluster().getInstance(RepositoriesService.class, masterName)\n-            .repository(repositoryName)).setBlockOnWriteIndexFile(true);\n-        return masterName;\n-    }\n-\n-    public static String unblockRepo(final String repositoryName) {\n-        final String masterName = internalCluster().getMasterName();\n-        ((MockRepository)internalCluster().getInstance(RepositoriesService.class, masterName)\n-            .repository(repositoryName)).unblock();\n-        return masterName;\n-    }\n-\n-    public static void blockAllDataNodes(String repository) {\n-        for(RepositoriesService repositoriesService : internalCluster().getDataNodeInstances(RepositoriesService.class)) {\n-            ((MockRepository)repositoriesService.repository(repository)).blockOnDataFiles(true);\n-        }\n-    }\n-\n-    public static void unblockAllDataNodes(String repository) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTc0NzM3", "url": "https://github.com/elastic/elasticsearch/pull/59082#pullrequestreview-443174737", "createdAt": "2020-07-06T15:20:29Z", "commit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyMDoyOVrOGtb6xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyMDoyOVrOGtb6xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5NjUxNw==", "bodyText": "Needed to add a new wait here because the AbstractSnapshotIntegTestCase does some repo consistency checks in after the tests (well worth it to have these here anyway) which will break if there's still work done in the cluster (which may be the case in this test).", "url": "https://github.com/elastic/elasticsearch/pull/59082#discussion_r450296517", "createdAt": "2020-07-06T15:20:29Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/slm/SLMSnapshotBlockingIntegTests.java", "diffHunk": "@@ -381,18 +368,14 @@ private void testUnsuccessfulSnapshotRetention(boolean partialSuccess) throws Ex\n                 assertEquals(SnapshotState.SUCCESS, snapshotInfo.state());\n             });\n         }\n+        awaitNoMoreRunningOperations(internalCluster().getMasterName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjQ3MjAy", "url": "https://github.com/elastic/elasticsearch/pull/59082#pullrequestreview-443647202", "createdAt": "2020-07-07T07:53:53Z", "commit": {"oid": "0c17c0f5e4f76c09289d461f9c4ed80cc4d2daec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2292, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}