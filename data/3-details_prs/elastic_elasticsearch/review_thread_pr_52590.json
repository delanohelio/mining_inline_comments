{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTM5MDU1", "number": 52590, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1NjoxNVrODhv_SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1NjoxNVrODhv_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE1ODQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1NjoxNVrOFsqNEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1NjoxNVrOFsqNEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3MzEzOQ==", "bodyText": "Just noticed I forgot to change this, should be IllegalArgException, will fix in the morning :)", "url": "https://github.com/elastic/elasticsearch/pull/52590#discussion_r382373139", "createdAt": "2020-02-21T02:56:15Z", "author": {"login": "polyfractal"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java", "diffHunk": "@@ -75,17 +78,116 @@\n     private final TermsAggregator.BucketCountThresholds bucketCountThresholds;\n     private final SignificanceHeuristic significanceHeuristic;\n \n-    public SignificantTermsAggregatorFactory(String name,\n-                                             ValuesSourceConfig config,\n-                                             IncludeExclude includeExclude,\n-                                             String executionHint,\n-                                             QueryBuilder filterBuilder,\n-                                             TermsAggregator.BucketCountThresholds bucketCountThresholds,\n-                                             SignificanceHeuristic significanceHeuristic,\n-                                             QueryShardContext queryShardContext,\n-                                             AggregatorFactory parent,\n-                                             AggregatorFactories.Builder subFactoriesBuilder,\n-                                             Map<String, Object> metaData) throws IOException {\n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(SignificantTermsAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.BYTES, CoreValuesSourceType.IP),\n+            SignificantTermsAggregatorFactory.bytesSupplier());\n+\n+        valuesSourceRegistry.register(SignificantTermsAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN, CoreValuesSourceType.NUMERIC),\n+            SignificantTermsAggregatorFactory.numericSupplier());\n+    }\n+\n+    /**\n+     * This supplier is used for all the field types that should be aggregated as bytes/strings,\n+     * including those that need global ordinals\n+     */\n+    private static SignificantTermsAggregatorSupplier bytesSupplier() {\n+        return new SignificantTermsAggregatorSupplier() {\n+            @Override\n+            public Aggregator build(String name,\n+                                    AggregatorFactories factories,\n+                                    ValuesSource valuesSource,\n+                                    DocValueFormat format,\n+                                    TermsAggregator.BucketCountThresholds bucketCountThresholds,\n+                                    IncludeExclude includeExclude,\n+                                    String executionHint,\n+                                    SearchContext context,\n+                                    Aggregator parent,\n+                                    SignificanceHeuristic significanceHeuristic,\n+                                    SignificantTermsAggregatorFactory sigTermsFactory,\n+                                    List<PipelineAggregator> pipelineAggregators,\n+                                    Map<String, Object> metaData) throws IOException {\n+\n+                ExecutionMode execution = null;\n+                if (executionHint != null) {\n+                    execution = ExecutionMode.fromString(executionHint, deprecationLogger);\n+                }\n+                if (valuesSource instanceof ValuesSource.Bytes.WithOrdinals == false) {\n+                    execution = ExecutionMode.MAP;\n+                }\n+                if (execution == null) {\n+                    execution = ExecutionMode.GLOBAL_ORDINALS;\n+                }\n+\n+                if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {\n+                    throw new IllegalArgumentException(\"Aggregation [\" + name + \"] cannot support regular expression style \"\n+                        + \"include/exclude settings as they can only be applied to string fields. Use an array of values for \"\n+                        + \"include/exclude clauses\");\n+                }\n+\n+                return execution.create(name, factories, valuesSource, format, bucketCountThresholds, includeExclude, context, parent,\n+                    significanceHeuristic, sigTermsFactory, pipelineAggregators, metaData);\n+\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This supplier is used for all fields that expect to be aggregated as a numeric value.\n+     * This includes floating points, and formatted types that use numerics internally for storage (date, boolean, etc)\n+     */\n+    private static SignificantTermsAggregatorSupplier numericSupplier() {\n+        return new SignificantTermsAggregatorSupplier() {\n+            @Override\n+            public Aggregator build(String name,\n+                                    AggregatorFactories factories,\n+                                    ValuesSource valuesSource,\n+                                    DocValueFormat format,\n+                                    TermsAggregator.BucketCountThresholds bucketCountThresholds,\n+                                    IncludeExclude includeExclude,\n+                                    String executionHint,\n+                                    SearchContext context,\n+                                    Aggregator parent,\n+                                    SignificanceHeuristic significanceHeuristic,\n+                                    SignificantTermsAggregatorFactory sigTermsFactory,\n+                                    List<PipelineAggregator> pipelineAggregators,\n+                                    Map<String, Object> metaData) throws IOException {\n+\n+                if ((includeExclude != null) && (includeExclude.isRegexBased())) {\n+                    throw new AggregationExecutionException(\"Aggregation [\" + name + \"] cannot support regular expression style include/exclude \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161ba7c92a5a2e0161d6eaac0b870b6d4cd64186"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3859, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}