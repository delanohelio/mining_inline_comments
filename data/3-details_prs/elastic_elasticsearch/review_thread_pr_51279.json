{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjM1MDM0", "number": 51279, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTowODowNFrODZwcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozMjoxMVrODZ39DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzM0NjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTowODowNFrOFgUyqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToxMTozM1rOFgfqow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzOTQwMg==", "bodyText": "This comment looks in need of adjustment. Maybe it deserves a Javadoc comment to say it doesn't work with child docs too.", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369439402", "createdAt": "2020-01-22T09:08:04Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -55,19 +56,18 @@ long docVersion(int segmentDocId) throws IOException {\n     long docSeqNo(int segmentDocId) throws IOException {\n         assert seqNoDV.docID() < segmentDocId;\n         if (seqNoDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\";\n             throw new IllegalStateException(\"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\");\n         }\n         return seqNoDV.longValue();\n     }\n \n     long docPrimaryTerm(int segmentDocId) throws IOException {\n-        if (primaryTermDV == null) {\n-            return -1L;\n-        }\n         assert primaryTermDV.docID() < segmentDocId;\n         // Use -1 for docs which don't have primary term. The caller considers those docs as nested docs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cf9b1f3edbf43afc19025dc064f143699764934"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNzU3MQ==", "bodyText": "Fixed in 5b7c5b5.", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369617571", "createdAt": "2020-01-22T15:11:33Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -55,19 +56,18 @@ long docVersion(int segmentDocId) throws IOException {\n     long docSeqNo(int segmentDocId) throws IOException {\n         assert seqNoDV.docID() < segmentDocId;\n         if (seqNoDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\";\n             throw new IllegalStateException(\"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\");\n         }\n         return seqNoDV.longValue();\n     }\n \n     long docPrimaryTerm(int segmentDocId) throws IOException {\n-        if (primaryTermDV == null) {\n-            return -1L;\n-        }\n         assert primaryTermDV.docID() < segmentDocId;\n         // Use -1 for docs which don't have primary term. The caller considers those docs as nested docs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzOTQwMg=="}, "originalCommit": {"oid": "7cf9b1f3edbf43afc19025dc064f143699764934"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzYxNTI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDozMDo0NFrOFgXU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToxMTo0OVrOFgfrNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MDk1MQ==", "bodyText": "Can you add a comment saying that this skips nested docs?", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369480951", "createdAt": "2020-01-22T10:30:44Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -2731,7 +2734,11 @@ private boolean assertMaxSeqNoOfUpdatesIsAdvanced(Term id, long seqNo, boolean a\n     private void restoreVersionMapAndCheckpointTracker(DirectoryReader directoryReader) throws IOException {\n         final IndexSearcher searcher = new IndexSearcher(directoryReader);\n         searcher.setQueryCache(null);\n-        final Query query = LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE);\n+        final Query query = new BooleanQuery.Builder()\n+            .add(LongPoint.newRangeQuery(\n+                SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE), BooleanClause.Occur.MUST)\n+            .add(new DocValuesFieldExistsQuery(SeqNoFieldMapper.PRIMARY_TERM_NAME), BooleanClause.Occur.MUST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cf9b1f3edbf43afc19025dc064f143699764934"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMzQyMA==", "bodyText": "Can you use Queries.newNonNestedFilter() so that we can track the usage more easily ?", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369533420", "createdAt": "2020-01-22T12:33:38Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -2731,7 +2734,11 @@ private boolean assertMaxSeqNoOfUpdatesIsAdvanced(Term id, long seqNo, boolean a\n     private void restoreVersionMapAndCheckpointTracker(DirectoryReader directoryReader) throws IOException {\n         final IndexSearcher searcher = new IndexSearcher(directoryReader);\n         searcher.setQueryCache(null);\n-        final Query query = LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE);\n+        final Query query = new BooleanQuery.Builder()\n+            .add(LongPoint.newRangeQuery(\n+                SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE), BooleanClause.Occur.MUST)\n+            .add(new DocValuesFieldExistsQuery(SeqNoFieldMapper.PRIMARY_TERM_NAME), BooleanClause.Occur.MUST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MDk1MQ=="}, "originalCommit": {"oid": "7cf9b1f3edbf43afc19025dc064f143699764934"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNzcxOA==", "bodyText": "Adjusted in bd0771a.", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369617718", "createdAt": "2020-01-22T15:11:49Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -2731,7 +2734,11 @@ private boolean assertMaxSeqNoOfUpdatesIsAdvanced(Term id, long seqNo, boolean a\n     private void restoreVersionMapAndCheckpointTracker(DirectoryReader directoryReader) throws IOException {\n         final IndexSearcher searcher = new IndexSearcher(directoryReader);\n         searcher.setQueryCache(null);\n-        final Query query = LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE);\n+        final Query query = new BooleanQuery.Builder()\n+            .add(LongPoint.newRangeQuery(\n+                SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE), BooleanClause.Occur.MUST)\n+            .add(new DocValuesFieldExistsQuery(SeqNoFieldMapper.PRIMARY_TERM_NAME), BooleanClause.Occur.MUST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MDk1MQ=="}, "originalCommit": {"oid": "7cf9b1f3edbf43afc19025dc064f143699764934"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDUyOTA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyMDoxNFrOFgf_kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDoyM1rOFghjMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMjkzMA==", "bodyText": "what is the point of doubling the exception with an assertion?", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369622930", "createdAt": "2020-01-22T15:20:14Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -47,6 +47,7 @@\n     long docVersion(int segmentDocId) throws IOException {\n         assert versionDV.docID() < segmentDocId;\n         if (versionDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + VersionFieldMapper.NAME + \"] is not found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MDY1MQ==", "bodyText": "We prefer to bring a node down in tests but not in production when this invariant does not hold.  We use this approach in other places, for example, \n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java\n    \n    \n        Lines 276 to 277\n      in\n      6e2f7b4\n    \n    \n    \n    \n\n        \n          \n           assert false : \"this should not be called\"; \n        \n\n        \n          \n           throw new UnsupportedOperationException(\"indexing is not supported on a read-only engine\"); \n        \n    \n  \n\n.", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369640651", "createdAt": "2020-01-22T15:48:12Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -47,6 +47,7 @@\n     long docVersion(int segmentDocId) throws IOException {\n         assert versionDV.docID() < segmentDocId;\n         if (versionDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + VersionFieldMapper.NAME + \"] is not found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMjkzMA=="}, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODQzNA==", "bodyText": "Thanks for explaining, it makes sense.", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369648434", "createdAt": "2020-01-22T16:00:23Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -47,6 +47,7 @@\n     long docVersion(int segmentDocId) throws IOException {\n         assert versionDV.docID() < segmentDocId;\n         if (versionDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + VersionFieldMapper.NAME + \"] is not found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMjkzMA=="}, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU0ODc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNTowOFrOFggL0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNTowOFrOFggL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjA2NA==", "bodyText": "same question here", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369626064", "createdAt": "2020-01-22T15:25:08Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -55,19 +56,18 @@ long docVersion(int segmentDocId) throws IOException {\n     long docSeqNo(int segmentDocId) throws IOException {\n         assert seqNoDV.docID() < segmentDocId;\n         if (seqNoDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU1MTA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNTo0MVrOFggNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNTo0MVrOFggNNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjQyMw==", "bodyText": "and here", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369626423", "createdAt": "2020-01-22T15:25:41Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/CombinedDocValues.java", "diffHunk": "@@ -55,19 +56,18 @@ long docVersion(int segmentDocId) throws IOException {\n     long docSeqNo(int segmentDocId) throws IOException {\n         assert seqNoDV.docID() < segmentDocId;\n         if (seqNoDV.advanceExact(segmentDocId) == false) {\n+            assert false : \"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\";\n             throw new IllegalStateException(\"DocValues for field [\" + SeqNoFieldMapper.NAME + \"] is not found\");\n         }\n         return seqNoDV.longValue();\n     }\n \n     long docPrimaryTerm(int segmentDocId) throws IOException {\n-        if (primaryTermDV == null) {\n-            return -1L;\n-        }\n+        // We exclude non-root nested documents when querying changes, every returned document must have primary term.\n         assert primaryTermDV.docID() < segmentDocId;\n-        // Use -1 for docs which don't have primary term. The caller considers those docs as nested docs.\n         if (primaryTermDV.advanceExact(segmentDocId) == false) {\n-            return -1;\n+            assert false : \"DocValues for field [\" + SeqNoFieldMapper.PRIMARY_TERM_NAME + \"] is not found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU1OTA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNzo0MVrOFggSWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0ODo0MlrOFghGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNzczNw==", "bodyText": "Lucene requires queries to be rewritten before creating a weight. This particular boolean query is fine because it rewrites to itself, but it'd be more future-proof to call rewrite().\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1.0f);\n          \n          \n            \n                     final Query rewrittenQuery = searcher.rewrite(query);\n          \n          \n            \n                     final Weight weight = searcher.createWeight(rewrittenQuery, ScoreMode.COMPLETE_NO_SCORES, 1.0f);", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369627737", "createdAt": "2020-01-22T15:27:41Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -2731,7 +2734,11 @@ private boolean assertMaxSeqNoOfUpdatesIsAdvanced(Term id, long seqNo, boolean a\n     private void restoreVersionMapAndCheckpointTracker(DirectoryReader directoryReader) throws IOException {\n         final IndexSearcher searcher = new IndexSearcher(directoryReader);\n         searcher.setQueryCache(null);\n-        final Query query = LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE);\n+        final Query query = new BooleanQuery.Builder()\n+            .add(LongPoint.newRangeQuery(\n+                    SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE), BooleanClause.Occur.MUST)\n+            .add(Queries.newNonNestedFilter(), BooleanClause.Occur.MUST) // exclude non-root nested documents\n+            .build();\n         final Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1.0f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MDk4Mw==", "bodyText": "Yes, I pushed 8c37fb0.", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369640983", "createdAt": "2020-01-22T15:48:42Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -2731,7 +2734,11 @@ private boolean assertMaxSeqNoOfUpdatesIsAdvanced(Term id, long seqNo, boolean a\n     private void restoreVersionMapAndCheckpointTracker(DirectoryReader directoryReader) throws IOException {\n         final IndexSearcher searcher = new IndexSearcher(directoryReader);\n         searcher.setQueryCache(null);\n-        final Query query = LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE);\n+        final Query query = new BooleanQuery.Builder()\n+            .add(LongPoint.newRangeQuery(\n+                    SeqNoFieldMapper.NAME, getPersistedLocalCheckpoint() + 1, Long.MAX_VALUE), BooleanClause.Occur.MUST)\n+            .add(Queries.newNonNestedFilter(), BooleanClause.Occur.MUST) // exclude non-root nested documents\n+            .build();\n         final Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1.0f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNzczNw=="}, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU3NzQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/engine/LuceneChangesSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozMjoxMVrOFggduw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTozMjoxMVrOFggduw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMDY1MQ==", "bodyText": "in case you wonder: no need to explicitly rewrite here, this is implicitly done by searchAfter which is a high-level API of IndexSearcher unlike createWeight", "url": "https://github.com/elastic/elasticsearch/pull/51279#discussion_r369630651", "createdAt": "2020-01-22T15:32:11Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/engine/LuceneChangesSnapshot.java", "diffHunk": "@@ -210,7 +213,10 @@ private void fillParallelArray(ScoreDoc[] scoreDocs, ParallelArray parallelArray\n     }\n \n     private TopDocs searchOperations(ScoreDoc after) throws IOException {\n-        final Query rangeQuery = LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, Math.max(fromSeqNo, lastSeenSeqNo), toSeqNo);\n+        final Query rangeQuery = new BooleanQuery.Builder()\n+            .add(LongPoint.newRangeQuery(SeqNoFieldMapper.NAME, Math.max(fromSeqNo, lastSeenSeqNo), toSeqNo), BooleanClause.Occur.MUST)\n+            .add(Queries.newNonNestedFilter(), BooleanClause.Occur.MUST) // exclude non-root nested documents\n+            .build();\n         final Sort sortedBySeqNo = new Sort(new SortField(SeqNoFieldMapper.NAME, SortField.Type.LONG));\n         return indexSearcher.searchAfter(after, rangeQuery, searchBatchSize, sortedBySeqNo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0771ac782e6eca7953a9fc4b31a869a740755a"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4424, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}