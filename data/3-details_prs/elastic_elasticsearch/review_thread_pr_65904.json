{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzg5Mjc5", "number": 65904, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDozNDo1NFrOFB-Z9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzoyMDo0N1rOFCKc-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjE1MzUwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDozNDo1NFrOIA5jRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDozNDo1NFrOIA5jRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMzgzMQ==", "bodyText": "Good catch, it was sending the wrong bulkRequest before", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r537813831", "createdAt": "2020-12-07T20:34:54Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -123,82 +120,70 @@ public BulkResponse bulkIndexWithRetry(BulkRequest bulkRequest,\n                                            String jobId,\n                                            Supplier<Boolean> shouldRetry,\n                                            Consumer<String> retryMsgHandler) {\n-        return bulkIndexWithRetry(bulkRequest, jobId, shouldRetry, retryMsgHandler,\n-            providedBulkRequest -> client.bulk(providedBulkRequest).actionGet());\n+        return bulkIndexWithRetry(bulkRequest,\n+            jobId,\n+            shouldRetry,\n+            retryMsgHandler,\n+            client::bulk);\n     }\n \n     public BulkResponse bulkIndexWithHeadersWithRetry(Map<String, String> headers,\n                                                       BulkRequest bulkRequest,\n                                                       String jobId,\n                                                       Supplier<Boolean> shouldRetry,\n                                                       Consumer<String> retryMsgHandler) {\n-        return bulkIndexWithRetry(bulkRequest, jobId, shouldRetry, retryMsgHandler,\n-            providedBulkRequest -> ClientHelper.executeWithHeaders(\n-                headers, ClientHelper.ML_ORIGIN, client, () -> client.execute(BulkAction.INSTANCE, bulkRequest).actionGet()));\n+        return bulkIndexWithRetry(bulkRequest,\n+            jobId,\n+            shouldRetry,\n+            retryMsgHandler,\n+            (providedBulkRequest, listener) -> ClientHelper.executeWithHeadersAsync(\n+                headers,\n+                ClientHelper.ML_ORIGIN,\n+                client,\n+                BulkAction.INSTANCE,\n+                providedBulkRequest,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a79f667f5688f14e0164b6059ac9577f25282f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjE4NzY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo0MzoyOVrOIA52fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1ODo1OFrOIBB5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxODc1MA==", "bodyText": "is this comment out of date?", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r537818750", "createdAt": "2020-12-07T20:43:29Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -208,48 +193,195 @@ private static boolean isIrrecoverable(Exception ex) {\n         return IRRECOVERABLE_REST_STATUSES.contains(status(t));\n     }\n \n-    /**\n-     * {@link RetryContext} object handles logic that is executed between consecutive retries of an action.\n-     *\n-     * Note that it does not execute the action itself.\n-     */\n-    private class RetryContext {\n+    @SuppressWarnings(\"NonAtomicOperationOnVolatileField\")\n+    private static class BulkRequestRewriter {\n+        private volatile BulkRequest bulkRequest;\n+        BulkRequestRewriter(BulkRequest initialRequest) {\n+            this.bulkRequest = initialRequest;\n+        }\n+\n+        void rewriteRequest(BulkResponse bulkResponse) {\n+            if (bulkResponse.hasFailures() == false) {\n+                return;\n+            }\n+            // To lines to make it obvious that this is two operations and non-atomic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a79f667f5688f14e0164b6059ac9577f25282f"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDU4MQ==", "bodyText": "definitely :D", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r537950581", "createdAt": "2020-12-08T00:58:58Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -208,48 +193,195 @@ private static boolean isIrrecoverable(Exception ex) {\n         return IRRECOVERABLE_REST_STATUSES.contains(status(t));\n     }\n \n-    /**\n-     * {@link RetryContext} object handles logic that is executed between consecutive retries of an action.\n-     *\n-     * Note that it does not execute the action itself.\n-     */\n-    private class RetryContext {\n+    @SuppressWarnings(\"NonAtomicOperationOnVolatileField\")\n+    private static class BulkRequestRewriter {\n+        private volatile BulkRequest bulkRequest;\n+        BulkRequestRewriter(BulkRequest initialRequest) {\n+            this.bulkRequest = initialRequest;\n+        }\n+\n+        void rewriteRequest(BulkResponse bulkResponse) {\n+            if (bulkResponse.hasFailures() == false) {\n+                return;\n+            }\n+            // To lines to make it obvious that this is two operations and non-atomic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxODc1MA=="}, "originalCommit": {"oid": "d3a79f667f5688f14e0164b6059ac9577f25282f"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjUzNjgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/MlSingleNodeTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowOTowN1rOIA8_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1OTozMFrOIBB6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MDE0Mw==", "bodyText": "I don't understand why this is now required. Does it have to be part of this change?", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r537870143", "createdAt": "2020-12-07T22:09:07Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/MlSingleNodeTestCase.java", "diffHunk": "@@ -128,11 +149,66 @@ protected void waitForMlTemplates() throws Exception {\n         return responseHolder.get();\n     }\n \n+    protected static ThreadPool mockThreadPool() {\n+        ThreadPool tp = mock(ThreadPool.class);\n+        ExecutorService executor = mock(ExecutorService.class);\n+        doAnswer(invocationOnMock -> {\n+            ((Runnable) invocationOnMock.getArguments()[0]).run();\n+            return null;\n+        }).when(executor).execute(any(Runnable.class));\n+        when(tp.executor(any(String.class))).thenReturn(executor);\n+        doAnswer(invocationOnMock -> {\n+            ((Runnable) invocationOnMock.getArguments()[0]).run();\n+            return null;\n+        }).when(tp).schedule(\n+            any(Runnable.class), any(TimeValue.class), any(String.class)\n+        );\n+        return tp;\n+    }\n+\n+\n     public static void assertNoException(AtomicReference<Exception> error) throws Exception {\n         if (error.get() == null) {\n             return;\n         }\n         throw error.get();\n     }\n \n+    public static class MockPainlessScriptEngine extends MockScriptEngine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2145476a8fefd0fe57514ef3dd2ef303d5eabeb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDgwNA==", "bodyText": "I noticed log spam when it wasn't around. This and the other changes (including more plugins) got rid of a bunch of log spam for the single node tests.", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r537950804", "createdAt": "2020-12-08T00:59:30Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/MlSingleNodeTestCase.java", "diffHunk": "@@ -128,11 +149,66 @@ protected void waitForMlTemplates() throws Exception {\n         return responseHolder.get();\n     }\n \n+    protected static ThreadPool mockThreadPool() {\n+        ThreadPool tp = mock(ThreadPool.class);\n+        ExecutorService executor = mock(ExecutorService.class);\n+        doAnswer(invocationOnMock -> {\n+            ((Runnable) invocationOnMock.getArguments()[0]).run();\n+            return null;\n+        }).when(executor).execute(any(Runnable.class));\n+        when(tp.executor(any(String.class))).thenReturn(executor);\n+        doAnswer(invocationOnMock -> {\n+            ((Runnable) invocationOnMock.getArguments()[0]).run();\n+            return null;\n+        }).when(tp).schedule(\n+            any(Runnable.class), any(TimeValue.class), any(String.class)\n+        );\n+        return tp;\n+    }\n+\n+\n     public static void assertNoException(AtomicReference<Exception> error) throws Exception {\n         if (error.get() == null) {\n             return;\n         }\n         throw error.get();\n     }\n \n+    public static class MockPainlessScriptEngine extends MockScriptEngine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MDE0Mw=="}, "originalCommit": {"oid": "b2145476a8fefd0fe57514ef3dd2ef303d5eabeb"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU0NzgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxMTo1MFrOIA9FgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0MToyNlrOIBYk_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MTc0NA==", "bodyText": "I'm not convinced this class is bringing much to the party.\nprivate volatile BulkRequest bulkRequest; could be a field in BulkRetryableAction and buildNewRequestFromFailures could be called directly.", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r537871744", "createdAt": "2020-12-07T22:11:50Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -208,48 +193,195 @@ private static boolean isIrrecoverable(Exception ex) {\n         return IRRECOVERABLE_REST_STATUSES.contains(status(t));\n     }\n \n-    /**\n-     * {@link RetryContext} object handles logic that is executed between consecutive retries of an action.\n-     *\n-     * Note that it does not execute the action itself.\n-     */\n-    private class RetryContext {\n+    @SuppressWarnings(\"NonAtomicOperationOnVolatileField\")\n+    private static class BulkRequestRewriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2145476a8fefd0fe57514ef3dd2ef303d5eabeb"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyMjE3Mg==", "bodyText": "could be a field in BulkRetryableAction and buildNewRequestFromFailures could be called directly.\n\nNo, it cannot. Because the action is passed via super the super is ctor'd before the child class is. So, references DIRECTLY to the child class methods is not possible.\nThis class guaruntees things are constructed and mutable inside the lambda passed to super.", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r538322172", "createdAt": "2020-12-08T12:41:26Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -208,48 +193,195 @@ private static boolean isIrrecoverable(Exception ex) {\n         return IRRECOVERABLE_REST_STATUSES.contains(status(t));\n     }\n \n-    /**\n-     * {@link RetryContext} object handles logic that is executed between consecutive retries of an action.\n-     *\n-     * Note that it does not execute the action itself.\n-     */\n-    private class RetryContext {\n+    @SuppressWarnings(\"NonAtomicOperationOnVolatileField\")\n+    private static class BulkRequestRewriter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MTc0NA=="}, "originalCommit": {"oid": "b2145476a8fefd0fe57514ef3dd2ef303d5eabeb"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODEyNzMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/RetryableAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzoyMDo0N1rOIBKjeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjozNjoxMlrOIBYSSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5MjQwOQ==", "bodyText": "Could you please add some unit indication? Like minimumDelayMillis()?", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r538092409", "createdAt": "2020-12-08T07:20:47Z", "author": {"login": "przemekwitek"}, "path": "server/src/main/java/org/elasticsearch/action/support/RetryableAction.java", "diffHunk": "@@ -118,6 +118,10 @@ protected long calculateDelay(long previousDelay) {\n         return Math.min(previousDelay * 2, Integer.MAX_VALUE);\n     }\n \n+    protected long minimumDelay() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a79f667f5688f14e0164b6059ac9577f25282f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxNzM4Nw==", "bodyText": "100%", "url": "https://github.com/elastic/elasticsearch/pull/65904#discussion_r538317387", "createdAt": "2020-12-08T12:36:12Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/action/support/RetryableAction.java", "diffHunk": "@@ -118,6 +118,10 @@ protected long calculateDelay(long previousDelay) {\n         return Math.min(previousDelay * 2, Integer.MAX_VALUE);\n     }\n \n+    protected long minimumDelay() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5MjQwOQ=="}, "originalCommit": {"oid": "d3a79f667f5688f14e0164b6059ac9577f25282f"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1754, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}