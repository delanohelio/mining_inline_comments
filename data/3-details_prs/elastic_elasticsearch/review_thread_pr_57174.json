{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDAwODA0", "number": 57174, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxMDo1NFrOD_-zAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxMzowN1rOD_-14Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDE1NzQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxMDo1NVrOGa-KdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxMDo1NVrOGa-KdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNDY0NA==", "bodyText": "The logic here is different to the later branches as it doesn't have the new model snapshot retention options added in #56125", "url": "https://github.com/elastic/elasticsearch/pull/57174#discussion_r430934644", "createdAt": "2020-05-27T08:10:55Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "diffHunk": "@@ -99,11 +106,18 @@ protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Bool\n             @Override\n             public void onResponse(SearchResponse searchResponse) {\n                 try {\n-                    List<ModelSnapshot> modelSnapshots = new ArrayList<>();\n+                    List<JobSnapshotId> snapshotIds = new ArrayList<>();\n                     for (SearchHit hit : searchResponse.getHits()) {\n-                        modelSnapshots.add(ModelSnapshot.fromJson(hit.getSourceRef()));\n+                        JobSnapshotId idPair = new JobSnapshotId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6608fca0d156c31ca0689acc17c460032e21725"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDE2NDgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxMzowN1rOGa-PQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNzo0MlrOGbAS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTg3NA==", "bodyText": "In 6.8 the doc value could be a Long rather than a String.  It's why TimeField has this case: \n  \n    \n      elasticsearch/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/extractor/TimeField.java\n    \n    \n         Line 49\n      in\n      cde2026\n    \n    \n    \n    \n\n        \n          \n           } else if (value[0] instanceof Long == false) { // pre-6.0 field \n        \n    \n  \n\n\nWhat this means in practice is that a user running 6.8 who first used ML in 5.x will end up seeing the warning on lines 139-140 repeatedly and won't get any cleanup.\nIt's still OK to use stringFieldValueOrNull() to extract fields mapped as keyword or text from hits, but for fields mapped as date in 6.8 the code needs to handle both Long and String.", "url": "https://github.com/elastic/elasticsearch/pull/57174#discussion_r430935874", "createdAt": "2020-05-27T08:13:07Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java", "diffHunk": "@@ -129,39 +125,49 @@ public void onFailure(Exception e) {\n         });\n     }\n \n-    private List<ForecastRequestStats> findForecastsToDelete(SearchResponse searchResponse) throws IOException {\n-        List<ForecastRequestStats> forecastsToDelete = new ArrayList<>();\n+    private List<JobForecastId> findForecastsToDelete(SearchResponse searchResponse) {\n+        List<JobForecastId> forecastsToDelete = new ArrayList<>();\n \n         SearchHits hits = searchResponse.getHits();\n         if (hits.getTotalHits() > MAX_FORECASTS) {\n             LOGGER.info(\"More than [{}] forecasts were found. This run will only delete [{}] of them\", MAX_FORECASTS, MAX_FORECASTS);\n         }\n \n         for (SearchHit hit : hits.getHits()) {\n-            try (InputStream stream = hit.getSourceRef().streamInput();\n-                 XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(\n-                         NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {\n-                ForecastRequestStats forecastRequestStats = ForecastRequestStats.LENIENT_PARSER.apply(parser, null);\n-                if (forecastRequestStats.getExpiryTime().toEpochMilli() < cutoffEpochMs) {\n-                    forecastsToDelete.add(forecastRequestStats);\n+            String expiryTime = stringFieldValueOrNull(hit, ForecastRequestStats.EXPIRY_TIME.getPreferredName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6608fca0d156c31ca0689acc17c460032e21725"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MzExMw==", "bodyText": "Good point thanks.\nI'm curious though why does this code throw if the object is a Long? This is from the 6.8 branch\n\n  \n    \n      elasticsearch/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/fields/ExtractedField.java\n    \n    \n         Line 118\n      in\n      62f8da2\n    \n    \n    \n    \n\n        \n          \n           throw new IllegalStateException(\"Unexpected value for a time field: \" + value[0].getClass());", "url": "https://github.com/elastic/elasticsearch/pull/57174#discussion_r430943113", "createdAt": "2020-05-27T08:25:18Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java", "diffHunk": "@@ -129,39 +125,49 @@ public void onFailure(Exception e) {\n         });\n     }\n \n-    private List<ForecastRequestStats> findForecastsToDelete(SearchResponse searchResponse) throws IOException {\n-        List<ForecastRequestStats> forecastsToDelete = new ArrayList<>();\n+    private List<JobForecastId> findForecastsToDelete(SearchResponse searchResponse) {\n+        List<JobForecastId> forecastsToDelete = new ArrayList<>();\n \n         SearchHits hits = searchResponse.getHits();\n         if (hits.getTotalHits() > MAX_FORECASTS) {\n             LOGGER.info(\"More than [{}] forecasts were found. This run will only delete [{}] of them\", MAX_FORECASTS, MAX_FORECASTS);\n         }\n \n         for (SearchHit hit : hits.getHits()) {\n-            try (InputStream stream = hit.getSourceRef().streamInput();\n-                 XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(\n-                         NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {\n-                ForecastRequestStats forecastRequestStats = ForecastRequestStats.LENIENT_PARSER.apply(parser, null);\n-                if (forecastRequestStats.getExpiryTime().toEpochMilli() < cutoffEpochMs) {\n-                    forecastsToDelete.add(forecastRequestStats);\n+            String expiryTime = stringFieldValueOrNull(hit, ForecastRequestStats.EXPIRY_TIME.getPreferredName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTg3NA=="}, "originalCommit": {"oid": "b6608fca0d156c31ca0689acc17c460032e21725"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2OTU2Nw==", "bodyText": "The tricky part is the condition checks the value is not a long. Thus, the logic there is that prior to 6.0, we expect a long. If it's not, then something's gone wrong. Otherwise, we fall through the last return of the method. Pretty confusing, I know.", "url": "https://github.com/elastic/elasticsearch/pull/57174#discussion_r430969567", "createdAt": "2020-05-27T09:07:42Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java", "diffHunk": "@@ -129,39 +125,49 @@ public void onFailure(Exception e) {\n         });\n     }\n \n-    private List<ForecastRequestStats> findForecastsToDelete(SearchResponse searchResponse) throws IOException {\n-        List<ForecastRequestStats> forecastsToDelete = new ArrayList<>();\n+    private List<JobForecastId> findForecastsToDelete(SearchResponse searchResponse) {\n+        List<JobForecastId> forecastsToDelete = new ArrayList<>();\n \n         SearchHits hits = searchResponse.getHits();\n         if (hits.getTotalHits() > MAX_FORECASTS) {\n             LOGGER.info(\"More than [{}] forecasts were found. This run will only delete [{}] of them\", MAX_FORECASTS, MAX_FORECASTS);\n         }\n \n         for (SearchHit hit : hits.getHits()) {\n-            try (InputStream stream = hit.getSourceRef().streamInput();\n-                 XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(\n-                         NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {\n-                ForecastRequestStats forecastRequestStats = ForecastRequestStats.LENIENT_PARSER.apply(parser, null);\n-                if (forecastRequestStats.getExpiryTime().toEpochMilli() < cutoffEpochMs) {\n-                    forecastsToDelete.add(forecastRequestStats);\n+            String expiryTime = stringFieldValueOrNull(hit, ForecastRequestStats.EXPIRY_TIME.getPreferredName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTg3NA=="}, "originalCommit": {"oid": "b6608fca0d156c31ca0689acc17c460032e21725"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3908, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}