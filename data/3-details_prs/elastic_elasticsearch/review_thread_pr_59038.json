{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzkwODAz", "number": 59038, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoxMjo0MlrOELlZ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowNTozOFrOEL8z6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTgyNjEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoxMjo0MlrOGtNLcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozNzo0N1rOGtSDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1NTAyNw==", "bodyText": "Can we lose this override? It looks only to be used in one test that could use the default recovery state factory anyway.", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450055027", "createdAt": "2020-07-06T08:12:42Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -742,6 +745,30 @@ public synchronized void verifyIndexMetadata(IndexMetadata metadata, IndexMetada\n         }\n     }\n \n+    @Override\n+    public IndexShard createShard(\n+            final ShardRouting shardRouting,\n+            final PeerRecoveryTargetService recoveryTargetService,\n+            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n+            final RepositoriesService repositoriesService,\n+            final Consumer<IndexShard.ShardFailure> onShardFailure,\n+            final Consumer<ShardId> globalCheckpointSyncer,\n+            final RetentionLeaseSyncer retentionLeaseSyncer,\n+            final DiscoveryNode targetNode,\n+            final DiscoveryNode sourceNode) throws IOException {\n+        IndexService indexService = indexService(shardRouting.index());\n+        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n+\n+        return createShard(shardRouting,\n+            recoveryState,\n+            recoveryTargetService,\n+            recoveryListener,\n+            repositoriesService,\n+            onShardFailure,\n+            globalCheckpointSyncer,\n+            retentionLeaseSyncer);\n+    }\n+\n     @Override\n     public IndexShard createShard(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f85da10690df56c3b514d921f9cc6721859c26"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyMDI4OA==", "bodyText": "Do you mean removing this method from AllocatedIndices interface?", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450120288", "createdAt": "2020-07-06T10:08:31Z", "author": {"login": "fcofdez"}, "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -742,6 +745,30 @@ public synchronized void verifyIndexMetadata(IndexMetadata metadata, IndexMetada\n         }\n     }\n \n+    @Override\n+    public IndexShard createShard(\n+            final ShardRouting shardRouting,\n+            final PeerRecoveryTargetService recoveryTargetService,\n+            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n+            final RepositoriesService repositoriesService,\n+            final Consumer<IndexShard.ShardFailure> onShardFailure,\n+            final Consumer<ShardId> globalCheckpointSyncer,\n+            final RetentionLeaseSyncer retentionLeaseSyncer,\n+            final DiscoveryNode targetNode,\n+            final DiscoveryNode sourceNode) throws IOException {\n+        IndexService indexService = indexService(shardRouting.index());\n+        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n+\n+        return createShard(shardRouting,\n+            recoveryState,\n+            recoveryTargetService,\n+            recoveryListener,\n+            repositoriesService,\n+            onShardFailure,\n+            globalCheckpointSyncer,\n+            retentionLeaseSyncer);\n+    }\n+\n     @Override\n     public IndexShard createShard(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1NTAyNw=="}, "originalCommit": {"oid": "90f85da10690df56c3b514d921f9cc6721859c26"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzNDc4Ng==", "bodyText": "Yes", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450134786", "createdAt": "2020-07-06T10:37:47Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -742,6 +745,30 @@ public synchronized void verifyIndexMetadata(IndexMetadata metadata, IndexMetada\n         }\n     }\n \n+    @Override\n+    public IndexShard createShard(\n+            final ShardRouting shardRouting,\n+            final PeerRecoveryTargetService recoveryTargetService,\n+            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n+            final RepositoriesService repositoriesService,\n+            final Consumer<IndexShard.ShardFailure> onShardFailure,\n+            final Consumer<ShardId> globalCheckpointSyncer,\n+            final RetentionLeaseSyncer retentionLeaseSyncer,\n+            final DiscoveryNode targetNode,\n+            final DiscoveryNode sourceNode) throws IOException {\n+        IndexService indexService = indexService(shardRouting.index());\n+        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n+\n+        return createShard(shardRouting,\n+            recoveryState,\n+            recoveryTargetService,\n+            recoveryListener,\n+            repositoriesService,\n+            onShardFailure,\n+            globalCheckpointSyncer,\n+            retentionLeaseSyncer);\n+    }\n+\n     @Override\n     public IndexShard createShard(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1NTAyNw=="}, "originalCommit": {"oid": "90f85da10690df56c3b514d921f9cc6721859c26"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTg3OTcxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyNzozNlrOGtNsKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyNzozNlrOGtNsKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MzQwMg==", "bodyText": "Can we assert that indexService exists?", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450063402", "createdAt": "2020-07-06T08:27:36Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -742,6 +745,30 @@ public synchronized void verifyIndexMetadata(IndexMetadata metadata, IndexMetada\n         }\n     }\n \n+    @Override\n+    public IndexShard createShard(\n+            final ShardRouting shardRouting,\n+            final PeerRecoveryTargetService recoveryTargetService,\n+            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n+            final RepositoriesService repositoriesService,\n+            final Consumer<IndexShard.ShardFailure> onShardFailure,\n+            final Consumer<ShardId> globalCheckpointSyncer,\n+            final RetentionLeaseSyncer retentionLeaseSyncer,\n+            final DiscoveryNode targetNode,\n+            final DiscoveryNode sourceNode) throws IOException {\n+        IndexService indexService = indexService(shardRouting.index());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f85da10690df56c3b514d921f9cc6721859c26"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkwOTE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/plugins/IndexStorePlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozNTo0NlrOGtN-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozNTo0NlrOGtN-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2Nzk3Mw==", "bodyText": "Can we add a test to ensure that a plugin cannot override the default recovery state factory? And that duplicates are not allowed too?", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450067973", "createdAt": "2020-07-06T08:35:46Z", "author": {"login": "tlrx"}, "path": "server/src/main/java/org/elasticsearch/plugins/IndexStorePlugin.java", "diffHunk": "@@ -55,4 +60,26 @@\n      */\n     Map<String, DirectoryFactory> getDirectoryFactories();\n \n+    /**\n+     * An interface that allows to create a new {@link RecoveryState} per shard.\n+     */\n+    @FunctionalInterface\n+    interface RecoveryStateFactory {\n+        /**\n+         * Creates a new {@link RecoveryState} per shard. This method is called once per shard on shard creation.\n+         * @return a new RecoveryState instance\n+         */\n+        RecoveryState newRecoveryState(ShardRouting shardRouting, DiscoveryNode targetNode, @Nullable DiscoveryNode sourceNode);\n+    }\n+\n+    /**\n+     * The {@link RecoveryStateFactory} mappings for this plugin. When an index is created the recovery type setting\n+     * {@link org.elasticsearch.index.IndexModule#INDEX_RECOVERY_TYPE_SETTING} on the index will be examined and either use the default\n+     * or looked up among all the recovery state factories from {@link IndexStorePlugin} plugins.\n+     *\n+     * @return a map from recovery type to an recovery state factory\n+     */\n+    default Map<String, RecoveryStateFactory> getRecoveryStateFactories() {\n+        return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f85da10690df56c3b514d921f9cc6721859c26"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTY2MTIyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowNTozOFrOGtxpAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzowNTozOFrOGtxpAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjQxNg==", "bodyText": "I think we shouldn't be asserting that our recovery factories have a toString() that returns org.elasticsearch.plugins.IndexStorePluginTests$RecoveryFactory@[\\\\w\\\\d]+: the fact that the message contains the duplicated key (and the string Duplicate key) should be enough IMO.\nBit of a pain the message doesn't contain the key in Java 8 but such is life.", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450652416", "createdAt": "2020-07-07T07:05:38Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java", "diffHunk": "@@ -92,4 +127,20 @@ public void testDuplicateIndexStoreFactories() {\n         }\n     }\n \n+    public void testDuplicateIndexStoreRecoveryStateFactories() {\n+        final Settings settings = Settings.builder().put(\"path.home\", createTempDir()).build();\n+        final IllegalStateException e = expectThrows(\n+            IllegalStateException.class, () -> new MockNode(settings, Arrays.asList(FooCustomRecoveryStore.class,\n+                                                                                    BarCustomRecoveryStore.class)));\n+        if (JavaVersion.current().compareTo(JavaVersion.parse(\"9\")) >= 0) {\n+            assertThat(e, hasToString(matches(\n+                \"java.lang.IllegalStateException: Duplicate key recovery-type \\\\(attempted merging values \" +\n+                    \"org.elasticsearch.plugins.IndexStorePluginTests\\\\$RecoveryFactory@[\\\\w\\\\d]+ \" +\n+                    \"and org.elasticsearch.plugins.IndexStorePluginTests\\\\$RecoveryFactory@[\\\\w\\\\d]+\\\\)\")));\n+        } else {\n+            assertThat(e, hasToString(matches(\n+                \"java.lang.IllegalStateException: Duplicate key \" +\n+                    \"org.elasticsearch.plugins.IndexStorePluginTests$RecoveryFactory@[\\\\w\\\\d]+\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aad47b516086140229ed4d1dc1e51e4db1e5558"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2042, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}