{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDkzMTEx", "number": 50912, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjozMjoyOVrODXgUlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjozMjoyOVrODXgUlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTczMzk5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjozMjoyOVrOFc1ayw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjo1MDowMVrOFc10Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTY1OQ==", "bodyText": "Any idea to use something like this: https://github.com/elastic/elasticsearch/pull/50912/files#diff-5a875cd5f076862a2984f3815807fc6aR95 but get a different random Version where the Lucene Version is also different?", "url": "https://github.com/elastic/elasticsearch/pull/50912#discussion_r365779659", "createdAt": "2020-01-13T12:32:29Z", "author": {"login": "matriv"}, "path": "server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.index.analysis;\n+\n+import org.apache.lucene.analysis.TokenFilter;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.TestEnvironment;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.IndexSettingsModule;\n+import org.elasticsearch.test.VersionUtils;\n+\n+import java.io.IOException;\n+\n+public class PreConfiguredTokenFilterTests extends ESTestCase {\n+\n+    private final Settings emptyNodeSettings = Settings.builder()\n+            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+            .build();\n+\n+    public void testCachingWithSingleton() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.singleton(\"singleton\", randomBoolean(),\n+                        (tokenStream) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings2);\n+        assertSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithElasticsearchVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n+                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n+                    @Override\n+                    public boolean incrementToken() {\n+                        return false;\n+                    }\n+                });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n+        assertNotSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithLuceneVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n+                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = Version.CURRENT;\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = Version.V_7_2_1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d1e5d3bf28e49fedb6edaaf0aa0d46fb81aa46"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4MzI4Mw==", "bodyText": "I think VersionUtils.getFirstVersion() will always return a version with a different lucene version to Version.CURRENT?", "url": "https://github.com/elastic/elasticsearch/pull/50912#discussion_r365783283", "createdAt": "2020-01-13T12:42:20Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.index.analysis;\n+\n+import org.apache.lucene.analysis.TokenFilter;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.TestEnvironment;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.IndexSettingsModule;\n+import org.elasticsearch.test.VersionUtils;\n+\n+import java.io.IOException;\n+\n+public class PreConfiguredTokenFilterTests extends ESTestCase {\n+\n+    private final Settings emptyNodeSettings = Settings.builder()\n+            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+            .build();\n+\n+    public void testCachingWithSingleton() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.singleton(\"singleton\", randomBoolean(),\n+                        (tokenStream) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings2);\n+        assertSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithElasticsearchVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n+                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n+                    @Override\n+                    public boolean incrementToken() {\n+                        return false;\n+                    }\n+                });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n+        assertNotSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithLuceneVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n+                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = Version.CURRENT;\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = Version.V_7_2_1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTY1OQ=="}, "originalCommit": {"oid": "e7d1e5d3bf28e49fedb6edaaf0aa0d46fb81aa46"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NjIwMg==", "bodyText": "Probably it would work, but there is no actual guarantee that the first released version (that's what getFirstVersion() does) has a different Lucene version.", "url": "https://github.com/elastic/elasticsearch/pull/50912#discussion_r365786202", "createdAt": "2020-01-13T12:50:01Z", "author": {"login": "matriv"}, "path": "server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.index.analysis;\n+\n+import org.apache.lucene.analysis.TokenFilter;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.TestEnvironment;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.IndexSettingsModule;\n+import org.elasticsearch.test.VersionUtils;\n+\n+import java.io.IOException;\n+\n+public class PreConfiguredTokenFilterTests extends ESTestCase {\n+\n+    private final Settings emptyNodeSettings = Settings.builder()\n+            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+            .build();\n+\n+    public void testCachingWithSingleton() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.singleton(\"singleton\", randomBoolean(),\n+                        (tokenStream) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings2);\n+        assertSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithElasticsearchVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n+                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n+                    @Override\n+                    public boolean incrementToken() {\n+                        return false;\n+                    }\n+                });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n+        assertNotSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithLuceneVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n+                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = Version.CURRENT;\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = Version.V_7_2_1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTY1OQ=="}, "originalCommit": {"oid": "e7d1e5d3bf28e49fedb6edaaf0aa0d46fb81aa46"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4654, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}