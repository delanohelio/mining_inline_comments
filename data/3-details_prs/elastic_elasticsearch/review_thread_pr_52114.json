{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODg1MTUy", "number": 52114, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowMzo0M1rODeo2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoxNVrODi2I2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUzMjUyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowMzo0M1rOFn41UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowMzo0M1rOFn41UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2OTkzNw==", "bodyText": "tip: this could be String... include to make the DSL a little less verbose allowing for things like includeCoreSpec 'foo', 'bar'.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377369937", "createdAt": "2020-02-10T23:03:43Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecExtension.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.elasticsearch.gradle.test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class RestApiSpecExtension {\n+    private List<String> includesCoreSpec = new ArrayList<>();\n+    private List<String> includesCoreTests = new ArrayList<>();\n+    private List<String> includesXpackSpec = new ArrayList<>();\n+    private List<String> includesXpackTests = new ArrayList<>();\n+    private boolean alwaysCopySpec = false;\n+    private boolean copyTests = false;\n+    private boolean copyXpackTests = false;\n+\n+    public void includeCoreSpec(String include) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUzNTM0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowNDo1OVrOFn43Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowNzoxM1rOFo6-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MDM3NA==", "bodyText": "We should use a typical setter/getter pattern here. I think configuring  likecopyCoreTests = true is more idiomatic.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377370374", "createdAt": "2020-02-10T23:04:59Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecExtension.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.elasticsearch.gradle.test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class RestApiSpecExtension {\n+    private List<String> includesCoreSpec = new ArrayList<>();\n+    private List<String> includesCoreTests = new ArrayList<>();\n+    private List<String> includesXpackSpec = new ArrayList<>();\n+    private List<String> includesXpackTests = new ArrayList<>();\n+    private boolean alwaysCopySpec = false;\n+    private boolean copyTests = false;\n+    private boolean copyXpackTests = false;\n+\n+    public void includeCoreSpec(String include) {\n+        includesCoreSpec.add(include);\n+    }\n+\n+    public List<String> getIncludesCoreSpec() {\n+        return includesCoreSpec;\n+    }\n+\n+    public void includeCoreTests(String include) {\n+        includesCoreTests.add(include);\n+    }\n+\n+    public List<String> getIncludesCoreTests() {\n+        return includesCoreTests;\n+    }\n+\n+    public void includeXpackSpec(String include) {\n+        includesXpackSpec.add(include);\n+    }\n+\n+    public List<String> getIncludesXpackSpec() {\n+        return includesXpackSpec;\n+    }\n+\n+    public void copyCoreTests(boolean copyTests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MzYyMg==", "bodyText": "I ended up removing this from the PR in favor of just using an include pattern.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378453622", "createdAt": "2020-02-12T19:07:13Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecExtension.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.elasticsearch.gradle.test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class RestApiSpecExtension {\n+    private List<String> includesCoreSpec = new ArrayList<>();\n+    private List<String> includesCoreTests = new ArrayList<>();\n+    private List<String> includesXpackSpec = new ArrayList<>();\n+    private List<String> includesXpackTests = new ArrayList<>();\n+    private boolean alwaysCopySpec = false;\n+    private boolean copyTests = false;\n+    private boolean copyXpackTests = false;\n+\n+    public void includeCoreSpec(String include) {\n+        includesCoreSpec.add(include);\n+    }\n+\n+    public List<String> getIncludesCoreSpec() {\n+        return includesCoreSpec;\n+    }\n+\n+    public void includeCoreTests(String include) {\n+        includesCoreTests.add(include);\n+    }\n+\n+    public List<String> getIncludesCoreTests() {\n+        return includesCoreTests;\n+    }\n+\n+    public void includeXpackSpec(String include) {\n+        includesXpackSpec.add(include);\n+    }\n+\n+    public List<String> getIncludesXpackSpec() {\n+        return includesXpackSpec;\n+    }\n+\n+    public void copyCoreTests(boolean copyTests) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MDM3NA=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDU0MDMyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowNzowNlrOFn458Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzowNjo1M1rOFpByAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MTEyMQ==", "bodyText": "I'm wondering if everywhere we see REST we should actually use YAML. If you are not using are YAML testing framework, is anything of this stuff useful? That is, for the Java-based REST tests, do we need any of this stuff? If not, let's be more specific since we already overload the phrase \"rest tests\" to an enormous degree, let's be as specific as possible with naming conventions here.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377371121", "createdAt": "2020-02-10T23:07:06Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NjI0MA==", "bodyText": "I ended up with two different extensions, copyRestApiSpecs and copyYamlTests. I am abit adverse to referring to the RestApiSpec with YAML, since they are actually defined in JSON, and have purposes outside of the YAML RestTests. But I agree rest tests are overloaded and am flexible on the naming.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378456240", "createdAt": "2020-02-12T19:12:10Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MTEyMQ=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyMTQ5MA==", "bodyText": "I am abit adverse to referring to the RestApiSpec with YAML, since they are actually defined in JSON, and have purposes outside of the YAML RestTests.\n\nWhat else to we expect build consumers to need with these spec outside the scope of YAML testing? Are there instances of projects consuming rest specs but not doing YAML testing?", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378521490", "createdAt": "2020-02-12T21:26:13Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MTEyMQ=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NTEyMA==", "bodyText": "All of the client's (except HLRC) use the spec to drive code generation or language specific testing, however not sure if they integrate with Gradle. The HLRC tests does some validation outside of the RestTests framework, and docs also use them for testing (but in a slightly different way). There could also be additional future usages of the spec outside the testing framework.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378565120", "createdAt": "2020-02-12T23:06:53Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MTEyMQ=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDU0NTI0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowOTowOVrOFn481w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowODowN1rOFo7AIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MTg2Mw==", "bodyText": "I think this may go without saying after your comment about lazy properties, but with your new direction instead we would always create the copy tasks, they would simply be skipped in cases where we didn't configure any includes. In this case Gradle would report the task as NO-SOURCE I believe, indicating that task was scheduled for execution, but didn't have any work to perform.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377371863", "createdAt": "2020-02-10T23:09:09Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NDA0OA==", "bodyText": "The latest update to the PR should address this.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378454048", "createdAt": "2020-02-12T19:08:07Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MTg2Mw=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDU0ODU3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxMDo0NFrOFn4_BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowOToxOVrOFo7Cpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MjQyMQ==", "bodyText": "Please use getTasks.register() instead of create() so we can avoid creating these tasks if they aren't to be executed.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377372421", "createdAt": "2020-02-10T23:10:44Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {\n+                    Configuration coreTestConfig = project.getConfigurations().create(\"copyRestSpecCoreTests\");\n+                    Dependency coreTestDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCoreTests\"));\n+                    logger.info(\"Rest specs tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, coreTestConfig, coreTestDep, extension.getIncludesCoreTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                if (extension.shouldCopyXpackTests()) {\n+                    Configuration xpackSpecTestsConfig = project.getConfigurations().create(\"copyRestSpecXpackTests\");\n+                    Dependency xpackTestsDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpackTests\"));\n+                    logger.info(\"Rest specs x-pack tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, xpackSpecTestsConfig, xpackTestsDep, extension.getIncludesXpackTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                // copy specs\n+                if (projectHasRestTests(project) || hasCopiedTests || extension.shouldAlwaysCopySpec()) {\n+                    Configuration coreSpecConfig = project.getConfigurations().create(\"restSpec\"); // name chosen for passivity\n+                    Dependency coreSpecDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCore\"));\n+\n+                    if (BuildParams.isInternal()) {\n+                        // source the specs from this project - this is the path for Elasticsearch builds\n+                        if (project.getPath().startsWith(\":x-pack\")) {\n+                            Configuration xpackSpecConfig = project.getConfigurations().create(\"copyRestSpecXpack\");\n+                            Dependency xpackSpecDep = project.getDependencies()\n+                                .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpack\"));\n+                            logger.info(\"X-pack rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                            createCopyTask(project, xpackSpecConfig, xpackSpecDep, extension.getIncludesXpackSpec(), apiDir, false);\n+                        }\n+\n+                        logger.info(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                        createCopyTask(project, coreSpecConfig, coreSpecDep, extension.getIncludesCoreSpec(), apiDir, false);\n+\n+                    } else {\n+                        // source the specs from the published jar - this is the path plugin developers\n+                        logger.info(\n+                            \"Rest specs for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                            project.getPath(),\n+                            VersionProperties.getElasticsearch()\n+                        );\n+                        Dependency coreSpecFromJarDep = project.getDependencies()\n+                            .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+\n+                        createCopyTask(project, coreSpecConfig, coreSpecFromJarDep, extension.getIncludesCoreSpec(), \"\", true);\n+                    }\n+                } else {\n+                    logger.info(\"Rest specs will be ignored for project [{}] since there are no REST tests\", project.getPath());\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error configuring the rest-api-spec-for-testing plugin. This is likely a bug.\", e);\n+            }\n+        });\n+    }\n+\n+    private void createCopyTask(Project project, Configuration config, Dependency dep, List<String> includes, String into, boolean isJar) {\n+        project.getDependencies().add(config.getName(), dep);\n+        Copy copyTask = project.getTasks().create(config.getName() + \"Task\", Copy.class, copy -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NDY5NQ==", "bodyText": "done, and thanks", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378454695", "createdAt": "2020-02-12T19:09:19Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {\n+                    Configuration coreTestConfig = project.getConfigurations().create(\"copyRestSpecCoreTests\");\n+                    Dependency coreTestDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCoreTests\"));\n+                    logger.info(\"Rest specs tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, coreTestConfig, coreTestDep, extension.getIncludesCoreTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                if (extension.shouldCopyXpackTests()) {\n+                    Configuration xpackSpecTestsConfig = project.getConfigurations().create(\"copyRestSpecXpackTests\");\n+                    Dependency xpackTestsDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpackTests\"));\n+                    logger.info(\"Rest specs x-pack tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, xpackSpecTestsConfig, xpackTestsDep, extension.getIncludesXpackTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                // copy specs\n+                if (projectHasRestTests(project) || hasCopiedTests || extension.shouldAlwaysCopySpec()) {\n+                    Configuration coreSpecConfig = project.getConfigurations().create(\"restSpec\"); // name chosen for passivity\n+                    Dependency coreSpecDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCore\"));\n+\n+                    if (BuildParams.isInternal()) {\n+                        // source the specs from this project - this is the path for Elasticsearch builds\n+                        if (project.getPath().startsWith(\":x-pack\")) {\n+                            Configuration xpackSpecConfig = project.getConfigurations().create(\"copyRestSpecXpack\");\n+                            Dependency xpackSpecDep = project.getDependencies()\n+                                .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpack\"));\n+                            logger.info(\"X-pack rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                            createCopyTask(project, xpackSpecConfig, xpackSpecDep, extension.getIncludesXpackSpec(), apiDir, false);\n+                        }\n+\n+                        logger.info(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                        createCopyTask(project, coreSpecConfig, coreSpecDep, extension.getIncludesCoreSpec(), apiDir, false);\n+\n+                    } else {\n+                        // source the specs from the published jar - this is the path plugin developers\n+                        logger.info(\n+                            \"Rest specs for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                            project.getPath(),\n+                            VersionProperties.getElasticsearch()\n+                        );\n+                        Dependency coreSpecFromJarDep = project.getDependencies()\n+                            .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+\n+                        createCopyTask(project, coreSpecConfig, coreSpecFromJarDep, extension.getIncludesCoreSpec(), \"\", true);\n+                    }\n+                } else {\n+                    logger.info(\"Rest specs will be ignored for project [{}] since there are no REST tests\", project.getPath());\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error configuring the rest-api-spec-for-testing plugin. This is likely a bug.\", e);\n+            }\n+        });\n+    }\n+\n+    private void createCopyTask(Project project, Configuration config, Dependency dep, List<String> includes, String into, boolean isJar) {\n+        project.getDependencies().add(config.getName(), dep);\n+        Copy copyTask = project.getTasks().create(config.getName() + \"Task\", Copy.class, copy -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MjQyMQ=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDU1MTAyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxMTo1MFrOFn5AYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowODo1NVrOFo7Bww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3Mjc3MQ==", "bodyText": "We need to wrap any calls to Configuration.getSingleFile() in some kind of deferrable, such as Callable otherwise we'll trigger the configuration to be resolved during configuration time, which in the case of an external dependency means downloading the JAR.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377372771", "createdAt": "2020-02-10T23:11:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {\n+                    Configuration coreTestConfig = project.getConfigurations().create(\"copyRestSpecCoreTests\");\n+                    Dependency coreTestDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCoreTests\"));\n+                    logger.info(\"Rest specs tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, coreTestConfig, coreTestDep, extension.getIncludesCoreTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                if (extension.shouldCopyXpackTests()) {\n+                    Configuration xpackSpecTestsConfig = project.getConfigurations().create(\"copyRestSpecXpackTests\");\n+                    Dependency xpackTestsDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpackTests\"));\n+                    logger.info(\"Rest specs x-pack tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, xpackSpecTestsConfig, xpackTestsDep, extension.getIncludesXpackTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                // copy specs\n+                if (projectHasRestTests(project) || hasCopiedTests || extension.shouldAlwaysCopySpec()) {\n+                    Configuration coreSpecConfig = project.getConfigurations().create(\"restSpec\"); // name chosen for passivity\n+                    Dependency coreSpecDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCore\"));\n+\n+                    if (BuildParams.isInternal()) {\n+                        // source the specs from this project - this is the path for Elasticsearch builds\n+                        if (project.getPath().startsWith(\":x-pack\")) {\n+                            Configuration xpackSpecConfig = project.getConfigurations().create(\"copyRestSpecXpack\");\n+                            Dependency xpackSpecDep = project.getDependencies()\n+                                .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpack\"));\n+                            logger.info(\"X-pack rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                            createCopyTask(project, xpackSpecConfig, xpackSpecDep, extension.getIncludesXpackSpec(), apiDir, false);\n+                        }\n+\n+                        logger.info(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                        createCopyTask(project, coreSpecConfig, coreSpecDep, extension.getIncludesCoreSpec(), apiDir, false);\n+\n+                    } else {\n+                        // source the specs from the published jar - this is the path plugin developers\n+                        logger.info(\n+                            \"Rest specs for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                            project.getPath(),\n+                            VersionProperties.getElasticsearch()\n+                        );\n+                        Dependency coreSpecFromJarDep = project.getDependencies()\n+                            .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+\n+                        createCopyTask(project, coreSpecConfig, coreSpecFromJarDep, extension.getIncludesCoreSpec(), \"\", true);\n+                    }\n+                } else {\n+                    logger.info(\"Rest specs will be ignored for project [{}] since there are no REST tests\", project.getPath());\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error configuring the rest-api-spec-for-testing plugin. This is likely a bug.\", e);\n+            }\n+        });\n+    }\n+\n+    private void createCopyTask(Project project, Configuration config, Dependency dep, List<String> includes, String into, boolean isJar) {\n+        project.getDependencies().add(config.getName(), dep);\n+        Copy copyTask = project.getTasks().create(config.getName() + \"Task\", Copy.class, copy -> {\n+            copy.from(isJar ? project.zipTree(config.getSingleFile()) : config.getSingleFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NDQ2Nw==", "bodyText": "Calling getSingleFile() is now part of the task execution.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378454467", "createdAt": "2020-02-12T19:08:55Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {\n+                    Configuration coreTestConfig = project.getConfigurations().create(\"copyRestSpecCoreTests\");\n+                    Dependency coreTestDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCoreTests\"));\n+                    logger.info(\"Rest specs tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, coreTestConfig, coreTestDep, extension.getIncludesCoreTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                if (extension.shouldCopyXpackTests()) {\n+                    Configuration xpackSpecTestsConfig = project.getConfigurations().create(\"copyRestSpecXpackTests\");\n+                    Dependency xpackTestsDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpackTests\"));\n+                    logger.info(\"Rest specs x-pack tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, xpackSpecTestsConfig, xpackTestsDep, extension.getIncludesXpackTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                // copy specs\n+                if (projectHasRestTests(project) || hasCopiedTests || extension.shouldAlwaysCopySpec()) {\n+                    Configuration coreSpecConfig = project.getConfigurations().create(\"restSpec\"); // name chosen for passivity\n+                    Dependency coreSpecDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCore\"));\n+\n+                    if (BuildParams.isInternal()) {\n+                        // source the specs from this project - this is the path for Elasticsearch builds\n+                        if (project.getPath().startsWith(\":x-pack\")) {\n+                            Configuration xpackSpecConfig = project.getConfigurations().create(\"copyRestSpecXpack\");\n+                            Dependency xpackSpecDep = project.getDependencies()\n+                                .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpack\"));\n+                            logger.info(\"X-pack rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                            createCopyTask(project, xpackSpecConfig, xpackSpecDep, extension.getIncludesXpackSpec(), apiDir, false);\n+                        }\n+\n+                        logger.info(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                        createCopyTask(project, coreSpecConfig, coreSpecDep, extension.getIncludesCoreSpec(), apiDir, false);\n+\n+                    } else {\n+                        // source the specs from the published jar - this is the path plugin developers\n+                        logger.info(\n+                            \"Rest specs for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                            project.getPath(),\n+                            VersionProperties.getElasticsearch()\n+                        );\n+                        Dependency coreSpecFromJarDep = project.getDependencies()\n+                            .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+\n+                        createCopyTask(project, coreSpecConfig, coreSpecFromJarDep, extension.getIncludesCoreSpec(), \"\", true);\n+                    }\n+                } else {\n+                    logger.info(\"Rest specs will be ignored for project [{}] since there are no REST tests\", project.getPath());\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error configuring the rest-api-spec-for-testing plugin. This is likely a bug.\", e);\n+            }\n+        });\n+    }\n+\n+    private void createCopyTask(Project project, Configuration config, Dependency dep, List<String> includes, String into, boolean isJar) {\n+        project.getDependencies().add(config.getName(), dep);\n+        Copy copyTask = project.getTasks().create(config.getName() + \"Task\", Copy.class, copy -> {\n+            copy.from(isJar ? project.zipTree(config.getSingleFile()) : config.getSingleFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3Mjc3MQ=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDU1NTI2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxMzo0MFrOFn5C9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowOTowNlrOFo7CKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MzQzMQ==", "bodyText": "Should be unnecessary since false is the default behavior here.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r377373431", "createdAt": "2020-02-10T23:13:40Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {\n+                    Configuration coreTestConfig = project.getConfigurations().create(\"copyRestSpecCoreTests\");\n+                    Dependency coreTestDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCoreTests\"));\n+                    logger.info(\"Rest specs tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, coreTestConfig, coreTestDep, extension.getIncludesCoreTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                if (extension.shouldCopyXpackTests()) {\n+                    Configuration xpackSpecTestsConfig = project.getConfigurations().create(\"copyRestSpecXpackTests\");\n+                    Dependency xpackTestsDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpackTests\"));\n+                    logger.info(\"Rest specs x-pack tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, xpackSpecTestsConfig, xpackTestsDep, extension.getIncludesXpackTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                // copy specs\n+                if (projectHasRestTests(project) || hasCopiedTests || extension.shouldAlwaysCopySpec()) {\n+                    Configuration coreSpecConfig = project.getConfigurations().create(\"restSpec\"); // name chosen for passivity\n+                    Dependency coreSpecDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCore\"));\n+\n+                    if (BuildParams.isInternal()) {\n+                        // source the specs from this project - this is the path for Elasticsearch builds\n+                        if (project.getPath().startsWith(\":x-pack\")) {\n+                            Configuration xpackSpecConfig = project.getConfigurations().create(\"copyRestSpecXpack\");\n+                            Dependency xpackSpecDep = project.getDependencies()\n+                                .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpack\"));\n+                            logger.info(\"X-pack rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                            createCopyTask(project, xpackSpecConfig, xpackSpecDep, extension.getIncludesXpackSpec(), apiDir, false);\n+                        }\n+\n+                        logger.info(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                        createCopyTask(project, coreSpecConfig, coreSpecDep, extension.getIncludesCoreSpec(), apiDir, false);\n+\n+                    } else {\n+                        // source the specs from the published jar - this is the path plugin developers\n+                        logger.info(\n+                            \"Rest specs for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                            project.getPath(),\n+                            VersionProperties.getElasticsearch()\n+                        );\n+                        Dependency coreSpecFromJarDep = project.getDependencies()\n+                            .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+\n+                        createCopyTask(project, coreSpecConfig, coreSpecFromJarDep, extension.getIncludesCoreSpec(), \"\", true);\n+                    }\n+                } else {\n+                    logger.info(\"Rest specs will be ignored for project [{}] since there are no REST tests\", project.getPath());\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error configuring the rest-api-spec-for-testing plugin. This is likely a bug.\", e);\n+            }\n+        });\n+    }\n+\n+    private void createCopyTask(Project project, Configuration config, Dependency dep, List<String> includes, String into, boolean isJar) {\n+        project.getDependencies().add(config.getName(), dep);\n+        Copy copyTask = project.getTasks().create(config.getName() + \"Task\", Copy.class, copy -> {\n+            copy.from(isJar ? project.zipTree(config.getSingleFile()) : config.getSingleFile());\n+            copy.into(new File(getTestSourceSet(project).getOutput().getResourcesDir(), into));\n+            if (includes.isEmpty()) {\n+                copy.include(isJar ? apiDir + \"/**\" : \"*/**\");\n+            } else {\n+                includes.forEach(s -> copy.include(isJar ? apiDir + \"/\" + s + \"*/**\" : s + \"*/**\"));\n+            }\n+            copy.setIncludeEmptyDirs(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NDU2OQ==", "bodyText": "done, and thanks!", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378454569", "createdAt": "2020-02-12T19:09:06Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/RestApiSpecForTestingPlugin.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.SourceSet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+//TODO: change logger.info to logger.debug\n+public class RestApiSpecForTestingPlugin implements Plugin<Project> {\n+\n+    private static final Logger logger = Logging.getLogger(RestApiSpecForTestingPlugin.class);\n+    private static final String EXTENSION_NAME = \"restApiSpec\";\n+    private static final String apiDir = \"rest-api-spec/api\";\n+    private static final String testDir = \"rest-api-spec/test\";\n+\n+    @Override\n+    public void apply(Project project) {\n+\n+        RestApiSpecExtension extension = project.getExtensions().create(EXTENSION_NAME, RestApiSpecExtension.class);\n+        // need to defer to after evaluation to allow the custom extension to be populated\n+        project.afterEvaluate(p -> {\n+            try {\n+                // copy tests\n+                boolean hasCopiedTests = false;\n+                if (extension.shouldCopyCoreTests()) {\n+                    Configuration coreTestConfig = project.getConfigurations().create(\"copyRestSpecCoreTests\");\n+                    Dependency coreTestDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCoreTests\"));\n+                    logger.info(\"Rest specs tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, coreTestConfig, coreTestDep, extension.getIncludesCoreTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                if (extension.shouldCopyXpackTests()) {\n+                    Configuration xpackSpecTestsConfig = project.getConfigurations().create(\"copyRestSpecXpackTests\");\n+                    Dependency xpackTestsDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpackTests\"));\n+                    logger.info(\"Rest specs x-pack tests for project [{}] will be copied to the test resources.\", project.getPath());\n+                    createCopyTask(project, xpackSpecTestsConfig, xpackTestsDep, extension.getIncludesXpackTests(), testDir, false);\n+                    hasCopiedTests = true;\n+                }\n+                // copy specs\n+                if (projectHasRestTests(project) || hasCopiedTests || extension.shouldAlwaysCopySpec()) {\n+                    Configuration coreSpecConfig = project.getConfigurations().create(\"restSpec\"); // name chosen for passivity\n+                    Dependency coreSpecDep = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restSpecCore\"));\n+\n+                    if (BuildParams.isInternal()) {\n+                        // source the specs from this project - this is the path for Elasticsearch builds\n+                        if (project.getPath().startsWith(\":x-pack\")) {\n+                            Configuration xpackSpecConfig = project.getConfigurations().create(\"copyRestSpecXpack\");\n+                            Dependency xpackSpecDep = project.getDependencies()\n+                                .project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restSpecXpack\"));\n+                            logger.info(\"X-pack rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                            createCopyTask(project, xpackSpecConfig, xpackSpecDep, extension.getIncludesXpackSpec(), apiDir, false);\n+                        }\n+\n+                        logger.info(\"Rest specs for project [{}] will be copied to the test resources.\", project.getPath());\n+                        createCopyTask(project, coreSpecConfig, coreSpecDep, extension.getIncludesCoreSpec(), apiDir, false);\n+\n+                    } else {\n+                        // source the specs from the published jar - this is the path plugin developers\n+                        logger.info(\n+                            \"Rest specs for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                            project.getPath(),\n+                            VersionProperties.getElasticsearch()\n+                        );\n+                        Dependency coreSpecFromJarDep = project.getDependencies()\n+                            .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+\n+                        createCopyTask(project, coreSpecConfig, coreSpecFromJarDep, extension.getIncludesCoreSpec(), \"\", true);\n+                    }\n+                } else {\n+                    logger.info(\"Rest specs will be ignored for project [{}] since there are no REST tests\", project.getPath());\n+                    return;\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Error configuring the rest-api-spec-for-testing plugin. This is likely a bug.\", e);\n+            }\n+        });\n+    }\n+\n+    private void createCopyTask(Project project, Configuration config, Dependency dep, List<String> includes, String into, boolean isJar) {\n+        project.getDependencies().add(config.getName(), dep);\n+        Copy copyTask = project.getTasks().create(config.getName() + \"Task\", Copy.class, copy -> {\n+            copy.from(isJar ? project.zipTree(config.getSingleFile()) : config.getSingleFile());\n+            copy.into(new File(getTestSourceSet(project).getOutput().getResourcesDir(), into));\n+            if (includes.isEmpty()) {\n+                copy.include(isJar ? apiDir + \"/**\" : \"*/**\");\n+            } else {\n+                includes.forEach(s -> copy.include(isJar ? apiDir + \"/\" + s + \"*/**\" : s + \"*/**\"));\n+            }\n+            copy.setIncludeEmptyDirs(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3MzQzMQ=="}, "originalCommit": {"oid": "c1ee4ffaf56f82ae7730071967f6f63ac7226199"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTkwNDg3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTozODoyNFrOFo_eRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjozMzoxNFrOFpA-zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyNzMwMw==", "bodyText": "We can't add this dependency for external project as this will cause them to fail. We don't publish xpack specs or tests so we should probably make it that if you try to add them and isInternal == false we throw an error. We can work about separating this so we don't expose internals to external users later.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378527303", "createdAt": "2020-02-12T21:38:24Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s that will copy the artifacts needed for the Rest API spec and YAML tests.\n+ * @see CopyRestApiTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {\n+\n+    private static final String COPY_SPEC_EXTENSION_NAME = \"copyRestApiSpecs\";\n+    private static final String COPY_TEST_EXTENSION_NAME = \"copyYamlTests\";\n+\n+    @Override\n+    public void apply(Project project) {\n+        CopyRestApiExtension copySpecExtension = project.getExtensions().create(COPY_SPEC_EXTENSION_NAME, CopyRestApiExtension.class);\n+        CopyRestApiExtension copyTestExtension = project.getExtensions().create(COPY_TEST_EXTENSION_NAME, CopyRestApiExtension.class);\n+\n+        Provider<CopyRestApiTask> copyRestYamlTestTask = project.getTasks().register(\"copyYamlTestsTask\", CopyRestApiTask.class, task -> {\n+            task.includeCore.set(copyTestExtension.getIncludeCore());\n+            task.includeXpack.set(copyTestExtension.getIncludeXpack());\n+            task.copyTo = \"rest-api-spec/test\";\n+            task.coreConfig = project.getConfigurations().create(\"restTest\");\n+            if (BuildParams.isInternal()) {\n+                Dependency dependency = project.getDependencies().project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restTests\"));\n+                project.getDependencies().add(task.coreConfig.getName(), dependency);\n+            } else {\n+                Dependency dependency = project.getDependencies()\n+                    .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+                project.getDependencies().add(task.coreConfig.getName(), dependency);\n+            }\n+            task.dependsOn(task.coreConfig);\n+\n+            task.xpackConfig = project.getConfigurations().create(\"restXpackTest\");\n+            Dependency dependency = project.getDependencies().project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restXpackTests\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1MjAxNQ==", "bodyText": "Good catch. will hide this behind isInternal (as well as the xpack specs) and throw and error if an attempt is made that can't be fulfilled.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378552015", "createdAt": "2020-02-12T22:33:14Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s that will copy the artifacts needed for the Rest API spec and YAML tests.\n+ * @see CopyRestApiTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {\n+\n+    private static final String COPY_SPEC_EXTENSION_NAME = \"copyRestApiSpecs\";\n+    private static final String COPY_TEST_EXTENSION_NAME = \"copyYamlTests\";\n+\n+    @Override\n+    public void apply(Project project) {\n+        CopyRestApiExtension copySpecExtension = project.getExtensions().create(COPY_SPEC_EXTENSION_NAME, CopyRestApiExtension.class);\n+        CopyRestApiExtension copyTestExtension = project.getExtensions().create(COPY_TEST_EXTENSION_NAME, CopyRestApiExtension.class);\n+\n+        Provider<CopyRestApiTask> copyRestYamlTestTask = project.getTasks().register(\"copyYamlTestsTask\", CopyRestApiTask.class, task -> {\n+            task.includeCore.set(copyTestExtension.getIncludeCore());\n+            task.includeXpack.set(copyTestExtension.getIncludeXpack());\n+            task.copyTo = \"rest-api-spec/test\";\n+            task.coreConfig = project.getConfigurations().create(\"restTest\");\n+            if (BuildParams.isInternal()) {\n+                Dependency dependency = project.getDependencies().project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restTests\"));\n+                project.getDependencies().add(task.coreConfig.getName(), dependency);\n+            } else {\n+                Dependency dependency = project.getDependencies()\n+                    .create(\"org.elasticsearch:rest-api-spec:\" + VersionProperties.getElasticsearch());\n+                project.getDependencies().add(task.coreConfig.getName(), dependency);\n+            }\n+            task.dependsOn(task.coreConfig);\n+\n+            task.xpackConfig = project.getConfigurations().create(\"restXpackTest\");\n+            Dependency dependency = project.getDependencies().project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restXpackTests\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyNzMwMw=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTkzMTg4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo0NzoyOFrOFo_vYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyODowMVrOFpA2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMTY4MQ==", "bodyText": "We should avoid creating two extensions here. For a couple of reasons:\n\nIt's not clear from the model these two are related or \"owned\" by a single plugin. Having a single extension encourages putting this stuff together.\nBecause we are using the same type for this extension, it then means folks can't effectively use extensions.getByType() since there would be ambiguity here.\n\nI suggest we do the following:\n\nRename CopyRestApiExtension to RestResourcesSpec.\nCreate a new RestResourcesExtension with two fields, restApi and restTests.\nRestResourcesExtension should have methods to configure those fields that look like void restApi(Action<? super RestResourcesSpec> spec).\nAdd the single RestResourcesExtension to the project.\n\nWe should then have a DSL looking like this:\nrestResources {\n  restApi {\n    includeXpack 'ilm', 'slm'\n  }\n  restTests {\n    includeXpack 'ilm', 'slm'\n  }\n}", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378531681", "createdAt": "2020-02-12T21:47:28Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s that will copy the artifacts needed for the Rest API spec and YAML tests.\n+ * @see CopyRestApiTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {\n+\n+    private static final String COPY_SPEC_EXTENSION_NAME = \"copyRestApiSpecs\";\n+    private static final String COPY_TEST_EXTENSION_NAME = \"copyYamlTests\";\n+\n+    @Override\n+    public void apply(Project project) {\n+        CopyRestApiExtension copySpecExtension = project.getExtensions().create(COPY_SPEC_EXTENSION_NAME, CopyRestApiExtension.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMjMyMg==", "bodyText": "FYI, i use the term \"rest resources\" here because I think it's the best generic term. Please suggest a better one. I hesitate to use the term \"rest testing\" or similar due to your earlier comment about api specs being used for purposes not necessarily related to testing.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378532322", "createdAt": "2020-02-12T21:48:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s that will copy the artifacts needed for the Rest API spec and YAML tests.\n+ * @see CopyRestApiTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {\n+\n+    private static final String COPY_SPEC_EXTENSION_NAME = \"copyRestApiSpecs\";\n+    private static final String COPY_TEST_EXTENSION_NAME = \"copyYamlTests\";\n+\n+    @Override\n+    public void apply(Project project) {\n+        CopyRestApiExtension copySpecExtension = project.getExtensions().create(COPY_SPEC_EXTENSION_NAME, CopyRestApiExtension.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMTY4MQ=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0OTgwOA==", "bodyText": "I like that, and thanks for the detailed steps!", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378549808", "createdAt": "2020-02-12T22:28:01Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s that will copy the artifacts needed for the Rest API spec and YAML tests.\n+ * @see CopyRestApiTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {\n+\n+    private static final String COPY_SPEC_EXTENSION_NAME = \"copyRestApiSpecs\";\n+    private static final String COPY_TEST_EXTENSION_NAME = \"copyYamlTests\";\n+\n+    @Override\n+    public void apply(Project project) {\n+        CopyRestApiExtension copySpecExtension = project.getExtensions().create(COPY_SPEC_EXTENSION_NAME, CopyRestApiExtension.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMTY4MQ=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk0ODc0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1MzoyNVrOFo_6Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoyMTo1OVrOFpTeBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNDQ0Nw==", "bodyText": "This should live in the plugin not in the task.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378534447", "createdAt": "2020-02-12T21:53:25Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()\n+            || includeCore.get().isEmpty() == false\n+            || includeXpack.get().isEmpty() == false ? fileCollection.getAsFileTree() : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {\n+        return new File(getTestSourceSet().getOutput().getResourcesDir(), copyTo);\n+    }\n+\n+    @TaskAction\n+    void copy() {\n+        Project project = getProject();\n+        if (BuildParams.isInternal()) {\n+            logger.info(\"Rest {} for project [{}] will be copied to the test resources.\", getTestOrSpec(), project.getPath());\n+            project.copy(c -> {\n+                c.from(coreConfig.getSingleFile());\n+                c.into(getOutputDir());\n+                c.include(corePatternSet.getIncludes());\n+            });\n+\n+        } else {\n+            logger.info(\n+                \"Rest {} for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                getTestOrSpec(),\n+                project.getPath(),\n+                VersionProperties.getElasticsearch()\n+            );\n+            project.copy(c -> {\n+                c.from(project.zipTree(coreConfig.getSingleFile()));\n+                c.into(getTestSourceSet().getOutput().getResourcesDir()); // this ends up as the same dir as outputDir\n+                c.include(includeCore.get().stream().map(prefix -> copyTo + \"/\" + prefix + \"*/**\").collect(Collectors.toList()));\n+            });\n+        }\n+        // only include x-pack if explicitly instructed\n+        if (includeXpack.get().isEmpty() == false) {\n+            logger.info(\"X-pack YAML{} for project [{}] will be copied to the test resources.\", getTestOrSpec(), project.getPath());\n+            project.copy(c -> {\n+                c.from(xpackConfig.getSingleFile());\n+                c.into(getOutputDir());\n+                c.include(xpackPatternSet.getIncludes());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Returns true if any files with a .yml extension exist the test resources rest-api-spec/test directory (from source or output dir)\n+     */\n+    private boolean projectHasYamlRestTests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDkxOQ==", "bodyText": "Actually, thinking about this a bit more, I think this needs to stay in the task for a couple reasons:\n\n\nThis method checks against the source dir for tests committed to GH, but also checks the output directory for tests copied over by prior gradle tasks. This is why the spec task depends on the test task.  Since this evaluation is done in the task at execution time, I believe this is a reliable way to ensure that any source or copied tests exist.\n\n\nWe can not actually skip the creation of the task based on the output of this. The spec copy task needs to execute if the project has no rest tests, but also you requested to include some tests, and the IIUC the extension property isn't guaranteed to be resolved at configuration time. e.g. since we can not read the property at configuration time we will always need to create the task in case there are no tests at all, but you need the spec (docs and HLRC are examples of this).", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378854919", "createdAt": "2020-02-13T13:21:59Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()\n+            || includeCore.get().isEmpty() == false\n+            || includeXpack.get().isEmpty() == false ? fileCollection.getAsFileTree() : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {\n+        return new File(getTestSourceSet().getOutput().getResourcesDir(), copyTo);\n+    }\n+\n+    @TaskAction\n+    void copy() {\n+        Project project = getProject();\n+        if (BuildParams.isInternal()) {\n+            logger.info(\"Rest {} for project [{}] will be copied to the test resources.\", getTestOrSpec(), project.getPath());\n+            project.copy(c -> {\n+                c.from(coreConfig.getSingleFile());\n+                c.into(getOutputDir());\n+                c.include(corePatternSet.getIncludes());\n+            });\n+\n+        } else {\n+            logger.info(\n+                \"Rest {} for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                getTestOrSpec(),\n+                project.getPath(),\n+                VersionProperties.getElasticsearch()\n+            );\n+            project.copy(c -> {\n+                c.from(project.zipTree(coreConfig.getSingleFile()));\n+                c.into(getTestSourceSet().getOutput().getResourcesDir()); // this ends up as the same dir as outputDir\n+                c.include(includeCore.get().stream().map(prefix -> copyTo + \"/\" + prefix + \"*/**\").collect(Collectors.toList()));\n+            });\n+        }\n+        // only include x-pack if explicitly instructed\n+        if (includeXpack.get().isEmpty() == false) {\n+            logger.info(\"X-pack YAML{} for project [{}] will be copied to the test resources.\", getTestOrSpec(), project.getPath());\n+            project.copy(c -> {\n+                c.from(xpackConfig.getSingleFile());\n+                c.into(getOutputDir());\n+                c.include(xpackPatternSet.getIncludes());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Returns true if any files with a .yml extension exist the test resources rest-api-spec/test directory (from source or output dir)\n+     */\n+    private boolean projectHasYamlRestTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNDQ0Nw=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk0OTgzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1Mzo0NFrOFo_60g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1Mzo0NFrOFo_60g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNDYxMA==", "bodyText": "Let's not trigger behavior based on loose conventions. Let's make this an explicit thing.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378534610", "createdAt": "2020-02-12T21:53:44Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()\n+            || includeCore.get().isEmpty() == false\n+            || includeXpack.get().isEmpty() == false ? fileCollection.getAsFileTree() : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {\n+        return new File(getTestSourceSet().getOutput().getResourcesDir(), copyTo);\n+    }\n+\n+    @TaskAction\n+    void copy() {\n+        Project project = getProject();\n+        if (BuildParams.isInternal()) {\n+            logger.info(\"Rest {} for project [{}] will be copied to the test resources.\", getTestOrSpec(), project.getPath());\n+            project.copy(c -> {\n+                c.from(coreConfig.getSingleFile());\n+                c.into(getOutputDir());\n+                c.include(corePatternSet.getIncludes());\n+            });\n+\n+        } else {\n+            logger.info(\n+                \"Rest {} for project [{}] will be copied to the test resources from the published jar (version: [{}]).\",\n+                getTestOrSpec(),\n+                project.getPath(),\n+                VersionProperties.getElasticsearch()\n+            );\n+            project.copy(c -> {\n+                c.from(project.zipTree(coreConfig.getSingleFile()));\n+                c.into(getTestSourceSet().getOutput().getResourcesDir()); // this ends up as the same dir as outputDir\n+                c.include(includeCore.get().stream().map(prefix -> copyTo + \"/\" + prefix + \"*/**\").collect(Collectors.toList()));\n+            });\n+        }\n+        // only include x-pack if explicitly instructed\n+        if (includeXpack.get().isEmpty() == false) {\n+            logger.info(\"X-pack YAML{} for project [{}] will be copied to the test resources.\", getTestOrSpec(), project.getPath());\n+            project.copy(c -> {\n+                c.from(xpackConfig.getSingleFile());\n+                c.into(getOutputDir());\n+                c.include(xpackPatternSet.getIncludes());\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Returns true if any files with a .yml extension exist the test resources rest-api-spec/test directory (from source or output dir)\n+     */\n+    private boolean projectHasYamlRestTests() {\n+        File testSourceResourceDir = getTestSourceResourceDir();\n+        File testOutputResourceDir = getTestOutputResourceDir(); // check output for cases where tests are copied programmatically\n+\n+        if (testSourceResourceDir == null && testOutputResourceDir == null) {\n+            return false;\n+        }\n+        try {\n+            if (testSourceResourceDir != null) {\n+                return new File(testSourceResourceDir, \"rest-api-spec/test\").exists() == false\n+                    || Files.walk(testSourceResourceDir.toPath().resolve(\"rest-api-spec/test\"))\n+                        .anyMatch(p -> p.getFileName().toString().endsWith(\"yml\"));\n+            }\n+            if (testOutputResourceDir != null) {\n+                return new File(testOutputResourceDir, \"rest-api-spec/test\").exists() == false\n+                    || Files.walk(testOutputResourceDir.toPath().resolve(\"rest-api-spec/test\"))\n+                        .anyMatch(p -> p.getFileName().toString().endsWith(\"yml\"));\n+            }\n+        } catch (IOException e) {\n+            throw new IllegalStateException(String.format(\"Error determining if this project [%s] has rest tests.\", getProject()), e);\n+        }\n+        return false;\n+    }\n+\n+    private File getTestSourceResourceDir() {\n+        SourceSet testSources = getTestSourceSet();\n+        if (testSources == null) {\n+            return null;\n+        }\n+        Set<File> resourceDir = testSources.getResources()\n+            .getSrcDirs()\n+            .stream()\n+            .filter(f -> f.isDirectory() && f.getParentFile().getName().equals(\"test\") && f.getName().equals(\"resources\"))\n+            .collect(Collectors.toSet());\n+        assert resourceDir.size() <= 1;\n+        if (resourceDir.size() == 0) {\n+            return null;\n+        }\n+        return resourceDir.iterator().next();\n+    }\n+\n+    private File getTestOutputResourceDir() {\n+        SourceSet testSources = getTestSourceSet();\n+        if (testSources == null) {\n+            return null;\n+        }\n+        return testSources.getOutput().getResourcesDir();\n+    }\n+\n+    private SourceSet getTestSourceSet() {\n+        return Boilerplate.getJavaSourceSets(getProject()).findByName(\"test\");\n+    }\n+\n+    private String getTestOrSpec() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk1NDgyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1NToyNFrOFo_93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoxMjowMlrOFpVNzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNTM4OQ==", "bodyText": "I don't know how many times I've looked at this I still have trouble following this. Why the different behavior based on whether we are copying specs or tests? Also, as mentioned below, conditioning on whether the project \"has yaml tests\" should live in the plugin, not the task implementation. If this stuff is n/a for projects w/o yaml tests, then we can ditch creating this task altogether in the plugin itself.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378535389", "createdAt": "2020-02-12T21:55:24Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NTkzMQ==", "bodyText": "The only difference in behavior is if this is copying rest specs it should take factor in if the project has rest tests, else for tests it relies only the existence of the includes. Will move the has yaml tests check to the plugin and avoid the check here.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378545931", "createdAt": "2020-02-12T22:18:57Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNTM4OQ=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxOTU5Ng==", "bodyText": "So in the case that this is the copy specs task, and my project defines yaml tests, but no explicit incudes, what gets copied?", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378619596", "createdAt": "2020-02-13T02:23:03Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNTM4OQ=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MDc0MA==", "bodyText": "the core specs will get copied.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378850740", "createdAt": "2020-02-13T13:13:29Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNTM4OQ=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4MzUzMg==", "bodyText": "I found another case where I need to change behavior based on spec or tests.  Rather then some conditional logic from 1 task, I will split this task up into 2 tasks.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r378883532", "createdAt": "2020-02-13T14:12:02Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * <p>Copies the files needed for the Rest YAML tests to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * </p>\n+ * <p>This task supports copying either the Rest YAML tests (.yml), or the Rest API specification (.json).</p>\n+ * <br>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task will automatically copy the Rest API specification\n+ * if there are any Rest YAML tests present (either in source, or output) or if `includeCore` or `includeXpack` has been explicitly\n+ * declared through the 'copyRestApiSpecs' extension. <br>\n+ * This task supports copying only a subset of the Rest API specification through the use of the custom extension.<br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeXpack 'enrich'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack specs that start with enrich*. The core API specs will also be copied iff the project also has\n+ * Rest YAML tests. To help optimize the build cache, it is recommended to explicitly declare which specs your project depends on.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyRestApiSpecs {\n+ *   includeCore 'index', 'cat'\n+ *   includeXpack 'enrich'\n+ * }\n+ *  </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied this task can copy the Rest YAML tests iff explicitly configured with\n+ * `includeCore` or `includeXpack` through the `copyYamlTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * copyYamlTests {\n+ *   includeXpack 'graph'\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph.\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+    String copyTo;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        return \"spec\".equals(getTestOrSpec()) && projectHasYamlRestTests()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNTM4OQ=="}, "originalCommit": {"oid": "0c1d16403a3c6cb1e743f59e9b4d07fdb3facd58"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODYzMDE5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDozODo1MFrOFuUZRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDozODo1MFrOFuUZRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMjk2Ng==", "bodyText": "Let's avoid reassigning variables like this. It's a bit difficult to follow and opens up opportunity for nasty bugs vs using explicit variables.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384112966", "createdAt": "2020-02-25T20:38:50Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s and {@link CopyRestTestsTask} that copies the artifacts needed for the Rest API\n+ * spec and YAML based rest tests.\n+ * </p>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied the {@link CopyRestApiTask} will automatically copy the core Rest API specification\n+ * if there are any Rest YAML tests present in source, or copied from {@link CopyRestTestsTask} output. X-pack specs must be explicitly\n+ * declared to be copied.\n+ * <br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * restResources {\n+ *   restApi {\n+ *     includeXpack 'enrich'\n+ *   }\n+ * }\n+ * </pre>\n+ * Will copy the entire core Rest API specifications (assuming the project has tests) and any of the the X-pack specs starting with enrich*.\n+ * It is recommended (but not required) to also explicitly declare which core specs your project depends on to help optimize the caching\n+ * behavior.\n+ * <i>For example:</i>\n+ * <pre>\n+ * restResources {\n+ *   restApi {\n+ *     includeCore 'index', 'cat'\n+ *     includeXpack 'enrich'\n+ *   }\n+ * }\n+ * </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied the {@link CopyRestTestsTask} will copy the Rest YAML tests if explicitly\n+ * configured with `includeCore` or `includeXpack` through the `restResources.restTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * restResources {\n+ *  restApi {\n+ *      includeXpack 'graph'\n+ *   }\n+ *   restTests {\n+ *     includeXpack 'graph'\n+ *   }\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph, and will copy the X-pack graph specification, as well as the full core\n+ * Rest API specification.\n+ *\n+ * @see CopyRestApiTask\n+ * @see CopyRestTestsTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {\n+\n+    private static final String EXTENSION_NAME = \"restResources\";\n+\n+    @Override\n+    public void apply(Project project) {\n+        RestResourcesExtension extension = project.getExtensions().create(EXTENSION_NAME, RestResourcesExtension.class);\n+\n+        Provider<CopyRestTestsTask> copyRestYamlTestTask = project.getTasks()\n+            .register(\"copyYamlTestsTask\", CopyRestTestsTask.class, task -> {\n+                task.includeCore.set(extension.restTests.getIncludeCore());\n+                task.includeXpack.set(extension.restTests.getIncludeXpack());\n+                task.coreConfig = project.getConfigurations().create(\"restTest\");\n+                if (BuildParams.isInternal()) {\n+                    Dependency dependency = project.getDependencies()\n+                        .project(Map.of(\"path\", \":rest-api-spec\", \"configuration\", \"restTests\"));\n+                    project.getDependencies().add(task.coreConfig.getName(), dependency);\n+\n+                    task.xpackConfig = project.getConfigurations().create(\"restXpackTest\");\n+                    dependency = project.getDependencies().project(Map.of(\"path\", \":x-pack:plugin\", \"configuration\", \"restXpackTests\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODYzMjY0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDozOTo0NVrOFuUa3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDozOTo0NVrOFuUa3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMzM3Mw==", "bodyText": "Let's name this the RestResourcesPlugin to match the DSL.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384113373", "createdAt": "2020-02-25T20:39:45Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiPlugin.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Dependency;\n+import org.gradle.api.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * <p>\n+ * Gradle plugin to help configure {@link CopyRestApiTask}'s and {@link CopyRestTestsTask} that copies the artifacts needed for the Rest API\n+ * spec and YAML based rest tests.\n+ * </p>\n+ * <strong>Rest API specification:</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied the {@link CopyRestApiTask} will automatically copy the core Rest API specification\n+ * if there are any Rest YAML tests present in source, or copied from {@link CopyRestTestsTask} output. X-pack specs must be explicitly\n+ * declared to be copied.\n+ * <br>\n+ * <i>For example:</i>\n+ * <pre>\n+ * restResources {\n+ *   restApi {\n+ *     includeXpack 'enrich'\n+ *   }\n+ * }\n+ * </pre>\n+ * Will copy the entire core Rest API specifications (assuming the project has tests) and any of the the X-pack specs starting with enrich*.\n+ * It is recommended (but not required) to also explicitly declare which core specs your project depends on to help optimize the caching\n+ * behavior.\n+ * <i>For example:</i>\n+ * <pre>\n+ * restResources {\n+ *   restApi {\n+ *     includeCore 'index', 'cat'\n+ *     includeXpack 'enrich'\n+ *   }\n+ * }\n+ * </pre>\n+ * <br>\n+ * <strong>Rest YAML tests :</strong> <br>\n+ * When the {@link CopyRestApiPlugin} has been applied the {@link CopyRestTestsTask} will copy the Rest YAML tests if explicitly\n+ * configured with `includeCore` or `includeXpack` through the `restResources.restTests` extension.\n+ * <i>For example:</i>\n+ * <pre>\n+ * restResources {\n+ *  restApi {\n+ *      includeXpack 'graph'\n+ *   }\n+ *   restTests {\n+ *     includeXpack 'graph'\n+ *   }\n+ * }\n+ * </pre>\n+ * Will copy any of the the x-pack tests that start with graph, and will copy the X-pack graph specification, as well as the full core\n+ * Rest API specification.\n+ *\n+ * @see CopyRestApiTask\n+ * @see CopyRestTestsTask\n+ */\n+public class CopyRestApiPlugin implements Plugin<Project> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY0MjkwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0MzoxMlrOFuUhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0MzoxMlrOFuUhBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNDk0OQ==", "bodyText": "This is unnecessary. Just use the getLogger() method provided by AbstractTask. Same applies for the copy tests task.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384114949", "createdAt": "2020-02-25T20:43:12Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Copies the files needed for the Rest YAML specs to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * @see CopyRestApiPlugin\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY0ODg1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NToxN1rOFuUkng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyMTo0N1rOFuXaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTg3MA==", "bodyText": "FYI, we now have three (3) tasks all using the same output directory which is going to cause issues with incremental build. I'll address this in a subsequent PR since it's a bit involved to register additional sourceset output directories but it's something to be aware of, by convention multiple tasks dumping their output in the same place is bad practice.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384115870", "createdAt": "2020-02-25T20:45:17Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Copies the files needed for the Rest YAML specs to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * @see CopyRestApiPlugin\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    private static final String COPY_TO = \"rest-api-spec/api\";\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        // if project has rest tests or the includes are explicitly configured execute the task, else NO-SOURCE due to the null input\n+        return projectHasYamlRestTests() || includeCore.get().isEmpty() == false || includeXpack.get().isEmpty() == false\n+            ? fileCollection.getAsFileTree()\n+            : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0ODAxNg==", "bodyText": "Which 3 are you referring to ?\nI think this is the only task that is writing to <outputResourcDir>/rest-api-spec/api, the other new task writes to <outputResourcDir>/rest-api-spec/test and the old tasks have been removed. Inside this task, there are 3 project.copy , is that what you mean ?", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384148016", "createdAt": "2020-02-25T21:51:25Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Copies the files needed for the Rest YAML specs to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * @see CopyRestApiPlugin\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    private static final String COPY_TO = \"rest-api-spec/api\";\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        // if project has rest tests or the includes are explicitly configured execute the task, else NO-SOURCE due to the null input\n+        return projectHasYamlRestTests() || includeCore.get().isEmpty() == false || includeXpack.get().isEmpty() == false\n+            ? fileCollection.getAsFileTree()\n+            : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTg3MA=="}, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1NDcwMg==", "bodyText": "Primarily the processTestResources task. Since it's output is the root resources directory, both these tasks put stuff in there, which is going to confusing up-to-date checking for that task.", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384154702", "createdAt": "2020-02-25T22:04:43Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Copies the files needed for the Rest YAML specs to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * @see CopyRestApiPlugin\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    private static final String COPY_TO = \"rest-api-spec/api\";\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        // if project has rest tests or the includes are explicitly configured execute the task, else NO-SOURCE due to the null input\n+        return projectHasYamlRestTests() || includeCore.get().isEmpty() == false || includeXpack.get().isEmpty() == false\n+            ? fileCollection.getAsFileTree()\n+            : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTg3MA=="}, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MjM2OA==", "bodyText": "Ah, I see thanks for the explanation and the follow up PR (please CC me on that change).", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384162368", "createdAt": "2020-02-25T22:21:47Z", "author": {"login": "jakelandis"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Copies the files needed for the Rest YAML specs to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * @see CopyRestApiPlugin\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    private static final String COPY_TO = \"rest-api-spec/api\";\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        // if project has rest tests or the includes are explicitly configured execute the task, else NO-SOURCE due to the null input\n+        return projectHasYamlRestTests() || includeCore.get().isEmpty() == false || includeXpack.get().isEmpty() == false\n+            ? fileCollection.getAsFileTree()\n+            : null;\n+    }\n+\n+    @OutputDirectory\n+    public File getOutputDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTg3MA=="}, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1MTc5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoxNVrOFuUmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoxNVrOFuUmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjMzNw==", "bodyText": "This comment is very helpful \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/52114#discussion_r384116337", "createdAt": "2020-02-25T20:46:15Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/test/rest/CopyRestApiTask.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.gradle.test.rest;\n+\n+import org.elasticsearch.gradle.VersionProperties;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.tool.Boilerplate;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ConfigurableFileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.logging.Logger;\n+import org.gradle.api.logging.Logging;\n+import org.gradle.api.provider.ListProperty;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.api.tasks.util.PatternFilterable;\n+import org.gradle.api.tasks.util.PatternSet;\n+import org.gradle.internal.Factory;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Copies the files needed for the Rest YAML specs to the current projects test resources output directory.\n+ * This is intended to be be used from {@link CopyRestApiPlugin} since the plugin wires up the needed\n+ * configurations and custom extensions.\n+ * @see CopyRestApiPlugin\n+ */\n+public class CopyRestApiTask extends DefaultTask {\n+    private static final Logger logger = Logging.getLogger(CopyRestApiTask.class);\n+    private static final String COPY_TO = \"rest-api-spec/api\";\n+    final ListProperty<String> includeCore = getProject().getObjects().listProperty(String.class);\n+    final ListProperty<String> includeXpack = getProject().getObjects().listProperty(String.class);\n+\n+    Configuration coreConfig;\n+    Configuration xpackConfig;\n+\n+    private final PatternFilterable corePatternSet;\n+    private final PatternFilterable xpackPatternSet;\n+\n+    public CopyRestApiTask() {\n+        corePatternSet = getPatternSetFactory().create();\n+        xpackPatternSet = getPatternSetFactory().create();\n+    }\n+\n+    @Inject\n+    protected Factory<PatternSet> getPatternSetFactory() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeCore() {\n+        return includeCore;\n+    }\n+\n+    @Input\n+    public ListProperty<String> getIncludeXpack() {\n+        return includeXpack;\n+    }\n+\n+    @SkipWhenEmpty\n+    @InputFiles\n+    public FileTree getInputDir() {\n+        xpackPatternSet.setIncludes(includeXpack.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+        ConfigurableFileCollection fileCollection = getProject().files(xpackConfig.getAsFileTree().matching(xpackPatternSet));\n+        if (BuildParams.isInternal()) {\n+            corePatternSet.setIncludes(includeCore.get().stream().map(prefix -> prefix + \"*/**\").collect(Collectors.toList()));\n+            fileCollection.plus(coreConfig.getAsFileTree().matching(corePatternSet));\n+        } else {\n+            fileCollection.plus(coreConfig);\n+        }\n+        // if project has rest tests or the includes are explicitly configured execute the task, else NO-SOURCE due to the null input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852b30e92739a80289ec819243d3f273e7ccf4bf"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}