{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjg0NTU4", "number": 52093, "title": "Add support for secondary authentication", "bodyText": "This change makes it possible to send secondary authentication\ncredentials to select endpoints that need to perform a single action\nin the context of two users.\nTypically this need arises when a server process needs to call an\nendpoint that users should not (or might not) have direct access to,\nbut some part of that action must be performed using the logged-in\nuser's identity.", "createdAt": "2020-02-08T06:03:57Z", "url": "https://github.com/elastic/elasticsearch/pull/52093", "merged": true, "mergeCommit": {"oid": "2c6aa90a3bc4a9860e89097d5f88cf8cdd5a03c8"}, "closed": true, "closedAt": "2020-02-21T07:23:31Z", "author": {"login": "tvernum"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDKRKTgBqjMwMjUyMTQ4Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGZccDgH2gAyMzcyNjg0NTU4OjNkYmZiZDE4NDdiOGVjYTdhMjZjNDk5YjkzYTUwODI5NzY1ODQ0ZWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5f483c49c2dba74748a678c9d7a5e63a8ce5226", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/e5f483c49c2dba74748a678c9d7a5e63a8ce5226", "committedDate": "2020-02-08T05:57:37Z", "message": "Add support for secondary authentication\n\nThis change makes it possible to send secondary authentication\ncredentials to select endpoints that need to perform a single action\nin the context of two users.\n\nTypically this need arises when a server process needs to call an\nendpoint that users should not (or might not) have direct access to,\nbut some part of that action must be performed using the logged-in\nuser's identity."}, "afterCommit": {"oid": "de24408ed5eafae5cf2cce360262ab0f7f91884f", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/de24408ed5eafae5cf2cce360262ab0f7f91884f", "committedDate": "2020-02-11T04:18:51Z", "message": "Add support for secondary authentication\n\nThis change makes it possible to send secondary authentication\ncredentials to select endpoints that need to perform a single action\nin the context of two users.\n\nTypically this need arises when a server process needs to call an\nendpoint that users should not (or might not) have direct access to,\nbut some part of that action must be performed using the logged-in\nuser's identity."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/6fd9b62606b6e9f005bb76a679967541ae476bef", "committedDate": "2020-02-13T11:05:29Z", "message": "Add support for secondary authentication\n\nThis change makes it possible to send secondary authentication\ncredentials to select endpoints that need to perform a single action\nin the context of two users.\n\nTypically this need arises when a server process needs to call an\nendpoint that users should not (or might not) have direct access to,\nbut some part of that action must be performed using the logged-in\nuser's identity."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de24408ed5eafae5cf2cce360262ab0f7f91884f", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/de24408ed5eafae5cf2cce360262ab0f7f91884f", "committedDate": "2020-02-11T04:18:51Z", "message": "Add support for secondary authentication\n\nThis change makes it possible to send secondary authentication\ncredentials to select endpoints that need to perform a single action\nin the context of two users.\n\nTypically this need arises when a server process needs to call an\nendpoint that users should not (or might not) have direct access to,\nbut some part of that action must be performed using the logged-in\nuser's identity."}, "afterCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/6fd9b62606b6e9f005bb76a679967541ae476bef", "committedDate": "2020-02-13T11:05:29Z", "message": "Add support for secondary authentication\n\nThis change makes it possible to send secondary authentication\ncredentials to select endpoints that need to perform a single action\nin the context of two users.\n\nTypically this need arises when a server process needs to call an\nendpoint that users should not (or might not) have direct access to,\nbut some part of that action must be performed using the logged-in\nuser's identity."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjA2MDk2", "url": "https://github.com/elastic/elasticsearch/pull/52093#pullrequestreview-360206096", "createdAt": "2020-02-18T10:00:08Z", "commit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjoxNjo0MlrOFrcNqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTo0ODozMFrOFrlNQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NTMzOA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String THREAD_CTX_KEY = \"_xpack_security_2nd_authc\";\n          \n          \n            \n                private static final String THREAD_CTX_KEY = \"_xpack_security_secondary_authc\";\n          \n      \n    \n    \n  \n\npurely personal preference, that 2nd doesn't read well", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381095338", "createdAt": "2020-02-19T06:16:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/SecondaryAuthentication.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.authc.support;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Some Elasticsearch APIs need to be provided with 2 sets of credentials.\n+ * Typically this happens when a system user needs to perform an action while accessing data on behalf of, or user information regarding\n+ * a logged in user.\n+ * This class is a representation of that secondary user that can be activated in the security context while processing specific blocks\n+ * of code or within a listener.\n+ */\n+public class SecondaryAuthentication {\n+\n+    private static final String THREAD_CTX_KEY = \"_xpack_security_2nd_authc\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMjA0OQ==", "bodyText": "Should we name this readFromContext in order to not imply that it does anything more?", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381202049", "createdAt": "2020-02-19T10:24:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/SecondaryAuthentication.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.authc.support;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Some Elasticsearch APIs need to be provided with 2 sets of credentials.\n+ * Typically this happens when a system user needs to perform an action while accessing data on behalf of, or user information regarding\n+ * a logged in user.\n+ * This class is a representation of that secondary user that can be activated in the security context while processing specific blocks\n+ * of code or within a listener.\n+ */\n+public class SecondaryAuthentication {\n+\n+    private static final String THREAD_CTX_KEY = \"_xpack_security_2nd_authc\";\n+\n+    public interface Authenticator {\n+\n+        void authenticate(String action, TransportRequest request, ActionListener<SecondaryAuthentication> listener);\n+\n+        void authenticateAndAttachToContext(RestRequest request, ActionListener<SecondaryAuthentication> listener);\n+\n+        boolean hasSecondaryAuthenticationHeader();\n+    }\n+\n+    private final SecurityContext securityContext;\n+    private final Authentication authentication;\n+\n+    public SecondaryAuthentication(SecurityContext securityContext, Authentication authentication) {\n+        this.securityContext = Objects.requireNonNull(securityContext);\n+        this.authentication = Objects.requireNonNull(authentication);\n+    }\n+\n+    @Nullable\n+    public static SecondaryAuthentication restoreFromContext(SecurityContext securityContext) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxNDYxOQ==", "bodyText": "More of a legitimate question than feedback, what value does this interface add?", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381214619", "createdAt": "2020-02-19T10:47:29Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/SecondaryAuthentication.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.authc.support;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Some Elasticsearch APIs need to be provided with 2 sets of credentials.\n+ * Typically this happens when a system user needs to perform an action while accessing data on behalf of, or user information regarding\n+ * a logged in user.\n+ * This class is a representation of that secondary user that can be activated in the security context while processing specific blocks\n+ * of code or within a listener.\n+ */\n+public class SecondaryAuthentication {\n+\n+    private static final String THREAD_CTX_KEY = \"_xpack_security_2nd_authc\";\n+\n+    public interface Authenticator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxNTc5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n                /**", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381215796", "createdAt": "2020-02-19T10:49:45Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/SecondaryAuthenticator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ContextPreservingActionListener;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.elasticsearch.xpack.security.authc.AuthenticationService;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Performs \"secondary user authentication\" (that is, a second user, _not_ second factor authentication).\n+ */\n+public class SecondaryAuthenticator implements SecondaryAuthentication.Authenticator {\n+\n+    /**\n+     * The term \"Authorization\" in the header value is to mimic the standard HTTP \"Authorization\" header\n+     */\n+    public static final String SECONDARY_AUTH_HEADER_NAME = \"es-secondary-authorization\";\n+\n+    private final Logger logger = LogManager.getLogger();\n+    private final SecurityContext securityContext;\n+    private final AuthenticationService authenticationService;\n+\n+    public SecondaryAuthenticator(Settings settings, ThreadContext threadContext, AuthenticationService authenticationService) {\n+        this(new SecurityContext(settings, threadContext), authenticationService);\n+    }\n+\n+    public SecondaryAuthenticator(SecurityContext securityContext, AuthenticationService authenticationService) {\n+        this.securityContext = securityContext;\n+        this.authenticationService = authenticationService;\n+    }\n+\n+    /**\n+     * @param listener Handler for the {@link SecondaryAuthentication} object.\n+     *                 If the secondary authentication credentials do not exist the thread context, the\n+     *                 {@link ActionListener#onResponse(Object)} method is called with a {@code null} authentication value.\n+     *                 If the secondary authentication credentials are found in the thread context, but fail to be authenticated, then\n+     *                 the failure is returned through {@link ActionListener#onFailure(Exception)}.\n+     */\n+    @Override\n+    public void authenticate(String action, TransportRequest request, ActionListener<SecondaryAuthentication> listener) {\n+        authenticate(authListener -> authenticationService.authenticate(action, request, false, authListener), listener);\n+    }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzMTYwMg==", "bodyText": "Unrelated to this change but we should move BASIC_AUTH_HEADER away from UsernamePasswordToken , it confused me for more time than I'd like to admit :/", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381231602", "createdAt": "2020-02-19T11:22:34Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/SecondaryAuthenticator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ContextPreservingActionListener;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.elasticsearch.xpack.security.authc.AuthenticationService;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Performs \"secondary user authentication\" (that is, a second user, _not_ second factor authentication).\n+ */\n+public class SecondaryAuthenticator implements SecondaryAuthentication.Authenticator {\n+\n+    /**\n+     * The term \"Authorization\" in the header value is to mimic the standard HTTP \"Authorization\" header\n+     */\n+    public static final String SECONDARY_AUTH_HEADER_NAME = \"es-secondary-authorization\";\n+\n+    private final Logger logger = LogManager.getLogger();\n+    private final SecurityContext securityContext;\n+    private final AuthenticationService authenticationService;\n+\n+    public SecondaryAuthenticator(Settings settings, ThreadContext threadContext, AuthenticationService authenticationService) {\n+        this(new SecurityContext(settings, threadContext), authenticationService);\n+    }\n+\n+    public SecondaryAuthenticator(SecurityContext securityContext, AuthenticationService authenticationService) {\n+        this.securityContext = securityContext;\n+        this.authenticationService = authenticationService;\n+    }\n+\n+    /**\n+     * @param listener Handler for the {@link SecondaryAuthentication} object.\n+     *                 If the secondary authentication credentials do not exist the thread context, the\n+     *                 {@link ActionListener#onResponse(Object)} method is called with a {@code null} authentication value.\n+     *                 If the secondary authentication credentials are found in the thread context, but fail to be authenticated, then\n+     *                 the failure is returned through {@link ActionListener#onFailure(Exception)}.\n+     */\n+    @Override\n+    public void authenticate(String action, TransportRequest request, ActionListener<SecondaryAuthentication> listener) {\n+        authenticate(authListener -> authenticationService.authenticate(action, request, false, authListener), listener);\n+    }\n+\n+  /**\n+     * @param listener Handler for the {@link SecondaryAuthentication} object.\n+     *                 If the secondary authentication credentials do not exist the thread context, the\n+     *                 {@link ActionListener#onResponse(Object)} method is called with a {@code null} authentication value.\n+     *                 If the secondary authentication credentials are found in the thread context, but fail to be authenticated, then\n+     *                 the failure is returned through {@link ActionListener#onFailure(Exception)}.\n+     */\n+  @Override\n+  public void authenticateAndAttachToContext(RestRequest request, ActionListener<SecondaryAuthentication> listener) {\n+      final ThreadContext threadContext = securityContext.getThreadContext();\n+      authenticate(authListener -> authenticationService.authenticate(request, false, authListener),\n+          ActionListener.wrap(secondaryAuthentication -> {\n+                  if (secondaryAuthentication != null) {\n+                      secondaryAuthentication.writeToContext(threadContext);\n+                  }\n+                  listener.onResponse(secondaryAuthentication);\n+              },\n+              listener::onFailure));\n+  }\n+\n+    private void authenticate(Consumer<ActionListener<Authentication>> authenticate, ActionListener<SecondaryAuthentication> listener) {\n+        final ThreadContext threadContext = securityContext.getThreadContext();\n+        final String header = threadContext.getHeader(SECONDARY_AUTH_HEADER_NAME);\n+        if (Strings.isNullOrEmpty(header)) {\n+            logger.trace(\"no secondary authentication credentials found (the [{}] header is [{}])\", SECONDARY_AUTH_HEADER_NAME, header);\n+            listener.onResponse(null);\n+            return;\n+        }\n+\n+        final Supplier<ThreadContext.StoredContext> originalContext = threadContext.newRestorableContext(false);\n+        final ActionListener<Authentication> authenticationListener = new ContextPreservingActionListener<>(originalContext,\n+            ActionListener.wrap(\n+                authentication -> {\n+                    if (authentication == null) {\n+                        logger.debug(\"secondary authentication failed - authentication service returned a null authentication object\");\n+                        listener.onFailure(new ElasticsearchSecurityException(\"Failed to authenticate secondary user\"));\n+                    } else {\n+                        logger.debug(\"secondary authentication succeeded [{}]\", authentication);\n+                        listener.onResponse(new SecondaryAuthentication(securityContext, authentication));\n+                    }\n+                },\n+                e -> {\n+                    logger.debug(\"secondary authentication failed - authentication service responded with failure\", e);\n+                    listener.onFailure(new ElasticsearchSecurityException(\"Failed to authenticate secondary user\", e));\n+                }\n+            ));\n+        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {\n+            logger.trace(\"found secondary authentication credentials, placing them in the internal [{}] header for authentication\",\n+                UsernamePasswordToken.BASIC_AUTH_HEADER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzNTk1Mg==", "bodyText": "This comment found its way back here : #52094 (comment)", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381235952", "createdAt": "2020-02-19T11:32:41Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -150,6 +150,7 @@ the system itself (e.g. pings, update mappings, share relocation, etc...) and we\n          it to the action without an associated user (not via REST or transport - this is taken care of by\n          the {@link Rest} filter and the {@link ServerTransport} filter respectively), it's safe to assume a system user\n          here if a request is not associated with any other user.\n+         Because we want to fallback to the SystemUser, we don't allow anonymous (AnonymousUser) requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzNzE0Nw==", "bodyText": "Would it be worth adding a comment or jdoc to mention that allowAnonymous is set to false for a reason?", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381237147", "createdAt": "2020-02-19T11:35:24Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/SecondaryAuthenticator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ContextPreservingActionListener;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;\n+import org.elasticsearch.xpack.security.authc.AuthenticationService;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Performs \"secondary user authentication\" (that is, a second user, _not_ second factor authentication).\n+ */\n+public class SecondaryAuthenticator implements SecondaryAuthentication.Authenticator {\n+\n+    /**\n+     * The term \"Authorization\" in the header value is to mimic the standard HTTP \"Authorization\" header\n+     */\n+    public static final String SECONDARY_AUTH_HEADER_NAME = \"es-secondary-authorization\";\n+\n+    private final Logger logger = LogManager.getLogger();\n+    private final SecurityContext securityContext;\n+    private final AuthenticationService authenticationService;\n+\n+    public SecondaryAuthenticator(Settings settings, ThreadContext threadContext, AuthenticationService authenticationService) {\n+        this(new SecurityContext(settings, threadContext), authenticationService);\n+    }\n+\n+    public SecondaryAuthenticator(SecurityContext securityContext, AuthenticationService authenticationService) {\n+        this.securityContext = securityContext;\n+        this.authenticationService = authenticationService;\n+    }\n+\n+    /**\n+     * @param listener Handler for the {@link SecondaryAuthentication} object.\n+     *                 If the secondary authentication credentials do not exist the thread context, the\n+     *                 {@link ActionListener#onResponse(Object)} method is called with a {@code null} authentication value.\n+     *                 If the secondary authentication credentials are found in the thread context, but fail to be authenticated, then\n+     *                 the failure is returned through {@link ActionListener#onFailure(Exception)}.\n+     */\n+    @Override\n+    public void authenticate(String action, TransportRequest request, ActionListener<SecondaryAuthentication> listener) {\n+        authenticate(authListener -> authenticationService.authenticate(action, request, false, authListener), listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MTIzMw==", "bodyText": "We don't actually use ApiKeyService here so we could just mock it below and return false on isEnabled() ?", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381241233", "createdAt": "2020-02-19T11:45:05Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/support/SecondaryAuthenticatorTests.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.support;\n+\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.TestEnvironment;\n+import org.elasticsearch.license.License;\n+import org.elasticsearch.license.TestUtils;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.TestMatchers;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.xpack.core.security.SecurityContext;\n+import org.elasticsearch.xpack.core.security.action.user.AuthenticateAction;\n+import org.elasticsearch.xpack.core.security.action.user.AuthenticateRequest;\n+import org.elasticsearch.xpack.core.security.authc.Authentication;\n+import org.elasticsearch.xpack.core.security.authc.Authentication.AuthenticationType;\n+import org.elasticsearch.xpack.core.security.authc.Authentication.RealmRef;\n+import org.elasticsearch.xpack.core.security.authc.AuthenticationFailureHandler;\n+import org.elasticsearch.xpack.core.security.authc.DefaultAuthenticationFailureHandler;\n+import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n+import org.elasticsearch.xpack.core.security.authc.RealmConfig.RealmIdentifier;\n+import org.elasticsearch.xpack.core.security.authc.support.SecondaryAuthentication;\n+import org.elasticsearch.xpack.core.security.index.RestrictedIndicesNames;\n+import org.elasticsearch.xpack.core.security.user.AnonymousUser;\n+import org.elasticsearch.xpack.core.security.user.User;\n+import org.elasticsearch.xpack.security.audit.AuditTrailService;\n+import org.elasticsearch.xpack.security.authc.ApiKeyService;\n+import org.elasticsearch.xpack.security.authc.AuthenticationService;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.TokenService;\n+import org.elasticsearch.xpack.security.support.SecurityIndexManager;\n+import org.elasticsearch.xpack.security.test.SecurityMocks;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Clock;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.xpack.security.authc.support.SecondaryAuthenticator.SECONDARY_AUTH_HEADER_NAME;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SecondaryAuthenticatorTests extends ESTestCase {\n+\n+    private AuthenticationService authenticationService;\n+    private SecondaryAuthenticator authenticator;\n+    private DummyUsernamePasswordRealm realm;\n+    private ThreadPool threadPool;\n+    private SecurityContext securityContext;\n+    private TokenService tokenService;\n+    private Client client;\n+\n+    @Before\n+    public void setupMocks() throws Exception {\n+        threadPool = new TestThreadPool(getTestName());\n+        final ThreadContext threadContext = threadPool.getThreadContext();\n+\n+        final Realms realms = mock(Realms.class);\n+        final Settings settings = Settings.builder()\n+            .put(buildEnvSettings(Settings.EMPTY))\n+            .put(\"xpack.security.authc.realms.dummy.test_realm.order\", 1)\n+            .put(\"xpack.security.authc.token.enabled\", true)\n+            .put(\"xpack.security.authc.api_key.enabled\", true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MjY4OA==", "bodyText": "Should we add a test here to verify we process secondary authentication failures correctly?", "url": "https://github.com/elastic/elasticsearch/pull/52093#discussion_r381242688", "createdAt": "2020-02-19T11:48:30Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/SecurityRestFilterTests.java", "diffHunk": "@@ -48,7 +49,9 @@\n \n public class SecurityRestFilterTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd9b62606b6e9f005bb76a679967541ae476bef"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac77b0956f89d33828b63bd87b7f1cf906aa687c", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/ac77b0956f89d33828b63bd87b7f1cf906aa687c", "committedDate": "2020-02-21T03:21:29Z", "message": "Merge branch 'master' into multiple-auth-headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dbfbd1847b8eca7a26c499b93a50829765844ef", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/3dbfbd1847b8eca7a26c499b93a50829765844ef", "committedDate": "2020-02-21T06:08:19Z", "message": "Address feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2711, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}