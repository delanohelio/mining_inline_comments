{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDE4NTc1", "number": 51948, "title": "Add Boxplot Aggregation", "bodyText": "Adds a boxplot aggregation that calculates min, max, medium and the first\nand the third quartiles of the given data set.\nCloses #33112", "createdAt": "2020-02-05T14:56:41Z", "url": "https://github.com/elastic/elasticsearch/pull/51948", "merged": true, "mergeCommit": {"oid": "c50cfa0668ff11b6649e327ea8b0f70cdcdde64c"}, "closed": true, "closedAt": "2020-02-07T23:01:21Z", "author": {"login": "imotov"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBXXjcgH2gAyMzcxNDE4NTc1OmUyMzlhYzViZDNlMTFlOGUxZjMxMjIyMjUzZmU0MDc3YzFiODBhMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCG4ifgFqTM1NTQ2OTIwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/e239ac5bd3e11e8e1f31222253fe4077c1b80a01", "committedDate": "2020-02-05T14:53:33Z", "message": "Add Boxplot Aggregation\n\nAdds a `boxplot` aggregation that calculates min, max, medium and the first\nand the third quartiles of the given data set.\n\nCloses #33112"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDgxMjU4", "url": "https://github.com/elastic/elasticsearch/pull/51948#pullrequestreview-354081258", "createdAt": "2020-02-05T22:18:55Z", "commit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxODo1NVrOFmJJvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo0MDo1OVrOFmJr4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDE1OQ==", "bodyText": "I wonder, should we snake_case this to box_plot?  I personally don't really like snake casing but it would be more consistent (date_histogram, significant_terms, etc).", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375540159", "createdAt": "2020-02-05T22:18:55Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/boxplot-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,204 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-boxplot-aggregation]]\n+=== Boxplot Aggregation\n+\n+A `boxplot` metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.\n+These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.\n+\n+The `boxplot` aggregation returns essential information for making a https://en.wikipedia.org/wiki/Box_plot[box plot]: minimum, maximum\n+median, first quartile (25th percentile)  and third quartile (75th percentile) values.\n+\n+==== Syntax\n+\n+A `boxplot` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"boxplot\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY1NA==", "bodyText": "Typo re: \"buckets_path\" instead of \"field\"?", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375540654", "createdAt": "2020-02-05T22:20:08Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/boxplot-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,204 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-boxplot-aggregation]]\n+=== Boxplot Aggregation\n+\n+A `boxplot` metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.\n+These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.\n+\n+The `boxplot` aggregation returns essential information for making a https://en.wikipedia.org/wiki/Box_plot[box plot]: minimum, maximum\n+median, first quartile (25th percentile)  and third quartile (75th percentile) values.\n+\n+==== Syntax\n+\n+A `boxplot` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"boxplot\": {\n+        \"buckets_path\": \"my_cardinality_agg\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MTAzMg==", "bodyText": "Looks like copy pasta leftovers :)", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375541032", "createdAt": "2020-02-05T22:21:03Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/boxplot-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,204 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-boxplot-aggregation]]\n+=== Boxplot Aggregation\n+\n+A `boxplot` metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.\n+These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.\n+\n+The `boxplot` aggregation returns essential information for making a https://en.wikipedia.org/wiki/Box_plot[box plot]: minimum, maximum\n+median, first quartile (25th percentile)  and third quartile (75th percentile) values.\n+\n+==== Syntax\n+\n+A `boxplot` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"boxplot\": {\n+        \"buckets_path\": \"my_cardinality_agg\"\n+    }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+Let's look at a boxplot representing load time:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"field\" : \"load_time\" <1>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+<1> The field `load_time` must be a numeric field\n+\n+The response will look like this:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+    ...\n+\n+   \"aggregations\": {\n+      \"load_time_boxplot\": {\n+         \"min\": 0.0,\n+         \"max\": 990.0,\n+         \"q1\": 165.0,\n+         \"q2\": 445.0,\n+         \"q3\": 725.0\n+      }\n+   }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+As you can see, the aggregation will return a calculated value for each percentile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MTM1MA==", "bodyText": "\"percentiles\" typo", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375541350", "createdAt": "2020-02-05T22:21:52Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/boxplot-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,204 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-boxplot-aggregation]]\n+=== Boxplot Aggregation\n+\n+A `boxplot` metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.\n+These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.\n+\n+The `boxplot` aggregation returns essential information for making a https://en.wikipedia.org/wiki/Box_plot[box plot]: minimum, maximum\n+median, first quartile (25th percentile)  and third quartile (75th percentile) values.\n+\n+==== Syntax\n+\n+A `boxplot` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"boxplot\": {\n+        \"buckets_path\": \"my_cardinality_agg\"\n+    }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+Let's look at a boxplot representing load time:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"field\" : \"load_time\" <1>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+<1> The field `load_time` must be a numeric field\n+\n+The response will look like this:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+    ...\n+\n+   \"aggregations\": {\n+      \"load_time_boxplot\": {\n+         \"min\": 0.0,\n+         \"max\": 990.0,\n+         \"q1\": 165.0,\n+         \"q2\": 445.0,\n+         \"q3\": 725.0\n+      }\n+   }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+As you can see, the aggregation will return a calculated value for each percentile\n+in the default range.  If we assume response times are in milliseconds, it is\n+immediately obvious that the webpage normally loads in 10-725ms, but occasionally\n+spikes to 945-985ms.\n+\n+==== Script\n+\n+The boxplot metric supports scripting.  For example, if our load times\n+are in milliseconds but we want percentiles calculated in seconds, we could use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MjAxMw==", "bodyText": "I'm assuming this is the same as the Percentiles page?  Maybe we should link to it instead?  Or maybe there's a fancy way to embed a snippet from a different page?  @nik9000 do you happen to know?", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375542013", "createdAt": "2020-02-05T22:23:29Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/boxplot-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,204 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-boxplot-aggregation]]\n+=== Boxplot Aggregation\n+\n+A `boxplot` metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.\n+These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.\n+\n+The `boxplot` aggregation returns essential information for making a https://en.wikipedia.org/wiki/Box_plot[box plot]: minimum, maximum\n+median, first quartile (25th percentile)  and third quartile (75th percentile) values.\n+\n+==== Syntax\n+\n+A `boxplot` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"boxplot\": {\n+        \"buckets_path\": \"my_cardinality_agg\"\n+    }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+Let's look at a boxplot representing load time:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"field\" : \"load_time\" <1>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+<1> The field `load_time` must be a numeric field\n+\n+The response will look like this:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+    ...\n+\n+   \"aggregations\": {\n+      \"load_time_boxplot\": {\n+         \"min\": 0.0,\n+         \"max\": 990.0,\n+         \"q1\": 165.0,\n+         \"q2\": 445.0,\n+         \"q3\": 725.0\n+      }\n+   }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+As you can see, the aggregation will return a calculated value for each percentile\n+in the default range.  If we assume response times are in milliseconds, it is\n+immediately obvious that the webpage normally loads in 10-725ms, but occasionally\n+spikes to 945-985ms.\n+\n+==== Script\n+\n+The boxplot metric supports scripting.  For example, if our load times\n+are in milliseconds but we want percentiles calculated in seconds, we could use\n+a script to convert them on-the-fly:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"script\" : {\n+                    \"lang\": \"painless\",\n+                    \"source\": \"doc['load_time'].value / params.timeUnit\", <1>\n+                    \"params\" : {\n+                        \"timeUnit\" : 1000   <2>\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+\n+<1> The `field` parameter is replaced with a `script` parameter, which uses the\n+script to generate values which percentiles are calculated on\n+<2> Scripting supports parameterized input just like any other script\n+\n+This will interpret the `script` parameter as an `inline` script with the `painless` script language and no script parameters. To use a\n+stored script use the following syntax:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"script\" : {\n+                    \"id\": \"my_script\",\n+                    \"params\": {\n+                        \"field\": \"load_time\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency,stored_example_script]\n+\n+[[search-aggregations-metrics-boxplot-aggregation-approximation]]\n+==== Boxplot values are (usually) approximate\n+\n+The algorithm used by the `boxplot` metric is called TDigest (introduced by\n+Ted Dunning in\n+https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf[Computing Accurate Quantiles using T-Digests]).\n+\n+[WARNING]\n+====\n+Boxplot as other percentile aggregations are also\n+https://en.wikipedia.org/wiki/Nondeterministic_algorithm[non-deterministic].\n+This means you can get slightly different results using the same data.\n+====\n+\n+[[search-aggregations-metrics-boxplot-aggregation-compression]]\n+==== Compression\n+\n+Approximate algorithms must balance memory utilization with estimation accuracy.\n+This balance can be controlled using a `compression` parameter:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"field\" : \"load_time\",\n+                \"compression\" : 200 <1>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+\n+<1> Compression controls memory usage and approximation error\n+\n+The TDigest algorithm uses a number of \"nodes\" to approximate percentiles -- the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MjE2NQ==", "bodyText": "\ud83d\ude05", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375542165", "createdAt": "2020-02-05T22:23:50Z", "author": {"login": "polyfractal"}, "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java", "diffHunk": "@@ -378,7 +378,7 @@ public void testGetProperty() throws IOException {\n             iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n         }, (Consumer<InternalGlobal>) global -> {\n-            assertEquals(1.0, global.getDocCount(), 2);\n+            assertEquals(2, global.getDocCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NTk5Mg==", "bodyText": "Out of curiosity, did you look into extending AbstractTDigestPercentilesAggregator?  It might avoid some code duplication, but otoh it probably does more than you want/need.  No strong feelings here.... the percentile/ranks code is already a complicated hierarchy so might be easier to just keep this separate.", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375545992", "createdAt": "2020-02-05T22:33:35Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ScoreMode;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.ObjectArray;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BoxplotAggregator extends NumericMetricsAggregator.MultiValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0ODEzOQ==", "bodyText": "Should we include format in this equality check?\nPhilosophically, I wonder if we should check equality of the boxplot components instead of the state? Like, are two boxplots identical if min/max/q1/q2/q3 are the same but the rest of the distribution is different?\nI really dunno heh :)", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375548139", "createdAt": "2020-02-05T22:39:04Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.metrics.InternalNumericMetricsAggregation;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InternalBoxplot extends InternalNumericMetricsAggregation.MultiValue implements Boxplot {\n+\n+    enum Metrics {\n+\n+        min, max, q1, q2, q3;\n+\n+        public static Metrics resolve(String name) {\n+            return Metrics.valueOf(name);\n+        }\n+    }\n+\n+    private final TDigestState state;\n+\n+    InternalBoxplot(String name, TDigestState state, DocValueFormat formatter, List<PipelineAggregator> pipelineAggregators,\n+                    Map<String, Object> metaData) {\n+        super(name, pipelineAggregators, metaData);\n+        this.state = state;\n+        this.format = formatter;\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public InternalBoxplot(StreamInput in) throws IOException {\n+        super(in);\n+        format = in.readNamedWriteable(DocValueFormat.class);\n+        state = TDigestState.read(in);\n+    }\n+\n+    @Override\n+    protected void doWriteTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(format);\n+        TDigestState.write(state, out);\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return BoxplotAggregationBuilder.NAME;\n+    }\n+\n+    @Override\n+    public double getMin() {\n+        return state.getMin();\n+    }\n+\n+    @Override\n+    public double getMax() {\n+        return state.getMax();\n+    }\n+\n+    @Override\n+    public double getQ1() {\n+        return state.quantile(0.25);\n+    }\n+\n+    @Override\n+    public double getQ2() {\n+        return state.quantile(0.5);\n+    }\n+\n+    @Override\n+    public double getQ3() {\n+        return state.quantile(0.75);\n+    }\n+\n+    @Override\n+    public String getMinAsString() {\n+        return valueAsString(Metrics.min.name());\n+    }\n+\n+    @Override\n+    public String getMaxAsString() {\n+        return valueAsString(Metrics.max.name());\n+    }\n+\n+    @Override\n+    public String getQ1AsString() {\n+        return valueAsString(Metrics.q1.name());\n+    }\n+\n+    @Override\n+    public String getQ2AsString() {\n+        return valueAsString(Metrics.q2.name());\n+    }\n+\n+    @Override\n+    public String getQ3AsString() {\n+        return valueAsString(Metrics.q3.name());\n+    }\n+\n+    @Override\n+    public double value(String name) {\n+        Metrics metrics = Metrics.valueOf(name);\n+        switch (metrics) {\n+            case min:\n+                return getMin();\n+            case max:\n+                return getMax();\n+            case q1:\n+                return getQ1();\n+            case q2:\n+                return getQ2();\n+            case q3:\n+                return getQ3();\n+            default:\n+                throw new IllegalArgumentException(\"Unknown value [\" + name + \"] in common stats aggregation\");\n+        }\n+    }\n+\n+    // for testing only\n+    DocValueFormat format() {\n+        return format;\n+    }\n+\n+    // for testing only\n+    TDigestState state() {\n+        return state;\n+    }\n+\n+    @Override\n+    public InternalBoxplot reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {\n+        TDigestState merged = null;\n+        for (InternalAggregation aggregation : aggregations) {\n+            final InternalBoxplot percentiles = (InternalBoxplot) aggregation;\n+            if (merged == null) {\n+                merged = new TDigestState(percentiles.state.compression());\n+            }\n+            merged.add(percentiles.state);\n+        }\n+        return new InternalBoxplot(name, merged, format, pipelineAggregators(), metaData);\n+    }\n+\n+    static class Fields {\n+        public static final String MIN = \"min\";\n+        public static final String MIN_AS_STRING = \"min_as_string\";\n+        public static final String MAX = \"max\";\n+        public static final String MAX_AS_STRING = \"max_as_string\";\n+        public static final String Q1 = \"q1\";\n+        public static final String Q1_AS_STRING = \"q1_as_string\";\n+        public static final String Q2 = \"q2\";\n+        public static final String Q2_AS_STRING = \"q2_as_string\";\n+        public static final String Q3 = \"q3\";\n+        public static final String Q3_AS_STRING = \"q3_as_string\";\n+    }\n+\n+    @Override\n+    public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(Fields.MIN, getMin());\n+        builder.field(Fields.MAX, getMax());\n+        builder.field(Fields.Q1, getQ1());\n+        builder.field(Fields.Q2, getQ2());\n+        builder.field(Fields.Q3, getQ3());\n+        if (format != DocValueFormat.RAW) {\n+            builder.field(Fields.MIN_AS_STRING, format.format(getMin()));\n+            builder.field(Fields.MAX_AS_STRING, format.format(getMax()));\n+            builder.field(Fields.Q1_AS_STRING, format.format(getQ1()));\n+            builder.field(Fields.Q2_AS_STRING, format.format(getQ2()));\n+            builder.field(Fields.Q3_AS_STRING, format.format(getQ3()));\n+        }\n+        return builder;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), state);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) return true;\n+        if (obj == null || getClass() != obj.getClass()) return false;\n+        if (super.equals(obj) == false) return false;\n+\n+        InternalBoxplot that = (InternalBoxplot) obj;\n+        return Objects.equals(state, that.state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0ODg5Nw==", "bodyText": "Is this comment leftover?  E.g. the delta looks like it's zero?", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375548897", "createdAt": "2020-02-05T22:40:59Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplotTests.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregation;\n+import org.elasticsearch.search.aggregations.ParsedAggregation;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.test.InternalAggregationTestCase;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class InternalBoxplotTests extends InternalAggregationTestCase<InternalBoxplot> {\n+    @Override\n+    protected InternalBoxplot createTestInstance(String name, List<PipelineAggregator> pipelineAggregators,\n+                                                 Map<String, Object> metaData) {\n+        int numValues = frequently() ? randomInt(100) : 0;\n+        double[] values = new double[numValues];\n+        TDigestState state = new TDigestState(100);\n+        for (int i = 0; i < numValues; ++i) {\n+            state.add(randomDouble());\n+        }\n+        DocValueFormat formatter = randomNumericDocValueFormat();\n+\n+        return new InternalBoxplot(name, state, formatter, pipelineAggregators, metaData);\n+    }\n+\n+    @Override\n+    protected Writeable.Reader<InternalBoxplot> instanceReader() {\n+        return InternalBoxplot::new;\n+    }\n+\n+    @Override\n+    protected void assertReduced(InternalBoxplot reduced, List<InternalBoxplot> inputs) {\n+        TDigestState expected = new TDigestState(reduced.state().compression());\n+        for (InternalBoxplot input : inputs) {\n+            expected.add(input.state());\n+        }\n+        assertNotNull(expected);\n+        // The final calculated result may very depending on the order, which requires higher delta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NDYzNDMw", "url": "https://github.com/elastic/elasticsearch/pull/51948#pullrequestreview-354463430", "createdAt": "2020-02-06T13:52:15Z", "commit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzo1MjoxNVrOFmbu7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDo1NDozMlrOFmd7FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg0NDU4OA==", "bodyText": "https://asciidoctor.org/docs/user-manual/#by-tagged-regions", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375844588", "createdAt": "2020-02-06T13:52:15Z", "author": {"login": "nik9000"}, "path": "docs/reference/aggregations/metrics/boxplot-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,204 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-boxplot-aggregation]]\n+=== Boxplot Aggregation\n+\n+A `boxplot` metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.\n+These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.\n+\n+The `boxplot` aggregation returns essential information for making a https://en.wikipedia.org/wiki/Box_plot[box plot]: minimum, maximum\n+median, first quartile (25th percentile)  and third quartile (75th percentile) values.\n+\n+==== Syntax\n+\n+A `boxplot` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"boxplot\": {\n+        \"buckets_path\": \"my_cardinality_agg\"\n+    }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+Let's look at a boxplot representing load time:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"field\" : \"load_time\" <1>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+<1> The field `load_time` must be a numeric field\n+\n+The response will look like this:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+    ...\n+\n+   \"aggregations\": {\n+      \"load_time_boxplot\": {\n+         \"min\": 0.0,\n+         \"max\": 990.0,\n+         \"q1\": 165.0,\n+         \"q2\": 445.0,\n+         \"q3\": 725.0\n+      }\n+   }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+As you can see, the aggregation will return a calculated value for each percentile\n+in the default range.  If we assume response times are in milliseconds, it is\n+immediately obvious that the webpage normally loads in 10-725ms, but occasionally\n+spikes to 945-985ms.\n+\n+==== Script\n+\n+The boxplot metric supports scripting.  For example, if our load times\n+are in milliseconds but we want percentiles calculated in seconds, we could use\n+a script to convert them on-the-fly:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"script\" : {\n+                    \"lang\": \"painless\",\n+                    \"source\": \"doc['load_time'].value / params.timeUnit\", <1>\n+                    \"params\" : {\n+                        \"timeUnit\" : 1000   <2>\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+\n+<1> The `field` parameter is replaced with a `script` parameter, which uses the\n+script to generate values which percentiles are calculated on\n+<2> Scripting supports parameterized input just like any other script\n+\n+This will interpret the `script` parameter as an `inline` script with the `painless` script language and no script parameters. To use a\n+stored script use the following syntax:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"script\" : {\n+                    \"id\": \"my_script\",\n+                    \"params\": {\n+                        \"field\": \"load_time\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency,stored_example_script]\n+\n+[[search-aggregations-metrics-boxplot-aggregation-approximation]]\n+==== Boxplot values are (usually) approximate\n+\n+The algorithm used by the `boxplot` metric is called TDigest (introduced by\n+Ted Dunning in\n+https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf[Computing Accurate Quantiles using T-Digests]).\n+\n+[WARNING]\n+====\n+Boxplot as other percentile aggregations are also\n+https://en.wikipedia.org/wiki/Nondeterministic_algorithm[non-deterministic].\n+This means you can get slightly different results using the same data.\n+====\n+\n+[[search-aggregations-metrics-boxplot-aggregation-compression]]\n+==== Compression\n+\n+Approximate algorithms must balance memory utilization with estimation accuracy.\n+This balance can be controlled using a `compression` parameter:\n+\n+[source,console]\n+--------------------------------------------------\n+GET latency/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"load_time_boxplot\" : {\n+            \"boxplot\" : {\n+                \"field\" : \"load_time\",\n+                \"compression\" : 200 <1>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:latency]\n+\n+<1> Compression controls memory usage and approximation error\n+\n+The TDigest algorithm uses a number of \"nodes\" to approximate percentiles -- the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MjAxMw=="}, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg0NTk4OA==", "bodyText": "Do we need these any more?", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375845988", "createdAt": "2020-02-06T13:54:55Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/Boxplot.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+\n+public interface Boxplot extends NumericMetricsAggregation.MultiValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NjIwOQ==", "bodyText": "I wonder if it'd be better to use the field from the PercentilesAggregationBuilder. That at least is a hint that it means the same thing.", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375876209", "createdAt": "2020-02-06T14:47:35Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValueType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceParserHelper;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class BoxplotAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric,\n+    BoxplotAggregationBuilder> {\n+    public static final String NAME = \"boxplot\";\n+\n+    public static final ParseField COMPRESSION_FIELD = new ParseField(\"compression\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NjYyOA==", "bodyText": "I think if you've declared the setter you may as well use it here.", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375876628", "createdAt": "2020-02-06T14:48:17Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValueType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceParserHelper;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class BoxplotAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric,\n+    BoxplotAggregationBuilder> {\n+    public static final String NAME = \"boxplot\";\n+\n+    public static final ParseField COMPRESSION_FIELD = new ParseField(\"compression\");\n+\n+    private static final ObjectParser<BoxplotAggregationBuilder, Void> PARSER;\n+\n+    static {\n+        PARSER = new ObjectParser<>(BoxplotAggregationBuilder.NAME);\n+        ValuesSourceParserHelper.declareNumericFields(PARSER, true, true, false);\n+        PARSER.declareDouble((builder, compression) -> builder.compression = compression, COMPRESSION_FIELD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NjgxMA==", "bodyText": "So BoxplotAggregationBuilder::compression", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375876810", "createdAt": "2020-02-06T14:48:36Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValueType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceParserHelper;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class BoxplotAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric,\n+    BoxplotAggregationBuilder> {\n+    public static final String NAME = \"boxplot\";\n+\n+    public static final ParseField COMPRESSION_FIELD = new ParseField(\"compression\");\n+\n+    private static final ObjectParser<BoxplotAggregationBuilder, Void> PARSER;\n+\n+    static {\n+        PARSER = new ObjectParser<>(BoxplotAggregationBuilder.NAME);\n+        ValuesSourceParserHelper.declareNumericFields(PARSER, true, true, false);\n+        PARSER.declareDouble((builder, compression) -> builder.compression = compression, COMPRESSION_FIELD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NjYyOA=="}, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NzE4Mw==", "bodyText": "Also that'd gt your validation too.", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375877183", "createdAt": "2020-02-06T14:49:14Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesMethod;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValueType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceParserHelper;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class BoxplotAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric,\n+    BoxplotAggregationBuilder> {\n+    public static final String NAME = \"boxplot\";\n+\n+    public static final ParseField COMPRESSION_FIELD = new ParseField(\"compression\");\n+\n+    private static final ObjectParser<BoxplotAggregationBuilder, Void> PARSER;\n+\n+    static {\n+        PARSER = new ObjectParser<>(BoxplotAggregationBuilder.NAME);\n+        ValuesSourceParserHelper.declareNumericFields(PARSER, true, true, false);\n+        PARSER.declareDouble((builder, compression) -> builder.compression = compression, COMPRESSION_FIELD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3NjYyOA=="}, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3Nzk0Nw==", "bodyText": "I wonder if it'd be cleaner to make a class they could both delegate their common behavior to? It'd be cool to do that in a follow up change if it is tricky.", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375877947", "createdAt": "2020-02-06T14:50:26Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ScoreMode;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.ObjectArray;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BoxplotAggregator extends NumericMetricsAggregator.MultiValue {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NTk5Mg=="}, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3OTE4NQ==", "bodyText": "Could you name these in SHOUTING_SNAKE_CASE like normal Java enums? Is there a super compelling reason not to?", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375879185", "createdAt": "2020-02-06T14:52:20Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.metrics.InternalNumericMetricsAggregation;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InternalBoxplot extends InternalNumericMetricsAggregation.MultiValue implements Boxplot {\n+\n+    enum Metrics {\n+\n+        min, max, q1, q2, q3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4MDIwNg==", "bodyText": "Would you be making a private method on Metrics that takes this as a parameter and calls the right method instead?", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375880206", "createdAt": "2020-02-06T14:54:04Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.metrics.InternalNumericMetricsAggregation;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InternalBoxplot extends InternalNumericMetricsAggregation.MultiValue implements Boxplot {\n+\n+    enum Metrics {\n+\n+        min, max, q1, q2, q3;\n+\n+        public static Metrics resolve(String name) {\n+            return Metrics.valueOf(name);\n+        }\n+    }\n+\n+    private final TDigestState state;\n+\n+    InternalBoxplot(String name, TDigestState state, DocValueFormat formatter, List<PipelineAggregator> pipelineAggregators,\n+                    Map<String, Object> metaData) {\n+        super(name, pipelineAggregators, metaData);\n+        this.state = state;\n+        this.format = formatter;\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public InternalBoxplot(StreamInput in) throws IOException {\n+        super(in);\n+        format = in.readNamedWriteable(DocValueFormat.class);\n+        state = TDigestState.read(in);\n+    }\n+\n+    @Override\n+    protected void doWriteTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(format);\n+        TDigestState.write(state, out);\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return BoxplotAggregationBuilder.NAME;\n+    }\n+\n+    @Override\n+    public double getMin() {\n+        return state.getMin();\n+    }\n+\n+    @Override\n+    public double getMax() {\n+        return state.getMax();\n+    }\n+\n+    @Override\n+    public double getQ1() {\n+        return state.quantile(0.25);\n+    }\n+\n+    @Override\n+    public double getQ2() {\n+        return state.quantile(0.5);\n+    }\n+\n+    @Override\n+    public double getQ3() {\n+        return state.quantile(0.75);\n+    }\n+\n+    @Override\n+    public String getMinAsString() {\n+        return valueAsString(Metrics.min.name());\n+    }\n+\n+    @Override\n+    public String getMaxAsString() {\n+        return valueAsString(Metrics.max.name());\n+    }\n+\n+    @Override\n+    public String getQ1AsString() {\n+        return valueAsString(Metrics.q1.name());\n+    }\n+\n+    @Override\n+    public String getQ2AsString() {\n+        return valueAsString(Metrics.q2.name());\n+    }\n+\n+    @Override\n+    public String getQ3AsString() {\n+        return valueAsString(Metrics.q3.name());\n+    }\n+\n+    @Override\n+    public double value(String name) {\n+        Metrics metrics = Metrics.valueOf(name);\n+        switch (metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4MDQ2OQ==", "bodyText": "I thought that these Fields objects had gone out of favor. But I'm not really in the loop.", "url": "https://github.com/elastic/elasticsearch/pull/51948#discussion_r375880469", "createdAt": "2020-02-06T14:54:32Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/InternalBoxplot.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.boxplot;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.metrics.InternalNumericMetricsAggregation;\n+import org.elasticsearch.search.aggregations.metrics.TDigestState;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InternalBoxplot extends InternalNumericMetricsAggregation.MultiValue implements Boxplot {\n+\n+    enum Metrics {\n+\n+        min, max, q1, q2, q3;\n+\n+        public static Metrics resolve(String name) {\n+            return Metrics.valueOf(name);\n+        }\n+    }\n+\n+    private final TDigestState state;\n+\n+    InternalBoxplot(String name, TDigestState state, DocValueFormat formatter, List<PipelineAggregator> pipelineAggregators,\n+                    Map<String, Object> metaData) {\n+        super(name, pipelineAggregators, metaData);\n+        this.state = state;\n+        this.format = formatter;\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public InternalBoxplot(StreamInput in) throws IOException {\n+        super(in);\n+        format = in.readNamedWriteable(DocValueFormat.class);\n+        state = TDigestState.read(in);\n+    }\n+\n+    @Override\n+    protected void doWriteTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(format);\n+        TDigestState.write(state, out);\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return BoxplotAggregationBuilder.NAME;\n+    }\n+\n+    @Override\n+    public double getMin() {\n+        return state.getMin();\n+    }\n+\n+    @Override\n+    public double getMax() {\n+        return state.getMax();\n+    }\n+\n+    @Override\n+    public double getQ1() {\n+        return state.quantile(0.25);\n+    }\n+\n+    @Override\n+    public double getQ2() {\n+        return state.quantile(0.5);\n+    }\n+\n+    @Override\n+    public double getQ3() {\n+        return state.quantile(0.75);\n+    }\n+\n+    @Override\n+    public String getMinAsString() {\n+        return valueAsString(Metrics.min.name());\n+    }\n+\n+    @Override\n+    public String getMaxAsString() {\n+        return valueAsString(Metrics.max.name());\n+    }\n+\n+    @Override\n+    public String getQ1AsString() {\n+        return valueAsString(Metrics.q1.name());\n+    }\n+\n+    @Override\n+    public String getQ2AsString() {\n+        return valueAsString(Metrics.q2.name());\n+    }\n+\n+    @Override\n+    public String getQ3AsString() {\n+        return valueAsString(Metrics.q3.name());\n+    }\n+\n+    @Override\n+    public double value(String name) {\n+        Metrics metrics = Metrics.valueOf(name);\n+        switch (metrics) {\n+            case min:\n+                return getMin();\n+            case max:\n+                return getMax();\n+            case q1:\n+                return getQ1();\n+            case q2:\n+                return getQ2();\n+            case q3:\n+                return getQ3();\n+            default:\n+                throw new IllegalArgumentException(\"Unknown value [\" + name + \"] in common stats aggregation\");\n+        }\n+    }\n+\n+    // for testing only\n+    DocValueFormat format() {\n+        return format;\n+    }\n+\n+    // for testing only\n+    TDigestState state() {\n+        return state;\n+    }\n+\n+    @Override\n+    public InternalBoxplot reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {\n+        TDigestState merged = null;\n+        for (InternalAggregation aggregation : aggregations) {\n+            final InternalBoxplot percentiles = (InternalBoxplot) aggregation;\n+            if (merged == null) {\n+                merged = new TDigestState(percentiles.state.compression());\n+            }\n+            merged.add(percentiles.state);\n+        }\n+        return new InternalBoxplot(name, merged, format, pipelineAggregators(), metaData);\n+    }\n+\n+    static class Fields {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e239ac5bd3e11e8e1f31222253fe4077c1b80a01"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec311aeb9c063ba35774ebb099dbe39b0100615b", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/ec311aeb9c063ba35774ebb099dbe39b0100615b", "committedDate": "2020-02-06T21:38:24Z", "message": "Merge remote-tracking branch 'elastic/master' into issue-33112-add-boxplot-aggs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caaec5a23a28529e0ca0353df24de8d905ce8611", "author": {"user": {"login": "imotov", "name": "Igor Motov"}}, "url": "https://github.com/elastic/elasticsearch/commit/caaec5a23a28529e0ca0353df24de8d905ce8611", "committedDate": "2020-02-06T21:38:46Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDU5MjQ5", "url": "https://github.com/elastic/elasticsearch/pull/51948#pullrequestreview-355459249", "createdAt": "2020-02-07T21:52:33Z", "commit": {"oid": "caaec5a23a28529e0ca0353df24de8d905ce8611"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDY5MjA5", "url": "https://github.com/elastic/elasticsearch/pull/51948#pullrequestreview-355469209", "createdAt": "2020-02-07T22:15:07Z", "commit": {"oid": "caaec5a23a28529e0ca0353df24de8d905ce8611"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2823, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}