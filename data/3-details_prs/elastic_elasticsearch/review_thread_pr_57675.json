{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODY5OTc0", "number": 57675, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxMDo1NFrOECoiuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozNjoxN1rOEG1B0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTk2ODU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxMDo1NFrOGfNcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxMDo1NFrOGfNcJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3OTIzNw==", "bodyText": "I don't think we need the concrete instances of DataStream here? I think we should just track the IDs of data streams to snapshot here like we do for indices. Otherwise, we have to keep these in memory for the whole duration of the snapshot.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435379237", "createdAt": "2020-06-04T16:10:54Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -202,6 +208,10 @@ public long startTime() {\n             return startTime;\n         }\n \n+        public List<DataStream> dataStreams() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTk4MzIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxNDo1M1rOGfNlwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowNTowMVrOGfmdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5Nw==", "bodyText": "I would rather not add the data streams to the SnapshotInfo blobs. Adding them here, means that these blobs can get quite large and we load them in parallel in many occasions (e.g. SLM figuring out what snapshots to delete). These blobs really are designed as a lightweight thing, not as something to store data in. If we add to it we up the resource (memory+transfer) usage of our get snapshots APIs which is already problematic in some cases.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435381697", "createdAt": "2020-06-04T16:14:53Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "diffHunk": "@@ -53,12 +54,15 @@\n  */\n public final class SnapshotInfo implements Comparable<SnapshotInfo>, ToXContent, Writeable {\n \n+    public static final Version DATA_STREAMS_IN_SNAPSHOT = Version.V_8_0_0;\n+\n     public static final String CONTEXT_MODE_PARAM = \"context_mode\";\n     public static final String CONTEXT_MODE_SNAPSHOT = \"SNAPSHOT\";\n     private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern(\"strictDateOptionalTime\");\n     private static final String SNAPSHOT = \"snapshot\";\n     private static final String UUID = \"uuid\";\n     private static final String INDICES = \"indices\";\n+    private static final String DATA_STREAMS = \"data_streams\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMDE1MA==", "bodyText": "Would just the data stream name ids be ok?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435730150", "createdAt": "2020-06-05T07:11:05Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "diffHunk": "@@ -53,12 +54,15 @@\n  */\n public final class SnapshotInfo implements Comparable<SnapshotInfo>, ToXContent, Writeable {\n \n+    public static final Version DATA_STREAMS_IN_SNAPSHOT = Version.V_8_0_0;\n+\n     public static final String CONTEXT_MODE_PARAM = \"context_mode\";\n     public static final String CONTEXT_MODE_SNAPSHOT = \"SNAPSHOT\";\n     private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern(\"strictDateOptionalTime\");\n     private static final String SNAPSHOT = \"snapshot\";\n     private static final String UUID = \"uuid\";\n     private static final String INDICES = \"indices\";\n+    private static final String DATA_STREAMS = \"data_streams\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5Nw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczNTU2MA==", "bodyText": "I'm assuming you want to add it to be able to get a list of data streams for each snapshot in the snapshot listing from the get snapshots API?\nFor that I think it's fine. Not great to add it here but I don't see an easy alternative to it right now and it's not a lot of data anyway if it's just the names.\nFor purposes of restoring I don't think we would need this (we can just inspect the cluster state we're restoring from there).", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435735560", "createdAt": "2020-06-05T07:23:05Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "diffHunk": "@@ -53,12 +54,15 @@\n  */\n public final class SnapshotInfo implements Comparable<SnapshotInfo>, ToXContent, Writeable {\n \n+    public static final Version DATA_STREAMS_IN_SNAPSHOT = Version.V_8_0_0;\n+\n     public static final String CONTEXT_MODE_PARAM = \"context_mode\";\n     public static final String CONTEXT_MODE_SNAPSHOT = \"SNAPSHOT\";\n     private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern(\"strictDateOptionalTime\");\n     private static final String SNAPSHOT = \"snapshot\";\n     private static final String UUID = \"uuid\";\n     private static final String INDICES = \"indices\";\n+    private static final String DATA_STREAMS = \"data_streams\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5Nw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MTQ1OQ==", "bodyText": "Thanks @original-brownbear for review! I initially do it the way you proposed (storing data streams in global metadata) - metadataForSnapshot is already modified accordingl, it worked just fine and for sure was less intrusive change.\nMy concern with that was that on any restore with have to download whole state to examine it for data streams and that can be costly. Storing data streams ids would mitigate some of it, but still we would need whole global state if we want to restore any data stream.\nOr do you think this should not be such big problem?\n(I didn't really care for displaying it in get snapshots TBH, but it is nice touch)", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435781459", "createdAt": "2020-06-05T08:51:31Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "diffHunk": "@@ -53,12 +54,15 @@\n  */\n public final class SnapshotInfo implements Comparable<SnapshotInfo>, ToXContent, Writeable {\n \n+    public static final Version DATA_STREAMS_IN_SNAPSHOT = Version.V_8_0_0;\n+\n     public static final String CONTEXT_MODE_PARAM = \"context_mode\";\n     public static final String CONTEXT_MODE_SNAPSHOT = \"SNAPSHOT\";\n     private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern(\"strictDateOptionalTime\");\n     private static final String SNAPSHOT = \"snapshot\";\n     private static final String UUID = \"uuid\";\n     private static final String INDICES = \"indices\";\n+    private static final String DATA_STREAMS = \"data_streams\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5Nw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTA3OQ==", "bodyText": "npnp @probakowski :)\n\nOr do you think this should not be such big problem?\n\nYea this is irrelevant. Those few extra bytes to download won't hurt anyone for a rare action like restoring data streams :)\n\n(I didn't really care for displaying it in get snapshots TBH, but it is nice touch)\n\nHmm, if we don't care about it all that much, we could even leave out the change to SnapshotInfo for step 1 I guess. It's certainly nice to save those bytes here and not add any format changes if we don't have to. But I'm fine adding the list of names as well if you think it's helpful for users.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435789079", "createdAt": "2020-06-05T09:05:01Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java", "diffHunk": "@@ -53,12 +54,15 @@\n  */\n public final class SnapshotInfo implements Comparable<SnapshotInfo>, ToXContent, Writeable {\n \n+    public static final Version DATA_STREAMS_IN_SNAPSHOT = Version.V_8_0_0;\n+\n     public static final String CONTEXT_MODE_PARAM = \"context_mode\";\n     public static final String CONTEXT_MODE_SNAPSHOT = \"SNAPSHOT\";\n     private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern(\"strictDateOptionalTime\");\n     private static final String SNAPSHOT = \"snapshot\";\n     private static final String UUID = \"uuid\";\n     private static final String INDICES = \"indices\";\n+    private static final String DATA_STREAMS = \"data_streams\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5Nw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjA3OTU0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjozOTo0MFrOGfOjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNToyN1rOGjBzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw==", "bodyText": "You have to make sure not to allow any specific data stream snapshotting as long as there's master nodes older than DATA_STREAMS_IN_SNAPSHOT in the cluster. Otherwise, if you have a master failover to an old version master the information about the data stream snapshots is just lost because it won't deserialize that part.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435397403", "createdAt": "2020-06-04T16:39:40Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MTk0NA==", "bodyText": "Thanks for suggestion, is there a way to check that whole cluster is already on correct version?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435781944", "createdAt": "2020-06-05T08:52:26Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4NTk2MA==", "bodyText": "Jup, you can use:\nclusterState.nodes().getMinNodeVersion()\nsee e.g.\nhttps://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java#L231", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435785960", "createdAt": "2020-06-05T08:59:33Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4NjQzNQ==", "bodyText": "I think the version variable indicates the lowest version of nodes in the entire cluster.\n(that variable is based on clusterService.state().nodes().getMinNodeVersion())", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435786435", "createdAt": "2020-06-05T09:00:14Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4NjkzMQ==", "bodyText": "stale read from side...", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r435786931", "createdAt": "2020-06-05T09:01:04Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MjgxMQ==", "bodyText": "Added required check", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439382811", "createdAt": "2020-06-12T12:15:27Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -224,7 +225,17 @@ public ClusterState execute(ClusterState currentState) {\n                 }\n                 // Store newSnapshot here to be processed in clusterStateProcessed\n                 List<String> indices = Arrays.asList(indexNameExpressionResolver.concreteIndexNames(currentState,\n-                    request.indicesOptions(), request.indices()));\n+                    request.indicesOptions(), true, request.indices()));\n+\n+                Map<String, DataStream> allDataStreams = currentState.metadata().dataStreams();\n+                List<DataStream> dataStreams;\n+                if(request.includeGlobalState()){\n+                    dataStreams = new ArrayList<>(allDataStreams.values());\n+                } else {\n+                    dataStreams = indexNameExpressionResolver.dataStreamNames(currentState, request.indicesOptions(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzQwMw=="}, "originalCommit": {"oid": "7a75eb13de812f791e666d9152873cde262eb30d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY4NDcyOnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyMDozN1rOGhGnQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNTo0N1rOGjBzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NDU0Nw==", "bodyText": "iirc if actionGet() is invoked then the real exception is thrown instead of ExecutionException. So maybe do that instead of invoked get()?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437364547", "createdAt": "2020-06-09T12:20:37Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds\").get().getHits().getHits()[0].getSourceAsMap());\n+\n+        restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")\n+            .get();\n+\n+        ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds2\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds2-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds2\").get().getHits().getHits()[0].getSourceAsMap());\n+    }\n+\n+    public void testWildcards() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"d*\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"d*\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")\n+            .get();\n+\n+        assertEquals(RestStatus.OK, restoreSnapshotResponse.status());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds2\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds2-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+    }\n+\n+    public void testDataStreamNotStoredWhenIndexRequested() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\".ds-ds-000001\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+        expectThrows(Exception.class, () -> client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get());\n+    }\n+\n+    public void testDataStreamNotRestoredWhenIndexRequested() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\".ds-ds-*\")\n+            .get();\n+\n+        assertEquals(RestStatus.OK, restoreSnapshotResponse.status());\n+\n+        GetDataStreamAction.Request getRequest = new GetDataStreamAction.Request(\"ds\");\n+        Throwable e = expectThrows(ExecutionException.class, () -> client.admin().indices().getDataStreams(getRequest).get()).getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4Mjk3NA==", "bodyText": "Great suggestion, thanks!", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439382974", "createdAt": "2020-06-12T12:15:47Z", "author": {"login": "probakowski"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds\").get().getHits().getHits()[0].getSourceAsMap());\n+\n+        restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")\n+            .get();\n+\n+        ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds2\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds2-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds2\").get().getHits().getHits()[0].getSourceAsMap());\n+    }\n+\n+    public void testWildcards() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"d*\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"d*\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")\n+            .get();\n+\n+        assertEquals(RestStatus.OK, restoreSnapshotResponse.status());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds2\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds2-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+    }\n+\n+    public void testDataStreamNotStoredWhenIndexRequested() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\".ds-ds-000001\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+        expectThrows(Exception.class, () -> client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get());\n+    }\n+\n+    public void testDataStreamNotRestoredWhenIndexRequested() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap2\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\".ds-ds-*\")\n+            .get();\n+\n+        assertEquals(RestStatus.OK, restoreSnapshotResponse.status());\n+\n+        GetDataStreamAction.Request getRequest = new GetDataStreamAction.Request(\"ds\");\n+        Throwable e = expectThrows(ExecutionException.class, () -> client.admin().indices().getDataStreams(getRequest).get()).getCause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NDU0Nw=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY4ODE5OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyMTowNlrOGhGpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxOTo1MlrOGjB6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NTAyNg==", "bodyText": "Maybe also do a search on the restored data stream?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437365026", "createdAt": "2020-06-09T12:21:06Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NDY5Mg==", "bodyText": "I've tested it already - code was few lines below, I moved it group both searches together", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439384692", "createdAt": "2020-06-12T12:19:52Z", "author": {"login": "probakowski"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NTAyNg=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDcxNzg4OnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNTo0OFrOGhG5xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNjowNlrOGjB0QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2OTI4NQ==", "bodyText": "maybe test the rename functionality in a separate test method?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437369285", "createdAt": "2020-06-09T12:25:48Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds\").get().getHits().getHits()[0].getSourceAsMap());\n+\n+        restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MzEwNA==", "bodyText": "\ud83d\udc4d moved to separate method", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383104", "createdAt": "2020-06-12T12:16:06Z", "author": {"login": "probakowski"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());\n+        assertEquals(source, client.prepareSearch(\"ds\").get().getHits().getHits()[0].getSourceAsMap());\n+\n+        restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setRenamePattern(\"ds\")\n+            .setRenameReplacement(\"ds2\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2OTI4NQ=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc0OTAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozMDo1M1rOGhHLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxOToxMFrOGjB5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Mzg3NA==", "bodyText": "Maybe write a unit test for this method, which tests the renaming more thoroughly?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437373874", "createdAt": "2020-06-09T12:30:53Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -552,6 +586,17 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         }\n     }\n \n+    private DataStream updateDataStream(DataStream dataStream, Metadata.Builder metadata, RestoreSnapshotRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NDQxNg==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439384416", "createdAt": "2020-06-12T12:19:10Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -552,6 +586,17 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n         }\n     }\n \n+    private DataStream updateDataStream(DataStream dataStream, Metadata.Builder metadata, RestoreSnapshotRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Mzg3NA=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc2Mjk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozMzoyM1rOGhHUMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNjoxM1rOGjB0bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NjA0OA==", "bodyText": "Maybe add a unit test for this method to IndexNameExpressionResolverTests?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437376048", "createdAt": "2020-06-09T12:33:23Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -117,6 +117,15 @@\n         return concreteIndexNames(context, indexExpressions);\n     }\n \n+    public List<String> dataStreamNames(ClusterState state, IndicesOptions options, String... indexExpressions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MzE1MQ==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383151", "createdAt": "2020-06-12T12:16:13Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -117,6 +117,15 @@\n         return concreteIndexNames(context, indexExpressions);\n     }\n \n+    public List<String> dataStreamNames(ClusterState state, IndicesOptions options, String... indexExpressions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NjA0OA=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDgwMTY5OnYy", "diffSide": "LEFT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MetadataLoadingDuringSnapshotRestoreIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo0MzozMlrOGhHsZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNjo0MlrOGjB1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MjI0NQ==", "bodyText": "Maybe keep this test and just removing the mentioned lines? Or assume that during a restore global state is loaded.\nSo that we ensure no global state is loaded when creating a snapshot or using get snapshot api and snapshot status api?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437382245", "createdAt": "2020-06-09T12:43:32Z", "author": {"login": "martijnvg"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MetadataLoadingDuringSnapshotRestoreIT.java", "diffHunk": "@@ -1,217 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.snapshots;\n-\n-import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n-import org.elasticsearch.action.support.PlainActionFuture;\n-import org.elasticsearch.cluster.metadata.IndexMetadata;\n-import org.elasticsearch.cluster.metadata.Metadata;\n-import org.elasticsearch.cluster.metadata.RepositoryMetadata;\n-import org.elasticsearch.cluster.service.ClusterService;\n-import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n-import org.elasticsearch.env.Environment;\n-import org.elasticsearch.plugins.Plugin;\n-import org.elasticsearch.repositories.IndexId;\n-import org.elasticsearch.repositories.RepositoriesService;\n-import org.elasticsearch.repositories.Repository;\n-import org.elasticsearch.repositories.RepositoryData;\n-import org.elasticsearch.rest.RestStatus;\n-import org.elasticsearch.snapshots.mockstore.MockRepository;\n-\n-import java.io.IOException;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.hamcrest.Matchers.instanceOf;\n-import static org.hamcrest.Matchers.nullValue;\n-\n-/**\n- * This class tests whether global and index metadata are only loaded from the repository when needed.\n-*/\n-public class MetadataLoadingDuringSnapshotRestoreIT extends AbstractSnapshotIntegTestCase {\n-\n-    @Override\n-    protected Collection<Class<? extends Plugin>> nodePlugins() {\n-        /// This test uses a snapshot/restore plugin implementation that\n-        // counts the number of times metadata are loaded\n-        return Collections.singletonList(CountingMockRepositoryPlugin.class);\n-    }\n-\n-    public void testWhenMetadataAreLoaded() throws Exception {\n-        createIndex(\"docs\");\n-        indexRandom(true,\n-            client().prepareIndex(\"docs\").setId(\"1\").setSource(\"rank\", 1),\n-            client().prepareIndex(\"docs\").setId(\"2\").setSource(\"rank\", 2),\n-            client().prepareIndex(\"docs\").setId(\"3\").setSource(\"rank\", 3),\n-            client().prepareIndex(\"others\").setSource(\"rank\", 4),\n-            client().prepareIndex(\"others\").setSource(\"rank\", 5));\n-\n-        createRepository(\"repository\", CountingMockRepositoryPlugin.TYPE, randomRepoPath());\n-\n-        // Creating a snapshot does not load any metadata\n-        CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot(\"repository\", \"snap\")\n-                                                                                    .setIncludeGlobalState(true)\n-                                                                                    .setWaitForCompletion(true)\n-                                                                                    .get();\n-        assertThat(createSnapshotResponse.getSnapshotInfo().failedShards(), equalTo(0));\n-        assertThat(createSnapshotResponse.getSnapshotInfo().status(), equalTo(RestStatus.OK));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 0);\n-\n-        // Getting a snapshot does not load any metadata\n-        GetSnapshotsResponse getSnapshotsResponse =\n-            client().admin().cluster().prepareGetSnapshots(\"repository\").addSnapshots(\"snap\").setVerbose(randomBoolean()).get();\n-        assertThat(getSnapshotsResponse.getSnapshots(\"repository\"), hasSize(1));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 0);\n-\n-        // Getting the status of a snapshot loads indices metadata but not global metadata\n-        SnapshotsStatusResponse snapshotStatusResponse =\n-            client().admin().cluster().prepareSnapshotStatus(\"repository\").setSnapshots(\"snap\").get();\n-        assertThat(snapshotStatusResponse.getSnapshots(), hasSize(1));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 1);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 1);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\", \"others\"));\n-\n-        // Restoring a snapshot loads indices metadata but not the global state\n-        RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-                                                                                    .setWaitForCompletion(true)\n-                                                                                    .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 2);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 2);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\"));\n-\n-        // Restoring a snapshot with selective indices loads only required index metadata\n-        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-                                                            .setIndices(\"docs\")\n-                                                            .setWaitForCompletion(true)\n-                                                            .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 3);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 2);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\", \"others\"));\n-\n-        // Restoring a snapshot including the global state loads it with the index metadata\n-        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-            .setIndices(\"docs\", \"oth*\")\n-            .setRestoreGlobalState(true)\n-            .setWaitForCompletion(true)\n-            .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 1);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 4);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MzMyMg==", "bodyText": "Yes, it was silly of me to remove the test completely, I restored it and modified only required parts", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383322", "createdAt": "2020-06-12T12:16:42Z", "author": {"login": "probakowski"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/MetadataLoadingDuringSnapshotRestoreIT.java", "diffHunk": "@@ -1,217 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.snapshots;\n-\n-import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n-import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;\n-import org.elasticsearch.action.support.PlainActionFuture;\n-import org.elasticsearch.cluster.metadata.IndexMetadata;\n-import org.elasticsearch.cluster.metadata.Metadata;\n-import org.elasticsearch.cluster.metadata.RepositoryMetadata;\n-import org.elasticsearch.cluster.service.ClusterService;\n-import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n-import org.elasticsearch.env.Environment;\n-import org.elasticsearch.plugins.Plugin;\n-import org.elasticsearch.repositories.IndexId;\n-import org.elasticsearch.repositories.RepositoriesService;\n-import org.elasticsearch.repositories.Repository;\n-import org.elasticsearch.repositories.RepositoryData;\n-import org.elasticsearch.rest.RestStatus;\n-import org.elasticsearch.snapshots.mockstore.MockRepository;\n-\n-import java.io.IOException;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.hamcrest.Matchers.instanceOf;\n-import static org.hamcrest.Matchers.nullValue;\n-\n-/**\n- * This class tests whether global and index metadata are only loaded from the repository when needed.\n-*/\n-public class MetadataLoadingDuringSnapshotRestoreIT extends AbstractSnapshotIntegTestCase {\n-\n-    @Override\n-    protected Collection<Class<? extends Plugin>> nodePlugins() {\n-        /// This test uses a snapshot/restore plugin implementation that\n-        // counts the number of times metadata are loaded\n-        return Collections.singletonList(CountingMockRepositoryPlugin.class);\n-    }\n-\n-    public void testWhenMetadataAreLoaded() throws Exception {\n-        createIndex(\"docs\");\n-        indexRandom(true,\n-            client().prepareIndex(\"docs\").setId(\"1\").setSource(\"rank\", 1),\n-            client().prepareIndex(\"docs\").setId(\"2\").setSource(\"rank\", 2),\n-            client().prepareIndex(\"docs\").setId(\"3\").setSource(\"rank\", 3),\n-            client().prepareIndex(\"others\").setSource(\"rank\", 4),\n-            client().prepareIndex(\"others\").setSource(\"rank\", 5));\n-\n-        createRepository(\"repository\", CountingMockRepositoryPlugin.TYPE, randomRepoPath());\n-\n-        // Creating a snapshot does not load any metadata\n-        CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot(\"repository\", \"snap\")\n-                                                                                    .setIncludeGlobalState(true)\n-                                                                                    .setWaitForCompletion(true)\n-                                                                                    .get();\n-        assertThat(createSnapshotResponse.getSnapshotInfo().failedShards(), equalTo(0));\n-        assertThat(createSnapshotResponse.getSnapshotInfo().status(), equalTo(RestStatus.OK));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 0);\n-\n-        // Getting a snapshot does not load any metadata\n-        GetSnapshotsResponse getSnapshotsResponse =\n-            client().admin().cluster().prepareGetSnapshots(\"repository\").addSnapshots(\"snap\").setVerbose(randomBoolean()).get();\n-        assertThat(getSnapshotsResponse.getSnapshots(\"repository\"), hasSize(1));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 0);\n-\n-        // Getting the status of a snapshot loads indices metadata but not global metadata\n-        SnapshotsStatusResponse snapshotStatusResponse =\n-            client().admin().cluster().prepareSnapshotStatus(\"repository\").setSnapshots(\"snap\").get();\n-        assertThat(snapshotStatusResponse.getSnapshots(), hasSize(1));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 1);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 1);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\", \"others\"));\n-\n-        // Restoring a snapshot loads indices metadata but not the global state\n-        RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-                                                                                    .setWaitForCompletion(true)\n-                                                                                    .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 2);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 2);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\"));\n-\n-        // Restoring a snapshot with selective indices loads only required index metadata\n-        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-                                                            .setIndices(\"docs\")\n-                                                            .setWaitForCompletion(true)\n-                                                            .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 0);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 3);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 2);\n-\n-        assertAcked(client().admin().indices().prepareDelete(\"docs\", \"others\"));\n-\n-        // Restoring a snapshot including the global state loads it with the index metadata\n-        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot(\"repository\", \"snap\")\n-            .setIndices(\"docs\", \"oth*\")\n-            .setRestoreGlobalState(true)\n-            .setWaitForCompletion(true)\n-            .get();\n-        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));\n-        assertGlobalMetadataLoads(\"snap\", 1);\n-        assertIndexMetadataLoads(\"snap\", \"docs\", 4);\n-        assertIndexMetadataLoads(\"snap\", \"others\", 3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MjI0NQ=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDgzMjkzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo1MTozNlrOGhIACg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjo0Mjo0OFrOGjCiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NzI3NA==", "bodyText": "Maybe adjust SnapshotsInProgressSerializationTests, so that a randomly generated instance also contains randomly a list of data stream names.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437387274", "createdAt": "2020-06-09T12:51:36Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -56,6 +56,7 @@\n public class SnapshotsInProgress extends AbstractNamedDiffable<Custom> implements Custom {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5NDk1NA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439394954", "createdAt": "2020-06-12T12:42:48Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -56,6 +56,7 @@\n public class SnapshotsInProgress extends AbstractNamedDiffable<Custom> implements Custom {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NzI3NA=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk0NDk5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMTowMVrOGhJDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNzowMFrOGjB1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNDQxNg==", "bodyText": "NIT: Maybe refactor this a little cleaner to:\nfinal  List<String> dataStreams;\nif (in.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)){\n                dataStreams = Arrays.asList(in.readStringArray());\n} else {\n  dataStreams = Collections.emptyList();\n}", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437404416", "createdAt": "2020-06-09T13:11:01Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -531,11 +540,16 @@ public SnapshotsInProgress(StreamInput in) throws IOException {\n                 // generations.\n                 version = in.readBoolean() ? SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION : SnapshotsService.OLD_SNAPSHOT_FORMAT;\n             }\n+            List<String> dataStreams = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MzQ0OA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383448", "createdAt": "2020-06-12T12:17:00Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -531,11 +540,16 @@ public SnapshotsInProgress(StreamInput in) throws IOException {\n                 // generations.\n                 version = in.readBoolean() ? SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION : SnapshotsService.OLD_SNAPSHOT_FORMAT;\n             }\n+            List<String> dataStreams = Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNDQxNg=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk0OTAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMTo1OVrOGhJFjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNzoyOFrOGjB2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTA3MA==", "bodyText": "You can just use writeStringCollection no need to go through the array round trip.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437405070", "createdAt": "2020-06-09T13:11:59Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -573,6 +587,9 @@ public void writeTo(StreamOutput out) throws IOException {\n             } else {\n                 out.writeBoolean(SnapshotsService.useShardGenerations(entry.version));\n             }\n+            if (out.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)) {\n+                out.writeStringArray(entry.dataStreams.toArray(new String[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MzY1MA==", "bodyText": "thanks for suggestion, I've missed that method", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383650", "createdAt": "2020-06-12T12:17:28Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -573,6 +587,9 @@ public void writeTo(StreamOutput out) throws IOException {\n             } else {\n                 out.writeBoolean(SnapshotsService.useShardGenerations(entry.version));\n             }\n+            if (out.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)) {\n+                out.writeStringArray(entry.dataStreams.toArray(new String[0]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTA3MA=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk1MDc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMjoyNlrOGhJGsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxNzo0MlrOGjB2yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTM2MA==", "bodyText": "use in.readStringList", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437405360", "createdAt": "2020-06-09T13:12:26Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -531,11 +540,16 @@ public SnapshotsInProgress(StreamInput in) throws IOException {\n                 // generations.\n                 version = in.readBoolean() ? SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION : SnapshotsService.OLD_SNAPSHOT_FORMAT;\n             }\n+            List<String> dataStreams = Collections.emptyList();\n+            if (in.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)){\n+                dataStreams = Arrays.asList(in.readStringArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4Mzc1Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383753", "createdAt": "2020-06-12T12:17:42Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -531,11 +540,16 @@ public SnapshotsInProgress(StreamInput in) throws IOException {\n                 // generations.\n                 version = in.readBoolean() ? SnapshotsService.SHARD_GEN_IN_REPO_DATA_VERSION : SnapshotsService.OLD_SNAPSHOT_FORMAT;\n             }\n+            List<String> dataStreams = Collections.emptyList();\n+            if (in.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)){\n+                dataStreams = Arrays.asList(in.readStringArray());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTM2MA=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk2MTg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxNToxNlrOGhJOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoyMDoxNlrOGjQkeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNzI1Mw==", "bodyText": "This looks broken, we should always be able to read global metadata (we always write at least a dummy instance of it to the repository). If we fail here, then that means the snapshot is corrupted and we should throw right away and can simplify the below code accordingly.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437407253", "createdAt": "2020-06-09T13:15:16Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -201,12 +205,36 @@ public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionLi\n                 // Make sure that we can restore from this snapshot\n                 validateSnapshotRestorable(repositoryName, snapshotInfo);\n \n+                SnapshotException snapshotException = null;\n+                Metadata globalMetadata = null;\n                 // Resolve the indices from the snapshot that need to be restored\n-                final List<String> indicesInSnapshot = filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions());\n+                try {\n+                    globalMetadata = repository.getSnapshotGlobalMetadata(snapshotId);\n+                } catch (SnapshotException e) {\n+                    snapshotException = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5MDQzNQ==", "bodyText": "I followed SharedClusterSnapshotRestoreIT.testRestoreSnapshotWithCorruptedGlobalState. It targets situation when global metadata is broken, not empty.\nIt makes sense to me that even when global metadata is broken we should be able to restore indices and data for rescue purposes. If we throw here (as it was before) we can't do that even when we don't care about data streams. WDYT?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439390435", "createdAt": "2020-06-12T12:33:14Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -201,12 +205,36 @@ public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionLi\n                 // Make sure that we can restore from this snapshot\n                 validateSnapshotRestorable(repositoryName, snapshotInfo);\n \n+                SnapshotException snapshotException = null;\n+                Metadata globalMetadata = null;\n                 // Resolve the indices from the snapshot that need to be restored\n-                final List<String> indicesInSnapshot = filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions());\n+                try {\n+                    globalMetadata = repository.getSnapshotGlobalMetadata(snapshotId);\n+                } catch (SnapshotException e) {\n+                    snapshotException = e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNzI1Mw=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MzAyMg==", "bodyText": "Ah I see ... but then we should only try to load the global metadata if either includeGlobalState() or data streams have been requested for restore specifically?\nThat way we don't create some new weird half-working state where indices are restored but data streams aren't when both are requested. Also, we save loading the global metadata needlessly this way.\nI guess that needs a data streams parameter on the restore request or at least a flag data streams yes/no?\nI don't think we should introduce an API here that would return a 200 even though data streams couldn't be restored. No one ever looks at the logs :)", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439483022", "createdAt": "2020-06-12T15:18:26Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -201,12 +205,36 @@ public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionLi\n                 // Make sure that we can restore from this snapshot\n                 validateSnapshotRestorable(repositoryName, snapshotInfo);\n \n+                SnapshotException snapshotException = null;\n+                Metadata globalMetadata = null;\n                 // Resolve the indices from the snapshot that need to be restored\n-                final List<String> indicesInSnapshot = filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions());\n+                try {\n+                    globalMetadata = repository.getSnapshotGlobalMetadata(snapshotId);\n+                } catch (SnapshotException e) {\n+                    snapshotException = e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNzI1Mw=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNDgyNQ==", "bodyText": "Ok, I took another turn on that, storing data streams' names in userMeta (similarly as SLM stores policy name there).\nIt simplifies things greatly (no need to change Entry and its serialization etc) and saves us from loading global state on every restore (we need it only on restoring data streams).\nIt does enlarge SnapshotInfo, it should not be that bad though as they are only names not whole data streams.\nLet me know what do you think?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439624825", "createdAt": "2020-06-12T20:20:16Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java", "diffHunk": "@@ -201,12 +205,36 @@ public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionLi\n                 // Make sure that we can restore from this snapshot\n                 validateSnapshotRestorable(repositoryName, snapshotInfo);\n \n+                SnapshotException snapshotException = null;\n+                Metadata globalMetadata = null;\n                 // Resolve the indices from the snapshot that need to be restored\n-                final List<String> indicesInSnapshot = filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions());\n+                try {\n+                    globalMetadata = repository.getSnapshotGlobalMetadata(snapshotId);\n+                } catch (SnapshotException e) {\n+                    snapshotException = e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNzI1Mw=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk4OTkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyMjowNlrOGhJgLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxODoxMFrOGjB3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTg4Ng==", "bodyText": "This look potentially broken. can we remove a data stream while it is in the process of being snapshotted? (looks like it) If so, then we're failing without error if someone concurrently removes (while the data nodes are busy doing their work) and before we get here it?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437411886", "createdAt": "2020-06-09T13:22:06Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -355,6 +365,10 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            Map<String, DataStream> dataStreams = new HashMap<>(metadata.dataStreams());\n+            dataStreams.keySet().removeIf(ds -> snapshot.dataStreams().contains(ds) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4Mzk5NA==", "bodyText": "You are right, I changed it to similar check as above for indices", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439383994", "createdAt": "2020-06-12T12:18:10Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -355,6 +365,10 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            Map<String, DataStream> dataStreams = new HashMap<>(metadata.dataStreams());\n+            dataStreams.keySet().removeIf(ds -> snapshot.dataStreams().contains(ds) == false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTg4Ng=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAwMDU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoyNDo0NlrOGhJncw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxODozMFrOGjB4WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMzc0Nw==", "bodyText": "We should assert that we don't have any data streams if we're writing to an older version and must make sure to not start snapshots that include data streams as long as there's old version nodes in the cluster that don't understand data stream snapshots.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437413747", "createdAt": "2020-06-09T13:24:46Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -573,6 +587,9 @@ public void writeTo(StreamOutput out) throws IOException {\n             } else {\n                 out.writeBoolean(SnapshotsService.useShardGenerations(entry.version));\n             }\n+            if (out.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NDE1Mg==", "bodyText": "Added required check", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439384152", "createdAt": "2020-06-12T12:18:30Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -573,6 +587,9 @@ public void writeTo(StreamOutput out) throws IOException {\n             } else {\n                 out.writeBoolean(SnapshotsService.useShardGenerations(entry.version));\n             }\n+            if (out.getVersion().onOrAfter(DATA_STREAMS_IN_SNAPSHOT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMzc0Nw=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA2NzkyOnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozOTo1N1rOGhKSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxODo0OVrOGjB41A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDY0OQ==", "bodyText": "Minor, but having gone through the exercise of changing the backing index naming scheme, it would be nice to use DataStream::getDefaultBackingIndexName here so any future changes are automatically picked up.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437424649", "createdAt": "2020-06-09T13:39:57Z", "author": {"login": "danhermann"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NDI3Ng==", "bodyText": "Good suggestion, I've changed the code accordingly", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439384276", "createdAt": "2020-06-12T12:18:49Z", "author": {"login": "probakowski"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDY0OQ=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA2OTIyOnYy", "diffSide": "RIGHT", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MDoxMlrOGhKS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoxODo1OFrOGjB5BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDg1Ng==", "bodyText": "same here and a couple other places below", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r437424856", "createdAt": "2020-06-09T13:40:12Z", "author": {"login": "danhermann"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NDMyNA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r439384324", "createdAt": "2020-06-12T12:18:58Z", "author": {"login": "probakowski"}, "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/DataStreamsSnapshotsIT.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.snapshots;\n+\n+import org.elasticsearch.ResourceNotFoundException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.DocWriteResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;\n+import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;\n+import org.elasticsearch.action.admin.indices.datastream.CreateDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.DeleteDataStreamAction;\n+import org.elasticsearch.action.admin.indices.datastream.GetDataStreamAction;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.indices.DataStreamIT;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.transport.RemoteTransportException;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class DataStreamsSnapshotsIT extends AbstractSnapshotIntegTestCase {\n+\n+    public void testSnapshotAndRestore() throws Exception {\n+        Client client = client();\n+\n+        Path location = randomRepoPath();\n+        createRepository(\"repo\", \"fs\", location);\n+\n+        DataStreamIT.createIndexTemplate(\"t1\", \"@timestamp\", \"ds\", \"other-ds\");\n+\n+        CreateDataStreamAction.Request request = new CreateDataStreamAction.Request(\"ds\");\n+        AcknowledgedResponse response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        request = new CreateDataStreamAction.Request(\"other-ds\");\n+        response = client.admin().indices().createDataStream(request).get();\n+        assertTrue(response.isAcknowledged());\n+\n+        Map<String, Integer> source = Collections.singletonMap(\"@timestamp\", 123);\n+        IndexResponse indexResponse = client.prepareIndex(\"ds\")\n+            .setOpType(DocWriteRequest.OpType.CREATE)\n+            .setSource(source)\n+            .get();\n+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());\n+\n+        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster()\n+            .prepareCreateSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .setIncludeGlobalState(false)\n+            .get();\n+\n+        RestStatus status = createSnapshotResponse.getSnapshotInfo().status();\n+        assertEquals(RestStatus.OK, status);\n+\n+        GetSnapshotsResponse snapshot = client.admin().cluster().prepareGetSnapshots(\"repo\").setSnapshots(\"snap\").get();\n+        List<SnapshotInfo> snap = snapshot.getSnapshots(\"repo\");\n+        assertEquals(1, snap.size());\n+        assertEquals(Collections.singletonList(\".ds-ds-000001\"), snap.get(0).indices());\n+\n+        assertTrue(client.admin().indices().deleteDataStream(new DeleteDataStreamAction.Request(\"ds\")).get().isAcknowledged());\n+\n+        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster()\n+            .prepareRestoreSnapshot(\"repo\", \"snap\")\n+            .setWaitForCompletion(true)\n+            .setIndices(\"ds\")\n+            .get();\n+\n+        assertEquals(1, restoreSnapshotResponse.getRestoreInfo().successfulShards());\n+\n+        GetResponse getResponse = client.prepareGet(\".ds-ds-000001\", indexResponse.getId()).get();\n+        assertEquals(source, getResponse.getSourceAsMap());\n+\n+        GetDataStreamAction.Response ds = client.admin().indices().getDataStreams(new GetDataStreamAction.Request(\"ds\")).get();\n+        assertEquals(1, ds.getDataStreams().size());\n+        assertEquals(1, ds.getDataStreams().get(0).getIndices().size());\n+        assertEquals(\".ds-ds-000001\", ds.getDataStreams().get(0).getIndices().get(0).getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDg1Ng=="}, "originalCommit": {"oid": "e51533f5ef320be6391ea790fe5eb15191a50f85"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE4MzExOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyOTo1MFrOGj5y3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyMDoyMlrOGlV6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg==", "bodyText": "What code guarantees that we don't trip this assertion? It seems to me I can simply remove a data stream while a non-partial snapshot is running right now can't I?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440300252", "createdAt": "2020-06-15T16:29:50Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNTk2OA==", "bodyText": "Should the delete data stream api then check for snapshots that are in progress and then fail is data stream to be deleted is being snapshotted? Similar to what is done in the delete index api for indices that are being snapshotted?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440605968", "createdAt": "2020-06-16T06:07:06Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNjg5Ng==", "bodyText": "Yea, I'd say so. We treat data streams and indices pretty much the same way in snapshot APIs here so being consistent here makes sense to me.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440606896", "createdAt": "2020-06-16T06:09:56Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwODYyNA==", "bodyText": "I think that this can be done in a followup?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440608624", "createdAt": "2020-06-16T06:14:40Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMDg2OA==", "bodyText": "I guess so but this assertion can trip until it's addressed and it's not a great place for the code to be in. We could throw an exception here then in place of the assertion and add a TODO but we are creating a situation where deleting data streams concurrently can either quietly corrupt snapshots or cause them to fail at the very last step of snapshotting (the later option seems ok to me for now).", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440610868", "createdAt": "2020-06-16T06:20:36Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyMzQ5Ng==", "bodyText": "I see, then it is better to address this issue in this PR.", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440623496", "createdAt": "2020-06-16T06:52:01Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwOTY2Mw==", "bodyText": "I've switched implementation to storing names of data streams in SnapshotInfo and added check in delete API for data streams being snapshotted.\nI'm not sure if we still need to add check for min node version(both in SnapshotsService and SnapshotInProgress), as you pointed out we won't be able to create any data stream in mixed cluster so we should never have a situation when we write data that can't be understood by any node.\nPlease let me know what do you think?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r441809663", "createdAt": "2020-06-17T20:20:22Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDI1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTE0MjkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjoyMzoyOFrOGkM0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNjowOFrOGlVy5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMTk1Mg==", "bodyText": "Another thing I just noticed, we will have to update the list of data streams that gets written to SnapshotInfo down the line in case of partial snapshots (if one was concurrently removed) won't we? Currently partial snapshots would list data streams in their SnapshotInfo that may not be part of the snapshot because they were concurrently deleted?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r440611952", "createdAt": "2020-06-16T06:23:28Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNzU5MA==", "bodyText": "The list is updated already, SnapshotInfo is created by the repository from data streams included in the metadata, not from the list in Entry", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r441807590", "createdAt": "2020-06-17T20:16:08Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -354,6 +371,22 @@ private static Metadata metadataForSnapshot(SnapshotsInProgress.Entry snapshot,\n                     builder.put(indexMetadata, false);\n                 }\n             }\n+\n+            if (snapshot.userMetadata() != null && snapshot.userMetadata().containsKey(DataStream.DATA_STREAMS_METADATA_FIELD)) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<String> dataStreamNames = (List<String>) snapshot.userMetadata().get(DataStream.DATA_STREAMS_METADATA_FIELD);\n+                Map<String, DataStream> dataStreams = new HashMap<>();\n+                for (String dataStreamName : dataStreamNames) {\n+                    DataStream dataStream = metadata.dataStreams().get(dataStreamName);\n+                    if (dataStream == null) {\n+                        assert snapshot.partial() : \"Data stream [\" + dataStreamName +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMTk1Mg=="}, "originalCommit": {"oid": "78ec5e7237e7b0fb8fc21917f8b95af7300696a4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg0OTAyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/DeleteDataStreamRequestTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjowNzo1NFrOGl2Tlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxOTozM1rOGmAlZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MDI0Ng==", "bodyText": "I think this would benefit from a real integration test like we have for indices with org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT#testCloseOrDeleteIndexDuringSnapshot. There's lots of things that can go wrong with changes to the snapshot code that this test won't catch. I think it's pretty easy to create an analogous test to org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT#testCloseOrDeleteIndexDuringSnapshot for data streams right?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442340246", "createdAt": "2020-06-18T16:07:54Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/DeleteDataStreamRequestTests.java", "diffHunk": "@@ -85,6 +90,31 @@ public void testDeleteDataStream() {\n         }\n     }\n \n+    public void testDeleteSnapshottingDataStream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwODY0Nw==", "bodyText": "You're right, I've added SharedClusterSnapshotRestoreIT.testDeleteDataStreamDuringSnapshot", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442508647", "createdAt": "2020-06-18T21:19:33Z", "author": {"login": "probakowski"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/DeleteDataStreamRequestTests.java", "diffHunk": "@@ -85,6 +90,31 @@ public void testDeleteDataStream() {\n         }\n     }\n \n+    public void testDeleteSnapshottingDataStream() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MDI0Ng=="}, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk0OTg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozNDowNVrOGl3UAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNzozMlrOGmAiGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjczNw==", "bodyText": "This can be reverted again I think", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442356737", "createdAt": "2020-06-18T16:34:05Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -194,7 +195,8 @@ public void createSnapshot(final CreateSnapshotRequest request, final ActionList\n             return;\n         }\n         final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);\n-        final Map<String, Object> userMeta = repository.adaptUserMetadata(request.userMetadata());\n+\n+        Map<String, Object> userMeta = repository.adaptUserMetadata(request.userMetadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNzgwMw==", "bodyText": "Yep, reverted", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442507803", "createdAt": "2020-06-18T21:17:32Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -194,7 +195,8 @@ public void createSnapshot(final CreateSnapshotRequest request, final ActionList\n             return;\n         }\n         final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);\n-        final Map<String, Object> userMeta = repository.adaptUserMetadata(request.userMetadata());\n+\n+        Map<String, Object> userMeta = repository.adaptUserMetadata(request.userMetadata());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjczNw=="}, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk1NzMwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/slm/SnapshotLifecycleRestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozNjoxN1rOGl3Y5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNzo0NFrOGmAibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Nzk4OQ==", "bodyText": "This comment does not apply?", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442357989", "createdAt": "2020-06-18T16:36:17Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/slm/SnapshotLifecycleRestIT.java", "diffHunk": "@@ -461,6 +465,49 @@ public void testBasicTimeBasedRetention() throws Exception {\n         }\n     }\n \n+    public void testDataStreams() throws Exception {\n+        String dataStreamName = \"ds-test\";\n+        String repoId = \"ds-repo\";\n+        String policyName = \"ds-policy\";\n+\n+        String mapping = \"{\\n\" +\n+            \"      \\\"properties\\\": {\\n\" +\n+            \"        \\\"@timestamp\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"date\\\"\\n\" +\n+            \"        }\\n\" +\n+            \"      }\\n\" +\n+            \"    }\";\n+        Template template = new Template(null, new CompressedXContent(mapping), null);\n+        createComposableTemplate(client(), \"ds-template\", dataStreamName, template);\n+\n+        client().performRequest(new Request(\"PUT\", \"_data_stream/\" + dataStreamName));\n+\n+        // Create a snapshot repo\n+        initializeRepo(repoId);\n+\n+        // Create a policy with a retention period of 1 millisecond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNzg4Ng==", "bodyText": "Yep, I've removed it", "url": "https://github.com/elastic/elasticsearch/pull/57675#discussion_r442507886", "createdAt": "2020-06-18T21:17:44Z", "author": {"login": "probakowski"}, "path": "x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/slm/SnapshotLifecycleRestIT.java", "diffHunk": "@@ -461,6 +465,49 @@ public void testBasicTimeBasedRetention() throws Exception {\n         }\n     }\n \n+    public void testDataStreams() throws Exception {\n+        String dataStreamName = \"ds-test\";\n+        String repoId = \"ds-repo\";\n+        String policyName = \"ds-policy\";\n+\n+        String mapping = \"{\\n\" +\n+            \"      \\\"properties\\\": {\\n\" +\n+            \"        \\\"@timestamp\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"date\\\"\\n\" +\n+            \"        }\\n\" +\n+            \"      }\\n\" +\n+            \"    }\";\n+        Template template = new Template(null, new CompressedXContent(mapping), null);\n+        createComposableTemplate(client(), \"ds-template\", dataStreamName, template);\n+\n+        client().performRequest(new Request(\"PUT\", \"_data_stream/\" + dataStreamName));\n+\n+        // Create a snapshot repo\n+        initializeRepo(repoId);\n+\n+        // Create a policy with a retention period of 1 millisecond", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Nzk4OQ=="}, "originalCommit": {"oid": "569e848d2b92a3b1ec86113ec13b4d2d20374226"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3682, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}