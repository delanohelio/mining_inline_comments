{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzQ0OTc2", "number": 64528, "title": "Add Netty ByteBuf Leak Check to REST Test Clusters", "bodyText": "We do this check in all tests that inherit from EsTestCase but didn't check for ByteBuf\nleaks in rest test clusters, which means we have very little coverage of the REST layer.\nWith recent reports of very rare leak warnings in logs I think it's worthwhile to do this check\nin REST tests as well.\nNOTE:  I'm not sure this way of doing the check is in line with how we do these things in the test infrastructure. Happy to rework this and do it differently, but it would be great to have this check in some form :)", "createdAt": "2020-11-03T13:47:06Z", "url": "https://github.com/elastic/elasticsearch/pull/64528", "merged": true, "mergeCommit": {"oid": "9612c9a02ae7906934183475b0c6dcb42cb3094e"}, "closed": true, "closedAt": "2020-12-03T23:40:24Z", "author": {"login": "original-brownbear"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY5X_wgH2gAyNTE0NzQ0OTc2OmQ4MzM0M2Y2ZWU2MWE0NTU0M2NiZWQ1Mzc0N2JlMTNlZmViMzYyMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdirokAgFqTU0NDU0MzAzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d83343f6ee61a45543cbed53747be13efeb36228", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/d83343f6ee61a45543cbed53747be13efeb36228", "committedDate": "2020-11-03T13:42:13Z", "message": "Add Netty ByteBuf Leak Check to REST Test Clusters\n\nWe do this check in all tests that inherit from `EsTestCase` but didn't check for `ByteBuf`\nleaks in rest test clusters, which means we have very little coverage of the REST layer.\nWith recent reports of very rare leak warnings in logs I think it's worthwhile to do this check\nin REST tests as well."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzE0Mzc5", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-534714379", "createdAt": "2020-11-19T18:04:45Z", "commit": {"oid": "d83343f6ee61a45543cbed53747be13efeb36228"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e6df7c2256f8dbbc3cde121da090852ad0f655", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/65e6df7c2256f8dbbc3cde121da090852ad0f655", "committedDate": "2020-11-23T03:06:09Z", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc7c5fe9ea8d9c8b242be0567610b001921d137b", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/bc7c5fe9ea8d9c8b242be0567610b001921d137b", "committedDate": "2020-11-23T05:23:24Z", "message": "CR: add mute facility and enhance failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Mjg2MzA1", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-536286305", "createdAt": "2020-11-23T09:18:12Z", "commit": {"oid": "bc7c5fe9ea8d9c8b242be0567610b001921d137b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzU2MDQx", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-536756041", "createdAt": "2020-11-23T18:51:17Z", "commit": {"oid": "bc7c5fe9ea8d9c8b242be0567610b001921d137b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1MToxN1rOH4a9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1MToxN1rOH4a9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMzk5Mw==", "bodyText": "We need to make this lenient. Calling get() here will throw an exception if that extra property isn't defined, which it may not be for external users of this plugin. We need to check for its existance first.", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r528923993", "createdAt": "2020-11-23T18:51:17Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -968,31 +970,58 @@ private void logFileContents(String description, Path from) {\n                 }\n             }\n         } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            if (tailLogs) {\n+                throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            }\n+            return;\n         }\n \n-        if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n-            LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n-        }\n-        if (errorsAndWarnings.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n-            errorsAndWarnings.forEach((message, count) -> {\n-                LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                if (count > 1) {\n-                    LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n-                }\n-            });\n+        boolean foundNettyLeaks = false;\n+        for (String logLine : errorsAndWarnings.keySet()) {\n+            if (logLine.contains(\"ResourceLeakDetector]\")) {\n+                tailLogs = true;\n+                foundNettyLeaks = true;\n+                break;\n+            }\n         }\n+        if (tailLogs) {\n+            if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n+                LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n+            }\n+            if (errorsAndWarnings.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n+                errorsAndWarnings.forEach((message, count) -> {\n+                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    if (count > 1) {\n+                        LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n+                    }\n+                });\n+            }\n \n-        ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n+            ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n \n-        if (ring.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n-            ring.forEach(message -> {\n-                if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n-                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                }\n-            });\n+            if (ring.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n+                ring.forEach(message -> {\n+                    if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n+                        LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    }\n+                });\n+            }\n+        }\n+        if (foundNettyLeaks) {\n+            final boolean leakTestsEnabled = (Boolean) project.getExtensions().getExtraProperties().get(\"netty_leak_tests_enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7c5fe9ea8d9c8b242be0567610b001921d137b"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e52658291d3acc34440d2bfb63e360da0e1b8886", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/e52658291d3acc34440d2bfb63e360da0e1b8886", "committedDate": "2020-11-24T08:40:18Z", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4518373c0d7f2bc964b40fc51fa1685459a859c2", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/4518373c0d7f2bc964b40fc51fa1685459a859c2", "committedDate": "2020-11-24T08:48:17Z", "message": "CR: check for exists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8e0cb262d65c82542ac2b45391fedb730be64b", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/af8e0cb262d65c82542ac2b45391fedb730be64b", "committedDate": "2020-11-24T09:25:13Z", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf33333310b5dddf48a0d514f68d88be718b00b", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/ccf33333310b5dddf48a0d514f68d88be718b00b", "committedDate": "2020-11-24T09:29:56Z", "message": "cleaner boolean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODE5OTgx", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-537819981", "createdAt": "2020-11-24T19:03:03Z", "commit": {"oid": "ccf33333310b5dddf48a0d514f68d88be718b00b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMzowNFrOH5RILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMzowNFrOH5RILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTUwMg==", "bodyText": "I think we want this to be final boolean leakTestsEnabled = extension.has(\"netty_leak_tests_enabled\") && (Boolean) extension.get(\"netty_leak_tests_enabled\");. For external plugin authors we want this disabled by default.", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r529811502", "createdAt": "2020-11-24T19:03:04Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -968,31 +971,60 @@ private void logFileContents(String description, Path from) {\n                 }\n             }\n         } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            if (tailLogs) {\n+                throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            }\n+            return;\n         }\n \n-        if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n-            LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n-        }\n-        if (errorsAndWarnings.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n-            errorsAndWarnings.forEach((message, count) -> {\n-                LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                if (count > 1) {\n-                    LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n-                }\n-            });\n+        boolean foundNettyLeaks = false;\n+        for (String logLine : errorsAndWarnings.keySet()) {\n+            if (logLine.contains(\"ResourceLeakDetector]\")) {\n+                tailLogs = true;\n+                foundNettyLeaks = true;\n+                break;\n+            }\n         }\n+        if (tailLogs) {\n+            if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n+                LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n+            }\n+            if (errorsAndWarnings.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n+                errorsAndWarnings.forEach((message, count) -> {\n+                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    if (count > 1) {\n+                        LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n+                    }\n+                });\n+            }\n \n-        ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n+            ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n \n-        if (ring.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n-            ring.forEach(message -> {\n-                if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n-                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                }\n-            });\n+            if (ring.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n+                ring.forEach(message -> {\n+                    if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n+                        LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    }\n+                });\n+            }\n+        }\n+        if (foundNettyLeaks) {\n+            final ExtraPropertiesExtension extension = project.getExtensions().getExtraProperties();\n+            final boolean leakTestsEnabled = extension.has(\"netty_leak_tests_enabled\") == false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf33333310b5dddf48a0d514f68d88be718b00b"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1ea876aeeb794816e7dde373ca41075871e0e0", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/4f1ea876aeeb794816e7dde373ca41075871e0e0", "committedDate": "2020-12-02T07:22:30Z", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6b6007734c3b450439abde3a6f8240b4c5593e6", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/a6b6007734c3b450439abde3a6f8240b4c5593e6", "committedDate": "2020-12-02T07:41:31Z", "message": "default to false"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDcwNjI3", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-543070627", "createdAt": "2020-12-02T17:26:05Z", "commit": {"oid": "a6b6007734c3b450439abde3a6f8240b4c5593e6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyNjowNVrOH9mBmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyNjowNVrOH9mBmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0ODE4Ng==", "bodyText": "Let's log this at warn level since we aren't failing the build.", "url": "https://github.com/elastic/elasticsearch/pull/64528#discussion_r534348186", "createdAt": "2020-12-02T17:26:05Z", "author": {"login": "mark-vieira"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java", "diffHunk": "@@ -985,31 +988,58 @@ private void logFileContents(String description, Path from) {\n                 }\n             }\n         } catch (IOException e) {\n-            throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            if (tailLogs) {\n+                throw new UncheckedIOException(\"Failed to tail log \" + this, e);\n+            }\n+            return;\n         }\n \n-        if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n-            LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n-        }\n-        if (errorsAndWarnings.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n-            errorsAndWarnings.forEach((message, count) -> {\n-                LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                if (count > 1) {\n-                    LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n-                }\n-            });\n+        boolean foundNettyLeaks = false;\n+        for (String logLine : errorsAndWarnings.keySet()) {\n+            if (logLine.contains(\"ResourceLeakDetector]\")) {\n+                tailLogs = true;\n+                foundNettyLeaks = true;\n+                break;\n+            }\n         }\n+        if (tailLogs) {\n+            if (errorsAndWarnings.isEmpty() == false || ring.isEmpty() == false) {\n+                LOGGER.error(\"\\n=== {} `{}` ===\", description, this);\n+            }\n+            if (errorsAndWarnings.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\\n\u00bb    \u2193 errors and warnings from \" + from + \" \u2193\");\n+                errorsAndWarnings.forEach((message, count) -> {\n+                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    if (count > 1) {\n+                        LOGGER.lifecycle(\"\u00bb   \u2191 repeated \" + count + \" times \u2191\");\n+                    }\n+                });\n+            }\n \n-        ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n+            ring.removeIf(line -> MESSAGES_WE_DONT_CARE_ABOUT.stream().anyMatch(line::contains));\n \n-        if (ring.isEmpty() == false) {\n-            LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n-            ring.forEach(message -> {\n-                if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n-                    LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n-                }\n-            });\n+            if (ring.isEmpty() == false) {\n+                LOGGER.lifecycle(\"\u00bb   \u2193 last \" + TAIL_LOG_MESSAGES_COUNT + \" non error or warning messages from \" + from + \" \u2193\");\n+                ring.forEach(message -> {\n+                    if (errorsAndWarnings.containsKey(normalizeLogLine(message)) == false) {\n+                        LOGGER.lifecycle(\"\u00bb \" + message.replace(\"\\n\", \"\\n\u00bb  \"));\n+                    }\n+                });\n+            }\n+        }\n+        if (foundNettyLeaks) {\n+            final ExtraPropertiesExtension extension = project.getExtensions().getExtraProperties();\n+            if (extension.has(\"netty_leak_tests_enabled\") && (Boolean) extension.get(\"netty_leak_tests_enabled\")) {\n+                throw new TestClustersException(\n+                    \"Found Netty ByteBuf leaks in node logs. In order to temporarily mute this check, set \"\n+                        + \"\\\"netty_leak_tests_enabled\\\" to false in the root level build.gradle file\"\n+                );\n+            } else {\n+                LOGGER.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b6007734c3b450439abde3a6f8240b4c5593e6"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTIxNjgy", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-543121682", "createdAt": "2020-12-02T18:27:29Z", "commit": {"oid": "a6b6007734c3b450439abde3a6f8240b4c5593e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e431859e630c78cca7356056e70610937bc10ecf", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/e431859e630c78cca7356056e70610937bc10ecf", "committedDate": "2020-12-03T08:10:58Z", "message": "Merge remote-tracking branch 'elastic/master' into netty-leak-check-rest-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "652ee3cbeed35bae03c3612127efa7efbc7dbc92", "author": {"user": {"login": "original-brownbear", "name": "Armin Braun"}}, "url": "https://github.com/elastic/elasticsearch/commit/652ee3cbeed35bae03c3612127efa7efbc7dbc92", "committedDate": "2020-12-03T08:17:32Z", "message": "bye escape hatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTQzMDM5", "url": "https://github.com/elastic/elasticsearch/pull/64528#pullrequestreview-544543039", "createdAt": "2020-12-03T23:20:53Z", "commit": {"oid": "652ee3cbeed35bae03c3612127efa7efbc7dbc92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 782, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}