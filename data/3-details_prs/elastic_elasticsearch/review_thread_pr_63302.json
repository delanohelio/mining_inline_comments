{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MzA4MDM5", "number": 63302, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTozNzozNVrOEqr7GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0Mzo0M1rOEqsDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk1Mjg5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTozNzozNVrOHdCHqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNjowNlrOHdj0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNTQ4Mg==", "bodyText": "\"well actually\" 1-p doesn't seem correct here as there could be more than two classes.\nBut, from what I tell, this doesn't effect the testing, right?", "url": "https://github.com/elastic/elasticsearch/pull/63302#discussion_r500205482", "createdAt": "2020-10-06T11:37:35Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningIT.java", "diffHunk": "@@ -2143,15 +2142,19 @@ private static XContentBuilder mappingForClassification() throws IOException {\n         .endObject();\n     }\n \n-    private static IndexRequest docForClassification(String indexName, String actualClass, String predictedClass, double p) {\n+    private static IndexRequest docForClassification(String indexName,\n+                                                     String actualClass,\n+                                                     String predictedClass,\n+                                                     double p,\n+                                                     String otherClass) {\n         return new IndexRequest()\n             .index(indexName)\n             .source(XContentType.JSON,\n                 actualClassField, actualClass,\n                 predictedClassField, predictedClass,\n                 topClassesField, List.of(\n                     Map.of(\"class_name\", predictedClass, \"class_probability\", p),\n-                    Map.of(\"class_name\", \"other\", \"class_probability\", 1 - p)));\n+                    Map.of(\"class_name\", otherClass, \"class_probability\", 1 - p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d8a2464021824a734a001d20359536e3318432"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NzU1Mw==", "bodyText": "\"well actually\" 1-p doesn't seem correct here as there could be more than two classes.\n\nThis is a test of Evaluate API but without running the analysis so the dataset here is synthetic and predictable.\n\nBut, from what I tell, this doesn't effect the testing, right?\n\nIndeed, it doesn't.", "url": "https://github.com/elastic/elasticsearch/pull/63302#discussion_r500757553", "createdAt": "2020-10-07T06:06:06Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/MachineLearningIT.java", "diffHunk": "@@ -2143,15 +2142,19 @@ private static XContentBuilder mappingForClassification() throws IOException {\n         .endObject();\n     }\n \n-    private static IndexRequest docForClassification(String indexName, String actualClass, String predictedClass, double p) {\n+    private static IndexRequest docForClassification(String indexName,\n+                                                     String actualClass,\n+                                                     String predictedClass,\n+                                                     double p,\n+                                                     String otherClass) {\n         return new IndexRequest()\n             .index(indexName)\n             .source(XContentType.JSON,\n                 actualClassField, actualClass,\n                 predictedClassField, predictedClass,\n                 topClassesField, List.of(\n                     Map.of(\"class_name\", predictedClass, \"class_probability\", p),\n-                    Map.of(\"class_name\", \"other\", \"class_probability\", 1 - p)));\n+                    Map.of(\"class_name\", otherClass, \"class_probability\", 1 - p)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNTQ4Mg=="}, "originalCommit": {"oid": "16d8a2464021824a734a001d20359536e3318432"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk1OTc0OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/MlClientDocumentationIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTozOTozOVrOHdCL5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoxMjo0N1rOHdnpqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNjU2Ng==", "bodyText": "Honestly, I think it would be good to have more than two classes here to really represent the multi-class case.", "url": "https://github.com/elastic/elasticsearch/pull/63302#discussion_r500206566", "createdAt": "2020-10-06T11:39:39Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/MlClientDocumentationIT.java", "diffHunk": "@@ -3466,28 +3466,28 @@ public void testEvaluateDataFrame_Classification() throws Exception {\n                         .endObject()\n                     .endObject()\n                     .endObject());\n-        TriFunction<String, String, Double, IndexRequest> indexRequest = (actualClass, predictedClass, p) -> {\n+        TriFunction<String, String, String, IndexRequest> indexRequest = (actualClass, predictedClass, otherClass) -> {\n             return new IndexRequest()\n                 .source(XContentType.JSON,\n                     \"actual_class\", actualClass,\n                     \"predicted_class\", predictedClass,\n                     \"ml.top_classes\", List.of(\n-                        Map.of(\"class_name\", predictedClass, \"class_probability\", p),\n-                        Map.of(\"class_name\", \"other\", \"class_probability\", 1 - p)));\n+                        Map.of(\"class_name\", predictedClass, \"class_probability\", 0.9),\n+                        Map.of(\"class_name\", otherClass, \"class_probability\", 0.1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d8a2464021824a734a001d20359536e3318432"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMDM5Mg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/63302#discussion_r500820392", "createdAt": "2020-10-07T08:12:47Z", "author": {"login": "przemekwitek"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/MlClientDocumentationIT.java", "diffHunk": "@@ -3466,28 +3466,28 @@ public void testEvaluateDataFrame_Classification() throws Exception {\n                         .endObject()\n                     .endObject()\n                     .endObject());\n-        TriFunction<String, String, Double, IndexRequest> indexRequest = (actualClass, predictedClass, p) -> {\n+        TriFunction<String, String, String, IndexRequest> indexRequest = (actualClass, predictedClass, otherClass) -> {\n             return new IndexRequest()\n                 .source(XContentType.JSON,\n                     \"actual_class\", actualClass,\n                     \"predicted_class\", predictedClass,\n                     \"ml.top_classes\", List.of(\n-                        Map.of(\"class_name\", predictedClass, \"class_probability\", p),\n-                        Map.of(\"class_name\", \"other\", \"class_probability\", 1 - p)));\n+                        Map.of(\"class_name\", predictedClass, \"class_probability\", 0.9),\n+                        Map.of(\"class_name\", otherClass, \"class_probability\", 0.1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNjU2Ng=="}, "originalCommit": {"oid": "16d8a2464021824a734a001d20359536e3318432"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk3NDk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0Mzo0M1rOHdCUtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjo0MDoxMVrOHdknNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwODgyMA==", "bodyText": "Do you think it would be good to give the potential solution for the analytics case? Maybe something like \"This is probably caused by the num_top_classes value being less than the total number of classes in the data frame analytics training configuration\"\nI am sure there is better wording :).", "url": "https://github.com/elastic/elasticsearch/pull/63302#discussion_r500208820", "createdAt": "2020-10-06T11:43:43Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "diffHunk": "@@ -182,42 +182,43 @@ public void process(Aggregations aggs) {\n         Filter classAgg = aggs.get(TRUE_AGG_NAME);\n         Nested classNested = classAgg.getAggregations().get(NESTED_AGG_NAME);\n         Filter classNestedFilter = classNested.getAggregations().get(NESTED_FILTER_AGG_NAME);\n+\n+        Filter restAgg = aggs.get(NON_TRUE_AGG_NAME);\n+        Nested restNested = restAgg.getAggregations().get(NESTED_AGG_NAME);\n+        Filter restNestedFilter = restNested.getAggregations().get(NESTED_FILTER_AGG_NAME);\n+\n+        long filteredDocCount = classNestedFilter.getDocCount() + restNestedFilter.getDocCount();\n+        long totalDocCount = classAgg.getDocCount() + restAgg.getDocCount();\n+\n         if (classAgg.getDocCount() == 0) {\n             throw ExceptionsHelper.badRequestException(\n                 \"[{}] requires at least one [{}] to have the value [{}]\",\n                 getName(), fields.get().getActualField(), className);\n         }\n-        if (classNestedFilter.getDocCount() == 0) {\n+        if (classNestedFilter.getDocCount() < classAgg.getDocCount()) {\n             throw ExceptionsHelper.badRequestException(\n-                \"[{}] requires at least one [{}] to have the value [{}]\",\n-                getName(), fields.get().getPredictedClassField(), className);\n+                \"[{}] requires that [{}] appears as one of the [{}] for every document (appeared for {} out of {})\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d8a2464021824a734a001d20359536e3318432"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc3MDYxNA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/63302#discussion_r500770614", "createdAt": "2020-10-07T06:40:11Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/evaluation/classification/AucRoc.java", "diffHunk": "@@ -182,42 +182,43 @@ public void process(Aggregations aggs) {\n         Filter classAgg = aggs.get(TRUE_AGG_NAME);\n         Nested classNested = classAgg.getAggregations().get(NESTED_AGG_NAME);\n         Filter classNestedFilter = classNested.getAggregations().get(NESTED_FILTER_AGG_NAME);\n+\n+        Filter restAgg = aggs.get(NON_TRUE_AGG_NAME);\n+        Nested restNested = restAgg.getAggregations().get(NESTED_AGG_NAME);\n+        Filter restNestedFilter = restNested.getAggregations().get(NESTED_FILTER_AGG_NAME);\n+\n+        long filteredDocCount = classNestedFilter.getDocCount() + restNestedFilter.getDocCount();\n+        long totalDocCount = classAgg.getDocCount() + restAgg.getDocCount();\n+\n         if (classAgg.getDocCount() == 0) {\n             throw ExceptionsHelper.badRequestException(\n                 \"[{}] requires at least one [{}] to have the value [{}]\",\n                 getName(), fields.get().getActualField(), className);\n         }\n-        if (classNestedFilter.getDocCount() == 0) {\n+        if (classNestedFilter.getDocCount() < classAgg.getDocCount()) {\n             throw ExceptionsHelper.badRequestException(\n-                \"[{}] requires at least one [{}] to have the value [{}]\",\n-                getName(), fields.get().getPredictedClassField(), className);\n+                \"[{}] requires that [{}] appears as one of the [{}] for every document (appeared for {} out of {})\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwODgyMA=="}, "originalCommit": {"oid": "16d8a2464021824a734a001d20359536e3318432"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3108, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}