{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzA2OTYx", "number": 60534, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowODoyOFrOEUpNAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowODoyOFrOEUpNAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDgyMDQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ccr/src/internalClusterTest/java/org/elasticsearch/xpack/ccr/IndexFollowingIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowODoyOFrOG69WbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowODoyOFrOG69WbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTc1Nw==", "bodyText": "This is not blocking for the result?", "url": "https://github.com/elastic/elasticsearch/pull/60534#discussion_r464475757", "createdAt": "2020-08-03T15:08:28Z", "author": {"login": "ywelsch"}, "path": "x-pack/plugin/ccr/src/internalClusterTest/java/org/elasticsearch/xpack/ccr/IndexFollowingIT.java", "diffHunk": "@@ -248,38 +248,23 @@ public void testFollowIndexWithConcurrentMappingChanges() throws Exception {\n         final int firstBatchNumDocs = randomIntBetween(2, 64);\n         logger.info(\"Indexing [{}] docs as first batch\", firstBatchNumDocs);\n         for (int i = 0; i < firstBatchNumDocs; i++) {\n-            final String source = String.format(Locale.ROOT, \"{\\\"f\\\":%d}\", i);\n-            leaderClient().prepareIndex(\"index1\").setId(Integer.toString(i)).setSource(source, XContentType.JSON).get();\n+            leaderClient().prepareIndex(\"index1\").setId(Integer.toString(i)).setSource(\"f\", i).get();\n         }\n \n         AtomicBoolean isRunning = new AtomicBoolean(true);\n \n         // Concurrently index new docs with mapping changes\n+        int numFields = between(10, 20);\n         Thread thread = new Thread(() -> {\n-            int docID = 10000;\n-            char[] chars = \"abcdeghijklmnopqrstuvwxyz\".toCharArray();\n-            for (char c : chars) {\n+            int numDocs = between(10, 200);\n+            for (int i = 0; i < numDocs; i++) {\n                 if (isRunning.get() == false) {\n                     break;\n                 }\n-                final String source;\n-                long valueToPutInDoc = randomLongBetween(0, 50000);\n-                if (randomBoolean()) {\n-                    source = String.format(Locale.ROOT, \"{\\\"%c\\\":%d}\", c, valueToPutInDoc);\n-                } else {\n-                    source = String.format(Locale.ROOT, \"{\\\"%c\\\":\\\"%d\\\"}\", c, valueToPutInDoc);\n-                }\n-                for (int i = 1; i < 10; i++) {\n-                    if (isRunning.get() == false) {\n-                        break;\n-                    }\n-                    leaderClient().prepareIndex(\"index1\").setId(Long.toString(docID++)).setSource(source, XContentType.JSON).get();\n-                    if (rarely()) {\n-                        leaderClient().admin().indices().prepareFlush(\"index1\").setForce(true).get();\n-                    }\n-                }\n-                if (between(0, 100) < 20) {\n-                    leaderClient().admin().indices().prepareFlush(\"index1\").setForce(false).setWaitIfOngoing(false).get();\n+                final String field = \"f-\" + between(1, numFields);\n+                leaderClient().prepareIndex(\"index1\").setSource(field, between(0, 1000)).get();\n+                if (rarely()) {\n+                    leaderClient().admin().indices().prepareFlush(\"index1\").setWaitIfOngoing(false).setForce(false).execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fd2badcb18bbe3831815840086d7cad50aac99"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2690, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}