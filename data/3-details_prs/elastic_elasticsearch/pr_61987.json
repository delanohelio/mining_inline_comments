{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5Njc3MTcy", "number": 61987, "title": "Media-type parser", "bodyText": "Splitting method XContentType.fromMediaTypeOrFormat into two separate methods. This will help to validate media type provided in Accept or Content-Type headers.\nExtract parsing logic from XContentType (fromMediaType and fromFormat methods) to a separate MediaTypeParser class. This will help reuse the same parsing logic for XContentType and TextFormat (used in sql)\nMedia-Types type/subtype; parameters parsing is in defined https://tools.ietf.org/html/rfc7231#section-3.1.1.1\nbased on #61845\npart of Allow parsing Content-Type and Accept headers with version #61427", "createdAt": "2020-09-04T13:17:00Z", "url": "https://github.com/elastic/elasticsearch/pull/61987", "merged": true, "mergeCommit": {"oid": "86ba7324c8ce99b484ed27827c8c04a57383dfde"}, "closed": true, "closedAt": "2020-09-17T14:47:32Z", "author": {"login": "pgomulka"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE6zL0AH2gAyNDc5Njc3MTcyOjVlNDIzOTA5OWM0NGZmNzg1NzQ2ZWQ3ZWU4NmIzMjY3ODk5MTBjNGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJwk-ZgH2gAyNDc5Njc3MTcyOjQ1OThhMGE5YTFkYmMzMDE2NzNlMjE3ODQ5YmUxMWM3Nzc4Y2M1Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e4239099c44ff785746ed7ee86b326789910c4d", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/5e4239099c44ff785746ed7ee86b326789910c4d", "committedDate": "2020-09-02T12:03:20Z", "message": "Split responsibility for format parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f001d57540b3d44634551ee067e443eae09b75", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/01f001d57540b3d44634551ee067e443eae09b75", "committedDate": "2020-09-02T12:24:16Z", "message": "parse * and ndjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50a88a0d190a882ed3cb389d17a97349de6e540a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/50a88a0d190a882ed3cb389d17a97349de6e540a", "committedDate": "2020-09-02T12:26:40Z", "message": "make format not accepting applicaiton/"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb03ffd4551e01e2b86b7ec1a8bdff4610eaccfd", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/fb03ffd4551e01e2b86b7ec1a8bdff4610eaccfd", "committedDate": "2020-09-02T12:35:26Z", "message": "post data request should parse applicaiton/json style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f281ecf956a7dc76c72daedc18dbb097709d02", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/09f281ecf956a7dc76c72daedc18dbb097709d02", "committedDate": "2020-09-02T14:34:45Z", "message": "unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc024f5af943b2e38dce377dae21c8db34115aa", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/8bc024f5af943b2e38dce377dae21c8db34115aa", "committedDate": "2020-09-02T15:11:32Z", "message": "fix sql parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070508c2a2adc3e1197377f6747de18fff3c4b88", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/070508c2a2adc3e1197377f6747de18fff3c4b88", "committedDate": "2020-09-03T13:32:00Z", "message": "split format and accept header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c7ab16fc839d7ade510e8025ad39f106d12752f", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/3c7ab16fc839d7ade510e8025ad39f106d12752f", "committedDate": "2020-09-03T15:29:51Z", "message": "fix and todos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a7f42f1877c31102196900c9e33ee1dc6ededd", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/59a7f42f1877c31102196900c9e33ee1dc6ededd", "committedDate": "2020-09-03T16:09:35Z", "message": "Merge branch 'master' into xcontent_format_parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968b1c98da20f2efecd989d6b5926e4241ec46e0", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/968b1c98da20f2efecd989d6b5926e4241ec46e0", "committedDate": "2020-09-04T13:04:22Z", "message": "media type parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46f8f33af567e170cf235f12f246b689dbf687d9", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/46f8f33af567e170cf235f12f246b689dbf687d9", "committedDate": "2020-09-04T13:12:39Z", "message": "media type parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbe0933024511f2e5fd9686df8f95df4d86be08", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/cbbe0933024511f2e5fd9686df8f95df4d86be08", "committedDate": "2020-09-04T14:33:00Z", "message": "precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222caeea550d1d0340e717546cc280b64c5d1c58", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/222caeea550d1d0340e717546cc280b64c5d1c58", "committedDate": "2020-09-07T08:21:21Z", "message": "rename and null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bdec139fc47573e4d7de0b95994dd25714708ed", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/6bdec139fc47573e4d7de0b95994dd25714708ed", "committedDate": "2020-09-07T08:40:32Z", "message": "Merge branch 'master' into header_version_split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9756490274252a6ee4f9f18956e32d80c98aeb", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee9756490274252a6ee4f9f18956e32d80c98aeb", "committedDate": "2020-09-07T08:51:29Z", "message": "Merge branch 'master' into header_version_split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f52e11aae3df3fe785f30d5c4668cae5b663058", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/7f52e11aae3df3fe785f30d5c4668cae5b663058", "committedDate": "2020-09-07T10:52:30Z", "message": "fix text format parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/63db70c3c79a2343f4c4864d1f77fb96cfecc657", "committedDate": "2020-09-08T10:56:07Z", "message": "Merge branch 'master' into header_version_split"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTkzMzM5", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-484193339", "createdAt": "2020-09-08T14:24:01Z", "commit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDoyNDowMlrOHOfrtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDozNToxOVrOHOgOaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MTIwNA==", "bodyText": "Wondering if this media-type origin split is strictly necessary: the previous code tried to fetch a token from somewhere - in order of preference: enforced format (CBOR), format URL attribute, Accept header, Content-Type header and repeatedly checking accept against null - then validate that token against a media type or as a format (#fromMediaTypeOrFormat()).\nThe new code checks if it's a format (in getXContentType() @ L143), or then if it's a media type, by one of these XContentType instances (@ L147). But the source preferences is already stored in the way the accept member is set (by those subsequent null checks), so could we not simply serially invoke #fromMediaType(accept) and #fromFormat(accept) and return the first non-null value to simplify the code? Similar to what we do in TextFormat#fromMediaTypeOrFormat().", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484961204", "createdAt": "2020-09-08T14:24:02Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -65,6 +65,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          * isn't then we use the {@code Content-Type} header which is required.\n          */\n         String accept = null;\n+        XContentType acceptHeader = null;\n+        XContentType contentTypeHeader = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ==", "bodyText": "Is the extension necessary?", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484963165", "createdAt": "2020-09-08T14:26:33Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -32,7 +34,7 @@\n /**\n  * Templating class for displaying SQL responses in text formats.\n  */\n-enum TextFormat {\n+enum TextFormat implements MediaType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2NTExMw==", "bodyText": "remove reminder.", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484965113", "createdAt": "2020-09-08T14:29:06Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -92,7 +97,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          * that doesn't parse it'll throw an {@link IllegalArgumentException}\n          * which we turn into a 400 error.\n          */\n-        XContentType xContentType = accept == null ? XContentType.JSON : XContentType.fromMediaTypeOrFormat(accept);\n+        //TODO PG this all logic needs a review from SQL team", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MDA4OA==", "bodyText": "Good to know. Having multiple header fields with same name is legal though, I guess we should leave it as is.", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484970088", "createdAt": "2020-09-08T14:35:19Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -197,6 +204,7 @@ String maybeEscape(String value, Character delimiter) {\n         boolean hasHeader(RestRequest request) {\n             String header = request.param(URL_PARAM_HEADER);\n             if (header == null) {\n+                //TODO PG in most places we only assume one accept header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzM2MTE1", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-484336115", "createdAt": "2020-09-08T17:07:10Z", "commit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowNzoxMFrOHOmbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxNDoyN1rOHOmq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MTc0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return type()+\"/\"+subtype();\n          \n          \n            \n                    return type() + \"/\" + subtype();", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485071742", "createdAt": "2020-09-08T17:07:10Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();\n+\n+    default String typeSubtype(){\n+        return type()+\"/\"+subtype();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjI4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(format == null) {\n          \n          \n            \n                    if (format == null) {", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485072287", "createdAt": "2020-09-08T17:08:13Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485072915", "createdAt": "2020-09-08T17:09:18Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MzM2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n          \n          \n            \n                public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485073365", "createdAt": "2020-09-08T17:10:06Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,54 +111,31 @@ public XContent xContent() {\n         }\n     };\n \n+    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDE0Mw==", "bodyText": "can we remove this method? I favor immutability and this could be replaced by a constructor that takes another argument that is a map?", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074143", "createdAt": "2020-09-08T17:11:35Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDM4Mw==", "bodyText": "Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074383", "createdAt": "2020-09-08T17:11:59Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,54 +111,31 @@ public XContent xContent() {\n         }\n     };\n \n+    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n+        .withAdditionalMediaType(\"application/*\", JSON)\n+        .withAdditionalMediaType(\"application/x-ndjson\", JSON);\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDk1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(responseContentType == null) {\n          \n          \n            \n                        if (responseContentType == null) {", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074958", "createdAt": "2020-09-08T17:13:05Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -96,7 +98,11 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            responseContentType = XContentType.fromMediaTypeOrFormat(format);\n+            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n+            responseContentType = XContentType.fromFormat(format);\n+            if(responseContentType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTUyOQ==", "bodyText": "Maybe open an issue for this. My guess is that there is some precedence already and it might be that format overrides the header", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485075529", "createdAt": "2020-09-08T17:14:09Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -96,7 +98,11 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            responseContentType = XContentType.fromMediaTypeOrFormat(format);\n+            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTcwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(request.hasParam(\"format\")) {\n          \n          \n            \n                    if (request.hasParam(\"format\")) {", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485075702", "createdAt": "2020-09-08T17:14:27Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java", "diffHunk": "@@ -51,13 +51,20 @@\n \n     public static RestResponse buildResponse(Table table, RestChannel channel) throws Exception {\n         RestRequest request = channel.request();\n-        XContentType xContentType = XContentType.fromMediaTypeOrFormat(request.param(\"format\", request.header(\"Accept\")));\n+        XContentType xContentType = getxContentType(request);\n         if (xContentType != null) {\n             return buildXContentBuilder(table, channel);\n         }\n         return buildTextPlainResponse(table, channel);\n     }\n \n+    private static XContentType getxContentType(RestRequest request) {\n+        if(request.hasParam(\"format\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTgyMTI4", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-484582128", "createdAt": "2020-09-09T00:39:21Z", "commit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDozOToyMlrOHOyilg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyOTowMVrOHOzWlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDE2Ng==", "bodyText": "I think you need to check for keyValueParam.size before accessing [1] in the case of a malformed key= (no value)", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485270166", "createdAt": "2020-09-09T00:39:22Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng==", "bodyText": "I'm not sure I completely follow the format variant of parsing... but I think this method does not support that... right ?\nThe previous version accepted either variants (format (json) or the mime type (application/json) ... so splitting these requires the caller to know know which one to call.\nI see two cases TextTemplateEngine and RestSqlQueryAction where it is not immediately obvious that is correct. It seems strange that we would support this shorter name in some cases for parsing headers, but not others, and when the the format variant is used (e.g. json) is used we don't support parsing the parameters.\nIs possible to just support the mime type for all content-type and accept header parsing ? (leaving the format soley to the realm of the query string parameter)", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485275066", "createdAt": "2020-09-09T00:58:13Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3ODEyOQ==", "bodyText": "Format, shortName, and subType seem like 3 ways to represent the same thing, and would be great if we could get to a common term (subtype) across the board. I think we can just drop format in favor of subtype ?", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485278129", "createdAt": "2020-09-09T01:09:41Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3OTkyNw==", "bodyText": "I think type and subtype here are redundant since they can be found via the MediaType", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485279927", "createdAt": "2020-09-09T01:15:57Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                    }\n+                    return new ParsedMediaType(type, subtype, parameters, xContentType);\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * A media type object that contains all the information provided on a Content-Type or Accept header\n+     * // TODO PG to be extended with getCompatibleAPIVersion and more\n+     */\n+    public class ParsedMediaType {\n+        private final String type;\n+        private final String subtype;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjkxOA==", "bodyText": "nit: typeWithSubtype or or just get() or asString", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485282918", "createdAt": "2020-09-09T01:27:08Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();\n+\n+    default String typeSubtype(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzQ3OQ==", "bodyText": "nit: typeWithSubTypeToMediaType or stringToMediaType", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485283479", "createdAt": "2020-09-09T01:29:01Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/57ddb407557e4cf5b97a8a030bf97da7d836c728", "committedDate": "2020-09-09T08:11:57Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "committedDate": "2020-09-09T14:59:09Z", "message": "code review follow up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/90e798dd31197bc7424db396c6b5f152d6864f92", "committedDate": "2020-09-09T15:03:58Z", "message": "Merge branch 'header_version_split' of github.com:pgomulka/elasticsearch into header_version_split"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTA3OTg1", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-485107985", "createdAt": "2020-09-09T15:05:34Z", "commit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTowNTozNFrOHPL7fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTowNTozNFrOHPL7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NjE0MA==", "bodyText": "You can remove this todo, answered in another comment.", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485686140", "createdAt": "2020-09-09T15:05:34Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java", "diffHunk": "@@ -82,7 +82,8 @@ private XContentType detectContentType(String content) {\n             //There must be a __<content_type__:: prefix so the minimum length before detecting '__::' is 3\n             int endOfContentName = content.indexOf(\"__::\", 3);\n             if (endOfContentName != -1) {\n-                return XContentType.fromMediaTypeOrFormat(content.substring(2, endOfContentName));\n+                //TODO PG what do we expect here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTIyNzA1", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-486122705", "createdAt": "2020-09-10T16:43:31Z", "commit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0MzozMVrOHP8yJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo1MjowNFrOHP9F_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjU2NA==", "bodyText": "can you add javadocs to the class and methods?", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486486564", "createdAt": "2020-09-10T16:43:31Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzk3NA==", "bodyText": "shouldn't we base this on https://tools.ietf.org/html/rfc7231#section-3.1.1.1", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486487974", "createdAt": "2020-09-10T16:45:46Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTY0NQ==", "bodyText": "per the RFC, it is not allowed so I guess we should", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486491645", "createdAt": "2020-09-10T16:52:04Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7\n+     * @param headerValue a header value from Accept or Content-Type\n+     * @return a parsed media-type\n+     */\n+    public ParsedMediaType parseMediaType(String headerValue) {\n+        if (headerValue != null) {\n+            String[] split = headerValue.toLowerCase(Locale.ROOT).split(\";\");\n+\n+            String[] typeSubtype = split[0].trim().toLowerCase(Locale.ROOT)\n+                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeWithSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        // should we validate that there are no spaces between key = value?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTMzNTM3", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-486133537", "createdAt": "2020-09-10T16:57:36Z", "commit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo1NzozNlrOHP9Tdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo1NzozNlrOHP9Tdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NTA5NA==", "bodyText": "Just a small compacting suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    XContentType xContentType = XContentType.fromFormat(accept);\n          \n          \n            \n                    if (xContentType != null) {\n          \n          \n            \n                        return xContentType;\n          \n          \n            \n                    }\n          \n          \n            \n                    xContentType = XContentType.fromMediaType(accept);\n          \n          \n            \n                    if (xContentType != null) {\n          \n          \n            \n                        return xContentType;\n          \n          \n            \n                    }\n          \n          \n            \n                    return xContentType;\n          \n          \n            \n                    XContentType xContentType = XContentType.fromFormat(accept);\n          \n          \n            \n                    return xContentType != null ? xContentType : XContentType.fromMediaType(accept);", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486495094", "createdAt": "2020-09-10T16:57:36Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -130,6 +130,21 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n         });\n     }\n \n+    private XContentType getXContentType(String accept) {\n+        if (accept == null) {\n+            return XContentType.JSON;\n+        }\n+        XContentType xContentType = XContentType.fromFormat(accept);\n+        if (xContentType != null) {\n+            return xContentType;\n+        }\n+        xContentType = XContentType.fromMediaType(accept);\n+        if (xContentType != null) {\n+            return xContentType;\n+        }\n+        return xContentType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTMzOTI3", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-486133927", "createdAt": "2020-09-10T16:58:07Z", "commit": {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "committedDate": "2020-09-14T09:22:20Z", "message": "javadoc and validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "committedDate": "2020-09-14T09:22:25Z", "message": "Update x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\nCo-authored-by: Bogdan Pintea <bpintea@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a925fbebfa43ee1ae179ef1d9638a948ad654677", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/a925fbebfa43ee1ae179ef1d9638a948ad654677", "committedDate": "2020-09-14T09:26:31Z", "message": "Merge branch 'header_version_split' of github.com:pgomulka/elasticsearch into header_version_split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23c4e41ceca7ea2c90cc0f1708461e2dd81a71ac", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/23c4e41ceca7ea2c90cc0f1708461e2dd81a71ac", "committedDate": "2020-09-14T11:31:37Z", "message": "javadoc fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e3fb1defcffa4f2ba75a7d4de20517e9550432", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/b1e3fb1defcffa4f2ba75a7d4de20517e9550432", "committedDate": "2020-09-14T11:45:10Z", "message": "remove shortName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17a8958fbeb2ce9339129f11d2236acdbac9d5a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/c17a8958fbeb2ce9339129f11d2236acdbac9d5a", "committedDate": "2020-09-14T12:33:28Z", "message": "javadoc fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6bd08e0a9f18576c30ac8b355794eb22605160", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/7d6bd08e0a9f18576c30ac8b355794eb22605160", "committedDate": "2020-09-14T12:40:41Z", "message": "fix compile error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c93954f1c40b90ecdadb5e4d50f675cf9dab0f2", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/3c93954f1c40b90ecdadb5e4d50f675cf9dab0f2", "committedDate": "2020-09-14T12:56:58Z", "message": "fix test compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77068a802c498afb4582186bab517913b4414a2a", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/77068a802c498afb4582186bab517913b4414a2a", "committedDate": "2020-09-15T06:47:19Z", "message": "Merge branch 'master' into header_version_split"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjcyNDA2", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-488672406", "createdAt": "2020-09-15T13:18:47Z", "commit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxODo0N1rOHSBaUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxODo0N1rOHSBaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1OTUzNw==", "bodyText": "can you add a test for assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key=\") I think it will error with index out of bounds.", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488659537", "createdAt": "2020-09-15T13:18:47Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class MediaTypeParserTests extends ESTestCase {\n+    MediaTypeParser<XContentType> mediaTypeParser = XContentType.mediaTypeParser;\n+\n+    public void testJsonWithParameters() throws Exception {\n+        String mediaType = \"application/json\";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType).getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \";\").getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\")));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123;charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+    }\n+\n+    public void testWhiteSpaceInTypeSubtype() {\n+        String mediaType = \" application/json \";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType).getMediaType(),\n+            equalTo(XContentType.JSON));\n+\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123;\\n charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+\n+        mediaType = \" application / json \";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType),\n+            is(nullValue()));\n+    }\n+\n+    public void testInvalidParameters() {\n+        String mediaType = \"application/json\";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; keyvalueNoEqualsSign\"),\n+            is(nullValue()));\n+\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key = value\"),\n+            is(nullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Njc1NDUz", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-488675453", "createdAt": "2020-09-15T13:21:59Z", "commit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyMTo1OVrOHSBjjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyMTo1OVrOHSBjjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MTkwMA==", "bodyText": "can you leave these specific TODO's out. IMO TODO's left in the code base should be rare and general enough such that any future dev can understand and implement it.", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488661900", "createdAt": "2020-09-15T13:21:59Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * @param headerValue a header value from Accept or Content-Type\n+     * @return a parsed media-type\n+     */\n+    public ParsedMediaType parseMediaType(String headerValue) {\n+        if (headerValue != null) {\n+            String[] split = headerValue.toLowerCase(Locale.ROOT).split(\";\");\n+\n+            String[] typeSubtype = split[0].trim().toLowerCase(Locale.ROOT)\n+                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeWithSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        //spaces are allowed between parameters, but not between '=' sign\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n+                            return null;\n+                        }\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                    }\n+                    return new ParsedMediaType(xContentType, parameters);\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    private boolean hasSpaces(String s) {\n+        return s.trim().equals(s) == false;\n+    }\n+\n+    /**\n+     * A media type object that contains all the information provided on a Content-Type or Accept header\n+     * // TODO PG to be extended with getCompatibleAPIVersion and more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Njc3MTkz", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-488677193", "createdAt": "2020-09-15T13:23:42Z", "commit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyMzo0MlrOHSBouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyMzo0MlrOHSBouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MzIyNQ==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488663225", "createdAt": "2020-09-15T13:23:42Z", "author": {"login": "jakelandis"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+/**\n+ * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, specifies response media type.\n+ */\n+public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n+    String type();\n+\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n+    String subtype();\n+\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     * Can differ from the MediaType's subtype i.e plain/text but format is txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjgxNjc5", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-488681679", "createdAt": "2020-09-15T13:28:08Z", "commit": {"oid": "77068a802c498afb4582186bab517913b4414a2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb0cd4c41710853001b5468f931dca0b0227c05", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/8fb0cd4c41710853001b5468f931dca0b0227c05", "committedDate": "2020-09-15T18:54:24Z", "message": "Merge branch 'master' into header_version_split"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "committedDate": "2020-09-16T16:37:13Z", "message": "remove todo and a testcase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTgwMTA0", "url": "https://github.com/elastic/elasticsearch/pull/61987#pullrequestreview-489980104", "createdAt": "2020-09-16T20:04:07Z", "commit": {"oid": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowNDowOFrOHTCTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDoxNDowNlrOHTCm0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjc1NQ==", "bodyText": "Thank you for adding these javadocs!\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Can differ from the MediaType's subtype i.e plain/text but format is txt\n          \n          \n            \n                 * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489722755", "createdAt": "2020-09-16T20:04:08Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+/**\n+ * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, specifies response media type.\n+ */\n+public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n+    String type();\n+\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n+    String subtype();\n+\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     * Can differ from the MediaType's subtype i.e plain/text but format is txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNzY5Nw==", "bodyText": "This could be considered a nit and is my preference on style and immutability.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes) {\n          \n          \n            \n                    for (T mediaType : acceptedMediaTypes) {\n          \n          \n            \n                        typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n          \n          \n            \n                        formatToMediaType.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n          \n          \n            \n                    this(acceptedMediaTypes);\n          \n          \n            \n                    for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n          \n          \n            \n                        String typeWithSubtype = entry.getKey();\n          \n          \n            \n                        T mediaType = entry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                        typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n          \n          \n            \n                        formatToMediaType.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private final Map<String, T> formatToMediaType;\n          \n          \n            \n                private final Map<String, T> typeWithSubtypeToMediaType;\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes) {\n          \n          \n            \n                    this(acceptedMediaTypes, Map.of());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n          \n          \n            \n                    final int size = acceptedMediaTypes.length + additionalMediaTypes.size();\n          \n          \n            \n                    Map<String, T> formatMap = new HashMap<>(size);\n          \n          \n            \n                    Map<String, T> typeMap = new HashMap<>(size);\n          \n          \n            \n                    for (T mediaType : acceptedMediaTypes) {\n          \n          \n            \n                        typeMap.put(mediaType.typeWithSubtype(), mediaType);\n          \n          \n            \n                        formatMap.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                    for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n          \n          \n            \n                        String typeWithSubtype = entry.getKey();\n          \n          \n            \n                        T mediaType = entry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                        typeMap.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n          \n          \n            \n                        formatMap.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    this.formatToMediaType = Map.copyOf(formatMap);\n          \n          \n            \n                    this.typeWithSubtypeToMediaType = Map.copyOf(typeMap);\n          \n          \n            \n                }", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489727697", "createdAt": "2020-09-16T20:14:06Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4598a0a9a1dbc301673e217849be11c7778cc539", "author": {"user": {"login": "pgomulka", "name": "Przemyslaw Gomulka"}}, "url": "https://github.com/elastic/elasticsearch/commit/4598a0a9a1dbc301673e217849be11c7778cc539", "committedDate": "2020-09-17T12:58:23Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4880, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}