{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjM4MTAz", "number": 52937, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOToyMVrODkSHjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NzowOVrODkUkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcyMTc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOToyMVrOFwhHLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOToyMVrOFwhHLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"expected map in docs but found not\");\n          \n          \n            \n                            throw new IllegalArgumentException(\"malformed [docs] section, should include an inner object\");", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386418476", "createdAt": "2020-03-02T14:19:21Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java", "diffHunk": "@@ -173,8 +173,15 @@ static Parsed parse(Map<String, Object> config, boolean verbose, IngestService i\n     private static List<IngestDocument> parseDocs(Map<String, Object> config) {\n         List<Map<String, Object>> docs =\n             ConfigurationUtils.readList(null, null, config, Fields.DOCS);\n+        if (docs.isEmpty()) {\n+            throw new IllegalArgumentException(\"must specify at least one doc\");\n+        }\n         List<IngestDocument> ingestDocumentList = new ArrayList<>();\n-        for (Map<String, Object> dataMap : docs) {\n+        for (Object object : docs) {\n+            if ((object instanceof Map) ==  false) {\n+                throw new IllegalArgumentException(\"expected map in docs but found not\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcyNDEzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOTo0N1rOFwhIbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOTo0N1rOFwhIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(e2.getMessage(), equalTo(\"expected map in docs but found not\"));\n          \n          \n            \n                    assertThat(e2.getMessage(), equalTo(\"malformed [docs] section, should include an inner object\"));", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386418798", "createdAt": "2020-03-02T14:19:47Z", "author": {"login": "danhermann"}, "path": "server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java", "diffHunk": "@@ -216,4 +218,33 @@ public void testNonExistentPipelineId() {\n             () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService));\n         assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n     }\n+\n+    public void testNotValidDocs() {\n+        Map<String, Object> requestContent = new HashMap<>();\n+        List<Map<String, Object>> docs = new ArrayList<>();\n+        Map<String, Object> pipelineConfig = new HashMap<>();\n+        List<Map<String, Object>> processors = new ArrayList<>();\n+        pipelineConfig.put(\"processors\", processors);\n+        requestContent.put(Fields.DOCS, docs);\n+        requestContent.put(Fields.PIPELINE, pipelineConfig);\n+        Exception e1 = expectThrows(IllegalArgumentException.class,\n+            () -> SimulatePipelineRequest.parse(requestContent, false, ingestService));\n+        assertThat(e1.getMessage(), equalTo(\"must specify at least one doc\"));\n+\n+        List<String> stringList = new ArrayList<>();\n+        stringList.add(\"test\");\n+        pipelineConfig.put(\"processors\", processors);\n+        requestContent.put(Fields.DOCS, stringList);\n+        requestContent.put(Fields.PIPELINE, pipelineConfig);\n+        Exception e2 = expectThrows(IllegalArgumentException.class,\n+            () -> SimulatePipelineRequest.parse(requestContent, false, ingestService));\n+        assertThat(e2.getMessage(), equalTo(\"expected map in docs but found not\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcyODM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMDo0OVrOFwhK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMDo0OVrOFwhK1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"must specify at least one doc\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"must specify at least one document in [docs]\");", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386419414", "createdAt": "2020-03-02T14:20:49Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java", "diffHunk": "@@ -173,8 +173,15 @@ static Parsed parse(Map<String, Object> config, boolean verbose, IngestService i\n     private static List<IngestDocument> parseDocs(Map<String, Object> config) {\n         List<Map<String, Object>> docs =\n             ConfigurationUtils.readList(null, null, config, Fields.DOCS);\n+        if (docs.isEmpty()) {\n+            throw new IllegalArgumentException(\"must specify at least one doc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcyOTU5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTowN1rOFwhLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTowN1rOFwhLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(e1.getMessage(), equalTo(\"must specify at least one doc\"));\n          \n          \n            \n                    assertThat(e1.getMessage(), equalTo(\"must specify at least one document in [docs]\"));", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386419598", "createdAt": "2020-03-02T14:21:07Z", "author": {"login": "danhermann"}, "path": "server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java", "diffHunk": "@@ -216,4 +218,33 @@ public void testNonExistentPipelineId() {\n             () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService));\n         assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n     }\n+\n+    public void testNotValidDocs() {\n+        Map<String, Object> requestContent = new HashMap<>();\n+        List<Map<String, Object>> docs = new ArrayList<>();\n+        Map<String, Object> pipelineConfig = new HashMap<>();\n+        List<Map<String, Object>> processors = new ArrayList<>();\n+        pipelineConfig.put(\"processors\", processors);\n+        requestContent.put(Fields.DOCS, docs);\n+        requestContent.put(Fields.PIPELINE, pipelineConfig);\n+        Exception e1 = expectThrows(IllegalArgumentException.class,\n+            () -> SimulatePipelineRequest.parse(requestContent, false, ingestService));\n+        assertThat(e1.getMessage(), equalTo(\"must specify at least one doc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEyMzk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NzowOVrOFwk78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NzowOVrOFwk78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTEzOA==", "bodyText": "Also maybe add a return statement here? Technically it is not needed because the for loop is skipped, but I find it easier to read.", "url": "https://github.com/elastic/elasticsearch/pull/52937#discussion_r386481138", "createdAt": "2020-03-02T15:57:09Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java", "diffHunk": "@@ -69,6 +69,12 @@ public void execute(SimulatePipelineRequest.Parsed request, ActionListener<Simul\n             final AtomicInteger counter = new AtomicInteger();\n             final List<SimulateDocumentResult> responses =\n                 new CopyOnWriteArrayList<>(new SimulateDocumentBaseResult[request.getDocuments().size()]);\n+\n+            if (request.getDocuments().isEmpty()) {\n+                l.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151e70f220f8636f3b0cb5e05ba6343a8962cc10"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}