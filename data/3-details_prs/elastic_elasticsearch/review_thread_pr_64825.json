{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MDM1NzYz", "number": 64825, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMjozNFrOE3U52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyOTo1OVrOE3WzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDQ5NjI1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CastNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMjozNFrOHwm1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNjoyNVrOH-rCAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyOTk0OA==", "bodyText": "IRDCast", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520729948", "createdAt": "2020-11-10T17:12:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CastNode.java", "diffHunk": "@@ -20,24 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class CastNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private PainlessCast cast;\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3ODc4Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535478787", "createdAt": "2020-12-03T18:26:25Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CastNode.java", "diffHunk": "@@ -20,24 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class CastNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private PainlessCast cast;\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyOTk0OA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDQ5ODg5OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BooleanNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMzoxMVrOHwm3Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNjozMFrOH-rCSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDM4Nw==", "bodyText": "IRDOperation", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520730387", "createdAt": "2020-11-10T17:13:11Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BooleanNode.java", "diffHunk": "@@ -20,24 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class BooleanNode extends BinaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Operation operation;\n-\n-    public void setOperation(Operation operation) {\n-        this.operation = operation;\n-    }\n-\n-    public Operation getOperation() {\n-        return operation;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3ODg1OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535478858", "createdAt": "2020-12-03T18:26:30Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BooleanNode.java", "diffHunk": "@@ -20,24 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class BooleanNode extends BinaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Operation operation;\n-\n-    public void setOperation(Operation operation) {\n-        this.operation = operation;\n-    }\n-\n-    public Operation getOperation() {\n-        return operation;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDM4Nw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUwMTk1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BlockNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxMzo1MFrOHwm48g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNjozN1rOH-rCrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDg2Ng==", "bodyText": "IRCAllEscape", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520730866", "createdAt": "2020-11-10T17:13:50Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BlockNode.java", "diffHunk": "@@ -39,19 +39,7 @@ public void addStatementNode(StatementNode statementNode) {\n         return statementNodes;\n     }\n \n-    /* ---- end tree structure, begin node data ---- */\n-\n-    private boolean doAllEscape;\n-\n-    public void setAllEscape(boolean doAllEscape) {\n-        this.doAllEscape = doAllEscape;\n-    }\n-\n-    public boolean doAllEscape() {\n-        return doAllEscape;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- end tree structure, begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3ODk1OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535478959", "createdAt": "2020-12-03T18:26:37Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BlockNode.java", "diffHunk": "@@ -39,19 +39,7 @@ public void addStatementNode(StatementNode statementNode) {\n         return statementNodes;\n     }\n \n-    /* ---- end tree structure, begin node data ---- */\n-\n-    private boolean doAllEscape;\n-\n-    public void setAllEscape(boolean doAllEscape) {\n-        this.doAllEscape = doAllEscape;\n-    }\n-\n-    public boolean doAllEscape() {\n-        return doAllEscape;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- end tree structure, begin visitor ---- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDg2Ng=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUwMzM1OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNDoxMFrOHwm55g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNjo0NFrOH-rC8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTExMA==", "bodyText": "IRDExceptionType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520731110", "createdAt": "2020-11-10T17:14:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -26,26 +26,8 @@\n \n     /* ---- begin tree structure ---- */\n \n-    private Class<?> exceptionType;\n-    private String symbol;\n     private BlockNode blockNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTAyNA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479024", "createdAt": "2020-12-03T18:26:44Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -26,26 +26,8 @@\n \n     /* ---- begin tree structure ---- */\n \n-    private Class<?> exceptionType;\n-    private String symbol;\n     private BlockNode blockNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTExMA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUwNTE5OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNDozMFrOHwm68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTowODozOFrOH-g_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTM3OA==", "bodyText": "newline.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520731378", "createdAt": "2020-11-10T17:14:30Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -638,7 +694,8 @@ public void visitCatch(CatchNode irCatchNode, WriteScope writeScope) {\n         MethodWriter methodWriter = writeScope.getMethodWriter();\n         methodWriter.writeStatementOffset(irCatchNode.getLocation());\n \n-        Variable variable = writeScope.defineVariable(irCatchNode.getExceptionType(), irCatchNode.getSymbol());\n+        Variable variable = writeScope.defineVariable(\n+                irCatchNode.getDecorationValue(IRDExceptionType.class), irCatchNode.getDecorationValue(IRDSymbol.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNDMxMQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535314311", "createdAt": "2020-12-03T15:08:38Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -638,7 +694,8 @@ public void visitCatch(CatchNode irCatchNode, WriteScope writeScope) {\n         MethodWriter methodWriter = writeScope.getMethodWriter();\n         methodWriter.writeStatementOffset(irCatchNode.getLocation());\n \n-        Variable variable = writeScope.defineVariable(irCatchNode.getExceptionType(), irCatchNode.getSymbol());\n+        Variable variable = writeScope.defineVariable(\n+                irCatchNode.getDecorationValue(IRDExceptionType.class), irCatchNode.getDecorationValue(IRDSymbol.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTM3OA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUxNTEzOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ComparisonNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNjo1MlrOHwnBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNjo0OVrOH-rDNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMjk5Mw==", "bodyText": "IRDOperation", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520732993", "createdAt": "2020-11-10T17:16:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ComparisonNode.java", "diffHunk": "@@ -20,38 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class ComparisonNode extends BinaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Operation operation;\n-    private Class<?> comparisonType;\n-\n-    public void setOperation(Operation operation) {\n-        this.operation = operation;\n-    }\n-\n-    public Operation getOperation() {\n-        return operation;\n-    }\n-\n-    public void setComparisonType(Class<?> comparisonType) {\n-        this.comparisonType = comparisonType;\n-    }\n-\n-    public Class<?> getComparisonType() {\n-        return comparisonType;\n-    }\n-\n-    public String getComparisonCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(comparisonType);\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTA5NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479094", "createdAt": "2020-12-03T18:26:49Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ComparisonNode.java", "diffHunk": "@@ -20,38 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.Operation;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class ComparisonNode extends BinaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Operation operation;\n-    private Class<?> comparisonType;\n-\n-    public void setOperation(Operation operation) {\n-        this.operation = operation;\n-    }\n-\n-    public Operation getOperation() {\n-        return operation;\n-    }\n-\n-    public void setComparisonType(Class<?> comparisonType) {\n-        this.comparisonType = comparisonType;\n-    }\n-\n-    public Class<?> getComparisonType() {\n-        return comparisonType;\n-    }\n-\n-    public String getComparisonCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(comparisonType);\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMjk5Mw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUxODE4OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ConstantNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoxNzozNFrOHwnDKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNjo1NVrOH-rDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMzQ4Mw==", "bodyText": "IRDConstant", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520733483", "createdAt": "2020-11-10T17:17:34Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ConstantNode.java", "diffHunk": "@@ -24,19 +24,7 @@\n \n public class ConstantNode extends ExpressionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Object constant;\n-\n-    public void setConstant(Object constant) {\n-        this.constant = constant;\n-    }\n-\n-    public Object getConstant() {\n-        return constant;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTE3MQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479171", "createdAt": "2020-12-03T18:26:55Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ConstantNode.java", "diffHunk": "@@ -24,19 +24,7 @@\n \n public class ConstantNode extends ExpressionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Object constant;\n-\n-    public void setConstant(Object constant) {\n-        this.constant = constant;\n-    }\n-\n-    public Object getConstant() {\n-        return constant;\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- begin visitor ---- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMzQ4Mw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUzNTc2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMTo0MVrOHwnOVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0NTo0MVrOH-mNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjM0MQ==", "bodyText": "Clean this up, temp var?", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520736341", "createdAt": "2020-11-10T17:21:41Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 480}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5OTc5OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535399799", "createdAt": "2020-12-03T16:45:41Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjM0MQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 480}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUzNjkzOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMTo1NVrOHwnPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0NTo1MVrOH-mOHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjUyNA==", "bodyText": "Temp var?", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520736524", "createdAt": "2020-11-10T17:21:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 485}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5OTk2NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535399964", "createdAt": "2020-12-03T16:45:51Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjUyNA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 485}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDUzNzI3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMjowMlrOHwnPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0NTo1OVrOH-mOqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjU4NQ==", "bodyText": "temp var", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520736585", "createdAt": "2020-11-10T17:22:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                     }\n                 }\n \n                 irLeftConstantNode.attachDecoration(new IRDExpressionType(boolean.class));\n                 scope.accept(irLeftConstantNode);\n             } else if (operation == Operation.NE || operation == Operation.NER) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() != (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 497}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMDEwNg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535400106", "createdAt": "2020-12-03T16:45:59Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                     }\n                 }\n \n                 irLeftConstantNode.attachDecoration(new IRDExpressionType(boolean.class));\n                 scope.accept(irLeftConstantNode);\n             } else if (operation == Operation.NE || operation == Operation.NER) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() != (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjU4NQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 497}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDU0MDAxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMjozOVrOHwnQ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0NjowN1rOH-mPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNzAwOQ==", "bodyText": "temp var.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520737009", "createdAt": "2020-11-10T17:22:39Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                     }\n                 }\n \n                 irLeftConstantNode.attachDecoration(new IRDExpressionType(boolean.class));\n                 scope.accept(irLeftConstantNode);\n             } else if (operation == Operation.NE || operation == Operation.NER) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() != (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() != (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() != (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 504}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMDI1NQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535400255", "createdAt": "2020-12-03T16:46:07Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -518,58 +603,86 @@ public void visitComparison(ComparisonNode irComparisonNode, Consumer<Expression\n                     irComparisonNode.getLeftNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getLeftNode();\n             ConstantNode irRightConstantNode =\n                     irComparisonNode.getRightNode() instanceof NullNode ? null : (ConstantNode)irComparisonNode.getRightNode();\n-            Operation operation = irComparisonNode.getOperation();\n-            Class<?> type = irComparisonNode.getComparisonType();\n+            Operation operation = irComparisonNode.getDecorationValue(IRDOperation.class);\n+            Class<?> type = irComparisonNode.getDecorationValue(IRDComparisonType.class);\n \n             if (operation == Operation.EQ || operation == Operation.EQR) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() == (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() == (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() == (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (long)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (long)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == float.class) {\n-                    irLeftConstantNode.setConstant((float)irLeftConstantNode.getConstant() == (float)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (float)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (float)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == double.class) {\n-                    irLeftConstantNode.setConstant((double)irLeftConstantNode.getConstant() == (double)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (double)irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                            (double)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (irLeftConstantNode == null && irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(true);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(true));\n                 } else if (irLeftConstantNode == null || irRightConstantNode == null) {\n                     irLeftConstantNode = new ConstantNode(irComparisonNode.getLeftNode().getLocation());\n-                    irLeftConstantNode.setConstant(false);\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(false));\n                 } else {\n                     if (operation == Operation.EQ) {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant().equals(irRightConstantNode.getConstant()));\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class).equals(\n+                                        irRightConstantNode.getDecorationValue(IRDConstant.class))));\n                     } else {\n-                        irLeftConstantNode.setConstant(irLeftConstantNode.getConstant() == irRightConstantNode.getConstant());\n+                        irLeftConstantNode.attachDecoration(new IRDConstant(\n+                                irLeftConstantNode.getDecorationValue(IRDConstant.class) ==\n+                                irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                     }\n                 }\n \n                 irLeftConstantNode.attachDecoration(new IRDExpressionType(boolean.class));\n                 scope.accept(irLeftConstantNode);\n             } else if (operation == Operation.NE || operation == Operation.NER) {\n                 if (type == boolean.class) {\n-                    irLeftConstantNode.setConstant((boolean)irLeftConstantNode.getConstant() != (boolean)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (boolean)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (boolean)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == int.class) {\n-                    irLeftConstantNode.setConstant((int)irLeftConstantNode.getConstant() != (int)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(\n+                            (int)irLeftConstantNode.getDecorationValue(IRDConstant.class) !=\n+                            (int)irRightConstantNode.getDecorationValue(IRDConstant.class)));\n                 } else if (type == long.class) {\n-                    irLeftConstantNode.setConstant((long)irLeftConstantNode.getConstant() != (long)irRightConstantNode.getConstant());\n+                    irLeftConstantNode.attachDecoration(new IRDConstant(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNzAwOQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 504}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY2NzM2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MzowMlrOHwogCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzowMVrOH-rDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NzI1Nw==", "bodyText": "IRDDeclarationType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520757257", "createdAt": "2020-11-10T17:53:02Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "diffHunk": "@@ -37,32 +36,7 @@ public ExpressionNode getExpressionNode() {\n         return expressionNode;\n     }\n \n-    /* ---- end tree structure, begin node data ---- */\n-\n-    protected String name;\n-    protected Class<?> declarationType;\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setDeclarationType(Class<?> declarationType) {\n-        this.declarationType = declarationType;\n-    }\n-\n-    public Class<?> getDeclarationType() {\n-        return declarationType;\n-    }\n-\n-    public String getDeclarationCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(declarationType);\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- end tree structure, begin visitor ---- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTIyMg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479222", "createdAt": "2020-12-03T18:27:01Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DeclarationNode.java", "diffHunk": "@@ -37,32 +36,7 @@ public ExpressionNode getExpressionNode() {\n         return expressionNode;\n     }\n \n-    /* ---- end tree structure, begin node data ---- */\n-\n-    protected String name;\n-    protected Class<?> declarationType;\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setDeclarationType(Class<?> declarationType) {\n-        this.declarationType = declarationType;\n-    }\n-\n-    public Class<?> getDeclarationType() {\n-        return declarationType;\n-    }\n-\n-    public String getDeclarationCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(declarationType);\n-    }\n-\n-    /* ---- end node data, begin visitor ---- */\n+    /* ---- end tree structure, begin visitor ---- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NzI1Nw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY3NDc3OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/IRDecorations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NDo0OFrOHwokpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0NzozNVrOH-mU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1ODQzNg==", "bodyText": "does this replace setDefReferenceEncoding?  If so add the Def prefix in there, Encoding is too general.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520758436", "createdAt": "2020-11-10T17:54:48Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/IRDecorations.java", "diffHunk": "@@ -74,15 +84,328 @@ public String toString() {\n \n     public static class IRDFlags extends IRDecoration<Integer> {\n \n-        public IRDFlags(Integer flags) {\n-            super(Objects.requireNonNull(flags));\n+        public IRDFlags(Integer value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRCAllEscape implements IRCondition {\n+\n+        private IRCAllEscape() {\n+\n+        }\n+    }\n+\n+    public static class IRDCast extends IRDecoration<PainlessCast> {\n+\n+        public IRDCast(PainlessCast value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDExceptionType extends IRDType {\n+\n+        public IRDExceptionType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDSymbol extends IRDecoration<String> {\n+\n+        public IRDSymbol(String value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDComparisonType extends IRDType {\n+\n+        public IRDComparisonType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDConstant extends IRDecoration<Object> {\n+\n+        public IRDConstant(Object value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDDeclarationType extends IRDType {\n+\n+        public IRDDeclarationType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDName extends IRDecoration<String> {\n+\n+        public IRDName(String value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDEncoding extends IRDecoration<String> {\n+\n+        public IRDEncoding(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMTY5OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535401699", "createdAt": "2020-12-03T16:47:35Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/IRDecorations.java", "diffHunk": "@@ -74,15 +84,328 @@ public String toString() {\n \n     public static class IRDFlags extends IRDecoration<Integer> {\n \n-        public IRDFlags(Integer flags) {\n-            super(Objects.requireNonNull(flags));\n+        public IRDFlags(Integer value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRCAllEscape implements IRCondition {\n+\n+        private IRCAllEscape() {\n+\n+        }\n+    }\n+\n+    public static class IRDCast extends IRDecoration<PainlessCast> {\n+\n+        public IRDCast(PainlessCast value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDExceptionType extends IRDType {\n+\n+        public IRDExceptionType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDSymbol extends IRDecoration<String> {\n+\n+        public IRDSymbol(String value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDComparisonType extends IRDType {\n+\n+        public IRDComparisonType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDConstant extends IRDecoration<Object> {\n+\n+        public IRDConstant(Object value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDDeclarationType extends IRDType {\n+\n+        public IRDDeclarationType(Class<?> value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDName extends IRDecoration<String> {\n+\n+        public IRDName(String value) {\n+            super(value);\n+        }\n+    }\n+\n+    public static class IRDEncoding extends IRDecoration<String> {\n+\n+        public IRDEncoding(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1ODQzNg=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4MDk0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DoWhileLoopNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NjoyMFrOHwoofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0ODowMlrOH-mWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTQyMQ==", "bodyText": "?", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520759421", "createdAt": "2020-11-10T17:56:20Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DoWhileLoopNode.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.elasticsearch.painless.Location;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class DoWhileLoopNode extends LoopNode {\n+public class DoWhileLoopNode extends ConditionNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMjA5OA==", "bodyText": "Removed LoopNode as it no longer contained any additional information.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535402098", "createdAt": "2020-12-03T16:48:02Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DoWhileLoopNode.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.elasticsearch.painless.Location;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class DoWhileLoopNode extends LoopNode {\n+public class DoWhileLoopNode extends ConditionNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTQyMQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4MjYxOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Njo0NVrOHwopfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzowN1rOH-rD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTY3Nw==", "bodyText": "IRDSize", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520759677", "createdAt": "2020-11-10T17:56:45Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "diffHunk": "@@ -24,28 +24,7 @@\n \n public class DupNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int size;\n-    private int depth;\n-\n-    public void setSize(int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTI5Mw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479293", "createdAt": "2020-12-03T18:27:07Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "diffHunk": "@@ -24,28 +24,7 @@\n \n public class DupNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int size;\n-    private int depth;\n-\n-    public void setSize(int size) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTY3Nw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4MzIzOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Njo1MlrOHwop2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzoxMVrOH-rEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTc3MQ==", "bodyText": "IRDDepth", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520759771", "createdAt": "2020-11-10T17:56:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "diffHunk": "@@ -24,28 +24,7 @@\n \n public class DupNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int size;\n-    private int depth;\n-\n-    public void setSize(int size) {\n-        this.size = size;\n-    }\n-\n-    public int getSize() {\n-        return size;\n-    }\n-\n-    public void setDepth(int depth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTMzOQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479339", "createdAt": "2020-12-03T18:27:11Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/DupNode.java", "diffHunk": "@@ -24,28 +24,7 @@\n \n public class DupNode extends UnaryNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int size;\n-    private int depth;\n-\n-    public void setSize(int size) {\n-        this.size = size;\n-    }\n-\n-    public int getSize() {\n-        return size;\n-    }\n-\n-    public void setDepth(int depth) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTc3MQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4NTU0OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzoyOFrOHworPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1Mjo0M1rOH-moSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDEyNw==", "bodyText": "What's this?  It's missing now.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760127", "createdAt": "2020-11-10T17:57:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -464,8 +509,7 @@ protected ExpressionNode buildLoadStore(int accessDepth, Location location, bool\n                 // this is a compound assignment and requires and additional dup to re-access the prefix\n                 DupNode dupNode = new DupNode(location);\n                 dupNode.attachDecoration(new IRDExpressionType(void.class));\n-                dupNode.setSize(accessDepth);\n-                dupNode.setDepth(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNjY2NQ==", "bodyText": "Changed to decorations.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535406665", "createdAt": "2020-12-03T16:52:43Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -464,8 +509,7 @@ protected ExpressionNode buildLoadStore(int accessDepth, Location location, bool\n                 // this is a compound assignment and requires and additional dup to re-access the prefix\n                 DupNode dupNode = new DupNode(location);\n                 dupNode.attachDecoration(new IRDExpressionType(void.class));\n-                dupNode.setSize(accessDepth);\n-                dupNode.setDepth(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDEyNw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4NzkxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODowM1rOHwosyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NDo0NFrOH-mv9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDUyMQ==", "bodyText": "Too long.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760521", "createdAt": "2020-11-10T17:58:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -861,16 +931,18 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 if (userAssignmentNode.postIfRead()) {\n                     irDupNode = new DupNode(irLoadNode.getLocation());\n                     irDupNode.attachDecoration(irLoadNode.getDecoration(IRDExpressionType.class));\n-                    irDupNode.setSize(MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 474}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwODYyOQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535408629", "createdAt": "2020-12-03T16:54:44Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -861,16 +931,18 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 if (userAssignmentNode.postIfRead()) {\n                     irDupNode = new DupNode(irLoadNode.getLocation());\n                     irDupNode.attachDecoration(irLoadNode.getDecoration(IRDExpressionType.class));\n-                    irDupNode.setSize(MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDUyMQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 474}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4ODkxOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODoxOVrOHwotcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NTozNlrOH-mzRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDY4OQ==", "bodyText": "Too long.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760689", "createdAt": "2020-11-10T17:58:19Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -861,16 +931,18 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 if (userAssignmentNode.postIfRead()) {\n                     irDupNode = new DupNode(irLoadNode.getLocation());\n                     irDupNode.attachDecoration(irLoadNode.getDecoration(IRDExpressionType.class));\n-                    irDupNode.setSize(MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize()));\n+                    irDupNode.attachDecoration(new IRDDepth(accessDepth));\n                     irDupNode.setChildNode(irLoadNode);\n                     irLoadNode = irDupNode;\n                 // the value is read from after the assignment (pre-increment/compound)\n                 } else {\n                     irDupNode = new DupNode(irStoreNode.getLocation());\n-                    irDupNode.attachDecoration(new IRDExpressionType(irStoreNode.getStoreType()));\n-                    irDupNode.setSize(MethodWriter.getType(irStoreNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDExpressionType(irStoreNode.getDecorationValue(IRDStoreType.class)));\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irStoreNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 486}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTQ3OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535409479", "createdAt": "2020-12-03T16:55:36Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -861,16 +931,18 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 if (userAssignmentNode.postIfRead()) {\n                     irDupNode = new DupNode(irLoadNode.getLocation());\n                     irDupNode.attachDecoration(irLoadNode.getDecoration(IRDExpressionType.class));\n-                    irDupNode.setSize(MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irLoadNode.getDecorationValue(IRDExpressionType.class)).getSize()));\n+                    irDupNode.attachDecoration(new IRDDepth(accessDepth));\n                     irDupNode.setChildNode(irLoadNode);\n                     irLoadNode = irDupNode;\n                 // the value is read from after the assignment (pre-increment/compound)\n                 } else {\n                     irDupNode = new DupNode(irStoreNode.getLocation());\n-                    irDupNode.attachDecoration(new IRDExpressionType(irStoreNode.getStoreType()));\n-                    irDupNode.setSize(MethodWriter.getType(irStoreNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                    irDupNode.setDepth(accessDepth);\n+                    irDupNode.attachDecoration(new IRDExpressionType(irStoreNode.getDecorationValue(IRDStoreType.class)));\n+                    irDupNode.attachDecoration(new IRDSize(\n+                            MethodWriter.getType(irStoreNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDY4OQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 486}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4OTU2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1ODoyOFrOHwot3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NTo0N1rOH-m0FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDc5OA==", "bodyText": "Too long.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520760798", "createdAt": "2020-11-10T17:58:28Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -909,16 +981,17 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n \n                 DupNode irDupNode = new DupNode(irValueNode.getLocation());\n                 irDupNode.attachDecoration(irValueNode.getDecoration(IRDExpressionType.class));\n-                irDupNode.setSize(MethodWriter.getType(irValueNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                irDupNode.setDepth(accessDepth);\n+                irDupNode.attachDecoration(new IRDSize(\n+                        MethodWriter.getType(irValueNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTY4NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535409684", "createdAt": "2020-12-03T16:55:47Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -909,16 +981,17 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n \n                 DupNode irDupNode = new DupNode(irValueNode.getLocation());\n                 irDupNode.attachDecoration(irValueNode.getDecoration(IRDExpressionType.class));\n-                irDupNode.setSize(MethodWriter.getType(irValueNode.getDecorationValue(IRDExpressionType.class)).getSize());\n-                irDupNode.setDepth(accessDepth);\n+                irDupNode.attachDecoration(new IRDSize(\n+                        MethodWriter.getType(irValueNode.getDecorationValue(IRDExpressionType.class)).getSize()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDc5OA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 507}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcxNDUxOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNDo1MlrOHwo9mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzoxN1rOH-rEZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDgyNQ==", "bodyText": "IRDModifiers", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520764825", "createdAt": "2020-11-10T18:04:52Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTM5OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479399", "createdAt": "2020-12-03T18:27:17Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDgyNQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcxNTA4OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNTowMFrOHwo97A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzoyM1rOH-rEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDkwOA==", "bodyText": "IRDFieldType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520764908", "createdAt": "2020-11-10T18:05:00Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {\n-        this.modifiers = modifiers;\n-    }\n-\n-    public int getModifiers() {\n-        return modifiers;\n-    }\n-\n-    public void setFieldType(Class<?> fieldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTQ4Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479487", "createdAt": "2020-12-03T18:27:23Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {\n-        this.modifiers = modifiers;\n-    }\n-\n-    public int getModifiers() {\n-        return modifiers;\n-    }\n-\n-    public void setFieldType(Class<?> fieldType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDkwOA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyMjc4OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzoxM1rOHwpCzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzoyOFrOH-rE8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjE1OA==", "bodyText": "IRDName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766158", "createdAt": "2020-11-10T18:07:13Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {\n-        this.modifiers = modifiers;\n-    }\n-\n-    public int getModifiers() {\n-        return modifiers;\n-    }\n-\n-    public void setFieldType(Class<?> fieldType) {\n-        this.fieldType = fieldType;\n-    }\n-\n-    public Class<?> getFieldType() {\n-        return fieldType;\n-    }\n-\n-    public String getFieldCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(fieldType);\n-    }\n-\n-    public void setName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTUzNw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479537", "createdAt": "2020-12-03T18:27:28Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/FieldNode.java", "diffHunk": "@@ -20,46 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n public class FieldNode extends IRNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private int modifiers;\n-    private Class<?> fieldType;\n-    private String name;\n-\n-    public void setModifiers(int modifiers) {\n-        this.modifiers = modifiers;\n-    }\n-\n-    public int getModifiers() {\n-        return modifiers;\n-    }\n-\n-    public void setFieldType(Class<?> fieldType) {\n-        this.fieldType = fieldType;\n-    }\n-\n-    public Class<?> getFieldType() {\n-        return fieldType;\n-    }\n-\n-    public String getFieldCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(fieldType);\n-    }\n-\n-    public void setName(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjE1OA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyMzkwOnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzozMFrOHwpDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowNzozMVrOH-nhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjMzOQ==", "bodyText": "newline.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766339", "createdAt": "2020-11-10T18:07:30Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -553,7 +608,8 @@ public void visitDeclaration(DeclarationNode irDeclarationNode, WriteScope write\n         MethodWriter methodWriter = writeScope.getMethodWriter();\n         methodWriter.writeStatementOffset(irDeclarationNode.getLocation());\n \n-        Variable variable = writeScope.defineVariable(irDeclarationNode.getDeclarationType(), irDeclarationNode.getName());\n+        Variable variable = writeScope.defineVariable(\n+                irDeclarationNode.getDecorationValue(IRDDeclarationType.class), irDeclarationNode.getDecorationValue(IRDName.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyMTE5Mw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535421193", "createdAt": "2020-12-03T17:07:31Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -553,7 +608,8 @@ public void visitDeclaration(DeclarationNode irDeclarationNode, WriteScope write\n         MethodWriter methodWriter = writeScope.getMethodWriter();\n         methodWriter.writeStatementOffset(irDeclarationNode.getLocation());\n \n-        Variable variable = writeScope.defineVariable(irDeclarationNode.getDeclarationType(), irDeclarationNode.getName());\n+        Variable variable = writeScope.defineVariable(\n+                irDeclarationNode.getDecorationValue(IRDDeclarationType.class), irDeclarationNode.getDecorationValue(IRDName.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjMzOQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyNTQ2OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzo1NlrOHwpEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowODoxNlrOH-nj_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjU4MQ==", "bodyText": "new lines.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766581", "createdAt": "2020-11-10T18:07:56Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -1537,7 +1597,8 @@ public void visitInvokeCallDef(InvokeCallDefNode irInvokeCallDefNode, WriteScope\n                 irInvokeCallDefNode.getDecorationValue(IRDExpressionType.class)), asmParameterTypes);\n \n         boostrapArguments.add(0, defCallRecipe.toString());\n-        methodWriter.invokeDefCall(irInvokeCallDefNode.getName(), methodType, DefBootstrap.METHOD_CALL, boostrapArguments.toArray());\n+        methodWriter.invokeDefCall(\n+                irInvokeCallDefNode.getDecorationValue(IRDName.class), methodType, DefBootstrap.METHOD_CALL, boostrapArguments.toArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 740}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyMTk0OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535421948", "createdAt": "2020-12-03T17:08:16Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -1537,7 +1597,8 @@ public void visitInvokeCallDef(InvokeCallDefNode irInvokeCallDefNode, WriteScope\n                 irInvokeCallDefNode.getDecorationValue(IRDExpressionType.class)), asmParameterTypes);\n \n         boostrapArguments.add(0, defCallRecipe.toString());\n-        methodWriter.invokeDefCall(irInvokeCallDefNode.getName(), methodType, DefBootstrap.METHOD_CALL, boostrapArguments.toArray());\n+        methodWriter.invokeDefCall(\n+                irInvokeCallDefNode.getDecorationValue(IRDName.class), methodType, DefBootstrap.METHOD_CALL, boostrapArguments.toArray());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjU4MQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 740}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyNzIxOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowODoyNlrOHwpFgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzozNFrOH-rFPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Njg1MA==", "bodyText": "IRDVariableType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520766850", "createdAt": "2020-11-10T18:08:26Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTYxNA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479614", "createdAt": "2020-12-03T18:27:34Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Njg1MA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDczNDYwOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDoxNlrOHwpJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzo0MFrOH-rFcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Nzk2Mg==", "bodyText": "IRDVariableName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520767962", "createdAt": "2020-11-10T18:10:16Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTY2Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479667", "createdAt": "2020-12-03T18:27:40Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Nzk2Mg=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDczNTY5OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDozMlrOHwpKgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzo0NFrOH-rFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODEyOA==", "bodyText": "IRDCast", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520768128", "createdAt": "2020-11-10T18:10:32Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTcwNw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479707", "createdAt": "2020-12-03T18:27:44Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODEyOA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDczNzA0OnYy", "diffSide": "RIGHT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDo1NVrOHwpLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzoxMzo1NlrOH-n14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODM1NQ==", "bodyText": "newlines.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520768355", "createdAt": "2020-11-10T18:10:55Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -664,8 +809,8 @@ public void visitCast(CastNode irCastNode, Consumer<ExpressionNode> scope) {\n         if (irCastNode.getChildNode() instanceof ConstantNode &&\n                 PainlessLookupUtility.isConstantType(irCastNode.getDecorationValue(IRDExpressionType.class))) {\n             ConstantNode irConstantNode = (ConstantNode)irCastNode.getChildNode();\n-            irConstantNode.setConstant(\n-                    AnalyzerCaster.constCast(irCastNode.getLocation(), irConstantNode.getConstant(), irCastNode.getCast()));\n+            irConstantNode.attachDecoration(new IRDConstant(AnalyzerCaster.constCast(irCastNode.getLocation(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 678}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyNjUzMA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535426530", "createdAt": "2020-12-03T17:13:56Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultConstantFoldingOptimizationPhase.java", "diffHunk": "@@ -664,8 +809,8 @@ public void visitCast(CastNode irCastNode, Consumer<ExpressionNode> scope) {\n         if (irCastNode.getChildNode() instanceof ConstantNode &&\n                 PainlessLookupUtility.isConstantType(irCastNode.getDecorationValue(IRDExpressionType.class))) {\n             ConstantNode irConstantNode = (ConstantNode)irCastNode.getChildNode();\n-            irConstantNode.setConstant(\n-                    AnalyzerCaster.constCast(irCastNode.getLocation(), irConstantNode.getConstant(), irCastNode.getCast()));\n+            irConstantNode.attachDecoration(new IRDConstant(AnalyzerCaster.constCast(irCastNode.getLocation(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODM1NQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 678}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDczOTg0OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMTo0MFrOHwpNFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzo0OVrOH-rFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODc5MA==", "bodyText": "IRDArrayType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520768790", "createdAt": "2020-11-10T18:11:40Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTc0NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479744", "createdAt": "2020-12-03T18:27:49Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODc5MA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc0MjE2OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMjoxOFrOHwpOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzo1NFrOH-rGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTE2Mw==", "bodyText": "IRDArrayName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520769163", "createdAt": "2020-11-10T18:12:18Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTgwOA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479808", "createdAt": "2020-12-03T18:27:54Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTE2Mw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc0NDk0OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMzoxMFrOHwpQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzo1OVrOH-rGOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTYxMQ==", "bodyText": "IRDIndexType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520769611", "createdAt": "2020-11-10T18:13:10Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTg2Ng==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479866", "createdAt": "2020-12-03T18:27:59Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTYxMQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc0NzkwOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDowM1rOHwpSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODowNFrOH-rGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDA3MA==", "bodyText": "IRDIndexName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520770070", "createdAt": "2020-11-10T18:14:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {\n-        this.indexType = indexType;\n-    }\n-\n-    public Class<?> getIndexType() {\n-        return indexType;\n-    }\n-\n-    public String getIndexCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(indexType);\n-    }\n-\n-    public void setIndexName(String indexName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTkyMA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535479920", "createdAt": "2020-12-03T18:28:04Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {\n-        this.indexType = indexType;\n-    }\n-\n-    public Class<?> getIndexType() {\n-        return indexType;\n-    }\n-\n-    public String getIndexCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(indexType);\n-    }\n-\n-    public void setIndexName(String indexName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDA3MA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc1MDcyOnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDo0M1rOHwpTvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODozNVrOH-rHcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDQ5NA==", "bodyText": "IRDIndexedType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520770494", "createdAt": "2020-11-10T18:14:43Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {\n-        this.indexType = indexType;\n-    }\n-\n-    public Class<?> getIndexType() {\n-        return indexType;\n-    }\n-\n-    public String getIndexCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(indexType);\n-    }\n-\n-    public void setIndexName(String indexName) {\n-        this.indexName = indexName;\n-    }\n-\n-    public String getIndexName() {\n-        return indexName;\n-    }\n-\n-    public void setIndexedType(Class<?> indexedType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDE3OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535480179", "createdAt": "2020-12-03T18:28:35Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubArrayNode.java", "diffHunk": "@@ -20,104 +20,11 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n-public class ForEachSubArrayNode extends LoopNode {\n+public class ForEachSubArrayNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> arrayType;\n-    private String arrayName;\n-    private Class<?> indexType;\n-    private String indexName;\n-    private Class<?> indexedType;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public String getVariableCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(variableType);\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setArrayType(Class<?> arrayType) {\n-        this.arrayType = arrayType;\n-    }\n-\n-    public Class<?> getArrayType() {\n-        return arrayType;\n-    }\n-\n-    public String getArrayCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(arrayType);\n-    }\n-\n-    public void setArrayName(String arrayName) {\n-        this.arrayName = arrayName;\n-    }\n-\n-    public String getArrayName() {\n-        return arrayName;\n-    }\n-\n-    public void setIndexType(Class<?> indexType) {\n-        this.indexType = indexType;\n-    }\n-\n-    public Class<?> getIndexType() {\n-        return indexType;\n-    }\n-\n-    public String getIndexCanonicalTypeName() {\n-        return PainlessLookupUtility.typeToCanonicalTypeName(indexType);\n-    }\n-\n-    public void setIndexName(String indexName) {\n-        this.indexName = indexName;\n-    }\n-\n-    public String getIndexName() {\n-        return indexName;\n-    }\n-\n-    public void setIndexedType(Class<?> indexedType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDQ5NA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc1ODI0OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNjozOFrOHwpYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODo0MFrOH-rHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MTY0NQ==", "bodyText": "IRDVariableType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520771645", "createdAt": "2020-11-10T18:16:38Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDIzMw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535480233", "createdAt": "2020-12-03T18:28:40Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MTY0NQ=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc2MTQ4OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNzoyMVrOHwpaJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODo0NVrOH-rH1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjEzMw==", "bodyText": "IRDVariableName", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520772133", "createdAt": "2020-11-10T18:17:21Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDI3OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535480278", "createdAt": "2020-12-03T18:28:45Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjEzMw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc2Mzk5OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxODowM1rOHwpbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODo0OVrOH-rIAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjUzNA==", "bodyText": "IRDCast", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520772534", "createdAt": "2020-11-10T18:18:03Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDMyMA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535480320", "createdAt": "2020-12-03T18:28:49Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjUzNA=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDgwNjg4OnYy", "diffSide": "LEFT", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyOTo1OVrOHwp2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODo1NFrOH-rIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTMxMw==", "bodyText": "IRDIterableType", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r520779313", "createdAt": "2020-11-10T18:29:59Z", "author": {"login": "stu-elastic"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setIteratorType(Class<?> iteratorType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDM2MA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/64825#discussion_r535480360", "createdAt": "2020-12-03T18:28:54Z", "author": {"login": "jdconrad"}, "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ForEachSubIterableNode.java", "diffHunk": "@@ -20,73 +20,14 @@\n package org.elasticsearch.painless.ir;\n \n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.lookup.PainlessCast;\n-import org.elasticsearch.painless.lookup.PainlessMethod;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n \n /**\n  * Represents a for-each loop for iterables.\n  */\n-public class ForEachSubIterableNode extends LoopNode {\n+public class ForEachSubIterableNode extends ConditionNode {\n \n-    /* ---- begin node data ---- */\n-\n-    private Class<?> variableType;\n-    private String variableName;\n-    private PainlessCast cast;\n-    private Class<?> iteratorType;\n-    private String iteratorName;\n-    private PainlessMethod method;\n-\n-    public void setVariableType(Class<?> variableType) {\n-        this.variableType = variableType;\n-    }\n-\n-    public Class<?> getVariableType() {\n-        return variableType;\n-    }\n-\n-    public void setVariableName(String variableName) {\n-        this.variableName = variableName;\n-    }\n-\n-    public String getVariableName() {\n-        return variableName;\n-    }\n-\n-    public void setCast(PainlessCast cast) {\n-        this.cast = cast;\n-    }\n-\n-    public PainlessCast getCast() {\n-        return cast;\n-    }\n-\n-    public void setIteratorType(Class<?> iteratorType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTMxMw=="}, "originalCommit": {"oid": "9fd09303030302a2545e8734d8076e8ffab4aa78"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3032, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}