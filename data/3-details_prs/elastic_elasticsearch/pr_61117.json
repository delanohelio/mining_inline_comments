{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTkxMzAx", "number": 61117, "title": "[DOCS] Reorg field data types page", "bodyText": "Reorganizes the field data types page based on use case.\nAlso incorporates type families and standardizes usage.\nRelates to #57548\nPreview\nhttps://elasticsearch_61117.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/mapping-types.html", "createdAt": "2020-08-13T19:30:09Z", "url": "https://github.com/elastic/elasticsearch/pull/61117", "merged": true, "mergeCommit": {"oid": "49350ddae8cbc6dcf7fe2af9818a9d3c2dec7029"}, "closed": true, "closedAt": "2020-08-26T18:01:35Z", "author": {"login": "jrodewig"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-lgyMgBqjM2NTM2MjE3OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCvHdPAH2gAyNDY3NTkxMzAxOjIzNTc5MTUzNWM5YWUyMjQ2Y2JiYWE4YWUwODkxOWU5YjUzMmE3OTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02ef37edbc621081d30005bfb1307381d76ed14f", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/02ef37edbc621081d30005bfb1307381d76ed14f", "committedDate": "2020-08-13T19:28:18Z", "message": "[DOCS] Reorg field data types page"}, "afterCommit": {"oid": "300bca1cdba8888ac58e87fd79d19f7090dbd607", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/300bca1cdba8888ac58e87fd79d19f7090dbd607", "committedDate": "2020-08-13T19:51:23Z", "message": "[DOCS] Reorg field data types page"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14de414c72710d7a28a8bcdb7db0cc115070be48", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/14de414c72710d7a28a8bcdb7db0cc115070be48", "committedDate": "2020-08-13T20:24:15Z", "message": "Fix anchor"}, "afterCommit": {"oid": "4083b9572ef9a0f2db7696aa7b7f615d7f7c1e01", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/4083b9572ef9a0f2db7696aa7b7f615d7f7c1e01", "committedDate": "2020-08-13T21:39:37Z", "message": "[DOCS] Reorg field data types page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f894947c375eae3e0bb7b065cb06989bff8afe02", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/f894947c375eae3e0bb7b065cb06989bff8afe02", "committedDate": "2020-08-14T16:27:18Z", "message": "[DOCS] Reorg field data types page"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "089065a28510aad2207ae2bae70c9373a8d051bb", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/089065a28510aad2207ae2bae70c9373a8d051bb", "committedDate": "2020-08-14T16:26:57Z", "message": "fix"}, "afterCommit": {"oid": "f894947c375eae3e0bb7b065cb06989bff8afe02", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/f894947c375eae3e0bb7b065cb06989bff8afe02", "committedDate": "2020-08-14T16:27:18Z", "message": "[DOCS] Reorg field data types page"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzY0NDI3", "url": "https://github.com/elastic/elasticsearch/pull/61117#pullrequestreview-470764427", "createdAt": "2020-08-19T19:17:49Z", "commit": {"oid": "f894947c375eae3e0bb7b065cb06989bff8afe02"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxNzo0OVrOHDVr5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToyNTowNlrOHDaK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MzA3OA==", "bodyText": "Types in the same family behave similarly...\n\nWe could make this stronger + more precise. Perhaps we could say something like the following? \"Types in the same family are guaranteed to support the same search functionality, but may have different space usage or performance characteristics.\"\n\nFor example, the keyword family... In most cases, the type family is the same as the field type...\n\nI wonder if we should be clear about the fact there's only one type family right now. We could say \"Currently the only true type family is keyword, which consists of the keyword, constant_keyword, and wildcard field types. Other type families have only a single field type -- for example the boolean type family consists of one field type boolean.\"", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r473263078", "createdAt": "2020-08-19T19:17:49Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,208 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n+\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family behave similarly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f894947c375eae3e0bb7b065cb06989bff8afe02"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MDIxNw==", "bodyText": "Small comment, but this feels a little out of place to me. Since this is the introduction for field types, we could keep it streamlined and not give suggestions on how to look up mapping information for document fields?", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r473270217", "createdAt": "2020-08-19T19:31:18Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,208 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n+\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family behave similarly\n+and can be used interchangeably in your application. For example, the `keyword`\n+family consists of the `keyword`, `constant_keyword`, and `wildcard` field\n+types. In most cases, the type family is the same as the field type. For\n+example, the `boolean` type family consists of one field type: `boolean`.\n+\n+You can retrieve a field's type family using the <<search-field-caps,field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f894947c375eae3e0bb7b065cb06989bff8afe02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMzNjU3Mw==", "bodyText": "For me this organization is a bit unclear. Some types like binary and boolean don't belong to an overall section. And the sections don't relate to a consistent concept -- some describe use cases like 'full text search' while others are broad type categories like 'dates'.\nIt's actually quite challenging to come up with a good grouping! I'll reach out to you through another channel with a brainstorming document.", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r473336573", "createdAt": "2020-08-19T21:25:06Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,208 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n+\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family behave similarly\n+and can be used interchangeably in your application. For example, the `keyword`\n+family consists of the `keyword`, `constant_keyword`, and `wildcard` field\n+types. In most cases, the type family is the same as the field type. For\n+example, the `boolean` type family consists of one field type: `boolean`.\n+\n+You can retrieve a field's type family using the <<search-field-caps,field\n+capabilities API>>.\n+\n+The following sections organize the available field types based on their\n+intended use. Except where noted, the type family is the same as the field type.\n+\n+<<binary,`binary`>>::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f894947c375eae3e0bb7b065cb06989bff8afe02"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5bf87a871b0ca7d1ef6e02a51b48ac15f01bc3d", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/f5bf87a871b0ca7d1ef6e02a51b48ac15f01bc3d", "committedDate": "2020-08-19T21:36:55Z", "message": "Apply feedback from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82f611012d817c426b792a22ff5bc60779ca961", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/c82f611012d817c426b792a22ff5bc60779ca961", "committedDate": "2020-08-19T22:02:26Z", "message": "Minor reword + grammar fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/e28b87c780f0c74bc15901dff283f63ead441de6", "committedDate": "2020-08-20T22:53:52Z", "message": "Incorporate feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjQ3MTYx", "url": "https://github.com/elastic/elasticsearch/pull/61117#pullrequestreview-472647161", "createdAt": "2020-08-21T16:57:53Z", "commit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1Nzo1M1rOHE0hbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowNzo0MVrOHE0zeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjg3Ng==", "bodyText": "This is out of scope for the current PR, but seeing this made me think that each 'field type family' should live on a single sub-page. We could have a short description of the family at the top, and then a subsection for each type. This would help users directly compare the different options, and could make wildcard more discoverable.\n@jrodewig @markharwood what would you think about this idea as a potential follow-up?", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474816876", "createdAt": "2020-08-21T16:57:53Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Core types\n+\n+<<binary>>::          `binary`\n+<<boolean>>::         `boolean`\n+keyword::             <<keyword,`keyword`>>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNzYyOA==", "bodyText": "Small comment, we could remove the part 'for percentiles aggregations' because this works across a variety of aggregations?", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474817628", "createdAt": "2020-08-21T16:59:30Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Core types\n+\n+<<binary>>::          `binary`\n+<<boolean>>::         `boolean`\n+keyword::             <<keyword,`keyword`>>,\n+                      <<constant-keyword,`constant_keyword`>>, and\n+                      <<wildcard,`wildcard`>>\n+<<number,Numbers>>::  `long`, `integer`, `short`, `byte`, `double`, `float`,\n+                      `half_float`, `scaled_float`\n+Dates::               <<date,`date`>>, <<date_nanos,`date_nanos`>>\n+<<alias,Alias>>::     `alias`. Defines an alias to an existing field.\n \n-string::         <<text,`text`>>, <<keyword,`keyword`>> and <<wildcard,`wildcard`>>\n-<<number>>::     `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n-<<date>>::       `date`\n-<<date_nanos>>:: `date_nanos`\n-<<boolean>>::    `boolean`\n-<<binary>>::     `binary`\n-<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`, `ip_range`\n \n [discrete]\n-=== Complex data types\n-<<object>>::    `object` for single JSON objects\n-<<nested>>::    `nested` for arrays of JSON objects\n+[[object-types]]\n+==== Objects and relational types\n+\n+<<object>>::      `object` for single JSON objects\n+<<flattened>>::   `flattened`. Allows an entire JSON object to be indexed as a\n+                  single field.\n+<<nested>>::      `nested` for arrays of JSON objects\n+<<parent-join>>:: `join`. Defines parent/child relation for documents within the\n+                  same index\n+\n \n [discrete]\n-[[spatial_datatypes]]\n-=== Spatial data types\n+[[structured-data-types]]\n+==== Structured data types\n+\n+<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`,\n+                `date_range`, `ip_range`\n+<<ip>>::        `ip` for IPv4 and IPv6 addresses\n+{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of\n+values at index-time and store them in the index\n \n-<<geo-point>>::     `geo_point` for lat/lon points\n-<<geo-shape>>::     `geo_shape` for complex shapes like polygons\n-<<point>>::         `point` for arbitrary cartesian points.\n-<<shape>>::         `shape` for arbitrary cartesian geometries.\n \n [discrete]\n-=== Specialised data types\n+[[aggregated-data-types]]\n+==== Aggregated data types\n \n-<<ip>>::            `ip` for IPv4 and IPv6 addresses\n-<<completion-suggester,Completion data type>>::\n-                    `completion` to provide auto-complete suggestions\n+<<histogram>>:: `histogram` for pre-aggregated numerical values for percentiles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODAyNA==", "bodyText": "I think this should only have one dash: [[text-search-types]]", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474818024", "createdAt": "2020-08-21T17:00:13Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Core types\n+\n+<<binary>>::          `binary`\n+<<boolean>>::         `boolean`\n+keyword::             <<keyword,`keyword`>>,\n+                      <<constant-keyword,`constant_keyword`>>, and\n+                      <<wildcard,`wildcard`>>\n+<<number,Numbers>>::  `long`, `integer`, `short`, `byte`, `double`, `float`,\n+                      `half_float`, `scaled_float`\n+Dates::               <<date,`date`>>, <<date_nanos,`date_nanos`>>\n+<<alias,Alias>>::     `alias`. Defines an alias to an existing field.\n \n-string::         <<text,`text`>>, <<keyword,`keyword`>> and <<wildcard,`wildcard`>>\n-<<number>>::     `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n-<<date>>::       `date`\n-<<date_nanos>>:: `date_nanos`\n-<<boolean>>::    `boolean`\n-<<binary>>::     `binary`\n-<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`, `ip_range`\n \n [discrete]\n-=== Complex data types\n-<<object>>::    `object` for single JSON objects\n-<<nested>>::    `nested` for arrays of JSON objects\n+[[object-types]]\n+==== Objects and relational types\n+\n+<<object>>::      `object` for single JSON objects\n+<<flattened>>::   `flattened`. Allows an entire JSON object to be indexed as a\n+                  single field.\n+<<nested>>::      `nested` for arrays of JSON objects\n+<<parent-join>>:: `join`. Defines parent/child relation for documents within the\n+                  same index\n+\n \n [discrete]\n-[[spatial_datatypes]]\n-=== Spatial data types\n+[[structured-data-types]]\n+==== Structured data types\n+\n+<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`,\n+                `date_range`, `ip_range`\n+<<ip>>::        `ip` for IPv4 and IPv6 addresses\n+{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of\n+values at index-time and store them in the index\n \n-<<geo-point>>::     `geo_point` for lat/lon points\n-<<geo-shape>>::     `geo_shape` for complex shapes like polygons\n-<<point>>::         `point` for arbitrary cartesian points.\n-<<shape>>::         `shape` for arbitrary cartesian geometries.\n \n [discrete]\n-=== Specialised data types\n+[[aggregated-data-types]]\n+==== Aggregated data types\n \n-<<ip>>::            `ip` for IPv4 and IPv6 addresses\n-<<completion-suggester,Completion data type>>::\n-                    `completion` to provide auto-complete suggestions\n+<<histogram>>:: `histogram` for pre-aggregated numerical values for percentiles\n+                aggregations.\n \n-<<token-count>>::   `token_count` to count the number of tokens in a string\n-{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of values at index-time and store them in the index\n-{plugins}/mapper-annotated-text.html[`mapper-annotated-text`]:: `annotated-text` to index text containing special markup (typically used for identifying named entities)\n \n-<<percolator>>::    Accepts queries from the query-dsl\n+[discrete]\n+[[text-search--types]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTQ5Nw==", "bodyText": "Small comment, I realize this was just copied over but we could say 'piece of text' instead of 'string' since we're 'string' can be confusing/ overloaded.", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474821497", "createdAt": "2020-08-21T17:07:41Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Core types\n+\n+<<binary>>::          `binary`\n+<<boolean>>::         `boolean`\n+keyword::             <<keyword,`keyword`>>,\n+                      <<constant-keyword,`constant_keyword`>>, and\n+                      <<wildcard,`wildcard`>>\n+<<number,Numbers>>::  `long`, `integer`, `short`, `byte`, `double`, `float`,\n+                      `half_float`, `scaled_float`\n+Dates::               <<date,`date`>>, <<date_nanos,`date_nanos`>>\n+<<alias,Alias>>::     `alias`. Defines an alias to an existing field.\n \n-string::         <<text,`text`>>, <<keyword,`keyword`>> and <<wildcard,`wildcard`>>\n-<<number>>::     `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n-<<date>>::       `date`\n-<<date_nanos>>:: `date_nanos`\n-<<boolean>>::    `boolean`\n-<<binary>>::     `binary`\n-<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`, `ip_range`\n \n [discrete]\n-=== Complex data types\n-<<object>>::    `object` for single JSON objects\n-<<nested>>::    `nested` for arrays of JSON objects\n+[[object-types]]\n+==== Objects and relational types\n+\n+<<object>>::      `object` for single JSON objects\n+<<flattened>>::   `flattened`. Allows an entire JSON object to be indexed as a\n+                  single field.\n+<<nested>>::      `nested` for arrays of JSON objects\n+<<parent-join>>:: `join`. Defines parent/child relation for documents within the\n+                  same index\n+\n \n [discrete]\n-[[spatial_datatypes]]\n-=== Spatial data types\n+[[structured-data-types]]\n+==== Structured data types\n+\n+<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`,\n+                `date_range`, `ip_range`\n+<<ip>>::        `ip` for IPv4 and IPv6 addresses\n+{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of\n+values at index-time and store them in the index\n \n-<<geo-point>>::     `geo_point` for lat/lon points\n-<<geo-shape>>::     `geo_shape` for complex shapes like polygons\n-<<point>>::         `point` for arbitrary cartesian points.\n-<<shape>>::         `shape` for arbitrary cartesian geometries.\n \n [discrete]\n-=== Specialised data types\n+[[aggregated-data-types]]\n+==== Aggregated data types\n \n-<<ip>>::            `ip` for IPv4 and IPv6 addresses\n-<<completion-suggester,Completion data type>>::\n-                    `completion` to provide auto-complete suggestions\n+<<histogram>>:: `histogram` for pre-aggregated numerical values for percentiles\n+                aggregations.\n \n-<<token-count>>::   `token_count` to count the number of tokens in a string\n-{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of values at index-time and store them in the index\n-{plugins}/mapper-annotated-text.html[`mapper-annotated-text`]:: `annotated-text` to index text containing special markup (typically used for identifying named entities)\n \n-<<percolator>>::    Accepts queries from the query-dsl\n+[discrete]\n+[[text-search--types]]\n+==== Text search types\n \n-<<parent-join>>::   Defines parent/child relation for documents within the same index\n+<<text,Text>>::   `text` for analyzed, unstructured content\n+{plugins}/mapper-annotated-text.html[`mapper-annotated-text`]:: `annotated-text` to index text containing special markup (typically used for identifying named entities)\n+<<completion-suggester,Completion>>:: `completion` to provide auto-complete suggestions\n+<<search-as-you-type>>:: `search_as_you_type`. A `text`-like field optimized for\n+queries to implement as-you-type completion\n+<<token-count>>::        `token_count` to count the number of tokens in a string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjgxMzI0", "url": "https://github.com/elastic/elasticsearch/pull/61117#pullrequestreview-472681324", "createdAt": "2020-08-21T17:53:23Z", "commit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1MzoyM1rOHE2I6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1NDoyNlrOHE2LcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0MzM3MQ==", "bodyText": "The grouping seems a lot more readable. Looking at the preview, I wonder if we could make it more compact/ less redundant by having headings be the field name itself when possible? The heading could also be a type family or natural grouping. An example:\n<<alias,`alias`>>:: Defines an alias to an existing field.\nkeyword:: The keyword family, including <<keyword, `keyword`>>, <<wildcard, `wildcard`>> ...\n<<number,Numbers>>:: Numeric types such as `long` and `double`.\n\nFor me this is easier to read and gives more consistency in terms of the description. We wouldn't have a mix of styles: binary has no description, alias uses a full sentence, object says \"object for single JSON objects\".", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474843371", "createdAt": "2020-08-21T17:53:23Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDAxNg==", "bodyText": "Noting that @nik9000 suggested 'Common types' here. I don't feel strongly but think that works nicely too.", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474844016", "createdAt": "2020-08-21T17:54:26Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n-== Field data types\n+== Field data types [[_core_datatypes]]\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Core types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e28b87c780f0c74bc15901dff283f63ead441de6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee637182714c0309b0bd67feb9816db16f568c1", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/4ee637182714c0309b0bd67feb9816db16f568c1", "committedDate": "2020-08-21T20:35:14Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2293dad796671f57e94959548c3e50c27c48053e", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/2293dad796671f57e94959548c3e50c27c48053e", "committedDate": "2020-08-21T21:00:18Z", "message": "Reword"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODE5NjY0", "url": "https://github.com/elastic/elasticsearch/pull/61117#pullrequestreview-472819664", "createdAt": "2020-08-21T21:06:34Z", "commit": {"oid": "2293dad796671f57e94959548c3e50c27c48053e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTowNjozNFrOHE946Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMjozOFrOHE-A-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MDM0NQ==", "bodyText": "Maybe \"Analyzed, unstructured text content\" is clearer.", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474970345", "createdAt": "2020-08-21T21:06:34Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n == Field data types\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n+\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Common types\n+\n+<<binary,`binary`>>::   Binary value encoded as a Base64 string.\n+<<boolean,`boolean`>>:: `true` and `false` values.\n+Keyword::               The keyword family, including <<keyword, `keyword`>>,\n+                        <<constant-keyword,`constant_keyword`>>, and\n+                        <<wildcard, `wildcard`>>.\n+<<number,Numbers>>::    Numeric types, such as `long` and `double`.\n+Dates::                 Date types, including <<date,`date`>> and \n+                        <<date_nanos,`date_nanos`>>.\n+<<alias,`alias`>>::     Defines an alias for an existing field.\n \n-string::         <<text,`text`>>, <<keyword,`keyword`>> and <<wildcard,`wildcard`>>\n-<<number>>::     `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n-<<date>>::       `date`\n-<<date_nanos>>:: `date_nanos`\n-<<boolean>>::    `boolean`\n-<<binary>>::     `binary`\n-<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`, `ip_range`\n \n [discrete]\n-=== Complex data types\n-<<object>>::    `object` for single JSON objects\n-<<nested>>::    `nested` for arrays of JSON objects\n+[[object-types]]\n+==== Objects and relational types\n+\n+<<object,`object`>>::         A single JSON object.\n+<<flattened,`flattened`>>::   An entire JSON object as a single field value.\n+<<nested,`nested`>>::         An array of JSON objects.\n+<<parent-join,`join`>>::      Defines a parent/child relationship for documents\n+                              in the same index.\n+\n \n [discrete]\n-[[spatial_datatypes]]\n-=== Spatial data types\n+[[structured-data-types]]\n+==== Structured data types\n+\n+<<range,Range>>::   Range types, such as `long_range`, `double_range`,\n+                    `date_range`, and `ip_range`.\n+<<ip,`ip`>>::       IPv4 and IPv6 addresses.\n+{plugins}/mapper-murmur3.html[`murmur3`]:: Compute and stores hashes of\n+values.\n \n-<<geo-point>>::     `geo_point` for lat/lon points\n-<<geo-shape>>::     `geo_shape` for complex shapes like polygons\n-<<point>>::         `point` for arbitrary cartesian points.\n-<<shape>>::         `shape` for arbitrary cartesian geometries.\n \n [discrete]\n-=== Specialised data types\n+[[aggregated-data-types]]\n+==== Aggregated data types\n \n-<<ip>>::            `ip` for IPv4 and IPv6 addresses\n-<<completion-suggester,Completion data type>>::\n-                    `completion` to provide auto-complete suggestions\n+<<histogram,`histogram`>>:: Pre-aggregated numerical values.\n \n-<<token-count>>::   `token_count` to count the number of tokens in a string\n-{plugins}/mapper-murmur3.html[`mapper-murmur3`]:: `murmur3` to compute hashes of values at index-time and store them in the index\n-{plugins}/mapper-annotated-text.html[`mapper-annotated-text`]:: `annotated-text` to index text containing special markup (typically used for identifying named entities)\n \n-<<percolator>>::    Accepts queries from the query-dsl\n+[discrete]\n+[[text-search-types]]\n+==== Text search types\n \n-<<parent-join>>::   Defines parent/child relation for documents within the same index\n+<<text,`text`>>:: Analyzed, unstructured content.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2293dad796671f57e94959548c3e50c27c48053e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MDYxNw==", "bodyText": "Minor thought, maybe \"Aggregate data types\" reads slightly nicer.", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474970617", "createdAt": "2020-08-21T21:07:16Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n == Field data types\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n+\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Common types\n+\n+<<binary,`binary`>>::   Binary value encoded as a Base64 string.\n+<<boolean,`boolean`>>:: `true` and `false` values.\n+Keyword::               The keyword family, including <<keyword, `keyword`>>,\n+                        <<constant-keyword,`constant_keyword`>>, and\n+                        <<wildcard, `wildcard`>>.\n+<<number,Numbers>>::    Numeric types, such as `long` and `double`.\n+Dates::                 Date types, including <<date,`date`>> and \n+                        <<date_nanos,`date_nanos`>>.\n+<<alias,`alias`>>::     Defines an alias for an existing field.\n \n-string::         <<text,`text`>>, <<keyword,`keyword`>> and <<wildcard,`wildcard`>>\n-<<number>>::     `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n-<<date>>::       `date`\n-<<date_nanos>>:: `date_nanos`\n-<<boolean>>::    `boolean`\n-<<binary>>::     `binary`\n-<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`, `ip_range`\n \n [discrete]\n-=== Complex data types\n-<<object>>::    `object` for single JSON objects\n-<<nested>>::    `nested` for arrays of JSON objects\n+[[object-types]]\n+==== Objects and relational types\n+\n+<<object,`object`>>::         A single JSON object.\n+<<flattened,`flattened`>>::   An entire JSON object as a single field value.\n+<<nested,`nested`>>::         An array of JSON objects.\n+<<parent-join,`join`>>::      Defines a parent/child relationship for documents\n+                              in the same index.\n+\n \n [discrete]\n-[[spatial_datatypes]]\n-=== Spatial data types\n+[[structured-data-types]]\n+==== Structured data types\n+\n+<<range,Range>>::   Range types, such as `long_range`, `double_range`,\n+                    `date_range`, and `ip_range`.\n+<<ip,`ip`>>::       IPv4 and IPv6 addresses.\n+{plugins}/mapper-murmur3.html[`murmur3`]:: Compute and stores hashes of\n+values.\n \n-<<geo-point>>::     `geo_point` for lat/lon points\n-<<geo-shape>>::     `geo_shape` for complex shapes like polygons\n-<<point>>::         `point` for arbitrary cartesian points.\n-<<shape>>::         `shape` for arbitrary cartesian geometries.\n \n [discrete]\n-=== Specialised data types\n+[[aggregated-data-types]]\n+==== Aggregated data types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2293dad796671f57e94959548c3e50c27c48053e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MjQxMQ==", "bodyText": "I just noticed that the existing description of object + nested is quite confusing. Suggested update:\n\nobject: A JSON object.\nnested: A JSON object that preserves the relationship between its subfields.", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r474972411", "createdAt": "2020-08-21T21:12:38Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,113 @@\n [[mapping-types]]\n == Field data types\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n+\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Common types\n+\n+<<binary,`binary`>>::   Binary value encoded as a Base64 string.\n+<<boolean,`boolean`>>:: `true` and `false` values.\n+Keyword::               The keyword family, including <<keyword, `keyword`>>,\n+                        <<constant-keyword,`constant_keyword`>>, and\n+                        <<wildcard, `wildcard`>>.\n+<<number,Numbers>>::    Numeric types, such as `long` and `double`.\n+Dates::                 Date types, including <<date,`date`>> and \n+                        <<date_nanos,`date_nanos`>>.\n+<<alias,`alias`>>::     Defines an alias for an existing field.\n \n-string::         <<text,`text`>>, <<keyword,`keyword`>> and <<wildcard,`wildcard`>>\n-<<number>>::     `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n-<<date>>::       `date`\n-<<date_nanos>>:: `date_nanos`\n-<<boolean>>::    `boolean`\n-<<binary>>::     `binary`\n-<<range>>::      `integer_range`, `float_range`, `long_range`, `double_range`, `date_range`, `ip_range`\n \n [discrete]\n-=== Complex data types\n-<<object>>::    `object` for single JSON objects\n-<<nested>>::    `nested` for arrays of JSON objects\n+[[object-types]]\n+==== Objects and relational types\n+\n+<<object,`object`>>::         A single JSON object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2293dad796671f57e94959548c3e50c27c48053e"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cbd2dbaa260e37da89bd2ab68dffa31a353a06b", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/8cbd2dbaa260e37da89bd2ab68dffa31a353a06b", "committedDate": "2020-08-21T22:17:28Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e67259356242a88723f7ecddd9f732b7ece0caee", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/e67259356242a88723f7ecddd9f732b7ece0caee", "committedDate": "2020-08-24T13:35:57Z", "message": "Add quantifiers to numbers desc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e50bcd5c4ccaf56fed36d1b3afb33c37791dbf7a", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/e50bcd5c4ccaf56fed36d1b3afb33c37791dbf7a", "committedDate": "2020-08-24T14:23:44Z", "message": "Update number desc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85816ba8b98fb3bc67e19ecc27b8b1f709b9798f", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/85816ba8b98fb3bc67e19ecc27b8b1f709b9798f", "committedDate": "2020-08-24T14:24:22Z", "message": "Add missing comma"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d8c12f4a02245ac5099867a7c1a247f7f91c442", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/0d8c12f4a02245ac5099867a7c1a247f7f91c442", "committedDate": "2020-08-24T14:24:43Z", "message": "reword"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzYwOTM3", "url": "https://github.com/elastic/elasticsearch/pull/61117#pullrequestreview-473760937", "createdAt": "2020-08-24T18:38:19Z", "commit": {"oid": "0d8c12f4a02245ac5099867a7c1a247f7f91c442"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozODoxOVrOHFxn1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozODoxOVrOHFxn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzk0Mg==", "bodyText": "Sorry for nitpicking -- the 'amounts' part is really helpful, but the 'rather than IDs' part feels confusing, and as @markharwood mentioned there are actually some use cases for mapping ordered IDs as numbers. We could remove 'rather than IDs' (since we already have a warning/ tip about it in the numeric types docs)?", "url": "https://github.com/elastic/elasticsearch/pull/61117#discussion_r475817942", "createdAt": "2020-08-24T18:38:19Z", "author": {"login": "jtibshirani"}, "path": "docs/reference/mapping/types.asciidoc", "diffHunk": "@@ -1,72 +1,115 @@\n [[mapping-types]]\n == Field data types\n \n-Elasticsearch supports a number of different data types for the fields in a\n-document:\n+Each field has a _field data type_, or _field type_. This type indicates the\n+kind of data the field contains, such as strings or boolean values, and its\n+intended use. For example, you can index strings to both `text` and `keyword`\n+fields. However, `text` field values are <<analysis,analyzed>> for full-text\n+search while `keyword` strings are left as-is for filtering and sorting.\n+\n+Field types are grouped by _family_. Types in the same family support the same\n+search functionality but may have different space usage or performance\n+characteristics.\n+\n+Currently, the only type family is `keyword`, which consists of the `keyword`,\n+`constant_keyword`, and `wildcard` field types. Other type families have only a\n+single field type. For example, the `boolean` type family consists of one field\n+type: `boolean`.\n+\n \n [discrete]\n [[_core_datatypes]]\n-=== Core data types\n+==== Common types\n+\n+<<binary,`binary`>>::   Binary value encoded as a Base64 string.\n+<<boolean,`boolean`>>:: `true` and `false` values.\n+Keyword::               The keyword family, including <<keyword, `keyword`>>,\n+                        <<constant-keyword,`constant_keyword`>>, and\n+                        <<wildcard, `wildcard`>>.\n+<<number,Numbers>>::    Numeric types, such as `long` and `double`, used to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8c12f4a02245ac5099867a7c1a247f7f91c442"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4beb426f13608f955c5d04b76625851e5125d92", "author": {"user": {"login": "jrodewig", "name": "James Rodewig"}}, "url": "https://github.com/elastic/elasticsearch/commit/c4beb426f13608f955c5d04b76625851e5125d92", "committedDate": "2020-08-24T18:40:43Z", "message": "Reword Numbers desc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "235791535c9ae2246cbbaa8ae08919e9b532a790", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/235791535c9ae2246cbbaa8ae08919e9b532a790", "committedDate": "2020-08-26T17:18:46Z", "message": "Merge branch 'master' into docs__reorg-mapping-types"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3296, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}