{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTQ2NDA3", "number": 51612, "title": "Log exceptions in TcpTransport at DEBUG level", "bodyText": "When running Elasticsearch on a flaky network, we may see nodes leaving the\ncluster with reason disconnected. It may be useful to the cluster\nadministrator to see the full exception that caused the disconnection, but this\nis only available with TRACE level logging which commingles the details of\nthe problem with other messages that are not useful to end users.\nThis commit promotes logging of exceptions in TcpTransport from TRACE to\nDEBUG to separate them from the truly TRACE-level messages.", "createdAt": "2020-01-29T13:06:23Z", "url": "https://github.com/elastic/elasticsearch/pull/51612", "merged": true, "mergeCommit": {"oid": "336a3958aa60b6381ee80e0127b3375f505c5bc4"}, "closed": true, "closedAt": "2020-01-31T01:12:06Z", "author": {"login": "DaveCTurner"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_FmuhgH2gAyMzY4NTQ2NDA3OjZlYzkwZTVjODdjYTc1MTIzNjg5OGJhM2ZmOTZkNDlmZDcyMmMwZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_dy1oAFqTM1MDk5NzI4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/6ec90e5c87ca751236898ba3ff96d49fd722c0f9", "committedDate": "2020-01-29T13:03:59Z", "message": "Log exceptions in TcpTransport at DEBUG level\n\nWhen running Elasticsearch on a flaky network, we may see nodes leaving the\ncluster with reason `disconnected`. It may be useful to the cluster\nadministrator to see the full exception that caused the disconnection, but this\nis only available with `TRACE` level logging which commingles the details of\nthe problem with other messages that are not useful to end users.\n\nThis commit promotes logging of exceptions in `TcpTransport` from `TRACE` to\n`DEBUG` to separate them from the truly `TRACE`-level messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDkxODUx", "url": "https://github.com/elastic/elasticsearch/pull/51612#pullrequestreview-350091851", "createdAt": "2020-01-29T13:09:26Z", "commit": {"oid": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowOToyN1rOFjHxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowOToyN1rOFjHxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTc2MA==", "bodyText": "NIT: Maybe use org.elasticsearch.threadpool.ThreadPool#terminate(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit) here so we don't get the leaked thread warning when running this one?", "url": "https://github.com/elastic/elasticsearch/pull/51612#discussion_r372371760", "createdAt": "2020-01-29T13:09:27Z", "author": {"login": "original-brownbear"}, "path": "server/src/test/java/org/elasticsearch/transport/TcpTransportTests.java", "diffHunk": "@@ -354,4 +366,101 @@ public void testHTTPResponse() throws IOException {\n                     \"(not HTTP port) of a remote node is specified in the configuration\", ex.getMessage());\n         }\n     }\n+\n+    @TestLogging(reason = \"testing logging\", value = \"org.elasticsearch.transport.TcpTransport:DEBUG\")\n+    public void testExceptionHandling() throws IOException, IllegalAccessException {\n+        testExceptionHandling(false, new ElasticsearchException(\"simulated\"), true,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new ElasticsearchException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"exception caught on transport layer [*], closing connection\"));\n+        testExceptionHandling(new ClosedChannelException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new ElasticsearchException(\"Connection reset\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"close connection exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(new BindException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"bind exception caught on transport layer [*]\"));\n+        testExceptionHandling(new CancelledKeyException(),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.DEBUG, \"cancelled key exception caught on transport layer [*], disconnecting from relevant node\"));\n+        testExceptionHandling(true, new TcpTransport.HttpRequestOnTransportException(\"test\"), false,\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.ERROR, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.WARN, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.INFO, \"*\"),\n+            new MockLogAppender.UnseenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\", Level.DEBUG, \"*\"));\n+        testExceptionHandling(new StreamCorruptedException(\"simulated\"),\n+            new MockLogAppender.SeenEventExpectation(\"message\", \"org.elasticsearch.transport.TcpTransport\",\n+                Level.WARN, \"simulated, [*], closing connection\"));\n+    }\n+\n+    private void testExceptionHandling(Exception exception,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        testExceptionHandling(true, exception, true, expectations);\n+    }\n+\n+    private void testExceptionHandling(boolean startTransport, Exception exception, boolean expectClosed,\n+                                       MockLogAppender.LoggingExpectation... expectations) throws IllegalAccessException, IOException {\n+        final TestThreadPool testThreadPool = new TestThreadPool(\"test\");\n+        TcpTransport tcpTransport = null;\n+        MockLogAppender appender = new MockLogAppender();\n+\n+        try {\n+            appender.start();\n+\n+            Loggers.addAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            for (MockLogAppender.LoggingExpectation expectation : expectations) {\n+                appender.addExpectation(expectation);\n+            }\n+\n+            tcpTransport = new TcpTransport(Settings.EMPTY, Version.CURRENT, testThreadPool,\n+                new MockPageCacheRecycler(Settings.EMPTY),\n+                new NoneCircuitBreakerService(), writableRegistry(), new NetworkService(Collections.emptyList())) {\n+\n+                @Override\n+                protected TcpServerChannel bind(String name, InetSocketAddress address) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected TcpChannel initiateChannel(DiscoveryNode node) {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                protected void stopInternal() {\n+                }\n+            };\n+\n+            if (startTransport) {\n+                tcpTransport.start();\n+            }\n+\n+            final FakeTcpChannel channel = new FakeTcpChannel();\n+            final PlainActionFuture<Void> listener = new PlainActionFuture<>();\n+            channel.addCloseListener(listener);\n+\n+            tcpTransport.onException(channel, exception);\n+\n+            if (expectClosed) {\n+                assertTrue(listener.isDone());\n+                assertThat(listener.actionGet(), nullValue());\n+            } else {\n+                assertFalse(listener.isDone());\n+            }\n+\n+            appender.assertAllExpectationsMatched();\n+\n+        } finally {\n+            Loggers.removeAppender(LogManager.getLogger(TcpTransport.class), appender);\n+            appender.stop();\n+            IOUtils.close(tcpTransport);\n+            testThreadPool.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec90e5c87ca751236898ba3ff96d49fd722c0f9"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0e813b23bef8ed648296a70d004d4d0b0221362", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/f0e813b23bef8ed648296a70d004d4d0b0221362", "committedDate": "2020-01-29T13:19:21Z", "message": "ThreadPool.terminate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjIwMzQ5", "url": "https://github.com/elastic/elasticsearch/pull/51612#pullrequestreview-350220349", "createdAt": "2020-01-29T15:57:40Z", "commit": {"oid": "f0e813b23bef8ed648296a70d004d4d0b0221362"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a62032c3fbcb027449decef025e32a22cef398a2", "author": {"user": {"login": "DaveCTurner", "name": "David Turner"}}, "url": "https://github.com/elastic/elasticsearch/commit/a62032c3fbcb027449decef025e32a22cef398a2", "committedDate": "2020-01-29T17:19:44Z", "message": "Use a static method to reduce the mockery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTk3Mjg1", "url": "https://github.com/elastic/elasticsearch/pull/51612#pullrequestreview-350997285", "createdAt": "2020-01-30T17:14:56Z", "commit": {"oid": "a62032c3fbcb027449decef025e32a22cef398a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3043, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}