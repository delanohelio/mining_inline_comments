{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTg0NDE3", "number": 58439, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MDozNFrOEH-ncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODozNTowM1rOEIqlyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODAxMzkzOnYy", "diffSide": "RIGHT", "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MDozNFrOGnqOLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MDozNFrOGnqOLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzOTQwNA==", "bodyText": "The shared parseTextField() method does a deprecation check for similarity now, so we need to move it to after we've processed the similarity field.  To ensure that mapper-specific fields still get checked for null, a new TypeParsers.checkNull() method is called for each entry.", "url": "https://github.com/elastic/elasticsearch/pull/58439#discussion_r444239404", "createdAt": "2020-06-23T13:50:34Z", "author": {"login": "romseygeek"}, "path": "modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java", "diffHunk": "@@ -113,30 +116,39 @@\n             builder.indexAnalyzer(parserContext.getIndexAnalyzers().getDefaultIndexAnalyzer());\n             builder.searchAnalyzer(parserContext.getIndexAnalyzers().getDefaultSearchAnalyzer());\n             builder.searchQuoteAnalyzer(parserContext.getIndexAnalyzers().getDefaultSearchQuoteAnalyzer());\n-            parseTextField(builder, name, node, parserContext);\n             for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext();) {\n                 final Map.Entry<String, Object> entry = iterator.next();\n                 final String fieldName = entry.getKey();\n                 final Object fieldNode = entry.getValue();\n-\n+                checkNull(fieldName, fieldNode);\n                 if (fieldName.equals(\"max_shingle_size\")) {\n                     builder.maxShingleSize(nodeIntegerValue(fieldNode));\n                     iterator.remove();\n+                } else if (fieldName.equals(\"similarity\")) {\n+                    SimilarityProvider similarityProvider = TypeParsers.resolveSimilarity(parserContext, fieldName, fieldNode.toString());\n+                    builder.similarity(similarityProvider);\n+                    iterator.remove();\n                 }\n                 // TODO should we allow to configure the prefix field\n             }\n+            parseTextField(builder, name, node, parserContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5577d9514b63c8b950f64fe27d5a66bdb989ed98"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODAyMTQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MjowM1rOGnqS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MjowM1rOGnqS6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MDYxNg==", "bodyText": "Same process here as in SearchAsYouTypeFieldMapper", "url": "https://github.com/elastic/elasticsearch/pull/58439#discussion_r444240616", "createdAt": "2020-06-23T13:52:03Z", "author": {"login": "romseygeek"}, "path": "server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java", "diffHunk": "@@ -310,8 +317,13 @@ public TextFieldMapper build(BuilderContext context) {\n                 } else if (propName.equals(\"index_phrases\")) {\n                     builder.indexPhrases(XContentMapValues.nodeBooleanValue(propNode, \"index_phrases\"));\n                     iterator.remove();\n+                } else if (propName.equals(\"similarity\")) {\n+                    SimilarityProvider similarityProvider = TypeParsers.resolveSimilarity(parserContext, fieldName, propNode.toString());\n+                    builder.similarity(similarityProvider);\n+                    iterator.remove();\n                 }\n             }\n+            parseTextField(builder, fieldName, node, parserContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5577d9514b63c8b950f64fe27d5a66bdb989ed98"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODAyODA5OnYy", "diffSide": "LEFT", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MzozMFrOGnqXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MzozMFrOGnqXFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MTY4Nw==", "bodyText": "This has been moved directly into the applicable FieldMappers", "url": "https://github.com/elastic/elasticsearch/pull/58439#discussion_r444241687", "createdAt": "2020-06-23T13:53:30Z", "author": {"login": "romseygeek"}, "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/FieldMapperTestCase.java", "diffHunk": "@@ -106,10 +103,6 @@ private Modifier booleanModifier(String name, boolean updateable, BiConsumer<T,\n             a.searchQuoteAnalyzer(new NamedAnalyzer(\"standard\", AnalyzerScope.INDEX, new StandardAnalyzer()));\n             a.searchQuoteAnalyzer(new NamedAnalyzer(\"whitespace\", AnalyzerScope.INDEX, new WhitespaceAnalyzer()));\n         }),\n-        new Modifier(\"similarity\", false, (a, b) -> {\n-            a.similarity(new SimilarityProvider(\"BM25\", new BM25Similarity()));\n-            b.similarity(new SimilarityProvider(\"boolean\", new BooleanSimilarity()));\n-        }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5577d9514b63c8b950f64fe27d5a66bdb989ed98"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTIxODY2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/similarity/SimilarityService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODozNTowM1rOGow4Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODozNTowM1rOGow4Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NzAzOQ==", "bodyText": "would it be possible to avoid having null similarity provider in TextSearchInfo and rather pass in directly the default similarity, or have some placeholder instead of null?", "url": "https://github.com/elastic/elasticsearch/pull/58439#discussion_r445397039", "createdAt": "2020-06-25T08:35:03Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/similarity/SimilarityService.java", "diffHunk": "@@ -163,7 +163,8 @@ Similarity getDefaultSimilarity() {\n         @Override\n         public Similarity get(String name) {\n             MappedFieldType fieldType = mapperService.fieldType(name);\n-            return (fieldType != null && fieldType.similarity() != null) ? fieldType.similarity().get() : defaultSimilarity;\n+            return (fieldType != null && fieldType.getTextSearchInfo().getSimilarity() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5577d9514b63c8b950f64fe27d5a66bdb989ed98"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1381, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}