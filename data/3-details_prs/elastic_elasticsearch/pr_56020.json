{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNDE2NTQ4", "number": 56020, "title": "[ML] reduce InferenceProcessor.Factory log spam by not parsing pipelines", "bodyText": "If there are ill-formed pipelines, or other pipelines are not ready to be parsed, InferenceProcessor.Factory::accept(ClusterState) logs warnings. This can be confusing and cause log spam.\nIt might lead folks to think there an issue with the inference processor. Also, they would see logs for the inference processor even though they might not be using the inference processor. Leading to more confusion.\nAdditionally, pipelines might not be parseable in this method as some processors require the new cluster state metadata before construction (e.g. enrich requires cluster metadata to be set before creating the processor).\ncloses #55985", "createdAt": "2020-04-30T12:18:16Z", "url": "https://github.com/elastic/elasticsearch/pull/56020", "merged": true, "mergeCommit": {"oid": "134c0e857e8c556f0a25e211742fd06e2ec0bcab"}, "closed": true, "closedAt": "2020-05-04T16:16:53Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccsCfHAH2gAyNDExNDE2NTQ4OjM4MGI0NTkyNjVlN2JmNzQxOTRkYTBiZDMyNTAzNmQyN2MwZjc5YjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd_balgH2gAyNDExNDE2NTQ4OjZhZTNhZGU0YmJjOWI5YjEyMmFjNmE2NDMzMDA0YmViNTBkNzlkODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "380b459265e7bf74194da0bd325036d27c0f79b3", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/380b459265e7bf74194da0bd325036d27c0f79b3", "committedDate": "2020-04-30T12:14:30Z", "message": "[ML] reduce InfereceProcessor.Factory log spam by not parsing pipelines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTIzNzI2", "url": "https://github.com/elastic/elasticsearch/pull/56020#pullrequestreview-403523726", "createdAt": "2020-04-30T13:34:10Z", "commit": {"oid": "380b459265e7bf74194da0bd325036d27c0f79b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzozNDoxMFrOGOpfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzozNDoxMFrOGOpfFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAxMjk0OQ==", "bodyText": "++ on this approach to getting a count of inference processors. It should fit more nicely into the ingest pipeline initialization process and be lighter weight than fully instantiating each pipeline.\nOne thing you might consider is that the config map for an ingest pipeline is a tree structure in which some nodes such as ForEach processors may contain child nodes. I do not know how inference processors are typically configured, but the code above will count them only if they're at the top level of the pipeline tree.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418012949", "createdAt": "2020-04-30T13:34:10Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,14 +200,21 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            if (TYPE.equals(entry.getKey())) {\n+                                count++;\n+                            }\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "380b459265e7bf74194da0bd325036d27c0f79b3"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/b3b845742f61a42b593bb2df3b46490bc984ca48", "committedDate": "2020-04-30T15:18:03Z", "message": "handling foreach processor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjQ1ODEz", "url": "https://github.com/elastic/elasticsearch/pull/56020#pullrequestreview-403645813", "createdAt": "2020-04-30T15:43:14Z", "commit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0MzoxNFrOGOvNBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMTo0MVrOGOy-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjYyOA==", "bodyText": "nit: you could use ForEachProcessor.TYPE", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418106628", "createdAt": "2020-04-30T15:43:14Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -165,6 +165,7 @@ public String getType() {\n \n     public static final class Factory implements Processor.Factory, Consumer<ClusterState> {\n \n+        private static final String FOREACH_PROCESSOR_NAME = \"foreach\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2ODQzMg==", "bodyText": "The for-each processor and the onFailure directive are the only scenarios I know of that result in child processors. Both of those can be nested to an indefinite number of levels. I'm not sure how far you want to go down that rabbit hole, though.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r418168432", "createdAt": "2020-04-30T17:21:41Z", "author": {"login": "danhermann"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -206,7 +207,18 @@ public void accept(ClusterState state) {\n                     for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n                         for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n                             if (TYPE.equals(entry.getKey())) {\n-                                count++;\n+                                ++count;\n+                            }\n+                            // Special handling as `foreach` processors allow a `processor` to be defined\n+                            if (FOREACH_PROCESSOR_NAME.equals(entry.getKey())) {\n+                                if (entry.getValue() instanceof Map<?, ?>) {\n+                                    Object processorDefinition = ((Map<?, ?>)entry.getValue()).get(\"processor\");\n+                                    if (processorDefinition instanceof Map<?, ?>) {\n+                                        if (((Map<?, ?>) processorDefinition).keySet().contains(TYPE)) {\n+                                            ++count;\n+                                        }\n+                                    }\n+                                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b845742f61a42b593bb2df3b46490bc984ca48"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/a916d4dae0964363ccc6ff2289fa7b72c836e6cd", "committedDate": "2020-04-30T18:28:45Z", "message": "handling recursively defined processors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTMyNzI2", "url": "https://github.com/elastic/elasticsearch/pull/56020#pullrequestreview-404932726", "createdAt": "2020-05-04T12:17:19Z", "commit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNzoxOVrOGP9tew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MjozMVrOGP-hKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5Mjg5MQ==", "bodyText": "??\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n          \n          \n            \n                        if (level > 10) {", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419392891", "createdAt": "2020-05-04T12:17:19Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjEyMA==", "bodyText": "foreach can only have 1 processor so there is no need to iterate here.", "url": "https://github.com/elastic/elasticsearch/pull/56020#discussion_r419406120", "createdAt": "2020-05-04T12:42:31Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/ingest/InferenceProcessor.java", "diffHunk": "@@ -205,19 +204,65 @@ public void accept(ClusterState state) {\n \n             int count = 0;\n             for (PipelineConfiguration configuration : ingestMetadata.getPipelines().values()) {\n+                Map<String, Object> configMap = configuration.getConfigAsMap();\n                 try {\n-                    Pipeline pipeline = Pipeline.create(configuration.getId(),\n-                        configuration.getConfigAsMap(),\n-                        ingestService.getProcessorFactories(),\n-                        ingestService.getScriptService());\n-                    count += pipeline.getProcessors().stream().filter(processor -> processor instanceof InferenceProcessor).count();\n+                    List<Map<String, Object>> processorConfigs = ConfigurationUtils.readList(null, null, configMap, PROCESSORS_KEY);\n+                    for (Map<String, Object> processorConfigWithKey : processorConfigs) {\n+                        for (Map.Entry<String, Object> entry : processorConfigWithKey.entrySet()) {\n+                            count += numInferenceProcessors(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                // We cannot throw any exception here. It might break other pipelines.\n                 } catch (Exception ex) {\n-                    logger.warn(new ParameterizedMessage(\"failure parsing pipeline config [{}]\", configuration.getId()), ex);\n+                    logger.debug(\n+                        () -> new ParameterizedMessage(\"failed gathering processors for pipeline [{}]\", configuration.getId()),\n+                        ex);\n                 }\n             }\n             currentInferenceProcessors = count;\n         }\n \n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Object processorDefinition) {\n+            return numInferenceProcessors(processorType, (Map<String, Object>)processorDefinition, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        static int numInferenceProcessors(String processorType, Map<String, Object> processorDefinition, int level) {\n+            int count = 0;\n+            // arbitrary, but we must limit this somehow\n+            if (MAX_INFERENCE_PROCESSOR_SEARCH_RECURSIONS > 10) {\n+                return count;\n+            }\n+            if (processorType == null || processorDefinition == null) {\n+                return count;\n+            }\n+            if (TYPE.equals(processorType)) {\n+                count++;\n+            }\n+            if (FOREACH_PROCESSOR_NAME.equals(processorType)) {\n+                Map<String, Object> innerProcessor = (Map<String, Object>)processorDefinition.get(\"processor\");\n+                if (innerProcessor != null) {\n+                    for (Map.Entry<String, Object> innerProcessorWithName : innerProcessor.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a916d4dae0964363ccc6ff2289fa7b72c836e6cd"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "914348b403ea158cf6336cc8792c5d6263de0e5e", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/914348b403ea158cf6336cc8792c5d6263de0e5e", "committedDate": "2020-05-04T13:21:12Z", "message": "fixing recursion level check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ace497055d7a01b6f0944449a08830f430b43d5", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/3ace497055d7a01b6f0944449a08830f430b43d5", "committedDate": "2020-05-04T13:21:15Z", "message": "Merge branch 'master' into feature/inference-do-not-parse-pipelines-needlessly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTgxMTcw", "url": "https://github.com/elastic/elasticsearch/pull/56020#pullrequestreview-404981170", "createdAt": "2020-05-04T13:22:56Z", "commit": {"oid": "3ace497055d7a01b6f0944449a08830f430b43d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae3ade4bbc9b9b122ac6a6433004beb50d79d80", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/6ae3ade4bbc9b9b122ac6a6433004beb50d79d80", "committedDate": "2020-05-04T13:23:51Z", "message": "adding comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 154, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}