{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzI1OTMx", "number": 54437, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoyNDowMVrODv4sdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoyNDowMVrODv4sdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTM4NTQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlUpgradeModeActionFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoyNDowMVrOGCkTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToxMzozMVrOGCmP7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0NTA4NA==", "bodyText": "Please add a comment here to say that the key requirement is that this filter operates after the security action filter so that an unauthorised user gets told they're unauthorised instead of finding out whether upgrade mode is enabled.\nIt's not hard to achieve this as security's order is Integer.MIN_VALUE so any number greater than that would work.  So the actual number is not that important, but the reasoning behind it is.", "url": "https://github.com/elastic/elasticsearch/pull/54437#discussion_r405345084", "createdAt": "2020-04-08T08:24:01Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlUpgradeModeActionFilter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml;\n+\n+import org.elasticsearch.ElasticsearchStatusException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.support.ActionFilter;\n+import org.elasticsearch.cluster.ClusterChangedEvent;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.xpack.core.ml.MlMetadata;\n+import org.elasticsearch.xpack.core.ml.action.CloseJobAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteCalendarAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteCalendarEventAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteExpiredDataAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteFilterAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteForecastAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteJobAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteModelSnapshotAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n+import org.elasticsearch.xpack.core.ml.action.FinalizeJobExecutionAction;\n+import org.elasticsearch.xpack.core.ml.action.FlushJobAction;\n+import org.elasticsearch.xpack.core.ml.action.ForecastJobAction;\n+import org.elasticsearch.xpack.core.ml.action.KillProcessAction;\n+import org.elasticsearch.xpack.core.ml.action.OpenJobAction;\n+import org.elasticsearch.xpack.core.ml.action.PersistJobAction;\n+import org.elasticsearch.xpack.core.ml.action.PostCalendarEventsAction;\n+import org.elasticsearch.xpack.core.ml.action.PostDataAction;\n+import org.elasticsearch.xpack.core.ml.action.PutCalendarAction;\n+import org.elasticsearch.xpack.core.ml.action.PutDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.PutDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.PutFilterAction;\n+import org.elasticsearch.xpack.core.ml.action.PutJobAction;\n+import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.xpack.core.ml.action.RevertModelSnapshotAction;\n+import org.elasticsearch.xpack.core.ml.action.StartDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.StartDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.StopDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.StopDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateCalendarJobAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateFilterAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateJobAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateModelSnapshotAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateProcessAction;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link MlUpgradeModeActionFilter} disallows certain actions if the cluster is currently in upgrade mode.\n+ *\n+ * Disallowed actions are the ones which can access/alter the state of ML internal indices.\n+ */\n+class MlUpgradeModeActionFilter extends ActionFilter.Simple {\n+\n+    private static final Set<String> ACTIONS_DISALLOWED_IN_UPGRADE_MODE =\n+        Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n+            PutJobAction.NAME,\n+            UpdateJobAction.NAME,\n+            DeleteJobAction.NAME,\n+            OpenJobAction.NAME,\n+            FlushJobAction.NAME,\n+            CloseJobAction.NAME,\n+            PersistJobAction.NAME,\n+\n+            FinalizeJobExecutionAction.NAME,\n+            PostDataAction.NAME,\n+\n+            RevertModelSnapshotAction.NAME,\n+            UpdateModelSnapshotAction.NAME,\n+            DeleteModelSnapshotAction.NAME,\n+\n+            PutDatafeedAction.NAME,\n+            UpdateDatafeedAction.NAME,\n+            DeleteDatafeedAction.NAME,\n+            StartDatafeedAction.NAME,\n+            StopDatafeedAction.NAME,\n+\n+            PutFilterAction.NAME,\n+            UpdateFilterAction.NAME,\n+            DeleteFilterAction.NAME,\n+\n+            PutCalendarAction.NAME,\n+            UpdateCalendarJobAction.NAME,\n+            PostCalendarEventsAction.NAME,\n+            DeleteCalendarAction.NAME,\n+            DeleteCalendarEventAction.NAME,\n+\n+            UpdateProcessAction.NAME,\n+            KillProcessAction.NAME,\n+\n+            DeleteExpiredDataAction.NAME,\n+\n+            ForecastJobAction.NAME,\n+            DeleteForecastAction.NAME,\n+\n+            PutDataFrameAnalyticsAction.NAME,\n+            DeleteDataFrameAnalyticsAction.NAME,\n+            StartDataFrameAnalyticsAction.NAME,\n+            StopDataFrameAnalyticsAction.NAME,\n+\n+            PutTrainedModelAction.NAME,\n+            DeleteTrainedModelAction.NAME\n+        )));\n+\n+    private final AtomicBoolean isUpgradeMode = new AtomicBoolean();\n+\n+    MlUpgradeModeActionFilter(ClusterService clusterService) {\n+        Objects.requireNonNull(clusterService);\n+        clusterService.addListener(this::setIsUpgradeMode);\n+    }\n+\n+    @Override\n+    protected boolean apply(String action, ActionRequest request, ActionListener<?> listener) {\n+        if (isUpgradeMode.get() && ACTIONS_DISALLOWED_IN_UPGRADE_MODE.contains(action)) {\n+            throw new ElasticsearchStatusException(\n+                \"Cannot perform {} action while upgrade mode is enabled\", RestStatus.TOO_MANY_REQUESTS, action);\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int order() {\n+        return 666;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e112af1b4c804f37322b55b86865f8907e73fd05"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NzAwNA==", "bodyText": "Done (changed to MAX_VALUE to avoid magic numbers).\nActually the only values I've seen returned by this method are MIN_VALUE and 0 so I was not sure what is the right value for this filter. I guess it can be MAX_VALUE so that it is performed as last.", "url": "https://github.com/elastic/elasticsearch/pull/54437#discussion_r405377004", "createdAt": "2020-04-08T09:13:31Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlUpgradeModeActionFilter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml;\n+\n+import org.elasticsearch.ElasticsearchStatusException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.support.ActionFilter;\n+import org.elasticsearch.cluster.ClusterChangedEvent;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.xpack.core.ml.MlMetadata;\n+import org.elasticsearch.xpack.core.ml.action.CloseJobAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteCalendarAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteCalendarEventAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteExpiredDataAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteFilterAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteForecastAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteJobAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteModelSnapshotAction;\n+import org.elasticsearch.xpack.core.ml.action.DeleteTrainedModelAction;\n+import org.elasticsearch.xpack.core.ml.action.FinalizeJobExecutionAction;\n+import org.elasticsearch.xpack.core.ml.action.FlushJobAction;\n+import org.elasticsearch.xpack.core.ml.action.ForecastJobAction;\n+import org.elasticsearch.xpack.core.ml.action.KillProcessAction;\n+import org.elasticsearch.xpack.core.ml.action.OpenJobAction;\n+import org.elasticsearch.xpack.core.ml.action.PersistJobAction;\n+import org.elasticsearch.xpack.core.ml.action.PostCalendarEventsAction;\n+import org.elasticsearch.xpack.core.ml.action.PostDataAction;\n+import org.elasticsearch.xpack.core.ml.action.PutCalendarAction;\n+import org.elasticsearch.xpack.core.ml.action.PutDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.PutDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.PutFilterAction;\n+import org.elasticsearch.xpack.core.ml.action.PutJobAction;\n+import org.elasticsearch.xpack.core.ml.action.PutTrainedModelAction;\n+import org.elasticsearch.xpack.core.ml.action.RevertModelSnapshotAction;\n+import org.elasticsearch.xpack.core.ml.action.StartDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.StartDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.StopDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.StopDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateCalendarJobAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateFilterAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateJobAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateModelSnapshotAction;\n+import org.elasticsearch.xpack.core.ml.action.UpdateProcessAction;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link MlUpgradeModeActionFilter} disallows certain actions if the cluster is currently in upgrade mode.\n+ *\n+ * Disallowed actions are the ones which can access/alter the state of ML internal indices.\n+ */\n+class MlUpgradeModeActionFilter extends ActionFilter.Simple {\n+\n+    private static final Set<String> ACTIONS_DISALLOWED_IN_UPGRADE_MODE =\n+        Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n+            PutJobAction.NAME,\n+            UpdateJobAction.NAME,\n+            DeleteJobAction.NAME,\n+            OpenJobAction.NAME,\n+            FlushJobAction.NAME,\n+            CloseJobAction.NAME,\n+            PersistJobAction.NAME,\n+\n+            FinalizeJobExecutionAction.NAME,\n+            PostDataAction.NAME,\n+\n+            RevertModelSnapshotAction.NAME,\n+            UpdateModelSnapshotAction.NAME,\n+            DeleteModelSnapshotAction.NAME,\n+\n+            PutDatafeedAction.NAME,\n+            UpdateDatafeedAction.NAME,\n+            DeleteDatafeedAction.NAME,\n+            StartDatafeedAction.NAME,\n+            StopDatafeedAction.NAME,\n+\n+            PutFilterAction.NAME,\n+            UpdateFilterAction.NAME,\n+            DeleteFilterAction.NAME,\n+\n+            PutCalendarAction.NAME,\n+            UpdateCalendarJobAction.NAME,\n+            PostCalendarEventsAction.NAME,\n+            DeleteCalendarAction.NAME,\n+            DeleteCalendarEventAction.NAME,\n+\n+            UpdateProcessAction.NAME,\n+            KillProcessAction.NAME,\n+\n+            DeleteExpiredDataAction.NAME,\n+\n+            ForecastJobAction.NAME,\n+            DeleteForecastAction.NAME,\n+\n+            PutDataFrameAnalyticsAction.NAME,\n+            DeleteDataFrameAnalyticsAction.NAME,\n+            StartDataFrameAnalyticsAction.NAME,\n+            StopDataFrameAnalyticsAction.NAME,\n+\n+            PutTrainedModelAction.NAME,\n+            DeleteTrainedModelAction.NAME\n+        )));\n+\n+    private final AtomicBoolean isUpgradeMode = new AtomicBoolean();\n+\n+    MlUpgradeModeActionFilter(ClusterService clusterService) {\n+        Objects.requireNonNull(clusterService);\n+        clusterService.addListener(this::setIsUpgradeMode);\n+    }\n+\n+    @Override\n+    protected boolean apply(String action, ActionRequest request, ActionListener<?> listener) {\n+        if (isUpgradeMode.get() && ACTIONS_DISALLOWED_IN_UPGRADE_MODE.contains(action)) {\n+            throw new ElasticsearchStatusException(\n+                \"Cannot perform {} action while upgrade mode is enabled\", RestStatus.TOO_MANY_REQUESTS, action);\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int order() {\n+        return 666;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0NTA4NA=="}, "originalCommit": {"oid": "e112af1b4c804f37322b55b86865f8907e73fd05"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3981, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}