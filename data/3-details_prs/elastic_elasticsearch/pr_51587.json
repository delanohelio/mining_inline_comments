{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzUyNDQ3", "number": 51587, "title": "Support downloading JDKs with legacy version format", "bodyText": "The primary purpose of the PR was simply to add support to the JdkDownloadPlugin to understand legacy version formats (ex: 8u241+b08) for bootstrapping Java versions prior to Java 9. While at it I went ahead and cleaned up some of this code as it had grown a little unwieldy over time as we added more JDK vendor support.", "createdAt": "2020-01-29T03:30:57Z", "url": "https://github.com/elastic/elasticsearch/pull/51587", "merged": true, "mergeCommit": {"oid": "b70f925ccb735dc84d59598de06df6bf35bd4bdc"}, "closed": true, "closedAt": "2020-01-30T17:34:55Z", "author": {"login": "mark-vieira"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-9Xv9gH2gAyMzY4MzUyNDQ3OmY4YWNmZGU5MGQwMGRlNGQ4Yjg0MDQxYTNhODY0YjBjNWIwYjhkNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_On69AH2gAyMzY4MzUyNDQ3OjUzYmY2MWI4N2NhMTQzODk4ZjNlM2M3NTI5MTA3OTNkMjZlNTQwZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8acfde90d00de4d8b84041a3a864b0c5b0b8d78", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/f8acfde90d00de4d8b84041a3a864b0c5b0b8d78", "committedDate": "2020-01-29T03:28:23Z", "message": "Support downloading JDKs with legacy version format\n\nSigned-off-by: Mark Vieira <portugee@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNDk0Mjcw", "url": "https://github.com/elastic/elasticsearch/pull/51587#pullrequestreview-350494270", "createdAt": "2020-01-29T23:23:05Z", "commit": {"oid": "f8acfde90d00de4d8b84041a3a864b0c5b0b8d78"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzoyMzowNVrOFja8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzoyNToxMVrOFja-sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY4NTg3MQ==", "bodyText": "future note: we should really do the translation for darwin/mac (whichever we consider the oddity) instead of having the user have to know both may exist depending on the version/vendor.", "url": "https://github.com/elastic/elasticsearch/pull/51587#discussion_r372685871", "createdAt": "2020-01-29T23:23:05Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/Jdk.java", "diffHunk": "@@ -20,37 +20,41 @@\n package org.elasticsearch.gradle;\n \n import org.gradle.api.Buildable;\n-import org.gradle.api.Project;\n import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.model.ObjectFactory;\n import org.gradle.api.provider.Property;\n import org.gradle.api.tasks.TaskDependency;\n \n import java.io.File;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class Jdk implements Buildable, Iterable<File> {\n \n     private static final List<String> ALLOWED_VENDORS = List.of(\"adoptopenjdk\", \"openjdk\");\n-    static final Pattern VERSION_PATTERN = Pattern.compile(\"(\\\\d+)(\\\\.\\\\d+\\\\.\\\\d+)?\\\\+(\\\\d+(?:\\\\.\\\\d+)?)(@([a-f0-9]{32}))?\");\n-    private static final List<String> ALLOWED_PLATFORMS = Collections.unmodifiableList(Arrays.asList(\"darwin\", \"linux\", \"windows\", \"mac\"));\n+    private static final List<String> ALLOWED_PLATFORMS = List.of(\"darwin\", \"linux\", \"windows\", \"mac\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8acfde90d00de4d8b84041a3a864b0c5b0b8d78"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY4NjUxMg==", "bodyText": "Can we either have a shared method for forming the name, or have a getConfigurationName() method on the jdk?", "url": "https://github.com/elastic/elasticsearch/pull/51587#discussion_r372686512", "createdAt": "2020-01-29T23:25:11Z", "author": {"login": "rjernst"}, "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -37,44 +37,46 @@\n import org.gradle.api.file.RelativePath;\n import org.gradle.api.provider.Provider;\n import org.gradle.api.tasks.Copy;\n+import org.gradle.api.tasks.TaskProvider;\n \n-import java.io.File;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Locale;\n import java.util.Map;\n import java.util.concurrent.Callable;\n-import java.util.function.Supplier;\n-import java.util.regex.Matcher;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.gradle.Util.capitalize;\n+import static org.elasticsearch.gradle.tool.Boilerplate.findByName;\n+import static org.elasticsearch.gradle.tool.Boilerplate.maybeCreate;\n \n public class JdkDownloadPlugin implements Plugin<Project> {\n \n     private static final String REPO_NAME_PREFIX = \"jdk_repo_\";\n-    private static final String CONTAINER_NAME = \"jdks\";\n+    private static final String EXTENSION_NAME = \"jdks\";\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(Jdk.class, name -> new Jdk(name, project));\n-        project.getExtensions().add(CONTAINER_NAME, jdksContainer);\n+        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n+            Jdk.class,\n+            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n+        );\n+        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n \n         project.afterEvaluate(p -> {\n             for (Jdk jdk : jdksContainer) {\n                 jdk.finalizeValues();\n-                String vendor = jdk.getVendor();\n-                String version = jdk.getVersion();\n-                String platform = jdk.getPlatform();\n \n                 // depend on the jdk directory \"artifact\" from the root project\n                 DependencyHandler dependencies = project.getDependencies();\n                 Map<String, Object> depConfig = new HashMap<>();\n                 depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\"configuration\", configName(\"extracted_jdk\", vendor, version, platform));\n-                dependencies.add(jdk.getConfiguration().getName(), dependencies.project(depConfig));\n+                depConfig.put(\"configuration\", configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform()));\n+                project.getDependencies().add(\"jdk_\" + jdk.getName(), dependencies.project(depConfig));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8acfde90d00de4d8b84041a3a864b0c5b0b8d78"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53bf61b87ca143898f3e3c752910793d26e540d0", "author": {"user": {"login": "mark-vieira", "name": "Mark Vieira"}}, "url": "https://github.com/elastic/elasticsearch/commit/53bf61b87ca143898f3e3c752910793d26e540d0", "committedDate": "2020-01-29T23:34:26Z", "message": "Polish\n\nSigned-off-by: Mark Vieira <portugee@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}