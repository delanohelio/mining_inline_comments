{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjE0NjY4", "number": 54412, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozNDowMlrODss8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0ODozNFrODtDREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjAwMTk0OnYy", "diffSide": "RIGHT", "path": "docs/reference/transform/painless-examples.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozNDowMlrOF9swAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowNzoxMVrOF9uWPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MDY0MQ==", "bodyText": "craters -> create ??", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400240641", "createdAt": "2020-03-30T14:34:02Z", "author": {"login": "davidkyle"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>\n+  \"responses.counts\": { <2>\n+    \"scripted_metric\": { <3>\n+      \"init_script\": \"state.responses = ['error':0L,'success':0L,'other':0L]\", <4>\n+      \"map_script\": \"\"\" <5>\n+        def code = doc['response.keyword'].value;\n+        if (code.startsWith('5') || code.startsWith('4')) {\n+          state.responses.error += 1 ;\n+        } else if(code.startsWith('2')) {\n+          state.responses.success += 1;\n+        } else {\n+          state.responses.other += 1;\n+        }\n+        \"\"\",\n+      \"combine_script\": \"state.responses\", <6>\n+      \"reduce_script\": \"\"\" <7>\n+        def counts = ['error': 0L, 'success': 0L, 'other': 0L];\n+        for (responses in states) {\n+          counts.error += responses['error'];\n+          counts.success += responses['success'];\n+          counts.other += responses['other'];\n+        }\n+        return counts;\n+        \"\"\"\n+      }\n+    },\n+  ...  \n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `aggregations` object of the {transform} that contains all aggregations.\n+<2> Object of the `scripted_metric` aggregation.\n+<3> This `scripted_metric` performs a distributed operation on the web log data \n+to count specific types of HTTP responses (error, success, and other).\n+<4> The `init_script` creates a `responses` array in the `state` object with \n+three properties (`error`, `success`, `other`) with long data type.\n+<5> The `map_script` defines `code` based on the `response.keyword` value of the \n+document, then it counts the errors, successes, and other responses based on the \n+first digit of the responses.\n+<6> The `combine_script` returns `state.responses` from each shard.\n+<7> The `reduce_script` craters a `counts` array with the `error`, `success`, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c6a787b75720be0fb6d2b1b303b69b9360de06"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NjgxMw==", "bodyText": "I honestly don't know how it happened. Thanks @davidkyle for spotting it! :)", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400266813", "createdAt": "2020-03-30T15:07:11Z", "author": {"login": "szabosteve"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>\n+  \"responses.counts\": { <2>\n+    \"scripted_metric\": { <3>\n+      \"init_script\": \"state.responses = ['error':0L,'success':0L,'other':0L]\", <4>\n+      \"map_script\": \"\"\" <5>\n+        def code = doc['response.keyword'].value;\n+        if (code.startsWith('5') || code.startsWith('4')) {\n+          state.responses.error += 1 ;\n+        } else if(code.startsWith('2')) {\n+          state.responses.success += 1;\n+        } else {\n+          state.responses.other += 1;\n+        }\n+        \"\"\",\n+      \"combine_script\": \"state.responses\", <6>\n+      \"reduce_script\": \"\"\" <7>\n+        def counts = ['error': 0L, 'success': 0L, 'other': 0L];\n+        for (responses in states) {\n+          counts.error += responses['error'];\n+          counts.success += responses['success'];\n+          counts.other += responses['other'];\n+        }\n+        return counts;\n+        \"\"\"\n+      }\n+    },\n+  ...  \n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `aggregations` object of the {transform} that contains all aggregations.\n+<2> Object of the `scripted_metric` aggregation.\n+<3> This `scripted_metric` performs a distributed operation on the web log data \n+to count specific types of HTTP responses (error, success, and other).\n+<4> The `init_script` creates a `responses` array in the `state` object with \n+three properties (`error`, `success`, `other`) with long data type.\n+<5> The `map_script` defines `code` based on the `response.keyword` value of the \n+document, then it counts the errors, successes, and other responses based on the \n+first digit of the responses.\n+<6> The `combine_script` returns `state.responses` from each shard.\n+<7> The `reduce_script` craters a `counts` array with the `error`, `success`, ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MDY0MQ=="}, "originalCommit": {"oid": "97c6a787b75720be0fb6d2b1b303b69b9360de06"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjE1OTAyOnYy", "diffSide": "RIGHT", "path": "docs/reference/transform/painless-examples.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowNjoxMFrOF9uS1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowNjoxMFrOF9uS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <7> The `reduce_script` craters a `counts` array with the `error`, `success`, \n          \n          \n            \n            <7> The `reduce_script` creates a `counts` array with the `error`, `success`,", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400265942", "createdAt": "2020-03-30T15:06:10Z", "author": {"login": "szabosteve"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>\n+  \"responses.counts\": { <2>\n+    \"scripted_metric\": { <3>\n+      \"init_script\": \"state.responses = ['error':0L,'success':0L,'other':0L]\", <4>\n+      \"map_script\": \"\"\" <5>\n+        def code = doc['response.keyword'].value;\n+        if (code.startsWith('5') || code.startsWith('4')) {\n+          state.responses.error += 1 ;\n+        } else if(code.startsWith('2')) {\n+          state.responses.success += 1;\n+        } else {\n+          state.responses.other += 1;\n+        }\n+        \"\"\",\n+      \"combine_script\": \"state.responses\", <6>\n+      \"reduce_script\": \"\"\" <7>\n+        def counts = ['error': 0L, 'success': 0L, 'other': 0L];\n+        for (responses in states) {\n+          counts.error += responses['error'];\n+          counts.success += responses['success'];\n+          counts.other += responses['other'];\n+        }\n+        return counts;\n+        \"\"\"\n+      }\n+    },\n+  ...  \n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+<1> The `aggregations` object of the {transform} that contains all aggregations.\n+<2> Object of the `scripted_metric` aggregation.\n+<3> This `scripted_metric` performs a distributed operation on the web log data \n+to count specific types of HTTP responses (error, success, and other).\n+<4> The `init_script` creates a `responses` array in the `state` object with \n+three properties (`error`, `success`, `other`) with long data type.\n+<5> The `map_script` defines `code` based on the `response.keyword` value of the \n+document, then it counts the errors, successes, and other responses based on the \n+first digit of the responses.\n+<6> The `combine_script` returns `state.responses` from each shard.\n+<7> The `reduce_script` craters a `counts` array with the `error`, `success`, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c6a787b75720be0fb6d2b1b303b69b9360de06"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY1MzI3OnYy", "diffSide": "RIGHT", "path": "docs/reference/transform/painless-examples.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0NjoyOFrOF-P3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0NjoyOFrOF-P3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNjA1OA==", "bodyText": "we omit \"aggregations\" on the other example. I think we should be consistent. However I like it, so I suggest to add \"aggregations\" on the other example.", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400816058", "createdAt": "2020-03-31T10:46:28Z", "author": {"login": "hendrikmuhs"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.\n+\n+[source,js]\n+--------------------------------------------------\n+\"aggregations\": { <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b199d2191981242922b3874e1169b326f50165"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY2MDMzOnYy", "diffSide": "RIGHT", "path": "docs/reference/transform/painless-examples.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0ODozNFrOF-P78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0ODozNFrOF-P78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNzEzOA==", "bodyText": "I would add that the response code is stored as keyword and not as numeric.", "url": "https://github.com/elastic/elasticsearch/pull/54412#discussion_r400817138", "createdAt": "2020-03-31T10:48:34Z", "author": {"login": "hendrikmuhs"}, "path": "docs/reference/transform/painless-examples.asciidoc", "diffHunk": "@@ -327,3 +327,63 @@ the buckets you want to use for the variable. In this particular case, `min` and\n `max` are variables mapped to `time_frame.gte.value` and `time_frame.lte.value`.\n <3> Finally, the script substracts the start date of the session from the end \n date which results in the duration of the session.\n+\n+\n+[discrete]\n+[[painless-count-http]]\n+==== Counting HTTP responses by using scripted metric aggregation\n+\n+You can count the different HTTP response types in a web log data set by using \n+scripted metric aggregation as part of the {transform}. The example below \n+assumes that the HTTP response codes are stored in the `response` field of the \n+documents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b199d2191981242922b3874e1169b326f50165"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4062, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}