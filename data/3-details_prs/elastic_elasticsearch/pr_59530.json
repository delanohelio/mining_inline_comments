{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODYxMjcz", "number": 59530, "title": "Check for ml privilege when using the Inference Aggregation", "bodyText": "Before running the inference pipeline aggregation check the user has permission to access the Get trained models endpoint (_ml/inference/)\nIf the user does not have sufficient privilege a security_exception is thrown with the message user [dave] is not an ml user and does not have sufficient privilege to use ml inference. Any suggestions for an alternative message are welcome.\nNon issue as the change comes under #58193", "createdAt": "2020-07-14T12:52:33Z", "url": "https://github.com/elastic/elasticsearch/pull/59530", "merged": true, "mergeCommit": {"oid": "292f2077ede09c61e1b1bb69e43340f958b30c05"}, "closed": true, "closedAt": "2020-07-14T19:10:42Z", "author": {"login": "davidkyle"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc016GBAFqTQ0ODA4OTE1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc06NzhgH2gAyNDQ4ODYxMjczOjk2NWQ0YmVhY2NhOTM1ZjJkNDVmMjE3OGFlMzIxZDM4OGFmYWRlYzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDg5MTU2", "url": "https://github.com/elastic/elasticsearch/pull/59530#pullrequestreview-448089156", "createdAt": "2020-07-14T13:08:53Z", "commit": {"oid": "d0cdf0af596975ac32b45490f8ddeb6876467530"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzowODo1M1rOGxS5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxNToxNFrOGxTJMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MzA2Mg==", "bodyText": "Does this stop really high privilege users from using inference?  For example, the actions permitted by manage_ml are a subset of those permitted by manage (which means manage everything except security), but literally checking for manage_ml might not return true for a user who has manage.  I may be wrong as I haven't tested it, but it seems likely that the security code will resolve high level cluster privilege names to sets of actions they allow, but not to other high level cluster privilege names.\nYou could check for just GetTrainedModelsAction.NAME here instead to solve that potential problem and also make the later code simpler as you'll only be testing for one privilege:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                privRequest.clusterPrivileges(\"manage_ml\", \"monitor_ml\");\n          \n          \n            \n                                privRequest.clusterPrivileges(GetTrainedModelsAction.NAME);", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454343062", "createdAt": "2020-07-14T13:08:53Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregationBuilder.java", "diffHunk": "@@ -199,10 +210,47 @@ public InferencePipelineAggregationBuilder rewrite(QueryRewriteContext context)\n                     delegate.onFailure(LicenseUtils.newComplianceException(XPackField.MACHINE_LEARNING));\n                 }\n             }));\n+\n+\n+        context.registerAsyncAction((client, listener) -> {\n+            if (licenseState.isSecurityEnabled()) {\n+                // check the user has ml privileges\n+                SecurityContext securityContext =new SecurityContext(Settings.EMPTY, client.threadPool().getThreadContext());\n+                useSecondaryAuthIfAvailable(securityContext, () -> {\n+                    final String username = securityContext.getUser().principal();\n+                    final HasPrivilegesRequest privRequest = new HasPrivilegesRequest();\n+                    privRequest.username(username);\n+                    privRequest.clusterPrivileges(\"manage_ml\", \"monitor_ml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cdf0af596975ac32b45490f8ddeb6876467530"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTE4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                \"user [\" + username + \"] is not an ml user and does not have sufficient privilege \" +\n          \n          \n            \n                                                    \"to use ml inference\"));\n          \n          \n            \n                                                \"user [\" + username + \"] does not have the privilege to get trained models \" +\n          \n          \n            \n                                                    \"so cannot use ml inference\"));", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454345185", "createdAt": "2020-07-14T13:12:19Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregationBuilder.java", "diffHunk": "@@ -199,10 +210,47 @@ public InferencePipelineAggregationBuilder rewrite(QueryRewriteContext context)\n                     delegate.onFailure(LicenseUtils.newComplianceException(XPackField.MACHINE_LEARNING));\n                 }\n             }));\n+\n+\n+        context.registerAsyncAction((client, listener) -> {\n+            if (licenseState.isSecurityEnabled()) {\n+                // check the user has ml privileges\n+                SecurityContext securityContext =new SecurityContext(Settings.EMPTY, client.threadPool().getThreadContext());\n+                useSecondaryAuthIfAvailable(securityContext, () -> {\n+                    final String username = securityContext.getUser().principal();\n+                    final HasPrivilegesRequest privRequest = new HasPrivilegesRequest();\n+                    privRequest.username(username);\n+                    privRequest.clusterPrivileges(\"manage_ml\", \"monitor_ml\");\n+                    privRequest.indexPrivileges(new RoleDescriptor.IndicesPrivileges[]{});\n+                    privRequest.applicationPrivileges(new RoleDescriptor.ApplicationResourcePrivileges[]{});\n+\n+                    ActionListener<HasPrivilegesResponse> privResponseListener = ActionListener.wrap(\n+                        r -> {\n+                            if (hasMlPrivilege(r)) {\n+                                modelLoadAction.accept(client, listener);\n+                            } else {\n+                                listener.onFailure(Exceptions.authorizationError(\n+                                    \"user [\" + username + \"] is not an ml user and does not have sufficient privilege \" +\n+                                        \"to use ml inference\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cdf0af596975ac32b45490f8ddeb6876467530"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NzA1OA==", "bodyText": "This method won't be needed if just checking one privilege.", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454347058", "createdAt": "2020-07-14T13:15:14Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregationBuilder.java", "diffHunk": "@@ -199,10 +210,47 @@ public InferencePipelineAggregationBuilder rewrite(QueryRewriteContext context)\n                     delegate.onFailure(LicenseUtils.newComplianceException(XPackField.MACHINE_LEARNING));\n                 }\n             }));\n+\n+\n+        context.registerAsyncAction((client, listener) -> {\n+            if (licenseState.isSecurityEnabled()) {\n+                // check the user has ml privileges\n+                SecurityContext securityContext =new SecurityContext(Settings.EMPTY, client.threadPool().getThreadContext());\n+                useSecondaryAuthIfAvailable(securityContext, () -> {\n+                    final String username = securityContext.getUser().principal();\n+                    final HasPrivilegesRequest privRequest = new HasPrivilegesRequest();\n+                    privRequest.username(username);\n+                    privRequest.clusterPrivileges(\"manage_ml\", \"monitor_ml\");\n+                    privRequest.indexPrivileges(new RoleDescriptor.IndicesPrivileges[]{});\n+                    privRequest.applicationPrivileges(new RoleDescriptor.ApplicationResourcePrivileges[]{});\n+\n+                    ActionListener<HasPrivilegesResponse> privResponseListener = ActionListener.wrap(\n+                        r -> {\n+                            if (hasMlPrivilege(r)) {\n+                                modelLoadAction.accept(client, listener);\n+                            } else {\n+                                listener.onFailure(Exceptions.authorizationError(\n+                                    \"user [\" + username + \"] is not an ml user and does not have sufficient privilege \" +\n+                                        \"to use ml inference\"));\n+                            }\n+                        },\n+                        listener::onFailure);\n+\n+                    client.execute(HasPrivilegesAction.INSTANCE, privRequest, privResponseListener);\n+                });\n+            } else {\n+                modelLoadAction.accept(client, listener);\n+            }\n         });\n         return new InferencePipelineAggregationBuilder(name, bucketPathMap, loadedModel::get, modelId, inferenceConfig, licenseState);\n     }\n \n+    static boolean hasMlPrivilege(HasPrivilegesResponse privilegesResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cdf0af596975ac32b45490f8ddeb6876467530"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTUyMjEw", "url": "https://github.com/elastic/elasticsearch/pull/59530#pullrequestreview-448152210", "createdAt": "2020-07-14T14:19:35Z", "commit": {"oid": "567ee1b4fc2f4aa96d07dcddc01f634591f10d96"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxOTozNVrOGxV2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMzoxNFrOGxWBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MTQ4OA==", "bodyText": "nit: space after equals", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454391488", "createdAt": "2020-07-14T14:19:35Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregationBuilder.java", "diffHunk": "@@ -199,6 +211,37 @@ public InferencePipelineAggregationBuilder rewrite(QueryRewriteContext context)\n                     delegate.onFailure(LicenseUtils.newComplianceException(XPackField.MACHINE_LEARNING));\n                 }\n             }));\n+\n+\n+        context.registerAsyncAction((client, listener) -> {\n+            if (licenseState.isSecurityEnabled()) {\n+                // check the user has ml privileges\n+                SecurityContext securityContext =new SecurityContext(Settings.EMPTY, client.threadPool().getThreadContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ee1b4fc2f4aa96d07dcddc01f634591f10d96"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MTg1Ng==", "bodyText": "Ah, nice! That's what to use when in need to return more than a single thing. I'll use that onwards!", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454391856", "createdAt": "2020-07-14T14:20:04Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregationBuilder.java", "diffHunk": "@@ -186,8 +197,9 @@ public InferencePipelineAggregationBuilder rewrite(QueryRewriteContext context)\n         if (model != null) {\n             return this;\n         }\n+\n         SetOnce<LocalModel> loadedModel = new SetOnce<>();\n-        context.registerAsyncAction((client, listener) -> {\n+        BiConsumer<Client, ActionListener<?>> modelLoadAction = (client, listener) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ee1b4fc2f4aa96d07dcddc01f634591f10d96"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjU2Nw==", "bodyText": "Do we need to set index and application privileges even though they're empty?", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454392567", "createdAt": "2020-07-14T14:21:04Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregationBuilder.java", "diffHunk": "@@ -199,6 +211,37 @@ public InferencePipelineAggregationBuilder rewrite(QueryRewriteContext context)\n                     delegate.onFailure(LicenseUtils.newComplianceException(XPackField.MACHINE_LEARNING));\n                 }\n             }));\n+\n+\n+        context.registerAsyncAction((client, listener) -> {\n+            if (licenseState.isSecurityEnabled()) {\n+                // check the user has ml privileges\n+                SecurityContext securityContext =new SecurityContext(Settings.EMPTY, client.threadPool().getThreadContext());\n+                useSecondaryAuthIfAvailable(securityContext, () -> {\n+                    final String username = securityContext.getUser().principal();\n+                    final HasPrivilegesRequest privRequest = new HasPrivilegesRequest();\n+                    privRequest.username(username);\n+                    privRequest.clusterPrivileges(GetTrainedModelsAction.NAME);\n+                    privRequest.indexPrivileges(new RoleDescriptor.IndicesPrivileges[]{});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ee1b4fc2f4aa96d07dcddc01f634591f10d96"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEzNw==", "bodyText": "Isn't this the same as doing if (mapOfMaps.contains(key)) return true; ?", "url": "https://github.com/elastic/elasticsearch/pull/59530#discussion_r454394137", "createdAt": "2020-07-14T14:23:14Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/qa/ml-with-security/src/test/java/org/elasticsearch/smoketest/MlWithSecurityInsufficientRoleIT.java", "diffHunk": "@@ -60,5 +80,27 @@ public void test() throws IOException {\n     protected String[] getCredentials() {\n         return new String[]{\"no_ml\", \"x-pack-test-password\"};\n     }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static boolean containsKey(String key, Map<String, Object> mapOfMaps) {\n+        Set<String> keys = mapOfMaps.keySet();\n+        for (String keyEntry : keys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567ee1b4fc2f4aa96d07dcddc01f634591f10d96"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjU2Njk5", "url": "https://github.com/elastic/elasticsearch/pull/59530#pullrequestreview-448256699", "createdAt": "2020-07-14T16:12:42Z", "commit": {"oid": "c41797f0dd8167a96e05ac8c49edf876e7004c11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "638d6be064a4ca035af9cc5158a99a046e83a943", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/638d6be064a4ca035af9cc5158a99a046e83a943", "committedDate": "2020-07-14T16:21:31Z", "message": "Check for ml privilege when using the Inference Aggregation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e708ff66552b4286175c828b3789db5173be6a6", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/7e708ff66552b4286175c828b3789db5173be6a6", "committedDate": "2020-07-14T16:21:31Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddfe3709a7f040ba08e09fc19a5aae491da8c935", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/ddfe3709a7f040ba08e09fc19a5aae491da8c935", "committedDate": "2020-07-14T16:21:31Z", "message": "simply privilege check and change message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d091c278d5fd55f5aa62f76d621eec4606e2278a", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/d091c278d5fd55f5aa62f76d621eec4606e2278a", "committedDate": "2020-07-14T16:21:31Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c41797f0dd8167a96e05ac8c49edf876e7004c11", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/c41797f0dd8167a96e05ac8c49edf876e7004c11", "committedDate": "2020-07-14T16:02:27Z", "message": "Address review comments"}, "afterCommit": {"oid": "d091c278d5fd55f5aa62f76d621eec4606e2278a", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/d091c278d5fd55f5aa62f76d621eec4606e2278a", "committedDate": "2020-07-14T16:21:31Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjcyMjY3", "url": "https://github.com/elastic/elasticsearch/pull/59530#pullrequestreview-448272267", "createdAt": "2020-07-14T16:31:33Z", "commit": {"oid": "d091c278d5fd55f5aa62f76d621eec4606e2278a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "965d4beacca935f2d45f2178ae321d388afadec6", "author": {"user": {"login": "davidkyle", "name": "David Kyle"}}, "url": "https://github.com/elastic/elasticsearch/commit/965d4beacca935f2d45f2178ae321d388afadec6", "committedDate": "2020-07-14T18:19:43Z", "message": "adjust for error message getting wrapped"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4482, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}