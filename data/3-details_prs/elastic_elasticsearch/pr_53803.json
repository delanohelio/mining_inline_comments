{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDQ0MzE2", "number": 53803, "title": "[ML] adds multi-class feature importance support", "bodyText": "Adds multi-class feature importance calculation.\nFeature importance objects are now mapped as follows\n(logistic) Regression:\n{\n   \"feature_name\": \"feature_0\",\n   \"importance\": -1.3\n}\n\nMulti-class [class names are foo, bar, baz]\n{ \n   \u201cfeature_name\u201d: \u201cfeature_0\u201d, \n   \u201cimportance\u201d: 2.0, // abs(sum()) of class importances\n   \u201cfoo\u201d: 1.0, \n   \u201cbar\u201d: 0.5, \n   \u201cbaz\u201d: -0.5 \n},\n\nFor users to get the full benefit of aggregating and searching for feature importance, they should update their index mapping as follows (before turning this option on in their pipelines)\n \"ml.inference.feature_importance\": {\n          \"type\": \"nested\",\n          \"dynamic\": true,\n          \"properties\": {\n            \"feature_name\": {\n              \"type\": \"keyword\"\n            },\n            \"importance\": {\n              \"type\": \"double\"\n            }\n          }\n        }\n\nThe mapping field name is as follows\nml.<inference.target_field>.<inference.tag>.feature_importance\nif inference.tag is not provided in the processor definition, it is not part of the field path.\ninference.target_field is defaulted to ml.inference.\n//cc @lcawl ^ Where should we document this?\nIf this makes it in for 7.7, there shouldn't be any feature_importance at inference BWC worries as 7.7 is the first version to have it.", "createdAt": "2020-03-19T14:42:06Z", "url": "https://github.com/elastic/elasticsearch/pull/53803", "merged": true, "mergeCommit": {"oid": "756a297ea6d5e8070ebb133723056e6ece18ff9c"}, "closed": true, "closedAt": "2020-03-23T20:53:02Z", "author": {"login": "benwtrent"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPLmjqgH2gAyMzkxMDQ0MzE2OjE1YWUwYzY4NTlkNGYxMTczNDdjYjQxOTA2MjQzOGM4ZDJjMTc5MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQjzKjAH2gAyMzkxMDQ0MzE2OmZjZjg1M2FhMzgzYWE5OTAyNDRkNGVhN2EzMjM1OWZjYjZjZGVlOTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/15ae0c6859d4f117347cb419062438c8d2c17909", "committedDate": "2020-03-19T13:06:01Z", "message": "[ML] adjusts feature importance format and adds multi-class importance support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTk3MzEz", "url": "https://github.com/elastic/elasticsearch/pull/53803#pullrequestreview-377997313", "createdAt": "2020-03-19T18:42:34Z", "commit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0MjozNFrOF47uxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0MjozNFrOF47uxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0MzIwNA==", "bodyText": "I am not 100% convinced this should be abs.\nWe don't write the feature importance value on the native side by looking at the norm of the vector.\nDo we want to make this the norm too? Or do we thing abs is good enough?\n@tveasey @valeriy42", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r395243204", "createdAt": "2020-03-19T18:42:34Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTA1ODU5", "url": "https://github.com/elastic/elasticsearch/pull/53803#pullrequestreview-379505859", "createdAt": "2020-03-23T14:52:50Z", "commit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo1Mjo1MVrOF6JEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozODoyM1rOF6LN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMDM1MQ==", "bodyText": "Is the abs necessary when the score is a norm? If the score can be -ve why is it wrong to use the -ve value?", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396510351", "createdAt": "2020-03-23T14:52:51Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/SingleValueInferenceResults.java", "diffHunk": "@@ -8,45 +8,46 @@\n import org.elasticsearch.Version;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n-import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n \n import java.io.IOException;\n import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n public abstract class SingleValueInferenceResults implements InferenceResults {\n \n     private final double value;\n-    private final Map<String, Double> featureImportance;\n+    private final List<FeatureImportance> featureImportance;\n \n-    static Map<String, Double> takeTopFeatureImportances(Map<String, Double> unsortedFeatureImportances, int numTopFeatures) {\n-        return unsortedFeatureImportances.entrySet()\n-            .stream()\n-            .sorted((l, r)-> Double.compare(Math.abs(r.getValue()), Math.abs(l.getValue())))\n+    static List<FeatureImportance> takeTopFeatureImportances(List<FeatureImportance> unsortedFeatureImportances, int numTopFeatures) {\n+        if (unsortedFeatureImportances == null || unsortedFeatureImportances.isEmpty()) {\n+            return unsortedFeatureImportances;\n+        }\n+        return unsortedFeatureImportances.stream()\n+            .sorted((l, r)-> Double.compare(Math.abs(r.getImportance()), Math.abs(l.getImportance())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNDEzOQ==", "bodyText": "// If the classificationLabels exist, the X better\nMissing word?", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396514139", "createdAt": "2020-03-23T14:57:32Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/InferenceHelpers.java", "diffHunk": "@@ -100,18 +102,46 @@ public static Double toDouble(Object value) {\n         return null;\n     }\n \n-    public static Map<String, Double> decodeFeatureImportances(Map<String, String> processedFeatureToOriginalFeatureMap,\n-                                                               Map<String, Double> featureImportances) {\n+    public static Map<String, double[]> decodeFeatureImportances(Map<String, String> processedFeatureToOriginalFeatureMap,\n+                                                                 Map<String, double[]> featureImportances) {\n         if (processedFeatureToOriginalFeatureMap == null || processedFeatureToOriginalFeatureMap.isEmpty()) {\n             return featureImportances;\n         }\n \n-        Map<String, Double> originalFeatureImportance = new HashMap<>();\n+        Map<String, double[]> originalFeatureImportance = new HashMap<>();\n         featureImportances.forEach((feature, importance) -> {\n             String featureName = processedFeatureToOriginalFeatureMap.getOrDefault(feature, feature);\n-            originalFeatureImportance.compute(featureName, (f, v1) -> v1 == null ? importance : v1 + importance);\n+            originalFeatureImportance.compute(featureName, (f, v1) -> v1 == null ? importance : sumDoubleArrays(importance, v1));\n         });\n-\n         return originalFeatureImportance;\n     }\n+\n+    public static List<FeatureImportance> transformFeatureImportance(Map<String, double[]> featureImportance,\n+                                                                     @Nullable List<String> classificationLabels) {\n+        List<FeatureImportance> importances = new ArrayList<>(featureImportance.size());\n+        featureImportance.forEach((k, v) -> {\n+            // This indicates regression, or logistic regression\n+            // If the length > 1, we assume multi-class classification.\n+            if (v.length == 1) {\n+                importances.add(FeatureImportance.forRegression(k, v[0]));\n+            } else {\n+                Map<String, Double> classImportance = new LinkedHashMap<>(v.length, 1.0f);\n+                // If the classificationLabels exist, the better be the same length as the leaf values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTQ5NQ==", "bodyText": "I'm not sure why this has to be a linked hash map? I'm assuming to preserve insertion order but why? If this was ever serialisable to xcontent the ordering could not be guaranteed", "url": "https://github.com/elastic/elasticsearch/pull/53803#discussion_r396545495", "createdAt": "2020-03-23T15:38:23Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/results/FeatureImportance.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.results;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class FeatureImportance implements Writeable {\n+\n+    private final Map<String, Double> classImportance;\n+    private final double importance;\n+    private final String featureName;\n+    private static final String IMPORTANCE = \"importance\";\n+    private static final String FEATURE_NAME = \"feature_name\";\n+\n+    public static FeatureImportance forRegression(String featureName, double importance) {\n+        return new FeatureImportance(featureName, importance, null);\n+    }\n+\n+    public static FeatureImportance forClassification(String featureName, Map<String, Double> classImportance) {\n+        return new FeatureImportance(featureName, classImportance.values().stream().mapToDouble(Math::abs).sum(), classImportance);\n+    }\n+\n+    private FeatureImportance(String featureName, double importance, Map<String, Double> classImportance) {\n+        this.featureName = Objects.requireNonNull(featureName);\n+        this.importance = importance;\n+        this.classImportance = classImportance == null ? null : Collections.unmodifiableMap(classImportance);\n+    }\n+\n+    public FeatureImportance(StreamInput in) throws IOException {\n+        this.featureName = in.readString();\n+        this.importance = in.readDouble();\n+        if (in.readBoolean()) {\n+            this.classImportance = in.readLinkedHashMap(StreamInput::readString, StreamInput::readDouble);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ae0c6859d4f117347cb419062438c8d2c17909"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fd61c2e782d003bb855c9a49dc8a49b91a40c28", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/5fd61c2e782d003bb855c9a49dc8a49b91a40c28", "committedDate": "2020-03-23T17:45:42Z", "message": "Update InferenceHelpers.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "263220583fd80213e5ea13affee9915bb9114f89", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/263220583fd80213e5ea13affee9915bb9114f89", "committedDate": "2020-03-23T19:32:09Z", "message": "Merge branch 'master' into feature/ml-inference-multi-class-feature-importance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2adfbaf292f1501e8ebaf9970fe405542440be22", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/2adfbaf292f1501e8ebaf9970fe405542440be22", "committedDate": "2020-03-23T19:38:16Z", "message": "removing the read in linked hashmap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b42255921d1b668f9e9caabbe64d74419ed119", "author": {"user": {"login": "benwtrent", "name": "Benjamin Trent"}}, "url": "https://github.com/elastic/elasticsearch/commit/47b42255921d1b668f9e9caabbe64d74419ed119", "committedDate": "2020-03-23T19:38:29Z", "message": "Merge branch 'feature/ml-inference-multi-class-feature-importance' of github.com:benwtrent/elasticsearch into feature/ml-inference-multi-class-feature-importance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf853aa383aa990244d4ea7a32359fcb6cdee90", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/fcf853aa383aa990244d4ea7a32359fcb6cdee90", "committedDate": "2020-03-23T19:51:26Z", "message": "Merge branch 'master' into feature/ml-inference-multi-class-feature-importance"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1859, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}