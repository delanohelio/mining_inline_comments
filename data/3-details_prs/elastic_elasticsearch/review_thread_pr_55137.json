{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTAzNjYw", "number": 55137, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoyMjoyMVrODxbu4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0Njo1MlrOD1T_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTYxMTg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoyMjoyMVrOGE5wgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTowODo1OVrOGGgQdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA==", "bodyText": "Do I need to wrap these into surrogatefunction derived class or can I use them directly?", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407793794", "createdAt": "2020-04-14T00:22:21Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyOTA0MQ==", "bodyText": "I didn't even realize you could do this, so this removes a lot of boilerplate.\nI think divide will be the only one where we'll want a custom function", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407829041", "createdAt": "2020-04-14T02:29:47Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA=="}, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNTYxMw==", "bodyText": "yeah, was looking to write less boilerplate code, but wanted to double check with @costin if this appropriate in the grand scheme of things", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r408105613", "createdAt": "2020-04-14T12:43:51Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA=="}, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MzE0Mg==", "bodyText": "I would add them directly (that's what we do in SQL). SurrogateFunction is useful when a function results in a chain of other functions, otherwise it can be a subclass or like here, the base class itself.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r409473142", "createdAt": "2020-04-16T11:08:59Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA=="}, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTYyNjk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/arithmetic/Arithmetics.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoyOTo1N1rOGE55Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToyNTowNVrOGG8vWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ==", "bodyText": "These are the functions that are currently implemented at QL level. The original div implementation didn't match EQL  implementation. EQL converts numbers into floats which will render different results.\n82/2 == 41\n83//2 == 41\n\nwhile\n82.0/2.0 == 41\n83.0/2.0 == 41.5\n\nDo we match the QL div function or do we introduce something else?", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407796039", "createdAt": "2020-04-14T00:29:57Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/arithmetic/Arithmetics.java", "diffHunk": "@@ -97,10 +97,10 @@ public static Number div(Number l, Number r) {\n             return l.floatValue() / r.floatValue();\n         }\n         if (l instanceof Long || r instanceof Long) {\n-            return l.longValue() / r.longValue();\n+            return (double)l.longValue() / (double)r.longValue();\n         }\n \n-        return l.intValue() / r.intValue();\n+        return (double)l.intValue() / (double)r.intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyODczMA==", "bodyText": "We either need to change the EQL spec for what divide and / mean, or we create a new function and update org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt to use our version of div", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407828730", "createdAt": "2020-04-14T02:28:36Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/arithmetic/Arithmetics.java", "diffHunk": "@@ -97,10 +97,10 @@ public static Number div(Number l, Number r) {\n             return l.floatValue() / r.floatValue();\n         }\n         if (l instanceof Long || r instanceof Long) {\n-            return l.longValue() / r.longValue();\n+            return (double)l.longValue() / (double)r.longValue();\n         }\n \n-        return l.intValue() / r.intValue();\n+        return (double)l.intValue() / (double)r.intValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ=="}, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NzYwMw==", "bodyText": "The operator classes (DefaultBinaryArithmeticOperation) work with any kind of number as they are type aware using the Java/SQL semantics\nIf the numbers are integers, so will the result - if a higher precision is needed then at least one of the numbers has to be a float/double.\nYou can check ArithmeticOperation.dataType() method. Clearly +, - and * preserve the type but / might be an exception to this rule.\nMaking / always return a float means it can turn an entire expression into a float:  2 /1 +1 = 3.0 or maybe 2.9999...\nHence why currently it forces the users to think of types which works in SQL but not in EQL.\nAn alternative would be to have a dedicated DIV implementation for EQL.\nMaking this a team-discuss.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r409477603", "createdAt": "2020-04-16T11:17:45Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/arithmetic/Arithmetics.java", "diffHunk": "@@ -97,10 +97,10 @@ public static Number div(Number l, Number r) {\n             return l.floatValue() / r.floatValue();\n         }\n         if (l instanceof Long || r instanceof Long) {\n-            return l.longValue() / r.longValue();\n+            return (double)l.longValue() / (double)r.longValue();\n         }\n \n-        return l.intValue() / r.intValue();\n+        return (double)l.intValue() / (double)r.intValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ=="}, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTgwMg==", "bodyText": "Per our Slack conversation rolling back this change, allowing div implementation to deviate from the original EQL implementation.\nExpecting the type conversion to be explicit with ES EQL implementation for now.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r409939802", "createdAt": "2020-04-17T01:25:05Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/arithmetic/Arithmetics.java", "diffHunk": "@@ -97,10 +97,10 @@ public static Number div(Number l, Number r) {\n             return l.floatValue() / r.floatValue();\n         }\n         if (l instanceof Long || r instanceof Long) {\n-            return l.longValue() / r.longValue();\n+            return (double)l.longValue() / (double)r.longValue();\n         }\n \n-        return l.intValue() / r.intValue();\n+        return (double)l.intValue() / (double)r.intValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ=="}, "originalCommit": {"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM4MDIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0Njo1N1rOGI_NHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowNDoyNVrOGJ1SKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzM0MA==", "bodyText": "I think all of these math functions should be added to a different FunctionDefinition array to group different types of functions in separate arrays: String, Math....", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412077340", "createdAt": "2020-04-21T10:46:57Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MzM2OQ==", "bodyText": "Moved to a different FunctionDefinition array.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412963369", "createdAt": "2020-04-22T13:04:25Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzM0MA=="}, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM4NTQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0ODoxNVrOGI_QEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0Mjo1N1rOGKRo3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3ODA5Ng==", "bodyText": "Whitespace between the Number casting and the class name, please.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412078096", "createdAt": "2020-04-21T10:48:15Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "diffHunk": "@@ -119,7 +120,27 @@ public static Boolean regex(String value, String pattern) {\n     //\n     // Math\n     //\n+    public static Number add(Number left, Number right) {\n+        return (Number)DefaultBinaryArithmeticOperation.ADD.apply(left, right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyNzkzMw==", "bodyText": "Added whitespaces.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413427933", "createdAt": "2020-04-23T00:42:57Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "diffHunk": "@@ -119,7 +120,27 @@ public static Boolean regex(String value, String pattern) {\n     //\n     // Math\n     //\n+    public static Number add(Number left, Number right) {\n+        return (Number)DefaultBinaryArithmeticOperation.ADD.apply(left, right);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3ODA5Ng=="}, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDQxODc5OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo1NjoyMlrOGI_jag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo1MTowMVrOGJ0rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4MzA1MA==", "bodyText": "Why all these tests below have expected_event_ids = [82] but the query itself has a condition applying on a different serial_event_id? Shouldn't the math result match the expected serial event ID?", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412083050", "createdAt": "2020-04-21T10:56:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -1002,26 +990,6 @@ query = '''\n registry where arrayContains(bytes_written_string_list, \"missing\", \"en-US\")\n '''\n \n-[[queries]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MzUzMA==", "bodyText": "These are the original EQL implementation test queries against the original test data. There is a comment at the top of the file explaining the purpose of this file.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412953530", "createdAt": "2020-04-22T12:51:01Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -1002,26 +990,6 @@ query = '''\n registry where arrayContains(bytes_written_string_list, \"missing\", \"en-US\")\n '''\n \n-[[queries]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4MzA1MA=="}, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDQ0MTUyOnYy", "diffSide": "LEFT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTowMTo0NlrOGI_wkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzo0MDozOVrOGKVJRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4NjQxNw==", "bodyText": "Can we have more complex math operations?\nFew ideas:\n\nput the constant first and the field name second\nuse the minus sign for the field as well: file where -serial_event_id + 100 == 18\nhave a more complex arithmetic set of operations: file where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 OR 70 + serial_event_id < 100", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412086417", "createdAt": "2020-04-21T11:01:46Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -1002,26 +990,6 @@ query = '''\n registry where arrayContains(bytes_written_string_list, \"missing\", \"en-US\")\n '''\n \n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id - 1 == 81\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id + 1 == 83\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id * 2 == 164\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id / 2 == 41\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id % 40 == 2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4NTM4MA==", "bodyText": "Added all of the above.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413485380", "createdAt": "2020-04-23T03:40:39Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_unsupported.toml", "diffHunk": "@@ -1002,26 +990,6 @@ query = '''\n registry where arrayContains(bytes_written_string_list, \"missing\", \"en-US\")\n '''\n \n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id - 1 == 81\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id + 1 == 83\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id * 2 == 164\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id / 2 == 41\"\n-\n-[[queries]]\n-expected_event_ids = [82]\n-query = \"file where serial_event_id % 40 == 2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4NjQxNw=="}, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDQ1MTU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTowNDoyMVrOGI_2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0MTo0MFrOGKRnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4Nzk1Mw==", "bodyText": "Changing the position of the field should be checked here as well, meaning process where add(2, serial_event_id) == 41", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412087953", "createdAt": "2020-04-21T11:04:21Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -185,3 +185,84 @@ process where wildcard(process_path, \"*\\\\red_ttp\\\\wininit.*\", \"*\\\\abc\\\\*\", \"*def\n \"wildcard\":{\"process_path\":{\"wildcard\":\"*\\\\\\\\abc\\\\\\\\*\"\n \"wildcard\":{\"process_path\":{\"wildcard\":\"*def*\"\n ;\n+\n+\n+addOperator\n+process where serial_event_id + 2 == 41\n+;\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(\n+InternalQlScriptUtils.add(InternalQlScriptUtils.docValue(doc,params.v0),params.v1),params.v2))\",\n+\"params\":{\"v0\":\"serial_event_id\",\"v1\":2,\"v2\":41}\n+;\n+\n+addFunction\n+process where add(serial_event_id, 2) == 41\n+;\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(\n+InternalQlScriptUtils.add(InternalQlScriptUtils.docValue(doc,params.v0),params.v1),params.v2))\",\n+\"params\":{\"v0\":\"serial_event_id\",\"v1\":2,\"v2\":41}\n+;\n+\n+divideOperator\n+process where serial_event_id / 2 == 41\n+;\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(\n+InternalQlScriptUtils.div(InternalQlScriptUtils.docValue(doc,params.v0),params.v1),params.v2))\",\n+\"params\":{\"v0\":\"serial_event_id\",\"v1\":2,\"v2\":41}\n+;\n+\n+divideFunction\n+process where divide(serial_event_id, 2) == 41", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyNzUxNA==", "bodyText": "Added *Reversed tests for all math functions and operators", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413427514", "createdAt": "2020-04-23T00:41:40Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/test/resources/queryfolder_tests.txt", "diffHunk": "@@ -185,3 +185,84 @@ process where wildcard(process_path, \"*\\\\red_ttp\\\\wininit.*\", \"*\\\\abc\\\\*\", \"*def\n \"wildcard\":{\"process_path\":{\"wildcard\":\"*\\\\\\\\abc\\\\\\\\*\"\n \"wildcard\":{\"process_path\":{\"wildcard\":\"*def*\"\n ;\n+\n+\n+addOperator\n+process where serial_event_id + 2 == 41\n+;\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(\n+InternalQlScriptUtils.add(InternalQlScriptUtils.docValue(doc,params.v0),params.v1),params.v2))\",\n+\"params\":{\"v0\":\"serial_event_id\",\"v1\":2,\"v2\":41}\n+;\n+\n+addFunction\n+process where add(serial_event_id, 2) == 41\n+;\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(\n+InternalQlScriptUtils.add(InternalQlScriptUtils.docValue(doc,params.v0),params.v1),params.v2))\",\n+\"params\":{\"v0\":\"serial_event_id\",\"v1\":2,\"v2\":41}\n+;\n+\n+divideOperator\n+process where serial_event_id / 2 == 41\n+;\n+\"script\":{\"source\":\"InternalQlScriptUtils.nullSafeFilter(InternalQlScriptUtils.eq(\n+InternalQlScriptUtils.div(InternalQlScriptUtils.docValue(doc,params.v0),params.v1),params.v2))\",\n+\"params\":{\"v0\":\"serial_event_id\",\"v1\":2,\"v2\":41}\n+;\n+\n+divideFunction\n+process where divide(serial_event_id, 2) == 41", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4Nzk1Mw=="}, "originalCommit": {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDczOTAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozNTozMVrOGKdiFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozNTozMVrOGKdiFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMjgwNQ==", "bodyText": "It would be worth adding these new tests to the original EQL implementation, as well.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413622805", "createdAt": "2020-04-23T08:35:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -29,3 +29,28 @@ description = \"test built-in modulo math functions\"\n # This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n expected_event_ids = [82, 83]\n query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDc1MTk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozODoxN1rOGKdpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzowMToxNlrOGKoFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDc2NQ==", "bodyText": "I don't think this is correct.\n70 + serial_event_id < 100 should match all event IDs from 1 to 29. Why is expected_event_ids only 82? Or I am missing something?", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413624765", "createdAt": "2020-04-23T08:38:17Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -29,3 +29,28 @@ description = \"test built-in modulo math functions\"\n # This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n expected_event_ids = [82, 83]\n query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 83 - serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 1 + serial_event_id == 83\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where -serial_event_id + 100 == 18\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 2 * serial_event_id == 164\"\n+\n+[[queries]]\n+expected_event_ids = [66]\n+query = \"file where 66.0 / serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 or 70 + serial_event_id < 100\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4NzIyNw==", "bodyText": "You are absolutely right.\nLooks like something changed, even the simple query like\ndoesn't return all 102 records:\n  1> [2020-04-23T19:17:13,335][INFO ][o.e.x.e.EqlActionIT      ] [test] [65.test -> file where true] before test\n  1> [2020-04-23T19:17:13,346][INFO ][o.e.x.e.EqlActionIT      ] [test] [55, 59, 60, 61, 65, 66, 67, 70, 71, 72, 75, 76, 77, 81, 82, 83, 86, 87, 88, 91, 92, 95, 96]\n\nlooking", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413787227", "createdAt": "2020-04-23T12:49:20Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -29,3 +29,28 @@ description = \"test built-in modulo math functions\"\n # This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n expected_event_ids = [82, 83]\n query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 83 - serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 1 + serial_event_id == 83\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where -serial_event_id + 100 == 18\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 2 * serial_event_id == 164\"\n+\n+[[queries]]\n+expected_event_ids = [66]\n+query = \"file where 66.0 / serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 or 70 + serial_event_id < 100\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDc2NQ=="}, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MjE4MQ==", "bodyText": "nevermind .... the other events have different type", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413792181", "createdAt": "2020-04-23T12:56:15Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -29,3 +29,28 @@ description = \"test built-in modulo math functions\"\n # This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n expected_event_ids = [82, 83]\n query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 83 - serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 1 + serial_event_id == 83\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where -serial_event_id + 100 == 18\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 2 * serial_event_id == 164\"\n+\n+[[queries]]\n+expected_event_ids = [66]\n+query = \"file where 66.0 / serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 or 70 + serial_event_id < 100\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDc2NQ=="}, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NTc2Ng==", "bodyText": "Updated to query against process type that leads to more results", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413795766", "createdAt": "2020-04-23T13:01:16Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -29,3 +29,28 @@ description = \"test built-in modulo math functions\"\n # This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n expected_event_ids = [82, 83]\n query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 83 - serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 1 + serial_event_id == 83\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where -serial_event_id + 100 == 18\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 2 * serial_event_id == 164\"\n+\n+[[queries]]\n+expected_event_ids = [66]\n+query = \"file where 66.0 / serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 or 70 + serial_event_id < 100\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDc2NQ=="}, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDc1NjIwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozOToxNFrOGKdsQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0NzozN1rOGKnfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNTQwOA==", "bodyText": "Whitespace before the last parameter.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413625408", "createdAt": "2020-04-23T08:39:14Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,21 +37,24 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n-                def(Add.class, Add::new,\"add\"),\n                 def(Between.class, Between::new, 2, \"between\"),\n                 def(CIDRMatch.class, CIDRMatch::new, \"cidrmatch\"),\n-                def(Div.class, Div::new,\"divide\"),\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n-                def(Mod.class, Mod::new,\"modulo\"),\n-                def(Mul.class, Mul::new,\"multiply\"),\n                 def(StartsWith.class, StartsWith::new, \"startswith\"),\n                 def(ToString.class, ToString::new, \"string\"),\n                 def(StringContains.class, StringContains::new, \"stringcontains\"),\n                 def(Substring.class, Substring::new, \"substring\"),\n-                def(Sub.class, Sub::new,\"subtract\"),\n                 def(Wildcard.class, Wildcard::new, \"wildcard\"),\n+            },\n+        // Arithmetic\n+            new FunctionDefinition[] {\n+                    def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4NjAwOQ==", "bodyText": "fixed", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413786009", "createdAt": "2020-04-23T12:47:37Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,21 +37,24 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n-                def(Add.class, Add::new,\"add\"),\n                 def(Between.class, Between::new, 2, \"between\"),\n                 def(CIDRMatch.class, CIDRMatch::new, \"cidrmatch\"),\n-                def(Div.class, Div::new,\"divide\"),\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n-                def(Mod.class, Mod::new,\"modulo\"),\n-                def(Mul.class, Mul::new,\"multiply\"),\n                 def(StartsWith.class, StartsWith::new, \"startswith\"),\n                 def(ToString.class, ToString::new, \"string\"),\n                 def(StringContains.class, StringContains::new, \"stringcontains\"),\n                 def(Substring.class, Substring::new, \"substring\"),\n-                def(Sub.class, Sub::new,\"subtract\"),\n                 def(Wildcard.class, Wildcard::new, \"wildcard\"),\n+            },\n+        // Arithmetic\n+            new FunctionDefinition[] {\n+                    def(Add.class, Add::new,\"add\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNTQwOA=="}, "originalCommit": {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI4NjEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0Njo1MlrOGKsCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxMDo1N1rOGLCQ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDM4NQ==", "bodyText": "This looks like it tests the query folding more than the integration, and folds to\nprocess where serial_event_id + 8 == 90 or serial_event_id < 100.\n\nSince serial_event_id of 82 is a file event, we don't have any results that match the left side.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413860385", "createdAt": "2020-04-23T14:46:52Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -17,3 +17,40 @@ file where between(file_path, \"dev\", \".json\", true) == \"\\\\TestLogs\\\\something\"\n [[queries]]\n query = 'process where string(serial_event_id) = \"1\"'\n expected_event_ids  = [1]\n+\n+[[queries]]\n+# Basic test for modulo function\n+query = '''\n+process where modulo(11, 10) == serial_event_id'''\n+expected_event_ids  = [1]\n+description = \"test built-in modulo math functions\"\n+\n+[[queries]]\n+# This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n+expected_event_ids = [82, 83]\n+query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 83 - serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 1 + serial_event_id == 83\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where -serial_event_id + 100 == 18\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 2 * serial_event_id == 164\"\n+\n+[[queries]]\n+expected_event_ids = [66]\n+query = \"file where 66.0 / serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n+query = \"process where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 or 70 + serial_event_id < 100\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d81227c6cbbf18de77b61049cdd63ce84ede26"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNDYwNw==", "bodyText": "Yep, thanks, updated the test to match the left side of or condition.", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r414224607", "createdAt": "2020-04-24T01:10:57Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/qa/common/src/main/resources/test_queries_supported.toml", "diffHunk": "@@ -17,3 +17,40 @@ file where between(file_path, \"dev\", \".json\", true) == \"\\\\TestLogs\\\\something\"\n [[queries]]\n query = 'process where string(serial_event_id) = \"1\"'\n expected_event_ids  = [1]\n+\n+[[queries]]\n+# Basic test for modulo function\n+query = '''\n+process where modulo(11, 10) == serial_event_id'''\n+expected_event_ids  = [1]\n+description = \"test built-in modulo math functions\"\n+\n+[[queries]]\n+# This query give a different result with ES EQL implementation because it doesn't convert to float data types for division\n+expected_event_ids = [82, 83]\n+query = \"file where serial_event_id / 2 == 41\"\n+\n+# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 83 - serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 1 + serial_event_id == 83\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where -serial_event_id + 100 == 18\"\n+\n+[[queries]]\n+expected_event_ids = [82]\n+query = \"file where 2 * serial_event_id == 164\"\n+\n+[[queries]]\n+expected_event_ids = [66]\n+query = \"file where 66.0 / serial_event_id == 1\"\n+\n+[[queries]]\n+expected_event_ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n+query = \"process where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 90 or 70 + serial_event_id < 100\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDM4NQ=="}, "originalCommit": {"oid": "c8d81227c6cbbf18de77b61049cdd63ce84ede26"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1147, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}