{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTM4Mzk5", "number": 54469, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxOTo1NlrODtsPiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NjoxM1rODts-Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM3Mzg1OnYy", "diffSide": "RIGHT", "path": "docs/reference/aggregations/metrics/t-test-aggregation.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxOTo1NlrOF_RHKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxOTo1NlrOF_RHKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NDk3MQ==", "bodyText": "Should perhaps add a layman explanation afterwards?  Maybe something like \"In practice, this will tell you if the difference between two population means are statistically significant\", or something like that?", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401884971", "createdAt": "2020-04-01T20:19:56Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/t-test-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,111 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-ttest-aggregation]]\n+=== TTest Aggregation\n+\n+A `t_test` metrics aggregation that performs a statistical hypothesis test in which the test statistic follows a Student's t-distribution\n+under the null hypothesis on numeric values extracted from the aggregated documents or generated by provided scripts.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM3NjkzOnYy", "diffSide": "RIGHT", "path": "docs/reference/aggregations/metrics/t-test-aggregation.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDo1NVrOF_RJQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDo1NVrOF_RJQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTUwNA==", "bodyText": "Should we state what \"value\" is?  E.g. it's the p-value?", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401885504", "createdAt": "2020-04-01T20:20:55Z", "author": {"login": "polyfractal"}, "path": "docs/reference/aggregations/metrics/t-test-aggregation.asciidoc", "diffHunk": "@@ -0,0 +1,111 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[search-aggregations-metrics-ttest-aggregation]]\n+=== TTest Aggregation\n+\n+A `t_test` metrics aggregation that performs a statistical hypothesis test in which the test statistic follows a Student's t-distribution\n+under the null hypothesis on numeric values extracted from the aggregated documents or generated by provided scripts.\n+\n+==== Syntax\n+\n+A `t_test` aggregation looks like this in isolation:\n+\n+[source,js]\n+--------------------------------------------------\n+{\n+    \"t_test\": {\n+        \"a\": \"value_before\",\n+        \"b\": \"value_after\",\n+        \"type\": \"paired\"\n+    }\n+}\n+--------------------------------------------------\n+// NOTCONSOLE\n+\n+Assuming that we have a record of node start up times before\n+and after upgrade, let's look at a ttest to see if upgrade affected\n+the node start up time in a meaningful way.\n+\n+[source,console]\n+--------------------------------------------------\n+GET node_upgrade/_search\n+{\n+    \"size\": 0,\n+    \"aggs\" : {\n+        \"startup_time_ttest\" : {\n+            \"t_test\" : {\n+                \"a\" : {\"field\": \"startup_time_before\"}, <1>\n+                \"b\" : {\"field\": \"startup_time_after\"}, <2>\n+                \"type\": \"paired\" <3>\n+            }\n+        }\n+    }\n+}\n+--------------------------------------------------\n+// TEST[setup:node_upgrade]\n+<1> The field `startup_time_before` must be a numeric field\n+<2> The field `startup_time_after` must be a numeric field\n+<3> Since we have data from the same nodes, we are using paired t-test.\n+\n+The response will look like this:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+    ...\n+\n+   \"aggregations\": {\n+      \"startup_time_ttest\": {\n+         \"value\":  0.1914368843365979", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQwMjU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/TTestAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyODozNFrOF_RZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyODozNFrOF_RZEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4OTU1NA==", "bodyText": "Hmm, do we know if UnsupportedOpException is a 4xx or 5xx? If it's a 5xx, perhaps we should change this to an IllegalArgumentException?", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401889554", "createdAt": "2020-04-01T20:28:34Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/TTestAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.ttest;\n+\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.MultiValuesSource;\n+import org.elasticsearch.search.aggregations.support.MultiValuesSourceAggregatorFactory;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class TTestAggregatorFactory extends MultiValuesSourceAggregatorFactory {\n+\n+    private final TTestType testType;\n+    private final int tails;\n+\n+    TTestAggregatorFactory(String name, Map<String, ValuesSourceConfig> configs, TTestType testType, int tails,\n+                           DocValueFormat format, QueryShardContext queryShardContext, AggregatorFactory parent,\n+                           AggregatorFactories.Builder subFactoriesBuilder,\n+                           Map<String, Object> metadata) throws IOException {\n+        super(name, configs, format, queryShardContext, parent, subFactoriesBuilder, metadata);\n+        this.testType = testType;\n+        this.tails = tails;\n+    }\n+\n+    @Override\n+    protected Aggregator createUnmapped(SearchContext searchContext,\n+                                        Aggregator parent,\n+                                        List<PipelineAggregator> pipelineAggregators,\n+                                        Map<String, Object> metadata) throws IOException {\n+        switch (testType) {\n+            case PAIRED:\n+                return new PairedTTestAggregator(name, null, tails, format, searchContext, parent, pipelineAggregators, metadata);\n+            case HOMOSCEDASTIC:\n+                return new UnpairedTTestAggregator(name, null, tails, true, format, searchContext, parent, pipelineAggregators, metadata);\n+            case HETEROSCEDASTIC:\n+                return new UnpairedTTestAggregator(name, null, tails, false, format, searchContext, parent, pipelineAggregators, metadata);\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupported t-test type \" + testType);\n+        }\n+    }\n+\n+    @Override\n+    protected Aggregator doCreateInternal(SearchContext searchContext,\n+                                          Map<String, ValuesSourceConfig> configs,\n+                                          DocValueFormat format,\n+                                          Aggregator parent,\n+                                          boolean collectsFromSingleBucket,\n+                                          List<PipelineAggregator> pipelineAggregators,\n+                                          Map<String, Object> metadata) throws IOException {\n+        MultiValuesSource.NumericMultiValuesSource numericMultiVS\n+            = new MultiValuesSource.NumericMultiValuesSource(configs, queryShardContext);\n+        if (numericMultiVS.areValuesSourcesEmpty()) {\n+            return createUnmapped(searchContext, parent, pipelineAggregators, metadata);\n+        }\n+        switch (testType) {\n+            case PAIRED:\n+                return new PairedTTestAggregator(name, numericMultiVS, tails, format, searchContext, parent, pipelineAggregators, metadata);\n+            case HOMOSCEDASTIC:\n+                return new UnpairedTTestAggregator(name, numericMultiVS, tails, true, format, searchContext, parent, pipelineAggregators,\n+                    metadata);\n+            case HETEROSCEDASTIC:\n+                return new UnpairedTTestAggregator(name, numericMultiVS, tails, false, format, searchContext, parent, pipelineAggregators,\n+                    metadata);\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupported t-test type \" + testType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQyOTE4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/PairedTTestState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNjozN1rOF_RpeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNjozN1rOF_RpeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Mzc1Mg==", "bodyText": ":D", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401893752", "createdAt": "2020-04-01T20:36:37Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/PairedTTestState.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.ttest;\n+\n+import org.apache.commons.math3.distribution.TDistribution;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+public class PairedTTestState implements TTestState {\n+\n+    public static final String NAME = \"P\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQzNjA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/PairedTTestState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozODozNlrOF_Rtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozODozNlrOF_Rtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDgyNw==", "bodyText": "Is it possible for this to ever not match in practice (I mean, I know it shouldn't hence the assertion, but...)?  I wonder if we should actually throw an exception rather than return a really incorrect result if we ever get this messed up?", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401894827", "createdAt": "2020-04-01T20:38:36Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/PairedTTestState.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.ttest;\n+\n+import org.apache.commons.math3.distribution.TDistribution;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+public class PairedTTestState implements TTestState {\n+\n+    public static final String NAME = \"P\";\n+\n+    private final TTestStats stats;\n+\n+    private final int tails;\n+\n+    public PairedTTestState(TTestStats stats, int tails) {\n+        this.stats = stats;\n+        this.tails = tails;\n+    }\n+\n+    public PairedTTestState(StreamInput in) throws IOException {\n+        stats = new TTestStats(in);\n+        tails = in.readVInt();\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        stats.writeTo(out);\n+        out.writeVInt(tails);\n+    }\n+\n+    @Override\n+    public double getValue() {\n+        if (stats.count < 2) {\n+            return Double.NaN;\n+        }\n+        long n = stats.count - 1;\n+        double meanDiff = stats.sum / stats.count;\n+        double variance = (stats.sumOfSqrs - ((stats.sum * stats.sum) / stats.count)) / stats.count;\n+        if (variance <= 0.0) {\n+            return meanDiff == 0.0 ? Double.NaN : 0.0;\n+        }\n+        double stdDiv = Math.sqrt(variance);\n+        double stdErr = stdDiv / Math.sqrt(n);\n+        double t = Math.abs(meanDiff / stdErr);\n+        TDistribution dist = new TDistribution(n);\n+        return dist.cumulativeProbability(-t) * tails;\n+    }\n+\n+    @Override\n+    public TTestState reduce(Stream<TTestState> states) {\n+        TTestStats.Reducer reducer = new TTestStats.Reducer();\n+        states.forEach(tTestState -> {\n+            PairedTTestState state = (PairedTTestState) tTestState;\n+            reducer.accept(state.stats);\n+            assert state.tails == tails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQ3NTk0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/PairedTTestAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MDo0N1rOF_SGiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MDo0N1rOF_SGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMTE5Mg==", "bodyText": "I think we can move this inside the conditionals below?  Right now we'll end up growing the statsBuilder bigarray even if none of the documents end up satisfying the conditions (e.g. if we are unlucky and they all have only one of the two fields).\nThe size provided to grow() is the min size required, so it's ok to not call grow until we actually need a particular bucket ordinal (and then it will back-fill all the empty bucket ords essentially)", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401901192", "createdAt": "2020-04-01T20:50:47Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/PairedTTestAggregator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.ttest;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationExecutionException;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.metrics.CompensatedSum;\n+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;\n+import org.elasticsearch.search.aggregations.support.MultiValuesSource;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.analytics.ttest.TTestAggregationBuilder.A_FIELD;\n+import static org.elasticsearch.xpack.analytics.ttest.TTestAggregationBuilder.B_FIELD;\n+\n+public class PairedTTestAggregator extends TTestAggregator<PairedTTestState> {\n+    private TStatsBuilder statsBuilder;\n+\n+    PairedTTestAggregator(String name, MultiValuesSource.NumericMultiValuesSource valuesSources, int tails, DocValueFormat format,\n+                          SearchContext context, Aggregator parent, List<PipelineAggregator> pipelineAggregators,\n+                          Map<String, Object> metadata) throws IOException {\n+        super(name, valuesSources, tails, format, context, parent, pipelineAggregators, metadata);\n+        statsBuilder = new TStatsBuilder(context.bigArrays());\n+    }\n+\n+    @Override\n+    protected PairedTTestState getState(long bucket) {\n+        return new PairedTTestState(statsBuilder.get(bucket), tails);\n+    }\n+\n+    @Override\n+    protected PairedTTestState getEmptyState() {\n+        return new PairedTTestState(new TTestStats(0, 0, 0), tails);\n+    }\n+\n+    @Override\n+    protected long size() {\n+        return statsBuilder.getSize();\n+    }\n+\n+    @Override\n+    public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,\n+                                                final LeafBucketCollector sub) throws IOException {\n+        if (valuesSources == null) {\n+            return LeafBucketCollector.NO_OP_COLLECTOR;\n+        }\n+        final BigArrays bigArrays = context.bigArrays();\n+        final SortedNumericDoubleValues docAValues = valuesSources.getField(A_FIELD.getPreferredName(), ctx);\n+        final SortedNumericDoubleValues docBValues = valuesSources.getField(B_FIELD.getPreferredName(), ctx);\n+        final CompensatedSum compDiffSum = new CompensatedSum(0, 0);\n+        final CompensatedSum compDiffSumOfSqr = new CompensatedSum(0, 0);\n+\n+        return new LeafBucketCollectorBase(sub, docAValues) {\n+            @Override\n+            public void collect(int doc, long bucket) throws IOException {\n+                statsBuilder.grow(bigArrays, bucket + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQ5MzEwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/TStatsBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NjoxM1rOF_SRXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NjoxM1rOF_SRXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMzk2Ng==", "bodyText": "TBH, I'm not sure how expensive grow() is... I don't think it's very expensive so it might not matter.  But some aggs that have a lot of big arrays to manage will call BigArrays#overSize() method directly and then resize each of their arrays, instead of grow'ing each.\nStatsAggregator is a good example: https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/search/aggregations/metrics/StatsAggregator.java#L90-L95", "url": "https://github.com/elastic/elasticsearch/pull/54469#discussion_r401903966", "createdAt": "2020-04-01T20:56:13Z", "author": {"login": "polyfractal"}, "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/ttest/TStatsBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.ttest;\n+\n+import org.elasticsearch.common.lease.Releasable;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.DoubleArray;\n+import org.elasticsearch.common.util.LongArray;\n+import org.elasticsearch.search.aggregations.metrics.CompensatedSum;\n+\n+public class TStatsBuilder implements Releasable {\n+\n+    private LongArray counts;\n+    private DoubleArray sums;\n+    private DoubleArray compensations;\n+    private DoubleArray sumOfSqrs;\n+    private DoubleArray sumOfSqrCompensations;\n+\n+    TStatsBuilder(BigArrays bigArrays) {\n+        counts = bigArrays.newLongArray(1, true);\n+        sums = bigArrays.newDoubleArray(1, true);\n+        compensations = bigArrays.newDoubleArray(1, true);\n+        sumOfSqrs = bigArrays.newDoubleArray(1, true);\n+        sumOfSqrCompensations = bigArrays.newDoubleArray(1, true);\n+    }\n+\n+    public TTestStats get(long bucket) {\n+        return new TTestStats(counts.get(bucket), sums.get(bucket), sumOfSqrs.get(bucket));\n+    }\n+\n+    public long build(long bucket) {\n+        return counts.get(bucket);\n+    }\n+\n+    public long getSize() {\n+        return counts.size();\n+    }\n+\n+    public void grow(BigArrays bigArrays, long buckets) {\n+        counts = bigArrays.grow(counts, buckets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e294c56f205ed1be7a30d0d1fd8271959994a08c"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3997, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}