{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTEzMjQ0", "number": 58106, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo0NDowMVrOEFl7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo1MjozNlrOEF7GEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjk5ODA1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo0NDowMVrOGj3_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MTowNlrOGkTiMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3MDczMw==", "bodyText": "maybe move toString() down as last method?", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440270733", "createdAt": "2020-06-15T15:44:01Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+public class GetDataStreamResponse {\n+\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTk2OQ==", "bodyText": "done", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440721969", "createdAt": "2020-06-16T09:41:06Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+public class GetDataStreamResponse {\n+\n+\n+    @Override\n+    public String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3MDczMw=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzAyNTk4OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1MDo1OVrOGj4RvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MToyNlrOGkTjCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NTM4OA==", "bodyText": "If I remember correctly, we are trying to move away from using classes from server module in the hlrc module.\nA long refactoring task is to remove the dependency on server module and also if a change happens on the server side, parsing can be lenient in the hlrc side in order to not break apps from integrating with Elasticsearch while upgrading.\nSo with this in mind maybe we should selectively copy DataStream class to hlrc module?\n(this has been done already for other apis in hlrc)", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440275388", "createdAt": "2020-06-15T15:50:59Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+public class GetDataStreamResponse {\n+\n+\n+    @Override\n+    public String toString() {\n+        List<DataStream> thisList = new ArrayList<>(this.dataStreams);\n+        thisList.sort(Comparator.comparing(DataStream::getName));\n+        return \"GetDataStreamResponse [dataStreams=\" + thisList + \"]\";\n+    }\n+\n+    private final List<DataStream> dataStreams;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjE4Ng==", "bodyText": "Good idea, I've added stripped down version to HLRC", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440722186", "createdAt": "2020-06-16T09:41:26Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+public class GetDataStreamResponse {\n+\n+\n+    @Override\n+    public String toString() {\n+        List<DataStream> thisList = new ArrayList<>(this.dataStreams);\n+        thisList.sort(Comparator.comparing(DataStream::getName));\n+        return \"GetDataStreamResponse [dataStreams=\" + thisList + \"]\";\n+    }\n+\n+    private final List<DataStream> dataStreams;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NTM4OA=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzAzMTI1OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetDataStreamResponseTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1MjoxNlrOGj4VGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MTozM1rOGkTjYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NjI0OA==", "bodyText": "hlrc response tests should extend from AbstractResponseTestCase", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440276248", "createdAt": "2020-06-15T15:52:16Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetDataStreamResponseTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.UUIDs;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.elasticsearch.cluster.metadata.DataStream.getDefaultBackingIndexName;\n+import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;\n+\n+public class GetDataStreamResponseTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjI3Mg==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440722272", "createdAt": "2020-06-16T09:41:33Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetDataStreamResponseTests.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.UUIDs;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.elasticsearch.cluster.metadata.DataStream.getDefaultBackingIndexName;\n+import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;\n+\n+public class GetDataStreamResponseTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NjI0OA=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzAzNjMxOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesRequestConverters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1MzoxNlrOGj4X_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MTo0NlrOGkTj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3Njk5MQ==", "bodyText": "maybe also add corresponding tests in IndicesRequestConvertersTests?", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440276991", "createdAt": "2020-06-15T15:53:16Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesRequestConverters.java", "diffHunk": "@@ -68,6 +71,28 @@\n \n     private IndicesRequestConverters() {}\n \n+    static Request putDataStream(CreateDataStreamRequest createDataStreamRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjM5OA==", "bodyText": "Done", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440722398", "createdAt": "2020-06-16T09:41:46Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesRequestConverters.java", "diffHunk": "@@ -68,6 +71,28 @@\n \n     private IndicesRequestConverters() {}\n \n+    static Request putDataStream(CreateDataStreamRequest createDataStreamRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3Njk5MQ=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDIxOTAzOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo1MTo1MVrOGkEAKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MTo1M1rOGkTkLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NzQ5OA==", "bodyText": "Super minor, but the indentation is off for a few of these methods in this file", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440467498", "createdAt": "2020-06-15T21:51:51Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -155,6 +159,96 @@ public Cancellable createAsync(CreateIndexRequest createIndexRequest,\n             CreateIndexResponse::fromXContent, listener, emptySet());\n     }\n \n+    /**\n+     * Creates a data stream using the Create Data Stream API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-data-streams.html\">\n+     * Data Streams API on elastic.co</a>\n+     * @param createDataStreamRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse createDataStream(CreateDataStreamRequest createDataStreamRequest,\n+                                                RequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjQ3Nw==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440722477", "createdAt": "2020-06-16T09:41:53Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java", "diffHunk": "@@ -155,6 +159,96 @@ public Cancellable createAsync(CreateIndexRequest createIndexRequest,\n             CreateIndexResponse::fromXContent, listener, emptySet());\n     }\n \n+    /**\n+     * Creates a data stream using the Create Data Stream API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-data-streams.html\">\n+     * Data Streams API on elastic.co</a>\n+     * @param createDataStreamRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     * @throws IOException in case there is a problem sending the request or parsing back the response\n+     */\n+    public AcknowledgedResponse createDataStream(CreateDataStreamRequest createDataStreamRequest,\n+                                                RequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NzQ5OA=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDIyNTUyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo1NDoyNVrOGkEEKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MjowMlrOGkTkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2ODUyMQ==", "bodyText": "We usually try to avoid single statement if statements if I recall correctly?", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440468521", "createdAt": "2020-06-15T21:54:25Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+public class GetDataStreamResponse {\n+\n+\n+    @Override\n+    public String toString() {\n+        List<DataStream> thisList = new ArrayList<>(this.dataStreams);\n+        thisList.sort(Comparator.comparing(DataStream::getName));\n+        return \"GetDataStreamResponse [dataStreams=\" + thisList + \"]\";\n+    }\n+\n+    private final List<DataStream> dataStreams;\n+\n+    GetDataStreamResponse() {\n+        dataStreams = new ArrayList<>();\n+    }\n+\n+    GetDataStreamResponse(List<DataStream> dataStreams) {\n+        this.dataStreams = dataStreams;\n+    }\n+\n+    public List<DataStream> getDataStreams() {\n+        return dataStreams;\n+    }\n+\n+\n+    public static GetDataStreamResponse fromXContent(XContentParser parser) throws IOException {\n+        final List<DataStream> templates = new ArrayList<>();\n+        for (XContentParser.Token token = parser.nextToken(); token != XContentParser.Token.END_ARRAY; token = parser.nextToken()) {\n+            if (token == XContentParser.Token.START_OBJECT) {\n+                templates.add(DataStream.fromXContent(parser));\n+            }\n+        }\n+        return new GetDataStreamResponse(templates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(new HashSet<>(this.dataStreams));\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjU3NA==", "bodyText": "Fixed", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440722574", "createdAt": "2020-06-16T09:42:02Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/GetDataStreamResponse.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+public class GetDataStreamResponse {\n+\n+\n+    @Override\n+    public String toString() {\n+        List<DataStream> thisList = new ArrayList<>(this.dataStreams);\n+        thisList.sort(Comparator.comparing(DataStream::getName));\n+        return \"GetDataStreamResponse [dataStreams=\" + thisList + \"]\";\n+    }\n+\n+    private final List<DataStream> dataStreams;\n+\n+    GetDataStreamResponse() {\n+        dataStreams = new ArrayList<>();\n+    }\n+\n+    GetDataStreamResponse(List<DataStream> dataStreams) {\n+        this.dataStreams = dataStreams;\n+    }\n+\n+    public List<DataStream> getDataStreams() {\n+        return dataStreams;\n+    }\n+\n+\n+    public static GetDataStreamResponse fromXContent(XContentParser parser) throws IOException {\n+        final List<DataStream> templates = new ArrayList<>();\n+        for (XContentParser.Token token = parser.nextToken(); token != XContentParser.Token.END_ARRAY; token = parser.nextToken()) {\n+            if (token == XContentParser.Token.START_OBJECT) {\n+                templates.add(DataStream.fromXContent(parser));\n+            }\n+        }\n+        return new GetDataStreamResponse(templates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(new HashSet<>(this.dataStreams));\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2ODUyMQ=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDIzMDMyOnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/AbstractDataStreamRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo1NjoyMVrOGkEHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MjoyNVrOGkTlbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2OTMxNQ==", "bodyText": "I'm not sure this abstraction is buying us anything, we don't have a need anywhere to deal with a data stream request without caring what type it is, and it looks like none of the subclasses implement the validation validate() method.\nOther than sharing a name they don't have much to tie themselves together, so I think we should remove this class.", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440469315", "createdAt": "2020-06-15T21:56:21Z", "author": {"login": "dakrone"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/AbstractDataStreamRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.Validatable;\n+\n+public abstract class AbstractDataStreamRequest implements Validatable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjc5Ng==", "bodyText": "You're right, I've removed abstract class", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440722796", "createdAt": "2020-06-16T09:42:25Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/AbstractDataStreamRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.client.Validatable;\n+\n+public abstract class AbstractDataStreamRequest implements Validatable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2OTMxNQ=="}, "originalCommit": {"oid": "7781248459003739274c9178733f5c87f1f9a12f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ2NTQ3OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/DataStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo1MjozNlrOGkZ08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1ODozOVrOGkfigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNTA3Mw==", "bodyText": "maybe just use Tuple class instead of Index class?\n(since Index is also part of server module)\nI think it is also just fine to just have a list of index names here and omit the index uuid (since it only can be used internally).", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440825073", "createdAt": "2020-06-16T12:52:36Z", "author": {"login": "martijnvg"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/DataStream.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.Index;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public final class DataStream implements ToXContentObject {\n+\n+    private final String name;\n+    private final String timeStampField;\n+    private final List<Index> indices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e880211b936d2aefc5f841212c6594b49793d3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxODY1Ng==", "bodyText": "Yep, that's good idea, I switched it to just index names", "url": "https://github.com/elastic/elasticsearch/pull/58106#discussion_r440918656", "createdAt": "2020-06-16T14:58:39Z", "author": {"login": "probakowski"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/indices/DataStream.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.indices;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.index.Index;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public final class DataStream implements ToXContentObject {\n+\n+    private final String name;\n+    private final String timeStampField;\n+    private final List<Index> indices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNTA3Mw=="}, "originalCommit": {"oid": "36e880211b936d2aefc5f841212c6594b49793d3"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1630, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}