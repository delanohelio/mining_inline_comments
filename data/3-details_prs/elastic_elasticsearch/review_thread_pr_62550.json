{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjkyMjI5", "number": 62550, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNjo1M1rOEkj1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNjo1M1rOEkj1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzcxMzQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/internalClusterTest/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNjo1M1rOHTkgbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjo1Nzo0N1rOHUMBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzExOQ==", "bodyText": "I think you can have this check in a more straight-forward manner and just use the snapshot status API.\nSee for example org.elasticsearch.snapshots.BlobStoreIncrementalityIT#assertTwoIdenticalShardSnapshots. I think I'd prefer that over adding yet another test that manually inspects the exact file structure on disk and has to be adjusted if and when we change the repo format.\nIn a sense this is also more correct since we already store some blobs straight in the shard snapshot metadata where the approach would catch changes while the data files don't change.", "url": "https://github.com/elastic/elasticsearch/pull/62550#discussion_r490283119", "createdAt": "2020-09-17T14:16:53Z", "author": {"login": "original-brownbear"}, "path": "x-pack/plugin/searchable-snapshots/src/internalClusterTest/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java", "diffHunk": "@@ -660,6 +671,52 @@ public void testMountedSnapshotHasNoReplicasByDefault() throws Exception {\n         }\n     }\n \n+    public void testSnapshotMountedIndexLeavesBlobsUntouched() throws Exception {\n+        final String indexName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        createAndPopulateIndex(\n+            indexName,\n+            Settings.builder()\n+                .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, between(1, 3))\n+                .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+                .put(INDEX_SOFT_DELETES_SETTING.getKey(), true)\n+        );\n+        ensureGreen(indexName);\n+        forceMerge();\n+\n+        final String repositoryName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        final Path repositoryLocation = randomRepoPath();\n+        createFsRepository(repositoryName, repositoryLocation);\n+\n+        final SnapshotId snapshotOne = createSnapshot(repositoryName, List.of(indexName));\n+        final Set<Tuple<String, Long>> snapshotOneDataBlobs = listDataBlobsInRepository(repositoryLocation);\n+        assertThat(snapshotOneDataBlobs, hasSize(greaterThan(0)));\n+        assertAcked(client().admin().indices().prepareDelete(indexName));\n+\n+        mountSnapshot(repositoryName, snapshotOne.getName(), indexName, indexName, Settings.EMPTY);\n+        ensureGreen(indexName);\n+\n+        createSnapshot(repositoryName, List.of(indexName));\n+        final Set<Tuple<String, Long>> snapshotTwoDataBlobs = listDataBlobsInRepository(repositoryLocation);\n+        assertThat(snapshotTwoDataBlobs.containsAll(snapshotOneDataBlobs), is(true));\n+        assertThat(snapshotTwoDataBlobs, hasSize(snapshotOneDataBlobs.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84210cd7748d59a405544826421f98c398d5f0c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzMDUzNA==", "bodyText": "I hadn't even thought about it, thanks for the suggestion", "url": "https://github.com/elastic/elasticsearch/pull/62550#discussion_r490930534", "createdAt": "2020-09-18T12:57:47Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/internalClusterTest/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java", "diffHunk": "@@ -660,6 +671,52 @@ public void testMountedSnapshotHasNoReplicasByDefault() throws Exception {\n         }\n     }\n \n+    public void testSnapshotMountedIndexLeavesBlobsUntouched() throws Exception {\n+        final String indexName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        createAndPopulateIndex(\n+            indexName,\n+            Settings.builder()\n+                .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, between(1, 3))\n+                .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+                .put(INDEX_SOFT_DELETES_SETTING.getKey(), true)\n+        );\n+        ensureGreen(indexName);\n+        forceMerge();\n+\n+        final String repositoryName = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        final Path repositoryLocation = randomRepoPath();\n+        createFsRepository(repositoryName, repositoryLocation);\n+\n+        final SnapshotId snapshotOne = createSnapshot(repositoryName, List.of(indexName));\n+        final Set<Tuple<String, Long>> snapshotOneDataBlobs = listDataBlobsInRepository(repositoryLocation);\n+        assertThat(snapshotOneDataBlobs, hasSize(greaterThan(0)));\n+        assertAcked(client().admin().indices().prepareDelete(indexName));\n+\n+        mountSnapshot(repositoryName, snapshotOne.getName(), indexName, indexName, Settings.EMPTY);\n+        ensureGreen(indexName);\n+\n+        createSnapshot(repositoryName, List.of(indexName));\n+        final Set<Tuple<String, Long>> snapshotTwoDataBlobs = listDataBlobsInRepository(repositoryLocation);\n+        assertThat(snapshotTwoDataBlobs.containsAll(snapshotOneDataBlobs), is(true));\n+        assertThat(snapshotTwoDataBlobs, hasSize(snapshotOneDataBlobs.size()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzExOQ=="}, "originalCommit": {"oid": "c84210cd7748d59a405544826421f98c398d5f0c"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3553, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}