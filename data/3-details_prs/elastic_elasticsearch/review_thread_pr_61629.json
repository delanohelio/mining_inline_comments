{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NjM0MDQ3", "number": 61629, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzozMDo1MlrOEeMaig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzozMDo1MlrOEeMaig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDk2MTM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzozMDo1MlrOHJtsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo0MTo0NlrOHJ1YnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0Nzg4MA==", "bodyText": "I wonder if we need this builder in 7.x - I removed this from my backport because there will be no compatible logger in 7.x\nHowever I am thinking now that it might cause problems for future backports and we should keep it?\nWDYT?", "url": "https://github.com/elastic/elasticsearch/pull/61629#discussion_r479947880", "createdAt": "2020-08-31T07:30:52Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -72,23 +82,22 @@ private static String toLoggerName(final Class<?> cls) {\n         return canonicalName != null ? canonicalName : cls.getName();\n     }\n \n-    public static void setThreadContext(ThreadContext threadContext) {\n-        HeaderWarning.setThreadContext(threadContext);\n-    }\n-\n-    public static void removeThreadContext(ThreadContext threadContext) {\n-        HeaderWarning.removeThreadContext(threadContext);\n-    }\n-\n     /**\n-     * Logs a deprecation message, adding a formatted warning message as a response header on the thread context.\n-     * The deprecation message will be throttled to deprecation log.\n+     * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n+     * so that it can be returned to the client.\n      */\n-    @SuppressLoggerChecks(reason = \"Safely delegates to a deprecated message\")\n-    public void deprecate(final String key, final String msg, final Object... params) {\n-        String opaqueId = HeaderWarning.getXOpaqueId();\n-        ESLogMessage deprecationMessage = new DeprecatedMessage(opaqueId, msg, params);\n-        deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n+    public DeprecationLoggerBuilder deprecate(final String key, final String msg, final Object... params) {\n+        return new DeprecationLoggerBuilder().withDeprecation(key, msg, params);\n     }\n \n+    public class DeprecationLoggerBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d696dc5fb66283de7eb49b713648f458b9ea045"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3Mzg4NQ==", "bodyText": "Let's keep it - we've already backported more logging changes to 7.x than we expected, and there may well be more before v8 is released.", "url": "https://github.com/elastic/elasticsearch/pull/61629#discussion_r480073885", "createdAt": "2020-08-31T11:41:46Z", "author": {"login": "pugnascotia"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -72,23 +82,22 @@ private static String toLoggerName(final Class<?> cls) {\n         return canonicalName != null ? canonicalName : cls.getName();\n     }\n \n-    public static void setThreadContext(ThreadContext threadContext) {\n-        HeaderWarning.setThreadContext(threadContext);\n-    }\n-\n-    public static void removeThreadContext(ThreadContext threadContext) {\n-        HeaderWarning.removeThreadContext(threadContext);\n-    }\n-\n     /**\n-     * Logs a deprecation message, adding a formatted warning message as a response header on the thread context.\n-     * The deprecation message will be throttled to deprecation log.\n+     * Logs a message at the {@link #DEPRECATION} level. The message is also sent to the header warning logger,\n+     * so that it can be returned to the client.\n      */\n-    @SuppressLoggerChecks(reason = \"Safely delegates to a deprecated message\")\n-    public void deprecate(final String key, final String msg, final Object... params) {\n-        String opaqueId = HeaderWarning.getXOpaqueId();\n-        ESLogMessage deprecationMessage = new DeprecatedMessage(opaqueId, msg, params);\n-        deprecationLogger.throttleLogAndAddWarning(key, deprecationMessage);\n+    public DeprecationLoggerBuilder deprecate(final String key, final String msg, final Object... params) {\n+        return new DeprecationLoggerBuilder().withDeprecation(key, msg, params);\n     }\n \n+    public class DeprecationLoggerBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0Nzg4MA=="}, "originalCommit": {"oid": "9d696dc5fb66283de7eb49b713648f458b9ea045"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 752, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}