{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDQyMDc4", "number": 51888, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozOTo0OFrODdUSJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxMjoyM1rODdU2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY3NjIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozOTo0OFrOFl2UJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNToxMFrOFl3Qyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMTUyNA==", "bodyText": "I found the name of this method confusing, as I wondered why we only want started datafeeds, not all datafeeds with tasks.\nAfter investigating further I found that it does mean all datafeeds with tasks, whether they're started, stopping or failed, and that the naming is copied from the poorly named pre-existing method MlTasks.startedDatafeedIds().  But I don't think it's a good idea to propagate this poor naming any further, so please can you rename this to something along the lines of matchingDatafeedIdsWithTasks.\nI think it would also be clearer to rename datafeedIds to datafeedIdPatterns or datafeedIdsToMatch.  I found myself having to look at the calling code to find what datafeedIds was expected to contain.", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375231524", "createdAt": "2020-02-05T12:39:48Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java", "diffHunk": "@@ -478,6 +491,30 @@ private QueryBuilder buildDatafeedIdQuery(String [] tokens) {\n         return boolQueryBuilder;\n     }\n \n+    static Collection<String> matchingStartedDatafeedIds(String[] datafeedIds, PersistentTasksCustomMetaData tasksMetaData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NzA1MA==", "bodyText": "Definitely! I flip-flopped on the name a couple of times.", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375247050", "createdAt": "2020-02-05T13:15:10Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java", "diffHunk": "@@ -478,6 +491,30 @@ private QueryBuilder buildDatafeedIdQuery(String [] tokens) {\n         return boolQueryBuilder;\n     }\n \n+    static Collection<String> matchingStartedDatafeedIds(String[] datafeedIds, PersistentTasksCustomMetaData tasksMetaData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMTUyNA=="}, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDc2NzAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/JobAndDatafeedResilienceIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxMToyMVrOFl3KVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNTozNVrOFl3Rkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NTM5OQ==", "bodyText": "I think it would be good to add a test of getting jobs stats for all jobs in a situation where one job has a config and the another doesn't.  It would be really bad if in the future a job with a task but no config caused a stats request for all jobs to completely fail.  This would make the jobs list in the UI go blank.", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375245399", "createdAt": "2020-02-05T13:11:21Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/JobAndDatafeedResilienceIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.xpack.core.ml.MlTasks;\n+import org.elasticsearch.xpack.core.ml.action.CloseJobAction;\n+import org.elasticsearch.xpack.core.ml.action.StopDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;\n+import org.elasticsearch.xpack.core.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.xpack.core.ml.job.config.DataDescription;\n+import org.elasticsearch.xpack.core.ml.job.config.Detector;\n+import org.elasticsearch.xpack.core.ml.job.config.Job;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndexFields;\n+import org.junit.After;\n+\n+import java.util.Collections;\n+\n+import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.createDatafeedBuilder;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public class JobAndDatafeedResilienceIT extends MlNativeAutodetectIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NzI1MQ==", "bodyText": "@droberts195 will do", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375247251", "createdAt": "2020-02-05T13:15:35Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/JobAndDatafeedResilienceIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.integration;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.xpack.core.ml.MlTasks;\n+import org.elasticsearch.xpack.core.ml.action.CloseJobAction;\n+import org.elasticsearch.xpack.core.ml.action.StopDatafeedAction;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;\n+import org.elasticsearch.xpack.core.ml.job.config.AnalysisConfig;\n+import org.elasticsearch.xpack.core.ml.job.config.DataDescription;\n+import org.elasticsearch.xpack.core.ml.job.config.Detector;\n+import org.elasticsearch.xpack.core.ml.job.config.Job;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndexFields;\n+import org.junit.After;\n+\n+import java.util.Collections;\n+\n+import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.createDatafeedBuilder;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public class JobAndDatafeedResilienceIT extends MlNativeAutodetectIntegTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NTM5OQ=="}, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDc2OTc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetJobsStatsAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxMjoyM1rOFl3L_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyNDoxNFrOFl72dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NTgyMg==", "bodyText": "This logic isn't used in TransportGetDatafeedsStats.  Is there a good reason for that?", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375245822", "createdAt": "2020-02-05T13:12:23Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetJobsStatsAction.java", "diffHunk": "@@ -75,7 +75,10 @@ public TransportGetJobsStatsAction(TransportService transportService, ActionFilt\n     protected void doExecute(Task task, GetJobsStatsAction.Request request, ActionListener<GetJobsStatsAction.Response> finalListener) {\n         logger.debug(\"Get stats for job [{}]\", request.getJobId());\n \n-        jobConfigProvider.expandJobsIds(request.getJobId(), request.allowNoJobs(), true, ActionListener.wrap(\n+        ClusterState state = clusterService.state();\n+        PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n+        // If there are deleted configs, but the task is still around, we probably want to return the tasks in the stats call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0Nzk0MQ==", "bodyText": "TransportGetDatafeedsStats effectively requires the Datafeed config to exist because it returns stats related to the job, and there is now way to know the related job unless we have the config.\nSo, I can attempt to change the _stats call for datafeeds (which probably means null timing stats for those only with tasks), or I can remove this from job stats.\nWhat do you think?", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375247941", "createdAt": "2020-02-05T13:17:08Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetJobsStatsAction.java", "diffHunk": "@@ -75,7 +75,10 @@ public TransportGetJobsStatsAction(TransportService transportService, ActionFilt\n     protected void doExecute(Task task, GetJobsStatsAction.Request request, ActionListener<GetJobsStatsAction.Response> finalListener) {\n         logger.debug(\"Get stats for job [{}]\", request.getJobId());\n \n-        jobConfigProvider.expandJobsIds(request.getJobId(), request.allowNoJobs(), true, ActionListener.wrap(\n+        ClusterState state = clusterService.state();\n+        PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n+        // If there are deleted configs, but the task is still around, we probably want to return the tasks in the stats call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NTgyMg=="}, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyMjIzMA==", "bodyText": "I think often TransportGetJobsStats will return empty stats if a task exists but no config.  This is because for jobs with tasks it redirects to the node running the task to get the stats, but this node then returns empty stats if there is no AutodetectCommunicator (see AutodetectProcessManager.getStatistics()).  So for consistency we might as well report a datafeed with no stats in TransportGetDatafeedsStats.  At least then that will alert us to the orphaned task when looking at a support diag bundle.", "url": "https://github.com/elastic/elasticsearch/pull/51888#discussion_r375322230", "createdAt": "2020-02-05T15:24:14Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetJobsStatsAction.java", "diffHunk": "@@ -75,7 +75,10 @@ public TransportGetJobsStatsAction(TransportService transportService, ActionFilt\n     protected void doExecute(Task task, GetJobsStatsAction.Request request, ActionListener<GetJobsStatsAction.Response> finalListener) {\n         logger.debug(\"Get stats for job [{}]\", request.getJobId());\n \n-        jobConfigProvider.expandJobsIds(request.getJobId(), request.allowNoJobs(), true, ActionListener.wrap(\n+        ClusterState state = clusterService.state();\n+        PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n+        // If there are deleted configs, but the task is still around, we probably want to return the tasks in the stats call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0NTgyMg=="}, "originalCommit": {"oid": "11388d440057551b321e686d29172ced8fd76af3"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4902, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}