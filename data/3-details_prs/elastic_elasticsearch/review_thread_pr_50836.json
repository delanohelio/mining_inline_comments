{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzAxMjA2", "number": 50836, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowMjowNVrODbQLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDowNzozNFrODwV1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTAzMjA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowMjowNVrOFioSBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjoxOTowMVrOFvqiPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NTg3OA==", "bodyText": "I think you can register the bare URI /_cluster/voting_config_exclusions (no query parameters) and then consume the query parameters in code.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371855878", "createdAt": "2020-01-28T15:02:05Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -36,7 +36,11 @@\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.\n         controller.registerHandler(RestRequest.Method.POST, \"/_cluster/voting_config_exclusions/{node_name}\", this);\n+\n+        controller.registerHandler(RestRequest.Method.POST,\n+            \"/_cluster/voting_config_exclusions/node_ids_or_names/{node_id_or_names}\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDI4Ng==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524286", "createdAt": "2020-02-28T06:19:01Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -36,7 +36,11 @@\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.\n         controller.registerHandler(RestRequest.Method.POST, \"/_cluster/voting_config_exclusions/{node_name}\", this);\n+\n+        controller.registerHandler(RestRequest.Method.POST,\n+            \"/_cluster/voting_config_exclusions/node_ids_or_names/{node_id_or_names}\", this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NTg3OA=="}, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTAzOTU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNDowNVrOFioW8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjoxOTowNFrOFvqiUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzEzOA==", "bodyText": "See e.g. here for how to emit deprecation warnings:\n\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestSyncedFlushAction.java\n    \n    \n        Lines 65 to 66\n      in\n      09b46c8\n    \n    \n    \n    \n\n        \n          \n           DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"synced_flush\", \n        \n\n        \n          \n               \"Synced flush was removed and a normal flush was performed instead. This transition will be removed in a future version.\");", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371857138", "createdAt": "2020-01-28T15:04:05Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDMwNQ==", "bodyText": "Added deprecation warning.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524305", "createdAt": "2020-02-28T06:19:04Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzEzOA=="}, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTA0MjA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNDo1MFrOFioYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjoxOTowN1rOFvqiXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzU4MQ==", "bodyText": "We should throw an IllegalArgumentException if this is set as well as the query parameters, and should also throw an IllegalArgumentException if both query parameters are in use.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371857581", "createdAt": "2020-01-28T15:04:50Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated\n+        if (request.hasParam(\"node_name\")) {\n+            nodeDescriptions = request.param(\"node_name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDMxOA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524318", "createdAt": "2020-02-28T06:19:07Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated\n+        if (request.hasParam(\"node_name\")) {\n+            nodeDescriptions = request.param(\"node_name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzU4MQ=="}, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTA0OTg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNjo0NFrOFiodgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjoxOTozMFrOFvqitw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg==", "bodyText": "I think this should be stricter about interpreting the node descriptions differently depending on their source (whether old-style deprecated URI or one of the two new-style parameters). This will entail adding more fields to this request class, and supporting backwards-compatibility on (de)serialisation by behaving differently according to StreamOutput#getVersion and StreamInput#getVersion.\nAs it is, this is too lenient.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371858816", "createdAt": "2020-01-28T15:06:44Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -72,16 +74,22 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        final DiscoveryNodes.NodeResolutionResults nodeResolutionResults = allNodes.resolveNodesExact(nodeDescriptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzM2Nw==", "bodyText": "To be more precise, I think AddVotingConfigExclusionsRequest should have three String[] fields, one for old-style nodeDescriptions, one for nodeIds and one for nodeNames, no more than one of which may be nonempty.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371867367", "createdAt": "2020-01-28T15:20:09Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -72,16 +74,22 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        final DiscoveryNodes.NodeResolutionResults nodeResolutionResults = allNodes.resolveNodesExact(nodeDescriptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg=="}, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDQwNw==", "bodyText": "Done. However, I'm not sure which version to use to enable this feature, do I need to create a new version? I've put TODOs in the relevant section of the code to highlight this.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524407", "createdAt": "2020-02-28T06:19:30Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -72,16 +74,22 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        final DiscoveryNodes.NodeResolutionResults nodeResolutionResults = allNodes.resolveNodesExact(nodeDescriptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg=="}, "originalCommit": {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjYxMzY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoyNjowMlrOFwWzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNToyMFrOFxiV_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYwNg==", "bodyText": "I think this can (and should) be final.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386249606", "createdAt": "2020-03-02T08:26:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzIzMA==", "bodyText": "Before when I declared private final String[] nodeId; instead of private String[] nodeIds = null;, I got an IDE compiler warning Variables might not have been initialized. The reason was due to the constructor initializing these fields using StreamInput only initialize them for new version. I've made an update to the constructor to allow this declaration.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487230", "createdAt": "2020-03-04T07:25:20Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYwNg=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjYxMzg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoyNjowNlrOFwWzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNToyNVrOFxiWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYzNA==", "bodyText": "I think this can (and should) be final.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386249634", "createdAt": "2020-03-02T08:26:06Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;\n+    private String[] nodeNames = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzI2MA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487260", "createdAt": "2020-03-04T07:25:25Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;\n+    private String[] nodeNames = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYzNA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjYxOTE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODoyODowN1rOFwW2vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNTozMFrOFxiWNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MDQzMQ==", "bodyText": "Since we're currently targeting master:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (in.getVersion() == Version.V_EMPTY) {\n          \n          \n            \n                    if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n          \n      \n    \n    \n  \n\nWe will adjust this when backporting.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386250431", "createdAt": "2020-03-02T08:28:07Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzI4Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487287", "createdAt": "2020-03-04T07:25:30Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MDQzMQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjYzNTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODozMzo1MVrOFwXAgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0MjoyNlrOF73MNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ==", "bodyText": "Yes, this PR deprecates this parameter which means that after the backport is complete we can follow-up with another PR that removes it. No action required in this PR, however.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386252931", "createdAt": "2020-03-02T08:33:51Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzMyMQ==", "bodyText": "Sounds good.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487321", "createdAt": "2020-03-04T07:25:35Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNDk0NQ==", "bodyText": "Would you remove this (and other //TODO comments)? We can track follow-up work with GitHub issues if needed, although the follow-up to remove this parameter should be relatively simple so we can go straight to a PR.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397724945", "createdAt": "2020-03-25T09:47:59Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDU0OA==", "bodyText": "Make sense, I've removed this and others.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314548", "createdAt": "2020-03-26T04:42:26Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY0NTUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODozNzoyN1rOFwXGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDo0MDo0NVrOGDJW1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA==", "bodyText": "This constructor is only used in tests, and it looks like we could migrate all of those tests over to using node names instead of node descriptions. Some of them would also be neater if we used a varargs:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n          \n          \n            \n                public AddVotingConfigExclusionsRequest(String... nodeNames) {", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386254430", "createdAt": "2020-03-02T08:37:27Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzUyMQ==", "bodyText": "If we migrate these tests now to use node names instead of descriptions, I'm a bit concerned that we may not have tests to prove that the changes are still backward compatible and don't have bugs that may break logic based on nodeDescriptions, before it is fully migrated to nodeIds / nodeNames. What do you think?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487521", "createdAt": "2020-03-04T07:26:07Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDEwNA==", "bodyText": "Sorry, you're right, I didn't quite mean \"all\" these tests. We should comprehensively test the different kinds of node resolution by strengthening AddVotingConfigExclusionsRequestTests. The other tests can move over to node names without loss of coverage IMO.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387520104", "createdAt": "2020-03-04T08:46:00Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTE3Ng==", "bodyText": "Make sense.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388119176", "createdAt": "2020-03-05T07:34:02Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMTIyNw==", "bodyText": "This isn't resolved yet?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397721227", "createdAt": "2020-03-25T09:42:17Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2NDY1OQ==", "bodyText": "Sorry missed this earlier. Done in commit 02a3533", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r399064659", "createdAt": "2020-03-27T06:49:25Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MDgxMA==", "bodyText": "You removed this useful constructor in 02a3533 and added a lot of noise to the tests as a result. Could you follow my suggestion above instead?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405490810", "createdAt": "2020-04-08T12:37:13Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1MjIxNQ==", "bodyText": "Sorry when I re-read this thread I somehow got the wrong idea that this constructor need to be removed. I reverted that commit and tried again in commit 5c7a226. Could you let me know if this looks good?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405952215", "createdAt": "2020-04-09T04:40:45Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY0ODIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODozODozMVrOFwXIBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjoxMlrOFxiXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDg1Mw==", "bodyText": "Maybe also throw an IllegalArgumentException here if more than one of the args is nonempty.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386254853", "createdAt": "2020-03-02T08:38:31Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzU1OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487558", "createdAt": "2020-03-04T07:26:12Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDg1Mw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY1NDM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo0MDo1NlrOFwXL3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjoxNlrOFxiXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NTgzOA==", "bodyText": "Think you can revert the changes to this file?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386255838", "createdAt": "2020-03-02T08:40:56Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java", "diffHunk": "@@ -233,7 +233,8 @@ public CoordinationMetaData build() {\n         private final String nodeName;\n \n         public VotingConfigExclusion(DiscoveryNode node) {\n-            this(node.getId(), node.getName());\n+            this.nodeId = node.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzU3Ng==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487576", "createdAt": "2020-03-04T07:26:16Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java", "diffHunk": "@@ -233,7 +233,8 @@ public CoordinationMetaData build() {\n         private final String nodeName;\n \n         public VotingConfigExclusion(DiscoveryNode node) {\n-            this(node.getId(), node.getName());\n+            this.nodeId = node.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NTgzOA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY2MDA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo0MzowN1rOFwXPWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjozM1rOFxiX2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NjczMA==", "bodyText": "Does controller.registerAsDeprecatedHandler work for this?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386256730", "createdAt": "2020-03-02T08:43:07Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -23,20 +23,28 @@\n import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsRequest;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n \n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n+    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(logger);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzcwNw==", "bodyText": "Changed to use this method.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487707", "createdAt": "2020-03-04T07:26:33Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -23,20 +23,28 @@\n import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsRequest;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n \n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n+    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(logger);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NjczMA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY2Mjc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo0NDowOVrOFwXRGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjozOFrOFxiYAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NzE3OQ==", "bodyText": "This isn't needed if using controller.registerAsDeprecatedHandler.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386257179", "createdAt": "2020-03-02T08:44:09Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzc0NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487744", "createdAt": "2020-03-04T07:26:38Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NzE3OQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY2OTk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo0Njo0MFrOFwXVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjo0NFrOFxiYNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODI4Mw==", "bodyText": "The house style is to use == false since unary ! is too easy to miss:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n          \n            \n                    if (oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames) == false) {\n          \n      \n    \n    \n  \n\nHowever in this case maybe we can invert the sense of this method instead:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n          \n            \n                    if (moreThanOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n      \n    \n    \n  \n\nAlso, as requested earlier, we can move this validation to the constructor of AddVotingConfigExclusionsRequest.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386258283", "createdAt": "2020-03-02T08:46:40Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n+                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n+                    \"Please use [node_ids] or [node_names] instead\");\n+            deprecatedNodeDescription = request.param(\"node_name\");\n+        }\n+\n+        if (request.hasParam(\"node_ids\")){\n+            nodeIds = request.param(\"node_ids\");\n+        }\n+\n+        if (request.hasParam(\"node_names\")){\n+            nodeNames = request.param(\"node_names\");\n+        }\n+\n+        if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzc5Nw==", "bodyText": "Done.\nTo be more precise, I use noneOrMoreThanOneIsSet instead of moreThanOneIsSet", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487797", "createdAt": "2020-03-04T07:26:44Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n+                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n+                    \"Please use [node_ids] or [node_names] instead\");\n+            deprecatedNodeDescription = request.param(\"node_name\");\n+        }\n+\n+        if (request.hasParam(\"node_ids\")){\n+            nodeIds = request.param(\"node_ids\");\n+        }\n+\n+        if (request.hasParam(\"node_names\")){\n+            nodeNames = request.param(\"node_names\");\n+        }\n+\n+        if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODI4Mw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY3OTQxOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1MDowNFrOFwXbJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0NDowNVrOF73NyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA==", "bodyText": "I think we should revert the changes to these tests (they're still valid tests of the now-deprecated behaviour) and add more tests for the new behaviour. We should remove them in the followup PR that removes the old behaviour.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386259748", "createdAt": "2020-03-02T08:50:04Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzg1OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487858", "createdAt": "2020-03-04T07:26:52Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNDY5OQ==", "bodyText": "Could you revert the whitespace changes too?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397734699", "createdAt": "2020-03-25T10:03:47Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDk1Mg==", "bodyText": "Reverted for the 3 contains... below.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314952", "createdAt": "2020-03-26T04:44:05Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY4MjY0OnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1MDo1OFrOFwXc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjo1NlrOFxiYlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDIxNA==", "bodyText": "I think we should revert the changes to these tests (they're still valid tests of the now-deprecated behaviour) and add more tests for the new behaviour. We can remove them in the followup PR that removes the legacy support.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386260214", "createdAt": "2020-03-02T08:50:58Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -166,58 +167,6 @@ public void testWithdrawsVotesFromMultipleNodes() throws InterruptedException {\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n                 containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n     }\n-\n-    public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzg5NQ==", "bodyText": "I've reverted the deletion. Will add more tests once the production implementation looks good.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487895", "createdAt": "2020-03-04T07:26:56Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -166,58 +167,6 @@ public void testWithdrawsVotesFromMultipleNodes() throws InterruptedException {\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n                 containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n     }\n-\n-    public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDIxNA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY5MDA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1MzoxMlrOFwXhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNzowMVrOFxiYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MTI5MA==", "bodyText": "I don't think we should ever call this with a null or empty array.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386261290", "createdAt": "2020-03-02T08:53:12Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzkzMA==", "bodyText": "Removed.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487930", "createdAt": "2020-03-04T07:27:01Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MTI5MA=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY5OTAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1NTo1N1rOFwXmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNzowOVrOFxiY3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjY0MQ==", "bodyText": "Seems strange to select two completely different behaviours with a boolean flag like this. Why not two methods? Or even no methods and just inline the two branches at the call sites.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386262641", "createdAt": "2020-03-02T08:55:57Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzk2Nw==", "bodyText": "I like the idea of inlining the method, but on the other hand I also feel the AddVotingConfigExclusionsRequest class contains too much logic (I feel it should be more of a pojo like class). However, I've inlined the method.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487967", "createdAt": "2020-03-04T07:27:09Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjY0MQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjcwMjI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1NzowMlrOFwXoXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0MToxMVrOGCtVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ==", "bodyText": "Maybe just the master-eligible nodes?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386263135", "createdAt": "2020-03-02T08:57:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {\n+                for (String nodeId : nodes) {\n+                    if (nodeExists(nodeId)) {\n+                        resolvedNodes.add(nodeId);\n+                    }\n+                    else {\n+                        unresolvedNodes.add(nodeId);\n+                    }\n+                }\n+            }\n+            else {\n+                Map<String, String> existingNodesNameId = new HashMap<>();\n+                for (DiscoveryNode node : this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzk4NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487984", "createdAt": "2020-03-04T07:27:13Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {\n+                for (String nodeId : nodes) {\n+                    if (nodeExists(nodeId)) {\n+                        resolvedNodes.add(nodeId);\n+                    }\n+                    else {\n+                        unresolvedNodes.add(nodeId);\n+                    }\n+                }\n+            }\n+            else {\n+                Map<String, String> existingNodesNameId = new HashMap<>();\n+                for (DiscoveryNode node : this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzA0Nw==", "bodyText": "Sorry a question just came up when I looked at this again. When we resolve by nodeId, we use ALL existing nodes to check if it exists, not just the master-eligible ones. Shall we keep this behavior the same for resolving by node name as well?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r389233047", "createdAt": "2020-03-07T06:34:34Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {\n+                for (String nodeId : nodes) {\n+                    if (nodeExists(nodeId)) {\n+                        resolvedNodes.add(nodeId);\n+                    }\n+                    else {\n+                        unresolvedNodes.add(nodeId);\n+                    }\n+                }\n+            }\n+            else {\n+                Map<String, String> existingNodesNameId = new HashMap<>();\n+                for (DiscoveryNode node : this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MzExNA==", "bodyText": "I'll open a new comment thread on the newly-moved code.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405493114", "createdAt": "2020-04-08T12:41:11Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {\n+                for (String nodeId : nodes) {\n+                    if (nodeExists(nodeId)) {\n+                        resolvedNodes.add(nodeId);\n+                    }\n+                    else {\n+                        unresolvedNodes.add(nodeId);\n+                    }\n+                }\n+            }\n+            else {\n+                Map<String, String> existingNodesNameId = new HashMap<>();\n+                for (DiscoveryNode node : this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjcxNzY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTowMjoxNFrOFwXyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNzoxOVrOFxiZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2NTYwMg==", "bodyText": "Can this happen? I think only if both args are empty? In which case I think we can detect it sooner and throw a more helpful message.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386265602", "createdAt": "2020-03-02T09:02:14Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n+            }\n+\n+            resolvedNodes = Arrays.stream(nodeResolutionResults.getResolvedNodes())\n                 .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n \n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+            allProcessedNodes = Sets.newHashSet(Iterables.concat(resolvedNodes, unresolvedNodes));\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for nodeIds \" + Arrays.asList(nodeIds) +\n+                    \" or nodeNames \" + Arrays.asList(nodeNames) + \" matched no master-eligible nodes or absent nodes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODAxMQ==", "bodyText": "You are right, in the new approach this shouldn't happen anymore. This is more of a left-over from previous implementation. I've removed it.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387488011", "createdAt": "2020-03-04T07:27:19Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n+            }\n+\n+            resolvedNodes = Arrays.stream(nodeResolutionResults.getResolvedNodes())\n                 .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n \n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+            allProcessedNodes = Sets.newHashSet(Iterables.concat(resolvedNodes, unresolvedNodes));\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for nodeIds \" + Arrays.asList(nodeIds) +\n+                    \" or nodeNames \" + Arrays.asList(nodeNames) + \" matched no master-eligible nodes or absent nodes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2NTYwMg=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjc0Mzk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxMDo0NFrOFwYBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjozNDowMVrOFzM5fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw==", "bodyText": "Suggest using a sentinel value other than \"\" here to clarify why the node name is missing. I suspect this will save some confusion in a future debugging session.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n          \n          \n            \n                                .map(nodeName -> new VotingConfigExclusion(\"_absent_\", nodeName)).collect(Collectors.toSet());\n          \n      \n    \n    \n  \n\nDo these name-only exclusions do anything? IOW if you add an exclusion by name for an absent node, and then a node with that name joins the cluster, do we exclude it from the voting configuration? I think we don't today, but we should. I think it would also be helpful to update the VotingConfigExclusion to include the node  ID in that case.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386269477", "createdAt": "2020-03-02T09:10:44Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODUwNA==", "bodyText": "Changed to use _absent_ here.\n\nI think we don't today, but we should. I think it would also be helpful to update the VotingConfigExclusion to include the node ID in that case.\n\nMake sense, I'll push another commit for this. VotingConfigExclusion may need an additional flag to indicate its nodeId is set when node joins, so that later the set nodeId can be cleared when node leaves.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387488504", "createdAt": "2020-03-04T07:28:34Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxMTY2MQ==", "bodyText": "I think it's ok to leave the node ID set when the node leaves. You shouldn't really have more than one node with the same name, at least not when you're using the node name to identify the node as a user would be doing here. If they want to go against recommendations and use duplicate node names then they'll need to specify node IDs in the API.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387511661", "createdAt": "2020-03-04T08:28:27Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTczOQ==", "bodyText": "I've pushed a new commit for this. Please let me know if that's the right place to put this logic.\nOnce these all look good, I'll start to work on adding more tests.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388119739", "createdAt": "2020-03-05T07:35:47Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzMjQyMA==", "bodyText": "Yes, the JoinTaskExecutor is indeed the right place to do this  \ud83d\udc4d\nI think this means that no cluster states contain unresolved voting configurations which could be resolved, which is an invariant that we should assert somewhere. Maybe in Coordinator#improveConfiguration since that's where we actually use the exclusions?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388132420", "createdAt": "2020-03-05T08:09:48Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1NTgwOA==", "bodyText": "no cluster states contain unresolved voting configurations which could be resolved\n\nIn terms of code, do you mean that no node ID should be empty when it reaches Coordinator#improveConfiguration (as it needs to have value of either _absent_ when no node with matching name joins yet, or an actual node  ID?) The reason I'm asking is currently there should not be any code path that set empty node ID, as we basically use _absent_ to denote that,  so I'm not quite sure what needs to be asserted  there?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388755808", "createdAt": "2020-03-06T07:52:00Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg1OTk2Ng==", "bodyText": "I mean that every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name, and every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID (except, I guess, for nodes whose name is literally the string \"_absent_\").\nThe point is that we are only resolving these things in the JoinTaskExecutor which today  is the only way that nodes can join the cluster, but we don't want to get caught out by any future changes that might generalise that.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388859966", "createdAt": "2020-03-06T11:47:48Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzAyMQ==", "bodyText": "Ah I see, make sense. I've added the invariant check.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r389233021", "createdAt": "2020-03-07T06:34:01Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjc1MTY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxMzoxN1rOFwYFzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyODo0MlrOFxibKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDY2OQ==", "bodyText": "Suggest using a sentinel value other than \"\" here to clarify why the node name is missing. I suspect this will save some confusion in a future debugging session.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n          \n          \n            \n                                .map(nodeId -> new VotingConfigExclusion(nodeId, \"_absent_\")).collect(Collectors.toSet());", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386270669", "createdAt": "2020-03-02T09:13:17Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODU1NQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387488555", "createdAt": "2020-03-04T07:28:42Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDY2OQ=="}, "originalCommit": {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTU4ODMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1MjoyMlrOF7TXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNjo1MDoyNlrOF8k_lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzU4OQ==", "bodyText": "This whole process seems more complicated than it needs to be. Why not create a new HashSet<VotingConfigExclusion>() here and then add the voting config exclusions to it as we go? IOW why collect the node IDs, then separately convert them to unresolved exclusions, and then do the lookups all over again for the resolved nodes?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397727589", "createdAt": "2020-03-25T09:52:22Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +65,100 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n+        else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2NDk4Mw==", "bodyText": "I did some refactoring in commit aaa0f89. Could you please let me know if it looks good to you?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r399064983", "createdAt": "2020-03-27T06:50:26Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +65,100 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n+        else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzU4OQ=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTU5MDE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1Mjo1MVrOF7TYlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0Mjo1OFrOF73MoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzg5NA==", "bodyText": "I think this is equivalent:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    else if (arrayHasElement(nodeNames)) {\n          \n          \n            \n                    else {\n          \n          \n            \n                        return arrayHasElement(nodeNames) == false;\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397727894", "createdAt": "2020-03-25T09:52:51Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDY1Nw==", "bodyText": "Ah yes, fixed.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314657", "createdAt": "2020-03-26T04:42:58Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzg5NA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYwMDkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NTo0OFrOF7TfhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0MzowNlrOF73Mxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTY2OA==", "bodyText": "I don't think these things can be null so this can be simplified to a length check (and then inlined, the length check is shorter than the method call)", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397729668", "createdAt": "2020-03-25T09:55:48Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {\n+            return false;\n+        }\n+        else {\n+            // none of the node identifiers are set\n+            return true;\n+        }\n+    }\n+\n+    private boolean arrayHasElement(String[] array) {\n+        return array != null && array.length > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDY5NQ==", "bodyText": "I've implemented it as you suggested. The reason I had it there before was it's working on array params passed through AddVotingConfigExclusionsRequest constructor, so I thought we might want to guard against NPE for future constructor call.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314695", "createdAt": "2020-03-26T04:43:06Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {\n+            return false;\n+        }\n+        else {\n+            // none of the node identifiers are set\n+            return true;\n+        }\n+    }\n+\n+    private boolean arrayHasElement(String[] array) {\n+        return array != null && array.length > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTY2OA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYxMjQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1ODo0MFrOF7TmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0MzoxMFrOF73M2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMTQ4OQ==", "bodyText": "Hmm this is a good point. We should deprecate the use of nodeDescriptions in this PR so we can remove it in 8.0. That means the constructor should log a deprecation warning  if nodeDescriptions is nonempty.\nThis is in addition to the deprecation warning on the REST layer, because it's possible that someone is using the transport client to bypass those checks in 7.x.\n(Also this TODO comment should be removed)", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397731489", "createdAt": "2020-03-25T09:58:40Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -121,15 +232,22 @@ public ActionRequestValidationException validate() {\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDcxMw==", "bodyText": "Added the additional deprecation warning and removed the TODO.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314713", "createdAt": "2020-03-26T04:43:10Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -121,15 +232,22 @@ public ActionRequestValidationException validate() {\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMTQ4OQ=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYxNzYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowMDowNFrOF7TqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0MzoxNlrOF73M7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMjM2Mw==", "bodyText": "We can deduce that it's this assertion that fails from the stack trace, so there's no need for this message, but it would be useful to see the cluster state when it fails:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +\n          \n          \n            \n                    assert validVotingConfigExclusionState(clusterState) : clusterState;", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397732363", "createdAt": "2020-03-25T10:00:04Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -868,6 +868,8 @@ assert localNodeMayWinElection(getLastAcceptedState()) :\n     // Package-private for testing\n     ClusterState improveConfiguration(ClusterState clusterState) {\n         assert Thread.holdsLock(mutex) : \"Coordinator mutex not held\";\n+        assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDczMw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314733", "createdAt": "2020-03-26T04:43:16Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -868,6 +868,8 @@ assert localNodeMayWinElection(getLastAcceptedState()) :\n     // Package-private for testing\n     ClusterState improveConfiguration(ClusterState clusterState) {\n         assert Thread.holdsLock(mutex) : \"Coordinator mutex not held\";\n+        assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMjM2Mw=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYyNDcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowMTo1N1rOF7TusA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0Mzo1MVrOF73NiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzU1Mg==", "bodyText": "The changes to this file are now only whitespace, would you revert them please?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397733552", "createdAt": "2020-03-25T10:01:57Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -337,6 +337,7 @@ public DiscoveryNode resolveNode(String node) {\n             return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new);\n         } else {\n             ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDg4OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314888", "createdAt": "2020-03-26T04:43:51Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -337,6 +337,7 @@ public DiscoveryNode resolveNode(String node) {\n             return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new);\n         } else {\n             ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzU1Mg=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYzNjU0OnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowNDo1MFrOF7T14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NTo0NVrOGCtgdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA==", "bodyText": "Did you mean to remove these assertions? Can you explain why?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735394", "createdAt": "2020-03-25T10:04:50Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -131,15 +322,8 @@ public void testResolveAndCheckMaximum() {\n                 .coordinationMetaData(CoordinationMetaData.builder().addVotingConfigExclusion(otherNode1Exclusion).build()));\n         final ClusterState clusterState = builder.build();\n \n-        assertThat(makeRequest().resolveVotingConfigExclusionsAndCheckMaximum(clusterState, 3, \"setting.name\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyODQ2NA==", "bodyText": "This was due to makeRequest() will now throw\nIllegalArgumentException: Please set node identifiers correctly. One and only one of [node_name], [node_names] and [node_ids] has to be set\nbecause it's not passing in any node identifiers, as the definition of makeRequest is\n    private static AddVotingConfigExclusionsRequest makeRequest(String... descriptions) {\n        return new AddVotingConfigExclusionsRequest(descriptions);\n    }\n\nSo the new check added inside AddVotingConfigExclusionsRequest constructor throws exception under this scenario.\nIn addition, the remaining assertions using makeRequest(\"_local\") seems to verify the logic AddVotingConfigExclusionsRequest#resolveVotingConfigExclusionsAndCheckMaximum already.\nDo you think I should still add back these assertions with tweak for testing AddVotingConfigExclusionsRequest#resolveVotingConfigExclusionsAndCheckMaximum  more thoroughly?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398328464", "createdAt": "2020-03-26T05:40:09Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -131,15 +322,8 @@ public void testResolveAndCheckMaximum() {\n                 .coordinationMetaData(CoordinationMetaData.builder().addVotingConfigExclusion(otherNode1Exclusion).build()));\n         final ClusterState clusterState = builder.build();\n \n-        assertThat(makeRequest().resolveVotingConfigExclusionsAndCheckMaximum(clusterState, 3, \"setting.name\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NTkyNA==", "bodyText": "Looks ok now, I will re-review rather than trying to trace the history here.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405495924", "createdAt": "2020-04-08T12:45:45Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -131,15 +322,8 @@ public void testResolveAndCheckMaximum() {\n                 .coordinationMetaData(CoordinationMetaData.builder().addVotingConfigExclusion(otherNode1Exclusion).build()));\n         final ClusterState clusterState = builder.build();\n \n-        assertThat(makeRequest().resolveVotingConfigExclusionsAndCheckMaximum(clusterState, 3, \"setting.name\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYzODQ5OnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowNToxOFrOF7T3EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0NDoxOFrOF73OAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTY5Ng==", "bodyText": "Could you revert the whitespace changes to this file?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735696", "createdAt": "2020-03-25T10:05:18Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -181,7 +182,7 @@ public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedExce\n \n         assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n-                containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTAxMA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398315010", "createdAt": "2020-03-26T04:44:18Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -181,7 +182,7 @@ public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedExce\n \n         assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n-                containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTY5Ng=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYzOTYwOnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowNTozN1rOF7T3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0NDoyM1rOF73OEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTg3Nw==", "bodyText": "I think the zero timeout is important for this test?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735877", "createdAt": "2020-03-25T10:05:37Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -231,7 +231,7 @@ public void testReturnsImmediatelyIfVoteAlreadyWithdrawn() throws InterruptedExc\n \n         // no observer to reconfigure\n         transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n-            new AddVotingConfigExclusionsRequest(new String[]{\"other1\"}, TimeValue.ZERO),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTAyNg==", "bodyText": "This was removed in between commits that change the constructor signature. I've added it back.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398315026", "createdAt": "2020-03-26T04:44:23Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -231,7 +231,7 @@ public void testReturnsImmediatelyIfVoteAlreadyWithdrawn() throws InterruptedExc\n \n         // no observer to reconfigure\n         transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n-            new AddVotingConfigExclusionsRequest(new String[]{\"other1\"}, TimeValue.ZERO),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTg3Nw=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY0MDc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowNjowMFrOF7T4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0NDozMlrOF73OMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNjA3NA==", "bodyText": "Lost newline?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397736074", "createdAt": "2020-03-25T10:06:00Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -302,8 +304,7 @@ public void testJoinWithHigherTermButBetterStateGetsRejected() {\n         assertFalse(isLocalNodeElectedMaster());\n     }\n \n-    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() {\n-        DiscoveryNode node0 = newNode(0, true);\n+    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() { DiscoveryNode node0 = newNode(0, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTA1OA==", "bodyText": "Ah sorry, fixed.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398315058", "createdAt": "2020-03-26T04:44:32Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -302,8 +304,7 @@ public void testJoinWithHigherTermButBetterStateGetsRejected() {\n         assertFalse(isLocalNodeElectedMaster());\n     }\n \n-    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() {\n-        DiscoveryNode node0 = newNode(0, true);\n+    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() { DiscoveryNode node0 = newNode(0, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNjA3NA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY0OTQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowODoyNlrOF7T-Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0Mzo1NVrOF73Nnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNzUxMA==", "bodyText": "I think this might cause confusion as it's not clear exactly what change needs to be made. How about this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +\n          \n          \n            \n                private static final String DEPRECATION_MESSAGE = \"POST /_cluster/voting_config_exclusions/{node_name} will be removed in a future version. Please use POST /_cluster/voting_config_exclusions?node_ids=... or POST /_cluster/voting_config_exclusions?node_names=... instead.\"", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397737510", "createdAt": "2020-03-25T10:08:26Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -28,23 +28,28 @@\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n import java.util.List;\n \n import static org.elasticsearch.rest.RestRequest.Method.POST;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n-\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n \n+    private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDkxMQ==", "bodyText": "Make sense. Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314911", "createdAt": "2020-03-26T04:43:55Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -28,23 +28,28 @@\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n import java.util.List;\n \n import static org.elasticsearch.rest.RestRequest.Method.POST;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n-\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n \n+    private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNzUxMA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY1NTA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowOTo1MlrOF7UBnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0MzozOFrOF73NQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODM5OQ==", "bodyText": "Yes I think we should ignore master-ineligible nodes here.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397738399", "createdAt": "2020-03-25T10:09:52Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDgxOA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314818", "createdAt": "2020-03-26T04:43:38Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODM5OQ=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY3Njg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNTozMlrOF7UO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0MzozMFrOF73NHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTgwOA==", "bodyText": "Yes, seems reasonable.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397741808", "createdAt": "2020-03-25T10:15:32Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {\n+        Set<VotingConfigExclusion> votingConfigExclusions = clusterState.getVotingConfigExclusions();\n+        Set<String> nodeNamesWithAbsentId = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeId().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeName)\n+                                                .collect(Collectors.toSet());\n+        Set<String> nodeIdsWithAbsentName = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeName().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeId)\n+                                                .collect(Collectors.toSet());\n+        for (DiscoveryNode node : clusterState.getNodes()) {\n+            // TODO should this check be applied to master-eligible nodes only?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDc4MQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314781", "createdAt": "2020-03-26T04:43:30Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {\n+        Set<VotingConfigExclusion> votingConfigExclusions = clusterState.getVotingConfigExclusions();\n+        Set<String> nodeNamesWithAbsentId = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeId().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeName)\n+                                                .collect(Collectors.toSet());\n+        Set<String> nodeIdsWithAbsentName = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeName().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeId)\n+                                                .collect(Collectors.toSet());\n+        for (DiscoveryNode node : clusterState.getNodes()) {\n+            // TODO should this check be applied to master-eligible nodes only?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTgwOA=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY4NTQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNzo1MVrOF7UUZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0Mzo0NlrOF73NXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MzIwNQ==", "bodyText": "I think we should only do this if we actually resolved any missing values (i.e. newVotingConfigExclusions is different from currentVotingConfigExclusions).", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397743205", "createdAt": "2020-03-25T10:17:51Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?\n+                    joiniedNodeNameIds.put(node.getName(), node.getId());\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n-            return results.build(allocationService.adaptAutoExpandReplicas(newState.nodes(nodesBuilder).build()));\n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetaData.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetaData.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetaData.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                CoordinationMetaData.Builder coordMetaDataBuilder = CoordinationMetaData.builder(currentState.coordinationMetaData())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDg0Nw==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314847", "createdAt": "2020-03-26T04:43:46Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?\n+                    joiniedNodeNameIds.put(node.getName(), node.getId());\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n-            return results.build(allocationService.adaptAutoExpandReplicas(newState.nodes(nodesBuilder).build()));\n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetaData.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetaData.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetaData.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                CoordinationMetaData.Builder coordMetaDataBuilder = CoordinationMetaData.builder(currentState.coordinationMetaData())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MzIwNQ=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY5NzA2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyMTowMlrOF7UbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo0NDowMlrOF73Ntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTA5Mw==", "bodyText": "No, cross-version compatibility should be covered by the BWC integration tests.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397745093", "createdAt": "2020-03-25T10:21:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -35,25 +36,50 @@\n \n import static java.util.Collections.emptyMap;\n import static java.util.Collections.emptySet;\n-import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n \n public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n     public void testSerialization() throws IOException {\n-        int descriptionCount = between(0, 5);\n+        int descriptionCount = between(1, 5);\n         String[] descriptions = new String[descriptionCount];\n         for (int i = 0; i < descriptionCount; i++) {\n             descriptions[i] = randomAlphaOfLength(10);\n         }\n         TimeValue timeout = TimeValue.timeValueMillis(between(0, 30000));\n-        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, timeout);\n+        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, Strings.EMPTY_ARRAY,\n+            Strings.EMPTY_ARRAY, timeout);\n         final AddVotingConfigExclusionsRequest deserialized = copyWriteable(originalRequest, writableRegistry(),\n             AddVotingConfigExclusionsRequest::new);\n         assertThat(deserialized.getNodeDescriptions(), equalTo(originalRequest.getNodeDescriptions()));\n         assertThat(deserialized.getTimeout(), equalTo(originalRequest.getTimeout()));\n     }\n \n+    public void testSerializationForNodeIdOrNodeName() throws IOException {\n+        // TODO still need adjustment for version? copyWriteable uses Version.CURRENT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDkzNQ==", "bodyText": "Ok and TODO removed.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314935", "createdAt": "2020-03-26T04:44:02Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -35,25 +36,50 @@\n \n import static java.util.Collections.emptyMap;\n import static java.util.Collections.emptySet;\n-import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n \n public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n     public void testSerialization() throws IOException {\n-        int descriptionCount = between(0, 5);\n+        int descriptionCount = between(1, 5);\n         String[] descriptions = new String[descriptionCount];\n         for (int i = 0; i < descriptionCount; i++) {\n             descriptions[i] = randomAlphaOfLength(10);\n         }\n         TimeValue timeout = TimeValue.timeValueMillis(between(0, 30000));\n-        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, timeout);\n+        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, Strings.EMPTY_ARRAY,\n+            Strings.EMPTY_ARRAY, timeout);\n         final AddVotingConfigExclusionsRequest deserialized = copyWriteable(originalRequest, writableRegistry(),\n             AddVotingConfigExclusionsRequest::new);\n         assertThat(deserialized.getNodeDescriptions(), equalTo(originalRequest.getNodeDescriptions()));\n         assertThat(deserialized.getTimeout(), equalTo(originalRequest.getTimeout()));\n     }\n \n+    public void testSerializationForNodeIdOrNodeName() throws IOException {\n+        // TODO still need adjustment for version? copyWriteable uses Version.CURRENT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTA5Mw=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTcxOTk0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNjo1OFrOF7UqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNjo1MTowM1rOF8lATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODc5NQ==", "bodyText": "I think it would be better to only add this in testJoinUpdateVotingConfigExclusion by taking the result of initialState and adjusting it. It will make the setup for that test a bit longer, but I don't think we should pollute other tests with this change.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397748795", "createdAt": "2020-03-25T10:26:58Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -113,6 +113,8 @@ private static ClusterState initialState(DiscoveryNode localNode, long term, lon\n                         .term(term)\n                         .lastAcceptedConfiguration(config)\n                         .lastCommittedConfiguration(config)\n+                        .addVotingConfigExclusion(new CoordinationMetaData.VotingConfigExclusion(\n+                            CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER, \"knownNodeName\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2NTE2NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r399065164", "createdAt": "2020-03-27T06:51:03Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -113,6 +113,8 @@ private static ClusterState initialState(DiscoveryNode localNode, long term, lon\n                         .term(term)\n                         .lastAcceptedConfiguration(config)\n                         .lastCommittedConfiguration(config)\n+                        .addVotingConfigExclusion(new CoordinationMetaData.VotingConfigExclusion(\n+                            CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER, \"knownNodeName\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODc5NQ=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTczNTM2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDozMTowMlrOF7Uz5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDozMTowMlrOF7Uz5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTI3MA==", "bodyText": "Suggest making this non-private and static so you can test it directly, rather than indirectly by catching assertions in tests.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397751270", "createdAt": "2020-03-25T10:31:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTczODk0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDozMjowMlrOF7U2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0OToyMlrOGCtpHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw==", "bodyText": "I'd prefer to test the logic in the assertion directly (by making the method static) rather than this quite complicated setup that catches assertions.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397751857", "createdAt": "2020-03-25T10:32:02Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1418,4 +1421,53 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyNTM4MQ==", "bodyText": "I tried this and pushed up the commit 0fb29c3 to show the changes.\nIt appears to me though that it didn't cut down the code needed for the setup (for getting the current ClusterState, and 2 new invalid ClusterState with VotingConfigExclusion). In addition, since we are now no longer testing the assertion in Cooridnator#improveConfiguration, it is possible to introduce some bugs that may still call the validation method, or somehow bypass it, and doesn't throw assertion error even when the validation method returns false.\nWhat do you think? Or there's other way to simplify this test method even further?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398325381", "createdAt": "2020-03-26T05:28:29Z", "author": {"login": "zacharymorn"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1418,4 +1421,53 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODE0MA==", "bodyText": "Looks good IMO. Not catching AssertionError is an improvement; I'm not too worried about failing to call this assertion, that's not an error that we often make.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405498140", "createdAt": "2020-04-08T12:49:22Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1418,4 +1421,53 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw=="}, "originalCommit": {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDA1Nzg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTozOToxMlrOGDRSMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo1NTozMFrOGDu1iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MjA5OA==", "bodyText": "Suggest a Map<String, DiscoveryNode> here rather than doing two lookups, and also suggest only adding master-eligible nodes to this map rather than filtering them out below.", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406082098", "createdAt": "2020-04-09T09:39:12Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {\n+            Map<String, String> existingNodeNameId = StreamSupport.stream(allNodes.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NjI4Mw==", "bodyText": "I have updated the map to Map<String, DiscoveryNode>, it's a good further enhancement!\nHowever, if we filter out master-ineligible nodes at map level, then we may get code like this without further refactoring\nif (existingMasterEligibleNodeNameId.containsKey(nodeName)){\n         DiscoveryNode discoveryNode = allNodes.get(existingNodeNameId.get(nodeName));\n         newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n} else {\n         newVotingConfigExclusions.add(new VotingConfigExclusion(VotingConfigExclusion.MISSING_VALUE_MARKER, nodeName));\n}\n\nThis will allow master-ineligible node to be added into newVotingConfigExclusions as well in the form of <absent, nodeName> , thus ES will start to keep track of master ineligible nodes in VotingConfigExclusion with their node names. In the current implementation, this wont be added.\nI thought we don't want that behavior?", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406566283", "createdAt": "2020-04-10T01:55:30Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {\n+            Map<String, String> existingNodeNameId = StreamSupport.stream(allNodes.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MjA5OA=="}, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDA3NzcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo0NDo1NVrOGDRetw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo0NDo1NVrOGDRetw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4NTMwMw==", "bodyText": "I think this is equivalent and simpler:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {\n          \n          \n            \n                            if (newVotingConfigExclusions.equals(currentVotingConfigExclusions) == false) {", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406085303", "createdAt": "2020-04-09T09:44:55Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,18 +149,47 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    if (node.isMasterNode()) {\n+                        joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    }\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetadata.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetadata.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetadata.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetadata.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                // if VotingConfigExclusions did get updated\n+                if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDEyMjQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1NzoxMFrOGDR6lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo1NzoxMFrOGDR6lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MjQzNg==", "bodyText": "To clarify that we already excluded the case where the user didn't ask for anything at all:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        assert nodeNames.length >= 1;", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406092436", "createdAt": "2020-04-09T09:57:10Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDE2MDcwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDowNzozNFrOGDSSRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDowNzozNFrOGDSSRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5ODUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {\n          \n          \n            \n                public void testImproveConfigurationPerformsVotingConfigExclusionStateCheck() {", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406098503", "createdAt": "2020-04-09T10:07:34Z", "author": {"login": "DaveCTurner"}, "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1433,4 +1436,46 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4823, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}