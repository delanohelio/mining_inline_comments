{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODc5MjY5", "number": 55250, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDo0MlrODyNEHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowOToyMlrODyRqKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5NDM3OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDo0MlrOGGHddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0NzowNVrOGGJAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njg3MQ==", "bodyText": "Could this be extends AbstactNamedWriteableTestCase<InternalAggregation>?", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409066871", "createdAt": "2020-04-15T19:00:42Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -166,7 +166,7 @@\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n-public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractWireSerializingTestCase<T> {\n+public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractNamedWriteableTestCase<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDExNQ==", "bodyText": "Probably, i'll check!", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409070115", "createdAt": "2020-04-15T19:06:27Z", "author": {"login": "polyfractal"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -166,7 +166,7 @@\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n-public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractWireSerializingTestCase<T> {\n+public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractNamedWriteableTestCase<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njg3MQ=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NjM0MA==", "bodyText": "I think it needs to remain <T>... AbstractWireTestCase#mutateInstance() takes the T, so if we change it to <InternalAggregation> it forces signatures like\nprotected InternalBoxplot mutateInstance(InternalBoxplot instance) {\n\nto be\nprotected InternalAggregation mutateInstance(InternalAggregation instance) {\n\nand requires a bunch of extra casting.", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409086340", "createdAt": "2020-04-15T19:35:56Z", "author": {"login": "polyfractal"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -166,7 +166,7 @@\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n-public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractWireSerializingTestCase<T> {\n+public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractNamedWriteableTestCase<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njg3MQ=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjI0NA==", "bodyText": "Got it!", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409092244", "createdAt": "2020-04-15T19:47:05Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -166,7 +166,7 @@\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n-public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractWireSerializingTestCase<T> {\n+public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractNamedWriteableTestCase<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njg3MQ=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5ODU0OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMTo1OVrOGGHgFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo1MDo1OFrOGGLEtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzU0Mg==", "bodyText": "I think it is worth adding a comment that subclasses need to make sure that xContentRegistry includes the agg we're going to parse. Built in aggs are included automatically but other aggs won't be.", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409067542", "createdAt": "2020-04-15T19:01:59Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -166,7 +166,7 @@\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n-public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractWireSerializingTestCase<T> {\n+public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractNamedWriteableTestCase<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNjA3MQ==", "bodyText": "Buncha xpack tests needed this treatment, and it was non-trivial for tests to convert aggspecs into namedwriteables, so I did a bit of refactoring to make it easier in the general case.", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409126071", "createdAt": "2020-04-15T20:50:58Z", "author": {"login": "polyfractal"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -166,7 +166,7 @@\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n-public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractWireSerializingTestCase<T> {\n+public abstract class InternalAggregationTestCase<T extends InternalAggregation> extends AbstractNamedWriteableTestCase<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzU0Mg=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5OTAyOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMjowNVrOGGHgXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoyMjowN1rOGGKIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzYxNQ==", "bodyText": "Could this be final?", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409067615", "createdAt": "2020-04-15T19:02:05Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -282,6 +282,16 @@ protected T createUnmappedInstance(String name, Map<String, Object> metadata) {\n         return createTestInstance(name, metadata);\n     }\n \n+    /**\n+     * The NamedWriteable class for agg tests _should_ be InternalAggregation so this is being set by default,\n+     * but implementors can change if necessary\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Class<T> categoryClass() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDk0NA==", "bodyText": "It could be.  I left it non-final in case an implementor needs to override it for some reason.  But I suppose with the generic bounds on <InternalAggregation> it's pretty definitive what the class should be...", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409070944", "createdAt": "2020-04-15T19:08:00Z", "author": {"login": "polyfractal"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -282,6 +282,16 @@ protected T createUnmappedInstance(String name, Map<String, Object> metadata) {\n         return createTestInstance(name, metadata);\n     }\n \n+    /**\n+     * The NamedWriteable class for agg tests _should_ be InternalAggregation so this is being set by default,\n+     * but implementors can change if necessary\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Class<T> categoryClass() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzYxNQ=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjU2MA==", "bodyText": "I do think this should be final then. I guess the suppresswarnings means that the bounds on AbstractNamedWriteableTestCase are wrong.", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409092560", "createdAt": "2020-04-15T19:47:45Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -282,6 +282,16 @@ protected T createUnmappedInstance(String name, Map<String, Object> metadata) {\n         return createTestInstance(name, metadata);\n     }\n \n+    /**\n+     * The NamedWriteable class for agg tests _should_ be InternalAggregation so this is being set by default,\n+     * but implementors can change if necessary\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Class<T> categoryClass() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzYxNQ=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExMDY0OA==", "bodyText": "Yeah to be honest I really have no idea what's going on with the generic... scratched my head over it for a while and just gave up :/\nI'll make final \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409110648", "createdAt": "2020-04-15T20:22:07Z", "author": {"login": "polyfractal"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -282,6 +282,16 @@ protected T createUnmappedInstance(String name, Map<String, Object> metadata) {\n         return createTestInstance(name, metadata);\n     }\n \n+    /**\n+     * The NamedWriteable class for agg tests _should_ be InternalAggregation so this is being set by default,\n+     * but implementors can change if necessary\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Class<T> categoryClass() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzYxNQ=="}, "originalCommit": {"oid": "57685b070968639a208937799ee37dcb898616e9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ0NzEyOnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowOToyMlrOGGOvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowOToyMlrOGGOvCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NjA1OA==", "bodyText": "If you pass the plugins in instead of emptyList() then I think SearchModule will do this stuff for you.", "url": "https://github.com/elastic/elasticsearch/pull/55250#discussion_r409186058", "createdAt": "2020-04-15T23:09:22Z", "author": {"login": "nik9000"}, "path": "test/framework/src/main/java/org/elasticsearch/test/InternalAggregationTestCase.java", "diffHunk": "@@ -270,6 +279,58 @@ public ReduceContext forFinalReduction() {\n         return namedXContents;\n     }\n \n+    @Override\n+    protected NamedXContentRegistry xContentRegistry() {\n+        return namedXContentRegistry;\n+    }\n+\n+    @Override\n+    protected final NamedWriteableRegistry getNamedWriteableRegistry() {\n+        return namedWriteableRegistry;\n+    }\n+\n+    /**\n+     * Implementors can override this if they want to provide a custom list of namedWriteables.  If the implementor\n+     * _just_ wants to register in namedWriteables provided by a plugin, prefer overriding\n+     * {@link InternalAggregationTestCase#registerPlugin()} instead because that route handles the automatic\n+     * conversion of AggSpecs into namedWriteables.\n+     */\n+    protected List<NamedWriteableRegistry.Entry> getNamedWriteables() {\n+        List<NamedWriteableRegistry.Entry> entries\n+            = new ArrayList<>(new SearchModule(Settings.EMPTY, emptyList()).getNamedWriteables());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "886f1d61c32771283b00f559773c192c44b297d4"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1054, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}