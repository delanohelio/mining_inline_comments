{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODAxMzE0", "number": 54050, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1MlrODqwKbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MToxNFrODqwP8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU1ODg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1MlrOF6sPEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1MlrOF6sPEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NjQ4MA==", "bodyText": "assert false here to be sure we're not calling this?", "url": "https://github.com/elastic/elasticsearch/pull/54050#discussion_r397086480", "createdAt": "2020-03-24T11:36:52Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "diffHunk": "@@ -168,4 +186,45 @@ protected abstract void processNodePaths(Terminal terminal, Path[] dataPaths, Op\n     OptionParser getParser() {\n         return parser;\n     }\n+\n+    public static class UnknownMetaDataCustom implements MetaData.Custom {\n+\n+        private final String name;\n+        private final Map<String, Object> contents;\n+\n+        public UnknownMetaDataCustom(String name, Map<String, Object> contents) {\n+            this.name = name;\n+            this.contents = contents;\n+        }\n+\n+        @Override\n+        public EnumSet<MetaData.XContentContext> context() {\n+            return EnumSet.of(MetaData.XContentContext.API, MetaData.XContentContext.GATEWAY);\n+        }\n+\n+        @Override\n+        public Diff<MetaData.Custom> diff(MetaData.Custom previousState) {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b564231107c5baed263d6878455d96f822125"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU1OTA3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1NlrOF6sPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1NlrOF6sPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NjUwNw==", "bodyText": "assert false here to be sure we're not calling this?", "url": "https://github.com/elastic/elasticsearch/pull/54050#discussion_r397086507", "createdAt": "2020-03-24T11:36:56Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "diffHunk": "@@ -168,4 +186,45 @@ protected abstract void processNodePaths(Terminal terminal, Path[] dataPaths, Op\n     OptionParser getParser() {\n         return parser;\n     }\n+\n+    public static class UnknownMetaDataCustom implements MetaData.Custom {\n+\n+        private final String name;\n+        private final Map<String, Object> contents;\n+\n+        public UnknownMetaDataCustom(String name, Map<String, Object> contents) {\n+            this.name = name;\n+            this.contents = contents;\n+        }\n+\n+        @Override\n+        public EnumSet<MetaData.XContentContext> context() {\n+            return EnumSet.of(MetaData.XContentContext.API, MetaData.XContentContext.GATEWAY);\n+        }\n+\n+        @Override\n+        public Diff<MetaData.Custom> diff(MetaData.Custom previousState) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public String getWriteableName() {\n+            return name;\n+        }\n+\n+        @Override\n+        public Version getMinimalSupportedVersion() {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b564231107c5baed263d6878455d96f822125"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU1OTE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1OVrOF6sPQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNjo1OVrOF6sPQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NjUzMA==", "bodyText": "assert false here to be sure we're not calling this?", "url": "https://github.com/elastic/elasticsearch/pull/54050#discussion_r397086530", "createdAt": "2020-03-24T11:36:59Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "diffHunk": "@@ -168,4 +186,45 @@ protected abstract void processNodePaths(Terminal terminal, Path[] dataPaths, Op\n     OptionParser getParser() {\n         return parser;\n     }\n+\n+    public static class UnknownMetaDataCustom implements MetaData.Custom {\n+\n+        private final String name;\n+        private final Map<String, Object> contents;\n+\n+        public UnknownMetaDataCustom(String name, Map<String, Object> contents) {\n+            this.name = name;\n+            this.contents = contents;\n+        }\n+\n+        @Override\n+        public EnumSet<MetaData.XContentContext> context() {\n+            return EnumSet.of(MetaData.XContentContext.API, MetaData.XContentContext.GATEWAY);\n+        }\n+\n+        @Override\n+        public Diff<MetaData.Custom> diff(MetaData.Custom previousState) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public String getWriteableName() {\n+            return name;\n+        }\n+\n+        @Override\n+        public Version getMinimalSupportedVersion() {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b564231107c5baed263d6878455d96f822125"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU3Mjk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MToxNFrOF6sX8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0NzowNFrOF6w-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4ODc1Mg==", "bodyText": "Why keep IndicesModule.getNamedXContents() but drop ClusterModule.getNamedXWriteables() here? Shouldn't we handle Condition named objects similarly to MetaData.Custom?\n\nEdit: we discussed this in another channel and it's kinda thorny because the Condition things are represented as JSON primitives (strings, numbers) rather than objects. Could you add a comment recording that in the source", "url": "https://github.com/elastic/elasticsearch/pull/54050#discussion_r397088752", "createdAt": "2020-03-24T11:41:14Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "diffHunk": "@@ -65,10 +70,23 @@\n     protected static final String CS_MISSING_MSG =\n         \"cluster state is empty, cluster has never been bootstrapped?\";\n \n-    protected static final NamedXContentRegistry namedXContentRegistry = new NamedXContentRegistry(\n-        Stream.of(ClusterModule.getNamedXWriteables().stream(), IndicesModule.getNamedXContents().stream())\n-            .flatMap(Function.identity())\n-            .collect(Collectors.toList()));\n+    // fake the registry here, as command-line tools are not loading plugins, and ensure that it preserves the parsed XContent\n+    public static final NamedXContentRegistry namedXContentRegistry = new NamedXContentRegistry(IndicesModule.getNamedXContents()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b564231107c5baed263d6878455d96f822125"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2NDAzNw==", "bodyText": "I've made some adaptions in 89b0810 where the code (and comment) hopefully makes it easier to explain what's going on.", "url": "https://github.com/elastic/elasticsearch/pull/54050#discussion_r397164037", "createdAt": "2020-03-24T13:47:04Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java", "diffHunk": "@@ -65,10 +70,23 @@\n     protected static final String CS_MISSING_MSG =\n         \"cluster state is empty, cluster has never been bootstrapped?\";\n \n-    protected static final NamedXContentRegistry namedXContentRegistry = new NamedXContentRegistry(\n-        Stream.of(ClusterModule.getNamedXWriteables().stream(), IndicesModule.getNamedXContents().stream())\n-            .flatMap(Function.identity())\n-            .collect(Collectors.toList()));\n+    // fake the registry here, as command-line tools are not loading plugins, and ensure that it preserves the parsed XContent\n+    public static final NamedXContentRegistry namedXContentRegistry = new NamedXContentRegistry(IndicesModule.getNamedXContents()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4ODc1Mg=="}, "originalCommit": {"oid": "ca1b564231107c5baed263d6878455d96f822125"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4151, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}