{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjc0NzM5", "number": 60852, "title": "Remove a bunch of type boilerplate from Aggs", "bodyText": "This is a follow-up PR to the ValuesSourceRegistry work.  By adding the supplier type to the map key in the ValuesSourceRegistry, we are able to confirm at compile time that the user is sending the correct type to the registry, and to safely cast that type when we get the supplier out of the registry.  This lets us remove a bunch of type checking & casting boiler plate, while actually giving us better type safety, since errors can be detected much earlier.\nMany thanks to @nik9000 for helping me figure out how to do this!", "createdAt": "2020-08-06T21:32:48Z", "url": "https://github.com/elastic/elasticsearch/pull/60852", "merged": true, "mergeCommit": {"oid": "e3c9ece1e03ba3fe7ec897ad78111247eb31e5ca"}, "closed": true, "closedAt": "2020-08-12T13:30:41Z", "author": {"login": "not-napoleon"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8TaeRgH2gAyNDY0Mjc0NzM5OjM5YWY5NGY4NjJmZDE1NGEyODE4NWRlNDZiNGY5M2U2ZjNmMjY2Yzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc99WC2gH2gAyNDY0Mjc0NzM5OjE3YmFiMGZmMGYzYWI5MDNiOTVjODdlZDJmNDc4MGQ0Y2FmNTJkMjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39af94f862fd154a28185de46b4f93e6f3f266c9", "author": {"user": {"login": "not-napoleon", "name": "Mark Tozzi"}}, "url": "https://github.com/elastic/elasticsearch/commit/39af94f862fd154a28185de46b4f93e6f3f266c9", "committedDate": "2020-08-06T17:38:39Z", "message": "merge our two 'dummy' interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc5d8046692fc2f63d9f2ecca392fd115841d926", "author": {"user": {"login": "not-napoleon", "name": "Mark Tozzi"}}, "url": "https://github.com/elastic/elasticsearch/commit/bc5d8046692fc2f63d9f2ecca392fd115841d926", "committedDate": "2020-08-06T21:24:18Z", "message": "remove a bunch of type boilerplate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTA2Mzgx", "url": "https://github.com/elastic/elasticsearch/pull/60852#pullrequestreview-462906381", "createdAt": "2020-08-06T22:02:07Z", "commit": {"oid": "bc5d8046692fc2f63d9f2ecca392fd115841d926"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjowMjowN1rOG9Ft6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjowMzozMFrOG9Fvyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwOTk5NQ==", "bodyText": "I think the key might belong in the Factory, at least while we still have them.", "url": "https://github.com/elastic/elasticsearch/pull/60852#discussion_r466709995", "createdAt": "2020-08-06T22:02:07Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoTileGridAggregationBuilder.java", "diffHunk": "@@ -19,24 +19,29 @@\n \n package org.elasticsearch.search.aggregations.bucket.geogrid;\n \n-import java.io.IOException;\n-import java.util.Map;\n-\n import org.elasticsearch.common.geo.GeoBoundingBox;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.index.query.QueryShardContext;\n import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorFactories;\n import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.GeoGridAggregatorSupplier;\n import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n \n+import java.io.IOException;\n+import java.util.Map;\n+\n public class GeoTileGridAggregationBuilder extends GeoGridAggregationBuilder {\n     public static final String NAME = \"geotile_grid\";\n     public static final int DEFAULT_PRECISION = 7;\n     private static final int DEFAULT_MAX_NUM_CELLS = 10000;\n+    public static final ValuesSourceRegistry.RegistryKey<GeoGridAggregatorSupplier> REGISTRY_KEY = new ValuesSourceRegistry.RegistryKey<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc5d8046692fc2f63d9f2ecca392fd115841d926"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDQ3NA==", "bodyText": "Do you think we need the marker interface? Like, maybe the <T> below can just be T?", "url": "https://github.com/elastic/elasticsearch/pull/60852#discussion_r466710474", "createdAt": "2020-08-06T22:03:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceRegistry.java", "diffHunk": "@@ -31,18 +31,34 @@\n import java.util.Objects;\n \n /**\n- * {@link ValuesSourceRegistry} holds the mapping from {@link ValuesSourceType}s to {@link AggregatorSupplier}s.  DO NOT directly\n+ * {@link ValuesSourceRegistry} holds the mapping from {@link ValuesSourceType}s to {@link ComponentSupplier}s.  DO NOT directly\n  * instantiate this class, instead get an already-configured copy from {@link QueryShardContext#getValuesSourceRegistry()}, or (in the case\n  * of some test scenarios only) directly from {@link SearchModule#getValuesSourceRegistry()}\n  *\n  */\n public class ValuesSourceRegistry {\n \n-    public interface CompositeSupplier {\n+    /**\n+     * {@link ComponentSupplier} serves as a marker for what the {@link ValuesSourceRegistry} holds to construct aggregator instances.\n+     * The aggregators for each aggregation should all share a signature, and that signature should be used to create an ComponentSupplier\n+     * for that aggregation.  Alternatively, if an existing supplier has a matching signature, please re-use that.\n+     *\n+     * In many cases, this can be a simple wrapper over the aggregator constructor.  If that is sufficient, please just use a reference to\n+     * the constructor.  Implementing a supplier (typically as a lambda) should only be necessary when factors besides the\n+     * {@link ValuesSourceType} are necessary for selecting the correct aggregator implementation.  This happens in terms for example where\n+     * we make decisions based on the availability of global ordinals.\n+     *\n+     * The suppliers are responsible for any casting of {@link ValuesSource} that needs to happen.  They must accept a base\n+     * {@link ValuesSource} * instance.  The suppliers may perform additional logic to configure the aggregator as needed, such as in\n+     * {@link org.elasticsearch.search.aggregations.bucket.terms.TermsAggregatorFactory} deciding the execution mode.\n+     *\n+     * There is ongoing work to  normalize aggregator constructor signatures, and thus reduce the number of ComponentSupplier interfaces.\n+     */\n+    public interface ComponentSupplier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc5d8046692fc2f63d9f2ecca392fd115841d926"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7d77719c0ffdb902c6694804d5cd4d551cc6e29", "author": {"user": {"login": "not-napoleon", "name": "Mark Tozzi"}}, "url": "https://github.com/elastic/elasticsearch/commit/a7d77719c0ffdb902c6694804d5cd4d551cc6e29", "committedDate": "2020-08-11T14:04:24Z", "message": "Fix usage tracking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da2a203edf75ead2e14c2975d0f9a02b8aa9f0ed", "author": {"user": {"login": "not-napoleon", "name": "Mark Tozzi"}}, "url": "https://github.com/elastic/elasticsearch/commit/da2a203edf75ead2e14c2975d0f9a02b8aa9f0ed", "committedDate": "2020-08-11T14:15:08Z", "message": "Remove dummy interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aea16019dcd68a925fbbbe08eec263df3a37b41", "author": {"user": {"login": "not-napoleon", "name": "Mark Tozzi"}}, "url": "https://github.com/elastic/elasticsearch/commit/6aea16019dcd68a925fbbbe08eec263df3a37b41", "committedDate": "2020-08-11T15:01:21Z", "message": "Merge composite and aggs registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjQ2OTU2", "url": "https://github.com/elastic/elasticsearch/pull/60852#pullrequestreview-465246956", "createdAt": "2020-08-11T16:45:30Z", "commit": {"oid": "a7d77719c0ffdb902c6694804d5cd4d551cc6e29"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NTozMFrOG_AbIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1Mzo0OVrOG_AvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDQxNw==", "bodyText": "Probably worth a comment about why this is ok.", "url": "https://github.com/elastic/elasticsearch/pull/60852#discussion_r468720417", "createdAt": "2020-08-11T16:45:30Z", "author": {"login": "nik9000"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/analytics/StringStatsAggregationBuilder.java", "diffHunk": "@@ -79,6 +80,11 @@ public String getType() {\n         return NAME;\n     }\n \n+    @Override\n+    protected ValuesSourceRegistry.RegistryKey<?> getRegistryKey() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d77719c0ffdb902c6694804d5cd4d551cc6e29"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMTY2NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/60852#discussion_r468721665", "createdAt": "2020-08-11T16:47:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoTileGridAggregationBuilder.java", "diffHunk": "@@ -19,24 +19,29 @@\n \n package org.elasticsearch.search.aggregations.bucket.geogrid;\n \n-import java.io.IOException;\n-import java.util.Map;\n-\n import org.elasticsearch.common.geo.GeoBoundingBox;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.index.query.QueryShardContext;\n import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorFactories;\n import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.GeoGridAggregatorSupplier;\n import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n \n+import java.io.IOException;\n+import java.util.Map;\n+\n public class GeoTileGridAggregationBuilder extends GeoGridAggregationBuilder {\n     public static final String NAME = \"geotile_grid\";\n     public static final int DEFAULT_PRECISION = 7;\n     private static final int DEFAULT_MAX_NUM_CELLS = 10000;\n+    public static final ValuesSourceRegistry.RegistryKey<GeoGridAggregatorSupplier> REGISTRY_KEY = new ValuesSourceRegistry.RegistryKey<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwOTk5NQ=="}, "originalCommit": {"oid": "bc5d8046692fc2f63d9f2ecca392fd115841d926"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNTU3Ng==", "bodyText": "I wonder if the factory should be registering the usage. Or if the builder should resolve the registry entry first and pass it down to the factory inside innerBuild.....", "url": "https://github.com/elastic/elasticsearch/pull/60852#discussion_r468725576", "createdAt": "2020-08-11T16:53:49Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "diffHunk": "@@ -337,15 +337,21 @@ public ZoneId timeZone() {\n     protected final ValuesSourceAggregatorFactory doBuild(QueryShardContext queryShardContext, AggregatorFactory parent,\n                                                           Builder subFactoriesBuilder) throws IOException {\n         ValuesSourceConfig config = resolveConfig(queryShardContext);\n-        if (queryShardContext.getValuesSourceRegistry().isRegistered(getType())) {\n-            // Only test if the values source type is valid if the aggregation uses the registry\n-            AggregatorSupplier supplier = queryShardContext.getValuesSourceRegistry().getAggregator(config, getType());\n+        if (queryShardContext.getValuesSourceRegistry().isRegistered(getRegistryKey())) {\n+            /*\n+            if the aggregation uses the values source registry, test if the resolved values source type is compatible with this aggregation.\n+            This call will throw if the mapping isn't registered, which is what we want.  Note that we need to throw from here because\n+            AbstractAggregationBuilder#build, which called this, will attempt to register the agg usage next, and if the usage is invalid\n+            that will fail with a weird error.\n+             */\n+            queryShardContext.getValuesSourceRegistry().getAggregator(getRegistryKey(), config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aea16019dcd68a925fbbbe08eec263df3a37b41"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f73310b16adebed39aaae2f1d0a5c7fb8c28a4", "author": {"user": {"login": "not-napoleon", "name": "Mark Tozzi"}}, "url": "https://github.com/elastic/elasticsearch/commit/c4f73310b16adebed39aaae2f1d0a5c7fb8c28a4", "committedDate": "2020-08-11T20:08:02Z", "message": "response to PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17bab0ff0f3ab903b95c87ed2f4780d4caf52d25", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/17bab0ff0f3ab903b95c87ed2f4780d4caf52d25", "committedDate": "2020-08-11T21:03:45Z", "message": "Merge branch 'master' into vs-regsitry-type-magic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}