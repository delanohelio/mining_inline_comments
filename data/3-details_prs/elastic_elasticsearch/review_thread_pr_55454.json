{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDEzMDY1", "number": 55454, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowMzo1OVrOEH9Xiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMToxMFrOElonEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzgwOTM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowMzo1OVrOGnoMkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMTo0MlrOGnwIxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwNjIyNw==", "bodyText": "nit: you could avoid the variable and use the randomValueOtherThan() here directly.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444206227", "createdAt": "2020-06-23T13:03:59Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -57,14 +57,16 @@ protected ZoneId instanceZoneId(DateTimeFormatProcessor instance) {\n \n     @Override\n     protected DateTimeFormatProcessor mutateInstance(DateTimeFormatProcessor instance) {\n+        Formatter replaced = randomValueOtherThan(instance.formatter(), () -> randomFrom(Formatter.values()));\n         return new DateTimeFormatProcessor(\n             new ConstantProcessor(DateTimeTestUtils.nowWithMillisResolution()),\n             new ConstantProcessor(ESTestCase.randomRealisticUnicodeOfLength(128)),\n-            randomValueOtherThan(instance.zoneId(), ESTestCase::randomZone)\n+            randomZone(),\n+            replaced", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjMyNw==", "bodyText": "updated", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444336327", "createdAt": "2020-06-23T16:01:42Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -57,14 +57,16 @@ protected ZoneId instanceZoneId(DateTimeFormatProcessor instance) {\n \n     @Override\n     protected DateTimeFormatProcessor mutateInstance(DateTimeFormatProcessor instance) {\n+        Formatter replaced = randomValueOtherThan(instance.formatter(), () -> randomFrom(Formatter.values()));\n         return new DateTimeFormatProcessor(\n             new ConstantProcessor(DateTimeTestUtils.nowWithMillisResolution()),\n             new ConstantProcessor(ESTestCase.randomRealisticUnicodeOfLength(128)),\n-            randomValueOtherThan(instance.zoneId(), ESTestCase::randomZone)\n+            randomZone(),\n+            replaced", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwNjIyNw=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzgyMDg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzowNjozM1rOGnoTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMDoyOVrOGnwFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwODAwMw==", "bodyText": "I think it's not necessary since, if there is no pattern found, no replacement occurs.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444208003", "createdAt": "2020-06-23T13:06:33Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},\n+        {\"t\", \"a\"},\n+        {\"dddd\", \"eeee\"},\n+        {\"ddd\", \"eee\"},\n+        {\"K\", \"v\"},\n+        {\"g\", \"G\"},\n+        {\"f\", \"S\"},\n+    };\n+    private final Formatter formatter;\n \n-    public DateTimeFormatProcessor(Processor source1, Processor source2, ZoneId zoneId) {\n+\n+    public enum Formatter {\n+        FORMAT,\n+        DATE_TIME_FORMAT;\n+\n+        public String getJavaPattern(final Object pattern) {\n+            String javaDateFormat = (String) pattern;\n+            if (this == FORMAT) {\n+\n+                for (String[] replacement : JAVA_TIME_FORMAT_REPLACEMENTS) {\n+                    if (javaDateFormat.contains(replacement[0])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTUwNQ==", "bodyText": "Removed contains check.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444335505", "createdAt": "2020-06-23T16:00:29Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},\n+        {\"t\", \"a\"},\n+        {\"dddd\", \"eeee\"},\n+        {\"ddd\", \"eee\"},\n+        {\"K\", \"v\"},\n+        {\"g\", \"G\"},\n+        {\"f\", \"S\"},\n+    };\n+    private final Formatter formatter;\n \n-    public DateTimeFormatProcessor(Processor source1, Processor source2, ZoneId zoneId) {\n+\n+    public enum Formatter {\n+        FORMAT,\n+        DATE_TIME_FORMAT;\n+\n+        public String getJavaPattern(final Object pattern) {\n+            String javaDateFormat = (String) pattern;\n+            if (this == FORMAT) {\n+\n+                for (String[] replacement : JAVA_TIME_FORMAT_REPLACEMENTS) {\n+                    if (javaDateFormat.contains(replacement[0])) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwODAwMw=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Nzg4MDY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyMDo1MFrOGno5HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1MjozMlrOGoO0Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA==", "bodyText": "Did you use this table: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings for the patterns?\nI see for example the F, FF, etc. is not addressed.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444217628", "createdAt": "2020-06-23T13:20:50Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzOTM4MQ==", "bodyText": "@matriv I have used same pattern as you mentioned. But i couldn't find any equivalent for F,FF, ... FFFFFFF  format specifiers in Java. Java has some what equivalent specifier which is S. Should I proceed with that?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444339381", "createdAt": "2020-06-23T16:06:18Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzQ1Mg==", "bodyText": "I think you can use the square brackets: e.g. [.SS] as a translation to .FF. Would you mind trying that and add some unit test for it?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444393452", "createdAt": "2020-06-23T17:35:20Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NjQ2NA==", "bodyText": "I think for [.SS] is similar to .SS. I tried with both and yielding same results. so can I simply use S as a replacement of F ?\nfinal Literal dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, Integer.valueOf(\"001000123\")));\nnew Format(Source.EMPTY, dateTime , l(\"[SS]:SS\"), zoneId).makePipe().asProcessor().process(null)\nreturns 00:00", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444666464", "createdAt": "2020-06-24T06:13:58Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MDA2Ng==", "bodyText": "Ah, I see. Thanks for checking. I'd say then to just replace F with S too, otherwise we'd need to use a DateTimeFormatterBuilder and do a more complex parsing of the user provided pattern in order to use something like .appendFraction(NANO_OF_SECOND, 0, 9, true) where 9 should be the number of Fs provided.\nI believe it's not important to implement this, and I'd rather add a NOTE in the docs to clarify that F works as f (non-optional).\n@astefan what do you think?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444690066", "createdAt": "2020-06-24T07:12:15Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNTA4Mw==", "bodyText": "@matriv  Thanks for your suggestion. I have added replacement for F with S and added note in docs. Let me know if I can mark this conversation as resolved.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444835083", "createdAt": "2020-06-24T11:44:59Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODkyNg==", "bodyText": "For me it's fine, let's wait for @astefan 's opinion as well.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444838926", "createdAt": "2020-06-24T11:52:32Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, "originalCommit": {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTc0MDgyOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1MTo1NlrOGoOy5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDozODowOFrOGoVLQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODYzMA==", "bodyText": "I'd rather have it as a separate [NOTE] and please add more detail: that it doesn't work as optional (0 digits will be printed out).", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444838630", "createdAt": "2020-06-24T11:51:56Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -745,8 +745,9 @@ https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sq\n If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n \n [NOTE]\n-If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n-(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+[1] If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned. +\n+[2] Format specifier `F` will be working similar to format specifier `f`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a750ae3bca97da0949a825d5db7e4912e308c275"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0MzE2OQ==", "bodyText": "Added separate [NOTE] and added more details about F format specifier.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444943169", "createdAt": "2020-06-24T14:38:08Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -745,8 +745,9 @@ https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sq\n If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n \n [NOTE]\n-If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n-(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+[1] If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned. +\n+[2] Format specifier `F` will be working similar to format specifier `f`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODYzMA=="}, "originalCommit": {"oid": "a750ae3bca97da0949a825d5db7e4912e308c275"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM2ODI4OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NjoyOFrOGofB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDozMDozNFrOGoq-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNDU5Mg==", "bodyText": "... seconds fraction and all trailing 0s will be printed to meet the number of Fs in the pattern, e.g.: for a time part 10:20:30.1234and patternHH:mm:ss.FFFFFF, the output string of the function would be:  10:20:30.123400`.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r445104592", "createdAt": "2020-06-24T18:56:28Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -745,9 +745,13 @@ https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sq\n If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n \n [NOTE]\n-[1] If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n-(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned. +\n-[2] Format specifier `F` will be working similar to format specifier `f`.\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction; that is,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad149e6419748cfaa3dd6cc3488c75ab02b06ed"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwMDMwOA==", "bodyText": "Corrected note", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r445300308", "createdAt": "2020-06-25T04:30:34Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -745,9 +745,13 @@ https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sq\n If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n \n [NOTE]\n-[1] If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n-(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned. +\n-[2] Format specifier `F` will be working similar to format specifier `f`.\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction; that is,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNDU5Mg=="}, "originalCommit": {"oid": "4ad149e6419748cfaa3dd6cc3488c75ab02b06ed"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTE3MTIxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTo1NDo1NFrOGrr3Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowNzoyOFrOGruZBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDU4Ng==", "bodyText": "Please revert this. We don't allow * imports.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r448460586", "createdAt": "2020-07-01T15:54:54Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -13,15 +13,14 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.sql.AbstractSqlWireSerializingTestCase;\n import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;\n+import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DateTimeFormatProcessor.Formatter;\n \n import java.time.Instant;\n import java.time.OffsetTime;\n import java.time.ZoneId;\n \n import static org.elasticsearch.xpack.ql.expression.Literal.NULL;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomDatetimeLiteral;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomStringLiteral;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24d1f898f4a7e3532b71c5568627e8291c8cb580"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjAyMw==", "bodyText": "Corrected AvoidStarImport rule violation", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r448502023", "createdAt": "2020-07-01T17:07:28Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -13,15 +13,14 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.sql.AbstractSqlWireSerializingTestCase;\n import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;\n+import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DateTimeFormatProcessor.Formatter;\n \n import java.time.Instant;\n import java.time.OffsetTime;\n import java.time.ZoneId;\n \n import static org.elasticsearch.xpack.ql.expression.Literal.NULL;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomDatetimeLiteral;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomStringLiteral;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDU4Ng=="}, "originalCommit": {"oid": "24d1f898f4a7e3532b71c5568627e8291c8cb580"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzgwNTM5OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjowNDozNlrOG1pYGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NTowNVrOG2Va1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Format specifier `F` will be working similar to format specifier `f`.\n          \n          \n            \n            It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n          \n          \n            \n            e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.\n          \n          \n            \n            Diverging from the reference documentation, format specifier `F` behaves identical to format specifier `f`.\n          \n      \n    \n    \n  \n\nIMO the docs for f should explain sufficiently F's behavior, we shouldn't need an extra example.\nBut stepping back, if f==F, why do we need F at all? @matriv, do we want to plug into some SQL Server's FORMAT usages? Otherwise I guess it could be dropped altogether.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r458905624", "createdAt": "2020-07-22T16:04:36Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjEzOA==", "bodyText": "Since we say that we support the patterns of SQL Server's FORMAT and F is the only exception we don't support exactly as in SQL Server (we still print trailing 0s), I thought that we should still support it but explain that has the exact same effect as f.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459316138", "createdAt": "2020-07-23T09:13:41Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MzAzMg==", "bodyText": "IMO since we need to make a note about it anyways and it brings no new functionality, it'd be cleaner to just drop it and note that instead. But not feeling strong about, it can remain as is too.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459363032", "createdAt": "2020-07-23T10:46:05Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5NjE0MA==", "bodyText": "I don't have strong opinion but a slight preference on keeping it and document it, since the functionality of FORMAT is to ease the life of a user acquainted with SQL Server.\nOn the other hand, if the user doesn't read the docs could just use F and face confusing results.\nIf we choose to drop it, we'd have to return an error message in resolveType() and in the Processor when the F is contained in the pattern.\n@bpintea, @binu-r What's your final call?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459396140", "createdAt": "2020-07-23T11:59:19Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwODM0Mg==", "bodyText": "Sure, this also makes sense, let's keep it then.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459408342", "createdAt": "2020-07-23T12:23:28Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMDc3NQ==", "bodyText": "I also prefer in keeping it with notes.\nShould I change the notes as per suggestion? or existing is fine?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459410775", "createdAt": "2020-07-23T12:28:00Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4MDk3Mg==", "bodyText": "I find the existing formulation actually a bit confusing: since multiple Fs are accepted this thew me off a bit initially: It represents the most significant digit of the seconds fraction and all trailing 0s will be printed to meet the number ofF s in the pattern:\n\njust the first F corresponds to the most significant digit;\nthere are multiple fractions a second has;\nminor, the space in \"F s\" and \"0 s\" can be dropped too;\nthe and all the trailing 0... doesn't logically follow the one most significant digit.\n\nSo yes, although I find the original Microsoft documentation telling enough, it doesn't have to be necessarily my proposal, but it should be changed nevertheless to make it clearer.\nOtherwise LGTM, thanks.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459580972", "createdAt": "2020-07-23T16:36:03Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzIyMw==", "bodyText": "@bpintea updated documentation. Thanks.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459627223", "createdAt": "2020-07-23T17:55:05Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It represents the most significant digit of the seconds fraction and all trailing `0` s will be printed to meet the number of `F` s in the pattern,\n+e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYyNA=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzgwNjA0OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjowNDo0NVrOG1pYfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTo1NDo1M1rOG2RATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTcyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].\n          \n          \n            \n            https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql#ExampleD[Microsoft SQL Server Format Specification].\n          \n      \n    \n    \n  \n\nview URL param's superfluous, but not hurting either.\nHowever, wouldn't the source reference page itself be more suitable as the format reference, instead of an example page? We could/should still reference the SQL Server FORMAT function (in the lines of \"as used by the FORMAT function\" or similar) to link it back to SQL, however.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r458905726", "createdAt": "2020-07-22T16:04:45Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNDUxMA==", "bodyText": "Yep, I agree!", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459314510", "createdAt": "2020-07-23T09:10:36Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTcyNg=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1NDg5NQ==", "bodyText": "updated documentation", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r459554895", "createdAt": "2020-07-23T15:54:53Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -721,6 +721,53 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the format specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD[Microsoft SQL Server Format Specification].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTcyNg=="}, "originalCommit": {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzAxNzE3OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1MzoyMVrOG3hIEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1MzoyMVrOG3hIEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2NzYwMQ==", "bodyText": "I think it's better as Fs (no whitespace between F and s).\nAlso, up to instead of upto.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460867601", "createdAt": "2020-07-27T12:53:21Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -765,6 +765,55 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql#argumentsl[format] specified in the 2nd argument. The formatting\n+pattern used is the one from\n+https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings[Microsoft SQL Server Format Specification].\n+If any of the two arguments is `null` or the pattern is an empty string `null` is returned.\n+\n+[NOTE]\n+If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n+(e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n+\n+[NOTE]\n+Format specifier `F` will be working similar to format specifier `f`.\n+It will return the fractional part of seconds, and the number of digits will be same as of the number of `F` s provided as input (upto 9 digits).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzAyNDk4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1NToyMlrOG3hMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozNjoxNFrOG3lZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2ODczOA==", "bodyText": "Please, correctly indent the result header to match the columns size of the actual result rows.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460868738", "createdAt": "2020-07-27T12:55:22Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "diffHunk": "@@ -1017,6 +1017,110 @@ F       | 1997-05-19 00:00:00.000Z\n M       | 1996-11-05 00:00:00.000Z\n ;\n \n+selectFormat\n+schema::format_date:s|format_datetime:s|format_time:s\n+SELECT FORMAT('2020-04-05T11:22:33.123Z'::date, 'dd/MM/YYYY HH:mm:ss.fff') AS format_date,\n+FORMAT('2020-04-05T11:22:33.123Z'::datetime, 'dd/MM/YYYY HH:mm:ss.ff') AS format_datetime,\n+FORMAT('11:22:33.123456789Z'::time, 'HH:mm:ss.ff') AS format_time;\n+\n+       format_date          |    format_datetime         |   format_time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNzYwMw==", "bodyText": "Also, add one or more integration tests where FORMAT output is being passed to another function (LENGTH or CONCAT or other string manipulating function).", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460937603", "createdAt": "2020-07-27T14:36:14Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "diffHunk": "@@ -1017,6 +1017,110 @@ F       | 1997-05-19 00:00:00.000Z\n M       | 1996-11-05 00:00:00.000Z\n ;\n \n+selectFormat\n+schema::format_date:s|format_datetime:s|format_time:s\n+SELECT FORMAT('2020-04-05T11:22:33.123Z'::date, 'dd/MM/YYYY HH:mm:ss.fff') AS format_date,\n+FORMAT('2020-04-05T11:22:33.123Z'::datetime, 'dd/MM/YYYY HH:mm:ss.ff') AS format_datetime,\n+FORMAT('11:22:33.123456789Z'::time, 'HH:mm:ss.ff') AS format_time;\n+\n+       format_date          |    format_datetime         |   format_time", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2ODczOA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzAzMTM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1NzoxMVrOG3hQYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1NzoxMVrOG3hQYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2OTczMA==", "bodyText": "Same thing here, as well: indent the results properly.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460869730", "createdAt": "2020-07-27T12:57:11Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "diffHunk": "@@ -1017,6 +1017,110 @@ F       | 1997-05-19 00:00:00.000Z\n M       | 1996-11-05 00:00:00.000Z\n ;\n \n+selectFormat\n+schema::format_date:s|format_datetime:s|format_time:s\n+SELECT FORMAT('2020-04-05T11:22:33.123Z'::date, 'dd/MM/YYYY HH:mm:ss.fff') AS format_date,\n+FORMAT('2020-04-05T11:22:33.123Z'::datetime, 'dd/MM/YYYY HH:mm:ss.ff') AS format_datetime,\n+FORMAT('11:22:33.123456789Z'::time, 'HH:mm:ss.ff') AS format_time;\n+\n+       format_date          |    format_datetime         |   format_time\n+------------------------+------------------------+----------------\n+05/04/2020 00:00:00.000 | 05/04/2020 11:22:33.12 | 11:22:33.12\n+;\n+\n+selectFormatWithField\n+schema::birth_date:ts|format_birth_date1:s|format_birth_date2:s\n+SELECT birth_date, FORMAT(birth_date, 'MM/dd/YYYY') AS format_birth_date1, FORMAT(birth_date, concat(gender, 'M/dd')) AS format_birth_date2\n+FROM test_emp WHERE gender = 'M' AND emp_no BETWEEN 10037 AND 10052 ORDER BY emp_no;\n+\n+       birth_date        | format_birth_date1 | format_birth_date2\n+-------------------------+----------------+----------------\n+1963-07-22 00:00:00.000Z | 07/22/1963     | 07/22", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzA3MzMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzowODowN1rOG3hqEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzowODowN1rOG3hqEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3NjMwNQ==", "bodyText": "Please, add emp_no to the SELECT. This is the only way I can make sure the results are ordered properly, without actually testing this myself.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460876305", "createdAt": "2020-07-27T13:08:07Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "diffHunk": "@@ -1017,6 +1017,110 @@ F       | 1997-05-19 00:00:00.000Z\n M       | 1996-11-05 00:00:00.000Z\n ;\n \n+selectFormat\n+schema::format_date:s|format_datetime:s|format_time:s\n+SELECT FORMAT('2020-04-05T11:22:33.123Z'::date, 'dd/MM/YYYY HH:mm:ss.fff') AS format_date,\n+FORMAT('2020-04-05T11:22:33.123Z'::datetime, 'dd/MM/YYYY HH:mm:ss.ff') AS format_datetime,\n+FORMAT('11:22:33.123456789Z'::time, 'HH:mm:ss.ff') AS format_time;\n+\n+       format_date          |    format_datetime         |   format_time\n+------------------------+------------------------+----------------\n+05/04/2020 00:00:00.000 | 05/04/2020 11:22:33.12 | 11:22:33.12\n+;\n+\n+selectFormatWithField\n+schema::birth_date:ts|format_birth_date1:s|format_birth_date2:s\n+SELECT birth_date, FORMAT(birth_date, 'MM/dd/YYYY') AS format_birth_date1, FORMAT(birth_date, concat(gender, 'M/dd')) AS format_birth_date2\n+FROM test_emp WHERE gender = 'M' AND emp_no BETWEEN 10037 AND 10052 ORDER BY emp_no;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzA3ODk2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzowOTo0NVrOG3ht5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzowOTo0NVrOG3ht5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3NzI4Nw==", "bodyText": "Same here: add emp_no to the SELECT.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460877287", "createdAt": "2020-07-27T13:09:45Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/server/src/main/resources/datetime.csv-spec", "diffHunk": "@@ -1017,6 +1017,110 @@ F       | 1997-05-19 00:00:00.000Z\n M       | 1996-11-05 00:00:00.000Z\n ;\n \n+selectFormat\n+schema::format_date:s|format_datetime:s|format_time:s\n+SELECT FORMAT('2020-04-05T11:22:33.123Z'::date, 'dd/MM/YYYY HH:mm:ss.fff') AS format_date,\n+FORMAT('2020-04-05T11:22:33.123Z'::datetime, 'dd/MM/YYYY HH:mm:ss.ff') AS format_datetime,\n+FORMAT('11:22:33.123456789Z'::time, 'HH:mm:ss.ff') AS format_time;\n+\n+       format_date          |    format_datetime         |   format_time\n+------------------------+------------------------+----------------\n+05/04/2020 00:00:00.000 | 05/04/2020 11:22:33.12 | 11:22:33.12\n+;\n+\n+selectFormatWithField\n+schema::birth_date:ts|format_birth_date1:s|format_birth_date2:s\n+SELECT birth_date, FORMAT(birth_date, 'MM/dd/YYYY') AS format_birth_date1, FORMAT(birth_date, concat(gender, 'M/dd')) AS format_birth_date2\n+FROM test_emp WHERE gender = 'M' AND emp_no BETWEEN 10037 AND 10052 ORDER BY emp_no;\n+\n+       birth_date        | format_birth_date1 | format_birth_date2\n+-------------------------+----------------+----------------\n+1963-07-22 00:00:00.000Z | 07/22/1963     | 07/22\n+1960-07-20 00:00:00.000Z | 07/20/1960     | 07/20\n+1959-10-01 00:00:00.000Z | 10/01/1959     | 10/01\n+null                     | null           | null\n+null                     | null           | null\n+null                     | null           | null\n+null                     | null           | null\n+null                     | null           | null\n+1958-05-21 00:00:00.000Z | 05/21/1958     | 05/21\n+1953-07-28 00:00:00.000Z | 07/28/1953     | 07/28\n+1961-02-26 00:00:00.000Z | 02/26/1961     | 02/26\n+;\n+\n+formatWhere\n+schema::birth_date:ts|format_birth_date:s\n+SELECT birth_date, FORMAT(birth_date, 'MM') AS format_birth_date FROM test_emp\n+WHERE FORMAT(birth_date, 'MM')::integer > 10 ORDER BY emp_no LIMIT 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzI4MzAxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo1Nzo1OFrOG3jrIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjowMjozNlrOHTpqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA==", "bodyText": "I think there are some unit tests missing, regarding the various patterns.\n\nm - The minute, from 0 through 59\nM - The month, from 1 through 12\nh - The hour, using a 12-hour clock from 1 to 12\nH - The hour, using a 24-hour clock from 0 to 23\nd - The day of the month, from 1 through 31\nMMM\nMMMM\ns\nother flavors of the year formatting (y, yy, yyy, yyyyy)\nother flavors of z (zz, zzz)\nalso, special handling situations: %, \\, any string literal.\nmaybe others I missed.\n\nIf we don't plan on supporting any of the above, at least take them out from the docs, because as the docs read now, we support patterns according  with https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings.\nCC @matriv", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460909344", "createdAt": "2020-07-27T13:57:58Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2OTc1OA==", "bodyText": "Added More tests. But after that there is some differences in y , yy .\nAlso \" , %  and \\ are not working properly.\n@astefan @matriv Shall I proceed with updating docs?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r463669758", "createdAt": "2020-07-31T15:12:40Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTM4MA==", "bodyText": "@binu-r, would you like to expand on the \"differences\" and what's \"not working properly\"?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r464585380", "createdAt": "2020-08-03T18:21:12Z", "author": {"login": "bpintea"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMjM3OA==", "bodyText": "@bpintea please find the differences found\n\n\n\nSymbol\nJava\n.Net\n\n\n\n\ny\n2009\n9\n\n\n\"\nprints \"\nenclosed in quotation marks to indicate that the entire delimited string should be interpreted as character literals.\n\n\n\\\nprints \\\nThe escape character.\n\n\n%\nprints %\nDefines the following character as a custom format specifier.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r466502378", "createdAt": "2020-08-06T15:37:04Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwODk3OQ==", "bodyText": "@binu-r Apologies for the delay. I'd say that we should continue with the existing functionality and properly document that those those 4 characters/patterns are not supported. @astefan Do you agree?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r488708979", "createdAt": "2020-09-15T14:23:08Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyOTI3MA==", "bodyText": "Sounds good @matriv", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r489229270", "createdAt": "2020-09-16T07:41:37Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NzU5Nw==", "bodyText": "@matriv @astefan Thank you. Updated documentation about special cases.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r490367597", "createdAt": "2020-09-17T16:02:36Z", "author": {"login": "binu-r"}, "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzI5MDg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo1OTozNVrOG3jv8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoxNTowN1rOG3kaqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMDU3Nw==", "bodyText": "Please, change the pattern to be String and make sure the method gets a String instead of blindly casting it to String.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460910577", "createdAt": "2020-07-27T13:59:35Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,88 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},\n+        {\"t\", \"a\"},\n+        {\"dddd\", \"eeee\"},\n+        {\"ddd\", \"eee\"},\n+        {\"K\", \"v\"},\n+        {\"g\", \"G\"},\n+        {\"f\", \"S\"},\n+        {\"F\", \"S\"}\n+    };\n+    private final Formatter formatter;\n \n-    public DateTimeFormatProcessor(Processor source1, Processor source2, ZoneId zoneId) {\n+\n+    public enum Formatter {\n+        FORMAT,\n+        DATE_TIME_FORMAT;\n+\n+        public String getJavaPattern(final Object pattern) {\n+            String javaDateFormat = (String) pattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyMTUxMg==", "bodyText": "Also, the method can be private.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460921512", "createdAt": "2020-07-27T14:15:07Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,88 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},\n+        {\"t\", \"a\"},\n+        {\"dddd\", \"eeee\"},\n+        {\"ddd\", \"eee\"},\n+        {\"K\", \"v\"},\n+        {\"g\", \"G\"},\n+        {\"f\", \"S\"},\n+        {\"F\", \"S\"}\n+    };\n+    private final Formatter formatter;\n \n-    public DateTimeFormatProcessor(Processor source1, Processor source2, ZoneId zoneId) {\n+\n+    public enum Formatter {\n+        FORMAT,\n+        DATE_TIME_FORMAT;\n+\n+        public String getJavaPattern(final Object pattern) {\n+            String javaDateFormat = (String) pattern;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMDU3Nw=="}, "originalCommit": {"oid": "7f7fd40846d7ee977beb3125c959179da732b379"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1MTg5OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NDoxM1rOHUEI9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyODozN1rOHULDYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTM5OQ==", "bodyText": "This is not 100% correct. if you have a year with 2 digits (let's say year 45) and use 3 or 4 y -> yyy or yyyy then you will get it with left padded 0s -> 045 and 0045. Could you please add some test like that, and properly rephrase the docs?", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r490801399", "createdAt": "2020-09-18T08:54:13Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -793,11 +793,14 @@ If any of the two arguments is `null` or the pattern is an empty string `null` i\n If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n (e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n \n-[NOTE]\n-Format specifier `F` will be working similar to format specifier `f`.\n+*Special Cases*\n+\n+- Format specifier `F` will be working similar to format specifier `f`.\n It will return the fractional part of seconds, and the number of digits will be same as of the number of `Fs` provided as input (up to 9 digits).\n Result will contain `0` appended in the end to match with number of `F` provided.\n e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.\n+- Format Specifier `y` will be working similar to `yyyy`. eg.: For year `2009`, `y` will be returning `2009` instead of `9`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b71051c9326fe360a697f5a3182adf6da11a13"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNDY1OQ==", "bodyText": "updated documentation and added test.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r490914659", "createdAt": "2020-09-18T12:28:37Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -793,11 +793,14 @@ If any of the two arguments is `null` or the pattern is an empty string `null` i\n If the 1st argument is of type `time`, then pattern specified by the 2nd argument cannot contain date related units\n (e.g. 'dd', 'MM', 'YYYY', etc.). If it contains such units an error is returned.\n \n-[NOTE]\n-Format specifier `F` will be working similar to format specifier `f`.\n+*Special Cases*\n+\n+- Format specifier `F` will be working similar to format specifier `f`.\n It will return the fractional part of seconds, and the number of digits will be same as of the number of `Fs` provided as input (up to 9 digits).\n Result will contain `0` appended in the end to match with number of `F` provided.\n e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.\n+- Format Specifier `y` will be working similar to `yyyy`. eg.: For year `2009`, `y` will be returning `2009` instead of `9`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTM5OQ=="}, "originalCommit": {"oid": "76b71051c9326fe360a697f5a3182adf6da11a13"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA1MTI2OnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozNzo1MFrOHUNgiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxOTo1MjozMVrOHUuilA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDg5MQ==", "bodyText": "You're not mentioning the left 0 padding when the ys are more than the digits of the year.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r490954891", "createdAt": "2020-09-18T13:37:50Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -799,8 +799,9 @@ If the 1st argument is of type `time`, then pattern specified by the 2nd argumen\n It will return the fractional part of seconds, and the number of digits will be same as of the number of `Fs` provided as input (up to 9 digits).\n Result will contain `0` appended in the end to match with number of `F` provided.\n e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.\n-- Format Specifier `y` will be working similar to `yyyy`. eg.: For year `2009`, `y` will be returning `2009` instead of `9`.\n-- Special characters like `\"` , `\\` and `%` will be returned as it is without any change. eg.: formatting year `17-sep-2020` with `%M` will return `%9`\n+- Format Specifier `y` will return year-of-era instead of one/two low-order digits.\n+eg.: For year `2009`, `y` will be returning `2009` instead of `9`. For year `43`, `y` format specifier will return `43`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60a289ec92f91fe3bbe9525ed2c18168f9f7715"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMjg5OA==", "bodyText": "when the number of ys are more than digits of year, then .net and java will pad 0s\nFor eg:\nif year is  45 then,\n\njava, y prints 45 and yyy prints 045\n.Net  y prints 45 and yyy prints 045\n\nDateTime thisDate1 = new DateTime(45, 6, 10);\nConsole.WriteLine(\"Today is \" + thisDate1.ToString(\"y, yyy, yyyyy\") + \".\"); // prints Today is 45, 045, 00045.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r491022898", "createdAt": "2020-09-18T15:22:14Z", "author": {"login": "binu-r"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -799,8 +799,9 @@ If the 1st argument is of type `time`, then pattern specified by the 2nd argumen\n It will return the fractional part of seconds, and the number of digits will be same as of the number of `Fs` provided as input (up to 9 digits).\n Result will contain `0` appended in the end to match with number of `F` provided.\n e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.\n-- Format Specifier `y` will be working similar to `yyyy`. eg.: For year `2009`, `y` will be returning `2009` instead of `9`.\n-- Special characters like `\"` , `\\` and `%` will be returned as it is without any change. eg.: formatting year `17-sep-2020` with `%M` will return `%9`\n+- Format Specifier `y` will return year-of-era instead of one/two low-order digits.\n+eg.: For year `2009`, `y` will be returning `2009` instead of `9`. For year `43`, `y` format specifier will return `43`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDg5MQ=="}, "originalCommit": {"oid": "d60a289ec92f91fe3bbe9525ed2c18168f9f7715"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ5NjA4NA==", "bodyText": "@binu-r correct! sorry for confusing you.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r491496084", "createdAt": "2020-09-19T19:52:31Z", "author": {"login": "matriv"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -799,8 +799,9 @@ If the 1st argument is of type `time`, then pattern specified by the 2nd argumen\n It will return the fractional part of seconds, and the number of digits will be same as of the number of `Fs` provided as input (up to 9 digits).\n Result will contain `0` appended in the end to match with number of `F` provided.\n e.g.: for a time part `10:20:30.1234` and pattern `HH:mm:ss.FFFFFF`, the output string of the function would be: `10:20:30.123400`.\n-- Format Specifier `y` will be working similar to `yyyy`. eg.: For year `2009`, `y` will be returning `2009` instead of `9`.\n-- Special characters like `\"` , `\\` and `%` will be returned as it is without any change. eg.: formatting year `17-sep-2020` with `%M` will return `%9`\n+- Format Specifier `y` will return year-of-era instead of one/two low-order digits.\n+eg.: For year `2009`, `y` will be returning `2009` instead of `9`. For year `43`, `y` format specifier will return `43`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDg5MQ=="}, "originalCommit": {"oid": "d60a289ec92f91fe3bbe9525ed2c18168f9f7715"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk4MTMxOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/functions/date-time.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMToxMFrOHVNpxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMToxMFrOHVNpxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNTgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql#argumentsl[format] specified in the 2nd argument. The formatting\n          \n          \n            \n            https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql#arguments[format] specified in the 2nd argument. The formatting\n          \n      \n    \n    \n  \n\nsorry, spotted only now.", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r492005828", "createdAt": "2020-09-21T12:31:10Z", "author": {"login": "bpintea"}, "path": "docs/reference/sql/functions/date-time.asciidoc", "diffHunk": "@@ -765,6 +765,59 @@ include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalHour]\n include-tagged::{sql-specs}/docs/docs.csv-spec[truncateIntervalDay]\n --------------------------------------------------\n \n+[[sql-functions-datetime-format]]\n+==== `FORMAT`\n+\n+.Synopsis:\n+[source, sql]\n+--------------------------------------------------\n+FORMAT(\n+    date_exp/datetime_exp/time_exp, <1>\n+    string_exp) <2>\n+--------------------------------------------------\n+\n+*Input*:\n+\n+<1> date/datetime/time expression\n+<2> format pattern\n+\n+*Output*: string\n+\n+*Description*: Returns the date/datetime/time as a string using the\n+https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql#argumentsl[format] specified in the 2nd argument. The formatting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5168d831ad7abb340ede63463db255cfcbb80e6d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2830, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}