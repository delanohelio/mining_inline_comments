{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDY3Nzcw", "number": 59693, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0NzowMFrOEPaqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0OTo0OFrOEPatGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjAwODgzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/qa/security/src/test/java/org/elasticsearch/xpack/search/AsyncSearchSecurityIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0NzowMFrOGzHWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoxMTowN1rOGzQkkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI1MDkxNg==", "bodyText": "Speaking from personal preference, I think this is trying too hard to use a Matcher, and it would be more readable to use a different style.\nFor example, we know exactly what results are expected, so we can check the number of hits & then we can sort the hits and check that each element is what we expect it to be.\nAlso, I may be mistaken because all the casting of JSON is a bit hard to read, but I think you have a type mismatch here.\nIf hits is List<Map<String, Map<String, Object>>>\nthen each element is Map<String, Map<String, Object>>\nbut in the Matcher, you cast actual to Map<String, Object> and check that some of the values are strings.\nI think hits needs to be List<Map<String, ?>> or List<Map<String, Object>>", "url": "https://github.com/elastic/elasticsearch/pull/59693#discussion_r456250916", "createdAt": "2020-07-17T06:47:00Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/async-search/qa/security/src/test/java/org/elasticsearch/xpack/search/AsyncSearchSecurityIT.java", "diffHunk": "@@ -57,9 +63,64 @@ public void indexDocuments() throws IOException {\n \n         createIndex(\"index-user2\", Settings.EMPTY);\n         index(\"index-user2\", \"0\", \"foo\", \"bar\");\n+        index(\"index-user2\", \"1\", \"bar\", \"baz\");\n         refresh(\"index-user2\");\n     }\n \n+    public void testWithDlsAndFls() throws Exception {\n+        Response submitResp = submitAsyncSearch(\"*\", \"*\", TimeValue.timeValueSeconds(10), \"user_dls\");\n+        assertOK(submitResp);\n+        Map<String, Object> submitRespMap = toMap(submitResp);\n+        List<Map<String, Map<String, Object>>> hits = extractHits(submitRespMap);\n+        assertThat(hits, contains(new BaseMatcher<>() {\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            public boolean matches(Object actual) {\n+                if (actual instanceof Map) {\n+                    Map<String, Object> searchHit = (Map<String, Object>) actual;\n+                    return \"index\".equals(searchHit.get(\"_index\")) &&\n+                            \"1\".equals(searchHit.get(\"_id\")) &&\n+                            ((Map<String, Object>) searchHit.get(\"_source\")).isEmpty();\n+                }\n+                return false;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f2fe7c6870c9c55358124e61330560d6d0f2c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMjA2NQ==", "bodyText": "Okay, I have polished the test code here.\nI've parsed the response to the actual AsyncSearchResponse so it doesn't deal with Maps and casts, but I've kept the collection matcher which now uses CustomMatcher elements which is simpler. I like this over sorting, because I don't know how to sort results across indices, and it feels contrived.", "url": "https://github.com/elastic/elasticsearch/pull/59693#discussion_r456402065", "createdAt": "2020-07-17T12:11:07Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/async-search/qa/security/src/test/java/org/elasticsearch/xpack/search/AsyncSearchSecurityIT.java", "diffHunk": "@@ -57,9 +63,64 @@ public void indexDocuments() throws IOException {\n \n         createIndex(\"index-user2\", Settings.EMPTY);\n         index(\"index-user2\", \"0\", \"foo\", \"bar\");\n+        index(\"index-user2\", \"1\", \"bar\", \"baz\");\n         refresh(\"index-user2\");\n     }\n \n+    public void testWithDlsAndFls() throws Exception {\n+        Response submitResp = submitAsyncSearch(\"*\", \"*\", TimeValue.timeValueSeconds(10), \"user_dls\");\n+        assertOK(submitResp);\n+        Map<String, Object> submitRespMap = toMap(submitResp);\n+        List<Map<String, Map<String, Object>>> hits = extractHits(submitRespMap);\n+        assertThat(hits, contains(new BaseMatcher<>() {\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            public boolean matches(Object actual) {\n+                if (actual instanceof Map) {\n+                    Map<String, Object> searchHit = (Map<String, Object>) actual;\n+                    return \"index\".equals(searchHit.get(\"_index\")) &&\n+                            \"1\".equals(searchHit.get(\"_id\")) &&\n+                            ((Map<String, Object>) searchHit.get(\"_source\")).isEmpty();\n+                }\n+                return false;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI1MDkxNg=="}, "originalCommit": {"oid": "995f2fe7c6870c9c55358124e61330560d6d0f2c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjAxMjIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0ODoyMFrOGzHYIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0ODoyMFrOGzHYIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI1MTQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // the same as the user that submitted the original request so we can skip security here.\n          \n          \n            \n                                // the same as the user that submitted the original request so no additional checks are needed here.", "url": "https://github.com/elastic/elasticsearch/pull/59693#discussion_r456251425", "createdAt": "2020-07-17T06:48:20Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -269,8 +269,14 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                     listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n                 }\n             } else if (isAsyncRelatedAction(action)) {\n-                //index-level permissions are handled by the search action that is triggered internally by the submit API.\n-                listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n+                if (SubmitAsyncSearchAction.NAME.equals(action)) {\n+                    // authorize submit async search but don't fill in the DLS/FLS permissions\n+                    listener.onResponse(new IndexAuthorizationResult(true, null));\n+                } else {\n+                    // async-search actions other than submit have a custom security layer that checks if the current user is\n+                    // the same as the user that submitted the original request so we can skip security here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f2fe7c6870c9c55358124e61330560d6d0f2c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjAxNjI3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0OTo0OFrOGzHaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjo0OTo0OFrOGzHaew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI1MjAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // authorize submit async search but don't fill in the DLS/FLS permissions\n          \n          \n            \n                                // authorize submit async search but don't fill in the DLS/FLS permissions\n          \n          \n            \n                                // the null IndicesAccessControl parameter indicates that this action has *not* determined \n          \n          \n            \n                                // which DLS/FLS controls should be applied to this action", "url": "https://github.com/elastic/elasticsearch/pull/59693#discussion_r456252027", "createdAt": "2020-07-17T06:49:48Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -269,8 +269,14 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                     listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n                 }\n             } else if (isAsyncRelatedAction(action)) {\n-                //index-level permissions are handled by the search action that is triggered internally by the submit API.\n-                listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n+                if (SubmitAsyncSearchAction.NAME.equals(action)) {\n+                    // authorize submit async search but don't fill in the DLS/FLS permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995f2fe7c6870c9c55358124e61330560d6d0f2c"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2250, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}