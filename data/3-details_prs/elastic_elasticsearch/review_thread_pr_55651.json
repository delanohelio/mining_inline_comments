{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzgzNDAw", "number": 55651, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMjo0NlrOD1TgOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMjo0NlrOD1TgOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjIwNjY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchMaintenanceService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozMjo0NlrOGKrRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNDowMFrOGK4vtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NzkyMw==", "bodyText": "Just a suggestion, I'm unsure, but would it be possible to use the lifecyle state that comes with AbstractLifecycleComponent now instead of this internal isClosed flag? To me it looks AbstractLifecycleComponent#close() moves the state to CLOSED before calling doClose() here. Please ignore if I'm wrong, would like to understand the difference in that case.", "url": "https://github.com/elastic/elasticsearch/pull/55651#discussion_r413847923", "createdAt": "2020-04-23T14:32:46Z", "author": {"login": "cbuescher"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchMaintenanceService.java", "diffHunk": "@@ -54,16 +58,34 @@\n     private final AtomicBoolean isClosed = new AtomicBoolean(false);\n     private volatile Scheduler.Cancellable cancellable;\n \n-    AsyncSearchMaintenanceService(String localNodeId,\n+    AsyncSearchMaintenanceService(ClusterService clusterService,\n+                                  String localNodeId,\n                                   Settings nodeSettings,\n                                   ThreadPool threadPool,\n                                   AsyncSearchIndexService indexService) {\n+        this.clusterService = clusterService;\n         this.localNodeId = localNodeId;\n         this.threadPool = threadPool;\n         this.indexService = indexService;\n         this.delay = ASYNC_SEARCH_CLEANUP_INTERVAL_SETTING.get(nodeSettings);\n     }\n \n+    @Override\n+    protected void doStart() {\n+        clusterService.addListener(this);\n+    }\n+\n+    @Override\n+    protected void doStop() {\n+        stopInternal();\n+    }\n+\n+    @Override\n+    protected void doClose() throws IOException {\n+        stopInternal();\n+        isClosed.compareAndSet(false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82337443ba306ca9c958d19d2df32c8111728e99"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2ODY2MA==", "bodyText": "That's a good suggestion, I pushed another commit to apply the change that you're suggesting.", "url": "https://github.com/elastic/elasticsearch/pull/55651#discussion_r414068660", "createdAt": "2020-04-23T19:34:00Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchMaintenanceService.java", "diffHunk": "@@ -54,16 +58,34 @@\n     private final AtomicBoolean isClosed = new AtomicBoolean(false);\n     private volatile Scheduler.Cancellable cancellable;\n \n-    AsyncSearchMaintenanceService(String localNodeId,\n+    AsyncSearchMaintenanceService(ClusterService clusterService,\n+                                  String localNodeId,\n                                   Settings nodeSettings,\n                                   ThreadPool threadPool,\n                                   AsyncSearchIndexService indexService) {\n+        this.clusterService = clusterService;\n         this.localNodeId = localNodeId;\n         this.threadPool = threadPool;\n         this.indexService = indexService;\n         this.delay = ASYNC_SEARCH_CLEANUP_INTERVAL_SETTING.get(nodeSettings);\n     }\n \n+    @Override\n+    protected void doStart() {\n+        clusterService.addListener(this);\n+    }\n+\n+    @Override\n+    protected void doStop() {\n+        stopInternal();\n+    }\n+\n+    @Override\n+    protected void doClose() throws IOException {\n+        stopInternal();\n+        isClosed.compareAndSet(false, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NzkyMw=="}, "originalCommit": {"oid": "82337443ba306ca9c958d19d2df32c8111728e99"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2687, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}