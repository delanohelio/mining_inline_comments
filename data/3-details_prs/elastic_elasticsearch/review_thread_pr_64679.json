{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDEyNDgw", "number": 64679, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1ODo1M1rOE2BS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowMzoxMFrOE2BY8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDc5NzY4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1ODo1M1rOHune5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1ODo1M1rOHune5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MzQzMQ==", "bodyText": "Yes! thanks for configuring this \u2764\ufe0f", "url": "https://github.com/elastic/elasticsearch/pull/64679#discussion_r518643431", "createdAt": "2020-11-06T09:58:53Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleRequest;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleResponse;\n+import org.elasticsearch.xpack.core.ilm.IndexLifecycleExplainResponse;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.elasticsearch.xpack.core.ilm.action.ExplainLifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.action.PutLifecycleAction;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.junit.After;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class ILMMultiNodeIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class, IndexLifecycle.class);\n+    }\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n+            .put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, \"1s\")\n+            // This just generates less churn and makes it easier to read the log file if needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgxMzI5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowMzoxMFrOHunovA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowMzoxMFrOHunovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTk0OA==", "bodyText": "should we lift this into EsIntegTestCase.cleanUpCluster? Maybe in a follow-up PR?", "url": "https://github.com/elastic/elasticsearch/pull/64679#discussion_r518645948", "createdAt": "2020-11-06T10:03:10Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleRequest;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleResponse;\n+import org.elasticsearch.xpack.core.ilm.IndexLifecycleExplainResponse;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.elasticsearch.xpack.core.ilm.action.ExplainLifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.action.PutLifecycleAction;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.junit.After;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class ILMMultiNodeIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class, IndexLifecycle.class);\n+    }\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n+            .put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, \"1s\")\n+            // This just generates less churn and makes it easier to read the log file if needed\n+            .put(LifecycleSettings.LIFECYCLE_HISTORY_INDEX_ENABLED, false)\n+            .build();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        try {\n+            client().execute(DeleteDataStreamAction.INSTANCE, new DeleteDataStreamAction.Request(new String[]{index})).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3186, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}