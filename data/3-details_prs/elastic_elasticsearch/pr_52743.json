{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDA2NTY0", "number": 52743, "title": "Delegate toXContent logic from ClusterState to its member classes #48218", "bodyText": "This is a continuation of PR #48924, but to approach the problem in the recommended direction,  as that  PR has too many commits to cleanly show the changes.\nMetaData.toXContent is already parameterized as it checks for API context for certain serializations. Hence I\u2019ve organized the 4 commits in that PR as follows:\n\nAdd API and Gateway serialization tests for complex ClusterState and MetaData objects without modifying production code\nCopy over ClusterState.toXContent serialization test metadata section to  MetaData.toXContent API serialization tests to highlight the difference and setup baseline\nParameterize MetaData.toXContent further and have its serialization under API context to be as close as possible to ClusterState.\n\nNote that as the updates to existing serialization test cases show, there are inconsistencies of serializations under API context.\nWe can pick and choose which serializaton scheme we actually want, and which one should no longer be supported under API context.\n\n\nReplace ClusterState.toXContent metadata section with parameterized MetaData.toXContent", "createdAt": "2020-02-25T07:17:04Z", "url": "https://github.com/elastic/elasticsearch/pull/52743", "merged": true, "mergeCommit": {"oid": "dc0d35eacd2bcb63e0222bedc8b85a3793fa649b"}, "closed": true, "closedAt": "2020-03-25T13:53:01Z", "author": {"login": "zacharymorn"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF6WaugH2gAyMzc5NDA2NTY0OjQyMmRhZGIwZDJlYmU1ZjIzZWFlZmU3MzQ3NmJiZWM0MWU2MDUzZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRHvJxAFqTM4MTE1ODIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "422dadb0d2ebe5f23eaefe73476bbec41e6053f7", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/422dadb0d2ebe5f23eaefe73476bbec41e6053f7", "committedDate": "2020-02-19T17:54:41Z", "message": "Add serialization tests for ClusterState and MetaData toXContent methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072e05d370f464ec8582d55c7c26bb8199b58735", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/072e05d370f464ec8582d55c7c26bb8199b58735", "committedDate": "2020-02-19T18:32:42Z", "message": "Copy over ClusterState.toXContent serialization test metadata section to MetaData.toXContent serialization test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734d5a744b709ccf00d3205b421855f6adbc1ada", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/734d5a744b709ccf00d3205b421855f6adbc1ada", "committedDate": "2020-02-25T06:02:38Z", "message": "Parameterize classes to emit different serialization based on API vs. Gateway context.\n\nNote that as the updates to existing serialization test cases show, there are inconsistencies of serializations under API context.\nWe can pick and choose which serializaton scheme we actually want, and which one should no longer be supported under API context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/b021eac9a37e425602e9067cd19a08b17377b3c7", "committedDate": "2020-02-25T06:51:32Z", "message": "Substitue ClusterState.toXContent metadata serialization logic with MetaData.toXContent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzU4NDM1", "url": "https://github.com/elastic/elasticsearch/pull/52743#pullrequestreview-367758435", "createdAt": "2020-03-03T07:46:36Z", "commit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzo0NjozN1rOFw7IqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzo0NjozN1rOFw7IqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0NDg0MQ==", "bodyText": "can you add this as a static field to this class and call it API_PARAMS?", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r386844841", "createdAt": "2020-03-03T07:46:37Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterState.java", "diffHunk": "@@ -418,104 +414,15 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n             builder.endObject();\n         }\n \n-        // meta data\n-        if (metrics.contains(Metric.METADATA)) {\n-            builder.startObject(\"metadata\");\n-            builder.field(\"cluster_uuid\", metaData().clusterUUID());\n-\n-            builder.startObject(\"cluster_coordination\");\n-            coordinationMetaData().toXContent(builder, params);\n-            builder.endObject();\n-\n-            builder.startObject(\"templates\");\n-            for (ObjectCursor<IndexTemplateMetaData> cursor : metaData().templates().values()) {\n-                IndexTemplateMetaData templateMetaData = cursor.value;\n-                builder.startObject(templateMetaData.name());\n-\n-                builder.field(\"index_patterns\", templateMetaData.patterns());\n-                builder.field(\"order\", templateMetaData.order());\n-\n-                builder.startObject(\"settings\");\n-                Settings settings = templateMetaData.settings();\n-                settings.toXContent(builder, params);\n-                builder.endObject();\n-\n-                builder.startObject(\"mappings\");\n-                for (ObjectObjectCursor<String, CompressedXContent> cursor1 : templateMetaData.mappings()) {\n-                    Map<String, Object> mapping = XContentHelper.convertToMap(new BytesArray(cursor1.value.uncompressed()), false).v2();\n-                    if (mapping.size() == 1 && mapping.containsKey(cursor1.key)) {\n-                        // the type name is the root value, reduce it\n-                        mapping = (Map<String, Object>) mapping.get(cursor1.key);\n-                    }\n-                    builder.field(cursor1.key);\n-                    builder.map(mapping);\n-                }\n-                builder.endObject();\n \n+        Map<String, String> mapParams = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzU5NDkx", "url": "https://github.com/elastic/elasticsearch/pull/52743#pullrequestreview-367759491", "createdAt": "2020-03-03T07:48:51Z", "commit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzo0ODo1MVrOFw7L4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODowMzoyMVrOFw7hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0NTY2NA==", "bodyText": "should we just pass on params instead of just extracting flat_settings?", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r386845664", "createdAt": "2020-03-03T07:48:51Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java", "diffHunk": "@@ -1186,48 +1187,89 @@ public IndexMetaData build() {\n         }\n \n         public static void toXContent(IndexMetaData indexMetaData, XContentBuilder builder, ToXContent.Params params) throws IOException {\n+            MetaData.XContentContext context = MetaData.XContentContext.valueOf(params.param(CONTEXT_MODE_PARAM, \"API\"));\n+\n             builder.startObject(indexMetaData.getIndex().getName());\n \n             builder.field(KEY_VERSION, indexMetaData.getVersion());\n             builder.field(KEY_MAPPING_VERSION, indexMetaData.getMappingVersion());\n             builder.field(KEY_SETTINGS_VERSION, indexMetaData.getSettingsVersion());\n             builder.field(KEY_ALIASES_VERSION, indexMetaData.getAliasesVersion());\n             builder.field(KEY_ROUTING_NUM_SHARDS, indexMetaData.getRoutingNumShards());\n+\n             builder.field(KEY_STATE, indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));\n \n             boolean binary = params.paramAsBoolean(\"binary\", false);\n \n             builder.startObject(KEY_SETTINGS);\n-            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap(\"flat_settings\", \"true\")));\n+            if (context != MetaData.XContentContext.API) {\n+                indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap(\"flat_settings\", \"true\")));\n+            }\n+            else {\n+                indexMetaData.getSettings()\n+                    .toXContent(builder, new MapParams(Collections.singletonMap(\"flat_settings\", params.param(\"flat_settings\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0NTg5OQ==", "bodyText": "please put the else on the same line as closing bracket (same for other occurrences in this PR)", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r386845899", "createdAt": "2020-03-03T07:49:29Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java", "diffHunk": "@@ -1186,48 +1187,89 @@ public IndexMetaData build() {\n         }\n \n         public static void toXContent(IndexMetaData indexMetaData, XContentBuilder builder, ToXContent.Params params) throws IOException {\n+            MetaData.XContentContext context = MetaData.XContentContext.valueOf(params.param(CONTEXT_MODE_PARAM, \"API\"));\n+\n             builder.startObject(indexMetaData.getIndex().getName());\n \n             builder.field(KEY_VERSION, indexMetaData.getVersion());\n             builder.field(KEY_MAPPING_VERSION, indexMetaData.getMappingVersion());\n             builder.field(KEY_SETTINGS_VERSION, indexMetaData.getSettingsVersion());\n             builder.field(KEY_ALIASES_VERSION, indexMetaData.getAliasesVersion());\n             builder.field(KEY_ROUTING_NUM_SHARDS, indexMetaData.getRoutingNumShards());\n+\n             builder.field(KEY_STATE, indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));\n \n             boolean binary = params.paramAsBoolean(\"binary\", false);\n \n             builder.startObject(KEY_SETTINGS);\n-            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap(\"flat_settings\", \"true\")));\n+            if (context != MetaData.XContentContext.API) {\n+                indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap(\"flat_settings\", \"true\")));\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MDYxMw==", "bodyText": "I think we should remove that static method (MetaData.Builder.toXContent) which seems to be only used by this test.\nInstead, we should test both API and non-API serialization in this class, and non-API deserialization.", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r386850613", "createdAt": "2020-03-03T08:01:54Z", "author": {"login": "ywelsch"}, "path": "server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java", "diffHunk": "@@ -246,13 +245,19 @@ public void testSimpleJsonFromAndTo() throws IOException {\n         assertThat(indexMetaData.mapping().source().string(), equalTo(MAPPING_SOURCE1));\n         assertThat(indexMetaData.getAliases().size(), equalTo(3));\n         assertThat(indexMetaData.getAliases().get(\"alias1\").alias(), equalTo(\"alias1\"));\n-        assertThat(indexMetaData.getAliases().get(\"alias1\").filter().string(), equalTo(ALIAS_FILTER1));\n+        // By default, MetaData.Builder.toXContent(metaData) will use ToXContent.EMPTY_PARAMS, which generates the same serialization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MTIwMg==", "bodyText": "why did you add deserialization code here?\nIs it because we are testing API deserialization somewhere? If so, I would rather have the tests changed to test non-API deserialization.\nSame comment of other places below.", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r386851202", "createdAt": "2020-03-03T08:03:21Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java", "diffHunk": "@@ -1318,7 +1360,21 @@ public static IndexMetaData fromXContent(XContentParser parser) throws IOExcepti\n                                 throw new IllegalArgumentException(\"Unexpected token: \" + token);\n                             }\n                         }\n-                    } else if (\"warmers\".equals(currentFieldName)) {\n+                    } else if (KEY_PRIMARY_TERMS.equals(currentFieldName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/958d41a75792ff3cbe443e1c35c5c701cfcd9526", "committedDate": "2020-03-20T02:14:48Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjQyODky", "url": "https://github.com/elastic/elasticsearch/pull/52743#pullrequestreview-379242892", "createdAt": "2020-03-23T09:11:10Z", "commit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToxMToxMFrOF58Y1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1NzoxN1rOF5-F-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMjU0OQ==", "bodyText": "This mutates the global variable on every call? Certainly not what we want?", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396302549", "createdAt": "2020-03-23T09:11:10Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterState.java", "diffHunk": "@@ -418,104 +420,13 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n             builder.endObject();\n         }\n \n-        // meta data\n-        if (metrics.contains(Metric.METADATA)) {\n-            builder.startObject(\"metadata\");\n-            builder.field(\"cluster_uuid\", metaData().clusterUUID());\n-\n-            builder.startObject(\"cluster_coordination\");\n-            coordinationMetaData().toXContent(builder, params);\n-            builder.endObject();\n-\n-            builder.startObject(\"templates\");\n-            for (ObjectCursor<IndexTemplateMetaData> cursor : metaData().templates().values()) {\n-                IndexTemplateMetaData templateMetaData = cursor.value;\n-                builder.startObject(templateMetaData.name());\n-\n-                builder.field(\"index_patterns\", templateMetaData.patterns());\n-                builder.field(\"order\", templateMetaData.order());\n-\n-                builder.startObject(\"settings\");\n-                Settings settings = templateMetaData.settings();\n-                settings.toXContent(builder, params);\n-                builder.endObject();\n-\n-                builder.startObject(\"mappings\");\n-                for (ObjectObjectCursor<String, CompressedXContent> cursor1 : templateMetaData.mappings()) {\n-                    Map<String, Object> mapping = XContentHelper.convertToMap(new BytesArray(cursor1.value.uncompressed()), false).v2();\n-                    if (mapping.size() == 1 && mapping.containsKey(cursor1.key)) {\n-                        // the type name is the root value, reduce it\n-                        mapping = (Map<String, Object>) mapping.get(cursor1.key);\n-                    }\n-                    builder.field(cursor1.key);\n-                    builder.map(mapping);\n-                }\n-                builder.endObject();\n-\n-\n-                builder.endObject();\n-            }\n-            builder.endObject();\n-\n-            builder.startObject(\"indices\");\n-            for (IndexMetaData indexMetaData : metaData()) {\n-                builder.startObject(indexMetaData.getIndex().getName());\n-\n-                builder.field(\"state\", indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));\n-\n-                builder.startObject(\"settings\");\n-                Settings settings = indexMetaData.getSettings();\n-                settings.toXContent(builder, params);\n-                builder.endObject();\n-\n-                builder.startObject(\"mappings\");\n-                MappingMetaData mmd = indexMetaData.mapping();\n-                if (mmd != null) {\n-                    Map<String, Object> mapping = XContentHelper\n-                            .convertToMap(new BytesArray(mmd.source().uncompressed()), false).v2();\n-                    if (mapping.size() == 1 && mapping.containsKey(mmd.type())) {\n-                        // the type name is the root value, reduce it\n-                        mapping = (Map<String, Object>) mapping.get(mmd.type());\n-                    }\n-                    builder.field(mmd.type());\n-                    builder.map(mapping);\n-                }\n-                builder.endObject();\n \n-                builder.startArray(\"aliases\");\n-                for (ObjectCursor<String> cursor : indexMetaData.getAliases().keys()) {\n-                    builder.value(cursor.value);\n-                }\n-                builder.endArray();\n-\n-                builder.startObject(IndexMetaData.KEY_PRIMARY_TERMS);\n-                for (int shard = 0; shard < indexMetaData.getNumberOfShards(); shard++) {\n-                    builder.field(Integer.toString(shard), indexMetaData.primaryTerm(shard));\n-                }\n-                builder.endObject();\n-\n-                builder.startObject(IndexMetaData.KEY_IN_SYNC_ALLOCATIONS);\n-                for (IntObjectCursor<Set<String>> cursor : indexMetaData.getInSyncAllocationIds()) {\n-                    builder.startArray(String.valueOf(cursor.key));\n-                    for (String allocationId : cursor.value) {\n-                        builder.value(allocationId);\n-                    }\n-                    builder.endArray();\n-                }\n-                builder.endObject();\n+        API_PARAMS.put(\"flat_settings\", params.param(\"flat_settings\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwNTU5MA==", "bodyText": "Instead of passing down a limited set of parameters here, I wonder if we should pass all of them, but additionally inject the API context.\nGiven that Metadata is already using API context as default, I wonder if we need to do anything here in this class. Perhaps it's sufficient to just pass down the params as is?", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396305590", "createdAt": "2020-03-23T09:16:40Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/ClusterState.java", "diffHunk": "@@ -418,104 +420,13 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n             builder.endObject();\n         }\n \n-        // meta data\n-        if (metrics.contains(Metric.METADATA)) {\n-            builder.startObject(\"metadata\");\n-            builder.field(\"cluster_uuid\", metaData().clusterUUID());\n-\n-            builder.startObject(\"cluster_coordination\");\n-            coordinationMetaData().toXContent(builder, params);\n-            builder.endObject();\n-\n-            builder.startObject(\"templates\");\n-            for (ObjectCursor<IndexTemplateMetaData> cursor : metaData().templates().values()) {\n-                IndexTemplateMetaData templateMetaData = cursor.value;\n-                builder.startObject(templateMetaData.name());\n-\n-                builder.field(\"index_patterns\", templateMetaData.patterns());\n-                builder.field(\"order\", templateMetaData.order());\n-\n-                builder.startObject(\"settings\");\n-                Settings settings = templateMetaData.settings();\n-                settings.toXContent(builder, params);\n-                builder.endObject();\n-\n-                builder.startObject(\"mappings\");\n-                for (ObjectObjectCursor<String, CompressedXContent> cursor1 : templateMetaData.mappings()) {\n-                    Map<String, Object> mapping = XContentHelper.convertToMap(new BytesArray(cursor1.value.uncompressed()), false).v2();\n-                    if (mapping.size() == 1 && mapping.containsKey(cursor1.key)) {\n-                        // the type name is the root value, reduce it\n-                        mapping = (Map<String, Object>) mapping.get(cursor1.key);\n-                    }\n-                    builder.field(cursor1.key);\n-                    builder.map(mapping);\n-                }\n-                builder.endObject();\n-\n-\n-                builder.endObject();\n-            }\n-            builder.endObject();\n-\n-            builder.startObject(\"indices\");\n-            for (IndexMetaData indexMetaData : metaData()) {\n-                builder.startObject(indexMetaData.getIndex().getName());\n-\n-                builder.field(\"state\", indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));\n-\n-                builder.startObject(\"settings\");\n-                Settings settings = indexMetaData.getSettings();\n-                settings.toXContent(builder, params);\n-                builder.endObject();\n-\n-                builder.startObject(\"mappings\");\n-                MappingMetaData mmd = indexMetaData.mapping();\n-                if (mmd != null) {\n-                    Map<String, Object> mapping = XContentHelper\n-                            .convertToMap(new BytesArray(mmd.source().uncompressed()), false).v2();\n-                    if (mapping.size() == 1 && mapping.containsKey(mmd.type())) {\n-                        // the type name is the root value, reduce it\n-                        mapping = (Map<String, Object>) mapping.get(mmd.type());\n-                    }\n-                    builder.field(mmd.type());\n-                    builder.map(mapping);\n-                }\n-                builder.endObject();\n \n-                builder.startArray(\"aliases\");\n-                for (ObjectCursor<String> cursor : indexMetaData.getAliases().keys()) {\n-                    builder.value(cursor.value);\n-                }\n-                builder.endArray();\n-\n-                builder.startObject(IndexMetaData.KEY_PRIMARY_TERMS);\n-                for (int shard = 0; shard < indexMetaData.getNumberOfShards(); shard++) {\n-                    builder.field(Integer.toString(shard), indexMetaData.primaryTerm(shard));\n-                }\n-                builder.endObject();\n-\n-                builder.startObject(IndexMetaData.KEY_IN_SYNC_ALLOCATIONS);\n-                for (IntObjectCursor<Set<String>> cursor : indexMetaData.getInSyncAllocationIds()) {\n-                    builder.startArray(String.valueOf(cursor.key));\n-                    for (String allocationId : cursor.value) {\n-                        builder.value(allocationId);\n-                    }\n-                    builder.endArray();\n-                }\n-                builder.endObject();\n+        API_PARAMS.put(\"flat_settings\", params.param(\"flat_settings\"));\n+        API_PARAMS.put(\"reduce_mappings\", params.param(\"reduce_mappings\"));\n \n-                // index metadata\n-                builder.endObject();\n-            }\n-            builder.endObject();\n-\n-            for (ObjectObjectCursor<String, MetaData.Custom> cursor : metaData.customs()) {\n-                builder.startObject(cursor.key);\n-                cursor.value.toXContent(builder, params);\n-                builder.endObject();\n-            }\n-\n-            builder.endObject();\n+        // meta data\n+        if (metrics.contains(Metric.METADATA)) {\n+            metaData.toXContent(builder, new ToXContent.MapParams(API_PARAMS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwNzY0NQ==", "bodyText": "I think we should avoid being able to read back the API-serialized XContent. There is no requirement to do so, and it introduces leniency in the parsing here, with the possibility of silently hiding bugs where the wrong context is chosen for serialization.", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396307645", "createdAt": "2020-03-23T09:20:16Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java", "diffHunk": "@@ -1318,7 +1360,21 @@ public static IndexMetaData fromXContent(XContentParser parser) throws IOExcepti\n                                 throw new IllegalArgumentException(\"Unexpected token: \" + token);\n                             }\n                         }\n-                    } else if (\"warmers\".equals(currentFieldName)) {\n+                    } else if (KEY_PRIMARY_TERMS.equals(currentFieldName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1MTIwMg=="}, "originalCommit": {"oid": "b021eac9a37e425602e9067cd19a08b17377b3c7"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwOTI5Mw==", "bodyText": "Use CONTEXT_MODE_API constant here?", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396309293", "createdAt": "2020-03-23T09:23:06Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1270,28 +1270,26 @@ public MetaData build() {\n             return aliasAndIndexLookup;\n         }\n \n-        public static String toXContent(MetaData metaData) throws IOException {\n-            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);\n-            builder.startObject();\n-            toXContent(metaData, builder, ToXContent.EMPTY_PARAMS);\n-            builder.endObject();\n-            return Strings.toString(builder);\n-        }\n-\n         public static void toXContent(MetaData metaData, XContentBuilder builder, ToXContent.Params params) throws IOException {\n             XContentContext context = XContentContext.valueOf(params.param(CONTEXT_MODE_PARAM, \"API\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyODIzMQ==", "bodyText": "I'm not sure I understand this comment? Is it outdated?", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396328231", "createdAt": "2020-03-23T09:53:44Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1270,28 +1270,26 @@ public MetaData build() {\n             return aliasAndIndexLookup;\n         }\n \n-        public static String toXContent(MetaData metaData) throws IOException {\n-            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);\n-            builder.startObject();\n-            toXContent(metaData, builder, ToXContent.EMPTY_PARAMS);\n-            builder.endObject();\n-            return Strings.toString(builder);\n-        }\n-\n         public static void toXContent(MetaData metaData, XContentBuilder builder, ToXContent.Params params) throws IOException {\n             XContentContext context = XContentContext.valueOf(params.param(CONTEXT_MODE_PARAM, \"API\"));\n \n-            builder.startObject(\"meta-data\");\n+            if (context == XContentContext.API) {\n+                builder.startObject(\"metadata\");\n+            }\n+            else {\n+                builder.startObject(\"meta-data\");\n+                builder.field(\"version\", metaData.version());\n+            }\n \n-            builder.field(\"version\", metaData.version());\n             builder.field(\"cluster_uuid\", metaData.clusterUUID);\n+            // This is required for some serialization under API context, as some tests in MetaDataTests assert its presenc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyOTA1NA==", "bodyText": "As commented above, let's remove the lenient parsing here.", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396329054", "createdAt": "2020-03-23T09:55:00Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1347,7 +1345,8 @@ public static MetaData fromXContent(XContentParser parser, boolean preserveUnkno\n                 currentFieldName = parser.currentName();\n             }\n \n-            if (!\"meta-data\".equals(parser.currentName())) {\n+            if (!\"meta-data\".equals(parser.currentName()) &&\n+                !\"metadata\".equals(parser.currentName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMzMDQ5MQ==", "bodyText": "move these elses up (lot's of other occurrences in this file)", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r396330491", "createdAt": "2020-03-23T09:57:17Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java", "diffHunk": "@@ -1352,7 +1404,13 @@ public static IndexMetaData fromXContent(XContentParser parser) throws IOExcepti\n                             }\n                         }\n                         builder.primaryTerms(list.toArray());\n-                    } else {\n+                    }\n+                    else if (KEY_ALIASES.equals(currentFieldName)) {\n+                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n+                            builder.putAlias(AliasMetaData.builder(parser.text()).build());\n+                        }\n+                    }\n+                    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "958d41a75792ff3cbe443e1c35c5c701cfcd9526"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "089d7a308bb3d5baa7a87a4a909c2f2e3e6d893c", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/089d7a308bb3d5baa7a87a4a909c2f2e3e6d893c", "committedDate": "2020-03-23T23:37:40Z", "message": "Address comments to place else on the same line, and pass down entire params from ClusterState to MetaData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c11613501e979d9202a1f6fa7dda3aca4b69b72", "author": {"user": {"login": "zacharymorn", "name": "zacharymorn"}}, "url": "https://github.com/elastic/elasticsearch/commit/0c11613501e979d9202a1f6fa7dda3aca4b69b72", "committedDate": "2020-03-24T01:24:08Z", "message": "Remove lenient deserialization parsing for API-serialized XContent, as well as the tests that get broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977a4284c57bb0ab2bc4fbc18c62ac66ce0a1150", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/977a4284c57bb0ab2bc4fbc18c62ac66ce0a1150", "committedDate": "2020-03-24T07:35:59Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "608d627328d21345d400bab5e4d526c312de8009", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/608d627328d21345d400bab5e4d526c312de8009", "committedDate": "2020-03-24T08:06:23Z", "message": "Merge remote-tracking branch 'elastic/master' into pr/52743"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae97011a09e7c94412811d1e0cb489cb80c3406c", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/ae97011a09e7c94412811d1e0cb489cb80c3406c", "committedDate": "2020-03-24T08:20:18Z", "message": "fix merge issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db900412d7c82902ac756417fd01304b2b77fb93", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/db900412d7c82902ac756417fd01304b2b77fb93", "committedDate": "2020-03-24T09:01:13Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76564f98e3bdb2bb883f74e4491ee690e273b45f", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/76564f98e3bdb2bb883f74e4491ee690e273b45f", "committedDate": "2020-03-24T09:50:01Z", "message": "undo more changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a30a36dbda6b2b89658e4d8736a04357bf05fa8", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/7a30a36dbda6b2b89658e4d8736a04357bf05fa8", "committedDate": "2020-03-24T10:57:41Z", "message": "Fix alias filter parsing and test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e99f60acc4cce806d631671ac7cf6686f3337c5f", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/e99f60acc4cce806d631671ac7cf6686f3337c5f", "committedDate": "2020-03-24T11:28:45Z", "message": "Remove transient settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1eb05a4828607ccd42e85269eaa36e66a3147b9", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/b1eb05a4828607ccd42e85269eaa36e66a3147b9", "committedDate": "2020-03-24T11:38:16Z", "message": "always print indices in API mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc4f3177d94b9f22f07d80a0d17f1cd60426090c", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/cc4f3177d94b9f22f07d80a0d17f1cd60426090c", "committedDate": "2020-03-24T13:47:48Z", "message": "Merge remote-tracking branch 'elastic/master' into pr/52743"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fe6cea443fd8347465ad5b1691051964cc09e12", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/3fe6cea443fd8347465ad5b1691051964cc09e12", "committedDate": "2020-03-24T13:48:50Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7235ade03b41617408d0a568856e9c2b07b5d24f", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/7235ade03b41617408d0a568856e9c2b07b5d24f", "committedDate": "2020-03-24T16:10:11Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODA1NTM5", "url": "https://github.com/elastic/elasticsearch/pull/52743#pullrequestreview-380805539", "createdAt": "2020-03-25T01:31:12Z", "commit": {"oid": "977a4284c57bb0ab2bc4fbc18c62ac66ce0a1150"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTozMToxMlrOF7JGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTozMToxMlrOF7JGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1OTQyNw==", "bodyText": "Didn't realize we could use this to save the tests, good to know!", "url": "https://github.com/elastic/elasticsearch/pull/52743#discussion_r397559427", "createdAt": "2020-03-25T01:31:12Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java", "diffHunk": "@@ -1451,7 +1452,13 @@ public static Settings addHumanReadableSettings(Settings settings) {\n         return builder.build();\n     }\n \n-    private static final ToXContent.Params FORMAT_PARAMS = new MapParams(Collections.singletonMap(\"binary\", \"true\"));\n+    private static final ToXContent.Params FORMAT_PARAMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "977a4284c57bb0ab2bc4fbc18c62ac66ce0a1150"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8286d56c0c13b5f82cfa417754148d6fbe435b", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/af8286d56c0c13b5f82cfa417754148d6fbe435b", "committedDate": "2020-03-25T08:05:53Z", "message": "Merge remote-tracking branch 'elastic/master' into pr/52743"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65601162d3de68e84aa2deb144d540053dade591", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/65601162d3de68e84aa2deb144d540053dade591", "committedDate": "2020-03-25T09:55:28Z", "message": "More test fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c7a30819af844aef9faf82039d9f72a9fdb62a3", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/8c7a30819af844aef9faf82039d9f72a9fdb62a3", "committedDate": "2020-03-25T10:48:04Z", "message": "one more test to fix after merging master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8567d919a7b1d76a2d5a5fb4ada638f8323f65fa", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/8567d919a7b1d76a2d5a5fb4ada638f8323f65fa", "committedDate": "2020-03-25T12:13:48Z", "message": "more fixes yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b31b496fbb83ca889ebaecb27fbc4a8decdfa7", "author": {"user": {"login": "ywelsch", "name": "Yannick Welsch"}}, "url": "https://github.com/elastic/elasticsearch/commit/51b31b496fbb83ca889ebaecb27fbc4a8decdfa7", "committedDate": "2020-03-25T12:49:06Z", "message": "another fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTU4MjM3", "url": "https://github.com/elastic/elasticsearch/pull/52743#pullrequestreview-381158237", "createdAt": "2020-03-25T13:43:38Z", "commit": {"oid": "51b31b496fbb83ca889ebaecb27fbc4a8decdfa7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2140, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}