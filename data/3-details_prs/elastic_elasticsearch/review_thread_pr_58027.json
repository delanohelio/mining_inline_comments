{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTUyNjU1", "number": 58027, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowMjowNlrOEFtjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowOToyMVrOEFtqZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDI0NTc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculatorTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowMjowNlrOGkEQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1NDoxNlrOGkfUOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MTY5MA==", "bodyText": "a point should have a weight of 1?", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440471690", "createdAt": "2020-06-15T22:02:06Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculatorTests.java", "diffHunk": "@@ -250,7 +258,7 @@ public void testPolygonAsPoint() {\n         CentroidCalculator calculator = new CentroidCalculator(polygon);\n         assertThat(calculator.getX(), equalTo(GeoUtils.normalizeLon(point.getX())));\n         assertThat(calculator.getY(), equalTo(GeoUtils.normalizeLat(point.getY())));\n-        assertThat(calculator.sumWeight(), equalTo(1.0));\n+        assertThat(calculator.sumWeight(), equalTo(3.0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDc1Mw==", "bodyText": "This is a bit of a fake test as we are trying to compute the centroid of a polygon which all points are the same. This is an invalid polygon and we should never get here. I think it is ok to consider in this case that the centroid is the sum of the centroid of each point. It has no practical consequences.", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440660753", "createdAt": "2020-06-16T08:01:58Z", "author": {"login": "iverase"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculatorTests.java", "diffHunk": "@@ -250,7 +258,7 @@ public void testPolygonAsPoint() {\n         CentroidCalculator calculator = new CentroidCalculator(polygon);\n         assertThat(calculator.getX(), equalTo(GeoUtils.normalizeLon(point.getX())));\n         assertThat(calculator.getY(), equalTo(GeoUtils.normalizeLat(point.getY())));\n-        assertThat(calculator.sumWeight(), equalTo(1.0));\n+        assertThat(calculator.sumWeight(), equalTo(3.0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MTY5MA=="}, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNTAwMw==", "bodyText": "OK", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440915003", "createdAt": "2020-06-16T14:54:16Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculatorTests.java", "diffHunk": "@@ -250,7 +258,7 @@ public void testPolygonAsPoint() {\n         CentroidCalculator calculator = new CentroidCalculator(polygon);\n         assertThat(calculator.getX(), equalTo(GeoUtils.normalizeLon(point.getX())));\n         assertThat(calculator.getY(), equalTo(GeoUtils.normalizeLat(point.getY())));\n-        assertThat(calculator.sumWeight(), equalTo(1.0));\n+        assertThat(calculator.sumWeight(), equalTo(3.0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MTY5MA=="}, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDI0OTU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowMzoyOFrOGkESuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowMzoyOFrOGkESuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MjI1MQ==", "bodyText": "good find!", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440472251", "createdAt": "2020-06-15T22:03:28Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -224,18 +224,18 @@ public Void visit(Polygon polygon) {\n \n         @Override\n         public Void visit(Rectangle rectangle) {\n-            double sumX = rectangle.getMaxX() + rectangle.getMinX();\n-            double sumY = rectangle.getMaxY() + rectangle.getMinY();\n             double diffX = rectangle.getMaxX() - rectangle.getMinX();\n             double diffY = rectangle.getMaxY() - rectangle.getMinY();\n-            if (diffX != 0 && diffY != 0) {\n-                calculator.addCoordinate(sumX / 2, sumY / 2, Math.abs(diffX * diffY), DimensionalShapeType.POLYGON);\n-            } else if (diffX != 0) {\n-                calculator.addCoordinate(sumX / 2, rectangle.getMinY(), diffX, DimensionalShapeType.LINE);\n-            } else if (diffY != 0) {\n-                calculator.addCoordinate(rectangle.getMinX(), sumY / 2, diffY, DimensionalShapeType.LINE);\n+            double rectWeight = Math.abs(diffX * diffY);\n+            if (rectWeight != 0) {\n+                double sumX = rectangle.getMaxX() + rectangle.getMinX();\n+                double sumY = rectangle.getMaxY() + rectangle.getMinY();\n+                calculator.addCoordinate(sumX / 2, sumY / 2, rectWeight, DimensionalShapeType.POLYGON);\n             } else {\n-                visitPoint(rectangle.getMinX(), rectangle.getMinY());\n+                // degenerated rectangle, transform to Line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDI2NDcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowOToyMVrOGkEb-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1NDo0MVrOGkfVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NDYxOQ==", "bodyText": "Do we believe this is right?\nIf a line segment has repeating sections where the weight is effectively zero, then we could potentially be counting multiple points per Line?", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440474619", "createdAt": "2020-06-15T22:09:21Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -246,22 +246,20 @@ private void visitPoint(double x, double y) {\n         }\n \n         private void visitLine(int length, CoordinateSupplier x, CoordinateSupplier y) {\n-            // check line has length\n-            double originDiffX = x.get(0) - x.get(1);\n-            double originDiffY = y.get(0) - y.get(1);\n-            if (originDiffX != 0 || originDiffY != 0) {\n-                // a line's centroid is calculated by summing the center of each\n-                // line segment weighted by the line segment's length in degrees\n-                for (int i = 0; i < length - 1; i++) {\n-                    double diffX = x.get(i) - x.get(i + 1);\n-                    double diffY = y.get(i) - y.get(i + 1);\n-                    double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n-                    double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n-                    double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+            // a line's centroid is calculated by summing the center of each\n+            // line segment weighted by the line segment's length in degrees\n+            for (int i = 0; i < length - 1; i++) {\n+                double diffX = x.get(i) - x.get(i + 1);\n+                double diffY = y.get(i) - y.get(i + 1);\n+                double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n+                double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n+                double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+                if (weight == 0) {\n+                    // degenerated line, it can be considered a point\n+                    visitPoint(x.get(i), y.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MjE0Ng==", "bodyText": "I think it is ok. If there is one segment with length, the centroid of the points will be discarded. If all points are equivalent, then it will be weight by the number of points. I think it is the right thing to do.", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440662146", "createdAt": "2020-06-16T08:04:26Z", "author": {"login": "iverase"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -246,22 +246,20 @@ private void visitPoint(double x, double y) {\n         }\n \n         private void visitLine(int length, CoordinateSupplier x, CoordinateSupplier y) {\n-            // check line has length\n-            double originDiffX = x.get(0) - x.get(1);\n-            double originDiffY = y.get(0) - y.get(1);\n-            if (originDiffX != 0 || originDiffY != 0) {\n-                // a line's centroid is calculated by summing the center of each\n-                // line segment weighted by the line segment's length in degrees\n-                for (int i = 0; i < length - 1; i++) {\n-                    double diffX = x.get(i) - x.get(i + 1);\n-                    double diffY = y.get(i) - y.get(i + 1);\n-                    double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n-                    double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n-                    double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+            // a line's centroid is calculated by summing the center of each\n+            // line segment weighted by the line segment's length in degrees\n+            for (int i = 0; i < length - 1; i++) {\n+                double diffX = x.get(i) - x.get(i + 1);\n+                double diffY = y.get(i) - y.get(i + 1);\n+                double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n+                double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n+                double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+                if (weight == 0) {\n+                    // degenerated line, it can be considered a point\n+                    visitPoint(x.get(i), y.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NDYxOQ=="}, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNTMzMg==", "bodyText": "OK. just wanted to be sure! thanks", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440915332", "createdAt": "2020-06-16T14:54:41Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -246,22 +246,20 @@ private void visitPoint(double x, double y) {\n         }\n \n         private void visitLine(int length, CoordinateSupplier x, CoordinateSupplier y) {\n-            // check line has length\n-            double originDiffX = x.get(0) - x.get(1);\n-            double originDiffY = y.get(0) - y.get(1);\n-            if (originDiffX != 0 || originDiffY != 0) {\n-                // a line's centroid is calculated by summing the center of each\n-                // line segment weighted by the line segment's length in degrees\n-                for (int i = 0; i < length - 1; i++) {\n-                    double diffX = x.get(i) - x.get(i + 1);\n-                    double diffY = y.get(i) - y.get(i + 1);\n-                    double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n-                    double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n-                    double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+            // a line's centroid is calculated by summing the center of each\n+            // line segment weighted by the line segment's length in degrees\n+            for (int i = 0; i < length - 1; i++) {\n+                double diffX = x.get(i) - x.get(i + 1);\n+                double diffY = y.get(i) - y.get(i + 1);\n+                double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n+                double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n+                double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+                if (weight == 0) {\n+                    // degenerated line, it can be considered a point\n+                    visitPoint(x.get(i), y.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NDYxOQ=="}, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1572, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}