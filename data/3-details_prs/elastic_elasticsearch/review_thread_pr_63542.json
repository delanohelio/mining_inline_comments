{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDU1ODQ2", "number": 63542, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyNzo0OFrOEsnExw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxMToxOVrOEsoEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjEyOTk5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcessFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyNzo0OFrOHf8lyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzozNTo0MFrOHf_B7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDYxNw==", "bodyText": "Can you use the more standard [job_id] message format here and in the other logged warnings\nLOGGER.warn(\"[{}] Interrupted while launching autodetect\", job.getId());", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503260617", "createdAt": "2020-10-12T12:27:48Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcessFactory.java", "diffHunk": "@@ -127,6 +127,9 @@ void createNativeProcess(Job job, AutodetectParams autodetectParams, ProcessPipe\n                 autodetectBuilder.quantiles(autodetectParams.quantiles());\n             }\n             autodetectBuilder.build();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            LOGGER.warn(\"Interrupted while launching autodetect for job \" + job.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwMDU5MQ==", "bodyText": "I was matching the format of the existing message from a few lines below.  But I guess I can change the pre-existing ones too.", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503300591", "createdAt": "2020-10-12T13:35:40Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcessFactory.java", "diffHunk": "@@ -127,6 +127,9 @@ void createNativeProcess(Job job, AutodetectParams autodetectParams, ProcessPipe\n                 autodetectBuilder.quantiles(autodetectParams.quantiles());\n             }\n             autodetectBuilder.build();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            LOGGER.warn(\"Interrupted while launching autodetect for job \" + job.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MDYxNw=="}, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE3NTE1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0MDoxNlrOHf9A-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0MDoxNlrOHf9A-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NzU3OQ==", "bodyText": "commandId is set in the first line of the synchronized block I don't see how it could ever be -1. Also will add a tracker to the map whatever the value of commandId", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503267579", "createdAt": "2020-10-12T12:40:16Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "diffHunk": "@@ -110,19 +130,31 @@ public void startProcess(List<String> command) throws IOException {\n             throw new ElasticsearchException(msg);\n         }\n \n-        synchronized (commandStream) {\n-            LOGGER.debug(\"Starting process with command: \" + command);\n-            commandStream.write(START_COMMAND.getBytes(StandardCharsets.UTF_8));\n-            for (String arg : command) {\n+        int commandId = -1;\n+        try {\n+            synchronized (commandStream) {\n+                commandId = nextCommandId++;\n+                setupResponseTracker(commandId);\n+                LOGGER.debug(\"Command [{}]: starting process with command {}\", commandId, command);\n+                commandStream.write(Integer.toString(commandId).getBytes(StandardCharsets.UTF_8));\n                 commandStream.write('\\t');\n-                commandStream.write(arg.getBytes(StandardCharsets.UTF_8));\n+                commandStream.write(START_COMMAND.getBytes(StandardCharsets.UTF_8));\n+                for (String arg : command) {\n+                    commandStream.write('\\t');\n+                    commandStream.write(arg.getBytes(StandardCharsets.UTF_8));\n+                }\n+                commandStream.write('\\n');\n+                commandStream.flush();\n+            }\n+            awaitCompletion(commandId);\n+        } finally {\n+            if (commandId != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI0NjA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1ODo1OFrOHf9r_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMDoyM1rOHgJJPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODU5MQ==", "bodyText": "I am curious on locking on this and not on ourResponseTracker for the entire while loop.\nIf we lock on this, that means that any other command could not be processed.\nOur commands are always handled in a single thread and could NEVER be processed out of order correct? If they are ever processed out of order, this seems like it would cause a thread lock.", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503278591", "createdAt": "2020-10-12T12:58:58Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "diffHunk": "@@ -152,4 +200,75 @@ public void stop() throws IOException {\n         // The C++ process will exit when it gets EOF on the command stream\n         commandStream.close();\n     }\n+\n+    private void setupResponseTracker(int commandId) {\n+        ResponseTracker tracker = new ResponseTracker();\n+        ResponseTracker previous = responseTrackers.put(commandId, tracker);\n+        assert previous == null;\n+    }\n+\n+    private void removeResponseTracker(int commandId) {\n+        responseTrackers.remove(commandId);\n+    }\n+\n+    private void awaitCompletion(int commandId) throws IOException, InterruptedException {\n+\n+        ResponseTracker ourResponseTracker = responseTrackers.get(commandId);\n+        assert ourResponseTracker != null;\n+\n+        // If our response has not been seen already (by another thread), parse messages under lock until it is seen.\n+        // This approach means that of all the threads waiting for controller responses, one is parsing the messages\n+        // on behalf of all of them, and the others are blocked.  When the thread that is parsing gets the response\n+        // it needs another thread will pick up the parsing.\n+        if (ourResponseTracker.hasResponded() == false) {\n+            synchronized (responseIteratorHolder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMzc1Nw==", "bodyText": "It's correct that at the moment the C++ always processes commands in order.  This may not always be the case though.\nIt's also true that in the future if two commands were processed out-of-order in the C++ then this Java code would delay one of the threads waiting for a response unnecessarily.  However, it wouldn't be a deadlock - it would just mean threads 1 and 2 would unblock on the response to command 1 (or disconnection of controller) even though thread 2 could have unblocked on the earlier response to command 2.\nSo some optimisation work could be done here if the C++ is ever modified to process commands out-of-order.\nThe actual parsing needs to synchronize on responseIteratorHolder, because only one thread can be parsing the stream at any time.  What could be done is that the other threads simply wait for their response latches on the assumption that the thread doing the parsing will count these down.  However, this is non-trivial, because if the thread doing the parsing has just decided that it can stop parsing but hasn't exited the synchronized block then no thread would be parsing.  So it would need more complex synchronization to ensure that the decision of one thread to wait for its latch instead of for the parser lock would need to be atomic with the thread currently holding the parser lock to decide to stop parsing (which is not the same as releasing the parser lock).  Rather than risk messing this up I went for the simpler approach.\nThe alternative is to have a dedicated thread for parsing responses like we do for most C++ outputs, but this seems wasteful in the case of controller where there is very low traffic and we'd be permanently hogging a thread for it.", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503433757", "createdAt": "2020-10-12T17:23:06Z", "author": {"login": "droberts195"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "diffHunk": "@@ -152,4 +200,75 @@ public void stop() throws IOException {\n         // The C++ process will exit when it gets EOF on the command stream\n         commandStream.close();\n     }\n+\n+    private void setupResponseTracker(int commandId) {\n+        ResponseTracker tracker = new ResponseTracker();\n+        ResponseTracker previous = responseTrackers.put(commandId, tracker);\n+        assert previous == null;\n+    }\n+\n+    private void removeResponseTracker(int commandId) {\n+        responseTrackers.remove(commandId);\n+    }\n+\n+    private void awaitCompletion(int commandId) throws IOException, InterruptedException {\n+\n+        ResponseTracker ourResponseTracker = responseTrackers.get(commandId);\n+        assert ourResponseTracker != null;\n+\n+        // If our response has not been seen already (by another thread), parse messages under lock until it is seen.\n+        // This approach means that of all the threads waiting for controller responses, one is parsing the messages\n+        // on behalf of all of them, and the others are blocked.  When the thread that is parsing gets the response\n+        // it needs another thread will pick up the parsing.\n+        if (ourResponseTracker.hasResponded() == false) {\n+            synchronized (responseIteratorHolder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODU5MQ=="}, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NjMwMw==", "bodyText": "\ud83d\udc4d\nThanks for the additional information. It just wasn't obvious to me :D", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503466303", "createdAt": "2020-10-12T18:30:23Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "diffHunk": "@@ -152,4 +200,75 @@ public void stop() throws IOException {\n         // The C++ process will exit when it gets EOF on the command stream\n         commandStream.close();\n     }\n+\n+    private void setupResponseTracker(int commandId) {\n+        ResponseTracker tracker = new ResponseTracker();\n+        ResponseTracker previous = responseTrackers.put(commandId, tracker);\n+        assert previous == null;\n+    }\n+\n+    private void removeResponseTracker(int commandId) {\n+        responseTrackers.remove(commandId);\n+    }\n+\n+    private void awaitCompletion(int commandId) throws IOException, InterruptedException {\n+\n+        ResponseTracker ourResponseTracker = responseTrackers.get(commandId);\n+        assert ourResponseTracker != null;\n+\n+        // If our response has not been seen already (by another thread), parse messages under lock until it is seen.\n+        // This approach means that of all the threads waiting for controller responses, one is parsing the messages\n+        // on behalf of all of them, and the others are blocked.  When the thread that is parsing gets the response\n+        // it needs another thread will pick up the parsing.\n+        if (ourResponseTracker.hasResponded() == false) {\n+            synchronized (responseIteratorHolder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODU5MQ=="}, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI5MzM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxMToxOVrOHf-Igg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxMToxOVrOHf-Igg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4NTg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (commandId != -1) {\n          \n          \n            \n                        if (awaitCompletion) {", "url": "https://github.com/elastic/elasticsearch/pull/63542#discussion_r503285890", "createdAt": "2020-10-12T13:11:19Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/NativeController.java", "diffHunk": "@@ -137,13 +169,29 @@ public void killProcess(long pid) throws TimeoutException, IOException {\n             throw new ElasticsearchException(msg);\n         }\n \n-        synchronized (commandStream) {\n-            LOGGER.debug(\"Killing process with PID: \" + pid);\n-            commandStream.write(KILL_COMMAND.getBytes(StandardCharsets.UTF_8));\n-            commandStream.write('\\t');\n-            commandStream.write(Long.toString(pid).getBytes(StandardCharsets.UTF_8));\n-            commandStream.write('\\n');\n-            commandStream.flush();\n+        int commandId = -1;\n+        try {\n+            synchronized (commandStream) {\n+                commandId = nextCommandId++;\n+                if (awaitCompletion) {\n+                    setupResponseTracker(commandId);\n+                }\n+                LOGGER.debug(\"Command [{}]: killing process with PID [{}]\", commandId, pid);\n+                commandStream.write(Integer.toString(commandId).getBytes(StandardCharsets.UTF_8));\n+                commandStream.write('\\t');\n+                commandStream.write(KILL_COMMAND.getBytes(StandardCharsets.UTF_8));\n+                commandStream.write('\\t');\n+                commandStream.write(Long.toString(pid).getBytes(StandardCharsets.UTF_8));\n+                commandStream.write('\\n');\n+                commandStream.flush();\n+            }\n+            if (awaitCompletion) {\n+                awaitCompletion(commandId);\n+            }\n+        } finally {\n+            if (commandId != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab801a296b4219ce34035960342c2e9deb6a2cb"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2931, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}