{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5ODgxNDAz", "number": 66309, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowMzoyMFrOFFUmWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowNTo0NVrOFFUsPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTI0Njk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringMigrateAlertsActionTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowMzoyMFrOIFyVFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTozMDowOVrOIF0m2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzODM4OA==", "bodyText": "These were added:\n\nTo disable security in the tests. The tests were failing because security expects the Transport client type to be a secure one, but the tests install the mock-nio client.\nTo mirror the test plugins here in transportClientPlugins so that the client in the test has the watcher and monitoring actions available on it.", "url": "https://github.com/elastic/elasticsearch/pull/66309#discussion_r542938388", "createdAt": "2020-12-15T00:03:20Z", "author": {"login": "jbaiera"}, "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringMigrateAlertsActionTests.java", "diffHunk": "@@ -0,0 +1,602 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.monitoring.action;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse;\n+import org.elasticsearch.analysis.common.CommonAnalysisPlugin;\n+import org.elasticsearch.cluster.metadata.IndexTemplateMetadata;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.http.MockRequest;\n+import org.elasticsearch.test.http.MockResponse;\n+import org.elasticsearch.test.http.MockWebServer;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsAction;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsRequest;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsResponse;\n+import org.elasticsearch.xpack.core.monitoring.exporter.MonitoringTemplateUtils;\n+import org.elasticsearch.xpack.core.watcher.transport.actions.get.GetWatchAction;\n+import org.elasticsearch.xpack.core.watcher.transport.actions.get.GetWatchRequest;\n+import org.elasticsearch.xpack.monitoring.LocalStateMonitoring;\n+import org.elasticsearch.xpack.monitoring.Monitoring;\n+import org.elasticsearch.xpack.monitoring.MonitoringService;\n+import org.elasticsearch.xpack.monitoring.exporter.ClusterAlertsUtil;\n+import org.elasticsearch.xpack.monitoring.exporter.http.HttpExporter;\n+import org.elasticsearch.xpack.monitoring.exporter.local.LocalExporter;\n+import org.elasticsearch.xpack.monitoring.test.MockClusterAlertScriptEngine;\n+import org.elasticsearch.xpack.monitoring.test.MockIngestPlugin;\n+import org.elasticsearch.xpack.monitoring.test.MonitoringIntegTestCase;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.xpack.monitoring.exporter.http.ClusterAlertHttpResource.CLUSTER_ALERT_VERSION_PARAMETERS;\n+import static org.elasticsearch.xpack.monitoring.exporter.http.WatcherExistsHttpResource.WATCHER_CHECK_PARAMETERS;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@ESIntegTestCase.ClusterScope(numDataNodes = 3)\n+public class TransportMonitoringMigrateAlertsActionTests extends MonitoringIntegTestCase {\n+\n+    private MockWebServer webServer;\n+\n+    private MockWebServer createMockWebServer() throws IOException {\n+        MockWebServer server = new MockWebServer();\n+        server.start();\n+        return server;\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> transportClientPlugins() {\n+        return Arrays.asList(LocalStateMonitoring.class, MockClusterAlertScriptEngine.TestPlugin.class,\n+            MockIngestPlugin.class, CommonAnalysisPlugin.class);\n+    }\n+\n+    @Override\n+    protected Settings transportClientSettings() {\n+        return Settings.builder().put(super.transportClientSettings())\n+            .put(XPackSettings.SECURITY_ENABLED.getKey(), false)\n+            .put(XPackSettings.WATCHER_ENABLED.getKey(), false)\n+            .build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b3dde9190900c99912c39760a12d394367f0f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0Njk0Mg==", "bodyText": "are MockIngestPlugin.class, CommonAnalysisPlugin.class needed ?", "url": "https://github.com/elastic/elasticsearch/pull/66309#discussion_r542946942", "createdAt": "2020-12-15T00:14:14Z", "author": {"login": "jakelandis"}, "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringMigrateAlertsActionTests.java", "diffHunk": "@@ -0,0 +1,602 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.monitoring.action;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse;\n+import org.elasticsearch.analysis.common.CommonAnalysisPlugin;\n+import org.elasticsearch.cluster.metadata.IndexTemplateMetadata;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.http.MockRequest;\n+import org.elasticsearch.test.http.MockResponse;\n+import org.elasticsearch.test.http.MockWebServer;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsAction;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsRequest;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsResponse;\n+import org.elasticsearch.xpack.core.monitoring.exporter.MonitoringTemplateUtils;\n+import org.elasticsearch.xpack.core.watcher.transport.actions.get.GetWatchAction;\n+import org.elasticsearch.xpack.core.watcher.transport.actions.get.GetWatchRequest;\n+import org.elasticsearch.xpack.monitoring.LocalStateMonitoring;\n+import org.elasticsearch.xpack.monitoring.Monitoring;\n+import org.elasticsearch.xpack.monitoring.MonitoringService;\n+import org.elasticsearch.xpack.monitoring.exporter.ClusterAlertsUtil;\n+import org.elasticsearch.xpack.monitoring.exporter.http.HttpExporter;\n+import org.elasticsearch.xpack.monitoring.exporter.local.LocalExporter;\n+import org.elasticsearch.xpack.monitoring.test.MockClusterAlertScriptEngine;\n+import org.elasticsearch.xpack.monitoring.test.MockIngestPlugin;\n+import org.elasticsearch.xpack.monitoring.test.MonitoringIntegTestCase;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.xpack.monitoring.exporter.http.ClusterAlertHttpResource.CLUSTER_ALERT_VERSION_PARAMETERS;\n+import static org.elasticsearch.xpack.monitoring.exporter.http.WatcherExistsHttpResource.WATCHER_CHECK_PARAMETERS;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@ESIntegTestCase.ClusterScope(numDataNodes = 3)\n+public class TransportMonitoringMigrateAlertsActionTests extends MonitoringIntegTestCase {\n+\n+    private MockWebServer webServer;\n+\n+    private MockWebServer createMockWebServer() throws IOException {\n+        MockWebServer server = new MockWebServer();\n+        server.start();\n+        return server;\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> transportClientPlugins() {\n+        return Arrays.asList(LocalStateMonitoring.class, MockClusterAlertScriptEngine.TestPlugin.class,\n+            MockIngestPlugin.class, CommonAnalysisPlugin.class);\n+    }\n+\n+    @Override\n+    protected Settings transportClientSettings() {\n+        return Settings.builder().put(super.transportClientSettings())\n+            .put(XPackSettings.SECURITY_ENABLED.getKey(), false)\n+            .put(XPackSettings.WATCHER_ENABLED.getKey(), false)\n+            .build();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzODM4OA=="}, "originalCommit": {"oid": "8c2b3dde9190900c99912c39760a12d394367f0f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NTcwNw==", "bodyText": "Nope! I took them off, along with MockClusterAlertScriptEngine.TestPlugin.class", "url": "https://github.com/elastic/elasticsearch/pull/66309#discussion_r542975707", "createdAt": "2020-12-15T01:30:09Z", "author": {"login": "jbaiera"}, "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringMigrateAlertsActionTests.java", "diffHunk": "@@ -0,0 +1,602 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.monitoring.action;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse;\n+import org.elasticsearch.analysis.common.CommonAnalysisPlugin;\n+import org.elasticsearch.cluster.metadata.IndexTemplateMetadata;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.http.MockRequest;\n+import org.elasticsearch.test.http.MockResponse;\n+import org.elasticsearch.test.http.MockWebServer;\n+import org.elasticsearch.xpack.core.XPackSettings;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsAction;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsRequest;\n+import org.elasticsearch.xpack.core.monitoring.action.MonitoringMigrateAlertsResponse;\n+import org.elasticsearch.xpack.core.monitoring.exporter.MonitoringTemplateUtils;\n+import org.elasticsearch.xpack.core.watcher.transport.actions.get.GetWatchAction;\n+import org.elasticsearch.xpack.core.watcher.transport.actions.get.GetWatchRequest;\n+import org.elasticsearch.xpack.monitoring.LocalStateMonitoring;\n+import org.elasticsearch.xpack.monitoring.Monitoring;\n+import org.elasticsearch.xpack.monitoring.MonitoringService;\n+import org.elasticsearch.xpack.monitoring.exporter.ClusterAlertsUtil;\n+import org.elasticsearch.xpack.monitoring.exporter.http.HttpExporter;\n+import org.elasticsearch.xpack.monitoring.exporter.local.LocalExporter;\n+import org.elasticsearch.xpack.monitoring.test.MockClusterAlertScriptEngine;\n+import org.elasticsearch.xpack.monitoring.test.MockIngestPlugin;\n+import org.elasticsearch.xpack.monitoring.test.MonitoringIntegTestCase;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n+import static org.elasticsearch.xpack.monitoring.exporter.http.ClusterAlertHttpResource.CLUSTER_ALERT_VERSION_PARAMETERS;\n+import static org.elasticsearch.xpack.monitoring.exporter.http.WatcherExistsHttpResource.WATCHER_CHECK_PARAMETERS;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@ESIntegTestCase.ClusterScope(numDataNodes = 3)\n+public class TransportMonitoringMigrateAlertsActionTests extends MonitoringIntegTestCase {\n+\n+    private MockWebServer webServer;\n+\n+    private MockWebServer createMockWebServer() throws IOException {\n+        MockWebServer server = new MockWebServer();\n+        server.start();\n+        return server;\n+    }\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> transportClientPlugins() {\n+        return Arrays.asList(LocalStateMonitoring.class, MockClusterAlertScriptEngine.TestPlugin.class,\n+            MockIngestPlugin.class, CommonAnalysisPlugin.class);\n+    }\n+\n+    @Override\n+    protected Settings transportClientSettings() {\n+        return Settings.builder().put(super.transportClientSettings())\n+            .put(XPackSettings.SECURITY_ENABLED.getKey(), false)\n+            .put(XPackSettings.WATCHER_ENABLED.getKey(), false)\n+            .build();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzODM4OA=="}, "originalCommit": {"oid": "8c2b3dde9190900c99912c39760a12d394367f0f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTI2MjA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/LocalStateMonitoring.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowNTo0NVrOIFyfBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowNTo0NVrOIFyfBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0MDkzNQ==", "bodyText": "Added in order to ignore watcher's feature set object which expects a client to be injected. When creating a transport client, these feature set objects are created at some point and there are no clients available to the injector to give their constructors. This results in a Guice exception.", "url": "https://github.com/elastic/elasticsearch/pull/66309#discussion_r542940935", "createdAt": "2020-12-15T00:05:45Z", "author": {"login": "jbaiera"}, "path": "x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/LocalStateMonitoring.java", "diffHunk": "@@ -50,6 +54,13 @@ protected SSLService getSslService() {\n             protected XPackLicenseState getLicenseState() {\n                 return thisVar.getLicenseState();\n             }\n+\n+            @Override\n+            public Collection<Module> createGuiceModules() {\n+                return XPackPlugin.transportClientMode(settings) ?\n+                    Collections.emptyList() :\n+                    super.createGuiceModules();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b3dde9190900c99912c39760a12d394367f0f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4590, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}