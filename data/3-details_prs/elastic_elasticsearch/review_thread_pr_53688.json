{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDA4NTQz", "number": 53688, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0Nzo1MlrODo2IFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMDowNFrODphhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU2NDM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0Nzo1MlrOF3plrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0Nzo1MlrOF3plrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NzM4OA==", "bodyText": "I think these should be ifs if we're preserving EQL's current semantics", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r393897388", "createdAt": "2020-03-17T18:47:52Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU2NzUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0ODo0OVrOF3pn2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo0ODo0OVrOF3pn2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5Nzk0Ng==", "bodyText": "This will always be an empty string, so could return early\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        start = validEndIndex;\n          \n          \n            \n                        return org.elasticsearch.xpack.ql.util.StringUtils.EMPTY;", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r393897946", "createdAt": "2020-03-17T18:48:49Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {\n+            start += length;\n+        }\n+        while (end < 0) {\n+            end += length;\n+        }\n+        int validEndIndex = length;\n+\n+        if (start > validEndIndex) {\n+            start = validEndIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU3MTAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MDowM1rOF3pqXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1MDowM1rOF3pqXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5ODU5MA==", "bodyText": "since the while would be gone, you could have negative indices, so would need to check again\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (start >= end) {\n          \n          \n            \n                    if (start < 0 || start >= end) {", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r393898590", "createdAt": "2020-03-17T18:50:03Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {\n+            start += length;\n+        }\n+        while (end < 0) {\n+            end += length;\n+        }\n+        int validEndIndex = length;\n+\n+        if (start > validEndIndex) {\n+            start = validEndIndex;\n+        }\n+        if (end > validEndIndex) {\n+            end = validEndIndex;\n+        }\n+\n+        if (start >= end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzg0MTQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowMzoxOVrOF3__qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowMzoxOVrOF3__qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2NDQ5MQ==", "bodyText": "I don't think you need validEndIndex, do you?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394264491", "createdAt": "2020-03-18T11:03:19Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {\n+            start += length;\n+        }\n+        while (end < 0) {\n+            end += length;\n+        }\n+        int validEndIndex = length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDA0OTk3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowOTo0N1rOF4CGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0ODoxM1rOF4Idfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5OTAyNg==", "bodyText": "Could this while be replaced with this simple math?\nif (end < 0) {\n   end = end - end/length * length + (end % length != 0 ? length : 0);\n}", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394299026", "createdAt": "2020-03-18T12:09:47Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {\n+            start += length;\n+        }\n+        while (end < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MjA1Nw==", "bodyText": "No so simple :)", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394372057", "createdAt": "2020-03-18T14:07:28Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {\n+            start += length;\n+        }\n+        while (end < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5OTAyNg=="}, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMzE5OQ==", "bodyText": ":-) instead of subtracting length each time and then check if the value is still negative, the formula above subtracts the entire amount once by dividing the end value by length (to see how many lengths \"fit\" in \"end\") and taking the whole part only (not also the decimals), multiplying by length and adding a possible remainder (defined as end % length).", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394403199", "createdAt": "2020-03-18T14:48:13Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        while (start < 0) {\n+            start += length;\n+        }\n+        while (end < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5OTAyNg=="}, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDExNTQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjoyOToxMFrOF4CvYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjoyOToxMFrOF4CvYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwOTQ3Mg==", "bodyText": "If there is no end, shouldn't end be treated as the end of the string itself, meaning source's length?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394309472", "createdAt": "2020-03-18T12:29:10Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.SubstringFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific substring function - similar to the one in Python.\n+ * Note this is different than the one in SQL.\n+ */\n+public class Substring extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, start, end;\n+\n+    public Substring(Source source, Expression src, Expression start, Expression end) {\n+        super(source, end != null ? Arrays.asList(src, start, end) : Arrays.asList(src, new Literal(source, 0, DataTypes.INTEGER), start));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDExOTM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozMDoyM1rOF4CyCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozMDoyM1rOF4CyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMDE1Mg==", "bodyText": "I think here you mean to use start == null, no?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394310152", "createdAt": "2020-03-18T12:30:23Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.SubstringFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific substring function - similar to the one in Python.\n+ * Note this is different than the one in SQL.\n+ */\n+public class Substring extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, start, end;\n+\n+    public Substring(Source source, Expression src, Expression start, Expression end) {\n+        super(source, end != null ? Arrays.asList(src, start, end) : Arrays.asList(src, new Literal(source, 0, DataTypes.INTEGER), start));\n+        this.source = src;\n+        this.start = end == null ? new Literal(source, 0, DataTypes.INTEGER) : start;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDEyMTY5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozMDo1N1rOF4CzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozMDo1N1rOF4CzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMDQ5NA==", "bodyText": "If end == null shouldn't end be the length of the string itself?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394310494", "createdAt": "2020-03-18T12:30:57Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.SubstringFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific substring function - similar to the one in Python.\n+ * Note this is different than the one in SQL.\n+ */\n+public class Substring extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, start, end;\n+\n+    public Substring(Source source, Expression src, Expression start, Expression end) {\n+        super(source, end != null ? Arrays.asList(src, start, end) : Arrays.asList(src, new Literal(source, 0, DataTypes.INTEGER), start));\n+        this.source = src;\n+        this.start = end == null ? new Literal(source, 0, DataTypes.INTEGER) : start;\n+        this.end = end == null ? start : end;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDEzMzk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNDozOVrOF4C7Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNDozOVrOF4C7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMjQ1OQ==", "bodyText": "Why using length and not end? It's more consistent if the same names are kept throughout the class.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394312459", "createdAt": "2020-03-18T12:34:39Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.SubstringFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific substring function - similar to the one in Python.\n+ * Note this is different than the one in SQL.\n+ */\n+public class Substring extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, start, end;\n+\n+    public Substring(Source source, Expression src, Expression start, Expression end) {\n+        super(source, end != null ? Arrays.asList(src, start, end) : Arrays.asList(src, new Literal(source, 0, DataTypes.INTEGER), start));\n+        this.source = src;\n+        this.start = end == null ? new Literal(source, 0, DataTypes.INTEGER) : start;\n+        this.end = end == null ? start : end;\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution sourceResolution = isStringAndExact(source, sourceText(), ParamOrdinal.FIRST);\n+        if (sourceResolution.unresolved()) {\n+            return sourceResolution;\n+        }\n+\n+        TypeResolution startResolution = isInteger(start, sourceText(), ParamOrdinal.SECOND);\n+        if (startResolution.unresolved()) {\n+            return startResolution;\n+        }\n+\n+        return isInteger(end, sourceText(), ParamOrdinal.THIRD);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new SubstringFunctionPipe(source(), this, Expressions.pipe(source), Expressions.pipe(start), Expressions.pipe(end));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return source.foldable() && start.foldable() && end.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(source.fold(), start.fold(), end.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, Substring::new, source, start, end);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate sourceScript = asScript(source);\n+        ScriptTemplate startScript = asScript(start);\n+        ScriptTemplate lengthScript = asScript(end);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDEzNDgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNDo1NVrOF4C7lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNDo1NVrOF4C7lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMjU5OA==", "bodyText": "Why length and not end?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394312598", "createdAt": "2020-03-18T12:34:55Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Substring.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.Expressions.ParamOrdinal;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.SubstringFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isInteger;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific substring function - similar to the one in Python.\n+ * Note this is different than the one in SQL.\n+ */\n+public class Substring extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, start, end;\n+\n+    public Substring(Source source, Expression src, Expression start, Expression end) {\n+        super(source, end != null ? Arrays.asList(src, start, end) : Arrays.asList(src, new Literal(source, 0, DataTypes.INTEGER), start));\n+        this.source = src;\n+        this.start = end == null ? new Literal(source, 0, DataTypes.INTEGER) : start;\n+        this.end = end == null ? start : end;\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        if (!childrenResolved()) {\n+            return new TypeResolution(\"Unresolved children\");\n+        }\n+\n+        TypeResolution sourceResolution = isStringAndExact(source, sourceText(), ParamOrdinal.FIRST);\n+        if (sourceResolution.unresolved()) {\n+            return sourceResolution;\n+        }\n+\n+        TypeResolution startResolution = isInteger(start, sourceText(), ParamOrdinal.SECOND);\n+        if (startResolution.unresolved()) {\n+            return startResolution;\n+        }\n+\n+        return isInteger(end, sourceText(), ParamOrdinal.THIRD);\n+    }\n+\n+    @Override\n+    protected Pipe makePipe() {\n+        return new SubstringFunctionPipe(source(), this, Expressions.pipe(source), Expressions.pipe(start), Expressions.pipe(end));\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        return source.foldable() && start.foldable() && end.foldable();\n+    }\n+\n+    @Override\n+    public Object fold() {\n+        return doProcess(source.fold(), start.fold(), end.fold());\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, Substring::new, source, start, end);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate sourceScript = asScript(source);\n+        ScriptTemplate startScript = asScript(start);\n+        ScriptTemplate lengthScript = asScript(end);\n+\n+        return asScriptFrom(sourceScript, startScript, lengthScript);\n+    }\n+\n+    protected ScriptTemplate asScriptFrom(ScriptTemplate sourceScript, ScriptTemplate startScript, ScriptTemplate lengthScript) {\n+        return new ScriptTemplate(format(Locale.ROOT, formatTemplate(\"{eql}.%s(%s,%s,%s)\"),\n+                \"substring\",\n+                sourceScript.template(),\n+                startScript.template(),\n+                lengthScript.template()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE0MTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionPipe.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNjo1MFrOF4C_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNjo1MFrOF4C_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMzcwOQ==", "bodyText": "newEnd?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394313709", "createdAt": "2020-03-18T12:36:50Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionPipe.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class SubstringFunctionPipe extends Pipe {\n+\n+    private final Pipe source, start, end;\n+\n+    public SubstringFunctionPipe(Source source, Expression expression, Pipe src, Pipe start, Pipe end) {\n+        super(source, expression, Arrays.asList(src, start, end));\n+        this.source = src;\n+        this.start = start;\n+        this.end = end;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 3) {\n+            throw new IllegalArgumentException(\"expected [3] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return replaceChildren(newChildren.get(0), newChildren.get(1), newChildren.get(2));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        Pipe newStart = start.resolveAttributes(resolver);\n+        Pipe newLength = end.resolveAttributes(resolver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE1MDY1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozOToyNVrOF4DFpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozOToyNVrOF4DFpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNTE3NQ==", "bodyText": "== false instead of !?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394315175", "createdAt": "2020-03-18T12:39:25Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SubstringFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"ssub\";\n+\n+    private final Processor source, start, end;\n+\n+    public SubstringFunctionProcessor(Processor source, Processor start, Processor end) {\n+        this.source = source;\n+        this.start = start;\n+        this.end = end;\n+    }\n+\n+    public SubstringFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        start = in.readNamedWriteable(Processor.class);\n+        end = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(start);\n+        out.writeNamedWriteable(end);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), start.process(input), end.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object start, Object end) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (start == null || end == null) {\n+            return source;\n+        }\n+        if (!(start instanceof Number)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE1MjE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozOTo1MVrOF4DGng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozOTo1MVrOF4DGng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNTQyMg==", "bodyText": "I thought end can be negative?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394315422", "createdAt": "2020-03-18T12:39:51Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SubstringFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"ssub\";\n+\n+    private final Processor source, start, end;\n+\n+    public SubstringFunctionProcessor(Processor source, Processor start, Processor end) {\n+        this.source = source;\n+        this.start = start;\n+        this.end = end;\n+    }\n+\n+    public SubstringFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        start = in.readNamedWriteable(Processor.class);\n+        end = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(start);\n+        out.writeNamedWriteable(end);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), start.process(input), end.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object start, Object end) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (!(source instanceof String || source instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (start == null || end == null) {\n+            return source;\n+        }\n+        if (!(start instanceof Number)) {\n+            throw new EqlIllegalArgumentException(\"A number is required; received [{}]\", start);\n+        }\n+        if (!(end instanceof Number)) {\n+            throw new EqlIllegalArgumentException(\"A number is required; received [{}]\", end);\n+        }\n+        if (((Number) end).intValue() < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE1NDUzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0MDozNlrOF4DINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0MDozNlrOF4DINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNTgzMQ==", "bodyText": "Extra empty line.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394315831", "createdAt": "2020-03-18T12:40:36Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.whitelist;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.SubstringFunctionProcessor;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.whitelist.InternalQlScriptUtils;\n+\n+/*\n+ * Whitelisted class for EQL scripts.\n+ * Acts as a registry of the various static methods used <b>internally</b> by the scalar functions\n+ * (to simplify the whitelist definition).\n+ */\n+public class InternalEqlScriptUtils extends InternalQlScriptUtils {\n+\n+    InternalEqlScriptUtils() {}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE2MDA3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0MjoyNFrOF4DL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0MjoyNFrOF4DL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNjc4MA==", "bodyText": "Magic", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394316780", "createdAt": "2020-03-18T12:42:24Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java", "diffHunk": "@@ -143,7 +141,7 @@ public void testFunctionVerificationUnknown() {\n                 error(\"file where opcode=0 and indexOf(file_name, 'plore') == 2\"));\n         assertEquals(\"1:15: Unknown function [add]\",\n                 error(\"process where add(serial_event_id, 0) == 1\"));\n-        assertEquals(\"1:15: Unknown function [subtract]\",\n+        assertEquals(\"1:15: Unknown function [subtract], did you mean [substring]?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE4MTQzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0ODozNFrOF4DZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0ODozNFrOF4DZmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMDI4MA==", "bodyText": "No tests with null values?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394320280", "createdAt": "2020-03-18T12:48:34Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDIzMDE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowMjoxM1rOF4D5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMzo1NVrOF4v31Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyODM1NQ==", "bodyText": "could be also final ?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394328355", "createdAt": "2020-03-18T13:02:13Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "diffHunk": "@@ -9,12 +9,16 @@\n import org.elasticsearch.index.fielddata.ScriptDocValues;\n import org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogicProcessor.BinaryLogicOperation;\n import org.elasticsearch.xpack.ql.expression.predicate.logical.NotProcessor;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.CheckNullProcessor.CheckNullOperation;\n import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.BinaryComparisonProcessor.BinaryComparisonOperation;\n+import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.InProcessor;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.RegexProcessor.RegexOperation;\n import org.elasticsearch.xpack.ql.util.StringUtils;\n \n+import java.util.List;\n import java.util.Map;\n \n-public abstract class InternalQlScriptUtils {\n+public class InternalQlScriptUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MzY1NQ==", "bodyText": "No because it is extended by the other Script classes.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394973655", "createdAt": "2020-03-19T11:58:10Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "diffHunk": "@@ -9,12 +9,16 @@\n import org.elasticsearch.index.fielddata.ScriptDocValues;\n import org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogicProcessor.BinaryLogicOperation;\n import org.elasticsearch.xpack.ql.expression.predicate.logical.NotProcessor;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.CheckNullProcessor.CheckNullOperation;\n import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.BinaryComparisonProcessor.BinaryComparisonOperation;\n+import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.InProcessor;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.RegexProcessor.RegexOperation;\n import org.elasticsearch.xpack.ql.util.StringUtils;\n \n+import java.util.List;\n import java.util.Map;\n \n-public abstract class InternalQlScriptUtils {\n+public class InternalQlScriptUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyODM1NQ=="}, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODkxNw==", "bodyText": "ah yes, sorry.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r395048917", "createdAt": "2020-03-19T14:03:55Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "diffHunk": "@@ -9,12 +9,16 @@\n import org.elasticsearch.index.fielddata.ScriptDocValues;\n import org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogicProcessor.BinaryLogicOperation;\n import org.elasticsearch.xpack.ql.expression.predicate.logical.NotProcessor;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.CheckNullProcessor.CheckNullOperation;\n import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.BinaryComparisonProcessor.BinaryComparisonOperation;\n+import org.elasticsearch.xpack.ql.expression.predicate.operator.comparison.InProcessor;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.RegexProcessor.RegexOperation;\n import org.elasticsearch.xpack.ql.util.StringUtils;\n \n+import java.util.List;\n import java.util.Map;\n \n-public abstract class InternalQlScriptUtils {\n+public class InternalQlScriptUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyODM1NQ=="}, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDIzNDI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/AbstractEqlIntegTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowMzoyMFrOF4D7xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMTo1ODo0MVrOF4rSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyOTAyOQ==", "bodyText": "Why is that?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394329029", "createdAt": "2020-03-18T13:03:20Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/AbstractEqlIntegTestCase.java", "diffHunk": "@@ -35,7 +35,7 @@ protected Settings nodeSettings(int nodeOrdinal) {\n \n     @Override\n     protected Collection<Class<? extends Plugin>> nodePlugins() {\n-        return Collections.singletonList(LocalStateEqlXPackPlugin.class);\n+        return Arrays.asList(LocalStateEqlXPackPlugin.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MzkwMA==", "bodyText": "Leftover.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394973900", "createdAt": "2020-03-19T11:58:41Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/AbstractEqlIntegTestCase.java", "diffHunk": "@@ -35,7 +35,7 @@ protected Settings nodeSettings(int nodeOrdinal) {\n \n     @Override\n     protected Collection<Class<? extends Plugin>> nodePlugins() {\n-        return Collections.singletonList(LocalStateEqlXPackPlugin.class);\n+        return Arrays.asList(LocalStateEqlXPackPlugin.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyOTAyOQ=="}, "originalCommit": {"oid": "d23ce79af733b43118d80f18031e3947af89b276"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI0MjE1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1Mzo0MFrOF4YNfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjowMDowM1rOF4rVQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTI0Ng==", "bodyText": "This check couldn't be included inside the\nif (end < 0)\n\n?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394661246", "createdAt": "2020-03-18T21:53:40Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        if (start < 0) {\n+            start += length;\n+        }\n+        if (start < 0) {\n+            start = 0;\n+        }\n+        if (end < 0) {\n+            end += length;\n+        }\n+        if (end < 0) {\n+            end = 0;\n+        }\n+        if (end > length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NDUyOQ==", "bodyText": "No because once checks the lower limit, whether end is still negative (after potentially adding length) while the other checks the upper limit.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394974529", "createdAt": "2020-03-19T12:00:03Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.Strings;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringUtils {\n+\n+    private StringUtils() {}\n+\n+    /**\n+     * Returns a substring using the Python slice semantics, meaning\n+     * start and end can be negative\n+     */\n+    static String substringSlice(String string, int start, int end) {\n+        if (hasLength(string) == false) {\n+            return string;\n+        }\n+\n+        int length = string.length();\n+        \n+        // handle first negative values\n+        if (start < 0) {\n+            start += length;\n+        }\n+        if (start < 0) {\n+            start = 0;\n+        }\n+        if (end < 0) {\n+            end += length;\n+        }\n+        if (end < 0) {\n+            end = 0;\n+        }\n+        if (end > length) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTI0Ng=="}, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI0Njk1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionPipe.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1NTozM1rOF4YQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1NTozM1rOF4YQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjA0Ng==", "bodyText": "Here also, shouldn't be end?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394662046", "createdAt": "2020-03-18T21:55:33Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/SubstringFunctionPipe.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class SubstringFunctionPipe extends Pipe {\n+\n+    private final Pipe source, start, end;\n+\n+    public SubstringFunctionPipe(Source source, Expression expression, Pipe src, Pipe start, Pipe end) {\n+        super(source, expression, Arrays.asList(src, start, end));\n+        this.source = src;\n+        this.start = start;\n+        this.end = end;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 3) {\n+            throw new IllegalArgumentException(\"expected [3] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return replaceChildren(newChildren.get(0), newChildren.get(1), newChildren.get(2));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        Pipe newStart = start.resolveAttributes(resolver);\n+        Pipe newLength = end.resolveAttributes(resolver);\n+        if (newSource == source && newStart == start && newLength == end) {\n+            return this;\n+        }\n+        return replaceChildren(newSource, newStart, newLength);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery() && start.supportedByAggsOnlyQuery() && end.supportedByAggsOnlyQuery();\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        return source.resolved() && start.resolved() && end.resolved();\n+    }\n+\n+    protected Pipe replaceChildren(Pipe newSource, Pipe newStart, Pipe newLength) {\n+        return new SubstringFunctionPipe(source(), expression(), newSource, newStart, newLength);\n+    }\n+\n+    @Override\n+    public final void collectFields(QlSourceBuilder sourceBuilder) {\n+        source.collectFields(sourceBuilder);\n+        start.collectFields(sourceBuilder);\n+        end.collectFields(sourceBuilder);\n+    }\n+\n+    @Override\n+    protected NodeInfo<SubstringFunctionPipe> info() {\n+        return NodeInfo.create(this, SubstringFunctionPipe::new, expression(), source, start, end);\n+    }\n+\n+    @Override\n+    public SubstringFunctionProcessor asProcessor() {\n+        return new SubstringFunctionProcessor(source.asProcessor(), start.asProcessor(), end.asProcessor());\n+    }\n+    \n+    public Pipe src() {\n+        return source;\n+    }\n+    \n+    public Pipe start() {\n+        return start;\n+    }\n+    \n+    public Pipe length() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI2Mjg0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowMTozMFrOF4Ya5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowODo1OVrOF4wGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NDY3OA==", "bodyText": "How about both negative and both higher than length?\nAlso a test for both positive and both higher than end.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394664678", "createdAt": "2020-03-18T22:01:30Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testSubstringSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(1, 7), substringSlice(str, 1, 7));\n+    }\n+\n+    public void testSubstringSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(5, 9), substringSlice(str, -5, -1));\n+    }\n+\n+    public void testSubstringSliceNegativeOverLength() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NjI5MQ==", "bodyText": "That's what the test does - -15 and -11 are both negative and higher than length.\nAm I missing something?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394976291", "createdAt": "2020-03-19T12:03:37Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testSubstringSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(1, 7), substringSlice(str, 1, 7));\n+    }\n+\n+    public void testSubstringSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(5, 9), substringSlice(str, -5, -1));\n+    }\n+\n+    public void testSubstringSliceNegativeOverLength() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NDY3OA=="}, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjU1Mg==", "bodyText": "Sorry my bad about the negative.", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r395052552", "createdAt": "2020-03-19T14:08:59Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testSubstringSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(1, 7), substringSlice(str, 1, 7));\n+    }\n+\n+    public void testSubstringSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(5, 9), substringSlice(str, -5, -1));\n+    }\n+\n+    public void testSubstringSliceNegativeOverLength() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NDY3OA=="}, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI2NjE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowMjo0OVrOF4YdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowMjo0OVrOF4YdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NTIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEndHigherThanLenght() {\n          \n          \n            \n                public void testEndHigherThanLength() {", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r394665217", "createdAt": "2020-03-18T22:02:49Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testSubstringSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(1, 7), substringSlice(str, 1, 7));\n+    }\n+\n+    public void testSubstringSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(5, 9), substringSlice(str, -5, -1));\n+    }\n+\n+    public void testSubstringSliceNegativeOverLength() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, -15, -11));\n+    }\n+\n+    public void testSubstringRandomSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        int start = randomInt(5);\n+        int end = start + randomInt(3);\n+        assertEquals(str.substring(start, end), substringSlice(str, start, end));\n+    }\n+\n+    public void testSubstringRandomSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        int end = 1 + randomInt(3);\n+        int start = end + randomInt(5);\n+        assertEquals(str.substring(10 - start, 10 - end), substringSlice(str, -start, -end));\n+    }\n+\n+    public void testStartNegativeHigherThanLength() {\n+        String str = randomAlphaOfLength(10);\n+        int start = 10 + randomInt(10);\n+        assertEquals(str.substring(0, 10 - 1), substringSlice(str, -start, -1));\n+    }\n+\n+    public void testEndHigherThanLenght() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db46a6cd2e67ed995b181eea7de018baf4c3aaa"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY3MzM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMDowNVrOF4wI5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1ODowN1rOF4ybPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzI4Nw==", "bodyText": "Maybe random ints (negative too) for completeness?", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r395053287", "createdAt": "2020-03-19T14:10:05Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testSubstringSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(1, 7), substringSlice(str, 1, 7));\n+    }\n+\n+    public void testSubstringSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(5, 9), substringSlice(str, -5, -1));\n+    }\n+\n+    public void testSubstringSliceNegativeOverLength() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, -15, -11));\n+    }\n+\n+    public void testSubstringSlicePositiveOverLength() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, 11, 14));\n+    }\n+\n+    public void testSubstringHigherEndThanStartNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, -20, -11));\n+    }\n+\n+    public void testSubstringRandomSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        int start = randomInt(5);\n+        int end = start + randomInt(3);\n+        assertEquals(str.substring(start, end), substringSlice(str, start, end));\n+    }\n+\n+    public void testSubstringRandomSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        int end = 1 + randomInt(3);\n+        int start = end + randomInt(5);\n+        assertEquals(str.substring(10 - start, 10 - end), substringSlice(str, -start, -end));\n+    }\n+\n+    public void testStartNegativeHigherThanLength() {\n+        String str = randomAlphaOfLength(10);\n+        int start = 10 + randomInt(10);\n+        assertEquals(str.substring(0, 10 - 1), substringSlice(str, -start, -1));\n+    }\n+\n+    public void testEndHigherThanLength() {\n+        String str = randomAlphaOfLength(10);\n+        int end = 10 + randomInt(10);\n+        assertEquals(str, substringSlice(str, 0, end));\n+    }\n+\n+    public void testSubstringRandomSliceSameStartEnd() {\n+        String str = randomAlphaOfLength(10);\n+        int start = randomInt();\n+        assertEquals(\"\", substringSlice(str, start, start));\n+    }\n+\n+    public void testNullValue() {\n+        assertNull(substringSlice(null, 0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c8ba9c9eba7475d94cfa723fe7133988cf325d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MDc1MQ==", "bodyText": "Those are covered in testSubstringRandomSliceNegative", "url": "https://github.com/elastic/elasticsearch/pull/53688#discussion_r395090751", "createdAt": "2020-03-19T14:58:07Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n+\n+public class StringUtilsTests extends ESTestCase {\n+\n+    public void testSubstringSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(1, 7), substringSlice(str, 1, 7));\n+    }\n+\n+    public void testSubstringSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(str.substring(5, 9), substringSlice(str, -5, -1));\n+    }\n+\n+    public void testSubstringSliceNegativeOverLength() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, -15, -11));\n+    }\n+\n+    public void testSubstringSlicePositiveOverLength() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, 11, 14));\n+    }\n+\n+    public void testSubstringHigherEndThanStartNegative() {\n+        String str = randomAlphaOfLength(10);\n+        assertEquals(\"\", substringSlice(str, -20, -11));\n+    }\n+\n+    public void testSubstringRandomSlicePositive() {\n+        String str = randomAlphaOfLength(10);\n+        int start = randomInt(5);\n+        int end = start + randomInt(3);\n+        assertEquals(str.substring(start, end), substringSlice(str, start, end));\n+    }\n+\n+    public void testSubstringRandomSliceNegative() {\n+        String str = randomAlphaOfLength(10);\n+        int end = 1 + randomInt(3);\n+        int start = end + randomInt(5);\n+        assertEquals(str.substring(10 - start, 10 - end), substringSlice(str, -start, -end));\n+    }\n+\n+    public void testStartNegativeHigherThanLength() {\n+        String str = randomAlphaOfLength(10);\n+        int start = 10 + randomInt(10);\n+        assertEquals(str.substring(0, 10 - 1), substringSlice(str, -start, -1));\n+    }\n+\n+    public void testEndHigherThanLength() {\n+        String str = randomAlphaOfLength(10);\n+        int end = 10 + randomInt(10);\n+        assertEquals(str, substringSlice(str, 0, end));\n+    }\n+\n+    public void testSubstringRandomSliceSameStartEnd() {\n+        String str = randomAlphaOfLength(10);\n+        int start = randomInt();\n+        assertEquals(\"\", substringSlice(str, start, start));\n+    }\n+\n+    public void testNullValue() {\n+        assertNull(substringSlice(null, 0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzI4Nw=="}, "originalCommit": {"oid": "b7c8ba9c9eba7475d94cfa723fe7133988cf325d"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4315, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}