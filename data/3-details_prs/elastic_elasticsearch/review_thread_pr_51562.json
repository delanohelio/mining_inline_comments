{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjA2NDMy", "number": 51562, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyODozMVrODbZPmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjowMDozMVrODb5BTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUxNzM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyODozMVrOFi22vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzo0ODo1OVrOFjRvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDY1Mw==", "bodyText": "This test is not relevant (anymore). Can you add dep.from_date to the projections?\nWhy did the order change since the PR should address ONLY the case of ordering by year and something else?", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372094653", "createdAt": "2020-01-28T22:28:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "diffHunk": "@@ -106,23 +106,23 @@ SELECT first_name f, last_name l, YEAR(dep.from_date) start FROM test_emp WHERE\n \n f:s                  | l:s           | start:i\n \n-Sreekrishna          |Servieres      |1985           \n-Zhongwei             |Rosen          |1986           \n-Chirstian            |Koblick        |1986           \n-null                 |Chappelet      |1988           \n-Zvonko               |Nyanchama      |1989     \n+Parto                |Bamford        |1995\n+Chirstian            |Koblick        |1986\n+Duangkaew            |Piveteau       |1996\n+Kazuhide             |Peha           |1992\n+null                 |Demeyer        |1994\n ;\n \n selectWithScalarOnNestedWithoutProjection\n SELECT first_name f, last_name l FROM test_emp WHERE dep.dep_name = 'Production' AND languages > 1 ORDER BY YEAR(dep.from_date) LIMIT 5;\n \n f:s                  | l:s\n \n-Sreekrishna          |Servieres      \n-Zhongwei             |Rosen          \n-Chirstian            |Koblick        \n-null                 |Chappelet      \n-Zvonko               |Nyanchama  \n+Parto                |Bamford", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94251c9b43c0a21f829ff82d23abd55c5859aab1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyMTY5Mg==", "bodyText": "The order can change because previously we would have a strict order on the whole from_date (including day and month) but now simply on the YEAR, so (apart from the YEAR) can be affected by the order of the doc entries when inserted to the index.", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372321692", "createdAt": "2020-01-29T11:11:03Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "diffHunk": "@@ -106,23 +106,23 @@ SELECT first_name f, last_name l, YEAR(dep.from_date) start FROM test_emp WHERE\n \n f:s                  | l:s           | start:i\n \n-Sreekrishna          |Servieres      |1985           \n-Zhongwei             |Rosen          |1986           \n-Chirstian            |Koblick        |1986           \n-null                 |Chappelet      |1988           \n-Zvonko               |Nyanchama      |1989     \n+Parto                |Bamford        |1995\n+Chirstian            |Koblick        |1986\n+Duangkaew            |Piveteau       |1996\n+Kazuhide             |Peha           |1992\n+null                 |Demeyer        |1994\n ;\n \n selectWithScalarOnNestedWithoutProjection\n SELECT first_name f, last_name l FROM test_emp WHERE dep.dep_name = 'Production' AND languages > 1 ORDER BY YEAR(dep.from_date) LIMIT 5;\n \n f:s                  | l:s\n \n-Sreekrishna          |Servieres      \n-Zhongwei             |Rosen          \n-Chirstian            |Koblick        \n-null                 |Chappelet      \n-Zvonko               |Nyanchama  \n+Parto                |Bamford", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDY1Mw=="}, "originalCommit": {"oid": "94251c9b43c0a21f829ff82d23abd55c5859aab1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyOTMyNg==", "bodyText": "Ok, so how does the query dsl look like now? Previously I think it contained a \"sort\" : [{\"from_date\" : {\"order\" : \"asc\"}}] section. We don't have tests that check the generated ES query with a sort by a date field?", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372329326", "createdAt": "2020-01-29T11:29:14Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "diffHunk": "@@ -106,23 +106,23 @@ SELECT first_name f, last_name l, YEAR(dep.from_date) start FROM test_emp WHERE\n \n f:s                  | l:s           | start:i\n \n-Sreekrishna          |Servieres      |1985           \n-Zhongwei             |Rosen          |1986           \n-Chirstian            |Koblick        |1986           \n-null                 |Chappelet      |1988           \n-Zvonko               |Nyanchama      |1989     \n+Parto                |Bamford        |1995\n+Chirstian            |Koblick        |1986\n+Duangkaew            |Piveteau       |1996\n+Kazuhide             |Peha           |1992\n+null                 |Demeyer        |1994\n ;\n \n selectWithScalarOnNestedWithoutProjection\n SELECT first_name f, last_name l FROM test_emp WHERE dep.dep_name = 'Production' AND languages > 1 ORDER BY YEAR(dep.from_date) LIMIT 5;\n \n f:s                  | l:s\n \n-Sreekrishna          |Servieres      \n-Zhongwei             |Rosen          \n-Chirstian            |Koblick        \n-null                 |Chappelet      \n-Zvonko               |Nyanchama  \n+Parto                |Bamford", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDY1Mw=="}, "originalCommit": {"oid": "94251c9b43c0a21f829ff82d23abd55c5859aab1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTEwOQ==", "bodyText": "As discussed, since a scalar is used, it needs to be translated into a scripted sorting, which currently is not supported for nested fields.", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372535109", "createdAt": "2020-01-29T17:48:59Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "diffHunk": "@@ -106,23 +106,23 @@ SELECT first_name f, last_name l, YEAR(dep.from_date) start FROM test_emp WHERE\n \n f:s                  | l:s           | start:i\n \n-Sreekrishna          |Servieres      |1985           \n-Zhongwei             |Rosen          |1986           \n-Chirstian            |Koblick        |1986           \n-null                 |Chappelet      |1988           \n-Zvonko               |Nyanchama      |1989     \n+Parto                |Bamford        |1995\n+Chirstian            |Koblick        |1986\n+Duangkaew            |Piveteau       |1996\n+Kazuhide             |Peha           |1992\n+null                 |Demeyer        |1994\n ;\n \n selectWithScalarOnNestedWithoutProjection\n SELECT first_name f, last_name l FROM test_emp WHERE dep.dep_name = 'Production' AND languages > 1 ORDER BY YEAR(dep.from_date) LIMIT 5;\n \n f:s                  | l:s\n \n-Sreekrishna          |Servieres      \n-Zhongwei             |Rosen          \n-Chirstian            |Koblick        \n-null                 |Chappelet      \n-Zvonko               |Nyanchama  \n+Parto                |Bamford", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDY1Mw=="}, "originalCommit": {"oid": "94251c9b43c0a21f829ff82d23abd55c5859aab1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUyMzM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjozMDo1NFrOFi26eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTowODoyMVrOFjEpHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTYwOQ==", "bodyText": "Ordering here is completely wrong. 1995, 1986, 1996.... The query has ORDER BY start where start is YEAR(dep.from_date).", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372095609", "createdAt": "2020-01-28T22:30:54Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "diffHunk": "@@ -106,23 +106,23 @@ SELECT first_name f, last_name l, YEAR(dep.from_date) start FROM test_emp WHERE\n \n f:s                  | l:s           | start:i\n \n-Sreekrishna          |Servieres      |1985           \n-Zhongwei             |Rosen          |1986           \n-Chirstian            |Koblick        |1986           \n-null                 |Chappelet      |1988           \n-Zvonko               |Nyanchama      |1989     \n+Parto                |Bamford        |1995", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94251c9b43c0a21f829ff82d23abd55c5859aab1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyMDU0Mw==", "bodyText": "Oooops! I rushed here, sorry, need to check it. Thx for catching!", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372320543", "createdAt": "2020-01-29T11:08:21Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/qa/src/main/resources/nested.csv-spec", "diffHunk": "@@ -106,23 +106,23 @@ SELECT first_name f, last_name l, YEAR(dep.from_date) start FROM test_emp WHERE\n \n f:s                  | l:s           | start:i\n \n-Sreekrishna          |Servieres      |1985           \n-Zhongwei             |Rosen          |1986           \n-Chirstian            |Koblick        |1986           \n-null                 |Chappelet      |1988           \n-Zvonko               |Nyanchama      |1989     \n+Parto                |Bamford        |1995", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTYwOQ=="}, "originalCommit": {"oid": "94251c9b43c0a21f829ff82d23abd55c5859aab1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDAzMDgxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/ScalarFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0MzoxNlrOFjYjHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0MzoxNlrOFjYjHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NjY4Ng==", "bodyText": "I think the method can be removed entirely - is it used anywhere else?", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372646686", "createdAt": "2020-01-29T21:43:16Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/ScalarFunction.java", "diffHunk": "@@ -39,17 +39,15 @@ protected ScalarFunction(Source source, List<Expression> fields) {\n         super(source, fields);\n     }\n \n-    // used if the function is monotonic and thus does not have to be computed for ordering purposes\n-    // null means the script needs to be used; expression means the field/expression to be used instead\n+    // Every function needs to be translated to a script\n+    // which will be used for the ordering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1875e76cba5d7d0cacdd40c1d6a738c5648b460f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDAzNDEyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0NDoxM1rOFjYk-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0NDoxM1rOFjYk-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0NzE2Mg==", "bodyText": "why (fa)?", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372647162", "createdAt": "2020-01-29T21:44:13Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "diffHunk": "@@ -722,16 +722,19 @@ private static void checkForScoreInsideFunctions(LogicalPlan p, Set<Failure> loc\n                 Function.class));\n     }\n \n-    private static void checkNestedUsedInGroupByOrHaving(LogicalPlan p, Set<Failure> localFailures) {\n+    private static void checkNestedUsedInGroupByOrHavingOrOrderBy(LogicalPlan p, Set<Failure> localFailures,\n+                                                                  AttributeMap<Expression> attributeRefs) {\n         List<FieldAttribute> nested = new ArrayList<>();\n-        Consumer<FieldAttribute> match = fa -> {\n+        Consumer<FieldAttribute> match = (fa) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1875e76cba5d7d0cacdd40c1d6a738c5648b460f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDA0MTY3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0Njo0MVrOFjYpig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0Njo0MVrOFjYpig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODMzMA==", "bodyText": "Small nit - this type of call seems to be used 3 times (last time twice) - maybe could be extracted into a small method to avoid repetition.\nMaybe check if it's used anywhere else so even more of a reuse...", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372648330", "createdAt": "2020-01-29T21:46:41Z", "author": {"login": "costin"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "diffHunk": "@@ -722,16 +722,19 @@ private static void checkForScoreInsideFunctions(LogicalPlan p, Set<Failure> loc\n                 Function.class));\n     }\n \n-    private static void checkNestedUsedInGroupByOrHaving(LogicalPlan p, Set<Failure> localFailures) {\n+    private static void checkNestedUsedInGroupByOrHavingOrOrderBy(LogicalPlan p, Set<Failure> localFailures,\n+                                                                  AttributeMap<Expression> attributeRefs) {\n         List<FieldAttribute> nested = new ArrayList<>();\n-        Consumer<FieldAttribute> match = fa -> {\n+        Consumer<FieldAttribute> match = (fa) -> {\n             if (fa.isNested()) {\n                 nested.add(fa);\n             }\n         };\n \n         // nested fields shouldn't be used in aggregates or having (yet)\n-        p.forEachDown(a -> a.groupings().forEach(agg -> agg.forEachUp(match, FieldAttribute.class)), Aggregate.class);\n+        p.forEachDown(a -> a.groupings().forEach(agg -> agg.forEachUp(e ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1875e76cba5d7d0cacdd40c1d6a738c5648b460f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4NzMyOnYy", "diffSide": "RIGHT", "path": "docs/reference/sql/limitations.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODowMVrOFjoRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODowMVrOFjoRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDM5MQ==", "bodyText": "Capital letters for length?", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372904391", "createdAt": "2020-01-30T11:48:01Z", "author": {"login": "astefan"}, "path": "docs/reference/sql/limitations.asciidoc", "diffHunk": "@@ -31,6 +31,34 @@ For example:\n SELECT dep.dep_name.keyword FROM test_emp GROUP BY languages;\n --------------------------------------------------\n \n+[float]\n+=== Scalar functions on nested fields are not allowed in `WHERE` and `ORDER BY` clauses\n+{es-sql} doesn't support the usage of scalar functions on top of nested fields in `WHERE`\n+and `ORDER BY` clauses with the exception of comparison and logical operators.\n+\n+For example:\n+\n+[source, sql]\n+--------------------------------------------------\n+SELECT * FROM test_emp WHERE length(dep.dep_name.keyword) > 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801ca3e00e9efbf285ea92e13a847d443fa644ed"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTcwOTYwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1NjoyNFrOFjoe8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1NjoyNFrOFjoe8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNzc2MQ==", "bodyText": "Typo in the variable name: checkForNestedInFcuntion .", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372907761", "createdAt": "2020-01-30T11:56:24Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java", "diffHunk": "@@ -735,33 +740,61 @@ private static void checkForScoreInsideFunctions(LogicalPlan p, Set<Failure> loc\n                 Function.class));\n     }\n \n-    private static void checkNestedUsedInGroupByOrHaving(LogicalPlan p, Set<Failure> localFailures) {\n+    private static void checkNestedUsedInGroupByOrHavingOrWhereOrOrderBy(LogicalPlan p, Set<Failure> localFailures,\n+                                                                         AttributeMap<Expression> attributeRefs) {\n         List<FieldAttribute> nested = new ArrayList<>();\n-        Consumer<FieldAttribute> match = fa -> {\n+        Consumer<FieldAttribute> matchNested = fa -> {\n             if (fa.isNested()) {\n                 nested.add(fa);\n             }\n         };\n+        Consumer<Expression> checkForNested = e ->\n+                attributeRefs.getOrDefault(e, e).forEachUp(matchNested, FieldAttribute.class);\n+        Consumer<ScalarFunction> checkForNestedInFcuntion =  f -> f.arguments().forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50c2fd143080e6e3ac01f05ff7dcd0beac482cb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTcyMzY1OnYy", "diffSide": "LEFT", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjowMDozMVrOFjomow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjowNTo1NFrOFjou-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwOTczMQ==", "bodyText": "I don't understand why this logic is removed. We removed the faulty support for sorting on nested fields that needs scripting, but why is this block of code associated with nested fields?", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372909731", "createdAt": "2020-01-30T12:00:31Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -695,21 +695,8 @@ protected PhysicalPlan rule(OrderExec plan) {\n                         // scalar functions typically require script ordering\n                         if (orderExpression instanceof ScalarFunction) {\n                             ScalarFunction sf = (ScalarFunction) orderExpression;\n-                            // is there an expression to order by?\n-                            if (sf.orderBy() != null) {\n-                                Expression orderBy = sf.orderBy();\n-                                if (orderBy instanceof NamedExpression) {\n-                                    orderBy = qContainer.aliases().getOrDefault(orderBy, orderBy);\n-                                    qContainer = qContainer\n-                                            .addSort(new AttributeSort(((NamedExpression) orderBy).toAttribute(), direction, missing));\n-                                } else if (orderBy.foldable() == false) {\n-                                    // ignore constant\n-                                    throw new PlanningException(\"does not know how to order by expression {}\", orderBy);\n-                                }\n-                            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50c2fd143080e6e3ac01f05ff7dcd0beac482cb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkxMTg2Ng==", "bodyText": "This code was especially for Scalar Functions in case the orderBy() didn't return null -> no script creation, instead use the underlying field fo the ordering. The only use case of this was the YEAR() function.", "url": "https://github.com/elastic/elasticsearch/pull/51562#discussion_r372911866", "createdAt": "2020-01-30T12:05:54Z", "author": {"login": "matriv"}, "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -695,21 +695,8 @@ protected PhysicalPlan rule(OrderExec plan) {\n                         // scalar functions typically require script ordering\n                         if (orderExpression instanceof ScalarFunction) {\n                             ScalarFunction sf = (ScalarFunction) orderExpression;\n-                            // is there an expression to order by?\n-                            if (sf.orderBy() != null) {\n-                                Expression orderBy = sf.orderBy();\n-                                if (orderBy instanceof NamedExpression) {\n-                                    orderBy = qContainer.aliases().getOrDefault(orderBy, orderBy);\n-                                    qContainer = qContainer\n-                                            .addSort(new AttributeSort(((NamedExpression) orderBy).toAttribute(), direction, missing));\n-                                } else if (orderBy.foldable() == false) {\n-                                    // ignore constant\n-                                    throw new PlanningException(\"does not know how to order by expression {}\", orderBy);\n-                                }\n-                            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwOTczMQ=="}, "originalCommit": {"oid": "e50c2fd143080e6e3ac01f05ff7dcd0beac482cb"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 209, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}