{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Mzk0NDI1", "number": 57273, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo0MzoyM1rOEAeMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMzoxMVrOEGcoeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTMwMDY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo0MzoyM1rOGbxYKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyODoyMlrOGcRubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3MzczNw==", "bodyText": "We could sort the doc ids to load once and move the LeafReaderContext while iterating ? In fact that's what we do already in FetchDocValuesPhase and other fetch sub-phases. Sorting the doc ids would remove the need to sort hits on every sub-phase.", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r431773737", "createdAt": "2020-05-28T11:43:23Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,31 +142,47 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n-            SearchHit[] hits = new SearchHit[context.docIdsToLoadSize()];\n-            FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();\n+            // group docIds by segment in order to better use LRU cache\n+            Map<Integer, List<Integer>> segmentTasks = new HashMap<>();\n+            Map<Integer, Integer> docIdToIndex = new HashMap<>();\n             for (int index = 0; index < context.docIdsToLoadSize(); index++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65132dfd9bf1f71a17cc2be2033836bb0b9f3bfc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTg4MQ==", "bodyText": "We also need to preserve the original order of hits in the response so sorting the doc ids is only internal (for fetching stored values and executing sub-phases). The original order must be restored when setting the hits in the response.", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r432285881", "createdAt": "2020-05-29T06:45:11Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,31 +142,47 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n-            SearchHit[] hits = new SearchHit[context.docIdsToLoadSize()];\n-            FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();\n+            // group docIds by segment in order to better use LRU cache\n+            Map<Integer, List<Integer>> segmentTasks = new HashMap<>();\n+            Map<Integer, Integer> docIdToIndex = new HashMap<>();\n             for (int index = 0; index < context.docIdsToLoadSize(); index++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3MzczNw=="}, "originalCommit": {"oid": "65132dfd9bf1f71a17cc2be2033836bb0b9f3bfc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NzY3MQ==", "bodyText": "Thanks for you comment @jimczi. Sort the doc ids to load seems better. But if we change the order of doc ids, the order of the search hits will relatedly be changed, it would cause a lot of test cases to fail, such as testInsideTerms.", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r432287671", "createdAt": "2020-05-29T06:50:06Z", "author": {"login": "boicehuang"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,31 +142,47 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n-            SearchHit[] hits = new SearchHit[context.docIdsToLoadSize()];\n-            FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();\n+            // group docIds by segment in order to better use LRU cache\n+            Map<Integer, List<Integer>> segmentTasks = new HashMap<>();\n+            Map<Integer, Integer> docIdToIndex = new HashMap<>();\n             for (int index = 0; index < context.docIdsToLoadSize(); index++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3MzczNw=="}, "originalCommit": {"oid": "65132dfd9bf1f71a17cc2be2033836bb0b9f3bfc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMzcyNg==", "bodyText": "But if we change the order of doc ids, the order of the search hits will relatedly be changed, it would cause a lot of test cases to fail, such as testInsideTerms.\n\nSee my previous comment.\nWe can change the order in the fetch phase but we have to preserve the original order in the response. The final hits must be re-sorted based on their original order in the request (context.docIdsToLoad).", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r432303726", "createdAt": "2020-05-29T07:28:22Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,31 +142,47 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n-            SearchHit[] hits = new SearchHit[context.docIdsToLoadSize()];\n-            FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();\n+            // group docIds by segment in order to better use LRU cache\n+            Map<Integer, List<Integer>> segmentTasks = new HashMap<>();\n+            Map<Integer, Integer> docIdToIndex = new HashMap<>();\n             for (int index = 0; index < context.docIdsToLoadSize(); index++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3MzczNw=="}, "originalCommit": {"oid": "65132dfd9bf1f71a17cc2be2033836bb0b9f3bfc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTY1NzQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo0MTozM1rOGjqyqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo0MTozM1rOGjqyqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1NDQ0Mw==", "bodyText": "You can retrieve the array list once ?", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r440054443", "createdAt": "2020-06-15T09:41:33Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -161,7 +177,10 @@ public void execute(SearchContext context) {\n                         storedToRequestedFields, subReaderContext);\n                 }\n \n-                hits[index] = searchHit;\n+                sortedHits[index] = searchHit;\n+                for (int i = 0; i < docIdToIndex.get(docId).size(); i++) {\n+                    hits[docIdToIndex.get(docId).get(i)] = searchHit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "212df2afeaf340787290c821ee9e71a3457fa53d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTY2NDczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo0MzozMFrOGjq3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1MzowOVrOGk8Oiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1NTYwNw==", "bodyText": "I wonder if it'd be better to use a static inner class and a custom comparator ?", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r440055607", "createdAt": "2020-06-15T09:43:30Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +142,27 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] sortedDocIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            Arrays.sort(sortedDocIds);\n+\n+            // preserve the original order of hits in inverted index\n+            Map<Integer, ArrayList<Integer>> docIdToIndex = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "212df2afeaf340787290c821ee9e71a3457fa53d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4ODY4Mw==", "bodyText": "It seems better to preserve the original order in a custom comparator than using a hash map. I am going to update it.", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r441388683", "createdAt": "2020-06-17T08:53:09Z", "author": {"login": "boicehuang"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +142,27 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] sortedDocIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            Arrays.sort(sortedDocIds);\n+\n+            // preserve the original order of hits in inverted index\n+            Map<Integer, ArrayList<Integer>> docIdToIndex = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1NTYwNw=="}, "originalCommit": {"oid": "212df2afeaf340787290c821ee9e71a3457fa53d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDM4MzUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzowMjozMVrOGkFkRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzowMjozMVrOGkFkRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzEyNw==", "bodyText": "It would be nice if these fetch sub phases, which implement hitsExecute (plural), could also benefit from locality. Currently they each loop through the hits array separately, so any cached data from processing a hit may be lost by the time the next fetch phase is run.\nI think this is a distinct idea from this PR though, I filed the separate issue #58155.", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r440493127", "createdAt": "2020-06-15T23:02:31Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -172,7 +191,7 @@ public void execute(SearchContext context) {\n             }\n \n             for (FetchSubPhase fetchSubPhase : fetchSubPhases) {\n-                fetchSubPhase.hitsExecute(context, hits);\n+                fetchSubPhase.hitsExecute(context, sortedHits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "212df2afeaf340787290c821ee9e71a3457fa53d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk2MDI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozMzoxMVrOGlQAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDo1MDo1N1rOGlqClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMjcyMQ==", "bodyText": "Sorry I wasn't clear. I was more thinking of something like this:\nstatic class DocIdAndIndex implements Comparable<DocIdAndIndex> {\n        final int docId;\n        final int index;\n\n        DocIdAndIndex(int docId, int index) {\n            this.docId = docId;\n            this.index = index;\n        }\n\n\n        @Override\n        public int compareTo(DocIdAndIndex o) {\n            return Integer.compare(docId, o.docId);\n        }\n}\n....\n  DocIdAndIndex[] docs = new DocIdAndIndex[context.docIdsToLoadSize()]; \n  for (int index = 0; index < context.docIdsToLoadSize(); index++) {\n    docs[index] = new DocIdAndIndex(context.docIdsToLoad()[context.docIdsToLoadFrom() + index], index);\n  }\n  Arrays.sort(docs)\n\nYou can then use docs to retrieve the original index and you don't have the array twice ?", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r441712721", "createdAt": "2020-06-17T17:33:11Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +143,17 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] docIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            int[] sortedDocIds = docIds.clone();\n+            Arrays.sort(sortedDocIds);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17b892b26148f590723f5b14da8c456c989062bc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwNjM2NQ==", "bodyText": "Thanks @jimczi . I have one question here. If we use a custom comparator, the average performance of timSort or quicksort is O(nlogn).but the complexity of constructing a hashmap is O(n). Maybe we can have a better performance if we use the latter?", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r441906365", "createdAt": "2020-06-18T00:39:31Z", "author": {"login": "boicehuang"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +143,17 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] docIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            int[] sortedDocIds = docIds.clone();\n+            Arrays.sort(sortedDocIds);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMjcyMQ=="}, "originalCommit": {"oid": "17b892b26148f590723f5b14da8c456c989062bc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzNjU1NA==", "bodyText": "I don't see how you'd avoid the initial sort by doc ids ? The proposed solution requires to sort the array once and avoids building an hashmap, isn't it better ?", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r442036554", "createdAt": "2020-06-18T07:53:59Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +143,17 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] docIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            int[] sortedDocIds = docIds.clone();\n+            Arrays.sort(sortedDocIds);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMjcyMQ=="}, "originalCommit": {"oid": "17b892b26148f590723f5b14da8c456c989062bc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMTg2Mg==", "bodyText": "In the first commit, I built the hashmap with the array without sorting it. It only took O(n) to iterate the array once. I think using a hashmap may be better? Do we have to do the sorting? Does using a hashmap have a different impact on every sub-phase?", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r442121862", "createdAt": "2020-06-18T10:17:11Z", "author": {"login": "boicehuang"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +143,17 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] docIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            int[] sortedDocIds = docIds.clone();\n+            Arrays.sort(sortedDocIds);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMjcyMQ=="}, "originalCommit": {"oid": "17b892b26148f590723f5b14da8c456c989062bc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzOTI4Ng==", "bodyText": "We still need to provide the array of SearchHit sorted by doc ids to the sub fetch phase (hitsExecute) so I don't see how the hashmap would be enough. The current change allows to sort the array once before executing the sub fetch phase so it's an enhancement. Also note that the array is limited to 10k by default since we have a soft limit for the number of hits that can retrieved.", "url": "https://github.com/elastic/elasticsearch/pull/57273#discussion_r442139286", "createdAt": "2020-06-18T10:50:57Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -140,13 +143,17 @@ public void execute(SearchContext context) {\n         }\n \n         try {\n+            int[] docIds = Arrays.copyOfRange(context.docIdsToLoad(), context.docIdsToLoadFrom(), context.docIdsToLoadSize());\n+            int[] sortedDocIds = docIds.clone();\n+            Arrays.sort(sortedDocIds);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxMjcyMQ=="}, "originalCommit": {"oid": "17b892b26148f590723f5b14da8c456c989062bc"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3834, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}