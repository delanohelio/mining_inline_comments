{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODEzODk2", "number": 51514, "title": "X-Pack SAML IdP Plugin", "bodyText": "This introduces a new sub-plugin to X-Pack that implements the backend\nfor a basic IdP built on top of the X-Pack security primitives.\nIn this commit there is a mostly empty plugin implementation and a\nclass the implements the minimum necessary to generate a SAML 2.0\nauthentication \"Response\".", "createdAt": "2020-01-28T03:59:09Z", "url": "https://github.com/elastic/elasticsearch/pull/51514", "merged": true, "mergeCommit": {"oid": "3f32f5d79197013f37bd73b3b16617834a64a1be"}, "closed": true, "closedAt": "2020-01-30T11:00:06Z", "author": {"login": "tvernum"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-pJwiAH2gAyMzY3ODEzODk2OjA0OWJhNTY0NmY3NDJmNWE1NmEzMzQzMjhiZmZmYmE4MjFjNDAwYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_RcdpAH2gAyMzY3ODEzODk2OjYyYmFmZGQyOTVhNjhjMTNlNjc2OGI2ZTYyNjk5MjMxODM2Y2RmYTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "049ba5646f742f5a56a334328bfffba821c400b1", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/049ba5646f742f5a56a334328bfffba821c400b1", "committedDate": "2020-01-28T03:55:00Z", "message": "X-Pack SAML IdP Plugin\n\nThis introduces a new sub-plugin to X-Pack that implements the backend\nfor a basic IdP built on top of the X-Pack security primitives.\n\nIn this commit there is a mostly empty plugin implementation and a\nclass the implements the minimum necessary to generate a SAML 2.0\nauthentication \"Response\"."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTE4ODM1", "url": "https://github.com/elastic/elasticsearch/pull/51514#pullrequestreview-349118835", "createdAt": "2020-01-28T04:00:48Z", "commit": {"oid": "049ba5646f742f5a56a334328bfffba821c400b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDowMDo0OFrOFiYrLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDowMDo0OFrOFiYrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDE3Mg==", "bodyText": "I've moved this class to core. It seemed silly to duplicate it when it was generally useful.", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371600172", "createdAt": "2020-01-28T04:00:48Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/support/RestorableContextClassLoader.java", "diffHunk": "@@ -3,7 +3,7 @@\n  * or more contributor license agreements. Licensed under the Elastic License;\n  * you may not use this file except in compliance with the Elastic License.\n  */\n-package org.elasticsearch.xpack.security.support;\n+package org.elasticsearch.xpack.core.security.support;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049ba5646f742f5a56a334328bfffba821c400b1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/1bdccceb9a33db0e1362de84560b6cfb321af0bf", "committedDate": "2020-01-28T04:02:40Z", "message": "Update comments in forbidden signatures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDM1ODk4", "url": "https://github.com/elastic/elasticsearch/pull/51514#pullrequestreview-349435898", "createdAt": "2020-01-28T14:52:46Z", "commit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo1Mjo0N1rOFin6Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjowMzo0OVrOFi9cyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0OTc3NA==", "bodyText": "add an empty private constructor", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371849774", "createdAt": "2020-01-28T14:52:47Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlInit.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchSecurityException;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.xpack.core.security.support.RestorableContextClassLoader;\n+import org.opensaml.core.config.InitializationService;\n+import org.slf4j.LoggerFactory;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class SamlInit {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MDczMA==", "bodyText": "this can be static too", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371850730", "createdAt": "2020-01-28T14:54:10Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+\n+/**\n+ * SAML 2.0 configuration information about a specific service provider\n+ */\n+public interface SamlServiceProvider {\n+    String getEntityId();\n+\n+    URI getAssertionConsumerService();\n+\n+    ReadableDuration getAuthnExpiry();\n+\n+    class AttributeNames {\n+        public final String groups = \"https://saml.elasticsearch.org/attributes/groups\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzE3Ng==", "bodyText": "I think it would make sense to have a setting on the IDP side that controls the assertion lifetime and maybe allow sp specific configuration overrides. I can't think of a valid reason or use case to extend the lifetime for specific SPs though", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371867176", "createdAt": "2020-01-28T15:19:52Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+\n+/**\n+ * SAML 2.0 configuration information about a specific service provider\n+ */\n+public interface SamlServiceProvider {\n+    String getEntityId();\n+\n+    URI getAssertionConsumerService();\n+\n+    ReadableDuration getAuthnExpiry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MDA2OA==", "bodyText": "nitpicking much but I prefer URNs as folks tend to treat ^^ as URLs instead of URIs", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371870068", "createdAt": "2020-01-28T15:24:12Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.joda.time.ReadableDuration;\n+\n+import java.net.URI;\n+\n+/**\n+ * SAML 2.0 configuration information about a specific service provider\n+ */\n+public interface SamlServiceProvider {\n+    String getEntityId();\n+\n+    URI getAssertionConsumerService();\n+\n+    ReadableDuration getAuthnExpiry();\n+\n+    class AttributeNames {\n+        public final String groups = \"https://saml.elasticsearch.org/attributes/groups\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NTcwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Utility object for contructing new objects and values in a SAML2.0 / OpenSAML context\n          \n          \n            \n             * Utility object for constructing new objects and values in a SAML2.0 / OpenSAML context", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r371875707", "createdAt": "2020-01-28T15:32:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/SamlFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.common.hash.MessageDigests;\n+import org.opensaml.core.xml.XMLObject;\n+import org.opensaml.core.xml.XMLObjectBuilderFactory;\n+import org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport;\n+\n+import javax.xml.namespace.QName;\n+import java.security.SecureRandom;\n+\n+/**\n+ * Utility object for contructing new objects and values in a SAML2.0 / OpenSAML context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5Mzk5Ng==", "bodyText": "In the case where user.getGroups() returns an empty set/list, this will produce an Attribute node with no AttributeValue . While the specificatio 2.7.3.1 allows for Attributes without values, the semantics are left to the implementer. I would argue that for an attribute that denotes group membership, the presence or absence of the attribute is of no interest to an SP, they would only care about its values. As such, I suggest we do not send the attribute at all.\nOur SP implementation will handle an attribute with no values gracefully, but I'm not sure all SPs will", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372193996", "createdAt": "2020-01-29T05:23:52Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AttributeStatement statement = samlFactory.object(AttributeStatement.class, AttributeStatement.DEFAULT_ELEMENT_NAME);\n+        statement.getAttributes().add(buildAttribute(serviceProvider.getAttributeNames().groups, \"groups\", user.getGroups()));\n+        return statement;\n+    }\n+\n+    private Attribute buildAttribute(String formalName, String friendlyName, Collection<String> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTA2Mw==", "bodyText": "If we don't create an empty attribute for no values ( see above ) then we should not add an AttributeStatement to the Assertion either, because the assertion schema has\n<choice maxOccurs=\"unbounded\">\n  <element ref=\"saml:Attribute\"/>\n  <element ref=\"saml:EncryptedAttribute\"/>\n</choice>\n\nwhich , in absence of an explicit minOccurs, inherits the default value of 1", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372195063", "createdAt": "2020-01-29T05:26:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NjYzMg==", "bodyText": "I think we should allow for per SP configuration ( not direct feedback for this PR ) and that we should default to transient NameIDs ( so that we can have logout ) and the principal expressed as an attribute. I believe this buys us maximum interoperability (it usually is easier to map an attribute than the NameID value on the SP side )", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372196632", "createdAt": "2020-01-29T05:34:20Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5Njc2NA==", "bodyText": "see comment about default lifetime being expressed as an idp configuration", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372196764", "createdAt": "2020-01-29T05:35:02Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzA5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Attribute statement = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);\n          \n          \n            \n                    final Attribute attribute = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372197098", "createdAt": "2020-01-29T05:36:38Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AttributeStatement statement = samlFactory.object(AttributeStatement.class, AttributeStatement.DEFAULT_ELEMENT_NAME);\n+        statement.getAttributes().add(buildAttribute(serviceProvider.getAttributeNames().groups, \"groups\", user.getGroups()));\n+        return statement;\n+    }\n+\n+    private Attribute buildAttribute(String formalName, String friendlyName, Collection<String> values) {\n+        final Attribute statement = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzM3MA==", "bodyText": "set NameFormat to urn:oasis:names:tc:SAML:2.0:attrname-format:uri\nattribute.setNameFormat(Attribute.URI_REFERENCE);", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372197370", "createdAt": "2020-01-29T05:37:46Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        return subject;\n+    }\n+\n+    private AttributeStatement buildAttributes(UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AttributeStatement statement = samlFactory.object(AttributeStatement.class, AttributeStatement.DEFAULT_ELEMENT_NAME);\n+        statement.getAttributes().add(buildAttribute(serviceProvider.getAttributeNames().groups, \"groups\", user.getGroups()));\n+        return statement;\n+    }\n+\n+    private Attribute buildAttribute(String formalName, String friendlyName, Collection<String> values) {\n+        final Attribute statement = samlFactory.object(Attribute.class, Attribute.DEFAULT_ELEMENT_NAME);\n+        statement.setName(formalName);\n+        statement.setFriendlyName(friendlyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTAxNw==", "bodyText": "We would probably need an instance of DocumentBuilderFactory when parsing authentication requests, we could switch to using that at that point. Is it worth adding a comment that this should be used in tests only ?", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372199017", "createdAt": "2020-01-29T05:45:53Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/support/XmlValidator.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.support;\n+\n+import org.elasticsearch.core.internal.io.IOUtils;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSResourceResolver;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Validates an XML stream against a specified schema.\n+ */\n+public class XmlValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDE2NA==", "bodyText": "Since we get to do the naming here (yay), should we settle to something different than groups ? I'm torn as it \"makes sense\" for our SP implementation (see attributes.groups: ) but as an IDP, will the information that we will encode here denote groups or rather roles ?", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372200164", "createdAt": "2020-01-29T05:51:09Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/UserServiceAuthentication.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+\n+import java.util.Set;\n+\n+/**\n+ * Lightweight representation of a user that has authenticated to the IdP in the context of a specific service provider\n+ */\n+public interface UserServiceAuthentication {\n+\n+    String getPrincipal();\n+    Set<String> getGroups();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTY1Mg==", "bodyText": "The Assertion must contain an <AuthnStatement> (  and that should contain a SessionIndex since we plan to support SLO )", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372201652", "createdAt": "2020-01-29T05:58:26Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMjY5OQ==", "bodyText": "subject should contain an <SubjectConfirmation> with\n\na Method set to urn:oasis:names:tc:SAML:2.0:cm:bearer\na <SubjectConfirmationData> element with:\n\na Recipient attribute pointing to the SP ACS\na NotOnOrAfter\nan InResponseTo with the request ID ( if this is SP initiated )", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372202699", "createdAt": "2020-01-29T06:03:49Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(user));\n+        assertion.getAttributeStatements().add(buildAttributes(user));\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(UserServiceAuthentication user) {\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d71386556502527f2a90af88d9cab50e320a5e4", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/5d71386556502527f2a90af88d9cab50e320a5e4", "committedDate": "2020-01-29T11:37:38Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2756993c3095f4c14855e382f2cb452b24aa6839", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/2756993c3095f4c14855e382f2cb452b24aa6839", "committedDate": "2020-01-29T11:38:05Z", "message": "Merge branch 'master' into feature-internal-idp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/1f1fbd135ade0abd9c7182e1316eaf10ad660125", "committedDate": "2020-01-29T12:24:42Z", "message": "Update plugin security policy for classloader move"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMTA5Njc2", "url": "https://github.com/elastic/elasticsearch/pull/51514#pullrequestreview-350109676", "createdAt": "2020-01-29T13:38:07Z", "commit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzozODowN1rOFjInKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDoyMjo0MlrOFjKFrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4NTU3Ng==", "bodyText": "We should also add a SessionIndex ( with the same value as the Assertion ID see 2.7.2", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372385576", "createdAt": "2020-01-29T13:38:07Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwMjgyOA==", "bodyText": "we should aim so that we will never have to use such a declaration", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372402828", "createdAt": "2020-01-29T14:10:30Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {\n+        if (authenticationMethods.contains(AuthenticationMethod.PASSWORD)) {\n+            if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+                return AuthnContext.IP_PASSWORD_AUTHN_CTX;\n+            } else if (networkControls.contains(NetworkControl.TLS)) {\n+                return AuthnContext.PPT_AUTHN_CTX;\n+            } else {\n+                return AuthnContext.PASSWORD_AUTHN_CTX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwMzA4NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372403085", "createdAt": "2020-01-29T14:10:58Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwOTc3NA==", "bodyText": "We can defer the decision to a later point I guess", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372409774", "createdAt": "2020-01-29T14:22:42Z", "author": {"login": "jkakavas"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/UserServiceAuthentication.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+\n+import java.util.Set;\n+\n+/**\n+ * Lightweight representation of a user that has authenticated to the IdP in the context of a specific service provider\n+ */\n+public interface UserServiceAuthentication {\n+\n+    String getPrincipal();\n+    Set<String> getGroups();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDE2NA=="}, "originalCommit": {"oid": "1bdccceb9a33db0e1362de84560b6cfb321af0bf"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTU0ODU5", "url": "https://github.com/elastic/elasticsearch/pull/51514#pullrequestreview-350554859", "createdAt": "2020-01-30T02:48:29Z", "commit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjo0ODoyOVrOFjeCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjo0ODoyOVrOFjeCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczNjU4MQ==", "bodyText": "I've assumed Password + IP Filter should be treated as a higher class than Password + TLS, but ideally there would be a class for IP_PPT_AUTHN_CTX  instead.", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372736581", "createdAt": "2020-01-30T02:48:29Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {\n+        if (authenticationMethods.contains(AuthenticationMethod.PASSWORD)) {\n+            if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+                return AuthnContext.IP_PASSWORD_AUTHN_CTX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTU1MDE1", "url": "https://github.com/elastic/elasticsearch/pull/51514#pullrequestreview-350555015", "createdAt": "2020-01-30T02:49:04Z", "commit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjo0OTowNFrOFjeCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjo0OTowNFrOFjeCxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczNjcxMA==", "bodyText": "This is wrong. Will fix.", "url": "https://github.com/elastic/elasticsearch/pull/51514#discussion_r372736710", "createdAt": "2020-01-30T02:49:04Z", "author": {"login": "tvernum"}, "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SuccessfulAuthenticationResponseMessageBuilder.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.authn;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.xpack.idp.authc.AuthenticationMethod;\n+import org.elasticsearch.xpack.idp.authc.NetworkControl;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AttributeValue;\n+import org.opensaml.saml.saml2.core.Audience;\n+import org.opensaml.saml.saml2.core.AudienceRestriction;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Conditions;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.Subject;\n+import org.opensaml.saml.saml2.core.SubjectConfirmation;\n+import org.opensaml.saml.saml2.core.SubjectConfirmationData;\n+\n+import java.time.Clock;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+/**\n+ * Builds SAML 2.0 {@link Response} objects for successful authentication results.\n+ */\n+public class SuccessfulAuthenticationResponseMessageBuilder {\n+\n+    private final SamlFactory samlFactory;\n+    private final Clock clock;\n+    private final SamlIdentityProvider idp;\n+\n+    public SuccessfulAuthenticationResponseMessageBuilder(SamlFactory samlFactory, Clock clock, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.clock = clock;\n+        this.idp = idp;\n+    }\n+\n+    public Response build(UserServiceAuthentication user, @Nullable AuthnRequest request) {\n+        final DateTime now = now();\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final Response response = samlFactory.object(Response.class, Response.DEFAULT_ELEMENT_NAME);\n+        response.setID(samlFactory.secureIdentifier());\n+        if (request != null) {\n+            response.setInResponseTo(request.getID());\n+        }\n+        response.setIssuer(buildIssuer());\n+        response.setIssueInstant(now);\n+        response.setStatus(buildStatus());\n+        response.setDestination(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final Assertion assertion = samlFactory.object(Assertion.class, Assertion.DEFAULT_ELEMENT_NAME);\n+        assertion.setID(samlFactory.secureIdentifier());\n+        assertion.setIssuer(buildIssuer());\n+        assertion.setIssueInstant(now);\n+        assertion.setConditions(buildConditions(now, serviceProvider));\n+        assertion.setSubject(buildSubject(now, user, request));\n+        assertion.getAuthnStatements().add(buildAuthnStatement(now, user));\n+        final AttributeStatement attributes = buildAttributes(user);\n+        if (attributes != null) {\n+            assertion.getAttributeStatements().add(attributes);\n+        }\n+        response.getAssertions().add(assertion);\n+\n+        return sign(response);\n+    }\n+\n+    private Response sign(Response response) {\n+        // TODO\n+        return response;\n+    }\n+\n+    private Conditions buildConditions(DateTime now, SamlServiceProvider serviceProvider) {\n+        final Audience spAudience = samlFactory.object(Audience.class, Audience.DEFAULT_ELEMENT_NAME);\n+        spAudience.setAudienceURI(serviceProvider.getEntityId());\n+\n+        final AudienceRestriction restriction = samlFactory.object(AudienceRestriction.class, AudienceRestriction.DEFAULT_ELEMENT_NAME);\n+        restriction.getAudiences().add(spAudience);\n+\n+        final Conditions conditions = samlFactory.object(Conditions.class, Conditions.DEFAULT_ELEMENT_NAME);\n+        conditions.setNotBefore(now);\n+        conditions.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        conditions.getAudienceRestrictions().add(restriction);\n+        return conditions;\n+    }\n+\n+    private DateTime now() {\n+        return new DateTime(clock.millis(), DateTimeZone.UTC);\n+    }\n+\n+    private Subject buildSubject(DateTime now, UserServiceAuthentication user, AuthnRequest request) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+\n+        final NameID nameID = samlFactory.object(NameID.class, NameID.DEFAULT_ELEMENT_NAME);\n+        nameID.setFormat(NameIDType.PERSISTENT);\n+        nameID.setValue(user.getPrincipal());\n+\n+        final Subject subject = samlFactory.object(Subject.class, Subject.DEFAULT_ELEMENT_NAME);\n+        subject.setNameID(nameID);\n+\n+        final SubjectConfirmationData data = samlFactory.object(SubjectConfirmationData.class,\n+            SubjectConfirmationData.DEFAULT_ELEMENT_NAME);\n+        if (request != null) {\n+            data.setInResponseTo(request.getID());\n+        }\n+        data.setNotBefore(now);\n+        data.setNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+        data.setRecipient(serviceProvider.getAssertionConsumerService().toString());\n+\n+        final SubjectConfirmation confirmation = samlFactory.object(SubjectConfirmation.class, SubjectConfirmation.DEFAULT_ELEMENT_NAME);\n+        confirmation.setMethod(SubjectConfirmation.METHOD_BEARER);\n+        confirmation.setSubjectConfirmationData(data);\n+\n+        subject.getSubjectConfirmations().add(confirmation);\n+        return subject;\n+    }\n+\n+    private AuthnStatement buildAuthnStatement(DateTime now, UserServiceAuthentication user) {\n+        final SamlServiceProvider serviceProvider = user.getServiceProvider();\n+        final AuthnStatement statement = samlFactory.object(AuthnStatement.class, AuthnStatement.DEFAULT_ELEMENT_NAME);\n+        statement.setAuthnInstant(now);\n+        statement.setSessionNotOnOrAfter(now.plus(serviceProvider.getAuthnExpiry()));\n+\n+        final AuthnContext context = samlFactory.object(AuthnContext.class, AuthnContext.DEFAULT_ELEMENT_NAME);\n+        final AuthnContextClassRef classRef = samlFactory.object(AuthnContextClassRef.class, AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        classRef.setAuthnContextClassRef(resolveAuthnClass(user.getAuthenticationMethods(), user.getNetworkControls()));\n+        context.setAuthnContextClassRef(classRef);\n+        statement.setAuthnContext(context);\n+\n+        return statement;\n+    }\n+\n+    private String resolveAuthnClass(Set<AuthenticationMethod> authenticationMethods, Set<NetworkControl> networkControls) {\n+        if (authenticationMethods.contains(AuthenticationMethod.PASSWORD)) {\n+            if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+                return AuthnContext.IP_PASSWORD_AUTHN_CTX;\n+            } else if (networkControls.contains(NetworkControl.TLS)) {\n+                return AuthnContext.PPT_AUTHN_CTX;\n+            } else {\n+                return AuthnContext.PASSWORD_AUTHN_CTX;\n+            }\n+        } else if (authenticationMethods.contains(AuthenticationMethod.KERBEROS)) {\n+            return AuthnContext.KERBEROS_AUTHN_CTX;\n+        } else if (authenticationMethods.contains(AuthenticationMethod.TLS_CLIENT_AUTH) && networkControls.contains(NetworkControl.TLS)) {\n+            return AuthnContext.TLS_CLIENT_AUTHN_CTX;\n+        } else if (authenticationMethods.contains(AuthenticationMethod.PRIOR_SESSION)) {\n+            return AuthnContext.PREVIOUS_SESSION_AUTHN_CTX;\n+        } else if (networkControls.contains(NetworkControl.IP_FILTER)) {\n+            return AuthnContext.IP_PASSWORD_AUTHN_CTX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1fbd135ade0abd9c7182e1316eaf10ad660125"}, "originalPosition": 169}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62bafdd295a68c13e6768b6e62699231836cdfa4", "author": {"user": {"login": "tvernum", "name": "Tim Vernum"}}, "url": "https://github.com/elastic/elasticsearch/commit/62bafdd295a68c13e6768b6e62699231836cdfa4", "committedDate": "2020-01-30T02:51:38Z", "message": "Fix IP filter auth class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3157, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}