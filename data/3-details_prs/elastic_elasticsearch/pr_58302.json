{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Mjg4NTc4", "number": 58302, "title": "Introduce DataFrameAnalyticsConfig update API", "bodyText": "This PR introduces the Update API for data frame analytics.\nInitially, 3 fields are made updatable: description, model_memory_limit and allow_lazy_start.\nmodel_memory_limit can only be updated when analytics is stopped.\ndescription and allow_lazy_start can always be updated.\nRelates #45720", "createdAt": "2020-06-18T07:40:49Z", "url": "https://github.com/elastic/elasticsearch/pull/58302", "merged": true, "mergeCommit": {"oid": "3953de4c9885f085874b1e844b3e1c98a5c6a417"}, "closed": true, "closedAt": "2020-06-29T07:26:31Z", "author": {"login": "przemekwitek"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcscXbggBqjM0NTc1Nzc4NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvDUiMAFqTQzODI5Nzg1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c15ea6099ea768c0fb1a908037f5de0f987591c0", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/c15ea6099ea768c0fb1a908037f5de0f987591c0", "committedDate": "2020-06-18T09:40:38Z", "message": "Remove XXX"}, "afterCommit": {"oid": "8e17b7797f3243789bc8e4f73aa75184857d5b90", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/8e17b7797f3243789bc8e4f73aa75184857d5b90", "committedDate": "2020-06-18T11:01:31Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e17b7797f3243789bc8e4f73aa75184857d5b90", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/8e17b7797f3243789bc8e4f73aa75184857d5b90", "committedDate": "2020-06-18T11:01:31Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "2805fcd93b5093c3f39ff488029849e44ca6fed7", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/2805fcd93b5093c3f39ff488029849e44ca6fed7", "committedDate": "2020-06-18T11:11:29Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2805fcd93b5093c3f39ff488029849e44ca6fed7", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/2805fcd93b5093c3f39ff488029849e44ca6fed7", "committedDate": "2020-06-18T11:11:29Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "68fb28750d59b1e903c9c96827a350aafc579935", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/68fb28750d59b1e903c9c96827a350aafc579935", "committedDate": "2020-06-18T11:39:17Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68fb28750d59b1e903c9c96827a350aafc579935", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/68fb28750d59b1e903c9c96827a350aafc579935", "committedDate": "2020-06-18T11:39:17Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "5cc99febad3b8f297b85f58dad5855f07e6d6a83", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/5cc99febad3b8f297b85f58dad5855f07e6d6a83", "committedDate": "2020-06-18T13:30:10Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cc99febad3b8f297b85f58dad5855f07e6d6a83", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/5cc99febad3b8f297b85f58dad5855f07e6d6a83", "committedDate": "2020-06-18T13:30:10Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "065a00d56f64a9bbdd1f13d2f0a97044f4f14c25", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/065a00d56f64a9bbdd1f13d2f0a97044f4f14c25", "committedDate": "2020-06-18T13:31:22Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "065a00d56f64a9bbdd1f13d2f0a97044f4f14c25", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/065a00d56f64a9bbdd1f13d2f0a97044f4f14c25", "committedDate": "2020-06-18T13:31:22Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "934f68aaeaf103ff83e9fbb4f5d18d03db97bdc9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/934f68aaeaf103ff83e9fbb4f5d18d03db97bdc9", "committedDate": "2020-06-18T13:42:05Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "934f68aaeaf103ff83e9fbb4f5d18d03db97bdc9", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/934f68aaeaf103ff83e9fbb4f5d18d03db97bdc9", "committedDate": "2020-06-18T13:42:05Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "4d49fb83f97e23d026d5bd5f860b183d729cb731", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d49fb83f97e23d026d5bd5f860b183d729cb731", "committedDate": "2020-06-23T07:52:56Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d49fb83f97e23d026d5bd5f860b183d729cb731", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/4d49fb83f97e23d026d5bd5f860b183d729cb731", "committedDate": "2020-06-23T07:52:56Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "31f43fdf13fad02236045336554482b96d67d412", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/31f43fdf13fad02236045336554482b96d67d412", "committedDate": "2020-06-23T11:27:09Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31f43fdf13fad02236045336554482b96d67d412", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/31f43fdf13fad02236045336554482b96d67d412", "committedDate": "2020-06-23T11:27:09Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "23299a52111dc90889e921a41c5775006c89759a", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/23299a52111dc90889e921a41c5775006c89759a", "committedDate": "2020-06-23T12:54:57Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23299a52111dc90889e921a41c5775006c89759a", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/23299a52111dc90889e921a41c5775006c89759a", "committedDate": "2020-06-23T12:54:57Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "50b649ec5bebe0a44c7d6bd5d450c2e5b0cde0d8", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/50b649ec5bebe0a44c7d6bd5d450c2e5b0cde0d8", "committedDate": "2020-06-23T18:03:19Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50b649ec5bebe0a44c7d6bd5d450c2e5b0cde0d8", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/50b649ec5bebe0a44c7d6bd5d450c2e5b0cde0d8", "committedDate": "2020-06-23T18:03:19Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "24c1b350237438a5e24460b167c3f5202ef78f17", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/24c1b350237438a5e24460b167c3f5202ef78f17", "committedDate": "2020-06-24T07:55:05Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24c1b350237438a5e24460b167c3f5202ef78f17", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/24c1b350237438a5e24460b167c3f5202ef78f17", "committedDate": "2020-06-24T07:55:05Z", "message": "Introduce DataFrameAnalyticsConfig update API"}, "afterCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/59b322175757e47639deda719ec80d98ee2ad026", "committedDate": "2020-06-25T07:37:28Z", "message": "Adjust method call after rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjI2MjQx", "url": "https://github.com/elastic/elasticsearch/pull/58302#pullrequestreview-438226241", "createdAt": "2020-06-26T11:40:37Z", "commit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo0MDozN1rOGpdwMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo1MTowMFrOGpeAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMjI3NA==", "bodyText": "change status to state", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446132274", "createdAt": "2020-06-26T11:40:37Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -74,6 +74,8 @@\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_LOADING_DATA = \"Started loading data\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_ANALYZING = \"Started analyzing\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_WRITING_RESULTS = \"Started writing results\";\n+    public static final String DATA_FRAME_ANALYTICS_CANNOT_UPDATE_IN_CURRENT_STATE =\n+        \"Cannot update analytics [{0}] while its status is {1}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMjYzNg==", "bodyText": "I also wonder here if it'd be more informative to say that we cannot update the job unless its in the stopped state. What do you think", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446132636", "createdAt": "2020-06-26T11:41:30Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -74,6 +74,8 @@\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_LOADING_DATA = \"Started loading data\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_ANALYZING = \"Started analyzing\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_WRITING_RESULTS = \"Started writing results\";\n+    public static final String DATA_FRAME_ANALYTICS_CANNOT_UPDATE_IN_CURRENT_STATE =\n+        \"Cannot update analytics [{0}] while its status is {1}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMjI3NA=="}, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMzIwMw==", "bodyText": "I'd rather we split this in 4 tests with names for each property that is updated. The reason I think that's beneficial, is that if the test fails, the test title immediately tells us what went wrong.", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446133203", "createdAt": "2020-06-26T11:42:51Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/DataFrameAnalyticsConfigUpdateTests.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe;\n+\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.test.AbstractSerializingTestCase;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfigTests.randomValidId;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+public class DataFrameAnalyticsConfigUpdateTests extends AbstractSerializingTestCase<DataFrameAnalyticsConfigUpdate> {\n+\n+    @Override\n+    protected DataFrameAnalyticsConfigUpdate doParseInstance(XContentParser parser) throws IOException {\n+        return DataFrameAnalyticsConfigUpdate.PARSER.apply(parser, null).build();\n+    }\n+\n+    @Override\n+    protected DataFrameAnalyticsConfigUpdate createTestInstance() {\n+        return randomUpdate(randomValidId());\n+    }\n+\n+    @Override\n+    protected Writeable.Reader<DataFrameAnalyticsConfigUpdate> instanceReader() {\n+        return DataFrameAnalyticsConfigUpdate::new;\n+    }\n+\n+    public static DataFrameAnalyticsConfigUpdate randomUpdate(String id) {\n+        DataFrameAnalyticsConfigUpdate.Builder builder = new DataFrameAnalyticsConfigUpdate.Builder(id);\n+        if (randomBoolean()) {\n+            builder.setDescription(randomAlphaOfLength(20));\n+        }\n+        if (randomBoolean()) {\n+            builder.setModelMemoryLimit(new ByteSizeValue(randomNonNegativeLong()));\n+        }\n+        if (randomBoolean()) {\n+            builder.setAllowLazyStart(randomBoolean());\n+        }\n+        return builder.build();\n+    }\n+\n+    public void testMergeWithConfig() {\n+        String id = randomValidId();\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNDQwNg==", "bodyText": "Also, if we keep as is, we should wrap {1}in square brackets.", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446134406", "createdAt": "2020-06-26T11:45:57Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -74,6 +74,8 @@\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_LOADING_DATA = \"Started loading data\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_ANALYZING = \"Started analyzing\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_WRITING_RESULTS = \"Started writing results\";\n+    public static final String DATA_FRAME_ANALYTICS_CANNOT_UPDATE_IN_CURRENT_STATE =\n+        \"Cannot update analytics [{0}] while its status is {1}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMjI3NA=="}, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNTA5NQ==", "bodyText": "We should be able to use the local get method to avoid having to handle parsing here.", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446135095", "createdAt": "2020-06-26T11:47:36Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/persistence/DataFrameAnalyticsConfigProvider.java", "diffHunk": "@@ -68,28 +77,116 @@ public DataFrameAnalyticsConfigProvider(Client client, NamedXContentRegistry xCo\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void put(DataFrameAnalyticsConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {\n-        String id = config.getId();\n-\n+    /**\n+     * Puts the given {@link DataFrameAnalyticsConfig} document into the config index.\n+     */\n+    public void put(DataFrameAnalyticsConfig config, Map<String, String> headers, ActionListener<DataFrameAnalyticsConfig> listener) {\n         if (headers.isEmpty() == false) {\n             // Filter any values in headers that aren't security fields\n             config = new DataFrameAnalyticsConfig.Builder(config)\n                 .setHeaders(filterSecurityHeaders(headers))\n                 .build();\n         }\n+        index(config, null, listener);\n+    }\n+\n+    /**\n+     * Updates the {@link DataFrameAnalyticsConfig} document in the config index using given {@link DataFrameAnalyticsConfigUpdate}.\n+     */\n+    public void update(DataFrameAnalyticsConfigUpdate update,\n+                       Map<String, String> headers,\n+                       ClusterState clusterState,\n+                       ActionListener<DataFrameAnalyticsConfig> listener) {\n+        String id = update.getId();\n+        GetRequest getRequest = new GetRequest(MlConfigIndex.indexName(), DataFrameAnalyticsConfig.documentId(id));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNTY2NQ==", "bodyText": "I would suggest adding a boolean requiresRestart() in DataFrameAnalyticsConfigUpdate. This will make the code more readable without the comment plus it will create a space ready for extending it with other properties that require restart.", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446135665", "createdAt": "2020-06-26T11:48:59Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/persistence/DataFrameAnalyticsConfigProvider.java", "diffHunk": "@@ -68,28 +77,116 @@ public DataFrameAnalyticsConfigProvider(Client client, NamedXContentRegistry xCo\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void put(DataFrameAnalyticsConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {\n-        String id = config.getId();\n-\n+    /**\n+     * Puts the given {@link DataFrameAnalyticsConfig} document into the config index.\n+     */\n+    public void put(DataFrameAnalyticsConfig config, Map<String, String> headers, ActionListener<DataFrameAnalyticsConfig> listener) {\n         if (headers.isEmpty() == false) {\n             // Filter any values in headers that aren't security fields\n             config = new DataFrameAnalyticsConfig.Builder(config)\n                 .setHeaders(filterSecurityHeaders(headers))\n                 .build();\n         }\n+        index(config, null, listener);\n+    }\n+\n+    /**\n+     * Updates the {@link DataFrameAnalyticsConfig} document in the config index using given {@link DataFrameAnalyticsConfigUpdate}.\n+     */\n+    public void update(DataFrameAnalyticsConfigUpdate update,\n+                       Map<String, String> headers,\n+                       ClusterState clusterState,\n+                       ActionListener<DataFrameAnalyticsConfig> listener) {\n+        String id = update.getId();\n+        GetRequest getRequest = new GetRequest(MlConfigIndex.indexName(), DataFrameAnalyticsConfig.documentId(id));\n+        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, ActionListener.wrap(\n+            getResponse -> {\n+\n+                // Fail the update request if the config to be updated doesn't exist\n+                if (getResponse.isExists() == false) {\n+                    listener.onFailure(ExceptionsHelper.missingDataFrameAnalytics(id));\n+                    return;\n+                }\n+\n+                // Parse the original config\n+                DataFrameAnalyticsConfig originalConfig;\n+                try {\n+                    try (InputStream stream = getResponse.getSourceAsBytesRef().streamInput();\n+                         XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n+                             .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {\n+                        originalConfig = DataFrameAnalyticsConfig.LENIENT_PARSER.apply(parser, null).build();\n+                    }\n+                } catch (IOException e) {\n+                    listener.onFailure(\n+                        new ElasticsearchParseException(\"Failed to parse data frame analytics configuration [\" + id + \"]\", e));\n+                    return;\n+                }\n+\n+                // Check that the update can be applied given current analytics state\n+                checkUpdateCanBeApplied(originalConfig, update, clusterState);\n+\n+                // Merge the original config with the given update object\n+                DataFrameAnalyticsConfig.Builder updatedConfigBuilder = update.mergeWithConfig(originalConfig);\n+                if (headers.isEmpty() == false) {\n+                    updatedConfigBuilder.setHeaders(filterSecurityHeaders(headers));\n+                }\n+                DataFrameAnalyticsConfig updatedConfig = updatedConfigBuilder.build();\n+\n+                // Index the update config\n+                index(updatedConfig, getResponse, listener);\n+            },\n+            listener::onFailure\n+        ));\n+    }\n+\n+    private static void checkUpdateCanBeApplied(DataFrameAnalyticsConfig originalConfig,\n+                                                DataFrameAnalyticsConfigUpdate update,\n+                                                ClusterState clusterState) {\n+        String analyticsId = update.getId();\n+        PersistentTasksCustomMetadata tasks = clusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n+        DataFrameAnalyticsState analyticsState = MlTasks.getDataFrameAnalyticsState(analyticsId, tasks);\n+        if (DataFrameAnalyticsState.STOPPED.equals(analyticsState)) {\n+            // Analytics is stopped, therefore it is safe to proceed with the udpate\n+            return;\n+        }\n+        // Changing model memory limit requires task restart, therefore it cannot be safely updated when the task is running\n+        if (update.getModelMemoryLimit() != null && update.getModelMemoryLimit().equals(originalConfig.getModelMemoryLimit()) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNjUxNg==", "bodyText": "Nice to use those 2 :-)", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446136516", "createdAt": "2020-06-26T11:51:00Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/persistence/DataFrameAnalyticsConfigProvider.java", "diffHunk": "@@ -68,28 +77,116 @@ public DataFrameAnalyticsConfigProvider(Client client, NamedXContentRegistry xCo\n         this.xContentRegistry = xContentRegistry;\n     }\n \n-    public void put(DataFrameAnalyticsConfig config, Map<String, String> headers, ActionListener<IndexResponse> listener) {\n-        String id = config.getId();\n-\n+    /**\n+     * Puts the given {@link DataFrameAnalyticsConfig} document into the config index.\n+     */\n+    public void put(DataFrameAnalyticsConfig config, Map<String, String> headers, ActionListener<DataFrameAnalyticsConfig> listener) {\n         if (headers.isEmpty() == false) {\n             // Filter any values in headers that aren't security fields\n             config = new DataFrameAnalyticsConfig.Builder(config)\n                 .setHeaders(filterSecurityHeaders(headers))\n                 .build();\n         }\n+        index(config, null, listener);\n+    }\n+\n+    /**\n+     * Updates the {@link DataFrameAnalyticsConfig} document in the config index using given {@link DataFrameAnalyticsConfigUpdate}.\n+     */\n+    public void update(DataFrameAnalyticsConfigUpdate update,\n+                       Map<String, String> headers,\n+                       ClusterState clusterState,\n+                       ActionListener<DataFrameAnalyticsConfig> listener) {\n+        String id = update.getId();\n+        GetRequest getRequest = new GetRequest(MlConfigIndex.indexName(), DataFrameAnalyticsConfig.documentId(id));\n+        executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, ActionListener.wrap(\n+            getResponse -> {\n+\n+                // Fail the update request if the config to be updated doesn't exist\n+                if (getResponse.isExists() == false) {\n+                    listener.onFailure(ExceptionsHelper.missingDataFrameAnalytics(id));\n+                    return;\n+                }\n+\n+                // Parse the original config\n+                DataFrameAnalyticsConfig originalConfig;\n+                try {\n+                    try (InputStream stream = getResponse.getSourceAsBytesRef().streamInput();\n+                         XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n+                             .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {\n+                        originalConfig = DataFrameAnalyticsConfig.LENIENT_PARSER.apply(parser, null).build();\n+                    }\n+                } catch (IOException e) {\n+                    listener.onFailure(\n+                        new ElasticsearchParseException(\"Failed to parse data frame analytics configuration [\" + id + \"]\", e));\n+                    return;\n+                }\n+\n+                // Check that the update can be applied given current analytics state\n+                checkUpdateCanBeApplied(originalConfig, update, clusterState);\n+\n+                // Merge the original config with the given update object\n+                DataFrameAnalyticsConfig.Builder updatedConfigBuilder = update.mergeWithConfig(originalConfig);\n+                if (headers.isEmpty() == false) {\n+                    updatedConfigBuilder.setHeaders(filterSecurityHeaders(headers));\n+                }\n+                DataFrameAnalyticsConfig updatedConfig = updatedConfigBuilder.build();\n+\n+                // Index the update config\n+                index(updatedConfig, getResponse, listener);\n+            },\n+            listener::onFailure\n+        ));\n+    }\n+\n+    private static void checkUpdateCanBeApplied(DataFrameAnalyticsConfig originalConfig,\n+                                                DataFrameAnalyticsConfigUpdate update,\n+                                                ClusterState clusterState) {\n+        String analyticsId = update.getId();\n+        PersistentTasksCustomMetadata tasks = clusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n+        DataFrameAnalyticsState analyticsState = MlTasks.getDataFrameAnalyticsState(analyticsId, tasks);\n+        if (DataFrameAnalyticsState.STOPPED.equals(analyticsState)) {\n+            // Analytics is stopped, therefore it is safe to proceed with the udpate\n+            return;\n+        }\n+        // Changing model memory limit requires task restart, therefore it cannot be safely updated when the task is running\n+        if (update.getModelMemoryLimit() != null && update.getModelMemoryLimit().equals(originalConfig.getModelMemoryLimit()) == false) {\n+            throw ExceptionsHelper.conflictStatusException(\n+                Messages.getMessage(Messages.DATA_FRAME_ANALYTICS_CANNOT_UPDATE_IN_CURRENT_STATE, analyticsId, analyticsState));\n+        }\n+    }\n+\n+    /**\n+     * Indexes the new version of {@link DataFrameAnalyticsConfig} document into the config index.\n+     *\n+     * @param config config object to be indexed\n+     * @param getResponse {@link GetResponse} coming from requesting the previous version of the config.\n+     *                    If null, this config is indexed for the first time\n+     * @param listener listener to be called after indexing\n+     */\n+    private void index(DataFrameAnalyticsConfig config,\n+                       @Nullable GetResponse getResponse,\n+                       ActionListener<DataFrameAnalyticsConfig> listener) {\n         try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n             config.toXContent(builder, new ToXContent.MapParams(TO_XCONTENT_PARAMS));\n             IndexRequest indexRequest = new IndexRequest(MlConfigIndex.indexName())\n-                    .id(DataFrameAnalyticsConfig.documentId(config.getId()))\n-                    .opType(DocWriteRequest.OpType.CREATE)\n-                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n-                    .source(builder);\n+                .id(DataFrameAnalyticsConfig.documentId(config.getId()))\n+                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n+                .source(builder);\n+            if (getResponse == null) {\n+                indexRequest.opType(DocWriteRequest.OpType.CREATE);\n+            } else {\n+                indexRequest\n+                    .opType(DocWriteRequest.OpType.INDEX)\n+                    .setIfSeqNo(getResponse.getSeqNo())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb16d8c916664662afff4ba104fe0b192cf49050", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/bb16d8c916664662afff4ba104fe0b192cf49050", "committedDate": "2020-06-26T12:00:46Z", "message": "Introduce DataFrameAnalyticsConfig update API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0551cf42269aca62e5479d78d95632712113097", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0551cf42269aca62e5479d78d95632712113097", "committedDate": "2020-06-26T12:00:46Z", "message": "Adjust method call after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f20af1bd01fbffc4eb9a3f85d99c1ea27b2e233", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/2f20af1bd01fbffc4eb9a3f85d99c1ea27b2e233", "committedDate": "2020-06-26T12:31:55Z", "message": "Apply review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59b322175757e47639deda719ec80d98ee2ad026", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/59b322175757e47639deda719ec80d98ee2ad026", "committedDate": "2020-06-25T07:37:28Z", "message": "Adjust method call after rebase"}, "afterCommit": {"oid": "2f20af1bd01fbffc4eb9a3f85d99c1ea27b2e233", "author": {"user": {"login": "przemekwitek", "name": "Przemys\u0142aw Witek"}}, "url": "https://github.com/elastic/elasticsearch/commit/2f20af1bd01fbffc4eb9a3f85d99c1ea27b2e233", "committedDate": "2020-06-26T12:31:55Z", "message": "Apply review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Mjk3ODUw", "url": "https://github.com/elastic/elasticsearch/pull/58302#pullrequestreview-438297850", "createdAt": "2020-06-26T13:32:08Z", "commit": {"oid": "2f20af1bd01fbffc4eb9a3f85d99c1ea27b2e233"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozMjowOVrOGphBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozMjowOVrOGphBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4NTkxNg==", "bodyText": "type: remove double quote", "url": "https://github.com/elastic/elasticsearch/pull/58302#discussion_r446185916", "createdAt": "2020-06-26T13:32:09Z", "author": {"login": "dimitris-athanasiou"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -74,8 +74,7 @@\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_LOADING_DATA = \"Started loading data\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_ANALYZING = \"Started analyzing\";\n     public static final String DATA_FRAME_ANALYTICS_AUDIT_STARTED_WRITING_RESULTS = \"Started writing results\";\n-    public static final String DATA_FRAME_ANALYTICS_CANNOT_UPDATE_IN_CURRENT_STATE =\n-        \"Cannot update analytics [{0}] while its status is {1}\";\n+    public static final String DATA_FRAME_ANALYTICS_CANNOT_UPDATE_IN_CURRENT_STATE = \"Cannot update analytics [{0}] unless it''s stopped\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f20af1bd01fbffc4eb9a3f85d99c1ea27b2e233"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}