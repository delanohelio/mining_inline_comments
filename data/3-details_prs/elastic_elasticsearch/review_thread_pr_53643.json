{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTkwNjk4", "number": 53643, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTozODoxOFrODoryAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxMDoyNFrODosaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTg2OTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/TableColumnAttributeBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTozODoxOFrOF3YbsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMTozOFrOF31pqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNjMwNQ==", "bodyText": "Since only xpack things use this class, I think keeping it in xpack makes sense for now.\nProbably in org.elasticsearch.xpack.core.common.\nIf things outside of xpack need this code, it can probably be moved then.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393616305", "createdAt": "2020-03-17T11:38:18Z", "author": {"login": "benwtrent"}, "path": "server/src/main/java/org/elasticsearch/common/TableColumnAttributeBuilder.java", "diffHunk": "@@ -1,12 +1,23 @@\n /*\n- * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n- * or more contributor license agreements. Licensed under the Elastic License;\n- * you may not use this file except in compliance with the Elastic License.\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n-package org.elasticsearch.xpack.ml.rest.cat;\n \n-\n-import org.elasticsearch.common.Strings;\n+package org.elasticsearch.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTAxOQ==", "bodyText": "Makes sense. I've moved it back there.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095019", "createdAt": "2020-03-18T04:01:38Z", "author": {"login": "zacharymorn"}, "path": "server/src/main/java/org/elasticsearch/common/TableColumnAttributeBuilder.java", "diffHunk": "@@ -1,12 +1,23 @@\n /*\n- * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n- * or more contributor license agreements. Licensed under the Elastic License;\n- * you may not use this file except in compliance with the Elastic License.\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n-package org.elasticsearch.xpack.ml.rest.cat;\n \n-\n-import org.elasticsearch.common.Strings;\n+package org.elasticsearch.common;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNjMwNQ=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTg5MDg3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0NDo0OVrOF3YoyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMTo0M1rOF31puw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxOTY1Nw==", "bodyText": "I think we should also allow the page params to be set. Without setting size or from there are limitations around how many transforms can be returned with this API.\nBoth GetTransformAction.Request and GetTransformStatsAction.Request allow paging parameters to be set.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393619657", "createdAt": "2020-03-17T11:44:49Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTAzNQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095035", "createdAt": "2020-03-18T04:01:43Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxOTY1Nw=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTg5NDMzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0NTo1NVrOF3Yq1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMTo0NlrOF31pxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n          \n          \n            \n                    sb.append(\"/_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393620182", "createdAt": "2020-03-17T11:45:55Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTA0NA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095044", "createdAt": "2020-03-18T04:01:46Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDE4Mg=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTkwMjM3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0ODozNFrOF3YwIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMTo0OVrOF31p0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n          \n          \n            \n                            TableColumnAttributeBuilder.builder(\"batch or continuous transform\")", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393621537", "createdAt": "2020-03-17T11:48:34Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTA1OQ==", "bodyText": "Ops. Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095059", "createdAt": "2020-03-18T04:01:49Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTUzNw=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTkwMzU5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0ODo1NFrOF3Yw1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMTo1MlrOF31p4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setAliases(\"sc\")\n          \n          \n            \n                                .setAliases(\"tt\")", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393621716", "createdAt": "2020-03-17T11:48:54Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTA3NA==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095074", "createdAt": "2020-03-18T04:01:52Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTcxNg=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTkzNjIzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo1OTowMFrOF3ZFcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMTo1OFrOF31p7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNjk5NA==", "bodyText": "This is not strictly true.\nIf the transform runs into problems for some reason (intermittent cluster issues), it will retry from its last known position at this given frequency.\nIf the frequency is null, the default value is: TimeValue.timeValueMillis(60000)", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393626994", "createdAt": "2020-03-17T11:59:00Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTA4NQ==", "bodyText": "Done. I assume in the case of user not providing frequency setting, and the batch transform runs to completion successfully, we should still output TimeValue.timeValueMillis(60000) as frequency value right?", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095085", "createdAt": "2020-03-18T04:01:58Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNjk5NA=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTk0NzE5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjowMjoyNFrOF3ZMjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMjowNFrOF31qCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyODgxNQ==", "bodyText": "We should also add PivotConfig#getMaxPageSearchSize(). This should be accessible in the transform config under TransformConfig#getPivotConfig.\nIt's default value is 500.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393628815", "createdAt": "2020-03-17T12:02:24Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTExMg==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095112", "createdAt": "2020-03-18T04:02:04Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyODgxNQ=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTk2Njc4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjowODozM1rOF3ZY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMjoxOVrOF31qQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMTk3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTime())\n          \n          \n            \n                            .addCell(transformIndexerStats == null ? null : TimeValue.timeValueMillis(transformIndexerStats.getSearchTime()))\n          \n      \n    \n    \n  \n\nIt will be helpful to make these time related statistics TimeValue objects. That way they can take advantage of the formatting options.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393631976", "createdAt": "2020-03-17T12:08:33Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())\n+                .addCell(stats == null ? null : stats.getState())\n+                .addCell(stats == null ? null : stats.getReason())\n+                .addCell(checkpointingInfo == null ? null : checkpointingInfo.getChangesLastDetectedAt())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTime())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTE2OQ==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095169", "createdAt": "2020-03-18T04:02:19Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())\n+                .addCell(stats == null ? null : stats.getState())\n+                .addCell(stats == null ? null : stats.getReason())\n+                .addCell(checkpointingInfo == null ? null : checkpointingInfo.getChangesLastDetectedAt())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTime())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMTk3Ng=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTk2NzczOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjowODo1MlrOF3ZZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0NzoyNFrOF4DW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTime())\n          \n          \n            \n                            .addCell(transformIndexerStats == null ? null : TimeValue.timeValueMillis(transformIndexerStats.getIndexTime()))", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393632132", "createdAt": "2020-03-17T12:08:52Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())\n+                .addCell(stats == null ? null : stats.getState())\n+                .addCell(stats == null ? null : stats.getReason())\n+                .addCell(checkpointingInfo == null ? null : checkpointingInfo.getChangesLastDetectedAt())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTime())\n+\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTime())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTE4MA==", "bodyText": "Done.\nI see that for transformIndexerStats.getExpAvgCheckpointDurationMs() below, it is returning a double object, but TimeValue#timeValueMillis only takes in long. Should I update it as well at the cost of losing precision by  converting double to long, or it's fine to leave it as is?", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095180", "createdAt": "2020-03-18T04:02:22Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())\n+                .addCell(stats == null ? null : stats.getState())\n+                .addCell(stats == null ? null : stats.getReason())\n+                .addCell(checkpointingInfo == null ? null : checkpointingInfo.getChangesLastDetectedAt())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTime())\n+\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTime())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjEzMg=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxOTU4Ng==", "bodyText": "I would leave the double as is. Just like you did :).\nIt might be interesting to have factional TimeValue objects in the future. So we could get human friendly output like 10.8ms :D.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394319586", "createdAt": "2020-03-18T12:47:24Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())\n+            .addCell(\"description\",\n+                TableColumnAttributeBuilder.builder(\"description\")\n+                    .setAliases(\"d\")\n+                    .build())\n+            .addCell(\"transform_type\",\n+                TableColumnAttributeBuilder.builder(\"batch or continues transform\")\n+                    .setAliases(\"sc\")\n+                    .build())\n+            .addCell(\"frequency\",\n+                TableColumnAttributeBuilder.builder(\"frequency of transform\")\n+                    .setAliases(\"f\")\n+                    .build())\n+\n+            // Transform stats info\n+            .addCell(\"state\",\n+                TableColumnAttributeBuilder.builder(\"transform state\")\n+                    .setAliases(\"s\")\n+                    .setTextAlignment(TableColumnAttributeBuilder.TextAlign.RIGHT)\n+                    .build())\n+            .addCell(\"reason\",\n+                TableColumnAttributeBuilder.builder(\"reason\", false)\n+                    .setAliases(\"r\", \"reason\")\n+                    .build())\n+            .addCell(\"changes_last_detection_time\",\n+                TableColumnAttributeBuilder.builder(\"changes last detected time\", false)\n+                    .setAliases(\"cldt\")\n+                    .build())\n+            .addCell(\"search_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of searches\", false)\n+                    .setAliases(\"st\")\n+                    .build())\n+            .addCell(\"search_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of search failures\", false)\n+                    .setAliases(\"sf\")\n+                    .build())\n+            .addCell(\"search_time\",\n+                TableColumnAttributeBuilder.builder(\"search time\", false)\n+                    .setAliases(\"stime\")\n+                    .build())\n+            .addCell(\"index_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of indices\", false)\n+                    .setAliases(\"it\")\n+                    .build())\n+            .addCell(\"index_failure\",\n+                TableColumnAttributeBuilder.builder(\"total number of index failures\", false)\n+                    .setAliases(\"if\")\n+                    .build())\n+            .addCell(\"index_time\",\n+                TableColumnAttributeBuilder.builder(\"index time\", false)\n+                    .setAliases(\"itime\")\n+                    .build())\n+            .addCell(\"document_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of documents\", false)\n+                    .setAliases(\"dt\")\n+                    .build())\n+            .addCell(\"invocation_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of invocations\", false)\n+                    .setAliases(\"itotal\")\n+                    .build())\n+            .addCell(\"page_total\",\n+                TableColumnAttributeBuilder.builder(\"total number of pages\", false)\n+                    .setAliases(\"pt\")\n+                    .build())\n+            .addCell(\"checkpoint_duration_time_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average checkpoint processing time (milliseconds)\", false)\n+                    .setAliases(\"cdtea\", \"checkpointTimeExpAvg\")\n+                    .build())\n+            .addCell(\"indexed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents indexed\", false)\n+                    .setAliases(\"idea\")\n+                    .build())\n+            .addCell(\"processed_documents_exp_avg\",\n+                TableColumnAttributeBuilder.builder(\"exponential average number of documents processed\", false)\n+                    .setAliases(\"pdea\")\n+                    .build())\n+            .endHeaders();\n+    }\n+\n+    private Table buildTable(GetTransformAction.Response response, GetTransformStatsAction.Response statsResponse) {\n+        Table table = getTableWithHeader();\n+        Map<String, TransformStats> statsById = statsResponse.getTransformsStats().stream()\n+                                                                .collect(Collectors.toMap(TransformStats::getId, Function.identity()));\n+        response.getTransformConfigurations().forEach(config -> {\n+            TransformStats stats = statsById.get(config.getId());\n+            TransformCheckpointingInfo checkpointingInfo = null;\n+            TransformIndexerStats transformIndexerStats = null;\n+\n+            if(stats != null) {\n+                checkpointingInfo = stats.getCheckpointingInfo();\n+                transformIndexerStats = stats.getIndexerStats();\n+            }\n+\n+            table\n+                .startRow()\n+                .addCell(config.getId())\n+                .addCell(config.getCreateTime())\n+                .addCell(config.getVersion())\n+                .addCell(String.join(\",\", config.getSource().getIndex()))\n+                .addCell(config.getDestination().getIndex())\n+                .addCell(config.getDescription())\n+                .addCell(config.getSyncConfig() == null ? \"batch\" : \"continuous\")\n+                .addCell(config.getFrequency() == null ? \"one-time\" : config.getFrequency())\n+                .addCell(stats == null ? null : stats.getState())\n+                .addCell(stats == null ? null : stats.getReason())\n+                .addCell(checkpointingInfo == null ? null : checkpointingInfo.getChangesLastDetectedAt())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getSearchTime())\n+\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTotal())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexFailures())\n+                .addCell(transformIndexerStats == null ? null : transformIndexerStats.getIndexTime())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjEzMg=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTk3MjQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxMDoyNFrOF3ZcYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDowMjoyN1rOF31qXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjg2Nw==", "bodyText": "The pipeline that the transform references should also be included. DestConfig#getPipeline().\nIts nullable with no default value.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r393632867", "createdAt": "2020-03-17T12:10:24Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NTE5OA==", "bodyText": "Done.", "url": "https://github.com/elastic/elasticsearch/pull/53643#discussion_r394095198", "createdAt": "2020-03-18T04:02:27Z", "author": {"login": "zacharymorn"}, "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/rest/action/RestCatTransformAction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.transform.rest.action;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.common.TableColumnAttributeBuilder;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.transform.TransformField;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformAction;\n+import org.elasticsearch.xpack.core.transform.action.GetTransformStatsAction;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformCheckpointingInfo;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformIndexerStats;\n+import org.elasticsearch.xpack.core.transform.transforms.TransformStats;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.xpack.core.transform.TransformField.ALLOW_NO_MATCH;\n+\n+public class RestCatTransformAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"_cat/transform\"),\n+            new Route(GET, \"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_transform_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String id = restRequest.param(TransformField.TRANSFORM_ID);\n+        if (Strings.isNullOrEmpty(id)) {\n+            id = MetaData.ALL;\n+        }\n+\n+        GetTransformAction.Request request = new GetTransformAction.Request(id);\n+        request.setAllowNoResources(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        GetTransformStatsAction.Request statsRequest = new GetTransformStatsAction.Request(id);\n+        statsRequest.setAllowNoMatch(restRequest.paramAsBoolean(ALLOW_NO_MATCH.getPreferredName(), true));\n+\n+        return channel -> client.execute(GetTransformAction.INSTANCE, request, new RestActionListener<>(channel) {\n+            @Override\n+            public void processResponse(GetTransformAction.Response response) {\n+                client.execute(GetTransformStatsAction.INSTANCE, statsRequest, new RestResponseListener<>(channel) {\n+                    @Override\n+                    public RestResponse buildResponse(GetTransformStatsAction.Response statsResponse) throws Exception {\n+                        return RestTable.buildResponse(buildTable(response, statsResponse), channel);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected void documentation(StringBuilder sb) {\n+        sb.append(\"/_cat/transform\\n\");\n+        sb.append(\"_cat/transform/{\" + TransformField.TRANSFORM_ID + \"}\\n\");\n+    }\n+\n+    @Override\n+    protected Table getTableWithHeader(RestRequest unused) {\n+        return getTableWithHeader();\n+    }\n+\n+    private static Table getTableWithHeader() {\n+        return new Table()\n+            .startHeaders()\n+            // Transform config info\n+            .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"create_time\",\n+                TableColumnAttributeBuilder.builder(\"transform creation time\")\n+                    .setAliases(\"ct\", \"createTime\")\n+                    .build())\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the transform was created\")\n+                    .setAliases(\"v\")\n+                    .build())\n+            .addCell(\"source_index\",\n+                TableColumnAttributeBuilder.builder(\"source index\")\n+                    .setAliases(\"si\", \"sourceIndex\")\n+                    .build())\n+            .addCell(\"dest_index\",\n+                TableColumnAttributeBuilder.builder(\"destination index\")\n+                    .setAliases(\"di\", \"destIndex\")\n+                    .build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMjg2Nw=="}, "originalCommit": {"oid": "0a15708164e978a90f2e628281671618b6ddf464"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4354, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}