{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzY5MTIx", "number": 65466, "title": "Removing double call to ValuesSourceRegistry by passing aggregator suppliers as aggregator factory constructor arguments", "bodyText": "Closes #58136\nPreventing a double call to the ValuesSourceRegistry by saving the return value of the first call on ValuesSourceAggregationBuilder#doBuild and passing it onto innerBuild which then gets picked up by the Aggregator's builder and saved in the Aggregator's factory to be used in its doCreateInternal method.\nI tried my best to respect every classes formatting and where their creators decided to put the private properties of the class. If anyone is able to think of a more elegant solution or any feedback at all please feel free to answer this pull request.\nI think the readability of this could be improved if every AggregatorSupplier extended a common interface, even if it was empty, as them I wouldn't have to pass a very generic Object parameter to innerBuild. I did not implement this as I do not know if this is desirable but if it is please tell me and I will update this pull request.", "createdAt": "2020-11-24T20:41:59Z", "url": "https://github.com/elastic/elasticsearch/pull/65466", "merged": true, "mergeCommit": {"oid": "46584db69435224c51171dc1065c814fb2cef404"}, "closed": true, "closedAt": "2020-12-03T19:30:07Z", "author": {"login": "Thlamz"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfvE2BgH2gAyNTI2NzY5MTIxOjI0YjNjMDdiNjk4YjQzYzJjYzdmNGFjMjA1NTg1MmI5NjgwNDY4MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdinLNUAH2gAyNTI2NzY5MTIxOmQyZjUwNjYyYzk1YjhiMTczOGNhNzlmNTM5ZWIyMTliZTMwYmY2OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "24b3c07b698b43c2cc7f4ac2055852b968046814", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/24b3c07b698b43c2cc7f4ac2055852b968046814", "committedDate": "2020-11-24T19:39:43Z", "message": "Saving return value from first Aggregator Supplier call and passing it to innerBuild"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96f8f57dc4daedc766adde634989c740f8a8b0bd", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/96f8f57dc4daedc766adde634989c740f8a8b0bd", "committedDate": "2020-11-24T19:39:43Z", "message": "Making use of the aggregatorSupplier passed to the aggregation's builders through innerBuild"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a57f2782d6f5f19f0ba1eb3ebd4ae0f873e26f79", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/a57f2782d6f5f19f0ba1eb3ebd4ae0f873e26f79", "committedDate": "2020-11-30T19:59:03Z", "message": "Merging with changes from master"}, "afterCommit": {"oid": "96f8f57dc4daedc766adde634989c740f8a8b0bd", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/96f8f57dc4daedc766adde634989c740f8a8b0bd", "committedDate": "2020-11-24T19:39:43Z", "message": "Making use of the aggregatorSupplier passed to the aggregation's builders through innerBuild"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTk4MTI2", "url": "https://github.com/elastic/elasticsearch/pull/65466#pullrequestreview-541998126", "createdAt": "2020-12-01T15:11:17Z", "commit": {"oid": "96f8f57dc4daedc766adde634989c740f8a8b0bd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMToxN1rOH8xgxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMToxN1rOH8xgxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4NzgxNA==", "bodyText": "So, as you noted in your comments, having to use a bare Object here is a bit of a smell.  But, we don't need an interface to solve it, we already have a solution.  The way the generics are set up, we know the class we get out of the registry has to match the type on the registry key.  If you look at how the factories get the suppliers, they never have to cast it, because they know the key they're using, like this:\n  DateHistogramAggregationSupplier aggregatorSupplier = context.getValuesSourceRegistry()\t\n            .getAggregator(DateHistogramAggregationBuilder.REGISTRY_KEY, config);\n\nWe can't do that here, because we don't know which type we're expecting.  But, we can do it from within innerBuild, since at that point we'll be in a specific aggregation.  So essentially we just want to pull the supplier fetching code up from the factory's doCreateInternal method to the builder's internalBuild method, and pass it on into the factory from there.  That still meets out validation need, it'll just throw from one level deeper if the mapping is bad, and should dodge all this bare Object business.", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r533487814", "createdAt": "2020-12-01T15:11:17Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "diffHunk": "@@ -347,16 +347,20 @@ public ZoneId timeZone() {\n     protected final ValuesSourceAggregatorFactory doBuild(AggregationContext context, AggregatorFactory parent,\n                                                           Builder subFactoriesBuilder) throws IOException {\n         ValuesSourceConfig config = resolveConfig(context);\n+\n+        ValuesSourceAggregatorFactory factory;\n         if (context.getValuesSourceRegistry().isRegistered(getRegistryKey())) {\n             /*\n             if the aggregation uses the values source registry, test if the resolved values source type is compatible with this aggregation.\n             This call will throw if the mapping isn't registered, which is what we want.  Note that we need to throw from here because\n             AbstractAggregationBuilder#build, which called this, will attempt to register the agg usage next, and if the usage is invalid\n             that will fail with a weird error.\n              */\n-            context.getValuesSourceRegistry().getAggregator(getRegistryKey(), config);\n+            Object aggregatorSupplier = context.getValuesSourceRegistry().getAggregator(getRegistryKey(), config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f8f57dc4daedc766adde634989c740f8a8b0bd"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "311ed3f2b4169a3418b7e6728e55ef650393ac14", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/311ed3f2b4169a3418b7e6728e55ef650393ac14", "committedDate": "2020-12-01T17:43:32Z", "message": "Fixing implementation based on feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjA4Njkx", "url": "https://github.com/elastic/elasticsearch/pull/65466#pullrequestreview-542208691", "createdAt": "2020-12-01T19:04:11Z", "commit": {"oid": "311ed3f2b4169a3418b7e6728e55ef650393ac14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNDoxMVrOH87kZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNDoxMVrOH87kZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MjU4MQ==", "bodyText": "Nit: This formatting-only change doesn't change to the correct style.", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r533652581", "createdAt": "2020-12-01T19:04:11Z", "author": {"login": "not-napoleon"}, "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/analytics/StringStatsAggregationBuilder.java", "diffHunk": "@@ -103,7 +103,7 @@ public BucketCardinality bucketCardinality() {\n \n     @Override\n     protected ValuesSourceAggregatorFactory innerBuild(AggregationContext context, ValuesSourceConfig config,\n-            AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {\n+                                                       AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311ed3f2b4169a3418b7e6728e55ef650393ac14"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e48c7c0f00333a81d336fc66d5c098217bd6a9e8", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/e48c7c0f00333a81d336fc66d5c098217bd6a9e8", "committedDate": "2020-12-02T01:25:36Z", "message": "Merge remote-tracking branch 'upstream/master'\n\n# Conflicts:\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/MissingAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/range/AbstractRangeAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/range/BinaryRangeAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/bucket/sampler/DiversifiedAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/GeoCentroidAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/MedianAbsoluteDeviationAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentilesAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/SumAggregatorFactory.java\n#\tserver/src/main/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorFactory.java\n#\tx-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/boxplot/BoxplotAggregatorFactory.java\n#\tx-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java\n#\tx-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/stringstats/StringStatsAggregatorFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01bf2f52732c4c51e7e81850a1ac1ee0cd91c260", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/01bf2f52732c4c51e7e81850a1ac1ee0cd91c260", "committedDate": "2020-12-02T03:41:28Z", "message": "Fixing things before submitting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTAzMDQ3", "url": "https://github.com/elastic/elasticsearch/pull/65466#pullrequestreview-542903047", "createdAt": "2020-12-02T14:42:04Z", "commit": {"oid": "01bf2f52732c4c51e7e81850a1ac1ee0cd91c260"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0MjowNFrOH9eLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNDoyOVrOH9wX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIxOTY2OA==", "bodyText": "Shouldn't this still have the @Override annotation?", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r534219668", "createdAt": "2020-12-02T14:42:04Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorFactory.java", "diffHunk": "@@ -81,11 +84,11 @@ public long minDocCount() {\n         return minDocCount;\n     }\n \n-    @Override\n-    protected Aggregator doCreateInternal(Aggregator parent, CardinalityUpperBound cardinality, Map<String, Object> metadata)\n-        throws IOException {\n-        DateHistogramAggregationSupplier aggregatorSupplier = context.getValuesSourceRegistry()\n-            .getAggregator(DateHistogramAggregationBuilder.REGISTRY_KEY, config);\n+    protected Aggregator doCreateInternal(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bf2f52732c4c51e7e81850a1ac1ee0cd91c260"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxNzc0Mg==", "bodyText": "I'd like to leave some version of this comment; I find it useful to note that this is our last chance to check the values source type mapping before we attempt to register usage.  Maybe something like\n/*\nThe inner builder implementation is responsible for validating the \nValuesSourceType mapping, typically by checking if an aggregation\nsupplier has been registered for that type on this aggregation, and\nthrow IllegalArgumentException if the mapping is not valid.  Note \nthat we need to throw from here because \nAbstractAggregationBuilder#build, which called this, will attempt to\nregister the agg usage next, and if the usage is invalid that will fail\nwith a weird error.\n*/", "url": "https://github.com/elastic/elasticsearch/pull/65466#discussion_r534517742", "createdAt": "2020-12-02T22:14:29Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java", "diffHunk": "@@ -347,16 +349,10 @@ public ZoneId timeZone() {\n     protected final ValuesSourceAggregatorFactory doBuild(AggregationContext context, AggregatorFactory parent,\n                                                           Builder subFactoriesBuilder) throws IOException {\n         ValuesSourceConfig config = resolveConfig(context);\n-        if (context.getValuesSourceRegistry().isRegistered(getRegistryKey())) {\n-            /*\n-            if the aggregation uses the values source registry, test if the resolved values source type is compatible with this aggregation.\n-            This call will throw if the mapping isn't registered, which is what we want.  Note that we need to throw from here because\n-            AbstractAggregationBuilder#build, which called this, will attempt to register the agg usage next, and if the usage is invalid\n-            that will fail with a weird error.\n-             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bf2f52732c4c51e7e81850a1ac1ee0cd91c260"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f49b034ff46002ac9575ecb89cd11ceced55a5", "author": {"user": {"login": "Thlamz", "name": null}}, "url": "https://github.com/elastic/elasticsearch/commit/88f49b034ff46002ac9575ecb89cd11ceced55a5", "committedDate": "2020-12-02T22:52:56Z", "message": "Touching up based on feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2f50662c95b8b1738ca79f539eb219be30bf691", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/d2f50662c95b8b1738ca79f539eb219be30bf691", "committedDate": "2020-12-03T18:09:12Z", "message": "Merge branch 'master' into master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4246, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}