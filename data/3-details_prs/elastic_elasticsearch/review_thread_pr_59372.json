{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTEzMjM3", "number": 59372, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMDo1MVrOEN8_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMDo1MVrOEN8_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDY2MTI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMDo1MlrOGw2HJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NzoxN1rOGyxndg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw==", "bodyText": "did we say that approximation.cost() was not good here?", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453871397", "createdAt": "2020-07-13T19:10:52Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MDQ2OA==", "bodyText": "Yeah, Lucene documents this as \"An estimate of the expected cost to determine that a single document\". So multiplying by the cost of the approximation don't feel right. 9000 is kind of bogus too, but maybe less so.", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453880468", "createdAt": "2020-07-13T19:27:25Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, "originalCommit": {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MzE0OQ==", "bodyText": "let's ask @jpountz what he thinks. I thought I remembered discussing with him that the cost could be the cost of the approximation but I may be wrong.", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453883149", "createdAt": "2020-07-13T19:32:02Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, "originalCommit": {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MzM2MA==", "bodyText": "this should not block merging the PR, we can always update the cost later.", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453883360", "createdAt": "2020-07-13T19:32:24Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, "originalCommit": {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxNDEwMw==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r453914103", "createdAt": "2020-07-13T20:31:13Z", "author": {"login": "nik9000"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, "originalCommit": {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NDkwMg==", "bodyText": "+1 a high constant looks good to me", "url": "https://github.com/elastic/elasticsearch/pull/59372#discussion_r455894902", "createdAt": "2020-07-16T15:57:17Z", "author": {"login": "jpountz"}, "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/StringScriptFieldTermQuery.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.query;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.ConstantScoreScorer;\n+import org.apache.lucene.search.ConstantScoreWeight;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.TwoPhaseIterator;\n+import org.apache.lucene.search.Weight;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringScriptFieldTermQuery extends Query {\n+    private final StringScriptFieldScript.LeafFactory leafFactory;\n+    private final String fieldName;\n+    private final String term;\n+\n+    public StringScriptFieldTermQuery(StringScriptFieldScript.LeafFactory leafFactory, String fieldName, String term) {\n+        this.leafFactory = leafFactory;\n+        this.fieldName = fieldName;\n+        this.term = term;\n+    }\n+\n+    @Override\n+    public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n+        return new ConstantScoreWeight(this, boost) {\n+            @Override\n+            public boolean isCacheable(LeafReaderContext ctx) {\n+                return false; // scripts aren't really cacheable at this point\n+            }\n+\n+            @Override\n+            public Scorer scorer(LeafReaderContext ctx) throws IOException {\n+                StringScriptFieldScript script = leafFactory.newInstance(ctx);\n+                DocIdSetIterator approximation = DocIdSetIterator.all(ctx.reader().maxDoc());\n+                TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n+                    @Override\n+                    public boolean matches() throws IOException {\n+                        for (String result : script.resultsForDoc(approximation().docID())) {\n+                            if (term.equals(result)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public float matchCost() {\n+                        // TODO we don't have a good way of estimating the complexity of the script so we just go with 9000\n+                        return 9000f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MTM5Nw=="}, "originalCommit": {"oid": "79fccfc02879a7d4284a9377c24c8ff938c415e5"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2414, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}