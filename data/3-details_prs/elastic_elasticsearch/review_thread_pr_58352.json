{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzExMjQ1", "number": 58352, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNDoxOFrOEH4Xmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowOToyOVrOEH4euQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njk5MDM1OnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNDoxOFrOGngK6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozNTo0NFrOGnvCWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NDcyOA==", "bodyText": "The previous implementation of the withCustomConfig method in PackageTests.java used exception handling to ensure that the cleanup / restore steps where always carried out. I'm curious about why this method isn't doing that?", "url": "https://github.com/elastic/elasticsearch/pull/58352#discussion_r444074728", "createdAt": "2020-06-23T09:04:18Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -392,4 +394,32 @@ public static Path createTempDir(String prefix) throws IOException {\n         return Files.createTempDirectory(getRootTempDir(), prefix, NEW_DIR_PERMS);\n     }\n \n+    @FunctionalInterface\n+    public interface ThrowingConsumer<T> {\n+        void accept(T t) throws Exception;\n+    }\n+\n+    public void withCustomConfig(ThrowingConsumer<Path> action) throws Exception {\n+        Path tempDir = Files.createTempDirectory(getRootTempDir(), \"custom-config\");\n+        Path tempConf = tempDir.resolve(\"elasticsearch\");\n+        FileUtils.copyDirectory(installation.config, tempConf);\n+\n+        Platforms.onLinux(() -> sh.run(\"chown -R elasticsearch:elasticsearch \" + tempDir));\n+\n+        if (distribution.isPackage()) {\n+            Files.copy(installation.envFile, tempDir.resolve(\"elasticsearch.bk\"));// backup\n+            append(installation.envFile, \"ES_PATH_CONF=\" + tempConf + \"\\n\");\n+        } else {\n+            sh.getEnv().put(\"ES_PATH_CONF\", tempConf.toString());\n+        }\n+\n+        action.accept(tempConf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e9e0a537883836cada8e0c746dddc36c4e5589"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxODI5OQ==", "bodyText": "I don't think we need this type of exception handling at all, since the tests are single threaded, and all test execution stops once a test failure is found. So there is no reason to restore the state, since the exception means the test will have failed, and in fact restoring the state could make diagnosing the failure more difficult.", "url": "https://github.com/elastic/elasticsearch/pull/58352#discussion_r444318299", "createdAt": "2020-06-23T15:35:44Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -392,4 +394,32 @@ public static Path createTempDir(String prefix) throws IOException {\n         return Files.createTempDirectory(getRootTempDir(), prefix, NEW_DIR_PERMS);\n     }\n \n+    @FunctionalInterface\n+    public interface ThrowingConsumer<T> {\n+        void accept(T t) throws Exception;\n+    }\n+\n+    public void withCustomConfig(ThrowingConsumer<Path> action) throws Exception {\n+        Path tempDir = Files.createTempDirectory(getRootTempDir(), \"custom-config\");\n+        Path tempConf = tempDir.resolve(\"elasticsearch\");\n+        FileUtils.copyDirectory(installation.config, tempConf);\n+\n+        Platforms.onLinux(() -> sh.run(\"chown -R elasticsearch:elasticsearch \" + tempDir));\n+\n+        if (distribution.isPackage()) {\n+            Files.copy(installation.envFile, tempDir.resolve(\"elasticsearch.bk\"));// backup\n+            append(installation.envFile, \"ES_PATH_CONF=\" + tempConf + \"\\n\");\n+        } else {\n+            sh.getEnv().put(\"ES_PATH_CONF\", tempConf.toString());\n+        }\n+\n+        action.accept(tempConf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NDcyOA=="}, "originalCommit": {"oid": "74e9e0a537883836cada8e0c746dddc36c4e5589"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAwMzkyOnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowODowNlrOGngTiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MzozMlrOGnvWzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjkzOQ==", "bodyText": "We probabaly don't want to move this interface, since it's only being used in this file, but a possible alternative home would be libs/core/src/main/java/org/elasticsearch/common, since we already have CheckedFunction and CheckedRunnable in there.", "url": "https://github.com/elastic/elasticsearch/pull/58352#discussion_r444076939", "createdAt": "2020-06-23T09:08:06Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -392,4 +394,32 @@ public static Path createTempDir(String prefix) throws IOException {\n         return Files.createTempDirectory(getRootTempDir(), prefix, NEW_DIR_PERMS);\n     }\n \n+    @FunctionalInterface\n+    public interface ThrowingConsumer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e9e0a537883836cada8e0c746dddc36c4e5589"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzUzMg==", "bodyText": "We had CheckedConsumer in server, but I've now moved it to elasticsearch-core lib.", "url": "https://github.com/elastic/elasticsearch/pull/58352#discussion_r444323532", "createdAt": "2020-06-23T15:43:32Z", "author": {"login": "rjernst"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -392,4 +394,32 @@ public static Path createTempDir(String prefix) throws IOException {\n         return Files.createTempDirectory(getRootTempDir(), prefix, NEW_DIR_PERMS);\n     }\n \n+    @FunctionalInterface\n+    public interface ThrowingConsumer<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NjkzOQ=="}, "originalCommit": {"oid": "74e9e0a537883836cada8e0c746dddc36c4e5589"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAwODU3OnYy", "diffSide": "RIGHT", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowOToyOVrOGngW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowOToyOVrOGngW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3Nzc5MQ==", "bodyText": "I would appreciate adding Javadoc here.", "url": "https://github.com/elastic/elasticsearch/pull/58352#discussion_r444077791", "createdAt": "2020-06-23T09:09:29Z", "author": {"login": "pugnascotia"}, "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackagingTestCase.java", "diffHunk": "@@ -392,4 +394,32 @@ public static Path createTempDir(String prefix) throws IOException {\n         return Files.createTempDirectory(getRootTempDir(), prefix, NEW_DIR_PERMS);\n     }\n \n+    @FunctionalInterface\n+    public interface ThrowingConsumer<T> {\n+        void accept(T t) throws Exception;\n+    }\n+\n+    public void withCustomConfig(ThrowingConsumer<Path> action) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e9e0a537883836cada8e0c746dddc36c4e5589"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1468, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}