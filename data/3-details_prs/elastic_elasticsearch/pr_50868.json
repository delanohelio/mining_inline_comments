{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTcwNjc0", "number": 50868, "title": "Fix SLM check for restore in progress", "bodyText": "This commit fixes the check in SLM where the RestoreInProgress\nmetadata was checked for existence. Rather than check existence we\nshould instead check the isEmpty method. Prior to this, a successful\nrestore for a repository that used SLM retention would prevent SLM\nretention from running in subsequent invocations, due to SLM thinking\nthat a restore was still running.", "createdAt": "2020-01-10T18:28:33Z", "url": "https://github.com/elastic/elasticsearch/pull/50868", "merged": true, "mergeCommit": {"oid": "c83aceb59c4f91e04aedeb0fd2abd6ed367af009"}, "closed": true, "closedAt": "2020-01-10T20:34:17Z", "author": {"login": "dakrone"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5C1-vgH2gAyMzYxNTcwNjc0OmJmNmU4ZmRkZGI5NzhiZmVkOWI3YzlhNjE0N2VmYWFiNDU0N2ZkOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5EB7GAH2gAyMzYxNTcwNjc0OjYxNmUyYmJlNGRkNzRjZWM4YmI2NzE2ODNkNGY4M2VmYWY1YzNmNGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf6e8fdddb978bfed9b7c9a6147efaab4547fd90", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/bf6e8fdddb978bfed9b7c9a6147efaab4547fd90", "committedDate": "2020-01-10T18:27:23Z", "message": "Fix SLM check for restore in progress\n\nThis commit fixes the check in SLM where the `RestoreInProgress`\nmetadata was checked for existence. Rather than check existence we\nshould instead check the `isEmpty` method. Prior to this, a successful\nrestore for a repository that used SLM retention would prevent SLM\nretention from running in subsequent invocations, due to SLM thinking\nthat a restore was still running."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzQ3NTAy", "url": "https://github.com/elastic/elasticsearch/pull/50868#pullrequestreview-341347502", "createdAt": "2020-01-10T18:37:03Z", "commit": {"oid": "bf6e8fdddb978bfed9b7c9a6147efaab4547fd90"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODozNzowM1rOFccmQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODozNzowM1rOFccmQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3Mjk5NQ==", "bodyText": "Don't need to block this PR on it, but we should check if this hack is still necessary.", "url": "https://github.com/elastic/elasticsearch/pull/50868#discussion_r365372995", "createdAt": "2020-01-10T18:37:03Z", "author": {"login": "gwbrown"}, "path": "x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/slm/SLMSnapshotBlockingIntegTests.java", "diffHunk": "@@ -385,6 +390,74 @@ private void testUnsuccessfulSnapshotRetention(boolean partialSuccess) throws Ex\n         }\n     }\n \n+    public void testSLMRetentionAfterRestore() throws Exception {\n+        final String indexName = \"test\";\n+        final String policyName = \"test-policy\";\n+        int docCount = 20;\n+        for (int i = 0; i < docCount; i++) {\n+            index(indexName, i + \"\", Collections.singletonMap(\"foo\", \"bar\"));\n+        }\n+\n+        // Create a snapshot repo\n+        initializeRepo(REPO);\n+\n+        logger.info(\"--> creating policy {}\", policyName);\n+        createSnapshotPolicy(policyName, \"snap\", NEVER_EXECUTE_CRON_SCHEDULE, REPO, indexName, true, false,\n+            new SnapshotRetentionConfiguration(TimeValue.ZERO, null, null));\n+\n+        logger.info(\"--> executing snapshot lifecycle\");\n+        final String snapshotName = executePolicy(policyName);\n+\n+        // Check that the executed snapshot shows up in the SLM output\n+        assertBusy(() -> {\n+            GetSnapshotLifecycleAction.Response getResp =\n+                client().execute(GetSnapshotLifecycleAction.INSTANCE, new GetSnapshotLifecycleAction.Request(policyName)).get();\n+            logger.info(\"--> checking for in progress snapshot...\");\n+\n+            assertThat(getResp.getPolicies().size(), greaterThan(0));\n+            SnapshotLifecyclePolicyItem item = getResp.getPolicies().get(0);\n+            SnapshotInvocationRecord lastSuccess = item.getLastSuccess();\n+            assertNotNull(lastSuccess);\n+            assertThat(lastSuccess.getSnapshotName(), equalTo(snapshotName));\n+        });\n+\n+        logger.info(\"--> restoring index\");\n+        RestoreSnapshotRequest restoreReq = new RestoreSnapshotRequest(REPO, snapshotName);\n+        restoreReq.indices(indexName);\n+        restoreReq.renamePattern(\"(.+)\");\n+        restoreReq.renameReplacement(\"restored_$1\");\n+        restoreReq.waitForCompletion(true);\n+        RestoreSnapshotResponse resp = client().execute(RestoreSnapshotAction.INSTANCE, restoreReq).get();\n+        assertThat(resp.status(), equalTo(RestStatus.OK));\n+\n+        logger.info(\"--> executing SLM retention\");\n+        assertAcked(client().execute(ExecuteSnapshotRetentionAction.INSTANCE, new ExecuteSnapshotRetentionAction.Request()).get());\n+        logger.info(\"--> waiting for {} snapshot to be deleted\", snapshotName);\n+        assertBusy(() -> {\n+            try {\n+                try {\n+                    GetSnapshotsResponse snapshotsStatusResponse = client().admin().cluster()\n+                        .prepareGetSnapshots(REPO).setSnapshots(snapshotName).get();\n+                    assertThat(snapshotsStatusResponse.getSnapshots(REPO), empty());\n+                } catch (SnapshotMissingException e) {\n+                    // This is what we want to happen\n+                }\n+                logger.info(\"--> snapshot [{}] has been deleted\", snapshotName);\n+            } catch (RepositoryException re) {\n+                // Concurrent status calls and write operations may lead to failures in determining the current repository generation\n+                // TODO: Remove this hack once tracking the current repository generation has been made consistent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6e8fdddb978bfed9b7c9a6147efaab4547fd90"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "616e2bbe4dd74cec8bb671683d4f83efaf5c3f4b", "author": {"user": {"login": "dakrone", "name": "Lee Hinman"}}, "url": "https://github.com/elastic/elasticsearch/commit/616e2bbe4dd74cec8bb671683d4f83efaf5c3f4b", "committedDate": "2020-01-10T19:50:20Z", "message": "Add additional unit test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}