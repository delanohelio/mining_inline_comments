{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDE1MDcw", "number": 54857, "title": "Exists queries to MatchNoneQueryBuilder when the field is unmapped ", "bodyText": "Have you signed the contributor license agreement?\nHave you followed the contributor guidelines?\nIf submitting code, have you built your formula locally prior to submission with gradle check?\nIf submitting code, is your pull request against master? Unless there is a good reason otherwise, we prefer pull requests against master and will backport as needed.\nIf submitting code, have you checked that your submission is for an OS and architecture that we support?\nIf you are submitting this code for a class then read our policy for that.", "createdAt": "2020-04-07T03:24:59Z", "url": "https://github.com/elastic/elasticsearch/pull/54857", "merged": true, "mergeCommit": {"oid": "e161757342be849357c6eda1ff36f731041215dd"}, "closed": true, "closedAt": "2020-04-27T07:29:55Z", "author": {"login": "SivagurunathanV"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU4eZPgH2gAyNDAwMDE1MDcwOjg0NjM5ZWUzYzA3OTRmM2VlYWQxNjgyZmM2NDRlZTA5MDQxYzg3MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ1w3gAH2gAyNDAwMDE1MDcwOjdhM2VjMDFlZmRlMjQyZTU3NWQ2NmI4M2VmMjczZWFiOWRiM2JkMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "84639ee3c0794f3eead1682fc644ee09041c8732", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/84639ee3c0794f3eead1682fc644ee09041c8732", "committedDate": "2020-04-06T06:12:27Z", "message": "Initial Commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ace54ca9467c81d5e71edc440e771ebedd7a694", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/1ace54ca9467c81d5e71edc440e771ebedd7a694", "committedDate": "2020-04-06T06:12:56Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce05da7adafd17d480bc9f1e3cf4a011740b942", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/cce05da7adafd17d480bc9f1e3cf4a011740b942", "committedDate": "2020-04-07T02:54:38Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a81669e38f26270ce7306f9d7f197e22db461f", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/a6a81669e38f26270ce7306f9d7f197e22db461f", "committedDate": "2020-04-07T03:24:25Z", "message": "Refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTAyMDU0", "url": "https://github.com/elastic/elasticsearch/pull/54857#pullrequestreview-388902054", "createdAt": "2020-04-07T08:36:43Z", "commit": {"oid": "a6a81669e38f26270ce7306f9d7f197e22db461f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozNjo0M1rOGB49lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozNjo0M1rOGB49lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNTAzMQ==", "bodyText": "We should reuse the same logic as newFilter a couple lines below to resolve fields, in order to make sure to not break the behavior of exists queries. Can you extract how fields are resolved to a separate method, use it here, and rewrite to a MatchNoneQueryBuilder if none of the fields is mapped?", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r404635031", "createdAt": "2020-04-07T08:36:43Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java", "diffHunk": "@@ -77,6 +77,18 @@ public String fieldName() {\n         return this.fieldName;\n     }\n \n+    @Override\n+    protected QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {\n+        QueryShardContext context = queryShardContext.convertToShardContext();\n+        if (context != null) {\n+            MappedFieldType fieldType = context.fieldMapper(fieldName);\n+            if (!fieldName.contains(\"*\") && fieldType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a81669e38f26270ce7306f9d7f197e22db461f"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e00e7d2d4b7921618a8339dab18bf5d98706f25", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/6e00e7d2d4b7921618a8339dab18bf5d98706f25", "committedDate": "2020-04-07T23:30:01Z", "message": "Refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6", "committedDate": "2020-04-09T20:19:21Z", "message": "Refactoring the comment section"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzUzNTMx", "url": "https://github.com/elastic/elasticsearch/pull/54857#pullrequestreview-391353531", "createdAt": "2020-04-10T09:25:42Z", "commit": {"oid": "bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOToyNTo0MlrOGD1zRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTozMDo1N1rOGD16Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MDM5MA==", "bodyText": "It's very easy for this method to get out-of-sync with newFilter, which would likely translate into bugs. Can you make this method called by newFilter? For instance I wonder that it could return a collection of fields instead of a boolean, and all above return false statements would become return Collections.emptySet(); and then in doRewrite we'd check whether the return collection is empty? Finally in doToQuery we could raise an exception when the returned collection is empty, as it would mean that the query wasn't rewritten first even though it is a requirement of the API.", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r406680390", "createdAt": "2020-04-10T09:25:42Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java", "diffHunk": "@@ -181,6 +192,45 @@ private static Query newObjectFieldExistsQuery(QueryShardContext context, String\n         return new ConstantScoreQuery(booleanQuery.build());\n     }\n \n+    /**\n+     * Helper method to validate whether field is mapped\n+     * @return true if the field is mapped, false otherwise\n+     */\n+\n+    private static boolean isFieldMapped(QueryShardContext context, String fieldPattern) {\n+        final FieldNamesFieldMapper.FieldNamesFieldType fieldNamesFieldType = (FieldNamesFieldMapper.FieldNamesFieldType) context\n+            .getMapperService().fieldType(FieldNamesFieldMapper.NAME);\n+\n+        if (fieldNamesFieldType == null) {\n+            // can only happen when no types exist, so no docs exist either\n+            return false;\n+        }\n+\n+        final Collection<String> fields;\n+        if (context.getObjectMapper(fieldPattern) != null) {\n+            // the _field_names field also indexes objects, so we don't have to\n+            // do any more work to support exists queries on whole objects\n+            fields = Collections.singleton(fieldPattern);\n+        } else {\n+            fields = context.simpleMatchToIndexNames(fieldPattern);\n+        }\n+\n+        if (fields.size() == 1) {\n+            String field = fields.iterator().next();\n+            MappedFieldType fieldType = context.getMapperService().fieldType(field);\n+            if (fieldType == null) {\n+                // The field does not exist as a leaf but could be an object so\n+                // check for an object mapper\n+                if (context.getObjectMapper(field) != null) {\n+                    return false;\n+                }\n+                return false; // no field mapped\n+            }\n+        }\n+\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MDYxOQ==", "bodyText": "please remove this empty line for consistency with the rest of the code base, we generally don't leave empty lines between javadocs and methods", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r406680619", "createdAt": "2020-04-10T09:26:24Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java", "diffHunk": "@@ -181,6 +192,45 @@ private static Query newObjectFieldExistsQuery(QueryShardContext context, String\n         return new ConstantScoreQuery(booleanQuery.build());\n     }\n \n+    /**\n+     * Helper method to validate whether field is mapped\n+     * @return true if the field is mapped, false otherwise\n+     */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjA3NA==", "bodyText": "Let's remove this assertion on the error message. I suspect that attempting to maintain this error message is not going to be worth the efforts, and there is no point in asserting on an error message that is not helpful.", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r406682074", "createdAt": "2020-04-10T09:30:31Z", "author": {"login": "jpountz"}, "path": "server/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java", "diffHunk": "@@ -62,12 +62,12 @@ protected void doAssertLuceneQuery(ExistsQueryBuilder queryBuilder, Query query,\n         String fieldPattern = queryBuilder.fieldName();\n         Collection<String> fields = context.simpleMatchToIndexNames(fieldPattern);\n         Collection<String> mappedFields = fields.stream().filter((field) -> context.getObjectMapper(field) != null\n-                || context.getMapperService().fieldType(field) != null).collect(Collectors.toList());\n+            || context.getMapperService().fieldType(field) != null).collect(Collectors.toList());\n         if (fields.size() == 1 && mappedFields.size() == 0) {\n             assertThat(query, instanceOf(MatchNoDocsQuery.class));\n             MatchNoDocsQuery matchNoDocsQuery = (MatchNoDocsQuery) query;\n             assertThat(matchNoDocsQuery.toString(null),\n-                    containsString(\"No field \\\"\" + fields.iterator().next() + \"\\\" exists in mappings.\"));\n+                containsString(\"User requested \\\"match_none\\\" query.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjIxNA==", "bodyText": "can you undo all indentation changes to this pull request?", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r406682214", "createdAt": "2020-04-10T09:30:57Z", "author": {"login": "jpountz"}, "path": "server/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java", "diffHunk": "@@ -115,7 +115,7 @@ public void testIllegalArguments() {\n \n     public void testFromJson() throws IOException {\n         String json =\n-                \"{\\n\" +\n+            \"{\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfb2fbc8f62fb9ed9251812fa37c051ea9b53e6"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274cf4338d892465381b3707a891b479a4dd36fb", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/274cf4338d892465381b3707a891b479a4dd36fb", "committedDate": "2020-04-12T03:20:05Z", "message": "Refactoring review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fef8b0a885f5739ca8316de97be1a778420898bc", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/fef8b0a885f5739ca8316de97be1a778420898bc", "committedDate": "2020-04-12T03:23:14Z", "message": "Indentation changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13901cb4b9c16765e08a2365eb1da1880a18f2ed", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/13901cb4b9c16765e08a2365eb1da1880a18f2ed", "committedDate": "2020-04-12T03:25:52Z", "message": "Indendation again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTAwMTk4", "url": "https://github.com/elastic/elasticsearch/pull/54857#pullrequestreview-392100198", "createdAt": "2020-04-13T11:49:07Z", "commit": {"oid": "13901cb4b9c16765e08a2365eb1da1880a18f2ed"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMTo0OTowN1rOGEkTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMTo1MDoyMFrOGEkVSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0MjM3Mw==", "bodyText": "I believe that this entire if statement can be removed without affecting correctness. It is not possible to have a field that is neither and object nor a field at this stage.", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r407442373", "createdAt": "2020-04-13T11:49:07Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java", "diffHunk": "@@ -181,6 +183,43 @@ private static Query newObjectFieldExistsQuery(QueryShardContext context, String\n         return new ConstantScoreQuery(booleanQuery.build());\n     }\n \n+    /**\n+     * Helper method to get field mapped to this fieldPattern\n+     * @return return collection of fields if exists else return empty.\n+     */\n+    private static Collection<String> getMappedField(QueryShardContext context, String fieldPattern) {\n+        final FieldNamesFieldMapper.FieldNamesFieldType fieldNamesFieldType = (FieldNamesFieldMapper.FieldNamesFieldType) context\n+            .getMapperService().fieldType(FieldNamesFieldMapper.NAME);\n+\n+        if (fieldNamesFieldType == null) {\n+            // can only happen when no types exist, so no docs exist either\n+            return Collections.emptySet();\n+        }\n+\n+        final Collection<String> fields;\n+        if (context.getObjectMapper(fieldPattern) != null) {\n+            // the _field_names field also indexes objects, so we don't have to\n+            // do any more work to support exists queries on whole objects\n+            fields = Collections.singleton(fieldPattern);\n+        } else {\n+            fields = context.simpleMatchToIndexNames(fieldPattern);\n+        }\n+\n+        if (fields.size() == 1) {\n+            String field = fields.iterator().next();\n+            MappedFieldType fieldType = context.getMapperService().fieldType(field);\n+            if (fieldType == null) {\n+                // The field does not exist as a leaf but could be an object so\n+                // check for an object mapper\n+                if (context.getObjectMapper(field) == null) {\n+                    return Collections.emptySet();\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13901cb4b9c16765e08a2365eb1da1880a18f2ed"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0Mjc2MQ==", "bodyText": "this line is unreachable right? maybe throw an IllegalStateException instead? If I'm wrong and this is not dead code, would you mind explaining the conditions under which it is triggered?", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r407442761", "createdAt": "2020-04-13T11:50:20Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java", "diffHunk": "@@ -165,7 +167,7 @@ private static Query newFieldExistsQuery(QueryShardContext context, String field\n             if (context.getObjectMapper(field) != null) {\n                 return newObjectFieldExistsQuery(context, field);\n             }\n-            return Queries.newMatchNoDocsQuery(\"No field \\\"\" + field + \"\\\" exists in mappings.\");\n+            return Queries.newMatchNoDocsQuery(\"User requested \\\"match_none\\\" query.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13901cb4b9c16765e08a2365eb1da1880a18f2ed"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ba7475e903f7fb70c79ee302166d6db92d14ab", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/73ba7475e903f7fb70c79ee302166d6db92d14ab", "committedDate": "2020-04-16T07:01:09Z", "message": "Adding test for rewrite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTY1MzE2", "url": "https://github.com/elastic/elasticsearch/pull/54857#pullrequestreview-394565316", "createdAt": "2020-04-16T12:05:56Z", "commit": {"oid": "73ba7475e903f7fb70c79ee302166d6db92d14ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjowNTo1N1rOGGiExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjowNTo1N1rOGGiExQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwMjkxNw==", "bodyText": "Thanks I had the wrong assumption that simpleMatchToIndexName would return an empty set if the field is not mapped.", "url": "https://github.com/elastic/elasticsearch/pull/54857#discussion_r409502917", "createdAt": "2020-04-16T12:05:57Z", "author": {"login": "jpountz"}, "path": "server/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java", "diffHunk": "@@ -181,6 +183,43 @@ private static Query newObjectFieldExistsQuery(QueryShardContext context, String\n         return new ConstantScoreQuery(booleanQuery.build());\n     }\n \n+    /**\n+     * Helper method to get field mapped to this fieldPattern\n+     * @return return collection of fields if exists else return empty.\n+     */\n+    private static Collection<String> getMappedField(QueryShardContext context, String fieldPattern) {\n+        final FieldNamesFieldMapper.FieldNamesFieldType fieldNamesFieldType = (FieldNamesFieldMapper.FieldNamesFieldType) context\n+            .getMapperService().fieldType(FieldNamesFieldMapper.NAME);\n+\n+        if (fieldNamesFieldType == null) {\n+            // can only happen when no types exist, so no docs exist either\n+            return Collections.emptySet();\n+        }\n+\n+        final Collection<String> fields;\n+        if (context.getObjectMapper(fieldPattern) != null) {\n+            // the _field_names field also indexes objects, so we don't have to\n+            // do any more work to support exists queries on whole objects\n+            fields = Collections.singleton(fieldPattern);\n+        } else {\n+            fields = context.simpleMatchToIndexNames(fieldPattern);\n+        }\n+\n+        if (fields.size() == 1) {\n+            String field = fields.iterator().next();\n+            MappedFieldType fieldType = context.getMapperService().fieldType(field);\n+            if (fieldType == null) {\n+                // The field does not exist as a leaf but could be an object so\n+                // check for an object mapper\n+                if (context.getObjectMapper(field) == null) {\n+                    return Collections.emptySet();\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0MjM3Mw=="}, "originalCommit": {"oid": "13901cb4b9c16765e08a2365eb1da1880a18f2ed"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTY3NDY5", "url": "https://github.com/elastic/elasticsearch/pull/54857#pullrequestreview-394567469", "createdAt": "2020-04-16T12:09:05Z", "commit": {"oid": "73ba7475e903f7fb70c79ee302166d6db92d14ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c969bc1bc66fde9f4c9d2aa4fc099554ccb0b9df", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/c969bc1bc66fde9f4c9d2aa4fc099554ccb0b9df", "committedDate": "2020-04-16T14:57:08Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44afde6b6592b71169a7d17cbcbc8784bd5d9ae6", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/44afde6b6592b71169a7d17cbcbc8784bd5d9ae6", "committedDate": "2020-04-18T17:42:22Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a3ec01efde242e575d66b83ef273eab9db3bd06", "author": {"user": {"login": "SivagurunathanV", "name": "Sivagurunathan Velayutham"}}, "url": "https://github.com/elastic/elasticsearch/commit/7a3ec01efde242e575d66b83ef273eab9db3bd06", "committedDate": "2020-04-21T15:52:32Z", "message": "Merge remote-tracking branch 'upstream/master'"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}