{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDg0NDM5", "number": 62480, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjowMDo1OVrOEkH6vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjowMDo1OVrOEkH6vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzEzOTE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalCardinality.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjowMDo1OVrOHS33AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoxMzo0MlrOHS4WgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MTYxNw==", "bodyText": "This means that as soon as you reduce you allocate the whole array, even if the cardinality is still small.", "url": "https://github.com/elastic/elasticsearch/pull/62480#discussion_r489551617", "createdAt": "2020-09-16T16:00:59Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalCardinality.java", "diffHunk": "@@ -78,34 +78,30 @@ public long getValue() {\n         return counts == null ? 0 : counts.cardinality(0);\n     }\n \n-    public HyperLogLogPlusPlus getCounts() {\n+    public AbstractHyperLogLogPlusPlus getCounts() {\n         return counts;\n     }\n \n     @Override\n     public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {\n-        InternalCardinality reduced = null;\n+        HyperLogLogPlusPlus reduced = null;\n         for (InternalAggregation aggregation : aggregations) {\n             final InternalCardinality cardinality = (InternalCardinality) aggregation;\n             if (cardinality.counts != null) {\n                 if (reduced == null) {\n-                    reduced = new InternalCardinality(name, new HyperLogLogPlusPlus(cardinality.counts.precision(),\n-                            BigArrays.NON_RECYCLING_INSTANCE, 1), getMetadata());\n+                    reduced = new HyperLogLogPlusPlus(cardinality.counts.precision(),\n+                        BigArrays.NON_RECYCLING_INSTANCE, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e488006a90ec6e62a807772ee19f7b18b281ac5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1OTY4MA==", "bodyText": "Yes, the reduce phase is in the expensive object because the sparse does not know how to merge. Note it does not check for duplicates so it is not design for reduce, next iteration.", "url": "https://github.com/elastic/elasticsearch/pull/62480#discussion_r489559680", "createdAt": "2020-09-16T16:13:42Z", "author": {"login": "iverase"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalCardinality.java", "diffHunk": "@@ -78,34 +78,30 @@ public long getValue() {\n         return counts == null ? 0 : counts.cardinality(0);\n     }\n \n-    public HyperLogLogPlusPlus getCounts() {\n+    public AbstractHyperLogLogPlusPlus getCounts() {\n         return counts;\n     }\n \n     @Override\n     public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {\n-        InternalCardinality reduced = null;\n+        HyperLogLogPlusPlus reduced = null;\n         for (InternalAggregation aggregation : aggregations) {\n             final InternalCardinality cardinality = (InternalCardinality) aggregation;\n             if (cardinality.counts != null) {\n                 if (reduced == null) {\n-                    reduced = new InternalCardinality(name, new HyperLogLogPlusPlus(cardinality.counts.precision(),\n-                            BigArrays.NON_RECYCLING_INSTANCE, 1), getMetadata());\n+                    reduced = new HyperLogLogPlusPlus(cardinality.counts.precision(),\n+                        BigArrays.NON_RECYCLING_INSTANCE, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MTYxNw=="}, "originalCommit": {"oid": "7e488006a90ec6e62a807772ee19f7b18b281ac5"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1492, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}