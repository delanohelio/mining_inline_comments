{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzY5MTg0", "number": 51508, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo0NDoyM1rODbHV-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowNjoxNFrODb2_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzU4NDU5OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo0NDoyM1rOFiajKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo0NDoyM1rOFiajKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMDg5MQ==", "bodyText": "Maybe call this resilient like in ReindexTaskParams?", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r371630891", "createdAt": "2020-01-28T06:44:23Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdater.java", "diffHunk": "@@ -45,19 +45,22 @@\n     private final ThreadPool threadPool;\n     private final String taskId;\n     private final long allocationId;\n+    private final boolean persistent;\n     private final ActionListener<ReindexTaskStateDoc> finishedListener;\n     private final Runnable onCheckpointAssignmentConflict;\n     private ThrottlingConsumer<Tuple<ScrollableHitSource.Checkpoint, BulkByScrollTask.Status>> checkpointThrottler;\n \n     private ReindexTaskState lastState;\n     private AtomicBoolean isDone = new AtomicBoolean();\n \n-    public ReindexTaskStateUpdater(ReindexIndexClient reindexIndexClient, ThreadPool threadPool, String persistentTaskId, long allocationId,\n-                                   ActionListener<ReindexTaskStateDoc> finishedListener, Runnable onCheckpointAssignmentConflict) {\n+    public ReindexTaskStateUpdater(ReindexIndexClient reindexIndexClient, ThreadPool threadPool, String taskId, long allocationId,\n+                                   boolean persistent, ActionListener<ReindexTaskStateDoc> finishedListener,\n+                                   Runnable onCheckpointAssignmentConflict) {\n         this.reindexIndexClient = reindexIndexClient;\n         this.threadPool = threadPool;\n-        this.taskId = persistentTaskId;\n+        this.taskId = taskId;\n         this.allocationId = allocationId;\n+        this.persistent = persistent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5230df4c0b698e2bc02234222b06c5633016963d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzU5ODQ3OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexRunAsPersistentAndEphemeralTaskTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo1Mzo1OVrOFiarfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo1Mzo1OVrOFiarfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMzAyMg==", "bodyText": "I think that we should ensure that this always runs in all both modes (i.e. the test runs in 3 modes total) to ensure that we cannot break one of the modes in a PR without noticing. This can be done in a follow-up.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r371633022", "createdAt": "2020-01-28T06:53:59Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexRunAsPersistentAndEphemeralTaskTestCase.java", "diffHunk": "@@ -46,7 +46,7 @@\n                 @Override\n                 public ActionFuture<BulkByScrollResponse> execute() {\n                     PlainActionFuture<BulkByScrollResponse> futureResult = new PlainActionFuture<>();\n-                    client.execute(StartReindexTaskAction.INSTANCE, new StartReindexTaskAction.Request(request(), true),\n+                    client.execute(StartReindexTaskAction.INSTANCE, new StartReindexTaskAction.Request(request(), true, randomBoolean()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5230df4c0b698e2bc02234222b06c5633016963d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY0MTM5OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportStartReindexTaskAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoxOToyNFrOFibEpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjowMToxM1rOFjN9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzOTQ2MQ==", "bodyText": "For a non-resilient reindex, I think we could change the failure message in waitForReindexDone further down to signal more precisely that the original coordinator has failed?\nI think this is the only real way to get assignment_failed out anyway, since we  now retry indefinitely.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r371639461", "createdAt": "2020-01-28T07:19:24Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportStartReindexTaskAction.java", "diffHunk": "@@ -108,7 +108,7 @@ protected void doExecute(Task task, StartReindexTaskAction.Request request, Acti\n \n         // In the current implementation, we only need to store task results if we do not wait for completion\n         boolean storeTaskResult = request.getWaitForCompletion() == false;\n-        ReindexTaskParams job = new ReindexTaskParams(storeTaskResult, included);\n+        ReindexTaskParams job = new ReindexTaskParams(storeTaskResult, request.isResilient(), included);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5230df4c0b698e2bc02234222b06c5633016963d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3MzIwMw==", "bodyText": "I added a new failure message in the case where assignment fails and resilient=false. I left a failure message when resilient=true. I don't think that scenario should happen. But it is nice to have the feedback in case in does happen and we can investigate.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372473203", "createdAt": "2020-01-29T16:01:13Z", "author": {"login": "tbrooks8"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportStartReindexTaskAction.java", "diffHunk": "@@ -108,7 +108,7 @@ protected void doExecute(Task task, StartReindexTaskAction.Request request, Acti\n \n         // In the current implementation, we only need to store task results if we do not wait for completion\n         boolean storeTaskResult = request.getWaitForCompletion() == false;\n-        ReindexTaskParams job = new ReindexTaskParams(storeTaskResult, included);\n+        ReindexTaskParams job = new ReindexTaskParams(storeTaskResult, request.isResilient(), included);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzOTQ2MQ=="}, "originalCommit": {"oid": "5230df4c0b698e2bc02234222b06c5633016963d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY0NDIzOnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyMTowM1rOFibGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyMTowM1rOFibGYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzOTkwNg==", "bodyText": "Maybe we need a 7.x escape hatch to do the old transport action too? For those weird cases (if any) where they use lots of very small reindexes.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r371639906", "createdAt": "2020-01-28T07:21:03Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "diffHunk": "@@ -62,16 +63,16 @@ public String getName() {\n     public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n         // todo: remove system property escape hatch in 8.0\n         // todo: fix version constant on backport to 7.x\n-        if (clusterService.state().nodes().getMinNodeVersion().before(Version.V_8_0_0)\n-                || System.getProperty(\"es.reindex.resilience\", \"true\").equals(\"false\")) {\n+        if (clusterService.state().nodes().getMinNodeVersion().before(Version.V_8_0_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5230df4c0b698e2bc02234222b06c5633016963d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI2MjQ5OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateDoc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyNTo1N1rOFjkObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyNTo1N1rOFjkObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNzk5Nw==", "bodyText": "nit: move one line up to maintain same order as in constructor and xcontent parsing.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372837997", "createdAt": "2020-01-30T09:25:57Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateDoc.java", "diffHunk": "@@ -33,11 +33,13 @@\n public class ReindexTaskStateDoc implements ToXContentObject {\n \n     public static final ConstructingObjectParser<ReindexTaskStateDoc, Void> PARSER =\n-        new ConstructingObjectParser<>(\"reindex/index_state\", a -> new ReindexTaskStateDoc((ReindexRequest) a[0], (Long) a[1],\n-            (BulkByScrollResponse) a[2], (ElasticsearchException) a[3], (Integer) a[4], (ScrollableHitSource.Checkpoint) a[5]));\n+        new ConstructingObjectParser<>(\"reindex/index_state\", a -> new ReindexTaskStateDoc((ReindexRequest) a[0], (Boolean) a[1],\n+            (Long) a[2], (BulkByScrollResponse) a[3], (ElasticsearchException) a[4], (Integer) a[5],\n+            (ScrollableHitSource.Checkpoint) a[6]));\n \n     private static final String REINDEX_REQUEST = \"request\";\n     private static final String ALLOCATION = \"allocation\";\n+    private static final String RESILIENT = \"resilient\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI2MjkxOnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateDoc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyNjowOVrOFjkOvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyNjowOVrOFjkOvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzODA3OQ==", "bodyText": "nit: move one line up to maintain same order as in constructor and xcontent parsing.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372838079", "createdAt": "2020-01-30T09:26:09Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateDoc.java", "diffHunk": "@@ -58,34 +61,37 @@\n \n     private final ReindexRequest reindexRequest;\n     private final Long allocationId;\n+    private final boolean resilient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTMyMTc1OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdaterTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo0NTowMlrOFjky1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo0NTowMlrOFjky1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0NzMxOA==", "bodyText": "nit: not sure I understand the name oldAllocationUpdater (seems to be a copy-paste from another test)? I would call this one failedOverUpdater or something similar?", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372847318", "createdAt": "2020-01-30T09:45:02Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdaterTests.java", "diffHunk": "@@ -84,6 +84,52 @@ public void onFailure(Exception exception) {\n         assertThat(exceptionRef.get().getMessage(), equalTo(\"A newer task has already been allocated\"));\n     }\n \n+    public void testFailoverAssignmentFailsIfNonResilient() throws Exception {\n+        String taskId = randomAlphaOfLength(10);\n+        ReindexIndexClient reindexClient = getReindexClient();\n+        createDoc(reindexClient, taskId, false);\n+\n+        ReindexTaskStateUpdater updater = new ReindexTaskStateUpdater(reindexClient, client().threadPool(),\n+            taskId, 0, ActionListener.wrap(() -> {}), () -> {});\n+        CountDownLatch successLatch = new CountDownLatch(1);\n+\n+        updater.assign(new ActionListener<>() {\n+            @Override\n+            public void onResponse(ReindexTaskStateDoc stateDoc) {\n+                successLatch.countDown();\n+            }\n+\n+            @Override\n+            public void onFailure(Exception exception) {\n+                successLatch.countDown();\n+                fail();\n+            }\n+        });\n+        successLatch.await();\n+\n+        ReindexTaskStateUpdater oldAllocationUpdater = new ReindexTaskStateUpdater(reindexClient, client().threadPool(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTM0MTcwOnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo1MToyOFrOFjk_fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo1MToyOFrOFjk_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MDU1OA==", "bodyText": "My rethrottle PR does the opposite rename. We can discuss that on that PR. I think I would prefer to leave the rename of the parameter out here, in order to avoid conflicts, but we can also sort that out as is.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372850558", "createdAt": "2020-01-30T09:51:28Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdater.java", "diffHunk": "@@ -52,11 +52,11 @@\n     private ReindexTaskState lastState;\n     private AtomicBoolean isDone = new AtomicBoolean();\n \n-    public ReindexTaskStateUpdater(ReindexIndexClient reindexIndexClient, ThreadPool threadPool, String persistentTaskId, long allocationId,\n+    public ReindexTaskStateUpdater(ReindexIndexClient reindexIndexClient, ThreadPool threadPool, String taskId, long allocationId,\n                                    ActionListener<ReindexTaskStateDoc> finishedListener, Runnable onCheckpointAssignmentConflict) {\n         this.reindexIndexClient = reindexIndexClient;\n         this.threadPool = threadPool;\n-        this.taskId = persistentTaskId;\n+        this.taskId = taskId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTM3ODE2OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowMjoyM1rOFjlWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTo1MzoyNFrOFj_fCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NjMzMQ==", "bodyText": "I believe we settled on making this a cluster setting and not a parameter?\nEdit: Now that I think back, we ended up making this choice be based on the specified sorting. I am not really sure that opt-in that way will work very well.\nI think we should change this to read a system property instead until settled.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372856331", "createdAt": "2020-01-30T10:02:23Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "diffHunk": "@@ -67,11 +67,12 @@ public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client\n             return doPrepareRequest(request, client, true, true);\n         }\n \n+        boolean resilient = request.paramAsBoolean(\"resilient\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NDYxOQ==", "bodyText": "I thought I remember that we decided to make it on a per-request basis. Anyway I changed it to a system property for now.\nLong term I think a system property == bad since it is node dependent. Sorting seems bad to me since it is super implicit. And cluster setting seems bad to me since there might be valid reasons why you want to faster performance in some circumstances.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r373284619", "createdAt": "2020-01-31T01:53:24Z", "author": {"login": "tbrooks8"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "diffHunk": "@@ -67,11 +67,12 @@ public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client\n             return doPrepareRequest(request, client, true, true);\n         }\n \n+        boolean resilient = request.paramAsBoolean(\"resilient\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NjMzMQ=="}, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTM4MTA4OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowMzoxNlrOFjlX2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowMzoxNlrOFjlX2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1Njc5Mw==", "bodyText": "I think we should rename the system property (one line up, cannot comment on that one) to be \"es.reindex.persistent\".", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372856793", "createdAt": "2020-01-30T10:03:16Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java", "diffHunk": "@@ -67,11 +67,12 @@ public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client\n             return doPrepareRequest(request, client, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTM4NDMzOnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdater.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowNDoyMFrOFjlZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowNDoyMFrOFjlZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NzMxNw==", "bodyText": "I think we should add a reference to the cluster level setting, mentioning its name here. This could nudge some users into trying it out.\nIf you defer adding the cluster level setting to a follow-up, let us add a todo here so that we remember it.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372857317", "createdAt": "2020-01-30T10:04:20Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateUpdater.java", "diffHunk": "@@ -122,6 +125,24 @@ public void onFailure(Exception ex) {\n         });\n     }\n \n+    private ElasticsearchException assignmentFailureReason(ReindexTaskStateDoc oldDoc) {\n+        if (oldDoc.isResilient()) {\n+            if (oldDoc.getAllocationId() == null || allocationId > oldDoc.getAllocationId()) {\n+                return null;\n+            } else {\n+                return new ElasticsearchException(\"A newer task has already been allocated\");\n+            }\n+        } else {\n+            if (oldDoc.getAllocationId() == null) {\n+                return null;\n+            } else {\n+                return new ElasticsearchException(\"A prior task has already been allocated and reindexing is configured to be \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTM5MDA4OnYy", "diffSide": "RIGHT", "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateDoc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowNjoxNFrOFjldkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowNjoxNFrOFjldkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1ODI1Ng==", "bodyText": "I think we should add a xcontent serialization test too. Can be done in a follow-up if you prefer.", "url": "https://github.com/elastic/elasticsearch/pull/51508#discussion_r372858256", "createdAt": "2020-01-30T10:06:14Z", "author": {"login": "henningandersen"}, "path": "modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexTaskStateDoc.java", "diffHunk": "@@ -33,11 +33,13 @@\n public class ReindexTaskStateDoc implements ToXContentObject {\n \n     public static final ConstructingObjectParser<ReindexTaskStateDoc, Void> PARSER =\n-        new ConstructingObjectParser<>(\"reindex/index_state\", a -> new ReindexTaskStateDoc((ReindexRequest) a[0], (Long) a[1],\n-            (BulkByScrollResponse) a[2], (ElasticsearchException) a[3], (Integer) a[4], (ScrollableHitSource.Checkpoint) a[5]));\n+        new ConstructingObjectParser<>(\"reindex/index_state\", a -> new ReindexTaskStateDoc((ReindexRequest) a[0], (Boolean) a[1],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59e0cfdfaedbdfefafcd5d9297853ec08e94ea1"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 175, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}