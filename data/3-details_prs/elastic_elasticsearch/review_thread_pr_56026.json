{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNDg0MjEy", "number": 56026, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo0Mzo1NFrOD5vfDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo1NjoyN1rOD5vvIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODczNDIyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo0Mzo1NFrOGRLcfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo0Mzo1NFrOGRLcfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2NjQ5Mg==", "bodyText": "this could be final", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420666492", "createdAt": "2020-05-06T09:43:54Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODc1NzU2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo1MTowMlrOGRLraw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMDo0Njo0MFrOGRNaiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDMxNQ==", "bodyText": "I would try to document what this class does and how to use it. I will try with my words but correct me if I am wrong: BlockingQueryBuilder blocks on each shard, until the next set of results is requested through reacquireBlock. Also failures are sent back based on the provided number of failures.\nI would also consider renaming tryBlock and reacquireBlock to reflect what they are used for.", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420670315", "createdAt": "2020-05-06T09:51:02Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5ODc2MQ==", "bodyText": "I pushed 0304ec6", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420698761", "createdAt": "2020-05-06T10:46:40Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDMxNQ=="}, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODc2MDc1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo1MTo1MVrOGRLtSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzowOTo0MlrOGRxOIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA==", "bodyText": "can you add a small comment to explain that we have the scenario where the same shard id appears multiple times due to replicas and we want to count that as one failure?", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420670794", "createdAt": "2020-05-06T09:51:51Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();\n+        private int numShardFailures;\n+\n+        QueryLatch(int numShardFailures) {\n+            this.countDownLatch = new CountDownLatch(1);\n+            this.numShardFailures = numShardFailures;\n+        }\n+\n+        private void tryBlock(int shardId) throws IOException, InterruptedException {\n+            CountDownLatch last = countDownLatch;\n+            if (last != null) {\n+                last.await();\n+            }\n+            synchronized (this) {\n+                if (failedShards.contains(shardId)) {\n+                    throw new IOException(\"boom\");\n+                } else if (numShardFailures > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MTc3MQ==", "bodyText": "also could this block be replaced with the following?\nif (failedShards.add(shardId)) {\n    numShardFailures--;\n}\nthrow new IOException(\"boom\");\n\nand the set could be some concurrent impl so that we can remove the synchronized block?", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420671771", "createdAt": "2020-05-06T09:53:41Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();\n+        private int numShardFailures;\n+\n+        QueryLatch(int numShardFailures) {\n+            this.countDownLatch = new CountDownLatch(1);\n+            this.numShardFailures = numShardFailures;\n+        }\n+\n+        private void tryBlock(int shardId) throws IOException, InterruptedException {\n+            CountDownLatch last = countDownLatch;\n+            if (last != null) {\n+                last.await();\n+            }\n+            synchronized (this) {\n+                if (failedShards.contains(shardId)) {\n+                    throw new IOException(\"boom\");\n+                } else if (numShardFailures > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA=="}, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5ODYwNQ==", "bodyText": "I added a comment in 0304ec6. We could avoid the synchronized block but it feels easier to read and it's not a critical path ?", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420698605", "createdAt": "2020-05-06T10:46:21Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();\n+        private int numShardFailures;\n+\n+        QueryLatch(int numShardFailures) {\n+            this.countDownLatch = new CountDownLatch(1);\n+            this.numShardFailures = numShardFailures;\n+        }\n+\n+        private void tryBlock(int shardId) throws IOException, InterruptedException {\n+            CountDownLatch last = countDownLatch;\n+            if (last != null) {\n+                last.await();\n+            }\n+            synchronized (this) {\n+                if (failedShards.contains(shardId)) {\n+                    throw new IOException(\"boom\");\n+                } else if (numShardFailures > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA=="}, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4NTQxMA==", "bodyText": "I don't mind the synchronized. On readability, it's debatable I guess, I personally find the if based on the add result more readable. Up to you.", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r421285410", "createdAt": "2020-05-07T07:09:42Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();\n+        private int numShardFailures;\n+\n+        QueryLatch(int numShardFailures) {\n+            this.countDownLatch = new CountDownLatch(1);\n+            this.numShardFailures = numShardFailures;\n+        }\n+\n+        private void tryBlock(int shardId) throws IOException, InterruptedException {\n+            CountDownLatch last = countDownLatch;\n+            if (last != null) {\n+                last.await();\n+            }\n+            synchronized (this) {\n+                if (failedShards.contains(shardId)) {\n+                    throw new IOException(\"boom\");\n+                } else if (numShardFailures > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA=="}, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODc3NTM4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTo1NjoyN1rOGRL2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMDo0NjoyOVrOGRNaMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MzE4NQ==", "bodyText": "could you add a quick comment explaining what this iterator allows to do?", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420673185", "createdAt": "2020-05-06T09:56:27Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java", "diffHunk": "@@ -148,40 +169,25 @@ protected void ensureTaskCompletion(String id) throws Exception {\n     }\n \n     protected SearchResponseIterator assertBlockingIterator(String indexName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5ODY3NA==", "bodyText": "I pushed 0304ec6", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420698674", "createdAt": "2020-05-06T10:46:29Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java", "diffHunk": "@@ -148,40 +169,25 @@ protected void ensureTaskCompletion(String id) throws Exception {\n     }\n \n     protected SearchResponseIterator assertBlockingIterator(String indexName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MzE4NQ=="}, "originalCommit": {"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2426, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}