{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Njc0OTY4", "number": 51637, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDo1ODozNlrODcM6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowMDo1NVrODcPm7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODk4MjM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDo1ODozNlrOFkH_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoxOTowNlrOFkLFsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNDAzMg==", "bodyText": "I think we should not count cases where delta == 0 as a seek. I remember seeing some no-op calls to seekInternal() when looking at a separate issue, but I think we can make them have no effect on the underlying stream and therefore shouldn't be counted here.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373424032", "createdAt": "2020-01-31T10:58:36Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.xpack.searchablesnapshots.cache.CacheDirectory.CacheBufferedIndexInput;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.function.LongConsumer;\n+\n+/**\n+ * {@link IndexInputStats} records stats for a given {@link CacheBufferedIndexInput}.\n+ */\n+public class IndexInputStats {\n+\n+    static final double SEEKING_THRESHOLD = 0.25d;\n+\n+    private final long fileLength;\n+\n+    private final LongAdder opened = new LongAdder();\n+    private final LongAdder closed = new LongAdder();\n+\n+    private final Counter forwardSmallSeeks = new Counter();\n+    private final Counter backwardSmallSeeks = new Counter();\n+\n+    private final Counter forwardLargeSeeks = new Counter();\n+    private final Counter backwardLargeSeeks = new Counter();\n+\n+    private final Counter contiguousReads = new Counter();\n+    private final Counter nonContiguousReads = new Counter();\n+\n+    private final Counter directBytesRead = new Counter();\n+\n+    private final Counter cachedBytesRead = new Counter();\n+    private final Counter cachedBytesWritten = new Counter();\n+\n+    public IndexInputStats(long fileLength) {\n+        this.fileLength = fileLength;\n+    }\n+\n+    public void incrementOpenCount() {\n+        opened.increment();\n+    }\n+\n+    public void incrementCloseCount() {\n+        closed.increment();\n+    }\n+\n+    public void addCachedBytesRead(int bytesRead) {\n+        cachedBytesRead.add(bytesRead);\n+    }\n+\n+    public void addCachedBytesWritten(int bytesWritten) {\n+        cachedBytesWritten.add(bytesWritten);\n+    }\n+\n+    public void addDirectBytesRead(int bytesRead) {\n+        directBytesRead.add(bytesRead);\n+    }\n+\n+    public void incrementBytesRead(long previousPosition, long currentPosition, int bytesRead) {\n+        LongConsumer incBytesRead = (previousPosition == currentPosition) ? contiguousReads::add : nonContiguousReads::add;\n+        incBytesRead.accept(bytesRead);\n+    }\n+\n+    public void incrementSeeks(long currentPosition, long newPosition) {\n+        final long delta = newPosition - currentPosition;\n+        final double threshold = fileLength * SEEKING_THRESHOLD;\n+        LongConsumer incSeekCount;\n+        if (delta >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NDczNg==", "bodyText": "I agree. I've see, few of them too but running tests in a loop shows much more zero-seeking than I initially thought. I pushed 3f8b3a4 to ignore them.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373474736", "createdAt": "2020-01-31T13:19:06Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.xpack.searchablesnapshots.cache.CacheDirectory.CacheBufferedIndexInput;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.function.LongConsumer;\n+\n+/**\n+ * {@link IndexInputStats} records stats for a given {@link CacheBufferedIndexInput}.\n+ */\n+public class IndexInputStats {\n+\n+    static final double SEEKING_THRESHOLD = 0.25d;\n+\n+    private final long fileLength;\n+\n+    private final LongAdder opened = new LongAdder();\n+    private final LongAdder closed = new LongAdder();\n+\n+    private final Counter forwardSmallSeeks = new Counter();\n+    private final Counter backwardSmallSeeks = new Counter();\n+\n+    private final Counter forwardLargeSeeks = new Counter();\n+    private final Counter backwardLargeSeeks = new Counter();\n+\n+    private final Counter contiguousReads = new Counter();\n+    private final Counter nonContiguousReads = new Counter();\n+\n+    private final Counter directBytesRead = new Counter();\n+\n+    private final Counter cachedBytesRead = new Counter();\n+    private final Counter cachedBytesWritten = new Counter();\n+\n+    public IndexInputStats(long fileLength) {\n+        this.fileLength = fileLength;\n+    }\n+\n+    public void incrementOpenCount() {\n+        opened.increment();\n+    }\n+\n+    public void incrementCloseCount() {\n+        closed.increment();\n+    }\n+\n+    public void addCachedBytesRead(int bytesRead) {\n+        cachedBytesRead.add(bytesRead);\n+    }\n+\n+    public void addCachedBytesWritten(int bytesWritten) {\n+        cachedBytesWritten.add(bytesWritten);\n+    }\n+\n+    public void addDirectBytesRead(int bytesRead) {\n+        directBytesRead.add(bytesRead);\n+    }\n+\n+    public void incrementBytesRead(long previousPosition, long currentPosition, int bytesRead) {\n+        LongConsumer incBytesRead = (previousPosition == currentPosition) ? contiguousReads::add : nonContiguousReads::add;\n+        incBytesRead.accept(bytesRead);\n+    }\n+\n+    public void incrementSeeks(long currentPosition, long newPosition) {\n+        final long delta = newPosition - currentPosition;\n+        final double threshold = fileLength * SEEKING_THRESHOLD;\n+        LongConsumer incSeekCount;\n+        if (delta >= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNDAzMg=="}, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODk5MDE3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowMTozNFrOFkIEYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzozMDoxNVrOFkLWUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNTI1MA==", "bodyText": "Should we track the number of times we open an input on the inner Directory (both here and in readDirectly)? This results in a readBlob call which may be charged on a per-request basis.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373425250", "createdAt": "2020-01-31T11:01:34Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -188,33 +206,40 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n+                            stats.addDirectBytesRead(bytesRead);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            int bytesCopied = 0;\n             try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NTQ3OQ==", "bodyText": "As it is implemented today, I think it does not result in a readBlob until some bytes are read from the inner IndexInput. But counting the number of times the inner index input is opened is a valuable information so I added an \"inner open\" counter in 208b14f.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373475479", "createdAt": "2020-01-31T13:21:11Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -188,33 +206,40 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n+                            stats.addDirectBytesRead(bytesRead);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            int bytesCopied = 0;\n             try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNTI1MA=="}, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODk5Mg==", "bodyText": "Oh yes you're absolutely right. To be addressed elsewhere.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373478992", "createdAt": "2020-01-31T13:30:15Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -188,33 +206,40 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n+                            stats.addDirectBytesRead(bytesRead);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            int bytesCopied = 0;\n             try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNTI1MA=="}, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTAxMTkzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowOToxOFrOFkIQxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyMToxOVrOFkLIxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyODQyMg==", "bodyText": "Also, I think we should add a TRACE-level log recording the specific range we're copying here (and in readDirectly) because I think there will be situations where we need to see the details of the access pattern.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373428422", "createdAt": "2020-01-31T11:09:18Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -188,33 +206,40 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n+                            stats.addDirectBytesRead(bytesRead);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            int bytesCopied = 0;\n             try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NTUyNw==", "bodyText": "Added in 208b14f", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373475527", "createdAt": "2020-01-31T13:21:19Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -188,33 +206,40 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n+                            stats.addDirectBytesRead(bytesRead);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            int bytesCopied = 0;\n             try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyODQyMg=="}, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTA1NDQ4OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMToyNjoyMlrOFkIpmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzozMTozMlrOFkLYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDc3Ng==", "bodyText": "One of the big open questions about seeking is whether we are seeking forwards in small enough steps that we should have just requested a larger contiguous chunk of the blob up-front. Today the implementation is based on fixed-size chunks, so I think it makes sense to set a fixed-size threshold for what we consider to be a \"large\" seek. I would guess something like 8MB or 16MB would be a good start.\nWe could of course move to a chunk size that is proportional to the size of the underlying file, and in that case it makes more sense for the threshold to be proportional to the file size too.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373434776", "createdAt": "2020-01-31T11:26:22Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.xpack.searchablesnapshots.cache.CacheDirectory.CacheBufferedIndexInput;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.function.LongConsumer;\n+\n+/**\n+ * {@link IndexInputStats} records stats for a given {@link CacheBufferedIndexInput}.\n+ */\n+public class IndexInputStats {\n+\n+    static final double SEEKING_THRESHOLD = 0.25d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NTc2NA==", "bodyText": "This is a good observation. I pushed 51c4f43 to change the seeking threshold to 8Mb, let me know what you think.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373475764", "createdAt": "2020-01-31T13:21:56Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.xpack.searchablesnapshots.cache.CacheDirectory.CacheBufferedIndexInput;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.function.LongConsumer;\n+\n+/**\n+ * {@link IndexInputStats} records stats for a given {@link CacheBufferedIndexInput}.\n+ */\n+public class IndexInputStats {\n+\n+    static final double SEEKING_THRESHOLD = 0.25d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDc3Ng=="}, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3OTUxOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373479519", "createdAt": "2020-01-31T13:31:32Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/IndexInputStats.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.elasticsearch.xpack.searchablesnapshots.cache.CacheDirectory.CacheBufferedIndexInput;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.function.LongConsumer;\n+\n+/**\n+ * {@link IndexInputStats} records stats for a given {@link CacheBufferedIndexInput}.\n+ */\n+public class IndexInputStats {\n+\n+    static final double SEEKING_THRESHOLD = 0.25d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDc3Ng=="}, "originalCommit": {"oid": "409e720e12b8d284d95679518d3b6c1c42d7355a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTMzMjM2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyODoyM1rOFkLTUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo1Nzo1NlrOFkMFow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODIyNw==", "bodyText": "Ah, I think this will not include the shard ID so we might struggle to interpret the logs when there are lots of shards to search. I think logging cacheFileReference itself gives us everything we need.", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373478227", "createdAt": "2020-01-31T13:28:23Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -202,33 +224,43 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n+            final String fileName = cacheFileReference.getFileName();\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n-            try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {\n+            logger.trace(() -> new ParameterizedMessage(\"writing range [{}-{}] of file [{}] to cache file\", start, end, fileName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51c4f43a5753d38d81beabb83024c9268b99913d"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MTEwNw==", "bodyText": "Makes sense, I pushed 9de8453", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373491107", "createdAt": "2020-01-31T13:57:56Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -202,33 +224,43 @@ protected void readInternal(final byte[] buffer, final int offset, final int len\n                     if (e instanceof AlreadyClosedException || (e.getCause() != null && e.getCause() instanceof AlreadyClosedException)) {\n                         try {\n                             // cache file was evicted during the range fetching, read bytes directly from source\n-                            bytesRead += readDirectly(pos, pos + len, buffer, off);\n+                            bytesRead = readDirectly(pos, pos + len, buffer, off);\n                             continue;\n                         } catch (Exception inner) {\n                             e.addSuppressed(inner);\n                         }\n                     }\n                     throw new IOException(\"Fail to read data from cache\", e);\n \n+                } finally {\n+                    totalBytesRead += bytesRead;\n                 }\n             }\n-            assert bytesRead == length : \"partial read operation, read [\" + bytesRead + \"] bytes of [\" + length + \"]\";\n+            assert totalBytesRead == length : \"partial read operation, read [\" + totalBytesRead + \"] bytes of [\" + length + \"]\";\n+            stats.incrementBytesRead(lastReadPosition, position, totalBytesRead);\n+            lastReadPosition = position + totalBytesRead;\n         }\n \n         int readCacheFile(FileChannel fc, long end, long position, byte[] buffer, int offset, long length) throws IOException {\n             assert assertFileChannelOpen(fc);\n-            return Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            int bytesRead = Channels.readFromFileChannel(fc, position, buffer, offset, Math.toIntExact(Math.min(length, end - position)));\n+            stats.addCachedBytesRead(bytesRead);\n+            return bytesRead;\n         }\n \n         @SuppressForbidden(reason = \"Use positional writes on purpose\")\n         void writeCacheFile(FileChannel fc, long start, long end) throws IOException {\n             assert assertFileChannelOpen(fc);\n+            final String fileName = cacheFileReference.getFileName();\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n-            try (IndexInput input = in.openInput(cacheFileReference.getFileName(), ioContext)) {\n+            logger.trace(() -> new ParameterizedMessage(\"writing range [{}-{}] of file [{}] to cache file\", start, end, fileName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODIyNw=="}, "originalCommit": {"oid": "51c4f43a5753d38d81beabb83024c9268b99913d"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQyNDQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowMDo1NVrOFkMLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxNDoxMlrOFkMkAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MjU3MA==", "bodyText": "Sorry, here too :)", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373492570", "createdAt": "2020-01-31T14:00:55Z", "author": {"login": "DaveCTurner"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -279,10 +312,13 @@ public String toString() {\n         }\n \n         private int readDirectly(long start, long end, byte[] buffer, int offset) throws IOException {\n+            final String fileName = cacheFileReference.getFileName();\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            logger.trace(() -> new ParameterizedMessage(\"direct reading of range [{}-{}] from file [{}]\", start, end, fileName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de84533884a13e397406ed16aa5638cccb8ea9a"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5ODg4MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/51637#discussion_r373498881", "createdAt": "2020-01-31T14:14:12Z", "author": {"login": "tlrx"}, "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -279,10 +312,13 @@ public String toString() {\n         }\n \n         private int readDirectly(long start, long end, byte[] buffer, int offset) throws IOException {\n+            final String fileName = cacheFileReference.getFileName();\n             final byte[] copyBuffer = new byte[Math.toIntExact(Math.min(COPY_BUFFER_SIZE, end - start))];\n+            logger.trace(() -> new ParameterizedMessage(\"direct reading of range [{}-{}] from file [{}]\", start, end, fileName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MjU3MA=="}, "originalCommit": {"oid": "9de84533884a13e397406ed16aa5638cccb8ea9a"}, "originalPosition": 214}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 111, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}