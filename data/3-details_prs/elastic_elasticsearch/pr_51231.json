{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTI1MTE0", "number": 51231, "title": "[DOCS] Adds PUT inference API docs", "bodyText": "This PR adds the PUT inference API docs to the DFA API docs pool.\nRelated issue: elastic/ml-team#281\nAvailable preview: http://elasticsearch_51231.docs-preview.app.elstc.co/guide/en/elasticsearch/reference/master/put-inference.html", "createdAt": "2020-01-20T16:48:41Z", "url": "https://github.com/elastic/elasticsearch/pull/51231", "merged": true, "mergeCommit": {"oid": "67f14c3978e440309793fb99c9b309f65c1c81bf"}, "closed": true, "closedAt": "2020-01-31T12:12:25Z", "author": {"login": "szabosteve"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8PZnAAH2gAyMzY0OTI1MTE0Ojg3NGZjNTQ2OTE0OWY1OWI1ZjEzNDNkNzFlNzBhMGU0ZjcxMjNiMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_t4fFgFqTM1MTQ1OTk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "874fc5469149f59b5f1343d71e70a0e4f7123b26", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/874fc5469149f59b5f1343d71e70a0e4f7123b26", "committedDate": "2020-01-20T16:46:56Z", "message": "[DOCS] Adds PUT infrence API docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a511a4343afa5a54a691429fef6797b7285f88fd", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/a511a4343afa5a54a691429fef6797b7285f88fd", "committedDate": "2020-01-20T16:53:15Z", "message": "[DOCS] Modifies index."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd929e3cae78c041a014f01dec1eb937a287ee87", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/bd929e3cae78c041a014f01dec1eb937a287ee87", "committedDate": "2020-01-21T13:51:08Z", "message": "[DOCS] Adds more text."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6591513a10499d95e1ebf0f9e9c8de1822e529d1", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/6591513a10499d95e1ebf0f9e9c8de1822e529d1", "committedDate": "2020-01-22T09:48:16Z", "message": "[DOCS] Adds description."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzAzMzA3", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-346703307", "createdAt": "2020-01-22T16:00:57Z", "commit": {"oid": "6591513a10499d95e1ebf0f9e9c8de1822e529d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDo1N1rOFghkow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDo1N1rOFghkow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODgwMw==", "bodyText": "This should be Request body instead", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369648803", "createdAt": "2020-01-22T16:00:57Z", "author": {"login": "dolaru"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,447 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-query-params]]\n+==== {api-query-parms-title}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6591513a10499d95e1ebf0f9e9c8de1822e529d1"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed7dfb6158f5569705474977d9cf67bf06958ac", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/7ed7dfb6158f5569705474977d9cf67bf06958ac", "committedDate": "2020-01-22T16:06:58Z", "message": "[DOCS] Fixes section ID."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfefcff9bed22b3aafb25c45e185af15230440a5", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/cfefcff9bed22b3aafb25c45e185af15230440a5", "committedDate": "2020-01-22T16:12:52Z", "message": "[DOCS] Adds some more text."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f0614d00b17040d362aa100634afc8ec6716d1", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/70f0614d00b17040d362aa100634afc8ec6716d1", "committedDate": "2020-01-22T16:22:25Z", "message": "[DOCS] Adjusts code snippets."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1456d3dac6310bc34e652d6dabd13612bc3ec779", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/1456d3dac6310bc34e652d6dabd13612bc3ec779", "committedDate": "2020-01-22T16:31:00Z", "message": "[DOCS] Fixes indentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f686b98af95d01e38d1bffb85e2c347121cdeaf1", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/f686b98af95d01e38d1bffb85e2c347121cdeaf1", "committedDate": "2020-01-22T17:05:11Z", "message": "[DOCS] More indentation fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/cd74724674e8c890f94e1ac35d3084441fd3131e", "committedDate": "2020-01-22T17:16:19Z", "message": "[DOCS] Adds compressed_definition."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODI2NjI3", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-346826627", "createdAt": "2020-01-22T19:00:14Z", "commit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMDoxNFrOFgnZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowODozM1rOFgnpdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDI1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <titleabbrev>Crerate {infer} trained model</titleabbrev>\n          \n          \n            \n            <titleabbrev>Create {infer} trained model</titleabbrev>", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744250", "createdAt": "2020-01-22T19:00:14Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * source index: `read`, `view_index_metadata`\n          \n      \n    \n    \n  \n\nThere are no additional special roles. Either they must be a cluster admin, or a machine_learning_admin", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744648", "createdAt": "2020-01-22T19:01:00Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * destination index: `read`, `create_index`, `manage` and `index`", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744714", "createdAt": "2020-01-22T19:01:07Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDc4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * cluster: `monitor_ml`", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369744787", "createdAt": "2020-01-22T19:01:15Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTMwMg==", "bodyText": "we should specify input.field_names somewhere.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369745302", "createdAt": "2020-01-22T19:02:22Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTgwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `target_mean_encoding`.`target.map`:::\n          \n          \n            \n            `target_mean_encoding`.`target_map`:::", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369745800", "createdAt": "2020-01-22T19:03:24Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target.map`:::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `target_mean_encoding`.`default.value`:::\n          \n          \n            \n            `target_mean_encoding`.`default_value`:::", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369745925", "createdAt": "2020-01-22T19:03:37Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target.map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default.value`:::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0ODM0MQ==", "bodyText": "This seems out of place.\nThe rest of the examples are JSON object examples. I think we should supply examples for these objects as well.\nI am not sure if the additional text below is needed. Especially given the explanation above.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r369748341", "createdAt": "2020-01-22T19:08:33Z", "author": {"login": "benwtrent"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,456 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Crerate {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+\n+* source index: `read`, `view_index_metadata`\n+* destination index: `read`, `create_index`, `manage` and `index`\n+* cluster: `monitor_ml`\n+  \n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target.map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default.value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.\n+\n+`tree_node`.`split_feature`:::\n+(Optional, integer) \n+The index of the feature value in the feature array.\n+\n+`tree_node`.`node_index`:::\n+(Integer) \n+The index of the current node.\n+\n+`tree_node`.`split_gain`:::\n+(Optional, double) The information gain from the split.\n+\n+`tree_node`.`leaf_value`:::\n+(Optional, double) \n+The leaf value of the of the node, if the value is a leaf (in other words, no \n+children).\n+\n+`ensemble`::\n+(Optional, object)\n+The definition for an ensemble model.\n+\n+`ensemble`.`feature_names`:::\n+(Required, string) \n+Features expected by the ensemble, in their expected order.\n+\n+`ensemble`.`trained_models`:::\n+(Required, object)\n+An array of `trained_model` objects. Supported trained models are `tree` and \n+`ensemble`.\n+\n+`ensemble`.`classification_labels`:::\n+(Optional, string) \n+An array of classification labels.\n+\n+`ensemble`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification.`\n+\n+`ensemble`.`aggregate_output`:::\n+(Required, object) \n+An aggregated output object that defines how to aggregate the outputs of the \n+`trained_models`. Supported objects are `weighted_mode`, `weighted_sum`, and \n+`logistic_regression`.\n+\n+See <<ml-put-inference-model-example>> for more details.\n+\n+\n+[[ml-put-inference-aggregated-output]]\n+===== Aggregated output types\n+\n+`logistic_regression`::\n+(Optional, boolean) \n+This `aggregated_output` type works with binary classification (classification \n+for values [0, 1]). It multiplies the outputs (in the case of the `ensemble` \n+model, the inference model values) by the supplied `weights`. The resulting \n+vector is summed and passed to a \n+https://en.wikipedia.org/wiki/Sigmoid_function[`sigmoid` function]. The result \n+of the `sigmoid` function is considered the probability of class 1 (`P_1`), \n+consequently, the probability of class 0 is `1 - P_1`. The class with the \n+highest probability (either 0 or 1) is then returned. For more information about \n+logistic regression, see \n+https://en.wikipedia.org/wiki/Logistic_regression[this wiki article].\n+\n+`logistic_regression`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_sum`::\n+(Optional, object) \n+This `aggregated_output` type works with regression. The weighted sum of the \n+input values.\n+\n+`weighted_sum`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_mode`::\n+(Optional, object) \n+This `aggregated_output` type works with regression or classification. It takes \n+a weighted vote of the input values. The the most common input value (taking the \n+weights into account) is returned.\n+\n+`weighted_mode`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+\n+[[ml-put-inference-example]]\n+==== {api-examples-title}\n+\n+[[ml-put-inference-preprocessor-example]]\n+===== Preprocessor examples\n+\n+The example above shows a `frequency_encoding` preprocessor object:\n+\n+[source,js]\n+----------------------------------\n+{\n+   \"frequency_encoding\":{\n+      \"field\":\"FlightDelayType\",\n+      \"feature_name\":\"FlightDelayType_frequency\",\n+      \"frequency_map\":{\n+         \"Carrier Delay\":0.6007414737092798,\n+         \"NAS Delay\":0.6007414737092798,\n+         \"Weather Delay\":0.024573576178086153,\n+         \"Security Delay\":0.02476631010889467,\n+         \"No Delay\":0.6007414737092798,\n+         \"Late Aircraft Delay\":0.6007414737092798\n+      }\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+The next example shows a `one_hot_encoding` preprocessor object:\n+\n+[source,js]\n+----------------------------------\n+{ \n+   \"one_hot_encoding\":{ \n+      \"field\":\"FlightDelayType\",\n+      \"hot_map\":{ \n+         \"Carrier Delay\":\"FlightDelayType_Carrier Delay\",\n+         \"NAS Delay\":\"FlightDelayType_NAS Delay\",\n+         \"No Delay\":\"FlightDelayType_No Delay\",\n+         \"Late Aircraft Delay\":\"FlightDelayType_Late Aircraft Delay\"\n+      }\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+This example shows a `target_mean_encoding` preprocessor object:\n+\n+[source,js]\n+----------------------------------\n+{\n+   \"target_mean_encoding\":{\n+      \"field\":\"FlightDelayType\",\n+      \"feature_name\":\"FlightDelayType_targetmean\",\n+      \"target_map\":{\n+         \"Carrier Delay\":39.97465788139886,\n+         \"NAS Delay\":39.97465788139886,\n+         \"Security Delay\":203.171206225681,\n+         \"Weather Delay\":187.64705882352948,\n+         \"No Delay\":39.97465788139886,\n+         \"Late Aircraft Delay\":39.97465788139886\n+      },\n+      \"default_value\":158.17995752420433\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+[[ml-put-inference-model-example]]\n+===== Model examples\n+\n+The first example shows a `trained_model` object:\n+\n+[source,js]\n+----------------------------------\n+{\n+   \"tree\":{\n+      \"feature_names\":[\n+         \"DistanceKilometers\",\n+         \"FlightTimeMin\",\n+         \"FlightDelayType_NAS Delay\",\n+         \"Origin_targetmean\",\n+         \"DestRegion_targetmean\",\n+         \"DestCityName_targetmean\",\n+         \"OriginAirportID_targetmean\",\n+         \"OriginCityName_frequency\",\n+         \"DistanceMiles\",\n+         \"FlightDelayType_Late Aircraft Delay\"\n+      ],\n+      \"tree_structure\":[\n+         {\n+            \"decision_type\":\"lt\",\n+            \"threshold\":9069.33437193022,\n+            \"split_feature\":0,\n+            \"split_gain\":4112.094574306927,\n+            \"node_index\":0,\n+            \"default_left\":true,\n+            \"left_child\":1,\n+            \"right_child\":2\n+         },\n+         ...         \n+         {\n+            \"node_index\":9,\n+            \"leaf_value\":-27.68987349695448\n+         },\n+         ...\n+      ],\n+      \"target_type\":\"regression\"\n+   }\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+The following example shows an `ensemble` model object:\n+\n+[source,js]\n+----------------------------------\n+\"ensemble\":{\n+   \"feature_names\":[\n+      ...\n+   ],\n+   \"trained_models\":[\n+      {\n+         \"tree\":{\n+            \"feature_names\":[],\n+            \"tree_structure\":[\n+               {\n+                  \"decision_type\":\"lte\",\n+                  \"node_index\":0,\n+                  \"leaf_value\":47.64069875778043,\n+                  \"default_left\":false\n+               }\n+            ],\n+            \"target_type\":\"regression\"\n+         }\n+      },\n+      ...\n+   ],\n+   \"aggregate_output\":{\n+      \"weighted_sum\":{\n+         \"weights\":[\n+            ...\n+         ]\n+      }\n+   },\n+   \"target_type\":\"regression\"\n+}\n+----------------------------------\n+//NOTCONSOLE\n+\n+\n+[[ml-put-inference-aggregated-output-example]]\n+===== Aggregated output examples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd74724674e8c890f94e1ac35d3084441fd3131e"}, "originalPosition": 447}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e740b9f40709a2b1bb7d44894594df86e790767", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/0e740b9f40709a2b1bb7d44894594df86e790767", "committedDate": "2020-01-23T07:59:11Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Benjamin Trent <ben.w.trent@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72af32cc6989e49b1fdbde52296dcfed79df084", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/e72af32cc6989e49b1fdbde52296dcfed79df084", "committedDate": "2020-01-23T07:59:18Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Benjamin Trent <ben.w.trent@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e299e2938d995932554ae6e0e53b4732e414d5c9", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/e299e2938d995932554ae6e0e53b4732e414d5c9", "committedDate": "2020-01-23T07:59:28Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Benjamin Trent <ben.w.trent@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c487fc61fb4b63a7e98a6f3771ff1012478a3df", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/1c487fc61fb4b63a7e98a6f3771ff1012478a3df", "committedDate": "2020-01-23T07:59:36Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Benjamin Trent <ben.w.trent@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30314665ccab31b44a50ea201c1bbc47284a691d", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/30314665ccab31b44a50ea201c1bbc47284a691d", "committedDate": "2020-01-23T08:00:20Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Benjamin Trent <ben.w.trent@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e69db68da36fd61e227c6f1bf385d0e017e8f2c1", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/e69db68da36fd61e227c6f1bf385d0e017e8f2c1", "committedDate": "2020-01-23T08:00:28Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Benjamin Trent <ben.w.trent@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f155196682beb143762afc1a55a690963a242e80", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/f155196682beb143762afc1a55a690963a242e80", "committedDate": "2020-01-23T09:22:05Z", "message": "[DOCS] Addresses feeedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7874eee7af93c03d788e135e7990e8ccdb1494cf", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/7874eee7af93c03d788e135e7990e8ccdb1494cf", "committedDate": "2020-01-23T09:24:23Z", "message": "[DOCS] Adjustments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cf157ad576f52e4b8d22daf5fc401798022f38e", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/1cf157ad576f52e4b8d22daf5fc401798022f38e", "committedDate": "2020-01-23T09:29:43Z", "message": "[DOCS] Adds aggregated output examples."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be7749e69b7ffcdb50936321f5d66dca5b4ecef", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/3be7749e69b7ffcdb50936321f5d66dca5b4ecef", "committedDate": "2020-01-23T09:32:47Z", "message": "[DOCS] Minor adjustments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b863fcb4faa613535ba52942b424b90a825d95", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/f1b863fcb4faa613535ba52942b424b90a825d95", "committedDate": "2020-01-23T09:34:28Z", "message": "[DOCS] Adds missing brackets."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b30de89044712670d857120dec2ecf05b0469b", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/99b30de89044712670d857120dec2ecf05b0469b", "committedDate": "2020-01-23T12:46:12Z", "message": "[DOCS] Adds JSON schema."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/c66594f5826a5b8475d9b2a6502b7fc3668a663f", "committedDate": "2020-01-23T12:55:57Z", "message": "[DOCS] Comments out schema section."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDQzMDYx", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-349043061", "createdAt": "2020-01-27T23:18:25Z", "commit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxODoyNVrOFiUzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxODoyNVrOFiUzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjc4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create {infer} trained model API enables you to supply a trained model that is \n          \n          \n            \n            The create {infer} trained model API enables you to supply a trained model that is", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371536785", "createdAt": "2020-01-27T23:18:25Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDQ4MTMy", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-349048132", "createdAt": "2020-01-27T23:31:55Z", "commit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozMTo1NVrOFiVEtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozMTo1NVrOFiVEtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MTE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Should default to the left if the feature is missing. Defaults to `true`.\n          \n          \n            \n            Indicates whether to default to the left when the feature is missing. Defaults to `true`.", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371541173", "createdAt": "2020-01-27T23:31:55Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`input`.`field_names`:::\n+(Required, string) \n+An array of input field names for the model.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default_value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 200}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDUwMzI0", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-349050324", "createdAt": "2020-01-27T23:37:56Z", "commit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozNzo1NlrOFiVL3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzozNzo1NlrOFiVL3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MzAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            a weighted vote of the input values. The the most common input value (taking the \n          \n          \n            \n            a weighted vote of the input values. The most common input value (taking the", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371543007", "createdAt": "2020-01-27T23:37:56Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`input`.`field_names`:::\n+(Required, string) \n+An array of input field names for the model.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default_value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.\n+\n+`tree_node`.`split_feature`:::\n+(Optional, integer) \n+The index of the feature value in the feature array.\n+\n+`tree_node`.`node_index`:::\n+(Integer) \n+The index of the current node.\n+\n+`tree_node`.`split_gain`:::\n+(Optional, double) The information gain from the split.\n+\n+`tree_node`.`leaf_value`:::\n+(Optional, double) \n+The leaf value of the of the node, if the value is a leaf (in other words, no \n+children).\n+\n+`ensemble`::\n+(Optional, object)\n+The definition for an ensemble model.\n+\n+`ensemble`.`feature_names`:::\n+(Required, string) \n+Features expected by the ensemble, in their expected order.\n+\n+`ensemble`.`trained_models`:::\n+(Required, object)\n+An array of `trained_model` objects. Supported trained models are `tree` and \n+`ensemble`.\n+\n+`ensemble`.`classification_labels`:::\n+(Optional, string) \n+An array of classification labels.\n+\n+`ensemble`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification.`\n+\n+`ensemble`.`aggregate_output`:::\n+(Required, object) \n+An aggregated output object that defines how to aggregate the outputs of the \n+`trained_models`. Supported objects are `weighted_mode`, `weighted_sum`, and \n+`logistic_regression`.\n+\n+See <<ml-put-inference-model-example>> for more details.\n+\n+\n+[[ml-put-inference-aggregated-output]]\n+===== Aggregated output types\n+\n+`logistic_regression`::\n+(Optional, object) \n+This `aggregated_output` type works with binary classification (classification \n+for values [0, 1]). It multiplies the outputs (in the case of the `ensemble` \n+model, the inference model values) by the supplied `weights`. The resulting \n+vector is summed and passed to a \n+https://en.wikipedia.org/wiki/Sigmoid_function[`sigmoid` function]. The result \n+of the `sigmoid` function is considered the probability of class 1 (`P_1`), \n+consequently, the probability of class 0 is `1 - P_1`. The class with the \n+highest probability (either 0 or 1) is then returned. For more information about \n+logistic regression, see \n+https://en.wikipedia.org/wiki/Logistic_regression[this wiki article].\n+\n+`logistic_regression`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_sum`::\n+(Optional, object) \n+This `aggregated_output` type works with regression. The weighted sum of the \n+input values.\n+\n+`weighted_sum`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_mode`::\n+(Optional, object) \n+This `aggregated_output` type works with regression or classification. It takes \n+a weighted vote of the input values. The the most common input value (taking the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 282}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDUyNjE4", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-349052618", "createdAt": "2020-01-27T23:44:29Z", "commit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0NDoyOVrOFiVTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0NDoyOVrOFiVTGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDg1OQ==", "bodyText": "I think it's a bit unusual to have a bunch of incomplete examples in an API reference page. I think once we have a fuller set of examples (e.g. in https://www.elastic.co/guide/en/machine-learning/master/dfanalytics-examples.html), this section should just contain a single example (even if it's an abbreviated one).", "url": "https://github.com/elastic/elasticsearch/pull/51231#discussion_r371544859", "createdAt": "2020-01-27T23:44:29Z", "author": {"login": "lcawl"}, "path": "docs/reference/ml/df-analytics/apis/put-inference.asciidoc", "diffHunk": "@@ -0,0 +1,494 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[put-inference]]\n+=== Create {infer} trained model API\n+[subs=\"attributes\"]\n+++++\n+<titleabbrev>Create {infer} trained model</titleabbrev>\n+++++\n+\n+Creates an {infer} trained model.\n+\n+experimental[]\n+\n+\n+[[ml-put-inference-request]]\n+==== {api-request-title}\n+\n+`PUT _ml/inference/<model_id>`\n+\n+\n+[[ml-put-inference-prereq]]\n+==== {api-prereq-title}\n+\n+If the {es} {security-features} are enabled, you must have the following \n+built-in roles and privileges:\n+\n+* `machine_learning_admin`\n+\n+For more information, see <<security-privileges>> and <<built-in-roles>>.\n+\n+\n+[[ml-put-inference-desc]]\n+==== {api-description-title}\n+\n+Create {infer} trained model API enables you to supply a trained model that is \n+not created by {dfanalytics}. \n+\n+\n+[[ml-put-inference-path-params]]\n+==== {api-path-parms-title}\n+\n+`<model_id>`::\n+(Required, string) \n+include::{docdir}/ml/ml-shared.asciidoc[tag=model-id]\n+\n+\n+[[ml-put-inference-request-body]]\n+==== {api-request-body-title}\n+\n+`compressed_definition`::\n+(Required, string) \n+The compressed (GZipped and Base64 encoded) {infer} definition of the model. \n+If `compressed_definition` is specified, then `definition` cannot be specified.\n+\n+`definition`::\n+(Required, object) \n+The {infer} definition for the model. If `definition` is specified, then \n+`compressed_definition` cannot be specified.\n+\n+`definition`.`preprocessors`:::\n+(Optional, object)\n+Collection of preprocessors. See <<ml-put-inference-preprocessors>> for the full \n+list of available preprocessors.\n+\n+`definition`.`trained_model`:::\n+(Required, object) \n+The definition of the trained model. See <<ml-put-inference-trained-model>> for \n+details.\n+\n+`description`::\n+(Optional, string) \n+A human-readable description of the {infer} trained model.\n+\n+`input`::\n+(Required, object) \n+The input field names for the model definition.\n+\n+`input`.`field_names`:::\n+(Required, string) \n+An array of input field names for the model.\n+\n+`metadata`::\n+(Optional, object) \n+An object map that contains metadata about the model.\n+\n+`tags`::\n+(Optional, string) \n+An array of tags to organize the model.\n+\n+\n+[[ml-put-inference-preprocessors]]\n+===== {infer-cap} preprocessor definitions\n+\n+`frequency_encoding`::\n+(Required, object) \n+Defines a frequency encoding for a field.\n+\n+`frequency_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`frequency_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`frequency_encoding`.`frequency_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the frequency encoded value.\n+\n+`one_hot_encoding`::\n+(Required, object) \n+Defines a one hot encoding map for a field.\n+\n+`one_hot_encoding`.`field`:::\n+(Required, string) \n+The field name to encode.\n+\n+`one_hot_encoding`.`hot_map`:::\n+(Required, object map of strings) \n+String map of \"field_value: one_hot_column_name\".\n+\n+`target_mean_encoding`::\n+(Required, object) \n+Defines a target mean encoding for a field.\n+\n+`target_mean_encoding`.`field`:::\n+(Required, string)\n+The field name to encode.\n+\n+`target_mean_encoding`.`feature_name`:::\n+(Required, string) \n+The name of the resulting feature.\n+\n+`target_mean_encoding`.`target_map`:::\n+(Required, object map of string:double) \n+Object that maps the field value to the target mean value.\n+\n+`target_mean_encoding`.`default_value`:::\n+(Required, double) \n+The feature value if the field value is not in the `target_map`.\n+\n+See <<ml-put-inference-preprocessor-example>> for more details.\n+\n+\n+[[ml-put-inference-trained-model]]\n+===== {infer-cap} trained model definitions\n+\n+`tree`::\n+(Required, object) \n+The definition for a binary decision tree.\n+\n+`tree`.`feature_names`:::\n+(Required, string) \n+Features expected by the tree, in their expected order.\n+\n+`tree`.`tree_structure`:::\n+(Required, object) \n+An array of `tree_node` objects. The nodes must be in ordinal order by their \n+`tree_node.node_index` value.\n+\n+`tree`.`classification_labels`:::\n+(Optional, string) An array of classification labels (used for \n+`classification`).\n+\n+`tree`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification`.\n+\n+There are two major types of nodes: leaf nodes and not-leaf nodes.\n+\n+* Leaf nodes only need `node_index` and `leaf_value` defined.\n+* All other nodes need `split_feature`, `left_child`, `right_child`, \n+  `threshold`, `decision_type`, and `default_left` defined.\n+\n+\n+\n+`tree_node`::\n+(Required, object) \n+The definition of a node in a tree.\n+\n+`tree_node`.`decision_type`:::\n+(Optional, string) \n+Indicates the positive value (in other words, when to choose the left node) \n+decision type. Supported `lt`, `lte`, `gt`, `gte`. Defaults to `lte`.\n+\n+`tree_node`.`threshold`:::\n+(Optional, double) \n+The decision threshold with which to compare the feature value.\n+\n+`tree_node`.`left_child`:::\n+(Optional, integer) \n+The index of the left child.\n+\n+`tree_node`.`right_child`:::\n+(Optional, integer) \n+The index of the right child.\n+\n+`tree_node`.`default_left`:::\n+(Optional, boolean) \n+Should default to the left if the feature is missing. Defaults to `true`.\n+\n+`tree_node`.`split_feature`:::\n+(Optional, integer) \n+The index of the feature value in the feature array.\n+\n+`tree_node`.`node_index`:::\n+(Integer) \n+The index of the current node.\n+\n+`tree_node`.`split_gain`:::\n+(Optional, double) The information gain from the split.\n+\n+`tree_node`.`leaf_value`:::\n+(Optional, double) \n+The leaf value of the of the node, if the value is a leaf (in other words, no \n+children).\n+\n+`ensemble`::\n+(Optional, object)\n+The definition for an ensemble model.\n+\n+`ensemble`.`feature_names`:::\n+(Required, string) \n+Features expected by the ensemble, in their expected order.\n+\n+`ensemble`.`trained_models`:::\n+(Required, object)\n+An array of `trained_model` objects. Supported trained models are `tree` and \n+`ensemble`.\n+\n+`ensemble`.`classification_labels`:::\n+(Optional, string) \n+An array of classification labels.\n+\n+`ensemble`.`target_type`:::\n+(Required, string) \n+String indicating the model target type; `regression` or `classification.`\n+\n+`ensemble`.`aggregate_output`:::\n+(Required, object) \n+An aggregated output object that defines how to aggregate the outputs of the \n+`trained_models`. Supported objects are `weighted_mode`, `weighted_sum`, and \n+`logistic_regression`.\n+\n+See <<ml-put-inference-model-example>> for more details.\n+\n+\n+[[ml-put-inference-aggregated-output]]\n+===== Aggregated output types\n+\n+`logistic_regression`::\n+(Optional, object) \n+This `aggregated_output` type works with binary classification (classification \n+for values [0, 1]). It multiplies the outputs (in the case of the `ensemble` \n+model, the inference model values) by the supplied `weights`. The resulting \n+vector is summed and passed to a \n+https://en.wikipedia.org/wiki/Sigmoid_function[`sigmoid` function]. The result \n+of the `sigmoid` function is considered the probability of class 1 (`P_1`), \n+consequently, the probability of class 0 is `1 - P_1`. The class with the \n+highest probability (either 0 or 1) is then returned. For more information about \n+logistic regression, see \n+https://en.wikipedia.org/wiki/Logistic_regression[this wiki article].\n+\n+`logistic_regression`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_sum`::\n+(Optional, object) \n+This `aggregated_output` type works with regression. The weighted sum of the \n+input values.\n+\n+`weighted_sum`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+`weighted_mode`::\n+(Optional, object) \n+This `aggregated_output` type works with regression or classification. It takes \n+a weighted vote of the input values. The the most common input value (taking the \n+weights into account) is returned.\n+\n+`weighted_mode`.`weights`:::\n+(Required, double) \n+The weights to multiply by the input values (the inference values of the trained \n+models).\n+\n+See <<ml-put-inference-aggregated-output-example>> for more details.\n+\n+\n+[[ml-put-inference-example]]\n+==== {api-examples-title}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66594f5826a5b8475d9b2a6502b7fc3668a663f"}, "originalPosition": 295}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "663fc85e2bbc43915782ec4f1ff3785924ac7cc6", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/663fc85e2bbc43915782ec4f1ff3785924ac7cc6", "committedDate": "2020-01-28T07:42:02Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e2f2b855f8eb89428d80e1993fe268c7891715", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/74e2f2b855f8eb89428d80e1993fe268c7891715", "committedDate": "2020-01-28T07:42:14Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099678b649167886bddbfa3a0a86ee9851dc15a2", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/099678b649167886bddbfa3a0a86ee9851dc15a2", "committedDate": "2020-01-28T07:42:24Z", "message": "Update docs/reference/ml/df-analytics/apis/put-inference.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31dce1d1222834d5611d8d7ad0a6877e516d5f86", "author": {"user": {"login": "szabosteve", "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"}}, "url": "https://github.com/elastic/elasticsearch/commit/31dce1d1222834d5611d8d7ad0a6877e516d5f86", "committedDate": "2020-01-31T08:24:24Z", "message": "[DOCS] Adds link to the JSON schema."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDU5OTUz", "url": "https://github.com/elastic/elasticsearch/pull/51231#pullrequestreview-351459953", "createdAt": "2020-01-31T11:59:35Z", "commit": {"oid": "31dce1d1222834d5611d8d7ad0a6877e516d5f86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3049, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}