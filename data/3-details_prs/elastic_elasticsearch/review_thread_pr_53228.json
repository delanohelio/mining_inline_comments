{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODc3MzU5", "number": 53228, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjowODo0N1rODmesrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxODoxNFrODn7iyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjc1NDM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjowODo0N1rOFz7DMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjowODo0N1rOFz7DMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4OTE2OQ==", "bodyText": "Until we defined a better approach, can you start adding in something like this\nassert Version.CURRENT.major == 8 : \"REST API compatilbity for version 7 is only supported on version 8\";```", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r389989169", "createdAt": "2020-03-09T22:08:47Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java", "diffHunk": "@@ -86,4 +100,30 @@ protected RestStatus getStatus(final GetResponse response) {\n         });\n     }\n \n+    public static class CompatibleRestGetAction extends RestGetAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbea8a9650e63c2a7938a156639889523097a2f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjc2OTI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxNDozOFrOFz7MKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxNDozOFrOFz7MKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MTQ2Ng==", "bodyText": "Can you add a TODO in here to ensure we get some buy in on #52370 before we merge the header format.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r389991466", "createdAt": "2020-03-09T22:14:38Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.elasticsearch.rest;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.index.mapper.MapperService;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+\n+public class CompatibleHandlers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbea8a9650e63c2a7938a156639889523097a2f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjk0MDc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoxNjozNFrOF02YKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoxNjozNFrOF02YKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MTE5Mw==", "bodyText": "I think the above can be removed ?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390961193", "createdAt": "2020-03-11T13:16:34Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java", "diffHunk": "@@ -19,26 +19,40 @@\n \n package org.elasticsearch.rest.action.document;\n \n+import org.apache.logging.log4j.LogManager;\n import org.elasticsearch.Version;\n import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.support.ActiveShardCount;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.index.VersionType;\n import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.CompatibleHandlers;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestActions;\n import org.elasticsearch.rest.action.RestStatusToXContentListener;\n \n import java.io.IOException;\n import java.util.List;\n import java.util.Locale;\n+import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.unmodifiableList;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n import static org.elasticsearch.rest.RestRequest.Method.PUT;\n \n public class RestIndexAction extends BaseRestHandler {\n+    private static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in document \" +\n+        \"index requests is deprecated, use the typeless endpoints instead (/{index}/_doc/{id}, /{index}/_doc, \" +\n+        \"or /{index}/_create/{id}).\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+        LogManager.getLogger(RestIndexAction.class));\n+    private static final Consumer<RestRequest> DEPRECATION_WARNING =\n+        r -> deprecationLogger.deprecatedAndMaybeLog(\"index_with_types\",TYPES_DEPRECATION_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjk4NDczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoyNzozNVrOF02zsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozMzo1M1rOF1Bk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2ODI0Mw==", "bodyText": "Can we make this major version - 1 , so that when v9 it is auto incremented to 8 ?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390968243", "createdAt": "2020-03-11T13:27:35Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NDY5MA==", "bodyText": "good idea, this one will always stay as it is part of generic code always used for compatible API", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391144690", "createdAt": "2020-03-11T17:33:53Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2ODI0Mw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjk4OTgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoyODo0N1rOF0220A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozNzozN1rOF1D8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2OTA0MA==", "bodyText": "this method and the one below feel like REST v7 concerns. Can they be moved to the module ?\n(which would leave this class pretty empty and possibly move the constant strings elsewhere ?)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390969040", "createdAt": "2020-03-11T13:28:47Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MjAxMA==", "bodyText": "good point, the isV7Compatible can be made generic (applying to all compatible versions in the future) and can stay in RestController.\nHow about the constants though? any ideas where to place them? It feels to me like org.elasticsearch.rest package would be good. Maybe RestUtils?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391152010", "createdAt": "2020-03-11T17:44:52Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2OTA0MA=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MzQ4Mw==", "bodyText": "COMPATIBLE_HEADER is only used in RestRequest (so there for now) (as a side note, we also need to also check Content-Type, but am good with that in a follow up)\nCOMPATIBLE_VERSION is only in RestRequest (so there for now)\nCOMPATIBLE_PARAMS_KEY is an x-content concept, so probably somewhere in x-content", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391183483", "createdAt": "2020-03-11T18:37:37Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2OTA0MA=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzAwMTU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzozMTo0NFrOF02-Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozMzoyNFrOF1Bjfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MDkxMA==", "bodyText": "any way to remove the v7 here ? ideally this would be agnostic to the actual version (which I think it already is in all but the name)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390970910", "createdAt": "2020-03-11T13:31:44Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -328,7 +328,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n                       return;\n                   }\n                 } else {\n-                    dispatchRequest(request, channel, handler);\n+                    if(handler.compatibilityRequired() == false //regular (not removed) handlers are always dispatched\n+                        //handlers that were registered compatible, require request to be compatible\n+                        || CompatibleHandlers.isV7Compatible(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NDMxOA==", "bodyText": "good point, the generic and always present compatible code can be made version\nagnostic.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391144318", "createdAt": "2020-03-11T17:33:24Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -328,7 +328,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n                       return;\n                   }\n                 } else {\n-                    dispatchRequest(request, channel, handler);\n+                    if(handler.compatibilityRequired() == false //regular (not removed) handlers are always dispatched\n+                        //handlers that were registered compatible, require request to be compatible\n+                        || CompatibleHandlers.isV7Compatible(request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MDkxMA=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzAxNjUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzozNToyMlrOF03HWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODo1MjoyOFrOF17yJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw==", "bodyText": "I am on the fence about this message, but leaning towards removing it.  I am not sure we need to tell people that this could be a compatible path.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390973273", "createdAt": "2020-03-11T13:35:22Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +346,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    private void handleCompatibleNotAllowed(String rawPath, RestChannel channel) throws IOException {\n+        String msg = \"Compatible api can be only accessed with Compatible Header. Path used: \" + rawPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NTU2NA==", "bodyText": "I guess for future clients versions there would always be passed a header with a version. But in transition from 7 to 8, I guess some people would stay with old (like 7.0) client and won't have a header? This way they could find out quickly about the compatible API.\nI added it mostly because I found it useful when developing - but happy to remove it too.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391155564", "createdAt": "2020-03-11T17:50:21Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +346,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    private void handleCompatibleNotAllowed(String rawPath, RestChannel channel) throws IOException {\n+        String msg = \"Compatible api can be only accessed with Compatible Header. Path used: \" + rawPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDUyNg==", "bodyText": "Let's remove for now. We can add it later if need be.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391184526", "createdAt": "2020-03-11T18:39:28Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +346,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    private void handleCompatibleNotAllowed(String rawPath, RestChannel channel) throws IOException {\n+        String msg = \"Compatible api can be only accessed with Compatible Header. Path used: \" + rawPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5ODM0MQ==", "bodyText": "will do. btw we are at the moment returning 400 bad request when handler was not found.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392098341", "createdAt": "2020-03-13T08:52:28Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +346,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    private void handleCompatibleNotAllowed(String rawPath, RestChannel channel) throws IOException {\n+        String msg = \"Compatible api can be only accessed with Compatible Header. Path used: \" + rawPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzA1NDc1OnYy", "diffSide": "RIGHT", "path": "qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo0NDozMVrOF03evw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo0NDozMVrOF03evw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3OTI2Mw==", "bodyText": "note to other reviewers - the qa/rest-compat-tests is a temporary test fixture and currently runs the core REST rest tests from bwc:minor against a single current test cluster.  No need to review anything out of qa/rest-compat-tests since it will be going away in favor of per module/plugin tests.\nThe (diminishing) number of failed core REST tests is what is guiding these early efforts.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390979263", "createdAt": "2020-03-11T13:44:31Z", "author": {"login": "jakelandis"}, "path": "qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java", "diffHunk": "@@ -76,11 +77,17 @@ private static void mutateTestCandidate(ClientYamlTestCandidate testCandidate) {\n             DoSection doSection = (DoSection) ds;\n             //TODO: be more selective here\n             doSection.setIgnoreWarnings(true);\n-            //TODO: use the real header compatibility header\n-            doSection.getApiCallSection().addHeaders(Collections.singletonMap(\"compatible-with\", \"v7\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzA5ODM1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1NDo0MFrOF0356A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1NDo0MFrOF0356A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4NjIxNg==", "bodyText": "can you also test yaml,cbor, and smile ?\nalso, does case matter ? (can you add a test for that too)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390986216", "createdAt": "2020-03-11T13:54:40Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,11 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() throws Exception {\n+        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        assertThat(mediaType,equalTo(\"application/json\"));\n+        mediaType = XContentType.parseMediaType(\"application/json\");\n+        assertThat(mediaType,equalTo(\"application/json\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzExMTQwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1Nzo0NFrOF04CTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1Nzo0NFrOF04CTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4ODM2Ng==", "bodyText": "can you use a random value for the compatible with (to help catch any regex assumptions around single digits)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390988366", "createdAt": "2020-03-11T13:57:44Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,11 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() throws Exception {\n+        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzExNDA4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1ODoyMVrOF04EJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1ODoyMVrOF04EJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4ODgzOA==", "bodyText": "can you also test parseVersion ?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390988838", "createdAt": "2020-03-11T13:58:21Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,11 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() throws Exception {\n+        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        assertThat(mediaType,equalTo(\"application/json\"));\n+        mediaType = XContentType.parseMediaType(\"application/json\");\n+        assertThat(mediaType,equalTo(\"application/json\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzEyOTc0OnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDowMjowM1rOF04OPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzozMlrOF1DFvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MTQyMA==", "bodyText": "I think can wrap this registration in an \"if version == 8\", so when v9 is cut, the code would effectively be dead.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390991420", "createdAt": "2020-03-11T14:02:03Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        return List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTQ3MQ==", "bodyText": "great idea, it will also be useful in a transition period when some new compatible apis (aiming 9) are added before the old code is removed", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391169471", "createdAt": "2020-03-11T18:13:32Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        return List.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MTQyMA=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzE3Njc0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxMzowM1rOF04r-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMzo1OVrOF18HLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw==", "bodyText": "Is it possible to move this test (and any other compatible tests) over to the compatible module under the version7 package ?  Ideally, we keep this coverage, but make it super easy to remove.\nedit: If necessary to mirror the package name for package protected scope, maybe we should create a v7 sub module instead of just a package name.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390999033", "createdAt": "2020-03-11T14:13:03Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,34 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+\n+    public void testTypeWhenCompatible() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjAwMA==", "bodyText": "good idea, I think the v7 subdirectory in rest-compatibility and tweaking gradle testClasses should be enough.\nso that we can have the same packages with same classes but in different submodules (the situation when v7 is not yet removed, but more compatible code for v8 is being created)\notherwise suffixing test classes with v7?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391182000", "createdAt": "2020-03-11T18:34:57Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,34 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+\n+    public void testTypeWhenCompatible() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mzg3Mw==", "bodyText": "sounds good.\nSince it mostly cosmetic, lets remove the v7 package, and only using the v7 in the class name. That should be sufficient to make it obvious it is v7 code and still allow us use package scope without creating new sub modules. We re-visit later if turns out too ugly :)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391193873", "createdAt": "2020-03-11T18:56:02Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,34 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+\n+    public void testTypeWhenCompatible() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMzcyNw==", "bodyText": "I only was referring to tests - that if we have a copy of a class from a different module we could suffix with v7.\nit feels right to have a version7 package in main though. as on the main org.elasticsearch.rest.compat level we could keep version agnostic classes - like RestCompatPlugin.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392103727", "createdAt": "2020-03-13T09:03:59Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,34 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+\n+    public void testTypeWhenCompatible() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzE5MjQ5OnYy", "diffSide": "RIGHT", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/MatchAssertion.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxNjoxMVrOF041vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxNjoxMVrOF041vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMTUzMw==", "bodyText": "++ this needs to be handled by the compat test frame work, but is good here for now.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391001533", "createdAt": "2020-03-11T14:16:11Z", "author": {"login": "jakelandis"}, "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/MatchAssertion.java", "diffHunk": "@@ -56,6 +56,12 @@ public MatchAssertion(XContentLocation location, String field, Object expectedVa\n \n     @Override\n     protected void doAssert(Object actualValue, Object expectedValue) {\n+        // TODO this needs to be moved to override directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzIwNTM0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxODo1NVrOF0490Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxODo1NVrOF0490Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMzYwMQ==", "bodyText": "can you use a random version ?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391003601", "createdAt": "2020-03-11T14:18:55Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java", "diffHunk": "@@ -212,6 +214,14 @@ public void testHeadersSet() {\n         assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n     }\n \n+    public void testCompatibleParamIsSet(){\n+        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n+        httpRequest.getHeaders().put(HttpHeaders.ACCEPT, List.of(\"application/vnd.elasticsearch+json;compatible-with=7\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzIyMTc2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoyMjoyN1rOF05IPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMToyNlrOF3eAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNjI2OQ==", "bodyText": "can you use a random version ?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391006269", "createdAt": "2020-03-11T14:22:27Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNzU4Mg==", "bodyText": "actually in order to test a compatible handler, a Version.Current - 1 has to be used", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393707582", "createdAt": "2020-03-17T14:11:26Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNjI2OQ=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzIyNzE1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoyMzozOFrOF05Llg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1MDo1M1rOF1EZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNzEyNg==", "bodyText": "Here we are passing in both Content-Type and Accept headers. Should we test one or the other or both ? (if so a random selection would be good)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391007126", "createdAt": "2020-03-11T14:23:38Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MDcyMw==", "bodyText": "as per #53228 (comment)\nI think we should assume both should be present.\nWDYT?\nI will then reply with the conclusion on #52370", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391180723", "createdAt": "2020-03-11T18:32:45Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNzEyNg=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MDkxNw==", "bodyText": "Let's punt on it for now, the details there are important, but not immediately. I added a \"parking lot\" section on #51816 so we don't forget.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391190917", "createdAt": "2020-03-11T18:50:53Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNzEyNg=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzIzODUyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoyNjowOFrOF05TAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1MTo1OFrOF1Eb4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwOTAyNA==", "bodyText": "Also, what happens if you set the Content-Type to application/json, but Accept to application/vnd.elasticsearch+json;compatible-with=7 ?\nI wonder if we need more testing for these edge cases ?(either unit or integration)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391009024", "createdAt": "2020-03-11T14:26:08Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n+            .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MDIyNQ==", "bodyText": "good question. we can be more specific for response generation with Accept and request parsing with Content-Type.\nBut on the other hand I think it will just complicate matters too much.\nI would prefer to assume (and assert in code) that these are the same", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391180225", "createdAt": "2020-03-11T18:31:49Z", "author": {"login": "pgomulka"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n+            .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwOTAyNA=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MTUyMw==", "bodyText": "Same as above (I added a \"parking lot\" section on #51816 so we don't forget.)", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391191523", "createdAt": "2020-03-11T18:51:58Z", "author": {"login": "jakelandis"}, "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n+            .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwOTAyNA=="}, "originalCommit": {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDUxMjQ3OnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTozODo1NVrOF1F6lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNjoxOFrOF1-4wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNTc2Nw==", "bodyText": "I think renaming this to consumeTypeParameter would make its purpose more clear. Also, could we just have a method void consumeParameterType(DeprecationLogger deprecationLogger, RestRequest request) instead of using a Consumer?  Let me know if I'm missing something around why consumers are necessary, to me they make the logic less straightforward.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391215767", "createdAt": "2020-03-11T19:38:55Z", "author": {"login": "jtibshirani"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTE4NQ==", "bodyText": "agree with both - method rename and making this a method.\nOriginally the reason for this  being a consumer was because I was trying to fit in into the previous style of registering handlers. Extending the RestController.registerHandler with additional handlerWrappers. This is no longer needed after the recent refactoring made by Jay", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392149185", "createdAt": "2020-03-13T10:36:18Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNTc2Nw=="}, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk1MDI5OnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozODo1MVrOF1KDBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozOTo1N1rOF1-_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzQ2Mw==", "bodyText": "Could we avoid introducing a Consumer here and just call deprecationLogger.deprecatedAndMaybeLog(...) directly inside prepareRequest?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391283463", "createdAt": "2020-03-11T21:38:51Z", "author": {"login": "jtibshirani"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.CompatibleConstants;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.HEAD;\n+\n+public class RestGetActionV7 extends RestGetAction {\n+\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestGetAction.class));\n+    private static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in \"\n+        + \"document get requests is deprecated, use the /{index}/_doc/{id} endpoint instead.\";\n+    private static final Consumer<RestRequest> DEPRECATION_WARNING = r -> deprecationLogger.deprecatedAndMaybeLog(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1MDgxMA==", "bodyText": "sure, that similarly to previous use of consumer was influenced by previous style of registering handlers.\na direct call is better here.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392150810", "createdAt": "2020-03-13T10:39:57Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.CompatibleConstants;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.HEAD;\n+\n+public class RestGetActionV7 extends RestGetAction {\n+\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestGetAction.class));\n+    private static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in \"\n+        + \"document get requests is deprecated, use the /{index}/_doc/{id} endpoint instead.\";\n+    private static final Consumer<RestRequest> DEPRECATION_WARNING = r -> deprecationLogger.deprecatedAndMaybeLog(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzQ2Mw=="}, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk3MjIzOnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo0Njo1M1rOF1KQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo0ODowNFrOF1_OAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NjgyNg==", "bodyText": "If I'm understanding correctly, it seems like we'll log two deprecation messages per request, both the endpoint-specific one like \"Specifying types in document get requests is deprecated...\" and this more general one \"Using type as a path parameter is deprecated\". I think we could just stick with the endpoint-specific one to avoid warning twice about the same issue.\nAs a side note, this general deprecation message is also logged under the key \"create_index_with_types\", I think we'd want a more precise name.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391286826", "createdAt": "2020-03-11T21:46:53Z", "author": {"login": "jtibshirani"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n+        String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n+\n+        return r -> {\n+            deprecationLogger.deprecatedAndMaybeLog(\"create_index_with_types\", TYPES_DEPRECATION_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NDYyNA==", "bodyText": "agree - let's stick with just per endpoint warning.\nWIth that I feel like we can even get rid of CompatibleHandlers.consumeParameterType - it would only consume a type param -  and the whole utility class.\nI was worried that it would end up a bag of all the helpers for compatibility. It might generate a little bit of duplication, but there is no need for it now.\nDo you mean more precise name for a deprecation key? Like to be the same for Get and Index and other handlers?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392154624", "createdAt": "2020-03-13T10:48:04Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n+        String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n+\n+        return r -> {\n+            deprecationLogger.deprecatedAndMaybeLog(\"create_index_with_types\", TYPES_DEPRECATION_MESSAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NjgyNg=="}, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk4NDczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1MToyOVrOF1KX2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo0OTo1NFrOF1_ROw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4ODc5Mw==", "bodyText": "I think you can just do the following, I've never had to wrap a string inside a Text object:\nbuilder.field(TYPE_FIELD_NAME, MapperService.SINGLE_MAPPING_NAME);", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391288793", "createdAt": "2020-03-11T21:51:29Z", "author": {"login": "jtibshirani"}, "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +280,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {\n+            builder.field(TYPE_FIELD_NAME, SINGLE_MAPPING_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NTQ1MQ==", "bodyText": "will do", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392155451", "createdAt": "2020-03-13T10:49:54Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +280,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {\n+            builder.field(TYPE_FIELD_NAME, SINGLE_MAPPING_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4ODc5Mw=="}, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk4Nzc0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1Mjo1NVrOF1KZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1Mjo1NVrOF1KZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4OTMwMw==", "bodyText": "Small comment, would be good to revert this.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391289303", "createdAt": "2020-03-11T21:52:55Z", "author": {"login": "jtibshirani"}, "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,6 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk0OTM3OnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxMjoxNVrOF2Nvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToxNzozNlrOF25CAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MjYwMg==", "bodyText": "Wouldn't we never have more than one major versions worth of compat in a single version? If that is the case, why do we need to version the class names?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392392602", "createdAt": "2020-03-13T18:12:15Z", "author": {"login": "rjernst"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        if (Version.CURRENT.major == 8) {\n+            return List.of(\n+                new RestGetActionV7(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MTQ4NA==", "bodyText": "There is a narrow window where 2 versions can be present.\nLet's say we released version 8 (or a feature freeze) and we are now already developing ES9 and there will be features compatible with v8.\nWe won't be able to remove the v7 compat features instantly so for some time there will be both.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392891484", "createdAt": "2020-03-16T09:44:32Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        if (Version.CURRENT.major == 8) {\n+            return List.of(\n+                new RestGetActionV7(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MjYwMg=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMTgyNg==", "bodyText": "I am +1 on using the version in the class for this reason, and for the obviousness they provide. While (arguably) ugly, these classes are special in that they are not intended to be maintained, rather they are intended to be deleted after a some point in time.  Having the version in the name makes is more obvious and helps to prevent accidental modifications (like from a simple class search) and makes it really obvious if these things exist for too long.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393101826", "createdAt": "2020-03-16T15:17:36Z", "author": {"login": "jakelandis"}, "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        if (Version.CURRENT.major == 8) {\n+            return List.of(\n+                new RestGetActionV7(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MjYwMg=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk1MTI5OnYy", "diffSide": "RIGHT", "path": "modules/rest-compatibility/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxMjo1OFrOF2Nw8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxODo1M1rOF3b0Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5Mjk0Ng==", "bodyText": "I see tests in this PR; why are they disabled?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392392946", "createdAt": "2020-03-13T18:12:58Z", "author": {"login": "rjernst"}, "path": "modules/rest-compatibility/build.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Adds a compatiblity layer for the prior major versions REST API'\n+  classname 'org.elasticsearch.rest.compat.RestCompatPlugin'\n+}\n+\n+integTest.enabled = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5OTg3Mg==", "bodyText": "they should be enabled. fixed", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392899872", "createdAt": "2020-03-16T09:59:29Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/build.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Adds a compatiblity layer for the prior major versions REST API'\n+  classname 'org.elasticsearch.rest.compat.RestCompatPlugin'\n+}\n+\n+integTest.enabled = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5Mjk0Ng=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3MTcxMA==", "bodyText": "actually there are no integTests, but there are unit tests so integTests.enabled = false tests.enabled=true", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393671710", "createdAt": "2020-03-17T13:18:53Z", "author": {"login": "pgomulka"}, "path": "modules/rest-compatibility/build.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+esplugin {\n+  description 'Adds a compatiblity layer for the prior major versions REST API'\n+  classname 'org.elasticsearch.rest.compat.RestCompatPlugin'\n+}\n+\n+integTest.enabled = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5Mjk0Ng=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk1NjUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxNDo1NFrOF2N0Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToyMjoxNlrOF25O4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MzgxNQ==", "bodyText": "If we are just looking at major version number, using the Version constant just to extract \"7\" seems overkill and less readable than just using the literal 7.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392393815", "createdAt": "2020-03-13T18:14:54Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +278,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMDkyMw==", "bodyText": "I think this will help the removal of compatible code. We have not decided on what mechanism to use in order to help finding this code.\nThe plan at the moment is to put as much code v7-compatible into module/rest-compatibility\nUsing Version.V_7_0_0.major would make sure that if the version is removed after major upgrade it will also highlight the places where v7-compatible  code has to be removed", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392900923", "createdAt": "2020-03-16T10:01:28Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +278,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MzgxNQ=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNTEyMQ==", "bodyText": "Also, the removal of the of the Version.V_7_0_0 constant in the code (for v9) will cause this to fail compilation. Which is likely the correct the behavior. It does indeed make major version bumps harder (one more thing that breaks), but for now I think this is the best we can do. It feels like there is something that can be done to ease that upgrade pain, but that is outside the scope of this PR.", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393105121", "createdAt": "2020-03-16T15:22:16Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +278,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MzgxNQ=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk2NjE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxODoxNFrOF2N6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDowMjo0OVrOF2s0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NTM5OA==", "bodyText": "Why is this V7 specific? Aren't the compatible params version agnostic?", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392395398", "createdAt": "2020-03-13T18:18:14Z", "author": {"login": "rjernst"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +349,11 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    public static boolean isV7Compatible(ToXContent.Params params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMTYzOA==", "bodyText": "good point, fixed", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392901638", "createdAt": "2020-03-16T10:02:49Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +349,11 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    public static boolean isV7Compatible(ToXContent.Params params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NTM5OA=="}, "originalCommit": {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3455, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}