{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTAzMTg3", "number": 58154, "title": "Add include_data_streams flag for authorization", "bodyText": "Most of the work around the addition of an includeDataStreams flag was done in #58381. The remainder of this PR adds the flag to the appropriate request classes, updates IndexNameExpressionResolver to rely on the flag rather than a separate boolean flag, and updates tests.\nThis PR adds an includeDataStreams flag to the IndicesRequest interface so that it is available when AuthorizationEngine::loadAuthorizedIndices is called. This is necessary to avoid different behaviors when security is enabled and disabled.\nThe disparate behavior is described in the referenced issue. When a GET */_alias request (or any other request that does not operate on data streams) is sent without security enabled, any data streams present are ignored by the IndexNameExpressionResolver class and the correct HTTP 200 response is returned.\nWhen security is enabled, the star in GET */_alias is first resolved to all authorized indices, aliases, and data streams. Because the _alias endpoint does not understand data streams, the first data stream it encounters among the list of authorized indices is treated as an alias and an incorrect 404 for \"unknown alias\" is returned.\nThis PR changes AuthorizationService to selectively exclude (in the case of most requests) or include (and the case of ResolveIndexAction.Request and other requests that opt in) data streams during the authorized index resolution phase.\nEspecially interested in feedback from @elastic/es-security.\nFixes #57712\nRelates to #53100", "createdAt": "2020-06-16T00:29:56Z", "url": "https://github.com/elastic/elasticsearch/pull/58154", "merged": true, "mergeCommit": {"oid": "e592a9a5e7253d12ad79280aaf0b1e67da9e9920"}, "closed": true, "closedAt": "2020-07-03T04:53:33Z", "author": {"login": "danhermann"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrw5hhAFqTQzMTI2ODgyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxLGbggH2gAyNDM0OTAzMTg3OjNiZDA2YTg3YjdiMWE3YWI1MzUxOGZkYjAxZjU4YjNhMGJiOGM5YTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjY4ODI2", "url": "https://github.com/elastic/elasticsearch/pull/58154#pullrequestreview-431268826", "createdAt": "2020-06-16T08:20:05Z", "commit": {"oid": "e3a1644052a7174622f68e4879b07a00425b0f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyMDowNlrOGkQdKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyMDowNlrOGkQdKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTUyOQ==", "bodyText": "I think we can move this method to IndicesRequest?", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r440671529", "createdAt": "2020-06-16T08:20:06Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/IndicesRequest.java", "diffHunk": "@@ -45,5 +45,12 @@\n          * Sets the indices that the action relates to.\n          */\n         IndicesRequest indices(String... indices);\n+\n+        /**\n+         * Determines whether the action should be applied to data streams\n+         */\n+        default boolean includeDataStreams() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3a1644052a7174622f68e4879b07a00425b0f7e"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDgxNTY1", "url": "https://github.com/elastic/elasticsearch/pull/58154#pullrequestreview-432081565", "createdAt": "2020-06-17T06:02:21Z", "commit": {"oid": "d02f15d51f11a239c3a474a470a38565669a996e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjowMjoyMlrOGk2xZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzoyMjo0OVrOGk45Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5OTMwMA==", "bodyText": "I think we should change the default here, because most indices based action will be supporting data streams.", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r441299300", "createdAt": "2020-06-17T06:02:22Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/IndicesRequest.java", "diffHunk": "@@ -40,6 +40,13 @@\n      */\n     IndicesOptions indicesOptions();\n \n+    /**\n+     * Determines whether the action should be applied to data streams\n+     */\n+    default boolean includeDataStreams() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02f15d51f11a239c3a474a470a38565669a996e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTc3OQ==", "bodyText": "why is this removed?", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r441305779", "createdAt": "2020-06-17T06:20:43Z", "author": {"login": "martijnvg"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/indices.data_stream/20_unsupported_apis.yml", "diffHunk": "@@ -65,11 +65,6 @@\n       indices.create:\n         index: logs-foobarbaz\n \n-  - do:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02f15d51f11a239c3a474a470a38565669a996e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzNDA3NA==", "bodyText": "I think we should change this resolveLocalIndices() method here. I think we should change the indicesOptions parameter to request (and pass down the request from where it is being invoked).\nThen change the concreteIndices() method this method invokes. Remove the options and indexExpressions parameters and add request parameter (of type IndicesRequest). Then\nin the body of this method derive the indicesOptions and indices from the request parameter.", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r441334074", "createdAt": "2020-06-17T07:22:49Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java", "diffHunk": "@@ -457,8 +457,8 @@ private void executeLocalSearch(Task task, SearchTimeProvider timeProvider, Sear\n         if (localIndices == null) {\n             return Index.EMPTY_ARRAY; //don't search on any local index (happens when only remote indices were specified)\n         }\n-        return indexNameExpressionResolver.concreteIndices(clusterState, indicesOptions, true,\n-            timeProvider.getAbsoluteStartMillis(), localIndices.indices());\n+        return indexNameExpressionResolver.concreteIndices(clusterState, indicesOptions, localIndices,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02f15d51f11a239c3a474a470a38565669a996e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTUwNDE2", "url": "https://github.com/elastic/elasticsearch/pull/58154#pullrequestreview-433550416", "createdAt": "2020-06-18T18:40:23Z", "commit": {"oid": "d11c6c94742769ff22386935843963d5135da425"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0MDoyM1rOGl7qEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0MDoyM1rOGl7qEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzkyMw==", "bodyText": "I gave it more thought than it probably warrants.\nOverall I am OK with the change, but I would suggest we move this whole logic( if (entry.getValue().getType() != IndexAbstraction.Type.DATA_STREAM || includeDataStreams) {) to \n  \n    \n      elasticsearch/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\n    \n    \n         Line 113\n      in\n      2925056\n    \n    \n    \n    \n\n        \n          \n           final ResolvedIndices.Builder resolvedIndicesBuilder = new ResolvedIndices.Builder(); \n        \n    \n  \n\n\nThis is the place where we deal with the entities (open/close indices and aliases) behind the \"authorised\" names, and I believe it would help us to keep complexity under control in an already messy spaghetti.", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r442427923", "createdAt": "2020-06-18T18:40:23Z", "author": {"login": "albertzaharovits"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -500,15 +500,21 @@ GetUserPrivilegesResponse buildUserPrivilegesResponseObject(Role userRole) {\n         return new GetUserPrivilegesResponse(cluster, conditionalCluster, indices, application, runAs);\n     }\n \n-    static List<String> resolveAuthorizedIndicesFromRole(Role role, String action, Map<String, IndexAbstraction> aliasAndIndexLookup) {\n-        Predicate<String> predicate = role.allowedIndicesMatcher(action);\n+    static List<String> resolveAuthorizedIndicesFromRole(Role role, RequestInfo requestInfo, Map<String, IndexAbstraction> lookup) {\n+        Predicate<String> predicate = role.allowedIndicesMatcher(requestInfo.getAction());\n+\n+        // do not include data streams for actions that do not operate on data streams\n+        TransportRequest request = requestInfo.getRequest();\n+        boolean includeDataStreams = (request instanceof IndicesRequest) && ((IndicesRequest) request).includeDataStreams();\n \n         List<String> indicesAndAliases = new ArrayList<>();\n         // TODO: can this be done smarter? I think there are usually more indices/aliases in the cluster then indices defined a roles?\n-        for (Map.Entry<String, IndexAbstraction> entry : aliasAndIndexLookup.entrySet()) {\n+        for (Map.Entry<String, IndexAbstraction> entry : lookup.entrySet()) {\n             String aliasOrIndex = entry.getKey();\n             if (predicate.test(aliasOrIndex)) {\n-                indicesAndAliases.add(aliasOrIndex);\n+                if (entry.getValue().getType() != IndexAbstraction.Type.DATA_STREAM || includeDataStreams) {\n+                    indicesAndAliases.add(aliasOrIndex);\n+                }\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11c6c94742769ff22386935843963d5135da425"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTUzODkx", "url": "https://github.com/elastic/elasticsearch/pull/58154#pullrequestreview-433553891", "createdAt": "2020-06-18T18:45:26Z", "commit": {"oid": "d11c6c94742769ff22386935843963d5135da425"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTQzOTU3", "url": "https://github.com/elastic/elasticsearch/pull/58154#pullrequestreview-435943957", "createdAt": "2020-06-23T16:16:40Z", "commit": {"oid": "d11c6c94742769ff22386935843963d5135da425"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d11c6c94742769ff22386935843963d5135da425", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/d11c6c94742769ff22386935843963d5135da425", "committedDate": "2020-06-17T14:39:03Z", "message": "simplify method call"}, "afterCommit": {"oid": "279f4f43f7f9e112dab4e9e00301f7ae27dfda6e", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/279f4f43f7f9e112dab4e9e00301f7ae27dfda6e", "committedDate": "2020-07-02T18:29:10Z", "message": "add include_data_streams flag for authorization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9125043b084af89a91976197168b2cad709e41ea", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/9125043b084af89a91976197168b2cad709e41ea", "committedDate": "2020-07-03T03:00:07Z", "message": "add include_data_streams flag for authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9950d0a5bf6cdc47872bcaea994abab133210f2f", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/9950d0a5bf6cdc47872bcaea994abab133210f2f", "committedDate": "2020-07-02T19:25:42Z", "message": "fix test"}, "afterCommit": {"oid": "9125043b084af89a91976197168b2cad709e41ea", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/9125043b084af89a91976197168b2cad709e41ea", "committedDate": "2020-07-03T03:00:07Z", "message": "add include_data_streams flag for authorization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bd06a87b7b1a7ab53518fdb01f58b3a0bb8c9a8", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/3bd06a87b7b1a7ab53518fdb01f58b3a0bb8c9a8", "committedDate": "2020-07-03T03:44:21Z", "message": "fix test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 505, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}