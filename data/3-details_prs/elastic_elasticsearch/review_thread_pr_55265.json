{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTQ4OTEx", "number": 55265, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjowMDozN1rODzeZlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoxMjoxNVrODzefsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzAyMDM3OnYy", "diffSide": "RIGHT", "path": "rest-api-spec/src/main/resources/rest-api-spec/api/open_reader.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjowMDozOFrOGH9hbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1NToxMlrOGIbjQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTE5Ng==", "bodyText": "I wonder if we should always throw an error if there is no concrete indices that match ?", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411001196", "createdAt": "2020-04-19T22:00:38Z", "author": {"login": "jimczi"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/open_reader.json", "diffHunk": "@@ -0,0 +1,65 @@\n+{\n+  \"open_reader\":{\n+    \"documentation\":{\n+      \"url\":\"https://www.elastic.co/guide/en/elasticsearch/reference/master/reader-context.html\",\n+      \"description\":\"Open and keep point-in-time readers that can be used in subsequent search requests\"\n+    },\n+    \"stability\":\"beta\",\n+    \"url\":{\n+      \"paths\":[\n+        {\n+          \"path\":\"/_open_reader\",\n+          \"methods\":[\n+            \"POST\"\n+          ]\n+        },\n+        {\n+          \"path\":\"/{index}/_open_reader\",\n+          \"methods\":[\n+            \"POST\"\n+          ],\n+          \"parts\":{\n+            \"index\":{\n+              \"type\":\"list\",\n+              \"description\":\"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\"\n+            }\n+          }\n+        }\n+      ]\n+    },\n+    \"params\":{\n+      \"preference\":{\n+        \"type\":\"string\",\n+        \"description\":\"Specify the node or shard the operation should be performed on (default: random)\"\n+      },\n+      \"routing\":{\n+        \"type\":\"string\",\n+        \"description\":\"Specific routing value\"\n+      },\n+      \"ignore_unavailable\":{\n+        \"type\":\"boolean\",\n+        \"description\":\"Whether specified concrete indices should be ignored when unavailable (missing or closed)\"\n+      },\n+      \"allow_no_indices\":{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MzE4Nw==", "bodyText": "Removed in 51ddf77", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411493187", "createdAt": "2020-04-20T15:55:12Z", "author": {"login": "dnhatn"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/api/open_reader.json", "diffHunk": "@@ -0,0 +1,65 @@\n+{\n+  \"open_reader\":{\n+    \"documentation\":{\n+      \"url\":\"https://www.elastic.co/guide/en/elasticsearch/reference/master/reader-context.html\",\n+      \"description\":\"Open and keep point-in-time readers that can be used in subsequent search requests\"\n+    },\n+    \"stability\":\"beta\",\n+    \"url\":{\n+      \"paths\":[\n+        {\n+          \"path\":\"/_open_reader\",\n+          \"methods\":[\n+            \"POST\"\n+          ]\n+        },\n+        {\n+          \"path\":\"/{index}/_open_reader\",\n+          \"methods\":[\n+            \"POST\"\n+          ],\n+          \"parts\":{\n+            \"index\":{\n+              \"type\":\"list\",\n+              \"description\":\"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\"\n+            }\n+          }\n+        }\n+      ]\n+    },\n+    \"params\":{\n+      \"preference\":{\n+        \"type\":\"string\",\n+        \"description\":\"Specify the node or shard the operation should be performed on (default: random)\"\n+      },\n+      \"routing\":{\n+        \"type\":\"string\",\n+        \"description\":\"Specific routing value\"\n+      },\n+      \"ignore_unavailable\":{\n+        \"type\":\"boolean\",\n+        \"description\":\"Whether specified concrete indices should be ignored when unavailable (missing or closed)\"\n+      },\n+      \"allow_no_indices\":{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTE5Ng=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzAyMjY2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/search/SearchRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjowMjoxMlrOGH9ibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1NDo0NlrOGIbiHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTQ1Mg==", "bodyText": "We should also check if scroll is not set ?", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411001452", "createdAt": "2020-04-19T22:02:12Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/action/search/SearchRequest.java", "diffHunk": "@@ -283,9 +283,15 @@ public ActionRequestValidationException validate() {\n                 validationException = source.aggregations().validate(validationException);\n             }\n         }\n-        if (reader() != null && reader().getId() != null) {\n+        if (reader() != null) {\n             if (indices.length > 0) {\n-                validationException = addValidationError(\"[indices] cannot be used with reader contexts\", validationException);\n+                validationException = addValidationError(\"[index] cannot be used with reader contexts\", validationException);\n+            }\n+            if (routing() != null) {\n+                validationException = addValidationError(\"[routing] cannot be used with reader contexts\", validationException);\n+            }\n+            if (preference() != null) {\n+                validationException = addValidationError(\"[preference] cannot be used with reader contexts\", validationException);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5Mjg5NA==", "bodyText": "addressed in b8e523d", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411492894", "createdAt": "2020-04-20T15:54:46Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/action/search/SearchRequest.java", "diffHunk": "@@ -283,9 +283,15 @@ public ActionRequestValidationException validate() {\n                 validationException = source.aggregations().validate(validationException);\n             }\n         }\n-        if (reader() != null && reader().getId() != null) {\n+        if (reader() != null) {\n             if (indices.length > 0) {\n-                validationException = addValidationError(\"[indices] cannot be used with reader contexts\", validationException);\n+                validationException = addValidationError(\"[index] cannot be used with reader contexts\", validationException);\n+            }\n+            if (routing() != null) {\n+                validationException = addValidationError(\"[routing] cannot be used with reader contexts\", validationException);\n+            }\n+            if (preference() != null) {\n+                validationException = addValidationError(\"[preference] cannot be used with reader contexts\", validationException);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTQ1Mg=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzAyNTg4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/action/search/RestOpenReaderAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjowNDoxNlrOGH9j1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1NToyOVrOGIbkRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTgxMw==", "bodyText": "We should force indices ?", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411001813", "createdAt": "2020-04-19T22:04:16Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/rest/action/search/RestOpenReaderAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.search;\n+\n+import org.elasticsearch.action.search.OpenReaderRequest;\n+import org.elasticsearch.action.search.TransportOpenReaderAction;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestOpenReaderAction extends BaseRestHandler {\n+\n+    @Override\n+    public String getName() {\n+        return \"open_reader_action\";\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(POST, \"/_open_reader\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MzQ0NQ==", "bodyText": "Adjusted in a74b984.", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411493445", "createdAt": "2020-04-20T15:55:29Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/rest/action/search/RestOpenReaderAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.search;\n+\n+import org.elasticsearch.action.search.OpenReaderRequest;\n+import org.elasticsearch.action.search.TransportOpenReaderAction;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestOpenReaderAction extends BaseRestHandler {\n+\n+    @Override\n+    public String getName() {\n+        return \"open_reader_action\";\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(POST, \"/_open_reader\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTgxMw=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzAyODY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjowNjoxNVrOGH9lEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1NjowMVrOGIbmGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjEzMA==", "bodyText": "Is it temporary ? We've said that it should be possible to run the can_match phase as long as we retrieve the reader and extend the keep alive if the request cannot match ?", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411002130", "createdAt": "2020-04-19T22:06:15Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -1085,6 +1120,7 @@ public AliasFilter buildAliasFilter(ClusterState state, String index, Set<String\n      */\n     public CanMatchResponse canMatch(ShardSearchRequest request) throws IOException {\n         assert request.searchType() == SearchType.QUERY_THEN_FETCH : \"unexpected search type: \" + request.searchType();\n+        assert request.readerId() == null : \"request with reader_id bypass can_match phase\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1MTc1NQ==", "bodyText": "Yes. Once your PR is in, I will update this.", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411051755", "createdAt": "2020-04-20T02:20:41Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -1085,6 +1120,7 @@ public AliasFilter buildAliasFilter(ClusterState state, String index, Set<String\n      */\n     public CanMatchResponse canMatch(ShardSearchRequest request) throws IOException {\n         assert request.searchType() == SearchType.QUERY_THEN_FETCH : \"unexpected search type: \" + request.searchType();\n+        assert request.readerId() == null : \"request with reader_id bypass can_match phase\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjEzMA=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODgwMQ==", "bodyText": "ok, thanks for confirming", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411428801", "createdAt": "2020-04-20T14:34:22Z", "author": {"login": "jimczi"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -1085,6 +1120,7 @@ public AliasFilter buildAliasFilter(ClusterState state, String index, Set<String\n      */\n     public CanMatchResponse canMatch(ShardSearchRequest request) throws IOException {\n         assert request.searchType() == SearchType.QUERY_THEN_FETCH : \"unexpected search type: \" + request.searchType();\n+        assert request.readerId() == null : \"request with reader_id bypass can_match phase\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjEzMA=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MzkxMg==", "bodyText": "I added a TODO: ab7086b", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411493912", "createdAt": "2020-04-20T15:56:01Z", "author": {"login": "dnhatn"}, "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -1085,6 +1120,7 @@ public AliasFilter buildAliasFilter(ClusterState state, String index, Set<String\n      */\n     public CanMatchResponse canMatch(ShardSearchRequest request) throws IOException {\n         assert request.searchType() == SearchType.QUERY_THEN_FETCH : \"unexpected search type: \" + request.searchType();\n+        assert request.readerId() == null : \"request with reader_id bypass can_match phase\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjEzMA=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzAzNjAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMjoxMjoxNVrOGH9obA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1NTo0MVrOGIblCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjk4OA==", "bodyText": "I don't think we should do this for ShardOpenReaderRequest. Can we implement IndicesRequest instead so that opening a reader also checks the index permissions ?", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411002988", "createdAt": "2020-04-19T22:12:15Z", "author": {"login": "jimczi"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -278,7 +278,7 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                     // the same as the user that submitted the original request so we can skip security here.\n                     listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n                 }\n-            } else if (action.equals(ClearReaderAction.NAME)) {\n+            } else if (isReaderContextsRelatedAction(action)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1MTc4MA==", "bodyText": "Good catch", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411051780", "createdAt": "2020-04-20T02:20:50Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -278,7 +278,7 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                     // the same as the user that submitted the original request so we can skip security here.\n                     listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n                 }\n-            } else if (action.equals(ClearReaderAction.NAME)) {\n+            } else if (isReaderContextsRelatedAction(action)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjk4OA=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MzY0MQ==", "bodyText": "Fixed in 7910087", "url": "https://github.com/elastic/elasticsearch/pull/55265#discussion_r411493641", "createdAt": "2020-04-20T15:55:41Z", "author": {"login": "dnhatn"}, "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -278,7 +278,7 @@ public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo auth\n                     // the same as the user that submitted the original request so we can skip security here.\n                     listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.ALLOW_NO_INDICES));\n                 }\n-            } else if (action.equals(ClearReaderAction.NAME)) {\n+            } else if (isReaderContextsRelatedAction(action)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMjk4OA=="}, "originalCommit": {"oid": "cfa0881a806a83eab397f3443fe13dfb9c07648f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1065, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}