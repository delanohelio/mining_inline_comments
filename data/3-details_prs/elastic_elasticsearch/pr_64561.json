{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDAzMzYw", "number": 64561, "title": "Add info on each HTTP client to HTTP stats", "bodyText": "Elasticsearch currently provides only the count of HTTP clients currently holding an open connection and the number of HTTP connections that have been opened on the node. This is less than what is reported for transport clients and, as #61609 points out, additional information on connected HTTP clients would be very helpful in a number of troubleshooting and monitoring scenarios.\nThis change adds the following to the \"http\" section of node stats:\n\"http\" : {\n  \"current_open\" : 14,\n  \"total_opened\" : 2735,\n  \"clients\" : [\n    {\n      \"agent\" : \"kibana\",\n      \"local_address\" : \"/192.168.5.60:9200\",\n      \"remote_address\" : \"/192.168.5.60:58156\",\n      \"last_uri\" : \"/_nodes?filter_path=nodes.*.version%2Cnodes.*.http.publish_address%2Cnodes.*.ip\",\n      \"opened_time_millis\" : 1604420317590,\n      \"closed_time_millis\" : -1,\n      \"last_request_time_millis\" : 1604438560498,\n      \"request_count\" : 4408,\n      \"request_size_bytes\" : 261106\n    },\n    {\n      \"agent\" : \"curl/7.68.0\",\n      \"local_address\" : \"/192.168.5.60:9200\",\n      \"remote_address\" : \"/192.168.5.203:35834\",\n      \"last_uri\" : \"/_nodes/stats/http?pretty\",\n      \"opened_time_millis\" : 1604438562302,\n      \"closed_time_millis\" : 1604438562302,\n      \"last_request_time_millis\" : 1604438562302,\n      \"request_count\" : 1,\n      \"request_size_bytes\" : 0\n    }\n    ...\n  ]\n\nSome notes about the fields above:\n\nagent: This is pulled from the x-elastic-product-origin or User-Agent HTTP header if either is present. Note that it would be nice if Elastic products identified themselves with a user-friendly tag. The User-Agent header reports the Go client or the JS client for Beats and Kibana, respectively, which is better than nothing but not as nice as \"filebeat\" or \"kibana\", etc. The x-elastic-product-origin header reports a friendly \"kibana\" value for Kibana, but I don't believe that its purpose nor is it consistent across Elastic products.\nclosed_time_millis: This reports -1 for clients that are currently connected. As implemented, clients that disconnected within the last 5 minutes are still included to aid with tracking either clients such as curl that intentionally disconnect immediately or clients that are dropping connections for other reasons.\nrequest_size_bytes: This tracks cumulative request size.", "createdAt": "2020-11-03T21:34:03Z", "url": "https://github.com/elastic/elasticsearch/pull/64561", "merged": true, "mergeCommit": {"oid": "14cee55c88c7ec52d32a45178f51b1a50d6c0ce6"}, "closed": true, "closedAt": "2021-03-17T12:51:55Z", "author": {"login": "danhermann"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY_21kAH2gAyNTE1MDAzMzYwOmQ3NGE5MTQyZGQ0MGI5OWMxMWViOTk0Y2RjZDY5OWQ3YWNlYzJhNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeDv_L_gFqTYxMzUwNzY1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d74a9142dd40b99c11eb994cdcd699d7acec2a48", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/d74a9142dd40b99c11eb994cdcd699d7acec2a48", "committedDate": "2020-11-03T21:15:20Z", "message": "add stats for each HTTP client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c08403a4d5c432579c877eed1b138e4a3513fd", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/92c08403a4d5c432579c877eed1b138e4a3513fd", "committedDate": "2020-11-03T21:17:56Z", "message": "add volatile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a9acf32235303e7718001b72ee151e8cc9df7a", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/40a9acf32235303e7718001b72ee151e8cc9df7a", "committedDate": "2020-11-03T21:56:59Z", "message": "forbidden APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d1be328f11466ad418be574d07538a193aff606", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/9d1be328f11466ad418be574d07538a193aff606", "committedDate": "2020-11-11T17:53:42Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9701c48d0622aeaf9574014689e5dc75f7926acc", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/9701c48d0622aeaf9574014689e5dc75f7926acc", "committedDate": "2020-11-12T19:43:16Z", "message": "minor WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "281edb9e7da46c4f625943a8f8d5f5211f837b0a", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/281edb9e7da46c4f625943a8f8d5f5211f837b0a", "committedDate": "2020-11-17T22:10:43Z", "message": "version-aware serialization, record address on first request instead of socket accept"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67e7998ba86b44c5e6e540f853c908d8ffd34116", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/67e7998ba86b44c5e6e540f853c908d8ffd34116", "committedDate": "2020-11-17T22:35:50Z", "message": "fix serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e330c4a56564ba7aec2000200560ffbd3648cb", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/10e330c4a56564ba7aec2000200560ffbd3648cb", "committedDate": "2020-12-01T20:36:36Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070530838fee41ff6583712b22db2874146d98ae", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/070530838fee41ff6583712b22db2874146d98ae", "committedDate": "2020-12-01T22:18:20Z", "message": "add new fields and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d74dcbde69cfa5ae34a69212a1e90cda2e1b415", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/7d74dcbde69cfa5ae34a69212a1e90cda2e1b415", "committedDate": "2021-02-05T14:54:17Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda6c823be70245e713c9066e9da346e93e16177", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/cda6c823be70245e713c9066e9da346e93e16177", "committedDate": "2021-02-05T19:32:34Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52dac89ee67554d76fd13a203d03c31a3c67432a", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/52dac89ee67554d76fd13a203d03c31a3c67432a", "committedDate": "2021-02-20T17:10:30Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ad83b9b4e3db642a2486e2f38dbc0e2ed7692f", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/25ad83b9b4e3db642a2486e2f38dbc0e2ed7692f", "committedDate": "2021-02-20T18:20:39Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c004f7658dc25968e8b655eaf28005f0f8d364", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/27c004f7658dc25968e8b655eaf28005f0f8d364", "committedDate": "2021-02-22T21:00:41Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83eed78d1eb3cb80b4651af6b94ee874c445fd7", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/c83eed78d1eb3cb80b4651af6b94ee874c445fd7", "committedDate": "2021-02-22T21:41:31Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/99265038c7a128f80e27c7b14e2074c67f4fae18", "committedDate": "2021-02-22T21:42:02Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyMTk1ODYz", "url": "https://github.com/elastic/elasticsearch/pull/64561#pullrequestreview-602195863", "createdAt": "2021-03-02T19:40:58Z", "commit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQxOTo0MDo1OFrOIutwHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQyMTo0OTozNlrOIuynpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NTAwNA==", "bodyText": "Should this use threadPool.relativeTimeInMillis() to ensure that it can't go backwards?", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585855004", "createdAt": "2021-03-02T19:40:58Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -128,7 +131,19 @@ public HttpInfo info() {\n \n     @Override\n     public HttpStats stats() {\n-        return new HttpStats(httpChannels.size(), totalChannelsAccepted.get());\n+        pruneClientStats();\n+        return new HttpStats(new ArrayList<>(httpChannelStats.values()), httpChannels.size(), totalChannelsAccepted.get());\n+    }\n+\n+    void pruneClientStats() {\n+        // prune stale entries\n+        long nowMillis = threadPool.absoluteTimeInMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NTYzOA==", "bodyText": "Same here about relativeTimeInMillis(), I think we want durations which means relative should work great, rather than absolute where time drift can make things inaccurate", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585855638", "createdAt": "2021-03-02T19:41:57Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +306,14 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NjEwMQ==", "bodyText": "Same here about relativeTimeInMillis()", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585856101", "createdAt": "2021-03-02T19:42:30Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +306,14 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannel.addCloseListener(ActionListener.wrap(() -> {\n+            httpChannels.remove(httpChannel);\n+            HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+            if (clientStats != null) {\n+                clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1ODEwMQ==", "bodyText": "I'm not that familiar with close listeners, but what happens when the channel has a successful response but the close listener blows up? Should we wrap the listener with a try/catch that logs and ignores exceptions?", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585858101", "createdAt": "2021-03-02T19:44:08Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +306,14 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannel.addCloseListener(ActionListener.wrap(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1OTIwOQ==", "bodyText": "Can you add a comment here about why we use identityHashCode rather than the regular hash code? (so it doesn't get accidentally removed)", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585859209", "createdAt": "2021-03-02T19:45:49Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -315,6 +338,37 @@ public void incomingRequest(final HttpRequest httpRequest, final HttpChannel htt\n         }\n     }\n \n+    void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkyODU4OA==", "bodyText": "These checks should be httpRequest.getHeaders().get(\"<whatever-header>\").size() > 0 rather than a containsKey check, because it's possible for the header list to be an empty list\n(I was able to reproduce this with a malicious telnet x 9200 and manually constructing a \"bad\" HTTP request with an empty User-Agent header)", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585928588", "createdAt": "2021-03-02T21:38:36Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -315,6 +338,37 @@ public void incomingRequest(final HttpRequest httpRequest, final HttpChannel htt\n         }\n     }\n \n+    void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        if (clientStats != null) {\n+            if (clientStats.agent == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkzMzM4NA==", "bodyText": "Even though these are marked as volatile, there is still a race condition here because we do a read-then-write that could be from multiple threads. I think instead we should use a LongAdder for both of these", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585933384", "createdAt": "2021-03-02T21:47:15Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -315,6 +338,37 @@ public void incomingRequest(final HttpRequest httpRequest, final HttpChannel htt\n         }\n     }\n \n+    void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        if (clientStats != null) {\n+            if (clientStats.agent == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {\n+                    clientStats.agent = httpRequest.getHeaders().get(\"x-elastic-product-origin\").get(0);\n+                } else if (httpRequest.getHeaders().containsKey(\"User-Agent\")) {\n+                    clientStats.agent = httpRequest.getHeaders().get(\"User-Agent\").get(0);\n+                }\n+            }\n+            if (clientStats.localAddress == null) {\n+                clientStats.localAddress = NetworkAddress.format(httpChannel.getLocalAddress());\n+                clientStats.remoteAddress = NetworkAddress.format(httpChannel.getRemoteAddress());\n+            }\n+            if (clientStats.forwardedFor == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-forwarded-for\")) {\n+                    clientStats.forwardedFor = httpRequest.getHeaders().get(\"x-forwarded-for\").get(0);\n+                }\n+            }\n+            if (clientStats.opaqueId == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-opaque-id\")) {\n+                    clientStats.opaqueId = httpRequest.getHeaders().get(\"x-opaque-id\").get(0);\n+                }\n+            }\n+            clientStats.lastRequestTimeMillis = threadPool.absoluteTimeInMillis();\n+            clientStats.lastUri = httpRequest.uri();\n+            clientStats.requestCount++;\n+            clientStats.requestSizeBytes += httpRequest.content().length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkzNDc1Ng==", "bodyText": "If I understand this correctly, we only prune stats once the stats are actually requested. Wouldn't this mean that if the stats are never requested then they can grow unbounded?", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585934756", "createdAt": "2021-03-02T21:49:36Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -128,7 +131,19 @@ public HttpInfo info() {\n \n     @Override\n     public HttpStats stats() {\n-        return new HttpStats(httpChannels.size(), totalChannelsAccepted.get());\n+        pruneClientStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5345ee78add3d48ce0382e5788c58e858e5a182e", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/5345ee78add3d48ce0382e5788c58e858e5a182e", "committedDate": "2021-03-04T18:36:09Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4398bb382ac6d0ef3e24be509233a744cb52a893", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/4398bb382ac6d0ef3e24be509233a744cb52a893", "committedDate": "2021-03-04T18:43:12Z", "message": "fix merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204f18b1c421f61530277e78215d76a895f7bf92", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/204f18b1c421f61530277e78215d76a895f7bf92", "committedDate": "2021-03-04T23:34:17Z", "message": "address some review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "638aef8144838140ae1807e2b1480f1f555509d2", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/638aef8144838140ae1807e2b1480f1f555509d2", "committedDate": "2021-03-05T00:59:51Z", "message": "fix xcontent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3efd494f3a2210ac3cc84d81a61a3aa17d84fa90", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/3efd494f3a2210ac3cc84d81a61a3aa17d84fa90", "committedDate": "2021-03-08T22:01:01Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/ea463660fc127ba470b3ac0ef661ea82b963855b", "committedDate": "2021-03-08T22:10:49Z", "message": "Ensure that client stats cannot grow unbounded"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwMjQ2NDgz", "url": "https://github.com/elastic/elasticsearch/pull/64561#pullrequestreview-610246483", "createdAt": "2021-03-11T21:36:20Z", "commit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMVQyMTozNjoyMFrOI1R7LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMVQyMTo0MjoyNVrOI1SIeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjczOTExNw==", "bodyText": "Can you extract this 60 second value and the 5 minute value into private static variables in this class? They're a little easier to discover and change there if we want to tweak them in the future (and it prevents the function call, even if it would end up getting inlined)", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592739117", "createdAt": "2021-03-11T21:36:20Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -128,7 +132,26 @@ public HttpInfo info() {\n \n     @Override\n     public HttpStats stats() {\n-        return new HttpStats(httpChannels.size(), totalChannelsAccepted.get());\n+        pruneClientStats(false);\n+        return new HttpStats(new ArrayList<>(httpChannelStats.values()), httpChannels.size(), totalChannelsAccepted.get());\n+    }\n+\n+    /**\n+     * Prunes client stats of entries that have been disconnected for more than five minutes.\n+     *\n+     * @param throttled When true, executes the prune process only if more than 60 seconds has elapsed since the last execution.\n+     */\n+    void pruneClientStats(boolean throttled) {\n+        if (throttled == false || (threadPool.relativeTimeInMillis() - lastClientStatsPruneTime > TimeUnit.SECONDS.toMillis(60))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjczOTgyMg==", "bodyText": "Can you add a comment and maybe trace logging here, just in case we need it in the future? I don't think we should swallow exceptions without ever making them apparent elsewhere.", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592739822", "createdAt": "2021-03-11T21:37:35Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +314,22 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(\n+            HttpStats.ClientStats.getChannelKey(httpChannel),\n+            new HttpStats.ClientStats(threadPool.absoluteTimeInMillis())\n+        );\n+        httpChannel.addCloseListener(ActionListener.wrap(() -> {\n+            try {\n+                httpChannels.remove(httpChannel);\n+                HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n+                if (clientStats != null) {\n+                    clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+                }\n+            } catch (Exception e) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MTQ5MQ==", "bodyText": "Why do we use Strings.EMPTY here? Should we be using jopt stuff here? I think I would prefer to just use either null (and protect when serializing it over transport and xcontent) or \"\" than pulling in that dependency here.\nIf we do need the functionality for some reason, maybe we can add it to our own org.elasticsearch.common.Strings class", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592741491", "createdAt": "2021-03-11T21:40:31Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/HttpStats.java", "diffHunk": "@@ -49,14 +67,121 @@ public long getTotalOpen() {\n         static final String HTTP = \"http\";\n         static final String CURRENT_OPEN = \"current_open\";\n         static final String TOTAL_OPENED = \"total_opened\";\n+        static final String CLIENTS = \"clients\";\n+        static final String CLIENT_ID = \"id\";\n+        static final String CLIENT_AGENT = \"agent\";\n+        static final String CLIENT_LOCAL_ADDRESS = \"local_address\";\n+        static final String CLIENT_REMOTE_ADDRESS = \"remote_address\";\n+        static final String CLIENT_LAST_URI = \"last_uri\";\n+        static final String CLIENT_OPENED_TIME_MILLIS = \"opened_time_millis\";\n+        static final String CLIENT_CLOSED_TIME_MILLIS = \"closed_time_millis\";\n+        static final String CLIENT_LAST_REQUEST_TIME_MILLIS = \"last_request_time_millis\";\n+        static final String CLIENT_REQUEST_COUNT = \"request_count\";\n+        static final String CLIENT_REQUEST_SIZE_BYTES = \"request_size_bytes\";\n+        static final String CLIENT_FORWARDED_FOR = \"x_forwarded_for\";\n+        static final String CLIENT_OPAQUE_ID = \"x_opaque_id\";\n     }\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject(Fields.HTTP);\n         builder.field(Fields.CURRENT_OPEN, serverOpen);\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n+        builder.startArray(Fields.CLIENTS);\n+        for (ClientStats clientStats : this.clientStats) {\n+            builder.startObject();\n+            builder.field(Fields.CLIENT_ID, clientStats.id);\n+            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n+            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n+            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n+            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n+            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n+            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);\n+            builder.field(Fields.CLIENT_OPENED_TIME_MILLIS, clientStats.openedTimeMillis);\n+            builder.field(Fields.CLIENT_CLOSED_TIME_MILLIS, clientStats.closedTimeMillis);\n+            builder.field(Fields.CLIENT_LAST_REQUEST_TIME_MILLIS, clientStats.lastRequestTimeMillis);\n+            builder.field(Fields.CLIENT_REQUEST_COUNT, clientStats.requestCount.longValue());\n+            builder.field(Fields.CLIENT_REQUEST_SIZE_BYTES, clientStats.requestSizeBytes.longValue());\n+            builder.endObject();\n+        }\n+        builder.endArray();\n         builder.endObject();\n         return builder;\n     }\n+\n+    public static class ClientStats implements Writeable {\n+        final int id;\n+        String agent = Strings.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MjEzMQ==", "bodyText": "It would probably be easier to make ClientStats implement ToXContentObject than doing the serialization here. It's nicer to encapsulate all the serialization in the class.", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592742131", "createdAt": "2021-03-11T21:41:43Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/HttpStats.java", "diffHunk": "@@ -49,14 +67,121 @@ public long getTotalOpen() {\n         static final String HTTP = \"http\";\n         static final String CURRENT_OPEN = \"current_open\";\n         static final String TOTAL_OPENED = \"total_opened\";\n+        static final String CLIENTS = \"clients\";\n+        static final String CLIENT_ID = \"id\";\n+        static final String CLIENT_AGENT = \"agent\";\n+        static final String CLIENT_LOCAL_ADDRESS = \"local_address\";\n+        static final String CLIENT_REMOTE_ADDRESS = \"remote_address\";\n+        static final String CLIENT_LAST_URI = \"last_uri\";\n+        static final String CLIENT_OPENED_TIME_MILLIS = \"opened_time_millis\";\n+        static final String CLIENT_CLOSED_TIME_MILLIS = \"closed_time_millis\";\n+        static final String CLIENT_LAST_REQUEST_TIME_MILLIS = \"last_request_time_millis\";\n+        static final String CLIENT_REQUEST_COUNT = \"request_count\";\n+        static final String CLIENT_REQUEST_SIZE_BYTES = \"request_size_bytes\";\n+        static final String CLIENT_FORWARDED_FOR = \"x_forwarded_for\";\n+        static final String CLIENT_OPAQUE_ID = \"x_opaque_id\";\n     }\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject(Fields.HTTP);\n         builder.field(Fields.CURRENT_OPEN, serverOpen);\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n+        builder.startArray(Fields.CLIENTS);\n+        for (ClientStats clientStats : this.clientStats) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MjUyMQ==", "bodyText": "Should these string fields be protected with if (Strings.hasText(clientStats.opaqueId)) {...} so we don't output fields we don't care about? (or null check if we end up not using Strings.EMPTY)", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592742521", "createdAt": "2021-03-11T21:42:25Z", "author": {"login": "dakrone"}, "path": "server/src/main/java/org/elasticsearch/http/HttpStats.java", "diffHunk": "@@ -49,14 +67,121 @@ public long getTotalOpen() {\n         static final String HTTP = \"http\";\n         static final String CURRENT_OPEN = \"current_open\";\n         static final String TOTAL_OPENED = \"total_opened\";\n+        static final String CLIENTS = \"clients\";\n+        static final String CLIENT_ID = \"id\";\n+        static final String CLIENT_AGENT = \"agent\";\n+        static final String CLIENT_LOCAL_ADDRESS = \"local_address\";\n+        static final String CLIENT_REMOTE_ADDRESS = \"remote_address\";\n+        static final String CLIENT_LAST_URI = \"last_uri\";\n+        static final String CLIENT_OPENED_TIME_MILLIS = \"opened_time_millis\";\n+        static final String CLIENT_CLOSED_TIME_MILLIS = \"closed_time_millis\";\n+        static final String CLIENT_LAST_REQUEST_TIME_MILLIS = \"last_request_time_millis\";\n+        static final String CLIENT_REQUEST_COUNT = \"request_count\";\n+        static final String CLIENT_REQUEST_SIZE_BYTES = \"request_size_bytes\";\n+        static final String CLIENT_FORWARDED_FOR = \"x_forwarded_for\";\n+        static final String CLIENT_OPAQUE_ID = \"x_opaque_id\";\n     }\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject(Fields.HTTP);\n         builder.field(Fields.CURRENT_OPEN, serverOpen);\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n+        builder.startArray(Fields.CLIENTS);\n+        for (ClientStats clientStats : this.clientStats) {\n+            builder.startObject();\n+            builder.field(Fields.CLIENT_ID, clientStats.id);\n+            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n+            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n+            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n+            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n+            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n+            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971f05764692b4f72189d5ea74aeb072778a3feb", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/971f05764692b4f72189d5ea74aeb072778a3feb", "committedDate": "2021-03-12T13:47:39Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9795d2560055c62f0f6007ee03e89a42f7b5acfd", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/9795d2560055c62f0f6007ee03e89a42f7b5acfd", "committedDate": "2021-03-12T14:03:03Z", "message": "Merge branch 'master' into 61609_clients_api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a15bb6d2c27962b5e02c190cb7f26ffef6e65326", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/a15bb6d2c27962b5e02c190cb7f26ffef6e65326", "committedDate": "2021-03-12T14:25:54Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba15ba04b21f0802204294e5110e6981a5121d9", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/dba15ba04b21f0802204294e5110e6981a5121d9", "committedDate": "2021-03-12T17:10:40Z", "message": "fix more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEzNTA3NjUz", "url": "https://github.com/elastic/elasticsearch/pull/64561#pullrequestreview-613507653", "createdAt": "2021-03-16T17:04:43Z", "commit": {"oid": "dba15ba04b21f0802204294e5110e6981a5121d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 802, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}