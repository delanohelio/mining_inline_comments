{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDE3NTQ2", "number": 58670, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowOTo1NlrOEJrV4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOEN3sNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyNzUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowOTo1NlrOGqSwnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDowOTo1NlrOGqSwnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDczNQ==", "bodyText": "We might want to make this package private. It seems that if we want to make sure that the circuit breaker stuff is handled correctly, that only things within this package should be able to ctor the model", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447000735", "createdAt": "2020-06-29T14:09:56Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -39,14 +50,17 @@\n     private volatile long persistenceQuotient = 100;\n     private final LongAdder currentInferenceCount;\n     private final InferenceConfig inferenceConfig;\n+    private final CircuitBreaker trainedModelCircuitBreaker;\n+    private final AtomicLong referenceCount;\n \n     public LocalModel(String modelId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTgyODQxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMDowN1rOGqSxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMDowN1rOGqSxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDg2OA==", "bodyText": "What do you think of adding a check on referenceCount to throw if it is 0?", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447000868", "createdAt": "2020-06-29T14:10:07Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -97,7 +97,6 @@ void persistStats(boolean flush) {\n         }\n     }\n \n-    @Override\n     public void infer(Map<String, Object> fields, InferenceConfigUpdate update, ActionListener<InferenceResults> listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTg0MTA0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMjo0OFrOGqS42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxMjo0OFrOGqS42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMjg0Mg==", "bodyText": "think we need a test here or something?\nWe might also want some tests to verify that our circuit breaker ends up back as zero. (Could be this same test).", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447002842", "createdAt": "2020-06-29T14:12:48Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingServiceTests.java", "diffHunk": "@@ -451,6 +451,10 @@ public void testCircuitBreakerBreak() throws Exception {\n         });\n     }\n \n+    public void testReferenceCounting() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTg0Njc2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxNDoxN1rOGqS8kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxNDoxN1rOGqS8kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMzc5Mw==", "bodyText": "package private? The only way to \"get\" a trained model object should be through a known code path. so, we should restrict their construction and restrict this method as well.", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447003793", "createdAt": "2020-06-29T14:14:17Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -135,4 +134,39 @@ public void infer(Map<String, Object> fields, InferenceConfigUpdate update, Acti\n         }\n     }\n \n+    public long acquire() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTg2ODAwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxODozOVrOGqTJlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoxODozOVrOGqTJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwNzEyNA==", "bodyText": "referenceCount.incrementAndGet() should always be > 1 correct? Do we want to prevent an acquire if the reference count has already reached zero?", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447007124", "createdAt": "2020-06-29T14:18:39Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -135,4 +134,39 @@ public void infer(Map<String, Object> fields, InferenceConfigUpdate update, Acti\n         }\n     }\n \n+    public long acquire() {\n+        return referenceCount.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTkwMDQ1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportInternalInferModelAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyNTozNFrOGqTdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyNTozNFrOGqTdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMjIxNw==", "bodyText": "I wish our ActionListener classes had a finally clause....Not to signal the listener but to do things like our release or close here.", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447012217", "createdAt": "2020-06-29T14:25:34Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportInternalInferModelAction.java", "diffHunk": "@@ -65,9 +65,14 @@ protected void doExecute(Task task, Request request, ActionListener<Response> li\n                         model.infer(stringObjectMap, request.getUpdate(), chainedTask)));\n \n                 typedChainTaskExecutor.execute(ActionListener.wrap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjAwMDQ2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo0NjowOFrOGqUZ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDowMDoyMVrOGwp5ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNzY3NA==", "bodyText": "This might have a race condition (will think more)\n\nModel is grabbed from cache in 203. Model has a ref count of 1\nModel is evicted from cache due to size or something\nRef count is now 0\nModel is attempted to acquire again but ref count 0 and the bytes are already removed from the breaker", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r447027674", "createdAt": "2020-06-29T14:46:08Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -193,10 +199,11 @@ public void getModelForSearch(String modelId, ActionListener<Model> modelActionL\n      * @param consumer            which feature is requesting the model\n      * @param modelActionListener the listener to alert when the model has been retrieved.\n      */\n-    private void getModel(String modelId, Consumer consumer, ActionListener<Model> modelActionListener) {\n+    private void getModel(String modelId, Consumer consumer, ActionListener<LocalModel> modelActionListener) {\n         ModelAndConsumer cachedModel = localModelCache.get(modelId);\n         if (cachedModel != null) {\n             cachedModel.consumers.add(consumer);\n+            cachedModel.model.acquire();\n             modelActionListener.onResponse(cachedModel.model);\n             logger.trace(() -> new ParameterizedMessage(\"[{}] loaded from cache\", modelId));\n             return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3MTI2OA==", "bodyText": "I made a change so that if the ref count == 0 then the model bytes are added back to the circuit breaker. In some cases this means acquire could throw so I have to handle that", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453671268", "createdAt": "2020-07-13T14:00:21Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -193,10 +199,11 @@ public void getModelForSearch(String modelId, ActionListener<Model> modelActionL\n      * @param consumer            which feature is requesting the model\n      * @param modelActionListener the listener to alert when the model has been retrieved.\n      */\n-    private void getModel(String modelId, Consumer consumer, ActionListener<Model> modelActionListener) {\n+    private void getModel(String modelId, Consumer consumer, ActionListener<LocalModel> modelActionListener) {\n         ModelAndConsumer cachedModel = localModelCache.get(modelId);\n         if (cachedModel != null) {\n             cachedModel.consumers.add(consumer);\n+            cachedModel.model.acquire();\n             modelActionListener.onResponse(cachedModel.model);\n             logger.trace(() -> new ParameterizedMessage(\"[{}] loaded from cache\", modelId));\n             return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNzY3NA=="}, "originalCommit": {"oid": "c2ca0c55d0734f92b7707577870a1076413a21fd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTMwMDc3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0MDo1OVrOGwpDIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0MDo1OVrOGwpDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NzM3Nw==", "bodyText": "The diff is bad. The change here is this line then indenting everything", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453657377", "createdAt": "2020-07-13T13:40:59Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/aggs/InferencePipelineAggregator.java", "diffHunk": "@@ -49,69 +49,74 @@ public InferencePipelineAggregator(String name, Map<String,\n     @Override\n     public InternalAggregation reduce(InternalAggregation aggregation, InternalAggregation.ReduceContext reduceContext) {\n \n-        InternalMultiBucketAggregation<InternalMultiBucketAggregation, InternalMultiBucketAggregation.InternalBucket> originalAgg =\n-            (InternalMultiBucketAggregation<InternalMultiBucketAggregation, InternalMultiBucketAggregation.InternalBucket>) aggregation;\n-        List<? extends InternalMultiBucketAggregation.InternalBucket> buckets = originalAgg.getBuckets();\n-\n-        List<InternalMultiBucketAggregation.InternalBucket> newBuckets = new ArrayList<>();\n-        for (InternalMultiBucketAggregation.InternalBucket bucket : buckets) {\n-            Map<String, Object> inputFields = new HashMap<>();\n-\n-            if (bucket.getDocCount() == 0) {\n-                // ignore this empty bucket unless the doc count is used\n-                if (bucketPathMap.containsKey(\"_count\") == false) {\n-                    newBuckets.add(bucket);\n-                    continue;\n+        try (model) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26801a5e2d6e9ca59ca2e1823af0360647b11396"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTUyMDExOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoyOTo0M1rOGwrILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyMjo0MFrOGwtgCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTQzOA==", "bodyText": "Do we need this with the call to updateCircuitBreakerEstimate", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453691438", "createdAt": "2020-07-13T14:29:43Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -256,8 +274,16 @@ private void loadModel(String modelId, Consumer consumer) {\n                 trainedModelCircuitBreaker.addEstimateBytesAndMaybeBreak(trainedModelConfig.getEstimatedHeapMemory(), modelId);\n                 provider.getTrainedModelForInference(modelId, ActionListener.wrap(\n                     inferenceDefinition -> {\n-                        // Since we have used the previously stored estimate to help guard against OOM we need to adjust the memory\n-                        // So that the memory this model uses in the circuit breaker is the most accurate estimate.\n+                        try {\n+                            // Since we have used the previously stored estimate to help guard against OOM we need\n+                            // to adjust the memory so that the memory this model uses in the circuit breaker\n+                            // is the most accurate estimate.\n+                            updateCircuitBreakerEstimate(modelId, inferenceDefinition, trainedModelConfig);\n+                        } catch (CircuitBreakingException ex) {\n+                            handleLoadFailure(modelId, ex);\n+                            return;\n+                        }\n+\n                         long estimateDiff = inferenceDefinition.ramBytesUsed() - trainedModelConfig.getEstimatedHeapMemory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczMDMxMw==", "bodyText": "\ud83e\udd26", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453730313", "createdAt": "2020-07-13T15:22:40Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -256,8 +274,16 @@ private void loadModel(String modelId, Consumer consumer) {\n                 trainedModelCircuitBreaker.addEstimateBytesAndMaybeBreak(trainedModelConfig.getEstimatedHeapMemory(), modelId);\n                 provider.getTrainedModelForInference(modelId, ActionListener.wrap(\n                     inferenceDefinition -> {\n-                        // Since we have used the previously stored estimate to help guard against OOM we need to adjust the memory\n-                        // So that the memory this model uses in the circuit breaker is the most accurate estimate.\n+                        try {\n+                            // Since we have used the previously stored estimate to help guard against OOM we need\n+                            // to adjust the memory so that the memory this model uses in the circuit breaker\n+                            // is the most accurate estimate.\n+                            updateCircuitBreakerEstimate(modelId, inferenceDefinition, trainedModelConfig);\n+                        } catch (CircuitBreakingException ex) {\n+                            handleLoadFailure(modelId, ex);\n+                            return;\n+                        }\n+\n                         long estimateDiff = inferenceDefinition.ramBytesUsed() - trainedModelConfig.getEstimatedHeapMemory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTQzOA=="}, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTU2NjM0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDozOToxOFrOGwrjmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozODo0NFrOGwuNwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5ODQ1Ng==", "bodyText": "\ud83e\udd14\nacquire() could throw.\nI know it is rare, but there is nothing preventing the model being evicted from cache before these listeners are notified.\nMaybe call acquire before putting in cache.\nThen, outside the sync block, calling loadedModel.release() once all the listeners have been notified?\nIt seems funky, but it guarantees the acquire in the listener loop will not throw as it will never reach 0.", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453698456", "createdAt": "2020-07-13T14:39:18Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -337,19 +385,21 @@ private void handleLoadSuccess(String modelId,\n             trainedModelConfig.getInput(),\n             trainedModelConfig.getDefaultFieldMap(),\n             inferenceConfig,\n-            modelStatsService);\n+            modelStatsService,\n+            trainedModelCircuitBreaker);\n         synchronized (loadingListeners) {\n             listeners = loadingListeners.remove(modelId);\n             // If there is no loadingListener that means the loading was canceled and the listener was already notified as such\n             // Consequently, we should not store the retrieved model\n             if (listeners == null) {\n-                trainedModelCircuitBreaker.addWithoutBreaking(-inferenceDefinition.ramBytesUsed());\n+                loadedModel.release();\n                 return;\n             }\n             localModelCache.put(modelId, new ModelAndConsumer(loadedModel, consumer));\n             shouldNotAudit.remove(modelId);\n         } // synchronized (loadingListeners)\n         for (ActionListener<LocalModel> listener = listeners.poll(); listener != null; listener = listeners.poll()) {\n+            loadedModel.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc0MjAxOA==", "bodyText": "Seems funky but it's the simplest and most efficient way to prevent the race \ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453742018", "createdAt": "2020-07-13T15:38:44Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -337,19 +385,21 @@ private void handleLoadSuccess(String modelId,\n             trainedModelConfig.getInput(),\n             trainedModelConfig.getDefaultFieldMap(),\n             inferenceConfig,\n-            modelStatsService);\n+            modelStatsService,\n+            trainedModelCircuitBreaker);\n         synchronized (loadingListeners) {\n             listeners = loadingListeners.remove(modelId);\n             // If there is no loadingListener that means the loading was canceled and the listener was already notified as such\n             // Consequently, we should not store the retrieved model\n             if (listeners == null) {\n-                trainedModelCircuitBreaker.addWithoutBreaking(-inferenceDefinition.ramBytesUsed());\n+                loadedModel.release();\n                 return;\n             }\n             localModelCache.put(modelId, new ModelAndConsumer(loadedModel, consumer));\n             shouldNotAudit.remove(modelId);\n         } // synchronized (loadingListeners)\n         for (ActionListener<LocalModel> listener = listeners.poll(); listener != null; listener = listeners.poll()) {\n+            loadedModel.acquire();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5ODQ1Ng=="}, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTU3OTI0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo0MTo1OFrOGwrraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo0MTo1OFrOGwrraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwMDQ1Nw==", "bodyText": "Could you add a comment about how this is to protect the reference race condition where release was called but then it was acquired again?", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453700457", "createdAt": "2020-07-13T14:41:58Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -169,4 +188,33 @@ public static void mapFieldsIfNecessary(Map<String, Object> fields, Map<String,\n             });\n         }\n     }\n+\n+    long acquire() {\n+        long count = referenceCount.incrementAndGet();\n+        if (count == 1) {\n+            trainedModelCircuitBreaker.addEstimateBytesAndMaybeBreak(trainedModelDefinition.ramBytesUsed(), modelId);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTU4MTI1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo0MjoyNlrOGwrssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozNzo1NlrOGwuKWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwMDc4Nw==", "bodyText": "should we prevent release from ever decrementing below 0?", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453700787", "createdAt": "2020-07-13T14:42:26Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -169,4 +188,33 @@ public static void mapFieldsIfNecessary(Map<String, Object> fields, Map<String,\n             });\n         }\n     }\n+\n+    long acquire() {\n+        long count = referenceCount.incrementAndGet();\n+        if (count == 1) {\n+            trainedModelCircuitBreaker.addEstimateBytesAndMaybeBreak(trainedModelDefinition.ramBytesUsed(), modelId);\n+        }\n+        return count;\n+    }\n+\n+    public long getReferenceCount() {\n+        return referenceCount.get();\n+    }\n+\n+    public long release() {\n+        if (referenceCount.decrementAndGet() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc0MTE0Ng==", "bodyText": "I added an assertion", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453741146", "createdAt": "2020-07-13T15:37:56Z", "author": {"login": "davidkyle"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -169,4 +188,33 @@ public static void mapFieldsIfNecessary(Map<String, Object> fields, Map<String,\n             });\n         }\n     }\n+\n+    long acquire() {\n+        long count = referenceCount.incrementAndGet();\n+        if (count == 1) {\n+            trainedModelCircuitBreaker.addEstimateBytesAndMaybeBreak(trainedModelDefinition.ramBytesUsed(), modelId);\n+        }\n+        return count;\n+    }\n+\n+    public long getReferenceCount() {\n+        return referenceCount.get();\n+    }\n+\n+    public long release() {\n+        if (referenceCount.decrementAndGet() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwMDc4Nw=="}, "originalCommit": {"oid": "fb2073f0bd69868b46f4e80089ee1ccb83183dc7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTc5MzgyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOGwtv-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToyODoyOVrOGwtv-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNDM5NA==", "bodyText": "I am not sure about calling listener.onResponse(loadedModel); while locked.\nWe have no control over what listener.onResponse executes.\nDo you think it is OK?", "url": "https://github.com/elastic/elasticsearch/pull/58670#discussion_r453734394", "createdAt": "2020-07-13T15:28:29Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java", "diffHunk": "@@ -339,21 +375,23 @@ private void handleLoadSuccess(String modelId,\n             trainedModelConfig.getDefaultFieldMap(),\n             inferenceConfig,\n             trainedModelConfig.getLicenseLevel(),\n-            modelStatsService);\n+            modelStatsService,\n+            trainedModelCircuitBreaker);\n         synchronized (loadingListeners) {\n             listeners = loadingListeners.remove(modelId);\n             // If there is no loadingListener that means the loading was canceled and the listener was already notified as such\n             // Consequently, we should not store the retrieved model\n             if (listeners == null) {\n-                trainedModelCircuitBreaker.addWithoutBreaking(-inferenceDefinition.ramBytesUsed());\n+                loadedModel.release();\n                 return;\n             }\n+            for (ActionListener<LocalModel> listener = listeners.poll(); listener != null; listener = listeners.poll()) {\n+                loadedModel.acquire();\n+                listener.onResponse(loadedModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a922826cfe4fd29020c6c5f2df3d785bcaea1500"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2241, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}