{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTA3MzM2", "number": 60809, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowOTozNlrOEVyIoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjo0OTowM1rOEV0D4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjc2OTYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowOTozNlrOG8u_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowOTozNlrOG8u_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNzcwMw==", "bodyText": "Maybe refactor es.excluded_ds to named constant?", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466337703", "createdAt": "2020-08-06T11:09:36Z", "author": {"login": "probakowski"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -272,6 +274,10 @@\n         if (options.allowNoIndices() == false && concreteIndices.isEmpty()) {\n             IndexNotFoundException infe = new IndexNotFoundException((String)null);\n             infe.setResources(\"index_expression\", indexExpressions);\n+            if (excludedDataStreams) {\n+                // Allows callers to handle IndexNotFoundException differently based on whether data streams were excluded.\n+                infe.addMetadata(\"es.excluded_ds\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzA3MTk2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjo0NToxOVrOG8x4vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjo0NToxOVrOG8x4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NTA4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new IllegalArgumentException(\"only write ops with op_type=create are allowed in data streams\");\n          \n          \n            \n                                    throw new IllegalArgumentException(\"only write ops with an op_type of create are allowed in data streams\");", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466385086", "createdAt": "2020-08-06T12:45:19Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java", "diffHunk": "@@ -143,7 +144,15 @@ protected void doStart(ClusterState clusterState) {\n                         throw blockException;\n                     }\n                 }\n-                request.concreteIndex(indexNameExpressionResolver.concreteWriteIndex(clusterState, request).getName());\n+                try {\n+                    request.concreteIndex(indexNameExpressionResolver.concreteWriteIndex(clusterState, request).getName());\n+                } catch (IndexNotFoundException e) {\n+                    if (request.includeDataStreams() == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {\n+                        throw new IllegalArgumentException(\"only write ops with op_type=create are allowed in data streams\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzA4NTE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjo0OTowM1rOG8yAtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo1MDozNlrOG80cFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NzEyNg==", "bodyText": "Just a question -- I don't understand why includeDataStreams == false is here. I would have thought it would be the opposite if it were addressing the case of indexing into data streams though it does seem to work according to the tests you added.", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466387126", "createdAt": "2020-08-06T12:49:03Z", "author": {"login": "danhermann"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -636,8 +636,16 @@ Index resolveIfAbsent(DocWriteRequest<?> request) {\n             Index concreteIndex = indices.get(request.index());\n             if (concreteIndex == null) {\n                 boolean includeDataStreams = request.opType() == DocWriteRequest.OpType.CREATE;\n-                concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0],\n-                    false, includeDataStreams);\n+                try {\n+                    concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(),\n+                        request.indices()[0], false, includeDataStreams);\n+                } catch (IndexNotFoundException e) {\n+                    if (includeDataStreams == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyNjkwMQ==", "bodyText": "I don't think it is needed (because es.excluded_ds is only set if includeDataStreams is false), but I like to keep it here to highlight that this check is only needed for op types other than create.  If includeDataStreams is false then request.opType() is not CREATE.", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466426901", "createdAt": "2020-08-06T13:50:36Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -636,8 +636,16 @@ Index resolveIfAbsent(DocWriteRequest<?> request) {\n             Index concreteIndex = indices.get(request.index());\n             if (concreteIndex == null) {\n                 boolean includeDataStreams = request.opType() == DocWriteRequest.OpType.CREATE;\n-                concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0],\n-                    false, includeDataStreams);\n+                try {\n+                    concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(),\n+                        request.indices()[0], false, includeDataStreams);\n+                } catch (IndexNotFoundException e) {\n+                    if (includeDataStreams == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NzEyNg=="}, "originalCommit": {"oid": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}