{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjMxNTE5", "number": 52556, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxODo0MlrODhcoQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxODo0MlrODhcoQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Mzk4NjU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/index/translog/Translog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxODo0MlrOFsLpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxODo0MlrOFsLpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3MjQ5MQ==", "bodyText": "NIT: Maybe dry this up with the lines below via something like:\n    private long getMinReferencedGen() {\n        long minReferencedGen = Math.min(\n            deletionPolicy.getMinTranslogGenRequiredByLocks(),\n            minGenerationForSeqNo(deletionPolicy.getLocalCheckpointOfSafeCommit() + 1, current, readers));\n        assert minReferencedGen >= getMinFileGeneration() :\n            \"deletion policy requires a minReferenceGen of [\" + minReferencedGen + \"] but the lowest gen available is [\"\n                + getMinFileGeneration() + \"]\";\n        assert minReferencedGen <= currentFileGeneration() :\n            \"deletion policy requires a minReferenceGen of [\" + minReferencedGen + \"] which is higher than the current generation [\"\n                + currentFileGeneration() + \"]\";\n        return minReferencedGen;\n    }", "url": "https://github.com/elastic/elasticsearch/pull/52556#discussion_r381872491", "createdAt": "2020-02-20T09:18:42Z", "author": {"login": "original-brownbear"}, "path": "server/src/main/java/org/elasticsearch/index/translog/Translog.java", "diffHunk": "@@ -1646,7 +1646,24 @@ public void rollGeneration() throws IOException {\n      * required generation\n      */\n     public void trimUnreferencedReaders() throws IOException {\n-        // move most of the data to disk to reduce the time the lock is held\n+        // first check under read lock if any readers can be trimmed\n+        try (ReleasableLock ignored = readLock.acquire()) {\n+            ensureOpen();\n+            long minReferencedGen = Math.min(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9227e23c4acf2af097c8e1928ee75c825777634"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3839, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}