{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjIzODUy", "number": 54878, "title": "ILM: Add cluster update timeout on step retry", "bodyText": "This adds a timeout when moving ILM back on to a failed step. In\ncase the master is struggling with processing the cluster update requests\nthese ones will expire (as we'll send them again anyway on the next ILM\nloop run)\nThis also adds more descriptive source messages for the cluster state update\ntasks to aid debugging.", "createdAt": "2020-04-07T12:02:00Z", "url": "https://github.com/elastic/elasticsearch/pull/54878", "merged": true, "mergeCommit": {"oid": "ff6c5ed16616eadfcddd9c95317d370f0d126583"}, "closed": true, "closedAt": "2020-04-08T16:45:06Z", "author": {"login": "andreidan"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVR8CHgH2gAyNDAwMjIzODUyOjk4MjY1OWI0MmYxZTdmYjM5ODc2NmE1N2JjOGJhZmJjN2E4ZmYxODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVqkmggFqTM5MDE0MjI2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "982659b42f1e7fb398766a57bc8bafbc7a8ff180", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/982659b42f1e7fb398766a57bc8bafbc7a8ff180", "committedDate": "2020-04-07T11:52:27Z", "message": "ILM add cluster update timeout on step retry\n\nThis commits adds a timeout when moving ILM back on to a failed step. In\ncase the master is struggling with processing the cluster update requests\nthese ones will expire (as we'll send them again anyway on the next ILM\nloop run)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90275b620780f81755c5da79b02dc19719a83ecd", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/90275b620780f81755c5da79b02dc19719a83ecd", "committedDate": "2020-04-07T11:53:00Z", "message": "ILM more descriptive source messages for cluster updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7568aebf6153710bd118bb00ccf810a01d72fc00", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/7568aebf6153710bd118bb00ccf810a01d72fc00", "committedDate": "2020-04-07T12:55:17Z", "message": "Use all StepKey information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a64edeb900ba761778a9af74389e1da48107da03", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/a64edeb900ba761778a9af74389e1da48107da03", "committedDate": "2020-04-07T12:56:14Z", "message": "Merge branch 'master' into ilm-cluster-updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19502aa054e5617b3ec87cdbcb4fe60c61c355cf", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/19502aa054e5617b3ec87cdbcb4fe60c61c355cf", "committedDate": "2020-04-07T13:09:44Z", "message": "Merge branch 'master' into ilm-cluster-updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTExNjI4", "url": "https://github.com/elastic/elasticsearch/pull/54878#pullrequestreview-389111628", "createdAt": "2020-04-07T13:25:00Z", "commit": {"oid": "19502aa054e5617b3ec87cdbcb4fe60c61c355cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzoyNTowMFrOGCDYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzoyNTowMFrOGCDYnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwNTc4OA==", "bodyText": "This is code formatting", "url": "https://github.com/elastic/elasticsearch/pull/54878#discussion_r404805788", "createdAt": "2020-04-07T13:25:00Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleRunner.java", "diffHunk": "@@ -204,33 +206,45 @@ void onErrorMaybeRetryFailedStep(String policy, IndexMetadata indexMetadata) {\n             int currentRetryAttempt = lifecycleState.getFailedStepRetryCount() == null ? 1 : 1 + lifecycleState.getFailedStepRetryCount();\n             logger.info(\"policy [{}] for index [{}] on an error step due to a transitive error, moving back to the failed \" +\n                 \"step [{}] for execution. retry attempt [{}]\", policy, index, lifecycleState.getFailedStep(), currentRetryAttempt);\n-            clusterService.submitStateUpdateTask(\"ilm-retry-failed-step\", new ClusterStateUpdateTask() {\n-                @Override\n-                public ClusterState execute(ClusterState currentState) {\n-                    return IndexLifecycleTransition.moveClusterStateToPreviouslyFailedStep(currentState, index,\n-                        nowSupplier, stepRegistry, true);\n-                }\n+            clusterService.submitStateUpdateTask(\n+                String.format(Locale.ROOT, \"ilm-retry-failed-step {policy [%s], index [%s], failedStep [%s]}\", policy, index,\n+                    failedStep.getKey()),\n+                new ClusterStateUpdateTask() {\n \n-                @Override\n-                public void onFailure(String source, Exception e) {\n-                    logger.error(new ParameterizedMessage(\"retry execution of step [{}] for index [{}] failed\",\n-                        failedStep.getKey().getName(), index), e);\n-                }\n+                    @Override\n+                    public TimeValue timeout() {\n+                        // we can afford to drop these requests if they timeout as on the next {@link\n+                        // IndexLifecycleRunner#runPeriodicStep} run the policy will still be in the ERROR step, as we haven't been able\n+                        // to move it back into the failed step, so we'll try again\n+                        return MasterNodeRequest.DEFAULT_MASTER_NODE_TIMEOUT;\n+                    }\n \n-                @Override\n-                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n-                    if (oldState.equals(newState) == false) {\n-                        IndexMetadata newIndexMeta = newState.metadata().index(index);\n-                        Step indexMetaCurrentStep = getCurrentStep(stepRegistry, policy, newIndexMeta);\n-                        StepKey stepKey = indexMetaCurrentStep.getKey();\n-                        if (stepKey != null && stepKey != TerminalPolicyStep.KEY && newIndexMeta != null) {\n-                            logger.trace(\"policy [{}] for index [{}] was moved back on the failed step for as part of an automatic \" +\n-                                \"retry. Attempting to execute the failed step [{}] if it's an async action\", policy, index, stepKey);\n-                            maybeRunAsyncAction(newState, newIndexMeta, policy, stepKey);\n+                    @Override\n+                    public ClusterState execute(ClusterState currentState) {\n+                        return IndexLifecycleTransition.moveClusterStateToPreviouslyFailedStep(currentState, index,\n+                            nowSupplier, stepRegistry, true);\n+                    }\n+\n+                    @Override\n+                    public void onFailure(String source, Exception e) {\n+                        logger.error(new ParameterizedMessage(\"retry execution of step [{}] for index [{}] failed\",\n+                            failedStep.getKey().getName(), index), e);\n+                    }\n+\n+                    @Override\n+                    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                        if (oldState.equals(newState) == false) {\n+                            IndexMetadata newIndexMeta = newState.metadata().index(index);\n+                            Step indexMetaCurrentStep = getCurrentStep(stepRegistry, policy, newIndexMeta);\n+                            StepKey stepKey = indexMetaCurrentStep.getKey();\n+                            if (stepKey != null && stepKey != TerminalPolicyStep.KEY && newIndexMeta != null) {\n+                                logger.trace(\"policy [{}] for index [{}] was moved back on the failed step for as part of an automatic \" +\n+                                    \"retry. Attempting to execute the failed step [{}] if it's an async action\", policy, index, stepKey);\n+                                maybeRunAsyncAction(newState, newIndexMeta, policy, stepKey);\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19502aa054e5617b3ec87cdbcb4fe60c61c355cf"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c52d84b7dd2e6edf75db6254e7b4d74feaf04d1d", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/c52d84b7dd2e6edf75db6254e7b4d74feaf04d1d", "committedDate": "2020-04-07T13:46:57Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0bed3875c589e745af26a5e1120efe7a0b7ed04", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0bed3875c589e745af26a5e1120efe7a0b7ed04", "committedDate": "2020-04-07T13:46:57Z", "message": "ILM cluster state source for ClusterState* steps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTUyNDMy", "url": "https://github.com/elastic/elasticsearch/pull/54878#pullrequestreview-389152432", "createdAt": "2020-04-07T14:07:55Z", "commit": {"oid": "c0bed3875c589e745af26a5e1120efe7a0b7ed04"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2961ac0244f5d6173f2b241496682e800437b0d3", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/2961ac0244f5d6173f2b241496682e800437b0d3", "committedDate": "2020-04-07T14:07:58Z", "message": "Merge branch 'master' into ilm-cluster-updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29aaa1c223d19c8c9370ac00ffef50c22e9267cc", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/29aaa1c223d19c8c9370ac00ffef50c22e9267cc", "committedDate": "2020-04-07T16:29:50Z", "message": "Merge branch 'master' into ilm-cluster-updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376485e1fc9636fc447becddea286ef6dd07ad5a", "author": {"user": {"login": "andreidan", "name": "Andrei Dan"}}, "url": "https://github.com/elastic/elasticsearch/commit/376485e1fc9636fc447becddea286ef6dd07ad5a", "committedDate": "2020-04-08T11:05:26Z", "message": "Use the configured ILM step master timeout setting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODczNzEx", "url": "https://github.com/elastic/elasticsearch/pull/54878#pullrequestreview-389873711", "createdAt": "2020-04-08T11:08:56Z", "commit": {"oid": "376485e1fc9636fc447becddea286ef6dd07ad5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowODo1NlrOGCqUAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowODo1NlrOGCqUAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MzU4NQ==", "bodyText": "I think we can use the setting we already created to manipulate the ILM related master timeouts. What do you think @dakrone ?", "url": "https://github.com/elastic/elasticsearch/pull/54878#discussion_r405443585", "createdAt": "2020-04-08T11:08:56Z", "author": {"login": "andreidan"}, "path": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleRunner.java", "diffHunk": "@@ -204,33 +205,45 @@ void onErrorMaybeRetryFailedStep(String policy, IndexMetadata indexMetadata) {\n             int currentRetryAttempt = lifecycleState.getFailedStepRetryCount() == null ? 1 : 1 + lifecycleState.getFailedStepRetryCount();\n             logger.info(\"policy [{}] for index [{}] on an error step due to a transitive error, moving back to the failed \" +\n                 \"step [{}] for execution. retry attempt [{}]\", policy, index, lifecycleState.getFailedStep(), currentRetryAttempt);\n-            clusterService.submitStateUpdateTask(\"ilm-retry-failed-step\", new ClusterStateUpdateTask() {\n-                @Override\n-                public ClusterState execute(ClusterState currentState) {\n-                    return IndexLifecycleTransition.moveClusterStateToPreviouslyFailedStep(currentState, index,\n-                        nowSupplier, stepRegistry, true);\n-                }\n+            clusterService.submitStateUpdateTask(\n+                String.format(Locale.ROOT, \"ilm-retry-failed-step {policy [%s], index [%s], failedStep [%s]}\", policy, index,\n+                    failedStep.getKey()),\n+                new ClusterStateUpdateTask() {\n \n-                @Override\n-                public void onFailure(String source, Exception e) {\n-                    logger.error(new ParameterizedMessage(\"retry execution of step [{}] for index [{}] failed\",\n-                        failedStep.getKey().getName(), index), e);\n-                }\n+                    @Override\n+                    public TimeValue timeout() {\n+                        // we can afford to drop these requests if they timeout as on the next {@link\n+                        // IndexLifecycleRunner#runPeriodicStep} run the policy will still be in the ERROR step, as we haven't been able\n+                        // to move it back into the failed step, so we'll try again\n+                        return LifecycleSettings.LIFECYCLE_STEP_MASTER_TIMEOUT_SETTING.get(clusterService.state().metadata().settings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376485e1fc9636fc447becddea286ef6dd07ad5a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTQyMjYz", "url": "https://github.com/elastic/elasticsearch/pull/54878#pullrequestreview-390142263", "createdAt": "2020-04-08T16:34:29Z", "commit": {"oid": "376485e1fc9636fc447becddea286ef6dd07ad5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3751, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}