{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODEwNjY5", "number": 51513, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMTowN1rODbKg5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozOTo1MVrODcp3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODEwNDA2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMTowN1rOFifc2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMzowMjozNFrOFj8zZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTE5NQ==", "bodyText": "can we emphasize that any data source is ok to be used? (I think the current version, albeit more composed, ties ILM to Filebeat, which is something that some users might not be familiar with) Maybe something along the lines of\n\"When using a a time series data source like Filebeat to continuously ...\" ?", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r371711195", "createdAt": "2020-01-28T10:11:07Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0MDY3Ng==", "bodyText": "Changed to, \"When you continuously index timestamped documents into {es} using\nFilebeat, Logstash, or some other mechanism...\"", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r373240676", "createdAt": "2020-01-30T23:02:34Z", "author": {"login": "debadair"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTE5NQ=="}, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODEzMzE2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyMDowMFrOFifvVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyMDowMFrOFifvVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxNTkyNw==", "bodyText": "\"with the explain API\"", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r371715927", "createdAt": "2020-01-28T10:20:00Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n+\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n+\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new time-series index.\n+. <<ilm-gs-bootstrap, Bootstrap the initial time-series index>> by explicitly designating it as the write index.\n+. <<ilm-gs-check-progress, Verify that indexes are moving through the lifecycle phases>> as expected with the \n+you use the {ilm-init} explain API. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODEzNzUwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyMToxMFrOFifx2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyMToxMFrOFifx2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxNjU2OA==", "bodyText": "Shall we rephrase \"In your lifecycle policy\" to \"When you create a lifecycle policy\" ? (\"in your ...\" sounds a bit confusing as the user is just looking to create a policy now)", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r371716568", "createdAt": "2020-01-28T10:21:10Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n+\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n+\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new time-series index.\n+. <<ilm-gs-bootstrap, Bootstrap the initial time-series index>> by explicitly designating it as the write index.\n+. <<ilm-gs-check-progress, Verify that indexes are moving through the lifecycle phases>> as expected with the \n+you use the {ilm-init} explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+In your lifecycle policy, you specify the phases in your index lifecycle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODE0NzIwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyNDowOFrOFif37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMzowNDoxNlrOFj81xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxODEyNg==", "bodyText": "nit: \"the  delete action\" - there're some extra spaces before delete", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r371718126", "createdAt": "2020-01-28T10:24:08Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n+\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n+\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new time-series index.\n+. <<ilm-gs-bootstrap, Bootstrap the initial time-series index>> by explicitly designating it as the write index.\n+. <<ilm-gs-check-progress, Verify that indexes are moving through the lifecycle phases>> as expected with the \n+you use the {ilm-init} explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+In your lifecycle policy, you specify the phases in your index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to move an index into the\n+delete phase when it is 90 days old and immediately triggers the  `delete` action to remove the index.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0MTI4NQ==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r373241285", "createdAt": "2020-01-30T23:04:16Z", "author": {"login": "debadair"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n+\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n+\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new time-series index.\n+. <<ilm-gs-bootstrap, Bootstrap the initial time-series index>> by explicitly designating it as the write index.\n+. <<ilm-gs-check-progress, Verify that indexes are moving through the lifecycle phases>> as expected with the \n+you use the {ilm-init} explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+In your lifecycle policy, you specify the phases in your index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to move an index into the\n+delete phase when it is 90 days old and immediately triggers the  `delete` action to remove the index.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxODEyNg=="}, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODE1NTUwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyNjozOVrOFif9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMzowNjoyMVrOFj84hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxOTQyNA==", "bodyText": "the delete action doesn't support any conditionals/parameters so I think we shouldn't mention conditionals here but rather \"The delete action is triggered ...\"", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r371719424", "createdAt": "2020-01-28T10:26:39Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n+\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n+\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new time-series index.\n+. <<ilm-gs-bootstrap, Bootstrap the initial time-series index>> by explicitly designating it as the write index.\n+. <<ilm-gs-check-progress, Verify that indexes are moving through the lifecycle phases>> as expected with the \n+you use the {ilm-init} explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+In your lifecycle policy, you specify the phases in your index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to move an index into the\n+delete phase when it is 90 days old and immediately triggers the  `delete` action to remove the index.\n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n \n-<1> call to the <<ilm-put-lifecycle,put lifecycle API>> endpoint to create\n-    a new policy named \"datastream_policy\"\n-<2> policy definition sub-object\n-<3> the hot phase defined in the \"phases\" section. Optional `min_age` field\n-    not defined -- defaults to `0ms`\n-<4> rollover action definition\n-<5> delete phase begins after 90 days\n-<6> delete action definition\n \n+<1> The `min_age` field defaults to `0ms` in the hot phase, so new indices immediately enter the hot phase. \n+<2> The `rollover` action is triggered when any of the conditions are met.\n+<3> An index is moved into the delete phase after 90 days.\n+<4> No additional conditions are specified, so the `delete` action is triggered when the index enters the delete phase. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0MTk4OA==", "bodyText": "Fixed.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r373241988", "createdAt": "2020-01-30T23:06:21Z", "author": {"login": "debadair"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -3,77 +3,87 @@\n [[getting-started-index-lifecycle-management]]\n == Getting started with {ilm}\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n-\n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you use a mechanism like Filebeat to continuously index documents into {es},\n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n+\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n+\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new time-series index.\n+. <<ilm-gs-bootstrap, Bootstrap the initial time-series index>> by explicitly designating it as the write index.\n+. <<ilm-gs-check-progress, Verify that indexes are moving through the lifecycle phases>> as expected with the \n+you use the {ilm-init} explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+In your lifecycle policy, you specify the phases in your index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to move an index into the\n+delete phase when it is 90 days old and immediately triggers the  `delete` action to remove the index.\n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n \n-<1> call to the <<ilm-put-lifecycle,put lifecycle API>> endpoint to create\n-    a new policy named \"datastream_policy\"\n-<2> policy definition sub-object\n-<3> the hot phase defined in the \"phases\" section. Optional `min_age` field\n-    not defined -- defaults to `0ms`\n-<4> rollover action definition\n-<5> delete phase begins after 90 days\n-<6> delete action definition\n \n+<1> The `min_age` field defaults to `0ms` in the hot phase, so new indices immediately enter the hot phase. \n+<2> The `rollover` action is triggered when any of the conditions are met.\n+<3> An index is moved into the delete phase after 90 days.\n+<4> No additional conditions are specified, so the `delete` action is triggered when the index enters the delete phase. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxOTQyNA=="}, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODE3NDM0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDozMjoyMFrOFigIng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDozMjoyMFrOFigIng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcyMjM5OA==", "bodyText": "nit: \"The rollover alias\"", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r371722398", "createdAt": "2020-01-28T10:32:20Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -90,22 +100,19 @@ PUT _template/datastream_template\n -----------------------\n // TEST[continued]\n \n-<1> match all indices starting with \"datastream-\". These will include all\n-    newly created indices from actions like rollover\n-<2> the name of the lifecycle policy managing the index\n-<3> alias to use for the rollover action, required since a rollover action is\n-    defined in the policy.\n-\n-The above index template introduces a few new settings specific to {ilm-init}.\n-The first being `index.lifecycle.name`. This setting will configure\n-the \"datastream_policy\" to the index applying this template. This means\n-that all newly created indices prefixed \"datastream-\" will be managed by\n-our policy. The other setting used here is `index.lifecycle.rollover_alias`.\n-This setting is required when using a policy containing the rollover\n-action and specifies which alias to rollover on behalf of this index.\n-The intention here is that the rollover alias is also defined on the index.\n-\n-To begin, we will want to bootstrap our first index to write to.\n+<1> Apply the template to a new index if its name starts with \"datastream-\". \n+<2> The name of the lifecycle policy to apply to each new index.\n+<3> The index alias must be specified if a policy uses the rollover action.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18427b5c924e341a3fece7879ae793201b54573"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODk3ODM1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDo1NzowM1rOFkH9Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDo1NzowM1rOFkH9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyMzQyMg==", "bodyText": "datastream_000001 -> datastream-000001", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r373423422", "createdAt": "2020-01-31T10:57:03Z", "author": {"login": "andreidan"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -100,23 +119,17 @@ DELETE /_template/datastream_template\n \n //////////////////////////\n \n-<1> match all indices starting with \"datastream-\". These will include all\n-    newly created indices from actions like rollover\n-<2> the name of the lifecycle policy managing the index\n-<3> alias to use for the rollover action, required since a rollover action is\n-    defined in the policy.\n-\n-The above index template introduces a few new settings specific to {ilm-init}.\n-The first being `index.lifecycle.name`. This setting will configure\n-the \"datastream_policy\" to the index applying this template. This means\n-that all newly created indices prefixed \"datastream-\" will be managed by\n-our policy. The other setting used here is `index.lifecycle.rollover_alias`.\n-This setting is required when using a policy containing the rollover\n-action and specifies which alias to rollover on behalf of this index.\n-The intention here is that the rollover alias is also defined on the index.\n+[float]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the initial time-series index\n \n-To begin, we will want to bootstrap our first index to write to.\n+To get things started, you need to bootstrap an initial index and \n+designate it as the write index for the rollover alias specified in your index template. \n+The name of this index must match the template's index pattern and end with a number. \n+On rollover, this value is incremented to generate a name for the new index. \n \n+For example, the following request creates an index called `datastream_000001` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzYyOTAyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMTo1NlrOFkypLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMTo1NlrOFkypLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMjc5OA==", "bodyText": "I think it's rollover when used as a noun.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Get started: Automate roll over with {ilm-init}\n          \n          \n            \n            == Get started: Automate rollover with {ilm-init}", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374122798", "createdAt": "2020-02-03T14:11:56Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzYyOTcwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMjowN1rOFkypmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMjowN1rOFkypmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMjkwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <titleabbrev>Automate roll over</titleabbrev>\n          \n          \n            \n            <titleabbrev>Automate rollover</titleabbrev>", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374122906", "createdAt": "2020-02-03T14:12:07Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY1MDIyOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxODoyNFrOFky2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxODoyNFrOFky2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjIxMg==", "bodyText": "Link for index alias?", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374126212", "createdAt": "2020-02-03T14:18:24Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY1MTg5OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxODo1NFrOFky3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxODo1NFrOFky3fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To automate roll over and management of time-series indices with {ilm-init}, you:\n          \n          \n            \n            To automate rollover and management of time-series indices with {ilm-init}:", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374126463", "createdAt": "2020-02-03T14:18:54Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY2MTE1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyMToyNFrOFky8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyMToyNFrOFky8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNzg2OA==", "bodyText": "I don't think \"Put\" needs to capitalized.\n\n. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374127868", "createdAt": "2020-02-03T14:21:24Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY2NDEzOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyMjoxMlrOFky-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyMjoxMlrOFky-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyODMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n          \n          \n            \n            . <<ilm-gs-check-progress, Verify indices are moving through the lifecycle phases>>", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374128315", "createdAt": "2020-02-03T14:22:12Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY2NDY0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyMjoyM1rOFky_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyMjoyM1rOFky_Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyODQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            as expected with the {ilm-init} Explain API. \n          \n          \n            \n            as expected with the {ilm-init} explain API.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374128402", "createdAt": "2020-02-03T14:22:23Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY3MTQxOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNDoxNFrOFkzDUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNDoxNFrOFkzDUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyOTQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and the actions to perform in each phase. A lifecycle can have up to four  phases:\n          \n          \n            \n            and the actions to perform in each phase. A lifecycle can have up to four phases:", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374129491", "createdAt": "2020-02-03T14:24:14Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY3Mjk0OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNDozN1rOFkzEMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNDozN1rOFkzEMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyOTcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and added through the {ilm-init} Put policy API. \n          \n          \n            \n            and added through the {ilm-init} put policy API.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374129715", "createdAt": "2020-02-03T14:24:37Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY5MDgxOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOToyNVrOFkzO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOToyNVrOFkzO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjQ3Ng==", "bodyText": "Phases are enclosed in backticks earlier.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> The `min_age` defaults to `0ms`, so new indices enter the hot phase immediately. \n          \n          \n            \n            <1> The `min_age` defaults to `0ms`, so new indices enter the `hot` phase immediately.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374132476", "createdAt": "2020-02-03T14:29:25Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to remove the index 90 days after rollover.\n+Note that this value is relative to the rollover time, not the index creation time. \n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n+<1> The `min_age` defaults to `0ms`, so new indices enter the hot phase immediately. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY5MTY2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOTozOFrOFkzPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOTozOFrOFkzPeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> Move the index into the delete phase 90 days after rollover.\n          \n          \n            \n            <3> Move the index into the `delete` phase 90 days after rollover.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374132601", "createdAt": "2020-02-03T14:29:38Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to remove the index 90 days after rollover.\n+Note that this value is relative to the rollover time, not the index creation time. \n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n+<1> The `min_age` defaults to `0ms`, so new indices enter the hot phase immediately. \n+<2> Trigger the `rollover` action when either of the conditions are met.\n+<3> Move the index into the delete phase 90 days after rollover.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY5MjEzOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOTo0OFrOFkzPyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOTo0OFrOFkzPyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> Trigger the `delete` action when the index enters the delete phase.\n          \n          \n            \n            <4> Trigger the `delete` action when the index enters the `delete` phase.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374132681", "createdAt": "2020-02-03T14:29:48Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to remove the index 90 days after rollover.\n+Note that this value is relative to the rollover time, not the index creation time. \n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n+<1> The `min_age` defaults to `0ms`, so new indices enter the hot phase immediately. \n+<2> Trigger the `rollover` action when either of the conditions are met.\n+<3> Move the index into the delete phase 90 days after rollover.\n+<4> Trigger the `delete` action when the index enters the delete phase.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY5ODY1OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMTo0MlrOFkzTyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMTo0MlrOFkzTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzcwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you specify the policy in the index template used to create new indices.\n          \n          \n            \n            specify the policy in the index template used to create new indices.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374133704", "createdAt": "2020-02-03T14:31:42Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to remove the index 90 days after rollover.\n+Note that this value is relative to the rollover time, not the index creation time. \n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n+<1> The `min_age` defaults to `0ms`, so new indices enter the hot phase immediately. \n+<2> Trigger the `rollover` action when either of the conditions are met.\n+<3> Move the index into the delete phase 90 days after rollover.\n+<4> Trigger the `delete` action when the index enters the delete phase.\n \n-<1> call to the <<ilm-put-lifecycle,put lifecycle API>> endpoint to create\n-    a new policy named \"datastream_policy\"\n-<2> policy definition sub-object\n-<3> the hot phase defined in the \"phases\" section. Optional `min_age` field\n-    not defined -- defaults to `0ms`\n-<4> rollover action definition\n-<5> delete phase begins after 90 days\n-<6> delete action definition\n-\n-\n-Here we created the policy called `datastream_policy` which rolls over\n-the index being written to after it reaches 50 gigabytes, or it is 30\n-days old. The rollover will occur when either of these conditions is true.\n-The index will be deleted 90 days after it is rolled over.\n+See <<_actions>> for the complete list of actions available in each phase.\n \n [float]\n [[ilm-gs-apply-policy]]\n-=== Applying a policy to our index\n+=== Create an index template to apply the lifecycle policy\n+\n+To automaticaly apply a lifecycle policy to the new write index on rollover, \n+you specify the policy in the index template used to create new indices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcwMDk5OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMjoyMlrOFkzVRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMjoyMlrOFkzVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNDA4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> Apply the template to a new index if its name starts with \"datastream-\". \n          \n          \n            \n            <1> Apply the template to a new index if its name starts with `datastream-`.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374134085", "createdAt": "2020-02-03T14:32:22Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -90,6 +104,11 @@ PUT _template/datastream_template\n -----------------------\n // TEST[continued]\n \n+<1> Apply the template to a new index if its name starts with \"datastream-\". ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcwNDU2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMzoyMVrOFkzXXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMzoyMVrOFkzXXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNDYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `index.lifecycle.rollover_alias` specifies the index alias that will be rolled over \n          \n          \n            \n            * `index.lifecycle.rollover_alias` specifies the index alias to be rolled over", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374134622", "createdAt": "2020-02-03T14:33:21Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n+. <<ilm-gs-check-progress, Verify that indices are moving through the lifecycle phases>> \n+as expected with the {ilm-init} Explain API. \n \n [float]\n [[ilm-gs-create-policy]]\n-=== Setting up a policy\n+=== Create a lifecycle policy\n \n-There are many new features introduced by {ilm-init}, but we will only focus on\n-a few that are needed for our example. For starters, we will use the\n-<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle\n-policies are defined in JSON and include specific\n-<<ilm-policy-definition,phases and actions>>.\n+A lifecycle policy specifies the phases in the index lifecycle\n+and the actions to perform in each phase. A lifecycle can have up to four  phases:\n+`hot`, `warm`, `cold`, and `delete`. Policies are defined in JSON \n+and added through the {ilm-init} Put policy API. \n+\n+For example, the following request creates a `data_stream` policy with two phases:\n+ \n+* The `hot` phase defines a `rollover` action to specify that an index rolls over when it \n+reaches either a `max_size` of 50 gigabytes or a `max_age` of 30 days.\n+* The `delete` phase uses `min_age` to remove the index 90 days after rollover.\n+Note that this value is relative to the rollover time, not the index creation time. \n \n [source,console]\n ------------------------\n-PUT _ilm/policy/datastream_policy   <1>\n+PUT _ilm/policy/datastream_policy \n {\n-  \"policy\": {                       <2>\n+  \"policy\": {                       \n     \"phases\": {\n-      \"hot\": {                      <3>\n+      \"hot\": {                      <1>\n         \"actions\": {\n-          \"rollover\": {             <4>\n-            \"max_size\": \"50GB\",\n+          \"rollover\": {             \n+            \"max_size\": \"50GB\",     <2>\n             \"max_age\": \"30d\"\n           }\n         }\n       },\n       \"delete\": {\n-        \"min_age\": \"90d\",           <5>\n+        \"min_age\": \"90d\",           <3>\n         \"actions\": {\n-          \"delete\": {}              <6>\n+          \"delete\": {}              <4>\n         }\n       }\n     }\n   }\n }\n ------------------------\n+<1> The `min_age` defaults to `0ms`, so new indices enter the hot phase immediately. \n+<2> Trigger the `rollover` action when either of the conditions are met.\n+<3> Move the index into the delete phase 90 days after rollover.\n+<4> Trigger the `delete` action when the index enters the delete phase.\n \n-<1> call to the <<ilm-put-lifecycle,put lifecycle API>> endpoint to create\n-    a new policy named \"datastream_policy\"\n-<2> policy definition sub-object\n-<3> the hot phase defined in the \"phases\" section. Optional `min_age` field\n-    not defined -- defaults to `0ms`\n-<4> rollover action definition\n-<5> delete phase begins after 90 days\n-<6> delete action definition\n-\n-\n-Here we created the policy called `datastream_policy` which rolls over\n-the index being written to after it reaches 50 gigabytes, or it is 30\n-days old. The rollover will occur when either of these conditions is true.\n-The index will be deleted 90 days after it is rolled over.\n+See <<_actions>> for the complete list of actions available in each phase.\n \n [float]\n [[ilm-gs-apply-policy]]\n-=== Applying a policy to our index\n+=== Create an index template to apply the lifecycle policy\n+\n+To automaticaly apply a lifecycle policy to the new write index on rollover, \n+you specify the policy in the index template used to create new indices.\n \n-There are <<set-up-lifecycle-policy,a few ways>> to associate a\n-policy to an index. Since we wish specific settings to be applied to\n-the new index created from Rollover, we will set the policy via\n-index templates.\n+For example, the following request creates a `datastream_template` that is applied to new indices\n+whose names match the `datastream-*` index pattern. \n+The template configures two {ilm-init} settings:\n \n+* `index.lifecycle.name` specifies the name of the lifecycle policy to apply to all new indices that match \n+the index pattern.  \n+* `index.lifecycle.rollover_alias` specifies the index alias that will be rolled over ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxMjU4OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNTo0MlrOFkzcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNTo0MlrOFkzcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNTk2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To get things started, you need to bootstrap an initial index and \n          \n          \n            \n            To get things started, you need to create an initial index and", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374135969", "createdAt": "2020-02-03T14:35:42Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -100,23 +119,17 @@ DELETE /_template/datastream_template\n \n //////////////////////////\n \n-<1> match all indices starting with \"datastream-\". These will include all\n-    newly created indices from actions like rollover\n-<2> the name of the lifecycle policy managing the index\n-<3> alias to use for the rollover action, required since a rollover action is\n-    defined in the policy.\n-\n-The above index template introduces a few new settings specific to {ilm-init}.\n-The first being `index.lifecycle.name`. This setting will configure\n-the \"datastream_policy\" to the index applying this template. This means\n-that all newly created indices prefixed \"datastream-\" will be managed by\n-our policy. The other setting used here is `index.lifecycle.rollover_alias`.\n-This setting is required when using a policy containing the rollover\n-action and specifies which alias to rollover on behalf of this index.\n-The intention here is that the rollover alias is also defined on the index.\n+[float]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the initial time-series index\n \n-To begin, we will want to bootstrap our first index to write to.\n+To get things started, you need to bootstrap an initial index and ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxNDQ2OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNjoxNVrOFkzd4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNjoxNVrOFkzd4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjI4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Designates the new index as the write index and makes the bootstrap index read-only.\n          \n          \n            \n            * Designates the new index as the write index and makes `datastream-000001` read-only.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374136289", "createdAt": "2020-02-03T14:36:15Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -131,44 +144,40 @@ PUT datastream-000001\n -----------------------\n // TEST[continued]\n \n-When creating our index, we have to consider a few important configurations\n-that tie our index and our policy together correctly. We need to make sure\n-that our index name matches our index template pattern of \"datastream-*\",\n-which it does. We are using the <<ilm-rollover-action, Rollover Action>> in our policy, which\n-requires that our index name ends with a number. In our case, we used\n-`000001`. This is important so that Rollover can increment this number when\n-naming the new index created from rolling over.\n-\n-Our index creation request leverages its template to apply our settings,\n-but we must also configure our rollover alias: \"datastream\". To do this,\n-we take advantage of <<aliases-write-index,write indices>>. This is a way\n-to define an alias to be used for both reading and writing, with only one\n-index being the index that is being written to at a time. Rollover swaps\n-the write index to be the new index created from rollover, and sets the\n-alias to be read-only for the source index.\n+When the rollover conditions are met, the rollover action:\n+\n+* Creates a new index called `datastream-000002`. \n+This matches the `datastream-*` pattern, so the settings from `datastream_template` are applied to the new index.\n+* Designates the new index as the write index and makes the bootstrap index read-only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxNTg3OnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNjozOFrOFkzetw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNjozOFrOFkzetw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This process will repeat each time the rollover conditions are met. \n          \n          \n            \n            This process repeats each time rollover conditions are met.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374136503", "createdAt": "2020-02-03T14:36:38Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -131,44 +144,40 @@ PUT datastream-000001\n -----------------------\n // TEST[continued]\n \n-When creating our index, we have to consider a few important configurations\n-that tie our index and our policy together correctly. We need to make sure\n-that our index name matches our index template pattern of \"datastream-*\",\n-which it does. We are using the <<ilm-rollover-action, Rollover Action>> in our policy, which\n-requires that our index name ends with a number. In our case, we used\n-`000001`. This is important so that Rollover can increment this number when\n-naming the new index created from rolling over.\n-\n-Our index creation request leverages its template to apply our settings,\n-but we must also configure our rollover alias: \"datastream\". To do this,\n-we take advantage of <<aliases-write-index,write indices>>. This is a way\n-to define an alias to be used for both reading and writing, with only one\n-index being the index that is being written to at a time. Rollover swaps\n-the write index to be the new index created from rollover, and sets the\n-alias to be read-only for the source index.\n+When the rollover conditions are met, the rollover action:\n+\n+* Creates a new index called `datastream-000002`. \n+This matches the `datastream-*` pattern, so the settings from `datastream_template` are applied to the new index.\n+* Designates the new index as the write index and makes the bootstrap index read-only.\n+\n+This process will repeat each time the rollover conditions are met. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxNzYxOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNzoxMlrOFkzf1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNzoxMlrOFkzf1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjc5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The response below shows that the bootstrap index is waiting in the `hot` phase's `rollover` action.\n          \n          \n            \n            The response below shows that the `datastream-000001` index is waiting in the `hot` phase's `rollover` action.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374136791", "createdAt": "2020-02-03T14:37:12Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -131,44 +144,40 @@ PUT datastream-000001\n -----------------------\n // TEST[continued]\n \n-When creating our index, we have to consider a few important configurations\n-that tie our index and our policy together correctly. We need to make sure\n-that our index name matches our index template pattern of \"datastream-*\",\n-which it does. We are using the <<ilm-rollover-action, Rollover Action>> in our policy, which\n-requires that our index name ends with a number. In our case, we used\n-`000001`. This is important so that Rollover can increment this number when\n-naming the new index created from rolling over.\n-\n-Our index creation request leverages its template to apply our settings,\n-but we must also configure our rollover alias: \"datastream\". To do this,\n-we take advantage of <<aliases-write-index,write indices>>. This is a way\n-to define an alias to be used for both reading and writing, with only one\n-index being the index that is being written to at a time. Rollover swaps\n-the write index to be the new index created from rollover, and sets the\n-alias to be read-only for the source index.\n+When the rollover conditions are met, the rollover action:\n+\n+* Creates a new index called `datastream-000002`. \n+This matches the `datastream-*` pattern, so the settings from `datastream_template` are applied to the new index.\n+* Designates the new index as the write index and makes the bootstrap index read-only.\n+\n+This process will repeat each time the rollover conditions are met. \n+You can search across all of the indices managed by the `datastream_policy` with the `datastream` alias. \n+Write operations are routed to the current write index. \n+\n+For more information about write indices and rollover, see the <<rollover-index-api-desc, Rollover API>>.\n \n [float]\n [[ilm-gs-check-progress]]\n === Checking progress\n \n-Now that we have an index managed by our policy, how do we tell what is going\n-on? Which phase are we in? Is something broken? This section will go over a\n-few APIs and their responses to help us inspect our indices with respect\n-to {ilm-init}.\n+To get status information for {ilm-init}-managed indices, you use the Explain API. \n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n \n-With the help of the <<ilm-explain-lifecycle,Explain API>>, we can know\n-things like which phase we're in and when we entered that phase. The API\n-will also provide further info if errors occurred, or if we are blocked on\n-certain checks within actions.\n+For example, the following request gets information about the `datastream` indices: \n \n [source,console]\n --------------------------------------------------\n GET datastream-*/_ilm/explain\n --------------------------------------------------\n // TEST[continued]\n \n-The above request will retrieve {ilm-init} execution information for all our\n-managed indices.\n+The response below shows that the bootstrap index is waiting in the `hot` phase's `rollover` action.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxOTczOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNzo0NlrOFkzhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNzo0NlrOFkzhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.\n          \n          \n            \n            . <<ilm-gs-bootstrap, Create an initial write index>>.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374137130", "createdAt": "2020-02-03T14:37:46Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -1,79 +1,93 @@\n [role=\"xpack\"]\n [testenv=\"basic\"]\n+\n [[getting-started-index-lifecycle-management]]\n-== Get started with {ilm}\n+== Get started: Automate roll over with {ilm-init}\n+\n+++++\n+<titleabbrev>Automate roll over</titleabbrev>\n+++++\n+\n+This tutorial demonstrates how to use {ilm} ({ilm-init}) \n+to manage indices that contain time-series data. \n+\n+When you continuously index timestamped documents into {es} using \n+Filebeat, Logstash, or some other mechanism, \n+you typically use an index alias so you can periodically roll over to a new index.\n+This enables you to implement a hot-warm-cold architecture to meet your performance\n+requirements for your newest data, control costs over time, enforce retention policies,\n+and still get the most out of your data.\n \n-Let's jump into {ilm} ({ilm-init}) by working through a hands-on scenario.\n-This section will leverage many new concepts unique to {ilm-init} that\n-you may not be familiar with. The following sections will explore\n-these in more details.\n+To automate roll over and management of time-series indices with {ilm-init}, you:\n \n-The goal of this example is to set up a set of indices that will encapsulate\n-the data from a time series data source. We can imagine there is a system\n-like {filebeat-ref}[Filebeat] that continuously indexes documents into\n-our writing index. We wish to roll over the index after it reaches a size\n-of 50 gigabytes, or has been created 30 days ago, and then delete the index\n-after 90 days.\n+. <<ilm-gs-create-policy, Create a lifecycle policy>> with the {ilm-init} Put policy API.  \n+. <<ilm-gs-apply-policy, Create an index template>> to apply the policy to each new index.\n+. <<ilm-gs-bootstrap, Bootstrap an index>> as the initial write index.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyMDkwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODowNlrOFkzh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozODowNlrOFkzh5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzMxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Bootstrap the initial time-series index\n          \n          \n            \n            === Create an initial time-series index", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374137316", "createdAt": "2020-02-03T14:38:06Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -100,23 +119,17 @@ DELETE /_template/datastream_template\n \n //////////////////////////\n \n-<1> match all indices starting with \"datastream-\". These will include all\n-    newly created indices from actions like rollover\n-<2> the name of the lifecycle policy managing the index\n-<3> alias to use for the rollover action, required since a rollover action is\n-    defined in the policy.\n-\n-The above index template introduces a few new settings specific to {ilm-init}.\n-The first being `index.lifecycle.name`. This setting will configure\n-the \"datastream_policy\" to the index applying this template. This means\n-that all newly created indices prefixed \"datastream-\" will be managed by\n-our policy. The other setting used here is `index.lifecycle.rollover_alias`.\n-This setting is required when using a policy containing the rollover\n-action and specifies which alias to rollover on behalf of this index.\n-The intention here is that the rollover alias is also defined on the index.\n+[float]\n+[[ilm-gs-bootstrap]]\n+=== Bootstrap the initial time-series index", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyNDgzOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozOToxNFrOFkzkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozOToxNFrOFkzkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It will remain in this state and {ilm-init} will continue to call `attempt-rollover` \n          \n          \n            \n            It remains in this state and {ilm-init} continues to call `attempt-rollover`", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374137966", "createdAt": "2020-02-03T14:39:14Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -131,44 +144,40 @@ PUT datastream-000001\n -----------------------\n // TEST[continued]\n \n-When creating our index, we have to consider a few important configurations\n-that tie our index and our policy together correctly. We need to make sure\n-that our index name matches our index template pattern of \"datastream-*\",\n-which it does. We are using the <<ilm-rollover-action, Rollover Action>> in our policy, which\n-requires that our index name ends with a number. In our case, we used\n-`000001`. This is important so that Rollover can increment this number when\n-naming the new index created from rolling over.\n-\n-Our index creation request leverages its template to apply our settings,\n-but we must also configure our rollover alias: \"datastream\". To do this,\n-we take advantage of <<aliases-write-index,write indices>>. This is a way\n-to define an alias to be used for both reading and writing, with only one\n-index being the index that is being written to at a time. Rollover swaps\n-the write index to be the new index created from rollover, and sets the\n-alias to be read-only for the source index.\n+When the rollover conditions are met, the rollover action:\n+\n+* Creates a new index called `datastream-000002`. \n+This matches the `datastream-*` pattern, so the settings from `datastream_template` are applied to the new index.\n+* Designates the new index as the write index and makes the bootstrap index read-only.\n+\n+This process will repeat each time the rollover conditions are met. \n+You can search across all of the indices managed by the `datastream_policy` with the `datastream` alias. \n+Write operations are routed to the current write index. \n+\n+For more information about write indices and rollover, see the <<rollover-index-api-desc, Rollover API>>.\n \n [float]\n [[ilm-gs-check-progress]]\n === Checking progress\n \n-Now that we have an index managed by our policy, how do we tell what is going\n-on? Which phase are we in? Is something broken? This section will go over a\n-few APIs and their responses to help us inspect our indices with respect\n-to {ilm-init}.\n+To get status information for {ilm-init}-managed indices, you use the Explain API. \n+This lets you find out things like:\n+\n+* What phase an index is in and when it entered that phase.\n+* The current action and what step is being performed.\n+* If any errors have occurred or progress is blocked.\n \n-With the help of the <<ilm-explain-lifecycle,Explain API>>, we can know\n-things like which phase we're in and when we entered that phase. The API\n-will also provide further info if errors occurred, or if we are blocked on\n-certain checks within actions.\n+For example, the following request gets information about the `datastream` indices: \n \n [source,console]\n --------------------------------------------------\n GET datastream-*/_ilm/explain\n --------------------------------------------------\n // TEST[continued]\n \n-The above request will retrieve {ilm-init} execution information for all our\n-managed indices.\n+The response below shows that the bootstrap index is waiting in the `hot` phase's `rollover` action.\n+It will remain in this state and {ilm-init} will continue to call `attempt-rollover` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcyNjkwOnYy", "diffSide": "RIGHT", "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozOTo1MVrOFkzlsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozOTo1MVrOFkzlsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzODI4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To get status information for {ilm-init}-managed indices, you use the Explain API. \n          \n          \n            \n            To get status information for {ilm-init}-managed indices, you use the explain API.", "url": "https://github.com/elastic/elasticsearch/pull/51513#discussion_r374138288", "createdAt": "2020-02-03T14:39:51Z", "author": {"login": "jrodewig"}, "path": "docs/reference/ilm/getting-started-ilm.asciidoc", "diffHunk": "@@ -131,44 +144,40 @@ PUT datastream-000001\n -----------------------\n // TEST[continued]\n \n-When creating our index, we have to consider a few important configurations\n-that tie our index and our policy together correctly. We need to make sure\n-that our index name matches our index template pattern of \"datastream-*\",\n-which it does. We are using the <<ilm-rollover-action, Rollover Action>> in our policy, which\n-requires that our index name ends with a number. In our case, we used\n-`000001`. This is important so that Rollover can increment this number when\n-naming the new index created from rolling over.\n-\n-Our index creation request leverages its template to apply our settings,\n-but we must also configure our rollover alias: \"datastream\". To do this,\n-we take advantage of <<aliases-write-index,write indices>>. This is a way\n-to define an alias to be used for both reading and writing, with only one\n-index being the index that is being written to at a time. Rollover swaps\n-the write index to be the new index created from rollover, and sets the\n-alias to be read-only for the source index.\n+When the rollover conditions are met, the rollover action:\n+\n+* Creates a new index called `datastream-000002`. \n+This matches the `datastream-*` pattern, so the settings from `datastream_template` are applied to the new index.\n+* Designates the new index as the write index and makes the bootstrap index read-only.\n+\n+This process will repeat each time the rollover conditions are met. \n+You can search across all of the indices managed by the `datastream_policy` with the `datastream` alias. \n+Write operations are routed to the current write index. \n+\n+For more information about write indices and rollover, see the <<rollover-index-api-desc, Rollover API>>.\n \n [float]\n [[ilm-gs-check-progress]]\n === Checking progress\n \n-Now that we have an index managed by our policy, how do we tell what is going\n-on? Which phase are we in? Is something broken? This section will go over a\n-few APIs and their responses to help us inspect our indices with respect\n-to {ilm-init}.\n+To get status information for {ilm-init}-managed indices, you use the Explain API. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f219e29bdb7294feb1d99fd6a9fadbcab07e66"}, "originalPosition": 221}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 180, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}