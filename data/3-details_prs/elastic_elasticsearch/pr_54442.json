{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzYxNzAw", "number": 54442, "title": "EQL: endsWith function implementation", "bodyText": "Addresses #53854", "createdAt": "2020-03-30T16:27:46Z", "url": "https://github.com/elastic/elasticsearch/pull/54442", "merged": true, "mergeCommit": {"oid": "554a4c8ef04b67eed107d29b57185e9af25d9d4f"}, "closed": true, "closedAt": "2020-03-31T13:52:00Z", "author": {"login": "astefan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSxB0LgH2gAyMzk1NzYxNzAwOmQwNzUyZGE0MWMwZGU3YmJlMDMwNTgyNDBhNWY3OTRkOGVhMDI5ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTC0SfAH2gAyMzk1NzYxNzAwOjJiMGVhYmExY2E5YTE0YWEzNDM2NGJjYTliNWE2NWRiNmFiNjdlMTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0752da41c0de7bbe03058240a5f794d8ea029f6", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/d0752da41c0de7bbe03058240a5f794d8ea029f6", "committedDate": "2020-03-30T16:24:03Z", "message": "endsWith function implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a3b14761609aca2573ef3632733a33952871ea", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/93a3b14761609aca2573ef3632733a33952871ea", "committedDate": "2020-03-30T16:24:33Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53854_impl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDUxMzM3", "url": "https://github.com/elastic/elasticsearch/pull/54442#pullrequestreview-384051337", "createdAt": "2020-03-30T16:57:21Z", "commit": {"oid": "93a3b14761609aca2573ef3632733a33952871ea"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NzoyMVrOF9zQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NzoyMVrOF9zQEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzE1NA==", "bodyText": "nit: the getters were used instead in the previous PR and EndsWithFunctionProcessor. maybe make it consistent.", "url": "https://github.com/elastic/elasticsearch/pull/54442#discussion_r400347154", "createdAt": "2020-03-30T16:57:21Z", "author": {"login": "aleksmaus"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/EndsWithFunctionPipe.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class EndsWithFunctionPipe extends Pipe {\n+\n+    private final Pipe source;\n+    private final Pipe pattern;\n+\n+    public EndsWithFunctionPipe(Source source, Expression expression, Pipe src, Pipe pattern) {\n+        super(source, expression, Arrays.asList(src, pattern));\n+        this.source = src;\n+        this.pattern = pattern;\n+    }\n+\n+    @Override\n+    public final Pipe replaceChildren(List<Pipe> newChildren) {\n+        if (newChildren.size() != 2) {\n+            throw new IllegalArgumentException(\"expected [2] children but received [\" + newChildren.size() + \"]\");\n+        }\n+        return replaceChildren(newChildren.get(0), newChildren.get(1));\n+    }\n+\n+    @Override\n+    public final Pipe resolveAttributes(AttributeResolver resolver) {\n+        Pipe newSource = source.resolveAttributes(resolver);\n+        Pipe newPattern = pattern.resolveAttributes(resolver);\n+        if (newSource == source && newPattern == pattern) {\n+            return this;\n+        }\n+        return replaceChildren(newSource, newPattern);\n+    }\n+\n+    @Override\n+    public boolean supportedByAggsOnlyQuery() {\n+        return source.supportedByAggsOnlyQuery() && pattern.supportedByAggsOnlyQuery();\n+    }\n+\n+    @Override\n+    public boolean resolved() {\n+        return source.resolved() && pattern.resolved();\n+    }\n+\n+    protected Pipe replaceChildren(Pipe newSource, Pipe newPattern) {\n+        return new EndsWithFunctionPipe(source(), expression(), newSource, newPattern);\n+    }\n+\n+    @Override\n+    public final void collectFields(QlSourceBuilder sourceBuilder) {\n+        source.collectFields(sourceBuilder);\n+        pattern.collectFields(sourceBuilder);\n+    }\n+\n+    @Override\n+    protected NodeInfo<EndsWithFunctionPipe> info() {\n+        return NodeInfo.create(this, EndsWithFunctionPipe::new, expression(), source, pattern);\n+    }\n+\n+    @Override\n+    public EndsWithFunctionProcessor asProcessor() {\n+        return new EndsWithFunctionProcessor(source.asProcessor(), pattern.asProcessor());\n+    }\n+    \n+    public Pipe src() {\n+        return source;\n+    }\n+\n+    public Pipe pattern() {\n+        return pattern;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source, pattern);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        EndsWithFunctionPipe other = (EndsWithFunctionPipe) obj;\n+        return Objects.equals(source, other.source)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a3b14761609aca2573ef3632733a33952871ea"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjIwMTAw", "url": "https://github.com/elastic/elasticsearch/pull/54442#pullrequestreview-384220100", "createdAt": "2020-03-30T20:50:50Z", "commit": {"oid": "93a3b14761609aca2573ef3632733a33952871ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MDo1MFrOF97s4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MDo1MFrOF97s4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTYwMA==", "bodyText": "based off some of the conversations that have been happening, I think we're going to outsource this to something else eventually.\nI don't know if that  means we should do case-sensitivity in all PRs now, or come back to this later", "url": "https://github.com/elastic/elasticsearch/pull/54442#discussion_r400485600", "createdAt": "2020-03-30T20:50:50Z", "author": {"login": "rw-access"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/EndsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class EndsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"senw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public EndsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public EndsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);\n+        }\n+\n+        return source.toString().toLowerCase(Locale.ROOT).endsWith(pattern.toString().toLowerCase(Locale.ROOT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a3b14761609aca2573ef3632733a33952871ea"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjA3MTA1", "url": "https://github.com/elastic/elasticsearch/pull/54442#pullrequestreview-384607105", "createdAt": "2020-03-31T10:37:31Z", "commit": {"oid": "93a3b14761609aca2573ef3632733a33952871ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c5b0f4d9a3729e174c081d4a0427bb67cb769c", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/a3c5b0f4d9a3729e174c081d4a0427bb67cb769c", "committedDate": "2020-03-31T11:42:12Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53854_impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b019261324bc1460c79b6bccfc338c8f7e53b790", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/b019261324bc1460c79b6bccfc338c8f7e53b790", "committedDate": "2020-03-31T11:44:01Z", "message": "Added one more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34317d3dea3f299b22b5a54787003ecf48a3da3a", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/34317d3dea3f299b22b5a54787003ecf48a3da3a", "committedDate": "2020-03-31T12:55:33Z", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53854_impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0eaba1ca9a14aa34364bca9b5a65db6ab67e10", "author": {"user": {"login": "astefan", "name": "Andrei Stefan"}}, "url": "https://github.com/elastic/elasticsearch/commit/2b0eaba1ca9a14aa34364bca9b5a65db6ab67e10", "committedDate": "2020-03-31T13:07:34Z", "message": "Fix merging failure"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1348, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}