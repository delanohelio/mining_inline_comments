{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjQ2NTYz", "number": 55483, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowNToyMVrOD0O78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToxMToxMFrOD0ZFeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDk3MjY0OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/InstantiatingObjectParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowNToyMVrOGJEptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowNToyMVrOGJEptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2NjU4MA==", "bodyText": "I wonder if it'd make more sense to make a Builder for it rather than this. These are generally static state stuff like this is a bit scary. I see why it is just fine but it'd be a bit more \"obviously fine\" if it had a builder instead of \"finalized\".", "url": "https://github.com/elastic/elasticsearch/pull/55483#discussion_r412166580", "createdAt": "2020-04-21T13:05:21Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/InstantiatingObjectParser.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.common.ParseField;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Like {@link ConstructingObjectParser} but works with objects which have a constructor that matches declared fields.\n+ * <p>\n+ * Declaring a {@linkplain InstantiatingObjectParser} is intentionally quite similar to declaring an {@linkplain ConstructingObjectParser}\n+ * with two important differences.\n+ * <p>\n+ * The first differences being that constructor arguments are declared with the consumer returned by the static {@link #constructorArg()}\n+ * method and that {@linkplain InstantiatingObjectParser}'s constructor takes a class of the target object. The target object must have\n+ * exactly one constructor with the number and order of arguments matching the number of order of declared fields. If there are more\n+ * then 2 constructors with the same number of arguments, one of them needs to be marked with {@linkplain ParserConstructor} annotation.\n+ * </p>\n+ * The second differences being that at the end of field declarations the {@linkplain #finalizeFields()} method has to be called before\n+ * any parsing is possible.\n+ * <pre>{@code\n+ *   public static class Thing{\n+ *       public Thing(String animal, String vegetable, int mineral) {\n+ *           ....\n+ *       }\n+ *\n+ *       public void setFruit(int fruit) { ... }\n+ *\n+ *       public void setBug(int bug) { ... }\n+ *\n+ *   }\n+ *\n+ *   private static final InstantiatingObjectParser<Thing, SomeContext> PARSER = new InstantiatingObjectParser<>(\"thing\", Thing.class);\n+ *   static {\n+ *       PARSER.declareString(constructorArg(), new ParseField(\"animal\"));\n+ *       PARSER.declareString(constructorArg(), new ParseField(\"vegetable\"));\n+ *       PARSER.declareInt(optionalConstructorArg(), new ParseField(\"mineral\"));\n+ *       PARSER.declareInt(Thing::setFruit, new ParseField(\"fruit\"));\n+ *       PARSER.declareInt(Thing::setBug, new ParseField(\"bug\"));\n+ *       PARSER.finalizeFields()\n+ *   }\n+ * }</pre>\n+ */\n+public class InstantiatingObjectParser<Value, Context> extends AbstractConstructingObjectParser<Value, Context> {\n+    private final Class<Value> valueClass;\n+    private volatile Constructor<Value> constructor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fbeb37410dcbccb2e5e083fcb2bfe4930e2a0a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDk5NzE4OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/InstantiatingObjectParserTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxMDozMVrOGJE4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxMDozMVrOGJE4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MDMzOQ==", "bodyText": "It'd be kind of neat to have a test that uses the two-arg ctor or the one arg ctor. And maybe one that sets a member after calling the ctor just for paranoia's sake.", "url": "https://github.com/elastic/elasticsearch/pull/55483#discussion_r412170339", "createdAt": "2020-04-21T13:10:31Z", "author": {"login": "nik9000"}, "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/InstantiatingObjectParserTests.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class InstantiatingObjectParserTests extends ESTestCase {\n+\n+    public static class NoAnnotations {\n+        final int a;\n+        final String b;\n+        final long c;\n+\n+        public NoAnnotations() {\n+            this(1, \"2\", 3);\n+        }\n+\n+        private NoAnnotations(int a) {\n+            this(a, \"2\", 3);\n+        }\n+\n+        public NoAnnotations(int a, String b) {\n+            this(a, b, 3);\n+        }\n+\n+        public NoAnnotations(int a, long c) {\n+            this(a, \"2\", c);\n+        }\n+\n+        public NoAnnotations(int a, String b, long c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            NoAnnotations that = (NoAnnotations) o;\n+            return a == that.a &&\n+                c == that.c &&\n+                Objects.equals(b, that.b);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(a, b, c);\n+        }\n+    }\n+\n+    public void testNoAnnotation() throws IOException {\n+        InstantiatingObjectParser<NoAnnotations, Void> parser = new InstantiatingObjectParser<>(\"foo\", NoAnnotations.class);\n+        parser.declareInt(constructorArg(), new ParseField(\"a\"));\n+        parser.declareString(constructorArg(), new ParseField(\"b\"));\n+        parser.declareLong(constructorArg(), new ParseField(\"c\"));\n+        parser.finalizeFields();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fbeb37410dcbccb2e5e083fcb2bfe4930e2a0a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjYzMzk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/tasks/TaskResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToxMDo1NVrOGJUKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToxMDo1NVrOGJUKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMDcwMA==", "bodyText": "Maybe call it parser? I don't feel too bad doing things like that because when it is built it become PARSER.", "url": "https://github.com/elastic/elasticsearch/pull/55483#discussion_r412420700", "createdAt": "2020-04-21T19:10:55Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/tasks/TaskResult.java", "diffHunk": "@@ -174,21 +174,17 @@ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) t\n         return builder;\n     }\n \n-    public static final ConstructingObjectParser<TaskResult, Void> PARSER = new ConstructingObjectParser<>(\n-            \"stored_task_result\", a -> {\n-                int i = 0;\n-                boolean completed = (boolean) a[i++];\n-                TaskInfo task = (TaskInfo) a[i++];\n-                BytesReference error = (BytesReference) a[i++];\n-                BytesReference response = (BytesReference) a[i++];\n-                return new TaskResult(completed, task, error, response);\n-            });\n+    public static final InstantiatingObjectParser<TaskResult, Void> PARSER;\n+\n     static {\n-        PARSER.declareBoolean(constructorArg(), new ParseField(\"completed\"));\n-        PARSER.declareObject(constructorArg(), TaskInfo.PARSER, new ParseField(\"task\"));\n+        InstantiatingObjectParser.Builder<TaskResult, Void> builder = InstantiatingObjectParser.builder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19f6da14f10397369b4f3e1c7f071aa18b2a14d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjYzNTQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/tasks/TaskResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToxMToxMFrOGJULJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjowNjozMVrOGJafsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMDkwMg==", "bodyText": "Can this stay private?", "url": "https://github.com/elastic/elasticsearch/pull/55483#discussion_r412420902", "createdAt": "2020-04-21T19:11:10Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/tasks/TaskResult.java", "diffHunk": "@@ -79,7 +79,7 @@ public TaskResult(TaskInfo task, ToXContent response) throws IOException {\n         this(true, task, null, XContentHelper.toXContent(response, Requests.INDEX_CONTENT_TYPE, true));\n     }\n \n-    private TaskResult(boolean completed, TaskInfo task, @Nullable BytesReference error, @Nullable BytesReference result) {\n+    public TaskResult(boolean completed, TaskInfo task, @Nullable BytesReference error, @Nullable BytesReference result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19f6da14f10397369b4f3e1c7f071aa18b2a14d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTk1NA==", "bodyText": "I don't know how to do it without making security manager upset.", "url": "https://github.com/elastic/elasticsearch/pull/55483#discussion_r412479954", "createdAt": "2020-04-21T20:46:46Z", "author": {"login": "imotov"}, "path": "server/src/main/java/org/elasticsearch/tasks/TaskResult.java", "diffHunk": "@@ -79,7 +79,7 @@ public TaskResult(TaskInfo task, ToXContent response) throws IOException {\n         this(true, task, null, XContentHelper.toXContent(response, Requests.INDEX_CONTENT_TYPE, true));\n     }\n \n-    private TaskResult(boolean completed, TaskInfo task, @Nullable BytesReference error, @Nullable BytesReference result) {\n+    public TaskResult(boolean completed, TaskInfo task, @Nullable BytesReference error, @Nullable BytesReference result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMDkwMg=="}, "originalCommit": {"oid": "c19f6da14f10397369b4f3e1c7f071aa18b2a14d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNDQ2Ng==", "bodyText": "Oh! Because you can't making an explicit reference to the ctor, you are digging the ctor from the public reflection information. Got it! Ignore this comment.", "url": "https://github.com/elastic/elasticsearch/pull/55483#discussion_r412524466", "createdAt": "2020-04-21T22:06:31Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/tasks/TaskResult.java", "diffHunk": "@@ -79,7 +79,7 @@ public TaskResult(TaskInfo task, ToXContent response) throws IOException {\n         this(true, task, null, XContentHelper.toXContent(response, Requests.INDEX_CONTENT_TYPE, true));\n     }\n \n-    private TaskResult(boolean completed, TaskInfo task, @Nullable BytesReference error, @Nullable BytesReference result) {\n+    public TaskResult(boolean completed, TaskInfo task, @Nullable BytesReference error, @Nullable BytesReference result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyMDkwMg=="}, "originalCommit": {"oid": "c19f6da14f10397369b4f3e1c7f071aa18b2a14d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2744, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}