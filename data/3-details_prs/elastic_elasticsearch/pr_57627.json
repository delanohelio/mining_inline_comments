{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDU4NTI0", "number": 57627, "title": "Remove deprecated wrapper from scripted_metric", "bodyText": "This removes the deprecated asMultiBucketAggregator wrapper from\nscripted_metric. Unlike most other such removals, this isn't likely to\nsave much memory. But it does make the internals of the aggregator\nslightly less twisted.\nRelates to #56487", "createdAt": "2020-06-03T21:11:15Z", "url": "https://github.com/elastic/elasticsearch/pull/57627", "merged": true, "mergeCommit": {"oid": "2b82551c9369e308b728c4710d34e3fa6c4f3212"}, "closed": true, "closedAt": "2020-06-05T18:49:51Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnv7yLAH2gAyNDI3NDU4NTI0OjUxOGFjMGM2NmNjZmM2OWI0YzhhNDk3M2IzNTk0MmJhMDU1ZTgzMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoFrtLgFqTQyNDg3MjA1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "518ac0c66ccfc69b4c8a4973b35942ba055e8316", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/518ac0c66ccfc69b4c8a4973b35942ba055e8316", "committedDate": "2020-06-03T20:59:58Z", "message": "Remove deprecated wrapped from scripted_metric\n\nThis removes the deprecated `asMultiBucketAggregator` wrapper from\n`scripted_metric`. Unlike most other such removals, this isn't likely to\nsave much memory. But it does make the internals of the aggregator\nslightly less twisted.\n\nRelates to #56487"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22828cc7f0f3de81766bd749adda1cf236a6883d", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/22828cc7f0f3de81766bd749adda1cf236a6883d", "committedDate": "2020-06-03T21:26:14Z", "message": "Merge branch 'master' into scripted_metric_mem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODcyMDUz", "url": "https://github.com/elastic/elasticsearch/pull/57627#pullrequestreview-424872053", "createdAt": "2020-06-04T22:14:09Z", "commit": {"oid": "22828cc7f0f3de81766bd749adda1cf236a6883d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxNDowOVrOGfZ0Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxNDoyNVrOGfZ0hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTk3OA==", "bodyText": "haha", "url": "https://github.com/elastic/elasticsearch/pull/57627#discussion_r435581978", "createdAt": "2020-06-04T22:14:09Z", "author": {"login": "talevy"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregator.java", "diffHunk": "@@ -23,38 +23,66 @@\n import org.apache.lucene.search.Scorable;\n import org.apache.lucene.search.ScoreMode;\n import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.lease.Releasables;\n import org.elasticsearch.common.util.CollectionUtils;\n+import org.elasticsearch.common.util.ObjectArray;\n import org.elasticsearch.script.Script;\n import org.elasticsearch.script.ScriptedMetricAggContexts;\n+import org.elasticsearch.script.ScriptedMetricAggContexts.MapScript;\n import org.elasticsearch.search.aggregations.Aggregator;\n import org.elasticsearch.search.aggregations.InternalAggregation;\n import org.elasticsearch.search.aggregations.LeafBucketCollector;\n import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.lookup.SearchLookup;\n \n import java.io.IOException;\n+import java.util.HashMap;\n import java.util.Map;\n \n class ScriptedMetricAggregator extends MetricsAggregator {\n+    /**\n+     * Estimated cost to maintain a bucket. Since this aggregator uses\n+     * untracked java collections for its state it is going to both be\n+     * much \"heavier\" than a normal metric aggregator and not going to be\n+     * tracked by the circuit breakers properly. This is sad. So we pick a big\n+     * number and estimate that each bucket costs that. It could be wildly\n+     * inaccurate. We're sort of hoping that the real memory breaker saves\n+     * us here. Or that folks just don't use the aggregation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22828cc7f0f3de81766bd749adda1cf236a6883d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MjA4NQ==", "bodyText": "what made you choose this number beyond just \"make it large\"?", "url": "https://github.com/elastic/elasticsearch/pull/57627#discussion_r435582085", "createdAt": "2020-06-04T22:14:25Z", "author": {"login": "talevy"}, "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregator.java", "diffHunk": "@@ -23,38 +23,66 @@\n import org.apache.lucene.search.Scorable;\n import org.apache.lucene.search.ScoreMode;\n import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.lease.Releasables;\n import org.elasticsearch.common.util.CollectionUtils;\n+import org.elasticsearch.common.util.ObjectArray;\n import org.elasticsearch.script.Script;\n import org.elasticsearch.script.ScriptedMetricAggContexts;\n+import org.elasticsearch.script.ScriptedMetricAggContexts.MapScript;\n import org.elasticsearch.search.aggregations.Aggregator;\n import org.elasticsearch.search.aggregations.InternalAggregation;\n import org.elasticsearch.search.aggregations.LeafBucketCollector;\n import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n import org.elasticsearch.search.internal.SearchContext;\n+import org.elasticsearch.search.lookup.SearchLookup;\n \n import java.io.IOException;\n+import java.util.HashMap;\n import java.util.Map;\n \n class ScriptedMetricAggregator extends MetricsAggregator {\n+    /**\n+     * Estimated cost to maintain a bucket. Since this aggregator uses\n+     * untracked java collections for its state it is going to both be\n+     * much \"heavier\" than a normal metric aggregator and not going to be\n+     * tracked by the circuit breakers properly. This is sad. So we pick a big\n+     * number and estimate that each bucket costs that. It could be wildly\n+     * inaccurate. We're sort of hoping that the real memory breaker saves\n+     * us here. Or that folks just don't use the aggregation.\n+     */\n+    private static final long BUCKET_COST_ESTIMATE = 1024 * 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22828cc7f0f3de81766bd749adda1cf236a6883d"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3868, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}