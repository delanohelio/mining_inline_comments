{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Njg5NTYz", "number": 59278, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDo0NlrOEOskGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0Mjo1M1rOERoEig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQ1NjU2OnYy", "diffSide": "RIGHT", "path": "docs/reference/modules/transport.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDo0NlrOGx_Rww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDo0NlrOGx_Rww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MDE0Nw==", "bodyText": "Suggest describing the meaning of -1 here rather than in the sentence about the default:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               starting to send TCP keepalive probes.\n          \n          \n            \n               starting to send TCP keepalive probes. A value of `-1` means not to set this option at the socket level and to use the system default instead.\n          \n      \n    \n    \n  \n\n(also for the other settings)", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r455070147", "createdAt": "2020-07-15T13:54:46Z", "author": {"login": "DaveCTurner"}, "path": "docs/reference/modules/transport.asciidoc", "diffHunk": "@@ -88,19 +88,22 @@ example above:\n    determines the time in seconds that a connection must be idle before\n    starting to send TCP keepalive probes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c860643e2958aa9ed00bb2ce8752b576af4afd"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQ1Nzg0OnYy", "diffSide": "RIGHT", "path": "docs/reference/modules/transport.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NTowNFrOGx_Sog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NTowNFrOGx_Sog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MDM3MA==", "bodyText": "Can delete the rest of this sentence:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               Defaults to 60 on applicable configurations, and -1 otherwise, which does\n          \n          \n            \n               Defaults to `60` on applicable configurations, and `-1` otherwise.\n          \n      \n    \n    \n  \n\n(also subsequent lines)", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r455070370", "createdAt": "2020-07-15T13:55:04Z", "author": {"login": "DaveCTurner"}, "path": "docs/reference/modules/transport.asciidoc", "diffHunk": "@@ -88,19 +88,22 @@ example above:\n    determines the time in seconds that a connection must be idle before\n    starting to send TCP keepalive probes.\n    Only applicable on Linux and Mac, and requires JDK 11 or newer.\n-   Defaults to -1, which does not set this option at the socket level, but\n-   uses default system configuration instead.\n+   Defaults to 60 on applicable configurations, and -1 otherwise, which does", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c860643e2958aa9ed00bb2ce8752b576af4afd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQ4MzcyOnYy", "diffSide": "RIGHT", "path": "docs/reference/modules/transport.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowMDozOFrOGx_jMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowMDozOFrOGx_jMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3NDYxMA==", "bodyText": "I would have chosen 60 for the default here I think. The purpose of these keepalives is more to tell any intermediate devices that the connection remains alive rather than to test the health of the connection ourselves, and I don't think that needs a packet every 10s. IMO #59222 is a better way to pick up on failed connections much more quickly in cases where it matters.\nThat said, anything less than the ridiculous default of 7200 is a major improvement anyway.", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r455074610", "createdAt": "2020-07-15T14:00:38Z", "author": {"login": "DaveCTurner"}, "path": "docs/reference/modules/transport.asciidoc", "diffHunk": "@@ -88,19 +88,22 @@ example above:\n    determines the time in seconds that a connection must be idle before\n    starting to send TCP keepalive probes.\n    Only applicable on Linux and Mac, and requires JDK 11 or newer.\n-   Defaults to -1, which does not set this option at the socket level, but\n-   uses default system configuration instead.\n+   Defaults to 60 on applicable configurations, and -1 otherwise, which does\n+   not set this option at the socket level, but uses the default system\n+   configuration instead.\n * `tcp.keep_interval`: Configures the `TCP_KEEPINTVL` option for this socket,\n    which determines the time in seconds between sending TCP keepalive probes.\n    Only applicable on Linux and Mac, and requires JDK 11 or newer.\n-   Defaults to -1, which does not set this option at the socket level, but\n-   uses default system configuration instead.\n+   Defaults to 10 on applicable configurations, and -1 otherwise, which does", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c860643e2958aa9ed00bb2ce8752b576af4afd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ0MTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/network/NetworkService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNDoyM1rOG2CIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo1NTo1MFrOG3bs2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMTIxOQ==", "bodyText": "This bit needs a breaking change tag (and docs in the backport)", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459311219", "createdAt": "2020-07-23T09:04:23Z", "author": {"login": "DaveCTurner"}, "path": "server/src/main/java/org/elasticsearch/common/network/NetworkService.java", "diffHunk": "@@ -51,9 +51,9 @@\n     public static final Setting<Boolean> TCP_KEEP_ALIVE =\n         Setting.boolSetting(\"network.tcp.keep_alive\", true, Property.NodeScope);\n     public static final Setting<Integer> TCP_KEEP_IDLE =\n-        Setting.intSetting(\"network.tcp.keep_idle\", -1, -1, Property.NodeScope);\n+        Setting.intSetting(\"network.tcp.keep_idle\", -1, -1, 300, Property.NodeScope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3ODcxMw==", "bodyText": "ok, done so", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r460778713", "createdAt": "2020-07-27T09:55:50Z", "author": {"login": "ywelsch"}, "path": "server/src/main/java/org/elasticsearch/common/network/NetworkService.java", "diffHunk": "@@ -51,9 +51,9 @@\n     public static final Setting<Boolean> TCP_KEEP_ALIVE =\n         Setting.boolSetting(\"network.tcp.keep_alive\", true, Property.NodeScope);\n     public static final Setting<Integer> TCP_KEEP_IDLE =\n-        Setting.intSetting(\"network.tcp.keep_idle\", -1, -1, Property.NodeScope);\n+        Setting.intSetting(\"network.tcp.keep_idle\", -1, -1, 300, Property.NodeScope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMTIxOQ=="}, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ0ODYwOnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNjoyMVrOG2CMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNjoyMVrOG2CMmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjI4Mw==", "bodyText": "ClosedChannelException extends IOException so this is enough:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assert e instanceof IOException || e instanceof ClosedChannelException :\n          \n          \n            \n                        assert e instanceof IOException :", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459312283", "createdAt": "2020-07-23T09:06:21Z", "author": {"login": "DaveCTurner"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n+        assert socketChannel != null;\n+        try {\n+            if (socketChannel.supportedOptions().contains(StandardSocketOptions.SO_KEEPALIVE)) {\n+                final Boolean keepalive = socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE);\n+                if (keepalive != null && keepalive.booleanValue()) {\n+                    for (SocketOption<Integer> option : Arrays.asList(\n+                        NetUtils.getTcpKeepIdleSocketOptionOrNull(),\n+                        NetUtils.getTcpKeepIntervalSocketOptionOrNull())) {\n+                        setMinValueForSocketOption(socketChannel, option, 300);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            assert e instanceof IOException || e instanceof ClosedChannelException :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ1MTQ0OnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNzoxNlrOG2COYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNzoxNlrOG2COYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjczNw==", "bodyText": "Maybe just rethrow e, stack trace and all?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"unexpected exception when setting channel option: \" + e.getClass() + \": \" + e.getMessage();\n          \n          \n            \n                            e;", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459312737", "createdAt": "2020-07-23T09:07:16Z", "author": {"login": "DaveCTurner"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n+        assert socketChannel != null;\n+        try {\n+            if (socketChannel.supportedOptions().contains(StandardSocketOptions.SO_KEEPALIVE)) {\n+                final Boolean keepalive = socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE);\n+                if (keepalive != null && keepalive.booleanValue()) {\n+                    for (SocketOption<Integer> option : Arrays.asList(\n+                        NetUtils.getTcpKeepIdleSocketOptionOrNull(),\n+                        NetUtils.getTcpKeepIntervalSocketOptionOrNull())) {\n+                        setMinValueForSocketOption(socketChannel, option, 300);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            assert e instanceof IOException || e instanceof ClosedChannelException :\n+                \"unexpected exception when setting channel option: \" + e.getClass() + \": \" + e.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ1MjQ0OnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNzozNVrOG2CO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTozNzo1NlrOG2cdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjg4OQ==", "bodyText": "Similarly,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            assert e instanceof IOException || e instanceof ClosedChannelException :\n          \n          \n            \n                            assert e instanceof IOException : e;", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459312889", "createdAt": "2020-07-23T09:07:35Z", "author": {"login": "DaveCTurner"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n+        assert socketChannel != null;\n+        try {\n+            if (socketChannel.supportedOptions().contains(StandardSocketOptions.SO_KEEPALIVE)) {\n+                final Boolean keepalive = socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE);\n+                if (keepalive != null && keepalive.booleanValue()) {\n+                    for (SocketOption<Integer> option : Arrays.asList(\n+                        NetUtils.getTcpKeepIdleSocketOptionOrNull(),\n+                        NetUtils.getTcpKeepIntervalSocketOptionOrNull())) {\n+                        setMinValueForSocketOption(socketChannel, option, 300);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            assert e instanceof IOException || e instanceof ClosedChannelException :\n+                \"unexpected exception when setting channel option: \" + e.getClass() + \": \" + e.getMessage();\n+        }\n+    }\n+\n+    private static void setMinValueForSocketOption(NetworkChannel socketChannel, SocketOption<Integer> option, int minValue) {\n+        if (option != null && socketChannel.supportedOptions().contains(option)) {\n+            try {\n+                final Integer currentIdleVal = socketChannel.getOption(option);\n+                if (currentIdleVal != null && currentIdleVal.intValue() > minValue) {\n+                    socketChannel.setOption(option, minValue);\n+                }\n+            } catch (Exception e) {\n+                // Getting an exception here should be ok when concurrently closing the channel\n+                // An UnsupportedOperationException or IllegalArgumentException, however, should not happen\n+                assert e instanceof IOException || e instanceof ClosedChannelException :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0MjU2NQ==", "bodyText": "++", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459742565", "createdAt": "2020-07-23T21:37:56Z", "author": {"login": "tbrooks8"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n+        assert socketChannel != null;\n+        try {\n+            if (socketChannel.supportedOptions().contains(StandardSocketOptions.SO_KEEPALIVE)) {\n+                final Boolean keepalive = socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE);\n+                if (keepalive != null && keepalive.booleanValue()) {\n+                    for (SocketOption<Integer> option : Arrays.asList(\n+                        NetUtils.getTcpKeepIdleSocketOptionOrNull(),\n+                        NetUtils.getTcpKeepIntervalSocketOptionOrNull())) {\n+                        setMinValueForSocketOption(socketChannel, option, 300);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            assert e instanceof IOException || e instanceof ClosedChannelException :\n+                \"unexpected exception when setting channel option: \" + e.getClass() + \": \" + e.getMessage();\n+        }\n+    }\n+\n+    private static void setMinValueForSocketOption(NetworkChannel socketChannel, SocketOption<Integer> option, int minValue) {\n+        if (option != null && socketChannel.supportedOptions().contains(option)) {\n+            try {\n+                final Integer currentIdleVal = socketChannel.getOption(option);\n+                if (currentIdleVal != null && currentIdleVal.intValue() > minValue) {\n+                    socketChannel.setOption(option, minValue);\n+                }\n+            } catch (Exception e) {\n+                // Getting an exception here should be ok when concurrently closing the channel\n+                // An UnsupportedOperationException or IllegalArgumentException, however, should not happen\n+                assert e instanceof IOException || e instanceof ClosedChannelException :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjg4OQ=="}, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ2ODQwOnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMjowMlrOG2CYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMjowMlrOG2CYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTMxMA==", "bodyText": "Naming nit, suggest this instead:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n          \n          \n            \n                public static void tryEnsureReasonableKeepAliveConfig(NetworkChannel socketChannel) {", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459315310", "createdAt": "2020-07-23T09:12:02Z", "author": {"login": "DaveCTurner"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE2NzA2OnYy", "diffSide": "RIGHT", "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTozOToyNFrOG2cfyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo1MToyMlrOG3bi5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0MzE3OA==", "bodyText": "I understand that you are being safe, but is there a known scenario where the socket option is supported, but the current value is null?", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459743178", "createdAt": "2020-07-23T21:39:24Z", "author": {"login": "tbrooks8"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n+        assert socketChannel != null;\n+        try {\n+            if (socketChannel.supportedOptions().contains(StandardSocketOptions.SO_KEEPALIVE)) {\n+                final Boolean keepalive = socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE);\n+                if (keepalive != null && keepalive.booleanValue()) {\n+                    for (SocketOption<Integer> option : Arrays.asList(\n+                        NetUtils.getTcpKeepIdleSocketOptionOrNull(),\n+                        NetUtils.getTcpKeepIntervalSocketOptionOrNull())) {\n+                        setMinValueForSocketOption(socketChannel, option, 300);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            assert e instanceof IOException || e instanceof ClosedChannelException :\n+                \"unexpected exception when setting channel option: \" + e.getClass() + \": \" + e.getMessage();\n+        }\n+    }\n+\n+    private static void setMinValueForSocketOption(NetworkChannel socketChannel, SocketOption<Integer> option, int minValue) {\n+        if (option != null && socketChannel.supportedOptions().contains(option)) {\n+            try {\n+                final Integer currentIdleVal = socketChannel.getOption(option);\n+                if (currentIdleVal != null && currentIdleVal.intValue() > minValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NjE2NA==", "bodyText": "I was concerned by the javadocs on the getOption method which says:\n@return  The value of the socket option. A value of {@code null} may be a valid value for some socket options.\n\nRereading the Javadocs for the various socket options, it should be clear from their javadocs that the ones used are not returning null. I've amended the logic accordingly (but added an assertion instead)", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r460776164", "createdAt": "2020-07-27T09:51:22Z", "author": {"login": "ywelsch"}, "path": "libs/core/src/main/java/org/elasticsearch/core/internal/net/NetUtils.java", "diffHunk": "@@ -59,4 +64,45 @@\n             return null;\n         }\n     }\n+\n+    /**\n+     * If SO_KEEPALIVE is enabled (default), this method ensures sane default values for the extended socket options\n+     * TCP_KEEPIDLE and TCP_KEEPINTERVAL. The default value for TCP_KEEPIDLE is system dependent, but is typically 2 hours.\n+     * Such a high value can result in firewalls eagerly closing these connections. To tell any intermediate devices that\n+     * the connection remains alive, we explicitly set these options to 5 minutes if the defaults are higher than that.\n+     */\n+    public static void setSaneDefaultKeepAliveOptions(NetworkChannel socketChannel) {\n+        assert socketChannel != null;\n+        try {\n+            if (socketChannel.supportedOptions().contains(StandardSocketOptions.SO_KEEPALIVE)) {\n+                final Boolean keepalive = socketChannel.getOption(StandardSocketOptions.SO_KEEPALIVE);\n+                if (keepalive != null && keepalive.booleanValue()) {\n+                    for (SocketOption<Integer> option : Arrays.asList(\n+                        NetUtils.getTcpKeepIdleSocketOptionOrNull(),\n+                        NetUtils.getTcpKeepIntervalSocketOptionOrNull())) {\n+                        setMinValueForSocketOption(socketChannel, option, 300);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            assert e instanceof IOException || e instanceof ClosedChannelException :\n+                \"unexpected exception when setting channel option: \" + e.getClass() + \": \" + e.getMessage();\n+        }\n+    }\n+\n+    private static void setMinValueForSocketOption(NetworkChannel socketChannel, SocketOption<Integer> option, int minValue) {\n+        if (option != null && socketChannel.supportedOptions().contains(option)) {\n+            try {\n+                final Integer currentIdleVal = socketChannel.getOption(option);\n+                if (currentIdleVal != null && currentIdleVal.intValue() > minValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0MzE3OA=="}, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE3NzcwOnYy", "diffSide": "RIGHT", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0Mjo1M1rOG2cmCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo1NTozMVrOG3bsNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDc3Nw==", "bodyText": "Is the if block so that this does not break in production is assertions are disabled and for some reason there is a scenario where the channel is a different type? Feels like we should just be able to cast after the assertion since this is all Elasticsearch code.", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r459744777", "createdAt": "2020-07-23T21:42:53Z", "author": {"login": "tbrooks8"}, "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java", "diffHunk": "@@ -311,6 +307,11 @@ protected void stopInternal() {\n \n         @Override\n         protected void initChannel(Channel ch) throws Exception {\n+            addClosedExceptionLogger(ch);\n+            assert ch instanceof Netty4NioSocketChannel;\n+            if (ch instanceof Netty4NioSocketChannel) {\n+                NetUtils.setSaneDefaultKeepAliveOptions(((Netty4NioSocketChannel) ch).javaChannel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3ODU1MQ==", "bodyText": "You're right, I was overly defensive here.", "url": "https://github.com/elastic/elasticsearch/pull/59278#discussion_r460778551", "createdAt": "2020-07-27T09:55:31Z", "author": {"login": "ywelsch"}, "path": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java", "diffHunk": "@@ -311,6 +307,11 @@ protected void stopInternal() {\n \n         @Override\n         protected void initChannel(Channel ch) throws Exception {\n+            addClosedExceptionLogger(ch);\n+            assert ch instanceof Netty4NioSocketChannel;\n+            if (ch instanceof Netty4NioSocketChannel) {\n+                NetUtils.setSaneDefaultKeepAliveOptions(((Netty4NioSocketChannel) ch).javaChannel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDc3Nw=="}, "originalCommit": {"oid": "51b46d9af799dae949e491cc4ec4be1446bbeaad"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1925, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}