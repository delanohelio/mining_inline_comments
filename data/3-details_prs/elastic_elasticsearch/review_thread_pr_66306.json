{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5ODI0ODA2", "number": 66306, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0Mjo0NFrOFFmByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyNDoyMVrOFFrqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDEwMjQ5OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0Mjo0NFrOIGLfMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0Mjo0NFrOIGLfMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MDU3Nw==", "bodyText": "I tried to streamline this a bit. Original copy is okay if you want to leave as-is.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n          \n          \n            \n            participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n          \n          \n            \n            For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n          \n          \n            \n            collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n          \n          \n            \n            when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n          \n          \n            \n            When you run certain metric aggregations on an `aggregate_metric_double` field,\n          \n          \n            \n            the aggregation uses the related sub-field's values. For example, a\n          \n          \n            \n            <<search-aggregations-metrics-min-aggregation, `min`>> aggregation on an\n          \n          \n            \n            `aggregate_metric_double` field returns the minimum value of all `min`\n          \n          \n            \n            sub-fields.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543350577", "createdAt": "2020-12-15T13:42:44Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDI1NTM1OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMToyNVrOIGM4sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMToyNVrOIGM4sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3MzQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To give an example of how the `default_metric` is used in queries, let's see\n          \n          \n            \n            a `term` query on the `agg_metric` field:\n          \n          \n            \n            Queries on a `aggregate_metric_double` field use the `default_metric` value.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543373491", "createdAt": "2020-12-15T14:11:25Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.\n+\n+The following <<docs-index_,index>> API requests store pre-aggregated data:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index/_doc/1\n+{\n+    \"agg_metric\": {\n+        \"min\": -302.50,\n+        \"max\": 702.30,\n+        \"sum\": 200.0,\n+        \"value_count\": 25\n+    }\n+}\n+\n+PUT stats-index/_doc/2\n+{\n+    \"agg_metric\": {\n+        \"min\": -93.00,\n+        \"max\": 1702.30,\n+        \"sum\": 300.00,\n+        \"value_count\": 25\n+    }\n+}\n+--------------------------------------------------\n+\n+The `agg_metric` field allows us to run (`min`, `max`, `sum`, `value_count`, `avg`) aggregations\n+as in the following example:\n+\n+[source,console]\n+--------------------------------------------------\n+POST stats-index/_search?size=0\n+{\n+    \"aggs\" : {\n+        \"metric_min\" : { \"min\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_max\" : { \"max\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_value_count\" : { \"value_count\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_sum\" : { \"sum\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_avg\" : { \"avg\" : { \"field\" : \"agg_metric\" } }\n+    }\n+}\n+--------------------------------------------------\n+\n+The above aggregations will compute results based on their associated metrics\n+and will return the following output:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+...\n+  \"aggregations\" : {\n+    \"metric_min\" : {\n+      \"value\" : -302.5\n+    },\n+    \"metric_max\" : {\n+      \"value\" : 1702.3\n+    },\n+    \"metric_value_count\" : {\n+      \"value\" : 50\n+    },\n+    \"metric_sum\" : {\n+      \"value\" : 500.0\n+    },\n+    \"metric_avg\" : {\n+      \"value\" : 10.0\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+\n+To give an example of how the `default_metric` is used in queries, let's see\n+a `term` query on the `agg_metric` field:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDI1NzkwOnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMTo0NVrOIGM6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMTo0NVrOIGM6Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3Mzg5NA==", "bodyText": "Not sure if this boost value is needed.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"value\": 702.30,\n          \n          \n            \n                    \"boost\": 1.0\n          \n          \n            \n                    \"value\": 702.30", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543373894", "createdAt": "2020-12-15T14:11:45Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.\n+\n+The following <<docs-index_,index>> API requests store pre-aggregated data:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index/_doc/1\n+{\n+    \"agg_metric\": {\n+        \"min\": -302.50,\n+        \"max\": 702.30,\n+        \"sum\": 200.0,\n+        \"value_count\": 25\n+    }\n+}\n+\n+PUT stats-index/_doc/2\n+{\n+    \"agg_metric\": {\n+        \"min\": -93.00,\n+        \"max\": 1702.30,\n+        \"sum\": 300.00,\n+        \"value_count\": 25\n+    }\n+}\n+--------------------------------------------------\n+\n+The `agg_metric` field allows us to run (`min`, `max`, `sum`, `value_count`, `avg`) aggregations\n+as in the following example:\n+\n+[source,console]\n+--------------------------------------------------\n+POST stats-index/_search?size=0\n+{\n+    \"aggs\" : {\n+        \"metric_min\" : { \"min\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_max\" : { \"max\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_value_count\" : { \"value_count\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_sum\" : { \"sum\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_avg\" : { \"avg\" : { \"field\" : \"agg_metric\" } }\n+    }\n+}\n+--------------------------------------------------\n+\n+The above aggregations will compute results based on their associated metrics\n+and will return the following output:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+...\n+  \"aggregations\" : {\n+    \"metric_min\" : {\n+      \"value\" : -302.5\n+    },\n+    \"metric_max\" : {\n+      \"value\" : 1702.3\n+    },\n+    \"metric_value_count\" : {\n+      \"value\" : 50\n+    },\n+    \"metric_sum\" : {\n+      \"value\" : 500.0\n+    },\n+    \"metric_avg\" : {\n+      \"value\" : 10.0\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+\n+To give an example of how the `default_metric` is used in queries, let's see\n+a `term` query on the `agg_metric` field:\n+\n+[source,console]\n+--------------------------------------------------\n+GET stats-index/_search\n+{\n+  \"query\": {\n+    \"term\": {\n+      \"agg_metric\": {\n+        \"value\": 702.30,\n+        \"boost\": 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDI3MzYyOnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMzozOVrOIGNDsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMzozOVrOIGNDsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3NjMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Running a `term` query for a specific value, will return all documents that have this value\n          \n          \n            \n            stored as the `default_metric` sub-field. From the result, we can see that the `aggregate_metric_double`\n          \n          \n            \n            field delegates the `term` query to its `max` sub-field.\n          \n          \n            \n            The search returns the following hit. The value of the `default_metric` field,\n          \n          \n            \n            `max`, matches the query value.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543376306", "createdAt": "2020-12-15T14:13:39Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.\n+\n+The following <<docs-index_,index>> API requests store pre-aggregated data:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index/_doc/1\n+{\n+    \"agg_metric\": {\n+        \"min\": -302.50,\n+        \"max\": 702.30,\n+        \"sum\": 200.0,\n+        \"value_count\": 25\n+    }\n+}\n+\n+PUT stats-index/_doc/2\n+{\n+    \"agg_metric\": {\n+        \"min\": -93.00,\n+        \"max\": 1702.30,\n+        \"sum\": 300.00,\n+        \"value_count\": 25\n+    }\n+}\n+--------------------------------------------------\n+\n+The `agg_metric` field allows us to run (`min`, `max`, `sum`, `value_count`, `avg`) aggregations\n+as in the following example:\n+\n+[source,console]\n+--------------------------------------------------\n+POST stats-index/_search?size=0\n+{\n+    \"aggs\" : {\n+        \"metric_min\" : { \"min\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_max\" : { \"max\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_value_count\" : { \"value_count\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_sum\" : { \"sum\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_avg\" : { \"avg\" : { \"field\" : \"agg_metric\" } }\n+    }\n+}\n+--------------------------------------------------\n+\n+The above aggregations will compute results based on their associated metrics\n+and will return the following output:\n+\n+[source,console-result]\n+--------------------------------------------------\n+{\n+...\n+  \"aggregations\" : {\n+    \"metric_min\" : {\n+      \"value\" : -302.5\n+    },\n+    \"metric_max\" : {\n+      \"value\" : 1702.3\n+    },\n+    \"metric_value_count\" : {\n+      \"value\" : 50\n+    },\n+    \"metric_sum\" : {\n+      \"value\" : 500.0\n+    },\n+    \"metric_avg\" : {\n+      \"value\" : 10.0\n+    }\n+  }\n+}\n+--------------------------------------------------\n+// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n+\n+\n+To give an example of how the `default_metric` is used in queries, let's see\n+a `term` query on the `agg_metric` field:\n+\n+[source,console]\n+--------------------------------------------------\n+GET stats-index/_search\n+{\n+  \"query\": {\n+    \"term\": {\n+      \"agg_metric\": {\n+        \"value\": 702.30,\n+        \"boost\": 1.0\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+\n+Running a `term` query for a specific value, will return all documents that have this value\n+stored as the `default_metric` sub-field. From the result, we can see that the `aggregate_metric_double`\n+field delegates the `term` query to its `max` sub-field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDI5OTc3OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxNjo0M1rOIGNTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo1NjoyN1rOIGVplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4MDI2Ng==", "bodyText": "I'm not sure if these callouts are needed. Not a big deal either way tho.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543380266", "createdAt": "2020-12-15T14:16:43Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNzA3OQ==", "bodyText": "\u0399 wanted to make it extra detailed. Perhaps it is too detailed. Removing this.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543517079", "createdAt": "2020-12-15T16:56:27Z", "author": {"login": "csoulios"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4MDI2Ng=="}, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDMxMTAyOnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxNzo1MFrOIGNZYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxNzo1MFrOIGNZYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4MTg1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following <<docs-index_,index>> API requests store pre-aggregated data:\n          \n          \n            \n            The following <<docs-index_,index>> API request adds documents with\n          \n          \n            \n            pre-aggregated data in the `agg_metric` field.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543381857", "createdAt": "2020-12-15T14:17:50Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.\n+\n+The following <<docs-index_,index>> API requests store pre-aggregated data:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDMyNDA0OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxOToyOFrOIGNg8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxOToyOFrOIGNg8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4Mzc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `agg_metric` field allows us to run (`min`, `max`, `sum`, `value_count`, `avg`) aggregations\n          \n          \n            \n            as in the following example:\n          \n          \n            \n            You can run `min`, `max`, `sum`, `value_count`, and `avg` aggregations on a\n          \n          \n            \n            `agg_metric` field.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543383793", "createdAt": "2020-12-15T14:19:28Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.\n+\n+The following <<docs-index_,index>> API requests store pre-aggregated data:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index/_doc/1\n+{\n+    \"agg_metric\": {\n+        \"min\": -302.50,\n+        \"max\": 702.30,\n+        \"sum\": 200.0,\n+        \"value_count\": 25\n+    }\n+}\n+\n+PUT stats-index/_doc/2\n+{\n+    \"agg_metric\": {\n+        \"min\": -93.00,\n+        \"max\": 1702.30,\n+        \"sum\": 300.00,\n+        \"value_count\": 25\n+    }\n+}\n+--------------------------------------------------\n+\n+The `agg_metric` field allows us to run (`min`, `max`, `sum`, `value_count`, `avg`) aggregations\n+as in the following example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDM1MDc4OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoyMjozMVrOIGNwkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoyMjozMVrOIGNwkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4Nzc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The above aggregations will compute results based on their associated metrics\n          \n          \n            \n            and will return the following output:\n          \n          \n            \n            The aggregation results are based on related metric sub-field values.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543387795", "createdAt": "2020-12-15T14:22:31Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index\n+{\n+  \"mappings\": {\n+    \"properties\": {\n+      \"agg_metric\": {\n+        \"type\": \"aggregate_metric_double\",\n+        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"], <1>\n+        \"default_metric\": \"max\" <2>\n+      }\n+    }\n+  }\n+}\n+--------------------------------------------------\n+<1> The metrics supported by this index are `min`, `max`, `sum`, `value_count`.\n+<2> The `default_metric` is the `max` sub-field.\n+\n+The following <<docs-index_,index>> API requests store pre-aggregated data:\n+\n+[source,console]\n+--------------------------------------------------\n+PUT stats-index/_doc/1\n+{\n+    \"agg_metric\": {\n+        \"min\": -302.50,\n+        \"max\": 702.30,\n+        \"sum\": 200.0,\n+        \"value_count\": 25\n+    }\n+}\n+\n+PUT stats-index/_doc/2\n+{\n+    \"agg_metric\": {\n+        \"min\": -93.00,\n+        \"max\": 1702.30,\n+        \"sum\": 300.00,\n+        \"value_count\": 25\n+    }\n+}\n+--------------------------------------------------\n+\n+The `agg_metric` field allows us to run (`min`, `max`, `sum`, `value_count`, `avg`) aggregations\n+as in the following example:\n+\n+[source,console]\n+--------------------------------------------------\n+POST stats-index/_search?size=0\n+{\n+    \"aggs\" : {\n+        \"metric_min\" : { \"min\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_max\" : { \"max\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_value_count\" : { \"value_count\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_sum\" : { \"sum\" : { \"field\" : \"agg_metric\" } },\n+        \"metric_avg\" : { \"avg\" : { \"field\" : \"agg_metric\" } }\n+    }\n+}\n+--------------------------------------------------\n+\n+The above aggregations will compute results based on their associated metrics\n+and will return the following output:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDQ0MzM3OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozODoxOVrOIGOmZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozODoxOVrOIGOmZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwMTU3Mw==", "bodyText": "Tried to streamline this a bit to remove the duplicated metric list. There is also a typo with ore.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n          \n          \n            \n            accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n          \n          \n            \n            `min`, `max`, `sum` and `value_count`.\n          \n          \n            \n            Stores pre-aggregated numeric values for <<search-aggregations-metrics,metric\n          \n          \n            \n            aggregations>>. An `aggregate_metric_double` field is an object containing one\n          \n          \n            \n            or more of the following metric sub-fields: `min`, `max`, `sum`, and\n          \n          \n            \n            `value_count`.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543401573", "createdAt": "2020-12-15T14:38:19Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDQ5MTc5OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0Njo1OFrOIGPDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0Njo1OFrOIGPDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwODk4Mg==", "bodyText": "If you used the suggestion above, we already covered the doc value fact.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n          \n          \n            \n            and are primarily intended for use with the following aggregations:\n          \n          \n            \n            We designed `aggregate_metric_double` fields for use with the following aggregations:", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543408982", "createdAt": "2020-12-15T14:46:58Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDUzOTc4OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo1NToxNlrOIGPfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo1NToxNlrOIGPfsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxNjI0MA==", "bodyText": "Since we need to refer to the list above, I wouldn't add a new heading here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [[aggregate-metric-double-default]]\n          \n          \n            \n            ==== Default metric\n          \n          \n            \n            \n          \n          \n            \n            When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n          \n          \n            \n            it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n          \n          \n            \n            be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n          \n          \n            \n            of the following queries, it will delegate the operation to its `default_metric` sub-field:\n          \n          \n            \n            \n          \n          \n            \n            * <<query-dsl-exists-query,exists>> query.\n          \n          \n            \n            * <<query-dsl-range-query,range>> query.\n          \n          \n            \n            * <<query-dsl-term-query,term>> query.\n          \n          \n            \n            * <<query-dsl-terms-query,terms>> query.\n          \n          \n            \n            \n          \n          \n            \n            If you use an `aggregate_metric_double` field with other aggregations, the field\n          \n          \n            \n            uses the `default_metric` value, which behaves as a `double` field. The\n          \n          \n            \n            `default_metric` is also used in scripts and the following queries:\n          \n          \n            \n            \n          \n          \n            \n            * <<query-dsl-exists-query,`exists`>>\n          \n          \n            \n            * <<query-dsl-range-query,`range`>>\n          \n          \n            \n            * <<query-dsl-term-query,`term`>>\n          \n          \n            \n            * <<query-dsl-terms-query,`terms`>>", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543416240", "createdAt": "2020-12-15T14:55:16Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDYzMzY2OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToxMjoyMFrOIGQYCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToxMjoyMFrOIGQYCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMDY2Nw==", "bodyText": "I made the agg names literals to match the section below. I also re-wrapped the lines.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n          \n          \n            \n            * <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n          \n          \n            \n            * <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n          \n          \n            \n            * <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n          \n          \n            \n            sub-fields.\n          \n          \n            \n            * <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n          \n          \n            \n            the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n          \n          \n            \n            `value_count` metrics must be present.\n          \n          \n            \n            * A <<search-aggregations-metrics-min-aggregation,`min`>> aggregation returns the\n          \n          \n            \n            minimum value of all `min` sub-fields.\n          \n          \n            \n            \n          \n          \n            \n            * A <<search-aggregations-metrics-max-aggregation,`max`>> aggregation returns the\n          \n          \n            \n            maximum value of all `max` sub-fields.\n          \n          \n            \n            \n          \n          \n            \n            * A <<search-aggregations-metrics-sum-aggregation,`sum`>> aggregation returns the\n          \n          \n            \n            sum of the values of all `sum` sub-fields.\n          \n          \n            \n            \n          \n          \n            \n            *A  <<search-aggregations-metrics-valuecount-aggregation,`value_count`>>\n          \n          \n            \n            aggregation returns the sum of the values of all `value_count` sub-fields.\n          \n          \n            \n            \n          \n          \n            \n            * A <<search-aggregations-metrics-avg-aggregation,`avg`>> aggregation. There is no\n          \n          \n            \n            `avg` sub-field; the result of the `avg` aggregation is computed using the `sum`\n          \n          \n            \n            and `value_count` metrics. To run an `avg` aggregation, the field must contain\n          \n          \n            \n            both `sum` and `value_count` metric sub-field.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543430667", "createdAt": "2020-12-15T15:12:20Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDkwNDE3OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowMTowNFrOIGS5rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowMTowNFrOIGS5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3MjA0Nw==", "bodyText": "I'd include a quick example and reference for the parameters here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [IMPORTANT]\n          \n          \n            \n            ========\n          \n          \n            \n            * An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n          \n          \n            \n            Nested arrays are not supported.\n          \n          \n            \n            * The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n          \n          \n            \n            a positive long number.\n          \n          \n            \n            ========\n          \n          \n            \n            \n          \n          \n            \n            IMPORTANT: An `aggregate_metric_double` field stores a single numeric\n          \n          \n            \n            <<doc-values,doc value>> for each metric sub-field. Array values are not\n          \n          \n            \n            supported.  `min`, `max`, and `sum` values are `double` numbers. `value_count`\n          \n          \n            \n            is a positive `long` number. \n          \n          \n            \n            \n          \n          \n            \n            [source,console]\n          \n          \n            \n            ----\n          \n          \n            \n            PUT my-index\n          \n          \n            \n              \"mappings\": {\n          \n          \n            \n                \"properties\": {\n          \n          \n            \n                  \"my-agg-metric-field\": {\n          \n          \n            \n                    \"type\": \"aggregate_metric_double\",\n          \n          \n            \n                    \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\"],\n          \n          \n            \n                    \"default_metric\": \"max\"\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n            }\n          \n          \n            \n            ----\n          \n          \n            \n            \n          \n          \n            \n            [[aggregate-metric-double-params]]\n          \n          \n            \n            ==== Parameters for `aggregate_metric_double` fields\n          \n          \n            \n            \n          \n          \n            \n            `metrics`::\n          \n          \n            \n            (Required, array of strings)\n          \n          \n            \n            Array of metric sub-fields to store. Each value corresponds to a\n          \n          \n            \n            <<search-aggregations-metrics,metric aggregation>>. Valid values are\n          \n          \n            \n            <<search-aggregations-metrics-min-aggregation,`min`>>,\n          \n          \n            \n            <<search-aggregations-metrics-max-aggregation,`max`>>,\n          \n          \n            \n            <<search-aggregations-metrics-sum-aggregation,`sum`>>, and\n          \n          \n            \n            <<search-aggregations-metrics-valuecount-aggregation,`value_count`>>. You must\n          \n          \n            \n            specify at least one value.\n          \n          \n            \n            \n          \n          \n            \n            `default_metric`::\n          \n          \n            \n            (Required, string)\n          \n          \n            \n            Default metric sub-field to use for queries, scripts, and aggregations that\n          \n          \n            \n            don't use a sub-field. Must be a value from the `metrics` array.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543472047", "createdAt": "2020-12-15T16:01:04Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTAyNjQ0OnYy", "diffSide": "RIGHT", "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyNDoyMVrOIGUDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoyNDoyMVrOIGUDPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MDg3Ng==", "bodyText": "\"sets the max\" looks to be incomplete:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n          \n          \n            \n            to store aggregate metric data and sets the `max`:\n          \n          \n            \n            The following <<indices-create-index, create index>> API request creates an\n          \n          \n            \n            index with an `aggregate_metric_double` field named `agg_metric`. The request\n          \n          \n            \n            sets `max` as the field's `default_metric`.", "url": "https://github.com/elastic/elasticsearch/pull/66306#discussion_r543490876", "createdAt": "2020-12-15T16:24:21Z", "author": {"login": "jrodewig"}, "path": "docs/reference/mapping/types/aggregate-metric-double.asciidoc", "diffHunk": "@@ -0,0 +1,196 @@\n+[role=\"xpack\"]\n+[testenv=\"basic\"]\n+[[aggregate-metric-double]]\n+=== Aggregate metric field type\n+++++\n+<titleabbrev>Aggregate metric</titleabbrev>\n+++++\n+\n+The `aggregate_metric_double` field stores pre-aggregated numeric values (`min`, `max`, `sum` and `value_count`) that can be directly\n+accessed by metric aggregations. An `aggregate_metric_double` field is defined as an object with one ore more of the following sub-fields:\n+`min`, `max`, `sum` and `value_count`.\n+\n+The power of the `aggregate_metric_double` field comes from the fact that when an `aggregate_metric_double` field\n+participates in a metric aggregation, it returns the value of the associated sub-field for that aggregation.\n+For example, an `aggregate_metric_double` field that stores `min` and `max` metrics will return the `min` metric when\n+collected by a <<search-aggregations-metrics-min-aggregation,min>> aggregation and the `max` metric\n+when participating in a <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation.\n+\n+[IMPORTANT]\n+========\n+* An `aggregate_metric_double` field can only store a single value for each `metric` sub-field per document.\n+Nested arrays are not supported.\n+* The values of the `min`, `max`, `sum` can be any `double` numbers. The values of `value_count` can only be\n+a positive long number.\n+========\n+\n+[[aggregate-metric-double-uses]]\n+==== Uses\n+\n+All metric sub-fields of the `aggregate_metric_double` fields are stored as numeric <<doc-values,doc values>>\n+and are primarily intended for use with the following aggregations:\n+\n+* <<search-aggregations-metrics-min-aggregation,min>> aggregation returns the minimum value of all `min` sub-fields.\n+* <<search-aggregations-metrics-max-aggregation,max>> aggregation returns the maximum value of all `max` sub-fields.\n+* <<search-aggregations-metrics-sum-aggregation,sum>> aggregation returns the sum of the values of all `sum` sub-fields.\n+* <<search-aggregations-metrics-valuecount-aggregation,value_count>> aggregation returns the sum of the values of all `value_count`\n+sub-fields.\n+* <<search-aggregations-metrics-avg-aggregation,avg>> aggregation. The result of the `avg` aggregation is computed using\n+the `sum` and `value_count` metrics. Therefore, there is no `avg` metric. To support `avg` aggregations, both `sum` and\n+`value_count` metrics must be present.\n+\n+[[aggregate-metric-double-default]]\n+==== Default metric\n+\n+When an `aggregate_metric_double` field does not participate in any of the above aggregations,\n+it behaves as a `double` numeric field. To achieve this, its mapping must contain a `default_metric` which can\n+be one of its supported metrics. When an `aggregate_metric_double` field is accessed by a script or any\n+of the following queries, it will delegate the operation to its `default_metric` sub-field:\n+\n+* <<query-dsl-exists-query,exists>> query.\n+* <<query-dsl-range-query,range>> query.\n+* <<query-dsl-term-query,term>> query.\n+* <<query-dsl-terms-query,terms>> query.\n+\n+[[aggregate-metric-double-example]]\n+==== Examples\n+\n+The following <<indices-create-index, create index>> API request creates a new index with an `aggregate_metric_double` field used\n+to store aggregate metric data and sets the `max`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a7c3cf51691fd7b27f8a5c9f48cd8b1c0cdda0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4588, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}