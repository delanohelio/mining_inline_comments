{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjA4MjY1", "number": 58822, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxMzowOVrOEO12QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxMzowOVrOEO12QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTk3NzYwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxMzowOVrOGyOK6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo1NjoxM1rOGzUA8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDE1Mw==", "bodyText": "As we are asserting Lucene queries there, I would make this test in reverse:\nif (queryBuilder.zeroTermsQuery().equals(ZeroTermsQuery.ALL)) {\n    assert that query instanceof MatchAllDocsQuery;\n}", "url": "https://github.com/elastic/elasticsearch/pull/58822#discussion_r455314153", "createdAt": "2020-07-15T20:13:09Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java", "diffHunk": "@@ -85,6 +91,12 @@ protected MatchPhrasePrefixQueryBuilder doCreateTestQueryBuilder() {\n     protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, QueryShardContext context)\n             throws IOException {\n         assertThat(query, notNullValue());\n+\n+        if (query instanceof MatchAllDocsQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad296855e9bff28883cc0014dce6d6cdef2915a5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NTg5MA==", "bodyText": "I can understand the ask, but unfortunately there are several other conditions the random queryBuilder needs to fullfil to actually produce a MatchAllDocsQuery. Its quite difficult to get them all right, wheras the test the other way round is straight forward. Would you object to leaving it as is?", "url": "https://github.com/elastic/elasticsearch/pull/58822#discussion_r455665890", "createdAt": "2020-07-16T09:51:39Z", "author": {"login": "cbuescher"}, "path": "server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java", "diffHunk": "@@ -85,6 +91,12 @@ protected MatchPhrasePrefixQueryBuilder doCreateTestQueryBuilder() {\n     protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, QueryShardContext context)\n             throws IOException {\n         assertThat(query, notNullValue());\n+\n+        if (query instanceof MatchAllDocsQuery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDE1Mw=="}, "originalCommit": {"oid": "ad296855e9bff28883cc0014dce6d6cdef2915a5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2OTQxNw==", "bodyText": "An alternative would be not to test this here at all since we have another dedicated test for the zeroTermsQuery behaviour. In that case I'd just add MatchAllDocsQuery to the set of allowed and expected queries here.", "url": "https://github.com/elastic/elasticsearch/pull/58822#discussion_r455669417", "createdAt": "2020-07-16T09:57:36Z", "author": {"login": "cbuescher"}, "path": "server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java", "diffHunk": "@@ -85,6 +91,12 @@ protected MatchPhrasePrefixQueryBuilder doCreateTestQueryBuilder() {\n     protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, QueryShardContext context)\n             throws IOException {\n         assertThat(query, notNullValue());\n+\n+        if (query instanceof MatchAllDocsQuery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDE1Mw=="}, "originalCommit": {"oid": "ad296855e9bff28883cc0014dce6d6cdef2915a5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1ODQ4Mw==", "bodyText": "@cbuescher Thanks for the explanation, I am ok to leave it as is.", "url": "https://github.com/elastic/elasticsearch/pull/58822#discussion_r456458483", "createdAt": "2020-07-17T13:56:13Z", "author": {"login": "mayya-sharipova"}, "path": "server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java", "diffHunk": "@@ -85,6 +91,12 @@ protected MatchPhrasePrefixQueryBuilder doCreateTestQueryBuilder() {\n     protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, QueryShardContext context)\n             throws IOException {\n         assertThat(query, notNullValue());\n+\n+        if (query instanceof MatchAllDocsQuery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDE1Mw=="}, "originalCommit": {"oid": "ad296855e9bff28883cc0014dce6d6cdef2915a5"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2186, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}