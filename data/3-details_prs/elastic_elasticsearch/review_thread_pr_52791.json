{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzQzMjkz", "number": 52791, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNjowNFrODjOQMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNToxN1rODjObQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYwMjcyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNjowNFrOFu6YgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNjowNFrOFu6YgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNTM2MQ==", "bodyText": "Better to check if the expression is foldable and its folded value contains (\"*\"):\nif (exp.foldable()) {\n   Object value = exp.fold();\n   return value instanceof String && value.toString().contains(\"*\");\n}\nreturn false;", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384735361", "createdAt": "2020-02-26T20:06:04Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -45,4 +59,85 @@ public LogicalPlan optimize(LogicalPlan verified) {\n \n         return Arrays.asList(operators, label);\n     }\n+\n+\n+    private static class ReplaceWildcards extends OptimizerRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYwMzg5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNjoyOFrOFu6ZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowNjoyOFrOFu6ZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNTU0OA==", "bodyText": "eq.right().fold().toString()", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384735548", "createdAt": "2020-02-26T20:06:28Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -45,4 +59,85 @@ public LogicalPlan optimize(LogicalPlan verified) {\n \n         return Arrays.asList(operators, label);\n     }\n+\n+\n+    private static class ReplaceWildcards extends OptimizerRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                .replace(\"_\", escape + \"_\")\n+                .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) eq.right().fold();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYxNTE0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowOTo0NFrOFu6f7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowOTo0NFrOFu6f7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNzI2Mw==", "bodyText": "The blocks between Equals and NotEquals are the same and should be \"compressed\":\nif (e instanceof Equals || e instanceof NotEquals) {\n if (isWildcard ...) {\n  Like like = new Like()...\n  if (e instanceof NotEquals) {\n       like = new Not (...);\n   }\n   e = like\n}\nreturn e;", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384737263", "createdAt": "2020-02-26T20:09:44Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -45,4 +59,85 @@ public LogicalPlan optimize(LogicalPlan verified) {\n \n         return Arrays.asList(operators, label);\n     }\n+\n+\n+    private static class ReplaceWildcards extends OptimizerRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                .replace(\"_\", escape + \"_\")\n+                .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYxNzAzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxMDoyN1rOFu6hLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxMDoyN1rOFu6hLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNzU4MQ==", "bodyText": "wrong comment.", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384737581", "createdAt": "2020-02-26T20:10:27Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -45,4 +59,85 @@ public LogicalPlan optimize(LogicalPlan verified) {\n \n         return Arrays.asList(operators, label);\n     }\n+\n+\n+    private static class ReplaceWildcards extends OptimizerRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                .replace(\"_\", escape + \"_\")\n+                .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) eq.right().fold();\n+                        e = new Like(e.source(), eq.left(), toLikePattern(wcString));\n+                    }\n+                }\n+\n+                // expr != \"wildcard*phrase\"\n+                else if (e instanceof NotEquals) {\n+                    NotEquals eq = (NotEquals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) eq.right().fold();\n+                        Like inner = new Like(eq.source(), eq.left(), toLikePattern(wcString));\n+                        e = new Not(e.source(), inner);\n+                    }\n+                }\n+                return e;\n+            });\n+        }\n+    }\n+\n+    private static class ReplaceNullChecks extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYxNzUyOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxMDo0MlrOFu6hjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxMDo0MlrOFu6hjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNzY3OQ==", "bodyText": "wrong comment.", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384737679", "createdAt": "2020-02-26T20:10:42Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/optimizer/Optimizer.java", "diffHunk": "@@ -45,4 +59,85 @@ public LogicalPlan optimize(LogicalPlan verified) {\n \n         return Arrays.asList(operators, label);\n     }\n+\n+\n+    private static class ReplaceWildcards extends OptimizerRule<Filter> {\n+\n+        private static boolean isWildcard(Expression expr) {\n+            if (expr instanceof Literal) {\n+                Literal l = (Literal) expr;\n+                if (l.value() instanceof String) {\n+                    String s = (String) l.value();\n+                    return s.contains(\"*\");\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        private static LikePattern toLikePattern(String s) {\n+            // pick a character that is guaranteed not to be in the string, because it isn't allowed to escape itself\n+            char escape = 1;\n+\n+            // replace wildcards with % and escape special characters\n+            String likeString = s.replace(\"%\", escape + \"%\")\n+                .replace(\"_\", escape + \"_\")\n+                .replace(\"*\", \"%\");\n+\n+            return new LikePattern(likeString, escape);\n+        }\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) eq.right().fold();\n+                        e = new Like(e.source(), eq.left(), toLikePattern(wcString));\n+                    }\n+                }\n+\n+                // expr != \"wildcard*phrase\"\n+                else if (e instanceof NotEquals) {\n+                    NotEquals eq = (NotEquals) e;\n+\n+                    if (isWildcard(eq.right())) {\n+                        String wcString = (String) eq.right().fold();\n+                        Like inner = new Like(eq.source(), eq.left(), toLikePattern(wcString));\n+                        e = new Not(e.source(), inner);\n+                    }\n+                }\n+                return e;\n+            });\n+        }\n+    }\n+\n+    private static class ReplaceNullChecks extends OptimizerRule<Filter> {\n+\n+        @Override\n+        protected LogicalPlan rule(Filter filter) {\n+\n+            return filter.transformExpressionsUp(e -> {\n+                // expr == \"wildcard*phrase\"\n+                if (e instanceof Equals) {\n+                    Equals eq = (Equals) e;\n+                    if (Expressions.isNull(eq.right())) {\n+                        return new IsNull(e.source(), eq.left());\n+                    }\n+                }\n+\n+                // expr != \"wildcard*phrase\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYyOTYzOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNDo0N1rOFu6pCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNDo0N1rOFu6pCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTU5Mw==", "bodyText": "It's uncommon to inline a constant declaration within a for loop mainly because an increase in the number of arguments makes it impractical.\nTypically, declaring a method with varags and then passing the arguments inside its invocation or declaring the list/array in a variable is the way to go. (Arrays.asList is used a lot, potentially with a static imports - there's also List.of but that is not available in Java 8, used by ES 7.x).", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384739593", "createdAt": "2020-02-26T20:14:47Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.optimizer;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.expression.function.EqlFunctionRegistry;\n+import org.elasticsearch.xpack.eql.parser.EqlParser;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Not;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.IsNotNull;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.IsNull;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.Like;\n+import org.elasticsearch.xpack.ql.index.EsIndex;\n+import org.elasticsearch.xpack.ql.index.IndexResolution;\n+import org.elasticsearch.xpack.ql.plan.logical.Filter;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.type.EsField;\n+import org.elasticsearch.xpack.ql.type.TypesTests;\n+\n+import java.util.Map;\n+\n+public class OptimizerTests extends ESTestCase {\n+\n+\n+    private static final String INDEX_NAME = \"test\";\n+    private EqlParser parser = new EqlParser();\n+    private IndexResolution index = loadIndexResolution(\"mapping-default.json\");\n+\n+    private static Map<String, EsField> loadEqlMapping(String name) {\n+        return TypesTests.loadMapping(name);\n+    }\n+\n+    private IndexResolution loadIndexResolution(String name) {\n+        return IndexResolution.valid(new EsIndex(INDEX_NAME, loadEqlMapping(name)));\n+    }\n+\n+    private LogicalPlan accept(IndexResolution resolution, String eql) {\n+        PreAnalyzer preAnalyzer = new PreAnalyzer();\n+        Analyzer analyzer = new Analyzer(new EqlFunctionRegistry(), new Verifier());\n+        Optimizer optimizer = new Optimizer();\n+        return optimizer.optimize(analyzer.analyze(preAnalyzer.preAnalyze(parser.createStatement(eql), resolution)));\n+    }\n+\n+    private LogicalPlan accept(String eql) {\n+        return accept(index, eql);\n+    }\n+    \n+    public void testIsNull() {\n+        for (String q : new String[]{\"foo where command_line == null\", \"foo where null == command_line\"}) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjYzMTA1OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNToxN1rOFu6p6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNToxN1rOFu6p6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTgxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/elastic/elasticsearch/pull/52791#discussion_r384739817", "createdAt": "2020-02-26T20:15:17Z", "author": {"login": "costin"}, "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.optimizer;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.eql.analysis.Analyzer;\n+import org.elasticsearch.xpack.eql.analysis.PreAnalyzer;\n+import org.elasticsearch.xpack.eql.analysis.Verifier;\n+import org.elasticsearch.xpack.eql.expression.function.EqlFunctionRegistry;\n+import org.elasticsearch.xpack.eql.parser.EqlParser;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Not;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.IsNotNull;\n+import org.elasticsearch.xpack.ql.expression.predicate.nulls.IsNull;\n+import org.elasticsearch.xpack.ql.expression.predicate.regex.Like;\n+import org.elasticsearch.xpack.ql.index.EsIndex;\n+import org.elasticsearch.xpack.ql.index.IndexResolution;\n+import org.elasticsearch.xpack.ql.plan.logical.Filter;\n+import org.elasticsearch.xpack.ql.plan.logical.LogicalPlan;\n+import org.elasticsearch.xpack.ql.type.EsField;\n+import org.elasticsearch.xpack.ql.type.TypesTests;\n+\n+import java.util.Map;\n+\n+public class OptimizerTests extends ESTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf18c8b49e4ad5c2de52fedfe1d4889cf581560"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3806, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}