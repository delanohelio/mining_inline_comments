{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTA0MTcx", "number": 54467, "title": "Create first backing index when creating data stream", "bodyText": "Eagerly creates the first backing index when a data stream is created.\nRelates to #53100", "createdAt": "2020-03-30T21:09:25Z", "url": "https://github.com/elastic/elasticsearch/pull/54467", "merged": true, "mergeCommit": {"oid": "42f513c810cf1546f59030fbc5ccefb01a6bcdf6"}, "closed": true, "closedAt": "2020-04-02T15:58:07Z", "author": {"login": "danhermann"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS9maUgFqTM4NDQzMzczOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTcmtcAH2gAyMzk1OTA0MTcxOjljOWE0MmMwZjhiZWQzNDE2NTExOWIxZmEyZDdkY2U4ZjU1YTdkNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NDMzNzM5", "url": "https://github.com/elastic/elasticsearch/pull/54467#pullrequestreview-384433739", "createdAt": "2020-03-31T06:28:34Z", "commit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjoyODozNFrOF-HBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjo1MzoyN1rOF-HoMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3MTA0MA==", "bodyText": "I think I remember @dakrone mentioning something about not starting from 0, rather from 1 like described in the ILM getting started guide. I am OK either way.", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400671040", "createdAt": "2020-03-31T06:28:34Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -161,16 +167,24 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                 });\n         }\n \n-        static ClusterState createDataStream(ClusterState currentState, Request request) {\n+        static ClusterState createDataStream(MetaDataCreateIndexService metaDataCreateIndexService,\n+                                             ClusterState currentState,\n+                                             Request request) throws Exception {\n             if (currentState.metaData().dataStreams().containsKey(request.name)) {\n                 throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] already exists\");\n             }\n \n             MetaDataCreateIndexService.validateIndexOrAliasName(request.name,\n                 (s1, s2) -> new IllegalArgumentException(\"data_stream [\" + s1 + \"] \" + s2));\n \n+            String firstBackingIndexName = request.name + \"-000000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3MzE0OA==", "bodyText": "It would be good to add:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            assert firstBackingIndex != null;\n          \n      \n    \n    \n  \n\nsince that is guaranteed to fail tests (the NPE occurring further down could be swallowed).", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400673148", "createdAt": "2020-03-31T06:33:54Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -161,16 +167,24 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                 });\n         }\n \n-        static ClusterState createDataStream(ClusterState currentState, Request request) {\n+        static ClusterState createDataStream(MetaDataCreateIndexService metaDataCreateIndexService,\n+                                             ClusterState currentState,\n+                                             Request request) throws Exception {\n             if (currentState.metaData().dataStreams().containsKey(request.name)) {\n                 throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] already exists\");\n             }\n \n             MetaDataCreateIndexService.validateIndexOrAliasName(request.name,\n                 (s1, s2) -> new IllegalArgumentException(\"data_stream [\" + s1 + \"] \" + s2));\n \n+            String firstBackingIndexName = request.name + \"-000000\";\n+            CreateIndexClusterStateUpdateRequest createIndexRequest =\n+                new CreateIndexClusterStateUpdateRequest(\"initialize_data_stream\", firstBackingIndexName, firstBackingIndexName);\n+            currentState = metaDataCreateIndexService.applyCreateIndexRequest(currentState, createIndexRequest, false);\n+            IndexMetaData firstBackingIndex = currentState.metaData().index(firstBackingIndexName);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3ODU1NQ==", "bodyText": "This looks unused? I think it makes more sense to add this when also building the indicesLookup.", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400678555", "createdAt": "2020-03-31T06:47:32Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -250,4 +252,42 @@ private boolean isNonEmpty(List<IndexMetaData> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3OTA5Mw==", "bodyText": "We should end up asserting that existing != null, but that can be done in a followup together with populating indicesLookup", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400679093", "createdAt": "2020-03-31T06:48:52Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1377,12 +1379,27 @@ private void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLook\n             DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    if (indicesLookup.containsKey(ds.getName())) {\n+                    IndexAbstraction existing = indicesLookup.get(ds.getName());\n+                    if (existing != null && existing.getType() != IndexAbstraction.Type.DATA_STREAM) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MTAxMQ==", "bodyText": "I think this should instead validate that the entries in map are the same as those in ds.getIndices().\nRight now it works in the initial create case, but not after we have deleted the first index.\nAlso it would be good to add a MetaDataTests test that validates that a data-stream pointing to backing indices (with random suffix number) works.", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400681011", "createdAt": "2020-03-31T06:53:27Z", "author": {"login": "henningandersen"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1377,12 +1379,27 @@ private void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLook\n             DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    if (indicesLookup.containsKey(ds.getName())) {\n+                    IndexAbstraction existing = indicesLookup.get(ds.getName());\n+                    if (existing != null && existing.getType() != IndexAbstraction.Type.DATA_STREAM) {\n                         throw new IllegalStateException(\"data stream [\" + ds.getName() + \"] conflicts with existing index or alias\");\n                     }\n \n-                    SortedMap<?, ?> map = indicesLookup.subMap(ds.getName() + \"-\", ds.getName() + \".\"); // '.' is the char after '-'\n+                    SortedMap<String, IndexAbstraction> map =\n+                        indicesLookup.subMap(ds.getName() + \"-\", ds.getName() + \".\"); // '.' is the char after '-'\n                     if (map.size() != 0) {\n+                        if (map.size() == ds.getIndices().size()) {\n+                            int numValidIndices = 0;\n+                            for (int i = 0; i < map.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NDQ2Njgz", "url": "https://github.com/elastic/elasticsearch/pull/54467#pullrequestreview-384446683", "createdAt": "2020-03-31T06:54:55Z", "commit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjo1NDo1NVrOF-Hq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzowMDoxNFrOF-Hz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MTY5Ng==", "bodyText": "Let's add this in another change as well.", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400681696", "createdAt": "2020-03-31T06:54:55Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java", "diffHunk": "@@ -1377,12 +1379,27 @@ private void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLook\n             DataStreamMetadata dsMetadata = (DataStreamMetadata) customs.get(DataStreamMetadata.TYPE);\n             if (dsMetadata != null) {\n                 for (DataStream ds : dsMetadata.dataStreams().values()) {\n-                    if (indicesLookup.containsKey(ds.getName())) {\n+                    IndexAbstraction existing = indicesLookup.get(ds.getName());\n+                    if (existing != null && existing.getType() != IndexAbstraction.Type.DATA_STREAM) {\n                         throw new IllegalStateException(\"data stream [\" + ds.getName() + \"] conflicts with existing index or alias\");\n                     }\n \n-                    SortedMap<?, ?> map = indicesLookup.subMap(ds.getName() + \"-\", ds.getName() + \".\"); // '.' is the char after '-'\n+                    SortedMap<String, IndexAbstraction> map =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MjA2OA==", "bodyText": "We need to set the index.hidden setting here and test in testCreateDataStream() that it has been set.", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400682068", "createdAt": "2020-03-31T06:55:51Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamAction.java", "diffHunk": "@@ -161,16 +167,24 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                 });\n         }\n \n-        static ClusterState createDataStream(ClusterState currentState, Request request) {\n+        static ClusterState createDataStream(MetaDataCreateIndexService metaDataCreateIndexService,\n+                                             ClusterState currentState,\n+                                             Request request) throws Exception {\n             if (currentState.metaData().dataStreams().containsKey(request.name)) {\n                 throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] already exists\");\n             }\n \n             MetaDataCreateIndexService.validateIndexOrAliasName(request.name,\n                 (s1, s2) -> new IllegalArgumentException(\"data_stream [\" + s1 + \"] \" + s2));\n \n+            String firstBackingIndexName = request.name + \"-000000\";\n+            CreateIndexClusterStateUpdateRequest createIndexRequest =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4NDAwOA==", "bodyText": "Let's add the data stream index abstraction in another change? We can use the get index api in the yaml test to check that the index has correctly been created.\n(the logic that adds data streams to the indicesLookup is missing here, which would need to be added too, but let's try to this pr small, so that it is easy to review)\n(also a number of if statements in the code base may need to be revised because a new data stream type is introduced)", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r400684008", "createdAt": "2020-03-31T07:00:14Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -250,4 +252,42 @@ private boolean isNonEmpty(List<IndexMetaData> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff94c6212a0fa9efbbae74abb04e0bd1d82401e"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae87c538ad078773fc66cc07abce9dae57f1656", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/0ae87c538ad078773fc66cc07abce9dae57f1656", "committedDate": "2020-03-31T20:14:57Z", "message": "create first backing index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806acc45f286f744e3fe6bd46e5385235649e2ff", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/806acc45f286f744e3fe6bd46e5385235649e2ff", "committedDate": "2020-03-31T20:17:15Z", "message": "update unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078dae15dac3c8bcfb3d3ddee14d9ff5f481d0c5", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/078dae15dac3c8bcfb3d3ddee14d9ff5f481d0c5", "committedDate": "2020-03-31T20:17:17Z", "message": "temporarily restrict YML test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1284b2b14ed867d6087cdf66beccab8099ea98c1", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/1284b2b14ed867d6087cdf66beccab8099ea98c1", "committedDate": "2020-03-31T20:20:29Z", "message": "wip on review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50550983787f98c80f606f7a20fee77d69739a66", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/50550983787f98c80f606f7a20fee77d69739a66", "committedDate": "2020-03-31T13:20:21Z", "message": "wip on review comments"}, "afterCommit": {"oid": "1284b2b14ed867d6087cdf66beccab8099ea98c1", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/1284b2b14ed867d6087cdf66beccab8099ea98c1", "committedDate": "2020-03-31T20:20:29Z", "message": "wip on review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df1bf0542d1c3486ed0bc8e0b84797a062aee9cf", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/df1bf0542d1c3486ed0bc8e0b84797a062aee9cf", "committedDate": "2020-03-31T23:26:40Z", "message": "finish review comments and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e6b8802525f5aec6b1fbb6b2c8ce90c55e668f", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/47e6b8802525f5aec6b1fbb6b2c8ce90c55e668f", "committedDate": "2020-03-31T23:53:29Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzA1MTk1", "url": "https://github.com/elastic/elasticsearch/pull/54467#pullrequestreview-385305195", "createdAt": "2020-04-01T06:48:42Z", "commit": {"oid": "47e6b8802525f5aec6b1fbb6b2c8ce90c55e668f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0ODo0MlrOF-y73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxNzoxOFrOF-31UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDU1OQ==", "bodyText": "Can also the index name be checked here inside the indices array field?", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r401390559", "createdAt": "2020-04-01T06:48:42Z", "author": {"login": "martijnvg"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/indices.data_stream/10_basic.yml", "diffHunk": "@@ -22,10 +22,15 @@\n       indices.get_data_streams: {}\n   - match: { 0.name: simple-data-stream1 }\n   - match: { 0.timestamp_field: '@timestamp' }\n-  - match: { 0.indices: [] }\n+  - length: { 0.indices: 1 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e6b8802525f5aec6b1fbb6b2c8ce90c55e668f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MjA4Nw==", "bodyText": "maybe add some java doc here?", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r401392087", "createdAt": "2020-04-01T06:52:39Z", "author": {"login": "martijnvg"}, "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -87,7 +87,9 @@\n          * An alias typically refers to many concrete indices and\n          * may have a write index.\n          */\n-        ALIAS(\"alias\");\n+        ALIAS(\"alias\"),\n+\n+        DATA_STREAM(\"data_stream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e6b8802525f5aec6b1fbb6b2c8ce90c55e668f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MDgwMQ==", "bodyText": "maybe instead of mock class use: Mockito#spy(...) and attach expected behaviour?", "url": "https://github.com/elastic/elasticsearch/pull/54467#discussion_r401470801", "createdAt": "2020-04-01T09:17:18Z", "author": {"login": "martijnvg"}, "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/CreateDataStreamRequestTests.java", "diffHunk": "@@ -62,33 +68,60 @@ public void testValidateRequestWithoutTimestampField() {\n         assertThat(e.validationErrors().get(0), containsString(\"timestamp field name is missing\"));\n     }\n \n-    public void testCreateDataStream() {\n+    public void testCreateDataStream() throws Exception {\n+        final MetadataCreateIndexService metadataCreateIndexService = new MockMetadataCreateIndexService();\n         final String dataStreamName = \"my-data-stream\";\n         ClusterState cs = ClusterState.builder(new ClusterName(\"_name\")).build();\n         CreateDataStreamAction.Request req = new CreateDataStreamAction.Request(dataStreamName);\n-        ClusterState newState = CreateDataStreamAction.TransportAction.createDataStream(cs, req);\n+        ClusterState newState = CreateDataStreamAction.TransportAction.createDataStream(metadataCreateIndexService, cs, req);\n         assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n         assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n+        assertThat(newState.metadata().index(dataStreamName + \"-000001\"), notNullValue());\n+        assertThat(newState.metadata().index(dataStreamName + \"-000001\").getSettings().get(\"index.hidden\"), equalTo(\"true\"));\n     }\n \n     public void testCreateDuplicateDataStream() {\n+        final MetadataCreateIndexService metadataCreateIndexService = new MockMetadataCreateIndexService();\n         final String dataStreamName = \"my-data-stream\";\n         DataStream existingDataStream = new DataStream(dataStreamName, \"timestamp\", Collections.emptyList());\n         ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n             .metadata(Metadata.builder().dataStreams(Map.of(dataStreamName, existingDataStream)).build()).build();\n         CreateDataStreamAction.Request req = new CreateDataStreamAction.Request(dataStreamName);\n \n         IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n-            () -> CreateDataStreamAction.TransportAction.createDataStream(cs, req));\n+            () -> CreateDataStreamAction.TransportAction.createDataStream(metadataCreateIndexService, cs, req));\n         assertThat(e.getMessage(), containsString(\"data_stream [\" + dataStreamName + \"] already exists\"));\n     }\n \n     public void testCreateDataStreamWithInvalidName() {\n+        final MetadataCreateIndexService metadataCreateIndexService = new MockMetadataCreateIndexService();\n         final String dataStreamName = \"_My-da#ta- ,stream-\";\n         ClusterState cs = ClusterState.builder(new ClusterName(\"_name\")).build();\n         CreateDataStreamAction.Request req = new CreateDataStreamAction.Request(dataStreamName);\n         IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n-            () -> CreateDataStreamAction.TransportAction.createDataStream(cs, req));\n+            () -> CreateDataStreamAction.TransportAction.createDataStream(metadataCreateIndexService, cs, req));\n         assertThat(e.getMessage(), containsString(\"must not contain the following characters\"));\n     }\n+\n+    private static class MockMetadataCreateIndexService extends MetadataCreateIndexService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e6b8802525f5aec6b1fbb6b2c8ce90c55e668f"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd4bd4df3e9a8fedfc181fe9a814053952b91d0", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/0bd4bd4df3e9a8fedfc181fe9a814053952b91d0", "committedDate": "2020-04-01T17:20:13Z", "message": "wip on review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c1856feb7e4aa13f2544347b339e89217da2b29", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/6c1856feb7e4aa13f2544347b339e89217da2b29", "committedDate": "2020-04-01T18:28:29Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2849dd98b97775cca9a730c95077b5161a0f4e", "author": {"user": {"login": "elasticmachine", "name": "Elastic Machine"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe2849dd98b97775cca9a730c95077b5161a0f4e", "committedDate": "2020-04-01T18:36:31Z", "message": "Merge branch 'master' into create_first_backing_index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9a42c0f8bed34165119b1fa2d7dce8f55a7d53", "author": {"user": {"login": "danhermann", "name": "Dan Hermann"}}, "url": "https://github.com/elastic/elasticsearch/commit/9c9a42c0f8bed34165119b1fa2d7dce8f55a7d53", "committedDate": "2020-04-01T19:10:16Z", "message": "fix test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}