{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTEzODYw", "number": 57451, "title": "SQL: Make CASTing string to DATETIME more lenient", "bodyText": "Some BI tools (i.e. Tableau) would try to cast strings where the time\npart is separated from the date part with a whitespace instead of T.\nAdjust type conversion used by CAST to support this.", "createdAt": "2020-06-01T17:22:24Z", "url": "https://github.com/elastic/elasticsearch/pull/57451", "merged": true, "mergeCommit": {"oid": "0e18321e7ad9f779c42855efbf93f171b9128a5e"}, "closed": true, "closedAt": "2020-06-02T07:58:46Z", "author": {"login": "matriv"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnDkI3gH2gAyNDI2MTEzODYwOjVkZWY0M2U2NWU1YTg0Y2YyNTliMTkyYmQ0YjA5ZGNhN2RiMzUyZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnlQT_AFqTQyMzMzNDI1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5def43e65e5a84cf259b192bd4b09dca7db352d0", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/5def43e65e5a84cf259b192bd4b09dca7db352d0", "committedDate": "2020-06-01T17:18:19Z", "message": "SQL: Make CASTing string to DATETIME more lenient\n\nSome BI tools (i.e. Tableau) would try to cast strings where the time\npart is separated from the date part with a whitespace instead of `T`.\nAdjust type convertion used by CAST to support this."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "committedDate": "2020-06-01T17:39:29Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDU2MTg3", "url": "https://github.com/elastic/elasticsearch/pull/57451#pullrequestreview-422056187", "createdAt": "2020-06-01T17:53:05Z", "commit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzo1MzowNVrOGdUNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzo1NzoxNFrOGdUWYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MzEwMg==", "bodyText": "Why '+3' here?", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433393102", "createdAt": "2020-06-01T17:53:05Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -33,10 +54,21 @@ public static ZonedDateTime asDateTime(long millis) {\n      * Parses the given string into a DateTime using UTC as a default timezone.\n      */\n     public static ZonedDateTime asDateTime(String dateFormat) {\n-        return DateFormatters.from(UTC_DATE_TIME_FORMATTER.parse(dateFormat)).withZoneSameInstant(UTC);\n+        int separatorIdx = dateFormat.indexOf('-');\n+        if (separatorIdx == 0) { // negative year\n+            separatorIdx = dateFormat.indexOf('-', 1);\n+        }\n+        separatorIdx = dateFormat.indexOf('-', separatorIdx + 1) + 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NTI5OQ==", "bodyText": "Why are these needed in QL and not SQL only?\nAlso, SQL has a DateUtils class with DateTimeFormatters that use whitespace separators. Haven't looked into this in more depth, but have you considered having a single definition source for these DateTimeFormatters?", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433395299", "createdAt": "2020-06-01T17:57:14Z", "author": {"login": "astefan"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -6,19 +6,40 @@\n \n package org.elasticsearch.xpack.ql.type;\n \n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.time.DateFormatters;\n \n import java.time.Instant;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;\n \n //NB: Taken from sql-proto.\n public final class DateUtils {\n \n     public static final ZoneId UTC = ZoneId.of(\"Z\");\n \n-    private static final DateFormatter UTC_DATE_TIME_FORMATTER = DateFormatter.forPattern(\"date_optional_time\").withZone(UTC);\n+    private static final DateTimeFormatter DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDgzMzEz", "url": "https://github.com/elastic/elasticsearch/pull/57451#pullrequestreview-422083313", "createdAt": "2020-06-01T18:32:49Z", "commit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMjo0OVrOGdVfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMzozNlrOGdVgnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzg5MQ==", "bodyText": "Worth a comment in the code.", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433413891", "createdAt": "2020-06-01T18:32:49Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -33,10 +54,21 @@ public static ZonedDateTime asDateTime(long millis) {\n      * Parses the given string into a DateTime using UTC as a default timezone.\n      */\n     public static ZonedDateTime asDateTime(String dateFormat) {\n-        return DateFormatters.from(UTC_DATE_TIME_FORMATTER.parse(dateFormat)).withZoneSameInstant(UTC);\n+        int separatorIdx = dateFormat.indexOf('-');\n+        if (separatorIdx == 0) { // negative year\n+            separatorIdx = dateFormat.indexOf('-', 1);\n+        }\n+        separatorIdx = dateFormat.indexOf('-', separatorIdx + 1) + 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MzEwMg=="}, "originalCommit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNDMwMw==", "bodyText": "It's annoying the format builder does not allow for two literals to be specified as either/or yet supports optional.", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433414303", "createdAt": "2020-06-01T18:33:36Z", "author": {"login": "costin"}, "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -6,19 +6,40 @@\n \n package org.elasticsearch.xpack.ql.type;\n \n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.time.DateFormatters;\n \n import java.time.Instant;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;\n \n //NB: Taken from sql-proto.\n public final class DateUtils {\n \n     public static final ZoneId UTC = ZoneId.of(\"Z\");\n \n-    private static final DateFormatter UTC_DATE_TIME_FORMATTER = DateFormatter.forPattern(\"date_optional_time\").withZone(UTC);\n+    private static final DateTimeFormatter DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9cdf7e3947aa36ad3020cf10f83c6875b62edd", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/ee9cdf7e3947aa36ad3020cf10f83c6875b62edd", "committedDate": "2020-06-01T19:00:06Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08a2de7fe9540e44e699dc87a656ee683073e3e", "author": {"user": {"login": "matriv", "name": "Marios Trivyzas"}}, "url": "https://github.com/elastic/elasticsearch/commit/c08a2de7fe9540e44e699dc87a656ee683073e3e", "committedDate": "2020-06-01T20:17:07Z", "message": "add integ tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDAxMzE1", "url": "https://github.com/elastic/elasticsearch/pull/57451#pullrequestreview-422401315", "createdAt": "2020-06-02T07:14:27Z", "commit": {"oid": "c08a2de7fe9540e44e699dc87a656ee683073e3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzM0MjUw", "url": "https://github.com/elastic/elasticsearch/pull/57451#pullrequestreview-423334250", "createdAt": "2020-06-03T08:33:26Z", "commit": {"oid": "c08a2de7fe9540e44e699dc87a656ee683073e3e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4071, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}