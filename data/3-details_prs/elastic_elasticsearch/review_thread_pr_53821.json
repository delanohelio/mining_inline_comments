{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTQ0Mzgw", "number": 53821, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MzowOFrODqQ-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMjoyNFrODqRHlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ0ODA2OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/MapUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MzowOFrOF5564A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MzowOFrOF5564A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MjExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396262112", "createdAt": "2020-03-23T07:53:08Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/MapUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ *//*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.analyses;\n+\n+import org.elasticsearch.index.mapper.KeywordFieldMapper;\n+import org.elasticsearch.index.mapper.NumberFieldMapper;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+final class MapUtils {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ1OTM5OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1NzozM1rOF56CAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzowMTo1MFrOF6EVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MzkzNw==", "bodyText": "You could put the hasEntry assertion into allOf in line 257 where the other hasEntry assertions are.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396263937", "createdAt": "2020-03-23T07:57:33Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "diffHunk": "@@ -244,39 +243,45 @@ public void testFieldCardinalityLimitsIsNonEmpty() {\n     }\n \n     public void testGetExplicitlyMappedFields() {\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"), is(anEmptyMap()));\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"), is(anEmptyMap()));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n         assertThat(\n             new Classification(\"foo\").getExplicitlyMappedFields(Collections.singletonMap(\"foo\", \"not_a_map\"), \"results\"),\n-            is(anEmptyMap()));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n-                \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        Map<String, Object> explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"bar\", \"baz\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"bar\", \"baz\"))));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                new HashMap<>() {{\n-                    put(\"foo\", new HashMap<>() {{\n-                        put(\"type\", \"alias\");\n-                        put(\"path\", \"bar\");\n-                    }});\n-                    put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n-                }},\n-                \"results\"),\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDM2OA==", "bodyText": "no, it doesn't work because they are not all of the same type.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396420368", "createdAt": "2020-03-23T12:40:31Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "diffHunk": "@@ -244,39 +243,45 @@ public void testFieldCardinalityLimitsIsNonEmpty() {\n     }\n \n     public void testGetExplicitlyMappedFields() {\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"), is(anEmptyMap()));\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"), is(anEmptyMap()));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n         assertThat(\n             new Classification(\"foo\").getExplicitlyMappedFields(Collections.singletonMap(\"foo\", \"not_a_map\"), \"results\"),\n-            is(anEmptyMap()));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n-                \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        Map<String, Object> explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"bar\", \"baz\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"bar\", \"baz\"))));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                new HashMap<>() {{\n-                    put(\"foo\", new HashMap<>() {{\n-                        put(\"type\", \"alias\");\n-                        put(\"path\", \"bar\");\n-                    }});\n-                    put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n-                }},\n-                \"results\"),\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MzkzNw=="}, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMjcxNQ==", "bodyText": "Ok, understand.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396432715", "createdAt": "2020-03-23T13:01:50Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "diffHunk": "@@ -244,39 +243,45 @@ public void testFieldCardinalityLimitsIsNonEmpty() {\n     }\n \n     public void testGetExplicitlyMappedFields() {\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"), is(anEmptyMap()));\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"), is(anEmptyMap()));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n         assertThat(\n             new Classification(\"foo\").getExplicitlyMappedFields(Collections.singletonMap(\"foo\", \"not_a_map\"), \"results\"),\n-            is(anEmptyMap()));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n-                \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        Map<String, Object> explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"bar\", \"baz\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"bar\", \"baz\"))));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                new HashMap<>() {{\n-                    put(\"foo\", new HashMap<>() {{\n-                        put(\"type\", \"alias\");\n-                        put(\"path\", \"bar\");\n-                    }});\n-                    put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n-                }},\n-                \"results\"),\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MzkzNw=="}, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ2MDQ3OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1Nzo1MVrOF56Cow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo0MDo1NFrOF6Dl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NDA5OQ==", "bodyText": "Same here.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396264099", "createdAt": "2020-03-23T07:57:51Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "diffHunk": "@@ -244,39 +243,45 @@ public void testFieldCardinalityLimitsIsNonEmpty() {\n     }\n \n     public void testGetExplicitlyMappedFields() {\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"), is(anEmptyMap()));\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"), is(anEmptyMap()));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n         assertThat(\n             new Classification(\"foo\").getExplicitlyMappedFields(Collections.singletonMap(\"foo\", \"not_a_map\"), \"results\"),\n-            is(anEmptyMap()));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n-                \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        Map<String, Object> explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"bar\", \"baz\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"bar\", \"baz\"))));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                new HashMap<>() {{\n-                    put(\"foo\", new HashMap<>() {{\n-                        put(\"type\", \"alias\");\n-                        put(\"path\", \"bar\");\n-                    }});\n-                    put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n-                }},\n-                \"results\"),\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));\n+\n+        explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            new HashMap<>() {{\n+                put(\"foo\", new HashMap<>() {{\n+                    put(\"type\", \"alias\");\n+                    put(\"path\", \"bar\");\n+                }});\n+                put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n+            }},\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"type\", \"long\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"type\", \"long\"))));\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDU3Nw==", "bodyText": "same as above, I initially did this but it wouldn't compile for some reason.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396420577", "createdAt": "2020-03-23T12:40:54Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java", "diffHunk": "@@ -244,39 +243,45 @@ public void testFieldCardinalityLimitsIsNonEmpty() {\n     }\n \n     public void testGetExplicitlyMappedFields() {\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"), is(anEmptyMap()));\n-        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"), is(anEmptyMap()));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(null, \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        assertThat(new Classification(\"foo\").getExplicitlyMappedFields(Collections.emptyMap(), \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n         assertThat(\n             new Classification(\"foo\").getExplicitlyMappedFields(Collections.singletonMap(\"foo\", \"not_a_map\"), \"results\"),\n-            is(anEmptyMap()));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n-                \"results\"),\n+            equalTo(Collections.singletonMap(\"results.feature_importance\", MapUtils.featureImportanceMapping())));\n+        Map<String, Object> explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            Collections.singletonMap(\"foo\", Collections.singletonMap(\"bar\", \"baz\")),\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"bar\", \"baz\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"bar\", \"baz\"))));\n-        assertThat(\n-            new Classification(\"foo\").getExplicitlyMappedFields(\n-                new HashMap<>() {{\n-                    put(\"foo\", new HashMap<>() {{\n-                        put(\"type\", \"alias\");\n-                        put(\"path\", \"bar\");\n-                    }});\n-                    put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n-                }},\n-                \"results\"),\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));\n+\n+        explicitlyMappedFields = new Classification(\"foo\").getExplicitlyMappedFields(\n+            new HashMap<>() {{\n+                put(\"foo\", new HashMap<>() {{\n+                    put(\"type\", \"alias\");\n+                    put(\"path\", \"bar\");\n+                }});\n+                put(\"bar\", Collections.singletonMap(\"type\", \"long\"));\n+            }},\n+            \"results\");\n+        assertThat(explicitlyMappedFields,\n             allOf(\n                 hasEntry(\"results.foo_prediction\", Collections.singletonMap(\"type\", \"long\")),\n                 hasEntry(\"results.top_classes.class_name\", Collections.singletonMap(\"type\", \"long\"))));\n+        assertThat(explicitlyMappedFields, hasEntry(\"results.feature_importance\", MapUtils.featureImportanceMapping()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NDA5OQ=="}, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ2NzYwOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMDoyOFrOF56HAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMDoyOFrOF56HAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTIxNw==", "bodyText": "You could use more idiomatic hasSize(greaterThan(0)) here.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396265217", "createdAt": "2020-03-23T08:00:28Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "diffHunk": "@@ -86,11 +87,13 @@ public void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws\n             assertThat(resultsObject.containsKey(predictedClassField), is(true));\n             assertThat(resultsObject.containsKey(\"is_training\"), is(true));\n             assertThat(resultsObject.get(\"is_training\"), is(destDoc.containsKey(DEPENDENT_VARIABLE_FIELD)));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray.size(), greaterThan(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ3MDcxOnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMTozOFrOF56I9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo1MjowNFrOF6D-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTcxOQ==", "bodyText": "findAny() returns Optional so you could use it as a subject and the assertion would be isPresent from OptionalMatchers.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396265719", "createdAt": "2020-03-23T08:01:38Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "diffHunk": "@@ -86,11 +87,13 @@ public void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws\n             assertThat(resultsObject.containsKey(predictedClassField), is(true));\n             assertThat(resultsObject.containsKey(\"is_training\"), is(true));\n             assertThat(resultsObject.get(\"is_training\"), is(destDoc.containsKey(DEPENDENT_VARIABLE_FIELD)));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray.size(), greaterThan(0));\n             assertThat(\n-                resultsObject.toString(),\n-                resultsObject.containsKey(\"feature_importance.\" + NUMERICAL_FEATURE_FIELD)\n-                    || resultsObject.containsKey(\"feature_importance.\" + DISCRETE_NUMERICAL_FEATURE_FIELD),\n-                is(true));\n+                importanceArray.stream().filter(m -> NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))\n+                    || DISCRETE_NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))).findAny().orElse(null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyNDEzMQ==", "bodyText": "from what I can tell, our version of hamcrest does not have this.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396424131", "createdAt": "2020-03-23T12:47:07Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "diffHunk": "@@ -86,11 +87,13 @@ public void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws\n             assertThat(resultsObject.containsKey(predictedClassField), is(true));\n             assertThat(resultsObject.containsKey(\"is_training\"), is(true));\n             assertThat(resultsObject.get(\"is_training\"), is(destDoc.containsKey(DEPENDENT_VARIABLE_FIELD)));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray.size(), greaterThan(0));\n             assertThat(\n-                resultsObject.toString(),\n-                resultsObject.containsKey(\"feature_importance.\" + NUMERICAL_FEATURE_FIELD)\n-                    || resultsObject.containsKey(\"feature_importance.\" + DISCRETE_NUMERICAL_FEATURE_FIELD),\n-                is(true));\n+                importanceArray.stream().filter(m -> NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))\n+                    || DISCRETE_NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))).findAny().orElse(null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTcxOQ=="}, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyNjUxMA==", "bodyText": "It's our (i.e. elasticsearch) class: org.elasticsearch.test.hamcrest.OptionalMatchers", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396426510", "createdAt": "2020-03-23T12:51:22Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "diffHunk": "@@ -86,11 +87,13 @@ public void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws\n             assertThat(resultsObject.containsKey(predictedClassField), is(true));\n             assertThat(resultsObject.containsKey(\"is_training\"), is(true));\n             assertThat(resultsObject.get(\"is_training\"), is(destDoc.containsKey(DEPENDENT_VARIABLE_FIELD)));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray.size(), greaterThan(0));\n             assertThat(\n-                resultsObject.toString(),\n-                resultsObject.containsKey(\"feature_importance.\" + NUMERICAL_FEATURE_FIELD)\n-                    || resultsObject.containsKey(\"feature_importance.\" + DISCRETE_NUMERICAL_FEATURE_FIELD),\n-                is(true));\n+                importanceArray.stream().filter(m -> NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))\n+                    || DISCRETE_NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))).findAny().orElse(null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTcxOQ=="}, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyNjg4Nw==", "bodyText": "found it! Will update in a sec.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396426887", "createdAt": "2020-03-23T12:52:04Z", "author": {"login": "benwtrent"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "diffHunk": "@@ -86,11 +87,13 @@ public void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws\n             assertThat(resultsObject.containsKey(predictedClassField), is(true));\n             assertThat(resultsObject.containsKey(\"is_training\"), is(true));\n             assertThat(resultsObject.get(\"is_training\"), is(destDoc.containsKey(DEPENDENT_VARIABLE_FIELD)));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray.size(), greaterThan(0));\n             assertThat(\n-                resultsObject.toString(),\n-                resultsObject.containsKey(\"feature_importance.\" + NUMERICAL_FEATURE_FIELD)\n-                    || resultsObject.containsKey(\"feature_importance.\" + DISCRETE_NUMERICAL_FEATURE_FIELD),\n-                is(true));\n+                importanceArray.stream().filter(m -> NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))\n+                    || DISCRETE_NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))).findAny().orElse(null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTcxOQ=="}, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ3MjU0OnYy", "diffSide": "RIGHT", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMjoyNFrOF56KHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMjoyNFrOF56KHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NjAxMw==", "bodyText": "You could use more idiomatic hasSize(greaterThan(0)) here.", "url": "https://github.com/elastic/elasticsearch/pull/53821#discussion_r396266013", "createdAt": "2020-03-23T08:02:24Z", "author": {"login": "przemekwitek"}, "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java", "diffHunk": "@@ -107,7 +106,9 @@ public void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws\n             assertThat(getFieldValue(resultsObject, predictedClassField), is(in(KEYWORD_FIELD_VALUES)));\n             assertThat(getFieldValue(resultsObject, \"is_training\"), is(destDoc.containsKey(KEYWORD_FIELD)));\n             assertTopClasses(resultsObject, 2, KEYWORD_FIELD, KEYWORD_FIELD_VALUES);\n-            assertThat(resultsObject.keySet().stream().filter(k -> k.startsWith(\"feature_importance.\")).findAny().isPresent(), is(true));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray.size(), greaterThan(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cd8df470542a791a650b42d3dde5dfe93dc04a"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4256, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}