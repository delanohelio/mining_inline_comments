{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDcwOTc1", "number": 64374, "title": "Add `runtime_mappings` to search request", "bodyText": "This adds a way to specify the runtime_mappings on a search request\nwhich are always \"runtime\" fields. It looks like:\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\", \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\", \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\", \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\",\n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n\nNOTE:\nIf we have to send a search request with runtime mappings to a node that\ndoesn't support runtime mappings at all then we'll fail the search\nrequest entirely. The alternative would be to not send those runtime\nmappings and let the node fail the search request with an \"unknown field\"\nerror. I believe this is would be hard to surprising because you defined\nthe field in the search request.\nNOTE:\nIt isn't obvious but you can also use runtime_mappings to override fields\ninside objects by naming the runtime fields with . in them. Like this:\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -uelastic:password -XPOST -HContent-Type:application/json localhost:9200/test/_bulk?refresh -d'\n{\"index\":{}}\n{\"name\": {\"first\": \"Andrew\", \"last\": \"Wiggin\"}}\n{\"index\":{}}\n{\"name\": {\"first\": \"Julian\", \"last\": \"Delphiki\", \"suffix\": \"II\"}}\n'\n\ncurl -uelastic:password -XPOST -HContent-Type:application/json localhost:9200/test/_search?pretty -d'{\n  \"runtime_mappings\": {\n    \"name.first\": {\n      \"type\": \"keyword\",\n      \"script\": \"if (\\\"Wiggin\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Ender\\\");} else if (\\\"Delphiki\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Bean\\\");}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"name.first\": \"Bean\"\n    }\n  }\n}'\n\nRelates to #59332", "createdAt": "2020-10-29T18:19:48Z", "url": "https://github.com/elastic/elasticsearch/pull/64374", "merged": true, "mergeCommit": {"oid": "a08b52f3bd736fd741a38f3a4493a183c2ad8a69"}, "closed": true, "closedAt": "2020-11-10T17:39:00Z", "author": {"login": "nik9000"}, "timelineItems": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXWWaSgBqjM5Mzc3Njk3MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbLSplgFqTUyNzMzNTE4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72b77689e7df8aff293ee9f40f42242b9a0604d5", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/72b77689e7df8aff293ee9f40f42242b9a0604d5", "committedDate": "2020-10-29T18:16:17Z", "message": "Add `runtime_mappings` to search request\n\nThis adds a way to specify the `runtime_mappings` on a search request\nwhich are always \"runtime\" fields. It looks like:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\", \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\", \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\", \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\",\n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n```"}, "afterCommit": {"oid": "706da74631d905f928fa92d4a633356307f49871", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/706da74631d905f928fa92d4a633356307f49871", "committedDate": "2020-10-29T18:21:54Z", "message": "Add `runtime_mappings` to search request\n\nThis adds a way to specify the `runtime_mappings` on a search request\nwhich are always \"runtime\" fields. It looks like:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\", \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\", \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\", \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\",\n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706da74631d905f928fa92d4a633356307f49871", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/706da74631d905f928fa92d4a633356307f49871", "committedDate": "2020-10-29T18:21:54Z", "message": "Add `runtime_mappings` to search request\n\nThis adds a way to specify the `runtime_mappings` on a search request\nwhich are always \"runtime\" fields. It looks like:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\", \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\", \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\", \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\",\n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n```"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTE1NjM3", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-520515637", "createdAt": "2020-10-30T09:52:18Z", "commit": {"oid": "706da74631d905f928fa92d4a633356307f49871"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo1MjoxOFrOHrH-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo1MzoxOFrOHrIAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MTU2Mw==", "bodyText": "nice tricks! ;)", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r514981563", "createdAt": "2020-10-30T09:52:18Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -522,4 +592,28 @@ public SimilarityService getSimilarityService() {\n     public BitsetFilterCache getBitsetFilterCache() {\n         return bitsetFilterCache;\n     }\n+\n+    private static Map<String, MappedFieldType> parseRuntimeMappings(\n+        Map<String, Object> mappings,\n+        Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier,\n+        IndexSettings indexSettings\n+    ) {\n+        Map<String, MappedFieldType> runtimeMappings = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : mappings.entrySet()) {\n+            String field = entry.getKey();\n+            if (entry.getValue() instanceof Map == false) {\n+                throw new ElasticsearchParseException(\"runtime mappings must be a map type\");\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> node = (Map<String, Object>) entry.getValue();\n+            // Replace the type until we have native support for the runtime section \n+            Object oldRuntimeType = node.put(\"runtime_type\", node.remove(\"type\"));\n+            if (oldRuntimeType != null) {\n+                throw new ElasticsearchParseException(\"use [type] in [runtime_mappings] instead of [runtime_type]\");\n+            }\n+            runtimeMappings.put(field, buildFieldType(\"runtime\", field, node, parserContextSupplier.get(), indexSettings));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706da74631d905f928fa92d4a633356307f49871"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MjA4MQ==", "bodyText": "When I looked I think that this one gets a search source builder, so it seemed that runtime mappings can be specified, hence we should use them?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r514982081", "createdAt": "2020-10-30T09:53:18Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java", "diffHunk": "@@ -233,7 +235,8 @@ protected MultiSearchResponse shardOperation(Request request, ShardId shardId) t\n                     shardId.id(),\n                     searcher,\n                     () -> { throw new UnsupportedOperationException(); },\n-                    null\n+                    null,\n+                    emptyMap()  // NOCOMMIT is it right not to use the runtime mappings?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706da74631d905f928fa92d4a633356307f49871"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4a4e9df5089732a15714a26ce3db31f0986455", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/bf4a4e9df5089732a15714a26ce3db31f0986455", "committedDate": "2020-11-02T14:53:05Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff7575018d5ac8b0c64ea05f4c1ed9961930e2b5", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/ff7575018d5ac8b0c64ea05f4c1ed9961930e2b5", "committedDate": "2020-11-02T21:09:31Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5104963d32c08a6527b2ed503b4b528f3e25dbc7", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/5104963d32c08a6527b2ed503b4b528f3e25dbc7", "committedDate": "2020-11-02T23:01:22Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "730cf922c553b19c5934adf2f5cfb8305047887c", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/730cf922c553b19c5934adf2f5cfb8305047887c", "committedDate": "2020-11-03T19:38:42Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80fc471e115fffd5abd7be51e180754b4ebff994", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/80fc471e115fffd5abd7be51e180754b4ebff994", "committedDate": "2020-11-04T14:45:54Z", "message": "Some of my own tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a94ccd6d03e96d0d7e1cf8ad48403ae293cfe33d", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/a94ccd6d03e96d0d7e1cf8ad48403ae293cfe33d", "committedDate": "2020-11-04T15:11:59Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a65bada63e92183fada05c942a4862cf2e9410", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c0a65bada63e92183fada05c942a4862cf2e9410", "committedDate": "2020-11-04T15:12:37Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66d854ab37e7700d81de2f57b614caa60281ccdf", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/66d854ab37e7700d81de2f57b614caa60281ccdf", "committedDate": "2020-11-04T14:01:38Z", "message": "Some of my own tests"}, "afterCommit": {"oid": "19f9746a73645cce3ddf626f90f0df03aa2f409a", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/19f9746a73645cce3ddf626f90f0df03aa2f409a", "committedDate": "2020-11-04T15:30:00Z", "message": "Unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f9746a73645cce3ddf626f90f0df03aa2f409a", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/19f9746a73645cce3ddf626f90f0df03aa2f409a", "committedDate": "2020-11-04T15:30:00Z", "message": "Unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d0c9c26a1e56134a29c3084109084290c4075f", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/05d0c9c26a1e56134a29c3084109084290c4075f", "committedDate": "2020-11-04T15:33:00Z", "message": "Drop nocommit\n\nTons of callers, we need this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747220e6658b3bc0d88649f5d085b34931271045", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/747220e6658b3bc0d88649f5d085b34931271045", "committedDate": "2020-11-04T15:39:29Z", "message": "Drop another nocommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8000de1d49d990852be698a8b839158a275fba71", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/8000de1d49d990852be698a8b839158a275fba71", "committedDate": "2020-11-04T19:41:27Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d09159297a96680da6dc3c6feff91acc9dfab8", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/a1d09159297a96680da6dc3c6feff91acc9dfab8", "committedDate": "2020-11-04T22:42:51Z", "message": "Can we do dynamic mappings?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7cae13d68ff809106cd1bb52bf636dc708ac73", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/0d7cae13d68ff809106cd1bb52bf636dc708ac73", "committedDate": "2020-11-05T01:09:29Z", "message": "Add runtime mappings to collapse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17eff0d7389819cb8c8efd3ea31da662e5af3fa", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/b17eff0d7389819cb8c8efd3ea31da662e5af3fa", "committedDate": "2020-11-05T01:16:35Z", "message": "Fixup dynamic mapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e95ed207ae4f74079bcd3a02b91bd698629a5916", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/e95ed207ae4f74079bcd3a02b91bd698629a5916", "committedDate": "2020-11-05T13:55:53Z", "message": "Handle _all"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzQzOTAx", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-524343901", "createdAt": "2020-11-05T14:55:56Z", "commit": {"oid": "05d0c9c26a1e56134a29c3084109084290c4075f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDo1NTo1NlrOHuHIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDo1NTo1NlrOHuHIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExMzQwNg==", "bodyText": "how are you planning to address this? Should the method in MapperService take the runtime mappings as argument or is that too intrusive of a change?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518113406", "createdAt": "2020-11-05T14:55:56Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -243,7 +301,21 @@ public boolean hasMappings() {\n      * type then the fields will be returned with a type prefix.\n      */\n     public Set<String> simpleMatchToIndexNames(String pattern) {\n-        return mapperService.simpleMatchToFullName(pattern);\n+        // TODO remove the duplication with MapperService and FieldTypeLookup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d0c9c26a1e56134a29c3084109084290c4075f"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2100371ffd6e03a55a0fd3e1c84330618ab6f4e", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/c2100371ffd6e03a55a0fd3e1c84330618ab6f4e", "committedDate": "2020-11-05T16:46:05Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685085695d0ce26ba55d0ba290755b5eabdd0311", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/685085695d0ce26ba55d0ba290755b5eabdd0311", "committedDate": "2020-11-05T16:59:35Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88926d44ed9992615319b4d52c096d98be2d8d61", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/88926d44ed9992615319b4d52c096d98be2d8d61", "committedDate": "2020-11-05T17:12:56Z", "message": "Missing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d3e7d69514af5ea489ac4a40fc33c67baa786b", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/99d3e7d69514af5ea489ac4a40fc33c67baa786b", "committedDate": "2020-11-05T17:25:01Z", "message": "Handle matching many"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88be56b1c07bb4312aee68b7985a97a6302d0b30", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/88be56b1c07bb4312aee68b7985a97a6302d0b30", "committedDate": "2020-11-05T17:40:36Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca23810487eb362c02f903f55b5961ad1d06640", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/7ca23810487eb362c02f903f55b5961ad1d06640", "committedDate": "2020-11-05T17:46:57Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458df74bc3de9800f7e73069ad9a6a2cbf83e46c", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/458df74bc3de9800f7e73069ad9a6a2cbf83e46c", "committedDate": "2020-11-05T17:50:25Z", "message": "precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f82f41ece7f5e6a94cebb1ac29df143a4d6c5245", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f82f41ece7f5e6a94cebb1ac29df143a4d6c5245", "committedDate": "2020-11-05T19:01:25Z", "message": "Fixup other test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f348d663d62b1422314cd20c84234d9b5f224e06", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f348d663d62b1422314cd20c84234d9b5f224e06", "committedDate": "2020-11-05T19:47:24Z", "message": "Fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf63463666ce7d1bf412991f833c3e0c3218f9b6", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/cf63463666ce7d1bf412991f833c3e0c3218f9b6", "committedDate": "2020-11-05T20:43:32Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0OTkwMTUz", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-524990153", "createdAt": "2020-11-06T09:34:30Z", "commit": {"oid": "cf63463666ce7d1bf412991f833c3e0c3218f9b6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNDozMFrOHumnqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNzowNlrOHumtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTI5MQ==", "bodyText": "We may find that #63572 helps here", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518629291", "createdAt": "2020-11-06T09:34:30Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/qa/core-with-search/build.gradle", "diffHunk": "@@ -0,0 +1,55 @@\n+apply plugin: 'elasticsearch.yaml-rest-test'\n+\n+dependencies {\n+  yamlRestTestImplementation xpackProject(\"plugin:runtime-fields:qa\")\n+}\n+\n+restResources {\n+  restApi {\n+    includeXpack 'async_search', 'graph', '*_point_in_time'\n+  }\n+  restTests {\n+    includeCore '*'\n+    includeXpack 'async_search', 'graph'\n+  }\n+}\n+\n+testClusters.yamlRestTest {\n+  testDistribution = 'DEFAULT'\n+  setting 'xpack.license.self_generated.type', 'trial'\n+}\n+\n+yamlRestTest {\n+  systemProperty 'tests.rest.suite',\n+    [\n+      'async_search',\n+//      'field_caps',    These two don't support runtime fields on the request. Should they?\n+//      'graph',\n+//      'msearch',       This one just doesn't have infrastructure to hack the runtime fields into place\n+      'search',\n+      'search.aggregation',\n+      'search.highlight',\n+      'search.inner_hits',\n+      'search_shards',\n+      'suggest',\n+    ].join(',')\n+  systemProperty 'tests.rest.blacklist',\n+    [\n+      /////// TO FIX ///////\n+      'search.highlight/40_keyword_ignore/Plain Highligher should skip highlighting ignored keyword values', // The plain highlighter is incompatible with runtime fields. Worth fixing?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf63463666ce7d1bf412991f833c3e0c3218f9b6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDA1Mg==", "bodyText": "I guess at some point we're going to need to integrate runtime fields into dynamic mappings in core code?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518630052", "createdAt": "2020-11-06T09:35:49Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.test.search;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.DateFieldMapper;\n+import org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;\n+import org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;\n+import org.elasticsearch.test.rest.yaml.section.ApiCallSection;\n+import org.elasticsearch.test.rest.yaml.section.ExecutableSection;\n+import org.elasticsearch.xpack.runtimefields.test.CoreTestTranslater;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * Runs elasticsearch's core rest tests disabling all mappings and replacing them\n+ * with runtime fields defined on the search request that load from {@code _source}. Tests\n+ * that configure the field in a way that are not supported by runtime fields are skipped.\n+ */\n+public class CoreTestsWithSearchRuntimeFieldsIT extends ESClientYamlSuiteTestCase {\n+    public CoreTestsWithSearchRuntimeFieldsIT(@Name(\"yaml\") ClientYamlTestCandidate testCandidate) {\n+        super(testCandidate);\n+    }\n+\n+    @Override\n+    protected boolean randomizeContentType() { // NOCOMMIT remove me\n+        return false;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> parameters() throws Exception {\n+        return new SearchRequestRuntimeFieldTranslater().parameters();\n+    }\n+\n+    /**\n+     * Translating the tests is fairly difficult here because instead of ES\n+     * tracking the mappings we have to track them. We don't have to do it as\n+     * well as ES, just well enough that we can decorate the search requests\n+     * with types that make most tests \"just work\".\n+     */\n+    private static class SearchRequestRuntimeFieldTranslater extends CoreTestTranslater {\n+        @Override\n+        protected Map<String, Object> dynamicTemplateFor(String type) {\n+            return dynamicTemplateToDisableRuntimeCompatibleFields(type);\n+        }\n+\n+        @Override\n+        protected Suite suite(ClientYamlTestCandidate candidate) {\n+            return new Suite(candidate) {\n+                private Map<String, Map<String, Map<String, Object>>> runtimeMappingsAfterSetup;\n+                private Map<String, Set<String>> mappedFieldsAfterSetup;\n+                private Map<String, Map<String, Map<String, Object>>> runtimeMappings;\n+                private Map<String, Set<String>> mappedFields;\n+\n+                @Override\n+                public boolean modifySections(List<ExecutableSection> executables) {\n+                    if (runtimeMappingsAfterSetup == null) {\n+                        // We're modifying the setup section\n+                        runtimeMappings = new HashMap<>();\n+                        mappedFields = new HashMap<>();\n+                        if (false == super.modifySections(executables)) {\n+                            return false;\n+                        }\n+                        runtimeMappingsAfterSetup = unmodifiableMap(runtimeMappings);\n+                        runtimeMappings = null;\n+                        mappedFieldsAfterSetup = unmodifiableMap(mappedFields);\n+                        mappedFields = null;\n+                        return true;\n+                    }\n+                    runtimeMappings = new HashMap<>(runtimeMappingsAfterSetup);\n+                    mappedFields = new HashMap<>(mappedFieldsAfterSetup);\n+                    return super.modifySections(executables);\n+                }\n+\n+                @Override\n+                protected boolean modifyMappingProperties(String index, Map<String, Object> properties) {\n+                    Map<String, Object> untouchedMapping = new HashMap<>();\n+                    Map<String, Map<String, Object>> runtimeMapping = new HashMap<>();\n+                    if (false == runtimeifyMappingProperties(properties, untouchedMapping, runtimeMapping)) {\n+                        return false;\n+                    }\n+                    properties.clear();\n+                    properties.putAll(untouchedMapping);\n+                    mappedFields.put(index, untouchedMapping.keySet());\n+                    runtimeMappings.put(index, runtimeMapping);\n+                    return true;\n+                }\n+\n+                @Override\n+                protected boolean modifySearch(ApiCallSection search) {\n+                    if (search.getBodies().isEmpty()) {\n+                        search.addBody(new HashMap<>());\n+                    }\n+                    for (Map<String, Object> body : search.getBodies()) {\n+                        Map<?, ?> runtimeMapping = runtimeMappings(search.getParams().get(\"index\"));\n+                        if (runtimeMapping == null) {\n+                            return false;\n+                        }\n+                        body.put(\"runtime_mappings\", runtimeMapping);\n+                    }\n+                    return true;\n+                }\n+\n+                private Map<?, ?> runtimeMappings(String index) {\n+                    if (index == null) {\n+                        return mergeMappings(new String[] { \"*\" });\n+                    }\n+                    String[] patterns = Arrays.stream(index.split(\",\")).map(m -> m.equals(\"_all\") ? \"*\" : m).toArray(String[]::new);\n+                    if (patterns.length == 0 && Regex.isSimpleMatchPattern(patterns[0])) {\n+                        return runtimeMappings.get(patterns[0]);\n+                    }\n+                    return mergeMappings(patterns);\n+                }\n+\n+                private Map<?, ?> mergeMappings(String[] patterns) {\n+                    Map<String, Map<String, Object>> merged = new HashMap<>();\n+                    for (Map.Entry<String, Map<String, Map<String, Object>>> indexEntry : runtimeMappings.entrySet()) {\n+                        if (false == Regex.simpleMatch(patterns, indexEntry.getKey())) {\n+                            continue;\n+                        }\n+                        for (Map.Entry<String, Map<String, Object>> field : indexEntry.getValue().entrySet()) {\n+                            Map<String, Object> mergedConfig = merged.get(field.getKey());\n+                            if (mergedConfig == null) {\n+                                merged.put(field.getKey(), field.getValue());\n+                            } else if (false == mergedConfig.equals(field.getValue())) {\n+                                // The two indices have different runtime mappings for a field so we have to give up on running the test.\n+                                return null;\n+                            }\n+                        }\n+                    }\n+                    for (Map.Entry<String, Set<String>> indexEntry : mappedFields.entrySet()) {\n+                        if (false == Regex.simpleMatch(patterns, indexEntry.getKey())) {\n+                            continue;\n+                        }\n+                        for (String mappedField : indexEntry.getValue()) {\n+                            if (merged.containsKey(mappedField)) {\n+                                // We have a runtime mappings for a field *and* regular mapping. We can't make this test work so skip it.\n+                                return null;\n+                            }\n+                        }\n+                    }\n+                    return merged;\n+                }\n+\n+                @Override\n+                protected boolean handleIndex(IndexRequest index) {\n+                    /*\n+                     * Ok! Let's reverse engineer dynamic mapping. Sort of. We're\n+                     * really just looking to figure out which of the runtime fields\n+                     * is \"close enough\" to what dynamic mapping would do.\n+                     */\n+                    if (index.getPipeline() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf63463666ce7d1bf412991f833c3e0c3218f9b6"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDc4NQ==", "bodyText": "This is just awesome.  So well done.", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518630785", "createdAt": "2020-11-06T09:37:06Z", "author": {"login": "romseygeek"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/10_keyword.yml", "diffHunk": "@@ -360,3 +360,79 @@ setup:\n   - match: { aggregations.to-users.users.hits.hits.2._index: test }\n   - match: { aggregations.to-users.users.hits.hits.2._nested.field: users }\n   - match: { aggregations.to-users.users.hits.hits.2._nested.offset: 1 }\n+\n+---\n+\"fetch defined on search request\":\n+  - do:\n+      search:\n+        index: sensor\n+        body:\n+          runtime_mappings:\n+            voltage_rating:\n+              type: keyword\n+              script: |\n+                double v = doc['voltage'].value;\n+                if (v < 4.8) {\n+                  emit('low');\n+                } else if (v > 5.2) {\n+                  emit('high');\n+                } else {\n+                  emit('ok');\n+                }\n+          fields: [voltage_rating]\n+          sort: timestamp\n+  - match: {hits.total.value: 6}\n+  - match: {hits.hits.0._source.voltage: 4.0}\n+  - match: {hits.hits.0.fields.voltage_rating: [low]}\n+\n+\n+---\n+\"match defined on search request\":\n+  - do:\n+      search:\n+        index: sensor\n+        body:\n+          runtime_mappings:\n+            voltage.rating:\n+              type: keyword\n+              script: |\n+                double v = doc['voltage'].value;\n+                if (v < 4.8) {\n+                  emit('low');\n+                } else if (v > 5.2) {\n+                  emit('high');\n+                } else {\n+                  emit('ok');\n+                }\n+          query:\n+            match:\n+              voltage.rating: ok\n+          sort: timestamp\n+  - match: {hits.total.value: 2}\n+  - match: {hits.hits.0._source.voltage: 5.1}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf63463666ce7d1bf412991f833c3e0c3218f9b6"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5f32ebd26cc46bb2ba1b951854f904811c6135", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/fe5f32ebd26cc46bb2ba1b951854f904811c6135", "committedDate": "2020-11-06T13:27:42Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67736fb6a595295c96e3fb3120d393ca40eeb0de", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/67736fb6a595295c96e3fb3120d393ca40eeb0de", "committedDate": "2020-11-06T14:01:27Z", "message": "Extra test!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bd10285fb9c693f615dd3690b9f0f8d6154b660", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3bd10285fb9c693f615dd3690b9f0f8d6154b660", "committedDate": "2020-11-06T15:15:45Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af11288dbd1c6febed3554f387b9d92967d80885", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/af11288dbd1c6febed3554f387b9d92967d80885", "committedDate": "2020-11-06T15:55:20Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/139ef5f0542361ff15af2dfd20d11a53c6c23c67", "committedDate": "2020-11-06T15:58:25Z", "message": "More test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTQ2NjY4", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526146668", "createdAt": "2020-11-09T11:09:09Z", "commit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTowOTowOVrOHvpp1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NTo1MlrOHvq5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyNzU3NA==", "bodyText": "Not extremely sure, but is it worth removing this constructor?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519727574", "createdAt": "2020-11-09T11:09:09Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -122,16 +131,63 @@ public QueryShardContext(int shardId,\n                              BooleanSupplier allowExpensiveQueries,\n                              ValuesSourceRegistry valuesSourceRegistry) {\n         this(shardId, indexSettings, bigArrays, bitsetFilterCache, indexFieldDataLookup, mapperService, similarityService,\n-                scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, indexNameMatcher,\n-                new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),\n-                        indexSettings.getIndex().getUUID()), allowExpensiveQueries, valuesSourceRegistry);\n+                scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, clusterAlias,\n+                indexNameMatcher, allowExpensiveQueries, valuesSourceRegistry, emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNjA1MA==", "bodyText": "why do we need to mock mapper service now in some tests compared to before?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519736050", "createdAt": "2020-11-09T11:24:05Z", "author": {"login": "javanna"}, "path": "server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java", "diffHunk": "@@ -231,7 +233,7 @@ public void testRangeQueryWithIndexSort() {\n         IndexSettings indexSettings = new IndexSettings(indexMetadata, settings);\n \n         QueryShardContext context = new QueryShardContext(0, indexSettings,\n-            BigArrays.NON_RECYCLING_INSTANCE, null, null, null, null, null, xContentRegistry(), writableRegistry(),\n+            BigArrays.NON_RECYCLING_INSTANCE, null, null, mock(MapperService.class), null, null, xContentRegistry(), writableRegistry(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczOTYyMQ==", "bodyText": "you meant randomRuntimeMappings ?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519739621", "createdAt": "2020-11-09T11:30:27Z", "author": {"login": "javanna"}, "path": "server/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java", "diffHunk": "@@ -91,7 +91,22 @@ protected SearchSourceBuilder createSearchSourceBuilder() {\n                 SuggestBuilderTests::randomSuggestBuilder,\n                 QueryRescorerBuilderTests::randomRescoreBuilder,\n                 randomExtBuilders,\n-                CollapseBuilderTests::randomCollapseBuilder);\n+                CollapseBuilderTests::randomCollapseBuilder,\n+                AbstractSearchTestCase::randomRandomMappings);\n+    }\n+\n+    public static Map<String, Object> randomRandomMappings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0MDk1NA==", "bodyText": "can you expand on why?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519740954", "createdAt": "2020-11-09T11:32:55Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java", "diffHunk": "@@ -233,7 +235,8 @@ protected MultiSearchResponse shardOperation(Request request, ShardId shardId) t\n                     shardId.id(),\n                     searcher,\n                     () -> { throw new UnsupportedOperationException(); },\n-                    null\n+                    null,\n+                    emptyMap()  // Enrich doesn't support defining runtime fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0MzQwNQ==", "bodyText": "arent we excluding field_caps above already?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519743405", "createdAt": "2020-11-09T11:37:27Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/qa/core-with-search/build.gradle", "diffHunk": "@@ -0,0 +1,55 @@\n+apply plugin: 'elasticsearch.yaml-rest-test'\n+\n+dependencies {\n+  yamlRestTestImplementation xpackProject(\"plugin:runtime-fields:qa\")\n+}\n+\n+restResources {\n+  restApi {\n+    includeXpack 'async_search', 'graph', '*_point_in_time'\n+  }\n+  restTests {\n+    includeCore '*'\n+    includeXpack 'async_search', 'graph'\n+  }\n+}\n+\n+testClusters.yamlRestTest {\n+  testDistribution = 'DEFAULT'\n+  setting 'xpack.license.self_generated.type', 'trial'\n+}\n+\n+yamlRestTest {\n+  systemProperty 'tests.rest.suite',\n+    [\n+      'async_search',\n+//      'field_caps',    These two don't support runtime fields on the request. Should they?\n+//      'graph',\n+//      'msearch',       This one just doesn't have infrastructure to hack the runtime fields into place\n+      'search',\n+      'search.aggregation',\n+      'search.highlight',\n+      'search.inner_hits',\n+      'search_shards',\n+      'suggest',\n+    ].join(',')\n+  systemProperty 'tests.rest.blacklist',\n+    [\n+      /////// TO FIX ///////\n+      'search.highlight/40_keyword_ignore/Plain Highligher should skip highlighting ignored keyword values', // The plain highlighter is incompatible with runtime fields. Worth fixing?\n+      'search/115_multiple_field_collapsing/two levels fields collapsing', // Broken. Gotta fix.\n+      'field_caps/30_filter/Field caps with index filter', // We don't support filtering field caps on runtime fields. What should we do?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0NDExNQ==", "bodyText": "can this be removed now?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519744115", "createdAt": "2020-11-09T11:38:49Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.test.search;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.DateFieldMapper;\n+import org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;\n+import org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;\n+import org.elasticsearch.test.rest.yaml.section.ApiCallSection;\n+import org.elasticsearch.test.rest.yaml.section.ExecutableSection;\n+import org.elasticsearch.xpack.runtimefields.test.CoreTestTranslater;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * Runs elasticsearch's core rest tests disabling all mappings and replacing them\n+ * with runtime fields defined on the search request that load from {@code _source}. Tests\n+ * that configure the field in a way that are not supported by runtime fields are skipped.\n+ */\n+public class CoreTestsWithSearchRuntimeFieldsIT extends ESClientYamlSuiteTestCase {\n+    public CoreTestsWithSearchRuntimeFieldsIT(@Name(\"yaml\") ClientYamlTestCandidate testCandidate) {\n+        super(testCandidate);\n+    }\n+\n+    @Override\n+    protected boolean randomizeContentType() { // NOCOMMIT remove me", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODAxOA==", "bodyText": "do we also want to test replacing a field within an existing object?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519748018", "createdAt": "2020-11-09T11:45:52Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/src/test/resources/rest-api-spec/test/runtime_fields/10_keyword.yml", "diffHunk": "@@ -360,3 +360,79 @@ setup:\n   - match: { aggregations.to-users.users.hits.hits.2._index: test }\n   - match: { aggregations.to-users.users.hits.hits.2._nested.field: users }\n   - match: { aggregations.to-users.users.hits.hits.2._nested.offset: 1 }\n+\n+---\n+\"fetch defined on search request\":\n+  - do:\n+      search:\n+        index: sensor\n+        body:\n+          runtime_mappings:\n+            voltage_rating:\n+              type: keyword\n+              script: |\n+                double v = doc['voltage'].value;\n+                if (v < 4.8) {\n+                  emit('low');\n+                } else if (v > 5.2) {\n+                  emit('high');\n+                } else {\n+                  emit('ok');\n+                }\n+          fields: [voltage_rating]\n+          sort: timestamp\n+  - match: {hits.total.value: 6}\n+  - match: {hits.hits.0._source.voltage: 4.0}\n+  - match: {hits.hits.0.fields.voltage_rating: [low]}\n+\n+\n+---\n+\"match defined on search request\":\n+  - do:\n+      search:\n+        index: sensor\n+        body:\n+          runtime_mappings:\n+            voltage.rating:\n+              type: keyword\n+              script: |\n+                double v = doc['voltage'].value;\n+                if (v < 4.8) {\n+                  emit('low');\n+                } else if (v > 5.2) {\n+                  emit('high');\n+                } else {\n+                  emit('ok');\n+                }\n+          query:\n+            match:\n+              voltage.rating: ok\n+          sort: timestamp\n+  - match: {hits.total.value: 2}\n+  - match: {hits.hits.0._source.voltage: 5.1}\n+\n+---\n+\"search glob defined on search request\":\n+  - do:\n+      search:\n+        index: sensor\n+        body:\n+          runtime_mappings:\n+            voltage.rating:\n+              type: keyword\n+              script: |\n+                double v = doc['voltage'].value;\n+                if (v < 4.8) {\n+                  emit('low');\n+                } else if (v > 5.2) {\n+                  emit('high');\n+                } else {\n+                  emit('ok');\n+                }\n+          query:\n+            simple_query_string:\n+              fields: [voltage.*]\n+              query: ok\n+          sort: timestamp\n+  - match: {hits.total.value: 2}\n+  - match: {hits.hits.0._source.voltage: 5.1}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a50d17a0b89d43e755422220f4254cb6eac1da0a", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/a50d17a0b89d43e755422220f4254cb6eac1da0a", "committedDate": "2020-11-09T14:39:52Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzYzMTQ4", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526363148", "createdAt": "2020-11-09T15:22:07Z", "commit": {"oid": "b336ff3f87026cb3d9481f74b16ba9841bdab266"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyMjowN1rOHvz0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyMjowN1rOHvz0Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5NDA2Mw==", "bodyText": "I'll revert this one!", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519894063", "createdAt": "2020-11-09T15:22:07Z", "author": {"login": "nik9000"}, "path": "rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/340_geo_distance.yml", "diffHunk": "@@ -1,15 +1,15 @@\n setup:\n   - do:\n       indices.create:\n-        index: test\n+        index: test_geoadsf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b336ff3f87026cb3d9481f74b16ba9841bdab266"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/b336ff3f87026cb3d9481f74b16ba9841bdab266", "committedDate": "2020-11-09T15:23:23Z", "message": "Iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f6d69aa3cdc93145955ee82d11ccfcd9735ff4", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f0f6d69aa3cdc93145955ee82d11ccfcd9735ff4", "committedDate": "2020-11-09T15:24:45Z", "message": "Fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "218314e03d602f35d297a25d832d6db3db99fddd", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/218314e03d602f35d297a25d832d6db3db99fddd", "committedDate": "2020-11-09T15:26:17Z", "message": "remove TODO\n\nnot much duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ebadc911f207bad26818d08010b98ee17a4518", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/93ebadc911f207bad26818d08010b98ee17a4518", "committedDate": "2020-11-09T15:27:37Z", "message": "Drop noop change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1843ddbdabedec91ab2fdbb9313fa03e40dc7a2", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/a1843ddbdabedec91ab2fdbb9313fa03e40dc7a2", "committedDate": "2020-11-09T16:01:21Z", "message": "Clean up build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34abd68240e9111965339454ee5361fff682cac6", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/34abd68240e9111965339454ee5361fff682cac6", "committedDate": "2020-11-09T16:25:22Z", "message": "Fail if sending runtime fields to old"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b36f4e02daae265c44e7090e65e81d8de56aab0", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/8b36f4e02daae265c44e7090e65e81d8de56aab0", "committedDate": "2020-11-09T15:46:46Z", "message": "Clean up build"}, "afterCommit": {"oid": "34abd68240e9111965339454ee5361fff682cac6", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/34abd68240e9111965339454ee5361fff682cac6", "committedDate": "2020-11-09T16:25:22Z", "message": "Fail if sending runtime fields to old"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDM3Njg5", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526437689", "createdAt": "2020-11-09T16:35:57Z", "commit": {"oid": "34abd68240e9111965339454ee5361fff682cac6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozNTo1N1rOHv3M9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozNTo1N1rOHv3M9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0OTU1OQ==", "bodyText": "Maybe call this out as Version.V_8_0_0 explicitly so it doesn't start failing once master is on v9?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519949559", "createdAt": "2020-11-09T16:35:57Z", "author": {"login": "romseygeek"}, "path": "server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java", "diffHunk": "@@ -93,16 +92,18 @@ private static void assertParseSearchSource(SearchSourceBuilder testBuilder, XCo\n     }\n \n     public void testSerialization() throws IOException {\n-        SearchSourceBuilder testBuilder = createSearchSourceBuilder();\n-        try (BytesStreamOutput output = new BytesStreamOutput()) {\n-            testBuilder.writeTo(output);\n-            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {\n-                SearchSourceBuilder deserializedBuilder = new SearchSourceBuilder(in);\n-                assertEquals(deserializedBuilder, testBuilder);\n-                assertEquals(deserializedBuilder.hashCode(), testBuilder.hashCode());\n-                assertNotSame(deserializedBuilder, testBuilder);\n-            }\n-        }\n+        SearchSourceBuilder original = createSearchSourceBuilder();\n+        SearchSourceBuilder copy = copyBuilder(original);\n+        assertEquals(copy, original);\n+        assertEquals(copy.hashCode(), original.hashCode());\n+        assertNotSame(copy, original);\n+    }\n+\n+    public void testSerializingWithRuntimeFieldsBeforeSupportedThrows() {\n+        SearchSourceBuilder original = new SearchSourceBuilder().runtimeMappings(randomRuntimeMappings());\n+        Version v = Version.CURRENT.minimumCompatibilityVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34abd68240e9111965339454ee5361fff682cac6"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDQ5MjMw", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526449230", "createdAt": "2020-11-09T16:45:34Z", "commit": {"oid": "34abd68240e9111965339454ee5361fff682cac6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0NTozNFrOHv3qOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0NTozNFrOHv3qOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzA1MQ==", "bodyText": "I was wondering about this line: is it good also for runtime fields?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519957051", "createdAt": "2020-11-09T16:45:34Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -287,12 +363,21 @@ public boolean isSourceEnabled() {\n      * Generally used to handle unmapped fields in the context of sorting.\n      */\n     public MappedFieldType buildAnonymousFieldType(String type) {\n-        final Mapper.TypeParser.ParserContext parserContext = mapperService.parserContext();\n+        return buildFieldType(type, \"__anonymous_\" + type, Collections.emptyMap(), mapperService.parserContext(), indexSettings);\n+    }\n+\n+    private static MappedFieldType buildFieldType(\n+        String type,\n+        String field,\n+        Map<String, Object> node,\n+        Mapper.TypeParser.ParserContext parserContext,\n+        IndexSettings indexSettings\n+    ) {\n         Mapper.TypeParser typeParser = parserContext.typeParser(type);\n         if (typeParser == null) {\n             throw new IllegalArgumentException(\"No mapper found for type [\" + type + \"]\");\n         }\n-        final Mapper.Builder builder = typeParser.parse(\"__anonymous_\" + type, Collections.emptyMap(), parserContext);\n+        Mapper.Builder builder = typeParser.parse(field, node, parserContext);\n         Mapper mapper = builder.build(new ContentPath(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34abd68240e9111965339454ee5361fff682cac6"}, "originalPosition": 196}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f91f5670c613baec68bbfb906e001f19e4bee97d", "committedDate": "2020-11-09T16:52:01Z", "message": "Pin version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDU5ODY0", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526459864", "createdAt": "2020-11-09T16:56:55Z", "commit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1Njo1NVrOHv4Vrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1Njo1NVrOHv4Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2ODE3NA==", "bodyText": "shall we initialize it with empty list and make sure that it can never be null, then we can remove the boolean flag in the serialization methods?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519968174", "createdAt": "2020-11-09T16:56:55Z", "author": {"login": "javanna"}, "path": "server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java", "diffHunk": "@@ -191,6 +193,8 @@ public static HighlightBuilder highlight() {\n \n     private PointInTimeBuilder pointInTimeBuilder = null;\n \n+    private Map<String, Object> runtimeMappings = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDY0ODg5", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526464889", "createdAt": "2020-11-09T17:02:14Z", "commit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMjoxNFrOHv4kmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMjoxNFrOHv4kmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MTk5Mw==", "bodyText": "can you extract this behaviour to the description of the PR so it is highlighted? I think it makes sense but it differs from how we've done these things in the past.", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519971993", "createdAt": "2020-11-09T17:02:14Z", "author": {"login": "javanna"}, "path": "server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java", "diffHunk": "@@ -93,16 +92,18 @@ private static void assertParseSearchSource(SearchSourceBuilder testBuilder, XCo\n     }\n \n     public void testSerialization() throws IOException {\n-        SearchSourceBuilder testBuilder = createSearchSourceBuilder();\n-        try (BytesStreamOutput output = new BytesStreamOutput()) {\n-            testBuilder.writeTo(output);\n-            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {\n-                SearchSourceBuilder deserializedBuilder = new SearchSourceBuilder(in);\n-                assertEquals(deserializedBuilder, testBuilder);\n-                assertEquals(deserializedBuilder.hashCode(), testBuilder.hashCode());\n-                assertNotSame(deserializedBuilder, testBuilder);\n-            }\n-        }\n+        SearchSourceBuilder original = createSearchSourceBuilder();\n+        SearchSourceBuilder copy = copyBuilder(original);\n+        assertEquals(copy, original);\n+        assertEquals(copy.hashCode(), original.hashCode());\n+        assertNotSame(copy, original);\n+    }\n+\n+    public void testSerializingWithRuntimeFieldsBeforeSupportedThrows() {\n+        SearchSourceBuilder original = new SearchSourceBuilder().runtimeMappings(randomRuntimeMappings());\n+        Version v = Version.V_8_0_0.minimumCompatibilityVersion();\n+        Exception e = expectThrows(IllegalArgumentException.class, () -> copyBuilder(original, v));\n+        assertThat(e.getMessage(), equalTo(\"Versions before 8.0.0 don't support [runtime_mappings] and search was sent to [\" + v + \"]\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDY1NzAz", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-526465703", "createdAt": "2020-11-09T17:03:05Z", "commit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMzowNVrOHv4m8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMzowNVrOHv4m8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MjU5NQ==", "bodyText": "you have expanded the comment but not the why :) What made you decide that enrich does not support runtime fields defined in the search request?", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519972595", "createdAt": "2020-11-09T17:03:05Z", "author": {"login": "javanna"}, "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java", "diffHunk": "@@ -229,11 +231,18 @@ protected MultiSearchResponse shardOperation(Request request, ShardId shardId) t\n             final IndexShard indexShard = indicesService.getShardOrNull(shardId);\n             try (Engine.Searcher searcher = indexShard.acquireSearcher(\"enrich_msearch\")) {\n                 final FieldsVisitor visitor = new FieldsVisitor(true);\n+                /*\n+                 * Enrich doesn't support defining runtime fields in the search", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2d8e2045a6eb6ba90933c9e5e152035d2492d4b", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/a2d8e2045a6eb6ba90933c9e5e152035d2492d4b", "committedDate": "2020-11-09T17:32:48Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19c2c1cc3b5d468a2479f3d62f5d66953b54425", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f19c2c1cc3b5d468a2479f3d62f5d66953b54425", "committedDate": "2020-11-09T17:52:00Z", "message": "Default to emptyMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "993e784ade5ce7c2522cfe9c5d136bff1c475902", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/993e784ade5ce7c2522cfe9c5d136bff1c475902", "committedDate": "2020-11-09T17:58:25Z", "message": "Merge branch 'master' into runtime_mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862d02adbadba602aebcaaf6bb04fe122bde11ce", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/862d02adbadba602aebcaaf6bb04fe122bde11ce", "committedDate": "2020-11-09T18:08:31Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a26fe4a0671555d1cf14bf04535e79f7b9e9b38", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/3a26fe4a0671555d1cf14bf04535e79f7b9e9b38", "committedDate": "2020-11-09T18:10:44Z", "message": "iter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f66b3e2024f2628451141eaa7e3be9b3c61c8d41", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/f66b3e2024f2628451141eaa7e3be9b3c61c8d41", "committedDate": "2020-11-09T19:08:07Z", "message": "Put it back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dfb44fe9a5b2b01cb42b56da45b9e8f9a3ff8dc", "author": {"user": {"login": "nik9000", "name": "Nik Everett"}}, "url": "https://github.com/elastic/elasticsearch/commit/6dfb44fe9a5b2b01cb42b56da45b9e8f9a3ff8dc", "committedDate": "2020-11-09T20:05:02Z", "message": "Fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzM1MTg3", "url": "https://github.com/elastic/elasticsearch/pull/64374#pullrequestreview-527335187", "createdAt": "2020-11-10T15:42:31Z", "commit": {"oid": "6dfb44fe9a5b2b01cb42b56da45b9e8f9a3ff8dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 842, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}