{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0ODY5NzYz", "number": 59086, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MDoyNFrOELyTew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MDoyNFrOELyTew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzkzOTc5OnYy", "diffSide": "RIGHT", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/analytics/InferenceAggIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MDoyNFrOGthVkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MDoyNFrOGthVkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NTI5Ng==", "bodyText": "I think it would be cool to also have a test that adds at least one option. Possibly feature_importance calculation.", "url": "https://github.com/elastic/elasticsearch/pull/59086#discussion_r450385296", "createdAt": "2020-07-06T17:50:24Z", "author": {"login": "benwtrent"}, "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/analytics/InferenceAggIT.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.analytics;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.ESRestHighLevelClientTestCase;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.indices.CreateIndexRequest;\n+import org.elasticsearch.client.ml.PutTrainedModelRequest;\n+import org.elasticsearch.client.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.client.ml.inference.TrainedModelDefinition;\n+import org.elasticsearch.client.ml.inference.TrainedModelInput;\n+import org.elasticsearch.client.ml.inference.trainedmodel.RegressionConfig;\n+import org.elasticsearch.client.ml.inference.trainedmodel.tree.Tree;\n+import org.elasticsearch.client.ml.inference.trainedmodel.tree.TreeNode;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class InferenceAggIT extends ESRestHighLevelClientTestCase {\n+\n+    public void testInferenceAgg() throws IOException {\n+\n+        // create a very simple decision tree with a root node and 2 leaves\n+        List<String> featureNames = Collections.singletonList(\"cost\");\n+        Tree.Builder builder = Tree.builder();\n+        builder.setFeatureNames(featureNames);\n+        TreeNode.Builder root = builder.addJunction(0, 0, true, 1.0);\n+        int leftChild = root.getLeftChild();\n+        int rightChild = root.getRightChild();\n+        builder.addLeaf(leftChild, 10.0);\n+        builder.addLeaf(rightChild, 20.0);\n+\n+        final String modelId = \"simple_regression\";\n+        putTrainedModel(modelId, featureNames, builder.build());\n+\n+        final String index = \"inference-test-data\";\n+        indexData(index);\n+\n+        TermsAggregationBuilder termsAgg = new TermsAggregationBuilder(\"fruit_type\").field(\"fruit\");\n+        AvgAggregationBuilder avgAgg = new AvgAggregationBuilder(\"avg_cost\").field(\"cost\");\n+        termsAgg.subAggregation(avgAgg);\n+\n+        Map<String, String> bucketPaths = new HashMap<>();\n+        bucketPaths.put(\"cost\", \"avg_cost\");\n+        InferencePipelineAggregationBuilder inferenceAgg = new InferencePipelineAggregationBuilder(\"infer\", modelId,  bucketPaths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f892291cfd06a8181f5e0879547a8fbf7a6f43e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2074, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}