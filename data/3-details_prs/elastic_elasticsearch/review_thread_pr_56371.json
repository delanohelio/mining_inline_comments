{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODE5MzY3", "number": 56371, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjozMFrOD6WH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNDo0MFrOD6XT1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA2NDc1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/LocalTimeOffset.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjozMFrOGSImAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjozMFrOGSImAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODM1Mg==", "bodyText": "I renamed this method because the name seemed wrong to me when I read it this time around.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421668352", "createdAt": "2020-05-07T17:22:30Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/LocalTimeOffset.java", "diffHunk": "@@ -91,7 +91,7 @@ public static Lookup lookup(ZoneId zone, long minUtcMillis, long maxUtcMillis) {\n      *\n      * @return a lookup function of {@code null} if none could be built \n      */\n-    public static LocalTimeOffset lookupFixedOffset(ZoneId zone) {\n+    public static LocalTimeOffset fixedOffset(ZoneId zone) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA2NzI3OnYy", "diffSide": "RIGHT", "path": "benchmarks/src/main/java/org/elasticsearch/common/RoundingBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzowOFrOGSInkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzowOFrOGSInkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODc1NA==", "bodyText": "These add support for time interval rounding.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421668754", "createdAt": "2020-05-07T17:23:08Z", "author": {"login": "nik9000"}, "path": "benchmarks/src/main/java/org/elasticsearch/common/RoundingBenchmark.java", "diffHunk": "@@ -60,8 +62,8 @@\n     @Param({ \"UTC\", \"America/New_York\" })\n     public String zone;\n \n-    @Param({ \"MONTH_OF_YEAR\", \"HOUR_OF_DAY\" })\n-    public String timeUnit;\n+    @Param({ \"calendar year\", \"calendar hour\", \"10d\", \"5d\", \"1h\" })\n+    public String interval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA2ODc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzozMlrOGSIodg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzozMlrOGSIodg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODk4Mg==", "bodyText": "Removed silly ; because it made my eyes hurt.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421668982", "createdAt": "2020-05-07T17:23:32Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -555,7 +555,7 @@ public long inGap(long localMillis, Gap gap) {\n             @Override\n             public long beforeGap(long localMillis, Gap gap) {\n                 return gap.previous().localToUtc(localMillis, this);\n-            };\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA2OTkzOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzo1NVrOGSIpQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMzo1NVrOGSIpQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTE4Ng==", "bodyText": "We don't need this any more because we can just ask the lookup if it is fixed across the bounds we need.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421669186", "createdAt": "2020-05-07T17:23:55Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -739,21 +739,15 @@ public final long nextRoundingValue(long utcMillis) {\n \n     static class TimeIntervalRounding extends Rounding {\n         static final byte ID = 2;\n-        /** Since, there is no offset of -1 ms, it is safe to use -1 for non-fixed timezones */\n-        private static final long TZ_OFFSET_NON_FIXED = -1;\n \n         private final long interval;\n         private final ZoneId timeZone;\n-        /** For fixed offset timezones, this is the offset in milliseconds, otherwise TZ_OFFSET_NON_FIXED */\n-        private final long fixedOffsetMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA3MTQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNDoxOVrOGSIqNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNDoxOVrOGSIqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTQzMA==", "bodyText": "And here we go with the actual change!", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421669430", "createdAt": "2020-05-07T17:24:19Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -773,88 +767,32 @@ public byte id() {\n \n         @Override\n         public Prepared prepare(long minUtcMillis, long maxUtcMillis) {\n-            return prepareForUnknown();\n+            long minLookup = minUtcMillis - interval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA3MzIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNDo1MlrOGSIrdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNDo1MlrOGSIrdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTc0OQ==", "bodyText": "This is pretty much what we used to do. It ain't fast, but we can make it faster later.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421669749", "createdAt": "2020-05-07T17:24:52Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -888,6 +826,133 @@ public boolean equals(Object obj) {\n         public String toString() {\n             return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";\n         }\n+\n+        private long roundKey(long value, long interval) {\n+            if (value < 0) {\n+                return (value - interval + 1) / interval;\n+            } else {\n+                return value / interval;\n+            }\n+        }\n+\n+        private class FixedRounding implements Prepared {\n+            private final LocalTimeOffset offset;\n+\n+            FixedRounding(LocalTimeOffset offset) {\n+                this.offset = offset;\n+            }\n+\n+            @Override\n+            public long round(long utcMillis) {\n+                return offset.localToUtcInThisOffset(roundKey(offset.utcToLocalTime(utcMillis), interval) * interval);\n+            }\n+\n+            @Override\n+            public long nextRoundingValue(long utcMillis) {\n+                // TODO this is used in date range's collect so we should optimize it too", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA3NDEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNTowOFrOGSIsCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNTowOFrOGSIsCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2OTg5Ng==", "bodyText": "This is just shuffled from where it used to be.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421669896", "createdAt": "2020-05-07T17:25:08Z", "author": {"login": "nik9000"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -888,6 +826,133 @@ public boolean equals(Object obj) {\n         public String toString() {\n             return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";\n         }\n+\n+        private long roundKey(long value, long interval) {\n+            if (value < 0) {\n+                return (value - interval + 1) / interval;\n+            } else {\n+                return value / interval;\n+            }\n+        }\n+\n+        private class FixedRounding implements Prepared {\n+            private final LocalTimeOffset offset;\n+\n+            FixedRounding(LocalTimeOffset offset) {\n+                this.offset = offset;\n+            }\n+\n+            @Override\n+            public long round(long utcMillis) {\n+                return offset.localToUtcInThisOffset(roundKey(offset.utcToLocalTime(utcMillis), interval) * interval);\n+            }\n+\n+            @Override\n+            public long nextRoundingValue(long utcMillis) {\n+                // TODO this is used in date range's collect so we should optimize it too\n+                return new JavaTimeRounding().nextRoundingValue(utcMillis);\n+            }\n+        }\n+\n+        private class VariableRounding implements Prepared, LocalTimeOffset.Strategy {\n+            private final LocalTimeOffset.Lookup lookup;\n+\n+            VariableRounding(LocalTimeOffset.Lookup lookup) {\n+                this.lookup = lookup;\n+            }\n+\n+            @Override\n+            public long round(long utcMillis) {\n+                LocalTimeOffset offset = lookup.lookup(utcMillis);\n+                return offset.localToUtc(roundKey(offset.utcToLocalTime(utcMillis), interval) * interval, this);\n+            }\n+\n+            @Override\n+            public long nextRoundingValue(long utcMillis) {\n+                // TODO this is used in date range's collect so we should optimize it too\n+                return new JavaTimeRounding().nextRoundingValue(utcMillis);\n+            }\n+\n+            @Override\n+            public long inGap(long localMillis, Gap gap) {\n+                return gap.startUtcMillis();\n+            }\n+\n+            @Override\n+            public long beforeGap(long localMillis, Gap gap) {\n+                return gap.previous().localToUtc(localMillis, this);\n+            }\n+\n+            @Override\n+            public long inOverlap(long localMillis, Overlap overlap) {\n+                // Convert the overlap at this offset because that'll produce the largest result.\n+                return overlap.localToUtcInThisOffset(localMillis);\n+            }\n+\n+            @Override\n+            public long beforeOverlap(long localMillis, Overlap overlap) {\n+                return overlap.previous().localToUtc(roundKey(overlap.firstNonOverlappingLocalTime() - 1, interval) * interval, this);\n+            }\n+        }\n+\n+\n+        private class JavaTimeRounding implements Prepared {\n+            @Override\n+            public long round(long utcMillis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA3ODg2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNjoyNVrOGSIvLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNzo1OVrOGSKn0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDcwMg==", "bodyText": "These were fun examples that came up in the random tests that failed. It makes it a ton easier to rerun them if I pull them out like this.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421670702", "createdAt": "2020-05-07T17:26:25Z", "author": {"login": "nik9000"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -778,6 +803,18 @@ public void testPrepareLongRangeRoundsNotToMidnight() {\n         assertThat(prepared.round(time(\"9000-03-31T15:25:15.148Z\")), isDate(time(\"9000-03-31T15:00:00Z\"), tz));\n     }\n \n+    public void testIntervalBeforeGap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMTU4NQ==", "bodyText": "Can you add a comment/javadoc to this, please?  It's unclear to me why this particular data would be problematic", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421701585", "createdAt": "2020-05-07T18:17:59Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -778,6 +803,18 @@ public void testPrepareLongRangeRoundsNotToMidnight() {\n         assertThat(prepared.round(time(\"9000-03-31T15:25:15.148Z\")), isDate(time(\"9000-03-31T15:00:00Z\"), tz));\n     }\n \n+    public void testIntervalBeforeGap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDcwMg=="}, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTIzOTA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowOTowNlrOGSKTtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowOTowNlrOGSKTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NjQzNg==", "bodyText": "I know this is private, but I still think a bit of javadoc to explain when you want Variable and when you want Fixed would help future generations.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421696436", "createdAt": "2020-05-07T18:09:06Z", "author": {"login": "not-napoleon"}, "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -888,6 +826,133 @@ public boolean equals(Object obj) {\n         public String toString() {\n             return \"Rounding[\" + interval + \" in \" + timeZone + \"]\";\n         }\n+\n+        private long roundKey(long value, long interval) {\n+            if (value < 0) {\n+                return (value - interval + 1) / interval;\n+            } else {\n+                return value / interval;\n+            }\n+        }\n+\n+        private class FixedRounding implements Prepared {\n+            private final LocalTimeOffset offset;\n+\n+            FixedRounding(LocalTimeOffset offset) {\n+                this.offset = offset;\n+            }\n+\n+            @Override\n+            public long round(long utcMillis) {\n+                return offset.localToUtcInThisOffset(roundKey(offset.utcToLocalTime(utcMillis), interval) * interval);\n+            }\n+\n+            @Override\n+            public long nextRoundingValue(long utcMillis) {\n+                // TODO this is used in date range's collect so we should optimize it too\n+                return new JavaTimeRounding().nextRoundingValue(utcMillis);\n+            }\n+        }\n+\n+        private class VariableRounding implements Prepared, LocalTimeOffset.Strategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI1OTA4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNDo0MFrOGSKgZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxNDo0MFrOGSKgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5OTY4NA==", "bodyText": "This is a good test.  I like this test.", "url": "https://github.com/elastic/elasticsearch/pull/56371#discussion_r421699684", "createdAt": "2020-05-07T18:14:40Z", "author": {"login": "not-napoleon"}, "path": "server/src/test/java/org/elasticsearch/common/RoundingTests.java", "diffHunk": "@@ -387,23 +387,48 @@ public void testIntervalRounding_HalfDay_DST() {\n \n     public void testRandomTimeIntervalRounding() {\n         for (int i = 0; i < 1000; i++) {\n+            int unitCount = randomIntBetween(1, 365);\n             TimeUnit unit = randomFrom(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS);\n-            long interval = unit.toMillis(randomIntBetween(1, 365));\n+            long interval = unit.toMillis(unitCount);\n             ZoneId tz = randomZone();\n             Rounding rounding = new Rounding.TimeIntervalRounding(interval, tz);\n             long mainDate = Math.abs(randomLong() % (2 * (long) 10e11)); // 1970-01-01T00:00:00Z - 2033-05-18T05:33:20.000+02:00\n             if (randomBoolean()) {\n                 mainDate = nastyDate(mainDate, tz, interval);\n             }\n+            long min = mainDate - 2 * interval;\n+            long max = mainDate + 2 * interval;\n+\n+            // Round a whole bunch of dates and make sure they line up with the known good java time implementation\n+            Rounding.Prepared prepared = rounding.prepare(min, max);\n+            Rounding.Prepared javaTimeRounding = rounding.prepareJavaTime();\n+            for (int d = 0; d < 1000; d++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825fbfee08625b865884564612adcff65cf7524d"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 628, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}