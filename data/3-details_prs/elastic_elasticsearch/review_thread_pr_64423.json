{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTA2OTE5", "number": 64423, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo0NzoxOVrOE1k7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo1OTowNlrOE3S0cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjE1MDQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo0NzoxOVrOHt7Q1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyNToxNVrOHwV2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg==", "bodyText": "I really can't remember the use cases where we needed this. (returning a v8 handler when a handler was not present in v7)\n@jaymode   made a comment about this when we were still working on a feature branch https://github.com/elastic/elasticsearch/pull/54197/files#r414959451", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r517918932", "createdAt": "2020-11-05T09:47:19Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MjEwMg==", "bodyText": "I think the reason for this is @Mpdreamz's comment #60516 (comment) where clients plan to send compatible with to all APIs. If this is the case, can we please document this in code/method so we do not lose the information", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518882102", "createdAt": "2020-11-06T17:00:00Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NjUwNQ==", "bodyText": "I had to think about this waaay to long :) and wrote a unit test to help me understand\n    /**\n     * We want clients to be able to request compatibility with a prior version for all APIs. If a there does not exist a handler registered\n     * for the prior version, we want to return the current version handler. This effectively means that the current endpoint is compatible\n     * with the prior version, which should be true since if it were not compatible there would be a registered compatible endpoint.\n     */\n    public void testMissingPriorHandlerReturnsCurrentHandler(){\n        RestHandler currentVersionHandler = new CurrentVersionHandler();\n        MethodHandlers methodHandlers = new MethodHandlers(\"path\", currentVersionHandler, RestRequest.Method.PUT, RestRequest.Method.POST);\n        RestHandler handler = methodHandlers.getHandler(RestRequest.Method.PUT, Version.CURRENT.previousMajor());\n        assertThat(handler, sameInstance(currentVersionHandler));\n    }\n\nCan you add a similar comment inline here, and add that test?", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518966505", "createdAt": "2020-11-06T19:44:30Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MTI5Nw==", "bodyText": "The return can be simplified to:\n        return handler == null ? versionToHandlers.get(Version.CURRENT) : handler;\n\nwith a test:\n    public void testMissingCurrentHandler(){\n        RestHandler previousVersionHandler = new PreviousVersionHandler();\n        MethodHandlers methodHandlers = new MethodHandlers(\"path\", previousVersionHandler, RestRequest.Method.PUT, RestRequest.Method.POST);\n        RestHandler handler = methodHandlers.getHandler(RestRequest.Method.PUT, Version.CURRENT);\n        assertNull(handler);\n    }", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518971297", "createdAt": "2020-11-06T19:54:43Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1NDk3MQ==", "bodyText": "to be fair, I am not super convinced about returning the CURRENT.\nif an endpoint did not exist in v7 server version, client would be getting 404 when trying to access it with v7 client.\nWhen he upgrades server to next version and he still uses v7 client, I guess he should be still getting 404?\n@jakelandis I am not sure I understand this:\n\nThis effectively means that the current endpoint is compatible\n* with the prior version, which should be true since if it were not compatible there would be a registered compatible endpoint.\n\nfrom high level point of view, there is no knowledge if there is a compatible endpoint or not. If the handler's code did not change, user has no idea that a response came from v7 code, or if the response is compatible shape from v8 (in ideal 100% compatible handler).\nTHe same for when an endpoint do not exist. Returning 404 from v8 when for not existing in v7 endpoint is 100% compatible in shape and behaviour\n@Mpdreamz any views on this?", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519754971", "createdAt": "2020-11-09T11:58:22Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkyMA==", "bodyText": "I think we should return new APIs with compatible requested. Below is a table with my thought for how behaviour should look.\nThe rationale is that in a minor you can add a new API passively, therefor new APIs are compatible (as opposed to non-compatible/breaking). Further, one motivation to add a new API is to replace an old one. With a client sending compatibility all the time, they should be able to fix the compatibility warnings and migrate to the new API. This allows them to do just that.\n\n\n\nscenario\nv7\nv8\nv7 compat / v8 server result\n\n\n\n\nnew in v8\n404\n200\n200 (v8)\n\n\nno change/compat change in v8 (no compat handler)\n200\n200\n200 (v8)\n\n\nremoved in v8 (with compat handler)\n200\n404\n200 (v7)\n\n\nnon passive change (with compat handler)\n200\n200\n200 (v7)", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519840920", "createdAt": "2020-11-09T14:10:11Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1OTYzMA==", "bodyText": "The rationale is that in a minor you can add a new API passively, therefor new APIs are compatible (as opposed to non-compatible/breaking)\n\ngreat explanation. thank you. I think this was the initial reason we went for that behaviour on a feature branch. I will add a comment about this at least in a test", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519859630", "createdAt": "2020-11-09T14:36:19Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkwMDQzMg==", "bodyText": "Since clients generate methods for known API's the only way to talk to an API that exists in 8.0 but not (yet) in 7.x is to call transport.Request(url)\nI think the new in v8 case needs some zooming in on:\nnew in v8\n\n\n\naccept/content-type\nv7 compat / v8 server result\n\n\n\n\napplication/json\napplication/json\n\n\napplication/vnd.elasticsearch+json;compatible-with=8\napplication/vnd.elasticsearch+json;compatible-with=8\n\n\napplication/vnd.elasticsearch+json;compatible-with=7\n?\n\n\n\nThe first two seem straight forward the last one not so much It could return a\n\n404, since thats what it did in 7\n200 with application/vnd.elasticsearch+json;compatible-with=7.\n200 with application/vnd.elasticsearch+json;compatible-with=8.\n\nReturning with compatible-with=8 is not what the user requested so seems like an unexpected return.\nReturning with compatible-with=7 since its a new API it can be argued anything is compatible with 7. But this will become a pain to track when e.g a new API gets introduced in 8.0 as experimental and GA's in 8.4.  You potentially get back two different 7 responses for 8.0 and 8.4.\nThat leaves returning a 404.\ncc @elastic/es-clients we have not discussed if the the transport used in the client should default to application/vnd.elasticsearch+json;compatible-with=7 or application/json. I feel that if the transport defaults to application/json but the API methods calling the transport default to the vendor mime type the client user has the least suprises.", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519900432", "createdAt": "2020-11-09T15:30:18Z", "author": {"login": "Mpdreamz"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1MTgzNw==", "bodyText": "I think with the current approach where we version compatible API per major we won't be able to give a 100% experience of previous version server. And that wasn't a goal - after all we want to achieve the compatible API, not the versioned one.\nI feel all the comments from this \"thread\" are valid and I will summarise them on a separate issue.\nThe current implementation is not returning the right response header yet, so the discussion on new in v8 could continue on the new issue.\nLets use this issue to facilitate the discussion #64852", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r520451837", "createdAt": "2020-11-10T10:25:15Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -56,11 +58,16 @@ MethodHandlers addMethods(RestHandler handler, RestRequest.Method... methods) {\n     }\n \n     /**\n-     * Returns the handler for the given method or {@code null} if none exists.\n+     * Returns the handler for the given method and version or {@code null} if none exists.\n      */\n-    @Nullable\n-    RestHandler getHandler(RestRequest.Method method) {\n-        return methodHandlers.get(method);\n+    RestHandler getHandler(RestRequest.Method method, Version version) {\n+        Map<Version, RestHandler> versionToHandlers = methodHandlers.get(method);\n+        if (versionToHandlers == null) {\n+            return null; //method not found\n+        }\n+        final RestHandler handler = versionToHandlers.get(version);\n+        return handler != null || version.equals(Version.CURRENT) ? handler : versionToHandlers.get(Version.CURRENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxODkzMg=="}, "originalCommit": {"oid": "310b735cbeecb65ee6e212ea46d655948236269a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTI0NjY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleVersion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjozMDoyMVrOHuZMjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoxMTo0NlrOHuj6ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwOTM1OA==", "bodyText": "not sure i follow the second sentence (Intended to be ...)", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518409358", "createdAt": "2020-11-05T22:30:21Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleVersion.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.xcontent.ParsedMediaType;\n+\n+/**\n+ * An interface used to specify a function that returns a compatible API version\n+ * Intended to be used in a code base instead of a plugin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afba70d3cd862b7b3a83536381bf32e5cea575e6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4NTAxOA==", "bodyText": "right.. I rephrased this, but maybe it is still to vague. let me know\nMy intention was to not describe the actual plugin implementation, but just to mention that this abstract the way we actually provide the logic.\nIt happens that we use a plugin for this, but could if we want to use any class within a server to do this as well (we did in the previous attempts)", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518585018", "createdAt": "2020-11-06T08:11:46Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/CompatibleVersion.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.xcontent.ParsedMediaType;\n+\n+/**\n+ * An interface used to specify a function that returns a compatible API version\n+ * Intended to be used in a code base instead of a plugin.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwOTM1OA=="}, "originalCommit": {"oid": "afba70d3cd862b7b3a83536381bf32e5cea575e6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTI4ODAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo0NDo0MlrOHuZlHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoxMjowN1rOHuj7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQxNTY0Nw==", "bodyText": "Can you a few unit tests for this class ?", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518415647", "createdAt": "2020-11-05T22:44:42Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,23 +31,25 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    private final Map<RestRequest.Method, Map<Version, RestHandler>> methodHandlers;\n \n-    MethodHandlers(String path, RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers(String path, RestHandler handler, Version version,  RestRequest.Method... methods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afba70d3cd862b7b3a83536381bf32e5cea575e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4NTE2MA==", "bodyText": "I also realised that changing the method signature was not necessary.", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518585160", "createdAt": "2020-11-06T08:12:07Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/MethodHandlers.java", "diffHunk": "@@ -31,23 +31,25 @@\n final class MethodHandlers {\n \n     private final String path;\n-    private final Map<RestRequest.Method, RestHandler> methodHandlers;\n+    private final Map<RestRequest.Method, Map<Version, RestHandler>> methodHandlers;\n \n-    MethodHandlers(String path, RestHandler handler, RestRequest.Method... methods) {\n+    MethodHandlers(String path, RestHandler handler, Version version,  RestRequest.Method... methods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQxNTY0Nw=="}, "originalCommit": {"oid": "afba70d3cd862b7b3a83536381bf32e5cea575e6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjMxODc4OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMTozMFrOHu2Ggw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMTozMFrOHu2Ggw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4Mjk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public XContentBuilder withCompatibleMajorVersion(byte compatibleMajorVersion){\n          \n          \n            \n                public XContentBuilder withCompatibleMajorVersion(byte compatibleMajorVersion) {", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518882947", "createdAt": "2020-11-06T17:01:30Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -1004,6 +1006,15 @@ public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOExce\n         return this;\n     }\n \n+    public XContentBuilder withCompatibleMajorVersion(byte compatibleMajorVersion){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjMyMjU4OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMjo0MFrOHu2I4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMjo0MFrOHu2I4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MzU1Mw==", "bodyText": "can you add javadocs to this method and the one above?", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518883553", "createdAt": "2020-11-06T17:02:40Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -1004,6 +1006,15 @@ public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOExce\n         return this;\n     }\n \n+    public XContentBuilder withCompatibleMajorVersion(byte compatibleMajorVersion){\n+        this.compatibleMajorVersion = compatibleMajorVersion;\n+        return this;\n+    }\n+\n+    public byte getCompatibleMajorVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjMyNTQ3OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMzozN1rOHu2KwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo0ODoyMFrOHvo6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NDAzMw==", "bodyText": "hmm, I wonder if we should make this a SetOnce or add validation that if it is not some sentinel value that it cannot be changed again? I'm not sure that I like it being mutable with a builder pattern and allowing it to be set multiple times", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518884033", "createdAt": "2020-11-06T17:03:37Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -48,6 +48,8 @@\n  */\n public final class XContentBuilder implements Closeable, Flushable {\n \n+    private byte compatibleMajorVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxNTM3Ng==", "bodyText": "with a regular builder pattern I would be ok with the field being mutable, as it is normally used within some narrow code scope.\nWith XContentBuilder we often pass it around so makes sense to protect against some accidental changes.\nI feel like we should assert about this in testing only though.\nI added assert", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519715376", "createdAt": "2020-11-09T10:48:20Z", "author": {"login": "pgomulka"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -48,6 +48,8 @@\n  */\n public final class XContentBuilder implements Closeable, Flushable {\n \n+    private byte compatibleMajorVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NDAzMw=="}, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjMzNjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNjo0MlrOHu2RZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNjo0MlrOHu2RZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NTczMg==", "bodyText": "hmm, should we make this non-static like minimumCompatibilityVersion and minimumIndexCompatibilityVersion? Also, please add javadocs :)", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518885732", "createdAt": "2020-11-06T17:06:42Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/Version.java", "diffHunk": "@@ -268,6 +269,15 @@ private static Version fromStringSlow(String version) {\n         this.build = (byte) (id % 100);\n         this.luceneVersion = Objects.requireNonNull(luceneVersion);\n         this.toString = major + \".\" + minor + \".\" + revision;\n+        this.previousMajorId = major > 0 ? (major - 1) * 1000000 + 99 : major;\n+    }\n+\n+    public Version previousMajor() {\n+        return Version.fromId(previousMajorId);\n+    }\n+\n+    public static Version minimumRestCompatibilityVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjMzNjU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNjo1MlrOHu2Rtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNjo1MlrOHu2Rtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NTgxNQ==", "bodyText": "javadocs please", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518885815", "createdAt": "2020-11-06T17:06:52Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/Version.java", "diffHunk": "@@ -268,6 +269,15 @@ private static Version fromStringSlow(String version) {\n         this.build = (byte) (id % 100);\n         this.luceneVersion = Objects.requireNonNull(luceneVersion);\n         this.toString = major + \".\" + minor + \".\" + revision;\n+        this.previousMajorId = major > 0 ? (major - 1) * 1000000 + 99 : major;\n+    }\n+\n+    public Version previousMajor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjMzNzc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/node/Node.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNzowOFrOHu2Saw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNzowOFrOHu2Saw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NTk5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r518885995", "createdAt": "2020-11-06T17:07:08Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/node/Node.java", "diffHunk": "@@ -539,9 +540,11 @@ protected Node(final Environment initialEnvironment,\n                                                  repositoriesServiceReference::get).stream())\n                 .collect(Collectors.toList());\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836fe0f1b842929aa6c6e46694aa4e8ca8dead95"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODgyOTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxNzowMlrOHvw3UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1NDo1NVrOHvylFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0NTcxMw==", "bodyText": "I am not sure i understand the purpose of this comment here.", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519845713", "createdAt": "2020-11-09T14:17:02Z", "author": {"login": "jakelandis"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -242,7 +250,11 @@ private void dispatchRequest(RestRequest request, RestChannel channel, RestHandl\n                 inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength);\n             }\n             // iff we could reserve bytes for the request we need to send the response also over this channel\n-            responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength);\n+            // Using a version from a handler because if no handler was found for requested version,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d762f66c418dd238fc1c02d7f7bafc7de0bb34"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MzgxMw==", "bodyText": "my intention was to indicate that even if you requested an applicaiton/vnd.elasticsearch+json;compatible-with=7 but the handler did not exist in 7, the actual resthandler will be used from v8.\nbut that indeed makes no difference, as there would be no compatible serialisation code.\nRemoved the comment.", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r519873813", "createdAt": "2020-11-09T14:54:55Z", "author": {"login": "pgomulka"}, "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -242,7 +250,11 @@ private void dispatchRequest(RestRequest request, RestChannel channel, RestHandl\n                 inFlightRequestsBreaker(circuitBreakerService).addWithoutBreaking(contentLength);\n             }\n             // iff we could reserve bytes for the request we need to send the response also over this channel\n-            responseChannel = new ResourceHandlingHttpChannel(channel, circuitBreakerService, contentLength);\n+            // Using a version from a handler because if no handler was found for requested version,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0NTcxMw=="}, "originalCommit": {"oid": "87d762f66c418dd238fc1c02d7f7bafc7de0bb34"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDE0NTU5OnYy", "diffSide": "RIGHT", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo1NzoxOFrOHwjbHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo1NzoxOFrOHwjbHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3NDA3OQ==", "bodyText": "this assertion is incorrect as it is asserting on the value passed into the method and not the value in the builder.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert compatibleMajorVersion != 0 : \"Compatible version has already been set\";\n          \n          \n            \n                    assert this.compatibleMajorVersion == 0 : \"Compatible version has already been set\";\n          \n          \n            \n                    if (compatibleMajorVersion == 0) {\n          \n          \n            \n                        throw new IllegalArgumentException(\"Compatible major version must not be equal to 0\");\n          \n          \n            \n                    }", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r520674079", "createdAt": "2020-11-10T15:57:18Z", "author": {"login": "jaymode"}, "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java", "diffHunk": "@@ -1004,6 +1006,22 @@ public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOExce\n         return this;\n     }\n \n+    /**\n+     * Sets a version used for serialising a response compatible with a previous version.\n+     */\n+    public XContentBuilder withCompatibleMajorVersion(byte compatibleMajorVersion) {\n+        assert compatibleMajorVersion != 0 : \"Compatible version has already been set\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ecbf223b1334ba1e7f3b45aeb2f47a4e0c91a72"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDE1NDcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/Version.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo1OTowNlrOHwjg1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjowMDoyMlrOHwjkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3NTU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final String toString;\n          \n          \n            \n                public final int previousMajorId;\n          \n          \n            \n                public final int previousMajorId;\n          \n          \n            \n                private final String toString;\n          \n      \n    \n    \n  \n\nThis is a nit but it helps my eyes read the code better when public values are kept together.", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r520675540", "createdAt": "2020-11-10T15:59:06Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/Version.java", "diffHunk": "@@ -259,6 +259,7 @@ private static Version fromStringSlow(String version) {\n     public final byte build;\n     public final org.apache.lucene.util.Version luceneVersion;\n     private final String toString;\n+    public final int previousMajorId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ecbf223b1334ba1e7f3b45aeb2f47a4e0c91a72"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3NjU0OA==", "bodyText": "Or you could make value private, which I'd prefer\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final String toString;\n          \n          \n            \n                public final int previousMajorId;\n          \n          \n            \n                private final String toString;\n          \n          \n            \n                private final int previousMajorId;", "url": "https://github.com/elastic/elasticsearch/pull/64423#discussion_r520676548", "createdAt": "2020-11-10T16:00:22Z", "author": {"login": "jaymode"}, "path": "server/src/main/java/org/elasticsearch/Version.java", "diffHunk": "@@ -259,6 +259,7 @@ private static Version fromStringSlow(String version) {\n     public final byte build;\n     public final org.apache.lucene.util.Version luceneVersion;\n     private final String toString;\n+    public final int previousMajorId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3NTU0MA=="}, "originalCommit": {"oid": "4ecbf223b1334ba1e7f3b45aeb2f47a4e0c91a72"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4120, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}