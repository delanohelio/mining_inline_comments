{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTUyNjU1", "number": 58027, "title": "Check for degenerated lines when calculating the centroid", "bodyText": "Check that the weight of a line centroid is bigger than 0. In case it is 0, the centroid is calculated as if the line is a point.\nfixes #55851", "createdAt": "2020-06-12T08:52:42Z", "url": "https://github.com/elastic/elasticsearch/pull/58027", "merged": true, "mergeCommit": {"oid": "75073329cf8b2455c6fa1483fefd2f72bbec53e1"}, "closed": true, "closedAt": "2020-06-17T05:22:37Z", "author": {"login": "iverase"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqe374gH2gAyNDMzNTUyNjU1Ojc2Mzg3Y2Y1MDYyNGM4YzFkNzUzNjQ2ZjNhMTI3N2NmYTIxZjM1ZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr2gNkgFqTQzMTU5MTYyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76387cf50624c8c1d753646f3a1277cfa21f35e1", "author": {"user": {"login": "iverase", "name": "Ignacio Vera"}}, "url": "https://github.com/elastic/elasticsearch/commit/76387cf50624c8c1d753646f3a1277cfa21f35e1", "committedDate": "2020-06-12T08:49:09Z", "message": "Check for degenerated lines when calculating the centroid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "271ca0ff7fb434b7088db6f318c4e98c0fcd2a37", "author": {"user": {"login": "iverase", "name": "Ignacio Vera"}}, "url": "https://github.com/elastic/elasticsearch/commit/271ca0ff7fb434b7088db6f318c4e98c0fcd2a37", "committedDate": "2020-06-12T09:04:37Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05544d1843f6aafe33897991094361cc1b82950c", "author": {"user": {"login": "iverase", "name": "Ignacio Vera"}}, "url": "https://github.com/elastic/elasticsearch/commit/05544d1843f6aafe33897991094361cc1b82950c", "committedDate": "2020-06-12T14:46:29Z", "message": "update logic of how we calculate centroid of lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0a5c86e1de77e19f0ef3710ac5e060ed33fe2a", "author": {"user": {"login": "iverase", "name": "Ignacio Vera"}}, "url": "https://github.com/elastic/elasticsearch/commit/6b0a5c86e1de77e19f0ef3710ac5e060ed33fe2a", "committedDate": "2020-06-15T06:48:08Z", "message": "update logic of how we calculate centroid of rectangle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b46aa84f57ab94e8226c1371a0795bd9ba6530ad", "author": {"user": {"login": "iverase", "name": "Ignacio Vera"}}, "url": "https://github.com/elastic/elasticsearch/commit/b46aa84f57ab94e8226c1371a0795bd9ba6530ad", "committedDate": "2020-06-15T07:58:57Z", "message": "Merge branch 'master' into degeneratedLine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385", "author": {"user": {"login": "iverase", "name": "Ignacio Vera"}}, "url": "https://github.com/elastic/elasticsearch/commit/0d5e50f3c7f38553f1814397f82997fc28b1c385", "committedDate": "2020-06-15T08:15:09Z", "message": "update logic of how we calculate centroid of rectangle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDI0MzU1", "url": "https://github.com/elastic/elasticsearch/pull/58027#pullrequestreview-431024355", "createdAt": "2020-06-15T22:02:05Z", "commit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowMjowNlrOGkEQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowOToyMVrOGkEb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MTY5MA==", "bodyText": "a point should have a weight of 1?", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440471690", "createdAt": "2020-06-15T22:02:06Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculatorTests.java", "diffHunk": "@@ -250,7 +258,7 @@ public void testPolygonAsPoint() {\n         CentroidCalculator calculator = new CentroidCalculator(polygon);\n         assertThat(calculator.getX(), equalTo(GeoUtils.normalizeLon(point.getX())));\n         assertThat(calculator.getY(), equalTo(GeoUtils.normalizeLat(point.getY())));\n-        assertThat(calculator.sumWeight(), equalTo(1.0));\n+        assertThat(calculator.sumWeight(), equalTo(3.0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MjI1MQ==", "bodyText": "good find!", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440472251", "createdAt": "2020-06-15T22:03:28Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -224,18 +224,18 @@ public Void visit(Polygon polygon) {\n \n         @Override\n         public Void visit(Rectangle rectangle) {\n-            double sumX = rectangle.getMaxX() + rectangle.getMinX();\n-            double sumY = rectangle.getMaxY() + rectangle.getMinY();\n             double diffX = rectangle.getMaxX() - rectangle.getMinX();\n             double diffY = rectangle.getMaxY() - rectangle.getMinY();\n-            if (diffX != 0 && diffY != 0) {\n-                calculator.addCoordinate(sumX / 2, sumY / 2, Math.abs(diffX * diffY), DimensionalShapeType.POLYGON);\n-            } else if (diffX != 0) {\n-                calculator.addCoordinate(sumX / 2, rectangle.getMinY(), diffX, DimensionalShapeType.LINE);\n-            } else if (diffY != 0) {\n-                calculator.addCoordinate(rectangle.getMinX(), sumY / 2, diffY, DimensionalShapeType.LINE);\n+            double rectWeight = Math.abs(diffX * diffY);\n+            if (rectWeight != 0) {\n+                double sumX = rectangle.getMaxX() + rectangle.getMinX();\n+                double sumY = rectangle.getMaxY() + rectangle.getMinY();\n+                calculator.addCoordinate(sumX / 2, sumY / 2, rectWeight, DimensionalShapeType.POLYGON);\n             } else {\n-                visitPoint(rectangle.getMinX(), rectangle.getMinY());\n+                // degenerated rectangle, transform to Line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NDYxOQ==", "bodyText": "Do we believe this is right?\nIf a line segment has repeating sections where the weight is effectively zero, then we could potentially be counting multiple points per Line?", "url": "https://github.com/elastic/elasticsearch/pull/58027#discussion_r440474619", "createdAt": "2020-06-15T22:09:21Z", "author": {"login": "talevy"}, "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -246,22 +246,20 @@ private void visitPoint(double x, double y) {\n         }\n \n         private void visitLine(int length, CoordinateSupplier x, CoordinateSupplier y) {\n-            // check line has length\n-            double originDiffX = x.get(0) - x.get(1);\n-            double originDiffY = y.get(0) - y.get(1);\n-            if (originDiffX != 0 || originDiffY != 0) {\n-                // a line's centroid is calculated by summing the center of each\n-                // line segment weighted by the line segment's length in degrees\n-                for (int i = 0; i < length - 1; i++) {\n-                    double diffX = x.get(i) - x.get(i + 1);\n-                    double diffY = y.get(i) - y.get(i + 1);\n-                    double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n-                    double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n-                    double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+            // a line's centroid is calculated by summing the center of each\n+            // line segment weighted by the line segment's length in degrees\n+            for (int i = 0; i < length - 1; i++) {\n+                double diffX = x.get(i) - x.get(i + 1);\n+                double diffY = y.get(i) - y.get(i + 1);\n+                double xAvg = (x.get(i) + x.get(i + 1)) / 2;\n+                double yAvg = (y.get(i) + y.get(i + 1)) / 2;\n+                double weight = Math.sqrt(diffX * diffX + diffY * diffY);\n+                if (weight == 0) {\n+                    // degenerated line, it can be considered a point\n+                    visitPoint(x.get(i), y.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTkxNjI0", "url": "https://github.com/elastic/elasticsearch/pull/58027#pullrequestreview-431591624", "createdAt": "2020-06-16T14:54:53Z", "commit": {"oid": "0d5e50f3c7f38553f1814397f82997fc28b1c385"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 620, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}