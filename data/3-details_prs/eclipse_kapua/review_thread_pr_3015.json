{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NjcyNTc0", "number": 3015, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozODozMlrOERvkRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NToxOVrOERvr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQwNTgxOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/about/AboutEntryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozODozMlrOG2nhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozODozMlrOG2nhQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyMzc3Nw==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459923777", "createdAt": "2020-07-24T08:38:32Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/about/AboutEntryTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.about;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+\n+@Category(JUnitTests.class)\n+public class AboutEntryTest extends Assert {\n+\n+    private String[] names;\n+    private String[] texts;\n+    private URL[] urls;\n+    private ArrayList<AboutEntry.License> licenseList;\n+\n+    @Before\n+    public void initialize() throws MalformedURLException {\n+        names = new String[]{\"Name\", null};\n+        texts = new String[]{\"Text\", null};\n+        String validSpec = \"https://www.google.com\";\n+        urls = new URL[]{new URL(validSpec), null};\n+        licenseList = new ArrayList<>();\n+    }\n+\n+    @Test\n+    public void aboutEntryLicenseTest() {\n+        for (String name : names) {\n+            for (String text : texts) {\n+                for (URL url : urls) {\n+                    AboutEntry.License license = new AboutEntry.License(name, text, url);\n+                    assertEquals(\"Expected and actual values should be the same.\", name, license.getName());\n+                    assertEquals(\"Expected and actual values should be the same.\", text, license.getText());\n+                    assertEquals(\"Expected and actual values should be the same.\", url, license.getUrl());\n+                    assertNotNull(\"Null not expected.\", license);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQwNjE5OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/about/AboutEntryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozODo0MVrOG2nhfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozODo0MVrOG2nhfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyMzgzOA==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459923838", "createdAt": "2020-07-24T08:38:41Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/about/AboutEntryTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.about;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+\n+@Category(JUnitTests.class)\n+public class AboutEntryTest extends Assert {\n+\n+    private String[] names;\n+    private String[] texts;\n+    private URL[] urls;\n+    private ArrayList<AboutEntry.License> licenseList;\n+\n+    @Before\n+    public void initialize() throws MalformedURLException {\n+        names = new String[]{\"Name\", null};\n+        texts = new String[]{\"Text\", null};\n+        String validSpec = \"https://www.google.com\";\n+        urls = new URL[]{new URL(validSpec), null};\n+        licenseList = new ArrayList<>();\n+    }\n+\n+    @Test\n+    public void aboutEntryLicenseTest() {\n+        for (String name : names) {\n+            for (String text : texts) {\n+                for (URL url : urls) {\n+                    AboutEntry.License license = new AboutEntry.License(name, text, url);\n+                    assertEquals(\"Expected and actual values should be the same.\", name, license.getName());\n+                    assertEquals(\"Expected and actual values should be the same.\", text, license.getText());\n+                    assertEquals(\"Expected and actual values should be the same.\", url, license.getUrl());\n+                    assertNotNull(\"Null not expected.\", license);\n+                    assertThat(\"AboutEntry.License object expected.\", license, IsInstanceOf.instanceOf(AboutEntry.License.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQxMzkwOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/about/AboutScannerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MToyMFrOG2nmRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MToyMFrOG2nmRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTA2MA==", "bodyText": "For example in this case this makes sense.\nThere is no new and AboutScanner.scan() can return null even if is not designed to, if someone changes the implementation of scan()", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459925060", "createdAt": "2020-07-24T08:41:20Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/about/AboutScannerTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.about;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.reflections.util.ClasspathHelper;\n+\n+import java.lang.reflect.Field;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+@Category(JUnitTests.class)\n+public class AboutScannerTest extends Assert {\n+\n+    @Test\n+    public void scanTest() {\n+        final AboutScanner scanner = AboutScanner.scan();\n+        assertNotNull(\"Null not expected\", scanner);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQxODMwOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0Mjo1N1rOG2npAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0Mjo1N1rOG2npAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTc2MQ==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459925761", "createdAt": "2020-07-24T08:42:57Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.commons.model.query.FieldSortCriteriaImpl;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreQueryImplTest extends Assert {\n+\n+    @Test\n+    public void eventStoreQueryImplTest1() {\n+        EventStoreQueryImpl eventStoreQueryImpl = new EventStoreQueryImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQxOTA0OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MzoxMVrOG2npaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MzoxMVrOG2npaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTg2NQ==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459925865", "createdAt": "2020-07-24T08:43:11Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.commons.model.query.FieldSortCriteriaImpl;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreQueryImplTest extends Assert {\n+\n+    @Test\n+    public void eventStoreQueryImplTest1() {\n+        EventStoreQueryImpl eventStoreQueryImpl = new EventStoreQueryImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQxOTY4OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MzoyNFrOG2npxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MzoyNFrOG2npxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTk1OA==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459925958", "createdAt": "2020-07-24T08:43:24Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.commons.model.query.FieldSortCriteriaImpl;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreQueryImplTest extends Assert {\n+\n+    @Test\n+    public void eventStoreQueryImplTest1() {\n+        EventStoreQueryImpl eventStoreQueryImpl = new EventStoreQueryImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl.getSortCriteria());\n+        assertThat(\"FieldSortCriteriaImpl object expected.\", eventStoreQueryImpl.getSortCriteria(), IsInstanceOf.instanceOf(FieldSortCriteriaImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreQueryImplTest2() {\n+        KapuaId[] scopeIdList = {new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        EventStoreQueryImpl eventStoreQueryImpl1 = new EventStoreQueryImpl(null);\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQxOTk4OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MzozMlrOG2np9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MzozMlrOG2np9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjAwNQ==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926005", "createdAt": "2020-07-24T08:43:32Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.commons.model.query.FieldSortCriteriaImpl;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreQueryImplTest extends Assert {\n+\n+    @Test\n+    public void eventStoreQueryImplTest1() {\n+        EventStoreQueryImpl eventStoreQueryImpl = new EventStoreQueryImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl.getSortCriteria());\n+        assertThat(\"FieldSortCriteriaImpl object expected.\", eventStoreQueryImpl.getSortCriteria(), IsInstanceOf.instanceOf(FieldSortCriteriaImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreQueryImplTest2() {\n+        KapuaId[] scopeIdList = {new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        EventStoreQueryImpl eventStoreQueryImpl1 = new EventStoreQueryImpl(null);\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl1);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl1, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyMDQ2OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0Mzo0MFrOG2nqPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0Mzo0MFrOG2nqPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjA3Nw==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926077", "createdAt": "2020-07-24T08:43:40Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.commons.model.query.FieldSortCriteriaImpl;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreQueryImplTest extends Assert {\n+\n+    @Test\n+    public void eventStoreQueryImplTest1() {\n+        EventStoreQueryImpl eventStoreQueryImpl = new EventStoreQueryImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl.getSortCriteria());\n+        assertThat(\"FieldSortCriteriaImpl object expected.\", eventStoreQueryImpl.getSortCriteria(), IsInstanceOf.instanceOf(FieldSortCriteriaImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreQueryImplTest2() {\n+        KapuaId[] scopeIdList = {new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        EventStoreQueryImpl eventStoreQueryImpl1 = new EventStoreQueryImpl(null);\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl1);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl1, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl1.getSortCriteria());\n+        assertThat(\"FieldSortCriteriaImpl object expected.\", eventStoreQueryImpl1.getSortCriteria(), IsInstanceOf.instanceOf(FieldSortCriteriaImpl.class));\n+        assertNull(\"Null expected.\", eventStoreQueryImpl1.getScopeId());\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreQueryImpl eventStoreQueryImpl2 = new EventStoreQueryImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreQueryImpl2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyMDc2OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0Mzo0OVrOG2nqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0Mzo0OVrOG2nqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjEyNg==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926126", "createdAt": "2020-07-24T08:43:49Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreQueryImplTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.commons.model.query.FieldSortCriteriaImpl;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreQueryImplTest extends Assert {\n+\n+    @Test\n+    public void eventStoreQueryImplTest1() {\n+        EventStoreQueryImpl eventStoreQueryImpl = new EventStoreQueryImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl.getSortCriteria());\n+        assertThat(\"FieldSortCriteriaImpl object expected.\", eventStoreQueryImpl.getSortCriteria(), IsInstanceOf.instanceOf(FieldSortCriteriaImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreQueryImplTest2() {\n+        KapuaId[] scopeIdList = {new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        EventStoreQueryImpl eventStoreQueryImpl1 = new EventStoreQueryImpl(null);\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl1);\n+        assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl1, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreQueryImpl1.getSortCriteria());\n+        assertThat(\"FieldSortCriteriaImpl object expected.\", eventStoreQueryImpl1.getSortCriteria(), IsInstanceOf.instanceOf(FieldSortCriteriaImpl.class));\n+        assertNull(\"Null expected.\", eventStoreQueryImpl1.getScopeId());\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreQueryImpl eventStoreQueryImpl2 = new EventStoreQueryImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreQueryImpl2);\n+            assertThat(\"EventStoreQueryImpl object expected.\", eventStoreQueryImpl2, IsInstanceOf.instanceOf(EventStoreQueryImpl.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyMjQzOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordCreatorImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NDoyNFrOG2nrdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NDoyNFrOG2nrdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjM5MQ==", "bodyText": "Same as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R103", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926391", "createdAt": "2020-07-24T08:44:24Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordCreatorImplTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordCreatorImplTest extends Assert {\n+    @Test\n+    public void eventStoreRecordCreatorImplTest() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyMjczOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordCreatorImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NDozNFrOG2nrrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NDozNFrOG2nrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjQ0Ng==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926446", "createdAt": "2020-07-24T08:44:34Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordCreatorImplTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordCreatorImplTest extends Assert {\n+    @Test\n+    public void eventStoreRecordCreatorImplTest() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordCreatorImpl eventStoreRecordCreatorImpl = new EventStoreRecordCreatorImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordCreatorImpl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyNDMyOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordCreatorImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NTowNlrOG2nslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NTowNlrOG2nslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjY3OA==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926678", "createdAt": "2020-07-24T08:45:06Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordCreatorImplTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordCreatorImplTest extends Assert {\n+    @Test\n+    public void eventStoreRecordCreatorImplTest() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordCreatorImpl eventStoreRecordCreatorImpl = new EventStoreRecordCreatorImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordCreatorImpl);\n+            assertEquals(\"Expected and actual values should be the same.\", scopeId, eventStoreRecordCreatorImpl.getScopeId());\n+            assertThat(\"EventStoreRecordCreatorImpl object expected.\", eventStoreRecordCreatorImpl, IsInstanceOf.instanceOf(EventStoreRecordCreatorImpl.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyNTIxOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/internal/cache/EntityCacheTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NToxOVrOG2ntIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NToxOVrOG2ntIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjgxOA==", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "url": "https://github.com/eclipse/kapua/pull/3015#discussion_r459926818", "createdAt": "2020-07-24T08:45:19Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/internal/cache/EntityCacheTest.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.internal.cache;\n+\n+import com.codahale.metrics.Counter;\n+import org.eclipse.kapua.commons.metric.MetricServiceFactory;\n+import org.eclipse.kapua.commons.model.query.KapuaListResultImpl;\n+import org.eclipse.kapua.model.KapuaEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.model.query.KapuaListResult;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import javax.cache.Cache;\n+import java.io.Serializable;\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EntityCacheTest extends Assert {\n+\n+    @Test\n+    public void entityCacheTest() {\n+        String idCacheName = \"idCacheName\";\n+        Cache<Serializable, Serializable> expectedIdCache = KapuaCacheManager.getCache(idCacheName);\n+        Cache<Serializable, Serializable> expectedListsCache = KapuaCacheManager.getCache(idCacheName + \"_list\");\n+        Counter expectedCacheMiss = MetricServiceFactory.getInstance().getCounter(\"commons\", \"cache\", \"entity\", \"miss\", \"count\");\n+        Counter expectedCacheHit = MetricServiceFactory.getInstance().getCounter(\"commons\", \"cache\", \"entity\", \"hit\", \"count\");\n+        Counter expectedCacheRemoval = MetricServiceFactory.getInstance().getCounter(\"commons\", \"cache\", \"entity\", \"removal\", \"count\");\n+        NullPointerException nullPointerException = new NullPointerException();\n+\n+        EntityCache entityCache = new EntityCache(idCacheName);\n+        assertNotNull(entityCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd91d377ae7c7722979977e94f83b57a5b07e0"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1732, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}