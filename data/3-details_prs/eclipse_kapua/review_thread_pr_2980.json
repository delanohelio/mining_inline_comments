{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NTcyODYx", "number": 2980, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoyNTozNVrOD9VYRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoyNTozNVrOD9VYRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjQwMDA2OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/metatype/TmetadataImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoyNTozNVrOGWxA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoyNTozNVrOGWxA2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDg5MQ==", "bodyText": "While using assertEquals, assertNotEquals (and so on) they al support a message linked to the assert* as a first argument. It is a good practice to add a message that shows which specific assert has failed.\nSo in this case:\nassertEquals(\"tmetadata.designate\", designate, tmetadata.getDesignate());\nwould make any failure linked to a meaningful message which can avoid to have to look at the code to check what has failed.", "url": "https://github.com/eclipse/kapua/pull/2980#discussion_r426524891", "createdAt": "2020-05-18T10:25:35Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/metatype/TmetadataImplTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.configuration.metatype;\n+\n+import org.eclipse.kapua.model.config.metatype.KapuaTdesignate;\n+import org.eclipse.kapua.model.config.metatype.KapuaTocd;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import javax.xml.namespace.QName;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class TmetadataImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        emptyTocd = new EmptyTocd();\n+        tocd = new TocdImpl();\n+        tmetadata = new TmetadataImpl();\n+        tdesignate = new TdesignateImpl();\n+    }\n+\n+    EmptyTocd emptyTocd;\n+    TocdImpl tocd;\n+    TmetadataImpl tmetadata;\n+    TdesignateImpl tdesignate;\n+\n+    @Test\n+    public void getOCDTest() {\n+        assertTrue(tmetadata.getOCD().isEmpty());\n+    }\n+\n+    @Test\n+    public void setAndGetOCDTest() {\n+        List<KapuaTocd> ocd = new ArrayList<>();\n+        ocd.add(tocd);\n+        ocd.add(emptyTocd);\n+        tmetadata.setOCD(ocd);\n+        assertEquals(ocd, tmetadata.getOCD());\n+    }\n+\n+    @Test\n+    public void getDesignateTest() {\n+        assertTrue(tmetadata.getDesignate().isEmpty());\n+    }\n+\n+    @Test\n+    public void setAndGetDesignateTest() {\n+        List<KapuaTdesignate> designate = new ArrayList<>();\n+        designate.add(tdesignate);\n+        tmetadata.setDesignate(designate);\n+        assertEquals(designate, tmetadata.getDesignate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b9334855068ed0680c57dd9e4c17c651547334f"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1697, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}