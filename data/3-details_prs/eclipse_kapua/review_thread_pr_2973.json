{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NzgxNjY2", "number": 2973, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo0OToyNFrOD8cXOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDo0N1rOD9UnmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzA1ODQ5OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaExceptionUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo0OToyNFrOGVYmCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyNzo1OVrOGV7Yzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NjIzMw==", "bodyText": "Please update the copyright message to reflect the timespan from the date of the file was created.\nSo this will be like:\nCopyright (c) 2017, 2020 Eurotech and/or its affiliates and others", "url": "https://github.com/eclipse/kapua/pull/2973#discussion_r425076233", "createdAt": "2020-05-14T11:49:24Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaExceptionUtilsTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2017 Eurotech and/or its affiliates and others\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a96c83f3e30258686b7c26f6b218b50c7fb017"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NjI4Ng==", "bodyText": "Hi @Coduz I have made this change, so can you please merge this into develop branch?  Thanks", "url": "https://github.com/eclipse/kapua/pull/2973#discussion_r425646286", "createdAt": "2020-05-15T08:27:59Z", "author": {"login": "sonja-ct"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaExceptionUtilsTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2017 Eurotech and/or its affiliates and others\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NjIzMw=="}, "originalCommit": {"oid": "f7a96c83f3e30258686b7c26f6b218b50c7fb017"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3NTQ1OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaExceptionUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDo0N1rOGWvyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDo0N1rOGWvyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDc2Mw==", "bodyText": "assertEquals has an overload method that accepts a message as a first argument. So fail invoked in the catch exception is not the correct usage of Assert stuff.\nPlease change this and also other similar usages.", "url": "https://github.com/eclipse/kapua/pull/2973#discussion_r426504763", "createdAt": "2020-05-18T09:50:47Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaExceptionUtilsTest.java", "diffHunk": "@@ -52,16 +60,114 @@ public void testConvertPersistenceException() {\n         Throwable a = new RollbackException(\"rollback2\", r);\n         PersistenceException persistExc1 = new PersistenceException(a);\n \n-        Exception[] listOfPermittedExceptions = new Exception[]{kapExc0,kapExc1,kapExc2,kapExc3,\n-                kapExc4,persistExc0, persistExc1,optimisticLock};\n-        int sizeOfExceptions = listOfPermittedExceptions.length;\n-        // positive tests\n-        for (int i = 0; i < sizeOfExceptions; i++) {\n+        Exception[] listOfExceptions = new Exception[]{kapExc0, kapExc1, kapExc2, kapExc3, kapExc4, persistExc0, persistExc1, optimisticLock};\n+        Exception[] listOfExpectedExceptions = new Exception[]{kapExc0, kapExc1, kapExc2, kapExc3, KapuaException.internalError(kapExc4, \"Error during Persistence Operation\"), KapuaException.internalError(persistExc0, \"Error during Persistence Operation\"), KapuaException.internalError(persistExc1, \"Error during Persistence Operation\"), new KapuaOptimisticLockingException(optimisticLock)};\n+\n+        for (int i = 0; i < listOfExceptions.length; i++) {\n+            try {\n+                assertEquals(listOfExpectedExceptions[i].toString(), KapuaExceptionUtils.convertPersistenceException(listOfExceptions[i]).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30a56bf165d54071de9b6cb9d4403892f640fde1"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1823, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}