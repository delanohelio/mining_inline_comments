{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMjQ2NzA5", "number": 3166, "title": "MFA authentication and CRUD operations via REST API", "bodyText": "This PR introduces authentication and CRUD operations for Multi Factor Authentication via REST API.\nMoreover, this PR also fixes open issues concerning MFA :\n\nthe MFA should not be enabled for other users (thus, should only be self enabled);\nthe MFA creation should be disabled for SSO user;\n\nand improves the security of the trust key used for the MFA.\nRelated Issue\nFix #3168 , fix #3144\nDescription of the solution adopted\nThe following MFA endpoints are provided for CRUD operations:\n\nGET /{scopeId}/users/{userId}/mfa to get the MfaOption entity of the given user;\nPOST /{scopeId}/users/{userId}/mfa to enable the MFA for the provided user;\nDEL /{scopeId}/users/{userId}/mfa to disable the MFA for the provided user;\nDEL /{scopeId}/users/{userId}/mfa/disableTrust to disable the machine trust of the MfaOption for the provided user.\n\nThe MFA 'create' will return an MfaOption object which also contain the QR code image, the MFA secret in plaintext and the list of scratch codes (in plaintext too). Note that the MFA secret and the scratch codes are stored in the DB in an encrypted format, and the creation is the only moment in which they are visible to the user. An 'update' endpoint is not provided, since an MfaOption cannot be modified (but only deleted).\nMoreover, a new authentication endpoint is provided:\n\nPOST /authentication/mfa in order to authenticate through username, password and MFA authentication code (or machine trust key).\n\nThis endpoint also allows to enable the machine trust, it the enableTrust=true query parameter is provided.\nThe normal authentication endpoint (username + pwd) has been improved in such a way to return the 'REQUIRE_MFA_CREDENTIALS' Kapua error code in case the user has the MFA enabled. Note also that the machine trust key can be obtained in plain text only through the access token when the MFA login Rest API is performed with enableTrust=true. The  GET of  an MfaOption will always return encrypted values, for both the MfaOption secret and the trust key (if set).\nThe GwtScratchCode classes and services have been removed, moreover the whole management of scratch codes in the Web UI has been simplified and the scratch code generation has been incorporated in the create method of the MfaOptionServiceImpl class. These changes have been required in order to make it possible to generate the MfaOption via REST API in a single step.\nThe trust key has been improved with BCrypt encryption on the DB, and it's returned in plain text only with the access token when the enableTrust is triggered, in both the Rest APIs and in the GWT based Web UI. Moreover, to address security concerns, now only a single machine at a time can be trusted (if a new browser/machine is trusted, the old one will lose the trust). Multiple machine trust will be introduced again with a dedicated issue/PR, with an implementation that allows using a unique trust key for each machine.\nScreenshots\nn/a\nAny side note on the changes made\nn/a", "createdAt": "2020-12-02T19:40:09Z", "url": "https://github.com/eclipse/kapua/pull/3166", "merged": true, "mergeCommit": {"oid": "d1ae134b1e91eb7592896c200b500a1026f0a6a8"}, "closed": true, "closedAt": "2020-12-16T10:24:17Z", "author": {"login": "gbarbon"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi9lH0gBqjQwNzQzMDg2NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmsQ_GAFqTU1MzU0MzU1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/d00018025bc42dba27aed52697c9339c960da062", "committedDate": "2020-12-02T19:35:04Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "e81f4627273ab38560ccd0177cd03c1737380f20", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/e81f4627273ab38560ccd0177cd03c1737380f20", "committedDate": "2020-12-04T20:14:12Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e81f4627273ab38560ccd0177cd03c1737380f20", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/e81f4627273ab38560ccd0177cd03c1737380f20", "committedDate": "2020-12-04T20:14:12Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "4082f88a7e6af075ea314a42153c0c9802a1facb", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/4082f88a7e6af075ea314a42153c0c9802a1facb", "committedDate": "2020-12-04T20:23:45Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4082f88a7e6af075ea314a42153c0c9802a1facb", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/4082f88a7e6af075ea314a42153c0c9802a1facb", "committedDate": "2020-12-04T20:23:45Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "ae1a9e2152ff90da229598e13dcafd6ded6b6e8c", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/ae1a9e2152ff90da229598e13dcafd6ded6b6e8c", "committedDate": "2020-12-07T10:13:09Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae1a9e2152ff90da229598e13dcafd6ded6b6e8c", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/ae1a9e2152ff90da229598e13dcafd6ded6b6e8c", "committedDate": "2020-12-07T10:13:09Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "28ba4fbc1a9f084d69ce692b12a7672cf526ea1d", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/28ba4fbc1a9f084d69ce692b12a7672cf526ea1d", "committedDate": "2020-12-09T16:39:09Z", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28ba4fbc1a9f084d69ce692b12a7672cf526ea1d", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/28ba4fbc1a9f084d69ce692b12a7672cf526ea1d", "committedDate": "2020-12-09T16:39:09Z", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "aa79af2a3c61e3d3f9bfc4ddf4059f0fa12412d1", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/aa79af2a3c61e3d3f9bfc4ddf4059f0fa12412d1", "committedDate": "2020-12-10T09:46:39Z", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73e0dfd7fb9ef90f36b8c18c7d50b49557746cea", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/73e0dfd7fb9ef90f36b8c18c7d50b49557746cea", "committedDate": "2020-12-10T13:31:41Z", "message": "Sso docker-compose aligned to latest datastore changes and elasticsearch v. 6.8.7\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "700c05e9f90aedf210d10224d03897407c6f1312", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/700c05e9f90aedf210d10224d03897407c6f1312", "committedDate": "2020-12-14T11:52:07Z", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "700c05e9f90aedf210d10224d03897407c6f1312", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/700c05e9f90aedf210d10224d03897407c6f1312", "committedDate": "2020-12-14T11:52:07Z", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "28cd039b596d03a6ab83ba944279eb379dcf0e48", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/28cd039b596d03a6ab83ba944279eb379dcf0e48", "committedDate": "2020-12-14T13:54:39Z", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzM1MDYw", "url": "https://github.com/eclipse/kapua/pull/3166#pullrequestreview-544735060", "createdAt": "2020-12-04T08:11:37Z", "commit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMTozOFrOH_FaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjo0OFrOH_Fk5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMDkzMQ==", "bodyText": "@path(\"{scopeId}/users/{userId}/mfa\")", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535910931", "createdAt": "2020-12-04T08:11:38Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjg0Mg==", "bodyText": "@PathParam(\"userId\") EntityId userId,", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535912842", "createdAt": "2020-12-04T08:15:09Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzYyNQ==", "bodyText": "@path(\"trust\")", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535913625", "createdAt": "2020-12-04T08:16:38Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,\n+            @QueryParam(\"offset\") @DefaultValue(\"0\") int offset,\n+            @QueryParam(\"limit\") @DefaultValue(\"50\") int limit) throws KapuaException {\n+        MfaOptionQuery query = mfaOptionFactory.newQuery(scopeId);\n+\n+        AndPredicate andPredicate = query.andPredicate();\n+        if (userId != null) {\n+            andPredicate.and(query.attributePredicate(MfaOptionAttributes.USER_ID, userId));\n+        }\n+        query.setPredicate(andPredicate);\n+        query.setOffset(offset);\n+        query.setLimit(limit);\n+\n+        return query(scopeId, query);\n+    }\n+\n+    /**\n+     * Queries the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The {@link MfaOptionListResult} of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_query\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public MfaOptionListResult query(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return (MfaOptionListResult) mfaOptionService.query(query);  // FIXME: it does not seems to work without the cast, why?\n+    }\n+\n+    /**\n+     * Counts the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The count of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_count\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public CountResult count(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return new CountResult(mfaOptionService.count(query));\n+    }\n+\n+    /**\n+     * Creates a new {@link MfaOption} based on the information provided in {@link MfaOptionCreator} parameter.\n+     *\n+     * @param scopeId          The {@link ScopeId} in which to create the {@link MfaOption}\n+     * @param mfaOptionCreator Provides the information for the new {@link MfaOption} to be created.\n+     * @return The newly created {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response create(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionCreator mfaOptionCreator) throws KapuaException {\n+        mfaOptionCreator.setScopeId(scopeId);\n+\n+        return returnCreated(mfaOptionService.create(mfaOptionCreator));\n+    }\n+\n+    /**\n+     * Returns the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param scopeId     The {@link ScopeId} of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the requested {@link MfaOption}.\n+     * @return The requested {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Path(\"{mfaOptionId}\")\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOption find(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        MfaOption mfaOption = mfaOptionService.find(scopeId, mfaOptionId);\n+\n+        if (mfaOption == null) {\n+            throw new KapuaEntityNotFoundException(MfaOption.TYPE, mfaOptionId);\n+        }\n+\n+        return mfaOption;\n+    }\n+\n+    /**\n+     * Deletes the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param mfaOptionId The id of the {@link MfaOption} to be deleted.\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @DELETE\n+    @Path(\"{mfaOptionId}\")\n+    public Response deleteMfaOption(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        mfaOptionService.delete(scopeId, mfaOptionId);\n+\n+        return returnNoContent();\n+    }\n+\n+    /**\n+     * Disable trusted machine for a given {@link MfaOption}.\n+     *\n+     * @param scopeId     The ScopeId of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the {@link MfaOption}\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"{mfaOptionId}/disabletrust\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzcwMw==", "bodyText": "@DELETE", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535913703", "createdAt": "2020-12-04T08:16:48Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,\n+            @QueryParam(\"offset\") @DefaultValue(\"0\") int offset,\n+            @QueryParam(\"limit\") @DefaultValue(\"50\") int limit) throws KapuaException {\n+        MfaOptionQuery query = mfaOptionFactory.newQuery(scopeId);\n+\n+        AndPredicate andPredicate = query.andPredicate();\n+        if (userId != null) {\n+            andPredicate.and(query.attributePredicate(MfaOptionAttributes.USER_ID, userId));\n+        }\n+        query.setPredicate(andPredicate);\n+        query.setOffset(offset);\n+        query.setLimit(limit);\n+\n+        return query(scopeId, query);\n+    }\n+\n+    /**\n+     * Queries the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The {@link MfaOptionListResult} of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_query\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public MfaOptionListResult query(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return (MfaOptionListResult) mfaOptionService.query(query);  // FIXME: it does not seems to work without the cast, why?\n+    }\n+\n+    /**\n+     * Counts the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The count of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_count\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public CountResult count(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return new CountResult(mfaOptionService.count(query));\n+    }\n+\n+    /**\n+     * Creates a new {@link MfaOption} based on the information provided in {@link MfaOptionCreator} parameter.\n+     *\n+     * @param scopeId          The {@link ScopeId} in which to create the {@link MfaOption}\n+     * @param mfaOptionCreator Provides the information for the new {@link MfaOption} to be created.\n+     * @return The newly created {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response create(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionCreator mfaOptionCreator) throws KapuaException {\n+        mfaOptionCreator.setScopeId(scopeId);\n+\n+        return returnCreated(mfaOptionService.create(mfaOptionCreator));\n+    }\n+\n+    /**\n+     * Returns the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param scopeId     The {@link ScopeId} of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the requested {@link MfaOption}.\n+     * @return The requested {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Path(\"{mfaOptionId}\")\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOption find(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        MfaOption mfaOption = mfaOptionService.find(scopeId, mfaOptionId);\n+\n+        if (mfaOption == null) {\n+            throw new KapuaEntityNotFoundException(MfaOption.TYPE, mfaOptionId);\n+        }\n+\n+        return mfaOption;\n+    }\n+\n+    /**\n+     * Deletes the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param mfaOptionId The id of the {@link MfaOption} to be deleted.\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @DELETE\n+    @Path(\"{mfaOptionId}\")\n+    public Response deleteMfaOption(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        mfaOptionService.delete(scopeId, mfaOptionId);\n+\n+        return returnNoContent();\n+    }\n+\n+    /**\n+     * Disable trusted machine for a given {@link MfaOption}.\n+     *\n+     * @param scopeId     The ScopeId of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the {@link MfaOption}\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22f8cfeb4e66d396189f97db3d1479d0e39abb0", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/e22f8cfeb4e66d396189f97db3d1479d0e39abb0", "committedDate": "2020-12-15T13:24:25Z", "message": "Fixed QA failure caused by TriggerNeverFiresException\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74326cbb374f8f89a5072d28f8897b037cdaa40d", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/74326cbb374f8f89a5072d28f8897b037cdaa40d", "committedDate": "2020-12-15T14:05:57Z", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79fb44fabd35ed48c44d978981846d63f59f5b2b", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/79fb44fabd35ed48c44d978981846d63f59f5b2b", "committedDate": "2020-12-15T14:05:57Z", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8328b635fa4041dd896f5c0d29b30e238de22469", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/8328b635fa4041dd896f5c0d29b30e238de22469", "committedDate": "2020-12-15T14:05:57Z", "message": "Disabling MFA for external non-internal users\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0688906c190600e344e09637514b33a6e857eab4", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/0688906c190600e344e09637514b33a6e857eab4", "committedDate": "2020-12-15T14:05:57Z", "message": "Sso docker-compose aligned to latest datastore changes and elasticsearch v. 6.8.7\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "committedDate": "2020-12-15T14:05:57Z", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28cd039b596d03a6ab83ba944279eb379dcf0e48", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/28cd039b596d03a6ab83ba944279eb379dcf0e48", "committedDate": "2020-12-14T13:54:39Z", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}, "afterCommit": {"oid": "e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "author": {"user": {"login": "gbarbon", "name": "Gianluca Barbon"}}, "url": "https://github.com/eclipse/kapua/commit/e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "committedDate": "2020-12-15T14:05:57Z", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTQzNTUy", "url": "https://github.com/eclipse/kapua/pull/3166#pullrequestreview-553543552", "createdAt": "2020-12-16T10:20:44Z", "commit": {"oid": "e3c41a85726676589e2b7f9a75d08c8bec15dbc4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 170, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}