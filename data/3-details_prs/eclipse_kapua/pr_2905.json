{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTE1NzYz", "number": 2905, "title": "Fix shiro configuration", "bodyText": "Brief description of the PR.\nRemove hardcoded Shiro configuration and override the ModularRealmAuthorizer to use a more efficient check for multiple permissions at the same time.\nRelated Issue\nnone\nDescription of the solution adopted\nThe Shiro configuration was wrongly instantiated by code from the AuthorizationService. So any change done on shiro.ini had no effect (on broker side at least) since it was overwritten later by the AuthorizationService initialization.\nThe Shiro ModularRealmAuthorizer uses a for loop while checking for multiple permissions. For performance reason, on Kapua side, we would like to use a different method already exposed by the Authorizer.\nThe shiro.ini configuration is changed and the changes did are described inside the file.\nScreenshots\nnone\nAny side note on the changes made\nnone", "createdAt": "2020-03-20T12:51:59Z", "url": "https://github.com/eclipse/kapua/pull/2905", "merged": true, "mergeCommit": {"oid": "85ef094a67b786d7ddd84bc8dc81a49df5e9828d"}, "closed": true, "closedAt": "2020-03-24T14:57:47Z", "author": {"login": "riccardomodanese"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPjfZXgBqjMxNTAxMzM3NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQwbj2gBqjMxNTkwMzc1NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "085b1935a58f863d762bbedaa1048a5568e99d66", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/085b1935a58f863d762bbedaa1048a5568e99d66", "committedDate": "2020-03-20T12:25:15Z", "message": "fix shiro configuration - test fix\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>"}, "afterCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/466e7f64d52171e9590aaa8eb45899d0ea100220", "committedDate": "2020-03-20T16:55:46Z", "message": "fix shiro configuration - test fix\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjYwNDEy", "url": "https://github.com/eclipse/kapua/pull/2905#pullrequestreview-378660412", "createdAt": "2020-03-20T17:02:56Z", "commit": {"oid": "085b1935a58f863d762bbedaa1048a5568e99d66"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzowMzoyMVrOF5cE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzozMjowOVrOF5dDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MzE0MQ==", "bodyText": "This should invoke isPermitted(Lists.newArrayList(permission) so we can use the same logic and we don't need to keep methods aligned", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395773141", "createdAt": "2020-03-20T17:03:21Z", "author": {"login": "Coduz"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;\n+        }\n+        else {\n+            List<org.apache.shiro.authz.Permission> permissionsShiro = permissions.stream()\n+                    .map(permission -> (org.apache.shiro.authz.Permission) permission)\n+                    .collect(Collectors.toList());\n+            return SecurityUtils.getSubject().isPermitted(permissionsShiro);\n+        }\n+    }\n+\n     @Override\n     public boolean isPermitted(Permission permission)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3ODIyOQ==", "bodyText": "UnavailableSecurityManagerException is eaten.\nAdd log at least of the message Exception", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395778229", "createdAt": "2020-03-20T17:12:39Z", "author": {"login": "Coduz"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MDI1NQ==", "bodyText": "Ini supports .loadFromPath and using \"classpath:shiro.ini\" should work, right?", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395780255", "createdAt": "2020-03-20T17:16:03Z", "author": {"login": "Coduz"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");\n+            final URL shiroIniUrl = getClass().getResource(\"/shiro.ini\");\n+            Ini shiroIni = new Ini();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MTE3Mw==", "bodyText": "Make this reuse boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions)", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395781173", "createdAt": "2020-03-20T17:17:45Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?\n+            for (Realm realm : getRealms()) {\n+                return ((Authorizer) realm).isPermitted(principals, permissions);\n+            }\n+        }\n+        return new boolean[0];\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, String... permissions) {\n+        assertRealmsConfigured();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MjExNw==", "bodyText": "Per permission checking right now we have only one AuthorizingRealm \ud83d\ude01 Remove this question", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395782117", "createdAt": "2020-03-20T17:19:24Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NDczOA==", "bodyText": "Replace this with Arrays.fill(new boolean[permissions.size()], true );", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395784738", "createdAt": "2020-03-20T17:23:51Z", "author": {"login": "Coduz"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4OTI2MA==", "bodyText": "Maybe this is:\nif (!CollectionUtils.isEmpty(permissions)) {\nThis is currently doing something only when  the given List<Permission> is empty", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395789260", "createdAt": "2020-03-20T17:32:09Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef03f87c1904336c3a18ef2a8315a170c663e3a", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/9ef03f87c1904336c3a18ef2a8315a170c663e3a", "committedDate": "2020-03-24T08:06:16Z", "message": "fix shiro configuration - add custom Authenticator to avaid redundant queries on broker login operation\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>\nSigned-off-by: Claudio Mezzasalma <claudio.mezzasalma@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c39b6856d2b3689784a68210a11428a3d1d81fd5", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/c39b6856d2b3689784a68210a11428a3d1d81fd5", "committedDate": "2020-03-24T08:06:16Z", "message": "fix shiro configuration - test fix\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dcfa8d39bff5751f52b4a2f87c616808530beb", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/17dcfa8d39bff5751f52b4a2f87c616808530beb", "committedDate": "2020-03-24T10:33:57Z", "message": "fix shiro configuration - fix\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/466e7f64d52171e9590aaa8eb45899d0ea100220", "committedDate": "2020-03-20T16:55:46Z", "message": "fix shiro configuration - test fix\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>"}, "afterCommit": {"oid": "17dcfa8d39bff5751f52b4a2f87c616808530beb", "author": {"user": {"login": "riccardomodanese", "name": null}}, "url": "https://github.com/eclipse/kapua/commit/17dcfa8d39bff5751f52b4a2f87c616808530beb", "committedDate": "2020-03-24T10:33:57Z", "message": "fix shiro configuration - fix\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 217, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}