{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjY3MTY5", "number": 2984, "title": "Fixed and added new cucumber unit tests for Device", "bodyText": "Signed-off-by: code-incubus nemanja.milutinovic@comtrade.com\nFixed unit tests for Device and added new test scenarios for clientID validation.\nRelated Issue:\n#2811\nDescription of the solution adopted:\nTest scenarios that are added in this PR are checking functionalities regarding Device. All-new scenarios are added to DeviceRegistry.feature. Scenarios are testing if Device ID is correctly created, edited, or deleted. Also, I've added @Inject annotations at DeviceEventServiceImpl.java.\nAnother small change (removing commented feature file ) is at runner class for job service unit tests.\nScreenshots\n/\nAny side note on the changes made\n/", "createdAt": "2020-05-21T10:09:47Z", "url": "https://github.com/eclipse/kapua/pull/2984", "merged": true, "mergeCommit": {"oid": "ad299964449807e542aeac50d50d00647bd4abb0"}, "closed": true, "closedAt": "2020-05-26T12:34:42Z", "author": {"login": "code-incubus"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcktkbCAFqTQxNzUwODY4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclD6I_AFqTQxODI1MTYyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTA4Njgy", "url": "https://github.com/eclipse/kapua/pull/2984#pullrequestreview-417508682", "createdAt": "2020-05-25T07:26:11Z", "commit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNjoxMlrOGZ3RtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMjoxNFrOGZ8vgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzIzNg==", "bodyText": "Please change the method name to: \"iUpdateTheDeviceClientIDToNewClientId\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429773236", "createdAt": "2020-05-25T07:26:12Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test-steps/src/main/java/org/eclipse/kapua/service/device/registry/steps/DeviceRegistrySteps.java", "diffHunk": "@@ -2983,4 +2983,68 @@ public void iFilterDevices(List<CucDevice> parameters) throws Exception {\n             stepData.put(\"DeviceList\", devices);\n         }\n     }\n+\n+    @When(\"^I search for a device with name \\\"([^\\\"]*)\\\"$\")\n+    public void iSearchForADeviceWithName(String clientID) throws Throwable {\n+        try {\n+            stepData.remove(\"Device\");\n+            primeException();\n+            DeviceQuery query = deviceFactory.newQuery(SYS_SCOPE_ID);\n+            query.setPredicate(query.attributePredicate(DeviceAttributes.CLIENT_ID, clientID, AttributePredicate.Operator.EQUAL));\n+            DeviceListResult queryResult = deviceRegistryService.query(query);\n+            Device foundDevice = queryResult.getFirstItem();\n+            stepData.put(\"Device\", foundDevice);\n+            stepData.put(\"queryResult\", queryResult);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I create device with null clientID$\")\n+    public void iCreateDeviceWithNullClientID() throws Throwable{\n+        DeviceCreator deviceCreator = deviceFactory.newCreator(getCurrentScopeId());\n+        deviceCreator.setClientId(null);\n+        stepData.put(\"DeviceCreator\", deviceCreator);\n+\n+        try {\n+            primeException();\n+            stepData.remove(\"Device\");\n+            Device device = deviceRegistryService.create(deviceCreator);\n+            stepData.put(\"Device\", device);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I try to create devices with invalid symbols \\\"([^\\\"]*)\\\" in name$\")\n+    public void iTryToCreateDevicesWithInvalidSymbolsInName(String invalidCharacters) throws Exception {\n+        DeviceCreator deviceCreator = deviceFactory.newCreator(getCurrentScopeId());\n+        for (int i = 0; i < invalidCharacters.length(); i++) {\n+            String deviceName = \"deviceName\" + invalidCharacters.charAt(i);\n+            deviceCreator.setClientId(deviceName);\n+            primeException();\n+            try {\n+                Device device = deviceRegistryService.create(deviceCreator);\n+                stepData.put(\"Device\", device);\n+                stepData.put(\"CurrentDeviceId\", device.getId());\n+            } catch (KapuaException ex) {\n+                verifyException(ex);\n+            }\n+        }\n+    }\n+\n+    @When(\"^I update the device clientID from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iUpdateTheDeviceClientIDFromToNewClientId(String oldClientId, String newClientId) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MzY2NQ==", "bodyText": "Please change step name to: \"@given(\"^I create a device with null clientID$\")\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429773665", "createdAt": "2020-05-25T07:27:07Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test-steps/src/main/java/org/eclipse/kapua/service/device/registry/steps/DeviceRegistrySteps.java", "diffHunk": "@@ -2983,4 +2983,68 @@ public void iFilterDevices(List<CucDevice> parameters) throws Exception {\n             stepData.put(\"DeviceList\", devices);\n         }\n     }\n+\n+    @When(\"^I search for a device with name \\\"([^\\\"]*)\\\"$\")\n+    public void iSearchForADeviceWithName(String clientID) throws Throwable {\n+        try {\n+            stepData.remove(\"Device\");\n+            primeException();\n+            DeviceQuery query = deviceFactory.newQuery(SYS_SCOPE_ID);\n+            query.setPredicate(query.attributePredicate(DeviceAttributes.CLIENT_ID, clientID, AttributePredicate.Operator.EQUAL));\n+            DeviceListResult queryResult = deviceRegistryService.query(query);\n+            Device foundDevice = queryResult.getFirstItem();\n+            stepData.put(\"Device\", foundDevice);\n+            stepData.put(\"queryResult\", queryResult);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I create device with null clientID$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Mzc4NQ==", "bodyText": "Please change the method name to: \"iCreateADeviceWithNullClientID\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429773785", "createdAt": "2020-05-25T07:27:20Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test-steps/src/main/java/org/eclipse/kapua/service/device/registry/steps/DeviceRegistrySteps.java", "diffHunk": "@@ -2983,4 +2983,68 @@ public void iFilterDevices(List<CucDevice> parameters) throws Exception {\n             stepData.put(\"DeviceList\", devices);\n         }\n     }\n+\n+    @When(\"^I search for a device with name \\\"([^\\\"]*)\\\"$\")\n+    public void iSearchForADeviceWithName(String clientID) throws Throwable {\n+        try {\n+            stepData.remove(\"Device\");\n+            primeException();\n+            DeviceQuery query = deviceFactory.newQuery(SYS_SCOPE_ID);\n+            query.setPredicate(query.attributePredicate(DeviceAttributes.CLIENT_ID, clientID, AttributePredicate.Operator.EQUAL));\n+            DeviceListResult queryResult = deviceRegistryService.query(query);\n+            Device foundDevice = queryResult.getFirstItem();\n+            stepData.put(\"Device\", foundDevice);\n+            stepData.put(\"queryResult\", queryResult);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I create device with null clientID$\")\n+    public void iCreateDeviceWithNullClientID() throws Throwable{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NDIxNQ==", "bodyText": "Please delete this empty line.", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429774215", "createdAt": "2020-05-25T07:28:14Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/java/org/eclipse/kapua/service/device/registry/test/CucumberWithPropertiesForDeviceRegistry.java", "diffHunk": "@@ -88,6 +90,8 @@ protected void configure() {\n \n                 bind(DeviceEventService.class).toInstance(new DeviceEventServiceImpl());\n                 bind(DeviceEventFactory.class).toInstance(new DeviceEventFactoryImpl());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NDkyNQ==", "bodyText": "Please change the description to: \"Counting events in an empty (non existing) scope must return a count of 0. No exception should be thrown.\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429774925", "createdAt": "2020-05-25T07:29:46Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceEvent.feature", "diffHunk": "@@ -122,53 +75,17 @@ Scenario: Delete a non existent event\n     Trying to delete a non existent event (no matching entity ID) must cause an\n     exception to be thrown.\n \n-    Given Scope with ID 12\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    And The User ID 5\n     Given A device named \"first\"\n     And A device named \"second\"\n     And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type deviceEvent with id/name\"\n     And A \"CREATE\" event from device \"first\"\n     When I delete an event with a random ID\n     Then An exception was thrown\n \n-Scenario: Count events in scope\n-    It must be possible to count all events in a given scope. Only the events for this\n-    scope should counted, all other events must be ignored.\n-\n-    Given Scope with ID 12\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    And The User ID 5\n-    Given A device named \"first\"\n-    And A device named \"second\"\n-    And I have 15 \"CREATE\" events from device \"first\"\n-\n-    Given Scope with ID 42\n-    And I configure the device registry service\n-      | type    | name                   | value |\n-      | boolean | infiniteChildEntities  | true  |\n-      | integer | maxNumberChildEntities |  10   |\n-    And A device named \"third\"\n-    And I have 25 \"READ\" events from device \"third\"\n-    When I count events for scope 12\n-    Then I count 15\n-\n Scenario: Count events in empty scope\n     Counting events in an empty (non existing) scope must return a count of 0. No\n     exception must be thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDY4OQ==", "bodyText": "Can you please change the name of this step, because it is not clear what it does...?", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429860689", "createdAt": "2020-05-25T10:27:00Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDkxNg==", "bodyText": "Can you please change the name of this step to: \"When I search for a device with a nonexisting registry ID\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429860916", "createdAt": "2020-05-25T10:27:35Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive\n+\n+    Scenario: Find device by registry ID\n+        It must be possible to find a device in the registry by its registry ID.\n+\n+        Given A device named \"TestDevice\"\n+        When I search for a device with the remembered ID\n+        Then The device matches the creator parameters\n+\n+    Scenario: Find device by client ID\n+        It must be possible to find a device in the registry by its Client ID.\n+\n+        Given A device named \"TestDevice\"\n+        Then I find the device based on clientID \"TestDevice\"\n+\n+    Scenario: Try to find a device with an invalid registry ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTE4MA==", "bodyText": "Can you please change the name of this step to: \"When I search for a device with a nonexisting client ID\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429861180", "createdAt": "2020-05-25T10:28:11Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive\n+\n+    Scenario: Find device by registry ID\n+        It must be possible to find a device in the registry by its registry ID.\n+\n+        Given A device named \"TestDevice\"\n+        When I search for a device with the remembered ID\n+        Then The device matches the creator parameters\n+\n+    Scenario: Find device by client ID\n+        It must be possible to find a device in the registry by its Client ID.\n+\n+        Given A device named \"TestDevice\"\n+        Then I find the device based on clientID \"TestDevice\"\n+\n+    Scenario: Try to find a device with an invalid registry ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random ID\n+        Then There is no such device\n+\n+    Scenario: Try to find a device with an invalid client ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random client ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTQ2MQ==", "bodyText": "Please change the step name to: \"And I extract the device with correct BIOS version\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429861461", "createdAt": "2020-05-25T10:28:55Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive\n+\n+    Scenario: Find device by registry ID\n+        It must be possible to find a device in the registry by its registry ID.\n+\n+        Given A device named \"TestDevice\"\n+        When I search for a device with the remembered ID\n+        Then The device matches the creator parameters\n+\n+    Scenario: Find device by client ID\n+        It must be possible to find a device in the registry by its Client ID.\n+\n+        Given A device named \"TestDevice\"\n+        Then I find the device based on clientID \"TestDevice\"\n+\n+    Scenario: Try to find a device with an invalid registry ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random ID\n+        Then There is no such device\n+\n+    Scenario: Try to find a device with an invalid client ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random client ID\n+        Then There is no such device\n+\n+    Scenario: Device query - find by BIOS version\n+        It must be possible to construct arbitrary device registry queries. In this case\n+        several test devices are created with different BIOS version values.\n+        A query based on the BIOS version must only return the correct device.\n+\n+        Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n+        Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n+        Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        And I extract the first device", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTcxNg==", "bodyText": "Why do you query for this device here? Is this relavant?", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429861716", "createdAt": "2020-05-25T10:29:37Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive\n+\n+    Scenario: Find device by registry ID\n+        It must be possible to find a device in the registry by its registry ID.\n+\n+        Given A device named \"TestDevice\"\n+        When I search for a device with the remembered ID\n+        Then The device matches the creator parameters\n+\n+    Scenario: Find device by client ID\n+        It must be possible to find a device in the registry by its Client ID.\n+\n+        Given A device named \"TestDevice\"\n+        Then I find the device based on clientID \"TestDevice\"\n+\n+    Scenario: Try to find a device with an invalid registry ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random ID\n+        Then There is no such device\n+\n+    Scenario: Try to find a device with an invalid client ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random client ID\n+        Then There is no such device\n+\n+    Scenario: Device query - find by BIOS version\n+        It must be possible to construct arbitrary device registry queries. In this case\n+        several test devices are created with different BIOS version values.\n+        A query based on the BIOS version must only return the correct device.\n+\n+        Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n+        Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n+        Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        And I extract the first device\n+        Then The device client id is \"TestDevice1\"\n+\n+    Scenario: Device queries\n+        Test several variants of device registry queries.\n+        Kapua should not return any error.\n+\n+        Given A device named \"TestDevice\"\n+        Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n+        Given I create 201 randomly named devices with BIOS version \"1.2.0\"\n+        Given I create 98 randomly named devices with BIOS version \"1.3.0\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        Then I find 100 devices\n+        When I query for devices with BIOS version \"1.3.0\"\n+        Then I find 98 devices\n+        When I query for devices with BIOS different from \"1.2.0\"\n+        Then I find 201 devices\n+        When I query for devices with Client Id \"TestDevice\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 397}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjQzMA==", "bodyText": "Please change or reuse one of the previous steps (\"Then I tryi to find device with ID..\"). Just checking in the background if this has been done or not is not enough.", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429862430", "createdAt": "2020-05-25T10:31:18Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive\n+\n+    Scenario: Find device by registry ID\n+        It must be possible to find a device in the registry by its registry ID.\n+\n+        Given A device named \"TestDevice\"\n+        When I search for a device with the remembered ID\n+        Then The device matches the creator parameters\n+\n+    Scenario: Find device by client ID\n+        It must be possible to find a device in the registry by its Client ID.\n+\n+        Given A device named \"TestDevice\"\n+        Then I find the device based on clientID \"TestDevice\"\n+\n+    Scenario: Try to find a device with an invalid registry ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random ID\n+        Then There is no such device\n+\n+    Scenario: Try to find a device with an invalid client ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random client ID\n+        Then There is no such device\n+\n+    Scenario: Device query - find by BIOS version\n+        It must be possible to construct arbitrary device registry queries. In this case\n+        several test devices are created with different BIOS version values.\n+        A query based on the BIOS version must only return the correct device.\n+\n+        Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n+        Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n+        Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        And I extract the first device\n+        Then The device client id is \"TestDevice1\"\n+\n+    Scenario: Device queries\n+        Test several variants of device registry queries.\n+        Kapua should not return any error.\n+\n+        Given A device named \"TestDevice\"\n+        Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n+        Given I create 201 randomly named devices with BIOS version \"1.2.0\"\n+        Given I create 98 randomly named devices with BIOS version \"1.3.0\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        Then I find 100 devices\n+        When I query for devices with BIOS version \"1.3.0\"\n+        Then I find 98 devices\n+        When I query for devices with BIOS different from \"1.2.0\"\n+        Then I find 201 devices\n+        When I query for devices with Client Id \"TestDevice\"\n+        Then I find 1 device\n+\n+    Scenario: Count devices with a specific BIOS version\n+        It must be possible to count devices based on arbitrary rules.\n+        To this end several devices are created with different BIOS version.\n+        A device count based on the BIOS version value is performed. Only\n+        the number of devices that match the specified BIOS version is\n+        returned.\n+\n+        Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n+        Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n+        Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n+        When I count devices with BIOS version \"1.2.0\"\n+        Then I count 25\n+\n+    Scenario: Try to update the device client ID\n+        The Client ID of a device cannot be changed after creation. Any attempt to\n+        after this ID must be silently ignored. No exception should be raised.\n+\n+        Given A device named \"TestDevice\"\n+        When I update the device clientID from \"TestDevice\" to \"NewClientId\"\n+        Then The client ID was not changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 419}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2Mjc4NQ==", "bodyText": "Can you please change the name of this step to: \"When I delete a device with nonexisting ID\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429862785", "createdAt": "2020-05-25T10:32:14Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -16,237 +16,209 @@ Feature: Device Registry CRUD tests\n     The Device registry Service is responsible for CRUD operations for devices in the Kapua\n     database.\n \n-Scenario: Create a single device\n-    Create a single test device. The resulting device must have a unique ID assigned\n-    by the creation process.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device has a non-null ID\n-\n-Scenario: All device parameters must match the device creator\n-    Create a test device and check whether it was created correctly. All the device\n-    parameters must match the device creator specifications.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"test_device\"\n-    Then The device matches the creator parameters\n-\n-Scenario: Case sensitivness of named device searches\n-    Searching by client ID is case sensitive.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"CaseSensitiveTestName\"\n-    Then Named device registry searches are case sensitive\n-\n-Scenario: Find device by registry ID\n-    It must be possible to find a device in the registry by its registry ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I search for a device with the remembered ID\n-    Then The device matches the creator parameters\n-\n-Scenario: Find device by client ID\n-    It must be possible to find a device in the registry by its Client ID.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Then It is possible to find the device based on its client ID\n-\n-Scenario: Try to find a device with an invalid registry ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random ID\n-    Then There is no such device\n-\n-Scenario: Try to find a device with an invalid client ID\n-    Searching for a nonexistent device should not raise any exception. Only a null\n-    device should be returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    When I search for a device with a random client ID\n-    Then There is no such device\n-\n-Scenario: Device query - find by BIOS version\n-    It must be possible to construct arbitrary device registry queries. In this case\n-    several test devices are created with different BIOS version values.\n-    A query based on the BIOS version must only return the corect device.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n-    Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n-    Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n-    When I query for devices with BIOS version \"1.2.0\"\n-    And I extract the first device\n-    Then The device client id is \"TestDevice2\"\n-\n-Scenario: Device queries\n-    Test several variants of device registry queries.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 100 randomly named devices with BIOS version \"1.3.0\"\n-    When I query for devices with BIOS version \"1.1.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS version \"1.3.0\"\n-    Then I find 100 devices\n-    When I query for devices with BIOS different from \"1.2.0\"\n-    Then I find 201 devices\n-    When I query for devices with Client Id \"TestDevice\"\n-    Then I find 1 device\n-\n-Scenario: Count devices in a specific scope\n-    It must be possible to count all the devices in a specific scope.\n-    To this end several devices are created in 3 different scopes. When\n-    counted, only the number of devices in the specified scope must be returned.\n-\n-    Given The KAPUA-SYS scope\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    5    |\n-        | integer | maxNumberChildEntities     | 50    |    5    |\n-    Given I create 20 randomly named devices in scope 5\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    6    |\n-        | integer | maxNumberChildEntities     | 5     |    6    |\n-    Given I create 30 randomly named devices in scope 6\n-    When I configure the device registry service\n-        | type    | name                       | value | scopeId |\n-        | boolean | infiniteChildEntities      | true  |    7    |\n-        | integer | maxNumberChildEntities     | 5     |    7    |\n-    Given I create 45 randomly named devices in scope 7\n-    When I count the devices in scope 6\n-    Then I count 30\n-    When I count the devices in scope 5\n-    Then I count 20\n-\n-Scenario: Count devices with a specific BIOS version\n-    It must be possible to count devices based on arbitrary rules.\n-    To this end several devices are created with different BIOS version.\n-    A device count based on the BIOS version value is performed. Only\n-    the number of devices that match the specified BIOS version is\n-    returned.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n-    Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n-    Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n-    When I count devices with BIOS version \"1.2.0\"\n-    Then I count 25\n-\n-Scenario: Update an existing device\n-    Most of the parameters of an existing device are updatable.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update some device parameters\n-    Then The device was correctly updated\n-\n-Scenario: Try to update the device client ID\n-    The Client ID of a defice cannot be changed after creation. Any attempt to\n-    alter this ID must be silently ignored. No exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I update the device cleint ID to \"NewClientId\"\n-    Then The client ID was not changed\n-\n-Scenario: Update a non existing device\n-    An attempt to update a non existing device should raise an exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n-    When I update a device with an invalid ID\n-    Then An exception was thrown\n-\n-Scenario: Delete an existing device from the registry\n-    It must be possible to delete a device from the registry. To this\n-    end a test device is created and subsequently deleted.\n-    A search for this device should yield a null but no exception.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given A device named \"TestDevice\"\n-    When I delete the device with the clientId \"TestDevice\"\n-    Then There is no device with the client ID \"TestDevice\"\n-\n-Scenario: Try to delete a non existing device from the registry\n-    If a user tries to delete a non existing device from the registry an\n-    exception must be raised.\n-\n-    Given The KAPUA-SYS scope\n-    And I configure the device registry service\n-        | type    | name                   | value |\n-        | boolean | infiniteChildEntities  | true  |\n-        | integer | maxNumberChildEntities |  10   |\n-    Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n-    When I delete a device with random IDs\n-    Then An exception was thrown\n-\n-Scenario: Device factory sanity checks\n-    The Account factory must instantiate and return valid items. For this test it is enough\n-    that the items returned are not null.\n-\n-    Then All device factory functions must return non null values\n+    Scenario: Create a single device with null clientID value\n+        Try to create a single device with ClientID set to NULL.\n+        An exception should be thrown.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create device with null clientID\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with valid clientID\n+        Create a single test device. The resulting device must have a unique clientID assigned\n+        by the creation process.\n+\n+        Given I create a device with name \"device\"\n+        When I search for a device with name \"device\"\n+        Then I find device with clientId \"device\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with case sensitive clientID\n+        Create a single device with case sensitive clientID name.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"testDevice\"\n+        When I search for a device with name \"testDevice\"\n+        Then I find device with clientId \"testDevice\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with spaces in clientID\n+        Create a single device with space in clientID.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"test Device\"\n+        When I search for a device with name \"test Device\"\n+        Then I find device with clientId \"test Device\"\n+        And No exception was thrown\n+\n+    Scenario: Create a single device with an empty string for clientID\n+        Create a single device with clientID that contains an empty string for it.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalNullArgumentException\" with the text \"An illegal null value was provided for the argument deviceCreator.clientId.\"\n+        When I create a device with name \"\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 255 characters\n+        Create a single device with clientID that contains 255 characters.\n+        Kapua should not return any error.\n+\n+        Given I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        When I search for a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        Then I find device with clientId \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceva\"\n+        And No exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains 256 characters\n+        Create a single device with clientID that contains 256 characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"Value over than allowed max length. Max length is 255.\"\n+        When I create a device with name \"validDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDevicevalidDeviceval\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating a single device with clientID that contains invalid characters\n+        Create a single device with clientID that contains invalid characters.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I try to create devices with invalid symbols \"#+*&,?>/\" in name\n+        Then An exception was thrown\n+\n+    #This scenario must be separated from the above scenario because upper scenario cannot contain (::) characters in a row.\n+    Scenario: Creating a single device with clientID that contains invalid character\n+        Create a single device with clientID invalid special character ::.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaIllegalArgumentException\" with the text \"An illegal value was provided for the argument deviceCreator.clientId\"\n+        When I create a device with name \"testDevice::\"\n+        Then An exception was thrown\n+\n+    Scenario: Creating two device with the same clientID\n+        Try to create two devices with same clientID.\n+        Kapua should return an error.\n+\n+        Given I expect the exception \"KapuaDuplicateNameException\" with the text \"An entity with the same name testDevice already exists.\"\n+        When I create a device with name \"testDevice\"\n+        And I create a device with name \"testDevice\"\n+        Then An exception was thrown\n+\n+    Scenario: All device parameters must match the device creator\n+        Create a test device and check whether it was created correctly. All the device\n+        parameters must match the device creator specifications.\n+\n+        Given A device named \"testDevice\"\n+        Then The device matches the creator parameters\n+\n+    Scenario: Case sensitiveness of named device searches\n+        Searching by client ID is case sensitive.\n+\n+        Given A device named \"CaseSensitiveTestName\"\n+        Then Named device registry searches are case sensitive\n+\n+    Scenario: Find device by registry ID\n+        It must be possible to find a device in the registry by its registry ID.\n+\n+        Given A device named \"TestDevice\"\n+        When I search for a device with the remembered ID\n+        Then The device matches the creator parameters\n+\n+    Scenario: Find device by client ID\n+        It must be possible to find a device in the registry by its Client ID.\n+\n+        Given A device named \"TestDevice\"\n+        Then I find the device based on clientID \"TestDevice\"\n+\n+    Scenario: Try to find a device with an invalid registry ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random ID\n+        Then There is no such device\n+\n+    Scenario: Try to find a device with an invalid client ID\n+        Searching for a nonexistent device should not raise any exception.\n+        Empty list should be returned.\n+\n+        When I search for a device with a random client ID\n+        Then There is no such device\n+\n+    Scenario: Device query - find by BIOS version\n+        It must be possible to construct arbitrary device registry queries. In this case\n+        several test devices are created with different BIOS version values.\n+        A query based on the BIOS version must only return the correct device.\n+\n+        Given A device with BIOS version \"1.1.0\" named \"TestDevice1\"\n+        Given A device with BIOS version \"1.2.0\" named \"TestDevice2\"\n+        Given A device with BIOS version \"1.3.0\" named \"TestDevice3\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        And I extract the first device\n+        Then The device client id is \"TestDevice1\"\n+\n+    Scenario: Device queries\n+        Test several variants of device registry queries.\n+        Kapua should not return any error.\n+\n+        Given A device named \"TestDevice\"\n+        Given I create 100 randomly named devices with BIOS version \"1.1.0\"\n+        Given I create 201 randomly named devices with BIOS version \"1.2.0\"\n+        Given I create 98 randomly named devices with BIOS version \"1.3.0\"\n+        When I query for devices with BIOS version \"1.1.0\"\n+        Then I find 100 devices\n+        When I query for devices with BIOS version \"1.3.0\"\n+        Then I find 98 devices\n+        When I query for devices with BIOS different from \"1.2.0\"\n+        Then I find 201 devices\n+        When I query for devices with Client Id \"TestDevice\"\n+        Then I find 1 device\n+\n+    Scenario: Count devices with a specific BIOS version\n+        It must be possible to count devices based on arbitrary rules.\n+        To this end several devices are created with different BIOS version.\n+        A device count based on the BIOS version value is performed. Only\n+        the number of devices that match the specified BIOS version is\n+        returned.\n+\n+        Given I create 15 randomly named devices with BIOS version \"1.1.0\"\n+        Given I create 25 randomly named devices with BIOS version \"1.2.0\"\n+        Given I create 35 randomly named devices with BIOS version \"1.3.0\"\n+        When I count devices with BIOS version \"1.2.0\"\n+        Then I count 25\n+\n+    Scenario: Try to update the device client ID\n+        The Client ID of a device cannot be changed after creation. Any attempt to\n+        after this ID must be silently ignored. No exception should be raised.\n+\n+        Given A device named \"TestDevice\"\n+        When I update the device clientID from \"TestDevice\" to \"NewClientId\"\n+        Then The client ID was not changed\n+\n+    Scenario: Update a non existing device\n+        An attempt to update a non existing device should raise an exception.\n+\n+        Given A device named \"TestDevice\"\n+        And I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type device with id/name\"\n+        When I update a device with an invalid ID\n+        Then An exception was thrown\n+\n+    Scenario: Delete an existing device from the registry\n+        It must be possible to delete a device from the registry. To this\n+        end a test device is created and subsequently deleted.\n+        A search for this device should yield a null but no exception.\n+\n+        Given A device named \"TestDevice\"\n+        When I delete the device with the clientId \"TestDevice\"\n+        Then There is no device with the client ID \"TestDevice\"\n+\n+    Scenario: Try to delete a non existing device from the registry\n+        If a user tries to delete a non existing device from the registry an\n+        exception must be raised.\n+\n+        Given I expect the exception \"KapuaEntityNotFoundException\" with the text \"The entity of type DeviceImpl with id/name\"\n+        When I delete a device with random IDs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006"}, "originalPosition": 443}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3a37b2d3d959648d490c9033a2a9c95aeea8006", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/a3a37b2d3d959648d490c9033a2a9c95aeea8006", "committedDate": "2020-05-20T15:00:27Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}, "afterCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/693068e395b18c6fe72b493386e3695fbcd57c60", "committedDate": "2020-05-25T11:12:02Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjQzNDA1", "url": "https://github.com/eclipse/kapua/pull/2984#pullrequestreview-417643405", "createdAt": "2020-05-25T11:21:00Z", "commit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyMTowMVrOGZ94Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyMTo1MVrOGZ95cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTM3MQ==", "bodyText": "I see this only now - please change header to \" * Copyright (c) 2019, 2020 Eurotech and/or its affiliates and others\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429881371", "createdAt": "2020-05-25T11:21:01Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/java/org/eclipse/kapua/service/device/registry/test/CucumberWithPropertiesForDeviceRegistry.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2019 Eurotech and/or its affiliates and others\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTQwNw==", "bodyText": "I see this only now - please change header to \" * Copyright (c) 2019, 2020 Eurotech and/or its affiliates and others\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429881407", "createdAt": "2020-05-25T11:21:06Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/java/org/eclipse/kapua/service/device/registry/test/RunDeviceRegistryUnitTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2019 Eurotech and/or its affiliates and others\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTUxNA==", "bodyText": "I see this only now - please change header to \" * Copyright (c) 2017, 2020 Eurotech and/or its affiliates and others\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429881514", "createdAt": "2020-05-25T11:21:22Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistryConnection.feature", "diffHunk": "@@ -1,5 +1,5 @@\n ###############################################################################\n-# Copyright (c) 2017, 2019 Eurotech and/or its affiliates and others\n+# Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTU1NQ==", "bodyText": "I see this only now - please change header to \" * Copyright (c) 2017, 2020 Eurotech and/or its affiliates and others\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429881555", "createdAt": "2020-05-25T11:21:29Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistryValidation.feature", "diffHunk": "@@ -1,5 +1,5 @@\n ###############################################################################\n-# Copyright (c) 2017, 2019 Eurotech and/or its affiliates and others\n+# Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTcxMg==", "bodyText": "I see this only now - please change header to \" * Copyright (c) 2017, 2020 Eurotech and/or its affiliates and others\"", "url": "https://github.com/eclipse/kapua/pull/2984#discussion_r429881712", "createdAt": "2020-05-25T11:21:51Z", "author": {"login": "LeoNerdoG"}, "path": "service/device/registry/test/src/test/resources/features/DeviceRegistry.feature", "diffHunk": "@@ -1,5 +1,5 @@\n ###############################################################################\n-# Copyright (c) 2017, 2019 Eurotech and/or its affiliates and others\n+# Copyright (c) 2020 Eurotech and/or its affiliates and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "693068e395b18c6fe72b493386e3695fbcd57c60", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/693068e395b18c6fe72b493386e3695fbcd57c60", "committedDate": "2020-05-25T11:12:02Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}, "afterCommit": {"oid": "4fc58d2f4b37bbaf106765be9db15f19fa539a8e", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/4fc58d2f4b37bbaf106765be9db15f19fa539a8e", "committedDate": "2020-05-25T11:31:37Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b766ac0adceb2be1eed64fa94786e902557967", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/f2b766ac0adceb2be1eed64fa94786e902557967", "committedDate": "2020-05-25T11:58:12Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fc58d2f4b37bbaf106765be9db15f19fa539a8e", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/4fc58d2f4b37bbaf106765be9db15f19fa539a8e", "committedDate": "2020-05-25T11:31:37Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}, "afterCommit": {"oid": "f2b766ac0adceb2be1eed64fa94786e902557967", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/f2b766ac0adceb2be1eed64fa94786e902557967", "committedDate": "2020-05-25T11:58:12Z", "message": "Fixed cucumber unit tests for Device\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzExMzEz", "url": "https://github.com/eclipse/kapua/pull/2984#pullrequestreview-417711313", "createdAt": "2020-05-25T13:28:52Z", "commit": {"oid": "f2b766ac0adceb2be1eed64fa94786e902557967"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MjUxNjI0", "url": "https://github.com/eclipse/kapua/pull/2984#pullrequestreview-418251624", "createdAt": "2020-05-26T12:34:30Z", "commit": {"oid": "f2b766ac0adceb2be1eed64fa94786e902557967"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 178, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}