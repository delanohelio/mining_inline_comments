{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDA4NDUy", "number": 3003, "title": "Added JUnit tests for commons package", "bodyText": "Signed-off-by: code-incubus nemanja.milutinovic@comtrade.com\nAdded JUnit tests for util, event and metric package:\n\nHousekeeperRunTest.java\nRaiseServiceEventInterceptorTest.java\nServiceEntryTest.java\nServiceEventClientConfigurationTest.java\nServiceEventModuleConfigurationTest.java\nServiceEventScopeTest.java\nMetricsServiceImplTest.java\nClassUtilTest.java\nJsonServiceEventMarshalerTest.java\nXmlServiceEventMarshalerTest.java\n\nRelated Issue\nNone\nDescription of the solution adopted\n/\nScreenshots\n/\nAny side note on the changes made\n/", "createdAt": "2020-06-17T17:57:41Z", "url": "https://github.com/eclipse/kapua/pull/3003", "merged": true, "mergeCommit": {"oid": "5d4e1a3d781ace52dc9c594d4a0899ecd5ffcd75"}, "closed": true, "closedAt": "2020-07-08T07:25:53Z", "author": {"login": "code-incubus"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsZVhWgFqTQzMjk3NzcxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyntR3gFqTQ0NDAxNDA5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTc3NzE3", "url": "https://github.com/eclipse/kapua/pull/3003#pullrequestreview-432977717", "createdAt": "2020-06-18T06:33:38Z", "commit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjozMzozOFrOGlhZag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjo0NzoyNFrOGlhuXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NzY3NA==", "bodyText": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441997674", "createdAt": "2020-06-18T06:33:38Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5Nzg3OQ==", "bodyText": "Pleae change method name to: \"createInstanceOfClass\" - becasue ou are creating only one instance of a class.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441997879", "createdAt": "2020-06-18T06:34:10Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODA5Mg==", "bodyText": "Please rename variable to \"\"houseKeeperRun\".", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998092", "createdAt": "2020-06-18T06:34:38Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODExMA==", "bodyText": "Please rename variable to \"\"houseKeeperRun\".", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998110", "createdAt": "2020-06-18T06:34:42Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODMzNg==", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998336", "createdAt": "2020-06-18T06:35:16Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODY1NA==", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998654", "createdAt": "2020-06-18T06:36:04Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODk2OQ==", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998969", "createdAt": "2020-06-18T06:36:58Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5OTA5Ng==", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441999096", "createdAt": "2020-06-18T06:37:17Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5OTE3NQ==", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_matching\" is not a valid comment...", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441999175", "createdAt": "2020-06-18T06:37:32Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDI2Mg==", "bodyText": "This is only one format for a date.\nPlease add additional ones (e.g. dd-mm-yyyy, yyyy-mm-dd,...), see: https://docs.oracle.com/javase/8/docs/api/java/util/Date.html", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000262", "createdAt": "2020-06-18T06:40:22Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDQ4NQ==", "bodyText": "See comment above, please use additional date formats.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000485", "createdAt": "2020-06-18T06:40:57Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDc2MA==", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000760", "createdAt": "2020-06-18T06:41:36Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetVersionNullTest() {\n+        houseKeeper.setVersion(null);\n+        assertNull(\"not_null\", houseKeeper.getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDgyNA==", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000824", "createdAt": "2020-06-18T06:41:49Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTA2MQ==", "bodyText": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442001061", "createdAt": "2020-06-18T06:42:22Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTQxMA==", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"does_not_contain\"\" is not a valid comment...", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442001410", "createdAt": "2020-06-18T06:43:18Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetVersionNullTest() {\n+        houseKeeper.setVersion(null);\n+        assertNull(\"not_null\", houseKeeper.getVersion());\n+    }\n+\n+    @Test\n+    public void setAndGetVersionRegularValuesTest() {\n+        Long[] permittedValues = {-9223372036854775808L, 9223372036854775807L, 12345678910L, 1234L, 88928L, 1L};\n+        for(Long value : permittedValues) {\n+            houseKeeper.setVersion(value);\n+            assertEquals(\"does_not_contain\", value, houseKeeper.getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTk4Mg==", "bodyText": "Please stick to you naming convention.\nIf you have: \"setAndGetLastRunByNullTest\" and \"setAndGetLastRunByTest\" above, then you should name this test \"setAndGetVersionTest\". Exclude the word \"regularVersion\".", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442001982", "createdAt": "2020-06-18T06:44:51Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetVersionNullTest() {\n+        houseKeeper.setVersion(null);\n+        assertNull(\"not_null\", houseKeeper.getVersion());\n+    }\n+\n+    @Test\n+    public void setAndGetVersionRegularValuesTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzAzNg==", "bodyText": "Please change method name to \"createInstanceOfClass\", becasue you are creating only one instance of a class.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442003036", "createdAt": "2020-06-18T06:47:24Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/RaiseServiceEventInterceptorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import com.codahale.metrics.Counter;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+\n+@Category(JUnitTests.class)\n+public class RaiseServiceEventInterceptorTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDI1NDMw", "url": "https://github.com/eclipse/kapua/pull/3003#pullrequestreview-434025430", "createdAt": "2020-06-19T12:08:40Z", "commit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjowODo0MVrOGmSiBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyOTo0NFrOGmU30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMjY5Mw==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442802693", "createdAt": "2020-06-19T12:08:41Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMjcwNw==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442802707", "createdAt": "2020-06-19T12:08:45Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjMxMQ==", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812311", "createdAt": "2020-06-19T12:31:03Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjM0Mw==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812343", "createdAt": "2020-06-19T12:31:07Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjM3OA==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812378", "createdAt": "2020-06-19T12:31:11Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjYzNw==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812637", "createdAt": "2020-06-19T12:31:43Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjcyMw==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812723", "createdAt": "2020-06-19T12:31:53Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", null);\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjg2Mw==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812863", "createdAt": "2020-06-19T12:32:11Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", null);\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzQxNg==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837416", "createdAt": "2020-06-19T13:22:39Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzQ2MA==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837460", "createdAt": "2020-06-19T13:22:44Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzUxNA==", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837514", "createdAt": "2020-06-19T13:22:51Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzY3OA==", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837678", "createdAt": "2020-06-19T13:23:09Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzcwOA==", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837708", "createdAt": "2020-06-19T13:23:13Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzcyNQ==", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837725", "createdAt": "2020-06-19T13:23:16Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODc0OA==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838748", "createdAt": "2020-06-19T13:25:16Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODc1Mw==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838753", "createdAt": "2020-06-19T13:25:16Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODc3MA==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838770", "createdAt": "2020-06-19T13:25:18Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODkwMQ==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838901", "createdAt": "2020-06-19T13:25:34Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTY4MQ==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839681", "createdAt": "2020-06-19T13:27:09Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTcyNQ==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839725", "createdAt": "2020-06-19T13:27:13Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTgwMQ==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839801", "createdAt": "2020-06-19T13:27:21Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTg2Nw==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839867", "createdAt": "2020-06-19T13:27:29Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTkyMA==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839920", "createdAt": "2020-06-19T13:27:34Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTk2Ng==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839966", "createdAt": "2020-06-19T13:27:38Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDAwNw==", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840007", "createdAt": "2020-06-19T13:27:44Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDM1Nw==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840357", "createdAt": "2020-06-19T13:28:30Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDg4NA==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840884", "createdAt": "2020-06-19T13:29:27Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+                ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(value, value, serviceEventBusListener);\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDkxMA==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840910", "createdAt": "2020-06-19T13:29:30Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+                ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(value, value, serviceEventBusListener);\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getAddress());\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getClientName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDk3OA==", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840978", "createdAt": "2020-06-19T13:29:38Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+                ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(value, value, serviceEventBusListener);\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getAddress());\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getClientName());\n+                assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MTA0MA==", "bodyText": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442841040", "createdAt": "2020-06-19T13:29:44Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjU3NzA0", "url": "https://github.com/eclipse/kapua/pull/3003#pullrequestreview-434657704", "createdAt": "2020-06-22T07:15:10Z", "commit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoxNToxMVrOGm0fIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjoxMToyOVrOGoEPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTAwOQ==", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationRegularTest\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443359009", "createdAt": "2020-06-22T07:15:11Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTQwNA==", "bodyText": "Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443359404", "createdAt": "2020-06-22T07:16:00Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTY0NQ==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443359645", "createdAt": "2020-06-22T07:16:32Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MDAxMA==", "bodyText": "Missing string message in the equals assert.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443360010", "createdAt": "2020-06-22T07:17:24Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTE5Mw==", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationNullAddressTest\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361193", "createdAt": "2020-06-22T07:20:12Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTI3MQ==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361271", "createdAt": "2020-06-22T07:20:22Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTMxMg==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361312", "createdAt": "2020-06-22T07:20:26Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTM3NQ==", "bodyText": "Missing string message in the equals assert.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361375", "createdAt": "2020-06-22T07:20:32Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTQ5Mw==", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationNullEntityTest\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361493", "createdAt": "2020-06-22T07:20:51Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTU3Nw==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361577", "createdAt": "2020-06-22T07:21:00Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTYwNw==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361607", "createdAt": "2020-06-22T07:21:04Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTcxNA==", "bodyText": "Missing string message in the equals assert.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361714", "createdAt": "2020-06-22T07:21:18Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTg3OA==", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationNullEntityAndAddressTest\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361878", "createdAt": "2020-06-22T07:21:37Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTk1NQ==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361955", "createdAt": "2020-06-22T07:21:44Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTk5MA==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361990", "createdAt": "2020-06-22T07:21:49Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjA3MA==", "bodyText": "Missing string message in the equals assert.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362070", "createdAt": "2020-06-22T07:22:00Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjY5NQ==", "bodyText": "Missing string message in the equals assert.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362695", "createdAt": "2020-06-22T07:23:10Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mjc1Ng==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362756", "createdAt": "2020-06-22T07:23:17Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mjc5MA==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362790", "createdAt": "2020-06-22T07:23:21Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzEwNA==", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationAllNullTest\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363104", "createdAt": "2020-06-22T07:24:02Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzE1OA==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363158", "createdAt": "2020-06-22T07:24:10Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzE5Mg==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363192", "createdAt": "2020-06-22T07:24:14Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzIxMw==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363213", "createdAt": "2020-06-22T07:24:17Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzU5NA==", "bodyText": "Some strings are double, some are not even tested, if they are parsed correctly. please see comments above in other classes how to fix this.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363594", "createdAt": "2020-06-22T07:25:08Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mzc4Mg==", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363782", "createdAt": "2020-06-22T07:25:31Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(value, entityManagerFactory, serviceEventClientConfiguration);\n+            assertEquals(\"not_equals\", value, moduleConfiguration.getInternalAddress());\n+            assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mzg2MA==", "bodyText": "Missing string message in the equals assert.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363860", "createdAt": "2020-06-22T07:25:40Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(value, entityManagerFactory, serviceEventClientConfiguration);\n+            assertEquals(\"not_equals\", value, moduleConfiguration.getInternalAddress());\n+            assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+            assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NDAyMQ==", "bodyText": "Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443364021", "createdAt": "2020-06-22T07:25:59Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(value, entityManagerFactory, serviceEventClientConfiguration);\n+            assertEquals(\"not_equals\", value, moduleConfiguration.getInternalAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1NjkzOQ==", "bodyText": "If you can't find a way, delete the test.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444656939", "createdAt": "2020-06-24T05:43:55Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventScopeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.KapuaRuntimeException;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.lang.reflect.Field;\n+import java.util.Stack;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventScopeTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+    }\n+\n+    @Test\n+    public void serviceEventBeginNullTest() throws Exception {\n+        ServiceEventScope.begin();\n+        Field privateEventContextThdLocal = ServiceEventScope.class.getDeclaredField(\"eventContextThdLocal\");\n+        privateEventContextThdLocal.setAccessible(true);\n+        ThreadLocal<Stack<ServiceEvent>> fieldValue = (ThreadLocal<Stack<ServiceEvent>>) privateEventContextThdLocal.get(null);\n+        assertNotNull(fieldValue.get().peek().getContextId());\n+    }\n+\n+    @Test(expected = KapuaRuntimeException.class)\n+    public void serviceEventEndNullTest() throws Exception {\n+        Field privateEventContextThdLocal = ServiceEventScope.class.getDeclaredField(\"eventContextThdLocal\");\n+        privateEventContextThdLocal.setAccessible(true);\n+        ThreadLocal<Stack<ServiceEvent>> fieldValue = (ThreadLocal<Stack<ServiceEvent>>) privateEventContextThdLocal.get(null);\n+        fieldValue.set(null);\n+        ServiceEventScope.end();\n+    }\n+\n+    @Test\n+    public void serviceEventBeginEndTest() throws Exception {\n+        ServiceEventScope.begin();\n+        Field privateEventContextThdLocal = ServiceEventScope.class.getDeclaredField(\"eventContextThdLocal\");\n+        privateEventContextThdLocal.setAccessible(true);\n+        ThreadLocal<Stack<ServiceEvent>> fieldValue = (ThreadLocal<Stack<ServiceEvent>>) privateEventContextThdLocal.get(null);\n+        ServiceEventScope.end();\n+        assertNull(\"not_null\", fieldValue.get());\n+    }\n+\n+    @Test\n+    public void serviceEventSetAndGetRegularTest() {\n+        ServiceEventScope.set(serviceEvent);\n+        assertEquals(\"not_equals\", serviceEvent, ServiceEventScope.get());\n+    }\n+\n+//    @Test // This test should be run separately from the test suite", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1ODQzNw==", "bodyText": "Please move these two lines above \"@before\".", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444658437", "createdAt": "2020-06-24T05:49:03Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1ODk2OQ==", "bodyText": "Please change method name to: \"MetricsServiceImplConstructorTest\" or something similar.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444658969", "createdAt": "2020-06-24T05:50:45Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1OTA1NQ==", "bodyText": "Constructor is not private - why are you doing this?", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444659055", "createdAt": "2020-06-24T05:50:57Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDE4OQ==", "bodyText": "Please try to use assertEquals or assertThat.\nChange the message accordingly.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444660189", "createdAt": "2020-06-24T05:54:38Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();\n+        metricsServiceConstructor.setAccessible(true);\n+        metricsServiceConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getMetricRegistry() {\n+        assertNotNull(metricServiceImpl.getMetricRegistry());\n+    }\n+\n+    @Test\n+    public void getCounterTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getCounter(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDIxOA==", "bodyText": "Please try to use assertEquals or assertThat.\nChange the message accordingly.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444660218", "createdAt": "2020-06-24T05:54:44Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();\n+        metricsServiceConstructor.setAccessible(true);\n+        metricsServiceConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getMetricRegistry() {\n+        assertNotNull(metricServiceImpl.getMetricRegistry());\n+    }\n+\n+    @Test\n+    public void getCounterTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getCounter(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));\n+    }\n+\n+    @Test\n+    public void getHistogramTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getHistogram(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDIyMw==", "bodyText": "Please try to use assertEquals or assertThat.\nChange the message accordingly.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444660223", "createdAt": "2020-06-24T05:54:44Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();\n+        metricsServiceConstructor.setAccessible(true);\n+        metricsServiceConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getMetricRegistry() {\n+        assertNotNull(metricServiceImpl.getMetricRegistry());\n+    }\n+\n+    @Test\n+    public void getCounterTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getCounter(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));\n+    }\n+\n+    @Test\n+    public void getHistogramTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getHistogram(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));\n+    }\n+\n+    @Test\n+    public void getTimerTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getTimer(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MzI4Mw==", "bodyText": "Please change the header of the file to:\n/*******************************************************************************\n\nCopyright (c) 2016, 2020 Eurotech and/or its affiliates and others\n\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n\nContributors:\n\nEurotech - initial API and implementation\n\n\n\n*******************************************************************************/", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444663283", "createdAt": "2020-06-24T06:04:36Z", "author": {"login": "LeoNerdoG"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/TestJAXBContextProvider.java", "diffHunk": "@@ -19,6 +19,7 @@\n import org.eclipse.kapua.broker.core.router.SimpleEndPoint;\n import org.eclipse.kapua.commons.configuration.metatype.TscalarImpl;\n import org.eclipse.kapua.commons.util.xml.JAXBContextProvider;\n+import org.eclipse.kapua.event.ServiceEvent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NDc4Mw==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444664783", "createdAt": "2020-06-24T06:09:05Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NDg5NQ==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444664895", "createdAt": "2020-06-24T06:09:27Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTAxMA==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665010", "createdAt": "2020-06-24T06:09:48Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTAxNw==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665017", "createdAt": "2020-06-24T06:09:51Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTA0MA==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665040", "createdAt": "2020-06-24T06:09:55Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTA3OA==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665078", "createdAt": "2020-06-24T06:09:58Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTE2Mw==", "bodyText": "Please change message to \"Expected and actual values are not the same.\" or something similar.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665163", "createdAt": "2020-06-24T06:10:13Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());\n+    }\n+\n+    @Test\n+    public void getContentTypeTest() {\n+        assertEquals(\"not_equals\", \"application/json\", jsonServiceEventMarshaler.getContentType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTM2Nw==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665367", "createdAt": "2020-06-24T06:10:47Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTM4NA==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665384", "createdAt": "2020-06-24T06:10:51Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTQ4Nw==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665487", "createdAt": "2020-06-24T06:11:10Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTU0Nw==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665547", "createdAt": "2020-06-24T06:11:20Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTU1MQ==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665551", "createdAt": "2020-06-24T06:11:21Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTU3NQ==", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665575", "createdAt": "2020-06-24T06:11:23Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTYwNg==", "bodyText": "Please change message to \"Expected and actual values are not the same.\" or something similar.", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665606", "createdAt": "2020-06-24T06:11:29Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());\n+    }\n+\n+    @Test\n+    public void getContentTypeTest() {\n+        assertEquals(\"not_equals\", \"application/xml\", xmlServiceEventMarshaler.getContentType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTMzMjQ5", "url": "https://github.com/eclipse/kapua/pull/3003#pullrequestreview-436533249", "createdAt": "2020-06-24T10:48:31Z", "commit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0ODozMVrOGoM7Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0ODozMVrOGoM7Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNzk5NQ==", "bodyText": "I think it would be redundant to add some of these asserts because if a forwarded class exists, an object will be created, otherwise, it returns null. What do you think?", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444807995", "createdAt": "2020-06-24T10:48:31Z", "author": {"login": "code-incubus"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/util/ClassUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.util;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.ServiceEntry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class ClassUtilTest extends Assert {\n+\n+    String serviceName, address;\n+\n+    @Test\n+    public void constructorTest() throws Exception {\n+        Constructor<ClassUtil> classUtilConstructor = ClassUtil.class.getDeclaredConstructor();\n+        classUtilConstructor.setAccessible(true);\n+        classUtilConstructor.newInstance();\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void newInstanceNullTest() throws KapuaException {\n+        assertNull(\"The class does not exist.\", ClassUtil.newInstance(null, null));\n+    }\n+\n+    @Test\n+    public void newInstanceTest() throws KapuaException {\n+        assertNotNull(\"The class does not exist.\", ClassUtil.newInstance(\"org.eclipse.kapua.commons.event.ServiceEntry\", ServiceEntry.class, new Class<?>[]{String.class, String.class}, new Object[]{serviceName, address}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/d4f078b1dfb83c13e0b22edcd137f0948dec1727", "committedDate": "2020-06-17T14:48:29Z", "message": "Added JUnit tests for several package\n\nSigned-off-by: Nemanja Milutinovi\u0107 <nemanja.milutinovic@comtrade.com>"}, "afterCommit": {"oid": "56eb5c4a08946a16eb962e9a1ec6a059ed160aa4", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/56eb5c4a08946a16eb962e9a1ec6a059ed160aa4", "committedDate": "2020-06-24T13:04:17Z", "message": "Added JUnit tests for several packages\n\nSigned-off-by: Nemanja Milutinovi\u0107 <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDkwNDYz", "url": "https://github.com/eclipse/kapua/pull/3003#pullrequestreview-439090463", "createdAt": "2020-06-29T12:27:40Z", "commit": {"oid": "56eb5c4a08946a16eb962e9a1ec6a059ed160aa4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56eb5c4a08946a16eb962e9a1ec6a059ed160aa4", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/56eb5c4a08946a16eb962e9a1ec6a059ed160aa4", "committedDate": "2020-06-24T13:04:17Z", "message": "Added JUnit tests for several packages\n\nSigned-off-by: Nemanja Milutinovi\u0107 <nemanja.milutinovic@comtrade.com>"}, "afterCommit": {"oid": "a1370e5516f137d9bde8f31449579c4b139355a3", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/a1370e5516f137d9bde8f31449579c4b139355a3", "committedDate": "2020-07-01T05:26:35Z", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "committedDate": "2020-07-01T07:25:06Z", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1370e5516f137d9bde8f31449579c4b139355a3", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/a1370e5516f137d9bde8f31449579c4b139355a3", "committedDate": "2020-07-01T05:26:35Z", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}, "afterCommit": {"oid": "d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "committedDate": "2020-07-01T07:25:06Z", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDE0MDkz", "url": "https://github.com/eclipse/kapua/pull/3003#pullrequestreview-444014093", "createdAt": "2020-07-07T15:38:03Z", "commit": {"oid": "d136c70d8c762cfbca286b3dde8d3dcce46d7b80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 182, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}