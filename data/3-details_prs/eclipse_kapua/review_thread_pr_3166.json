{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMjQ2NzA5", "number": 3166, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMTozOFrOFArWOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjo0OFrOFAreIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU0NTIzOnYy", "diffSide": "RIGHT", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMTozOFrOH_FaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMTozOFrOH_FaEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMDkzMQ==", "bodyText": "@path(\"{scopeId}/users/{userId}/mfa\")", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535910931", "createdAt": "2020-12-04T08:11:38Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU1OTIzOnYy", "diffSide": "RIGHT", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNTowOVrOH_Fhig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNTowOVrOH_Fhig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjg0Mg==", "bodyText": "@PathParam(\"userId\") EntityId userId,", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535912842", "createdAt": "2020-12-04T08:15:09Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU2NDkxOnYy", "diffSide": "RIGHT", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjozOFrOH_FkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjozOFrOH_FkmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzYyNQ==", "bodyText": "@path(\"trust\")", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535913625", "createdAt": "2020-12-04T08:16:38Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,\n+            @QueryParam(\"offset\") @DefaultValue(\"0\") int offset,\n+            @QueryParam(\"limit\") @DefaultValue(\"50\") int limit) throws KapuaException {\n+        MfaOptionQuery query = mfaOptionFactory.newQuery(scopeId);\n+\n+        AndPredicate andPredicate = query.andPredicate();\n+        if (userId != null) {\n+            andPredicate.and(query.attributePredicate(MfaOptionAttributes.USER_ID, userId));\n+        }\n+        query.setPredicate(andPredicate);\n+        query.setOffset(offset);\n+        query.setLimit(limit);\n+\n+        return query(scopeId, query);\n+    }\n+\n+    /**\n+     * Queries the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The {@link MfaOptionListResult} of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_query\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public MfaOptionListResult query(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return (MfaOptionListResult) mfaOptionService.query(query);  // FIXME: it does not seems to work without the cast, why?\n+    }\n+\n+    /**\n+     * Counts the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The count of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_count\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public CountResult count(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return new CountResult(mfaOptionService.count(query));\n+    }\n+\n+    /**\n+     * Creates a new {@link MfaOption} based on the information provided in {@link MfaOptionCreator} parameter.\n+     *\n+     * @param scopeId          The {@link ScopeId} in which to create the {@link MfaOption}\n+     * @param mfaOptionCreator Provides the information for the new {@link MfaOption} to be created.\n+     * @return The newly created {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response create(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionCreator mfaOptionCreator) throws KapuaException {\n+        mfaOptionCreator.setScopeId(scopeId);\n+\n+        return returnCreated(mfaOptionService.create(mfaOptionCreator));\n+    }\n+\n+    /**\n+     * Returns the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param scopeId     The {@link ScopeId} of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the requested {@link MfaOption}.\n+     * @return The requested {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Path(\"{mfaOptionId}\")\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOption find(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        MfaOption mfaOption = mfaOptionService.find(scopeId, mfaOptionId);\n+\n+        if (mfaOption == null) {\n+            throw new KapuaEntityNotFoundException(MfaOption.TYPE, mfaOptionId);\n+        }\n+\n+        return mfaOption;\n+    }\n+\n+    /**\n+     * Deletes the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param mfaOptionId The id of the {@link MfaOption} to be deleted.\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @DELETE\n+    @Path(\"{mfaOptionId}\")\n+    public Response deleteMfaOption(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        mfaOptionService.delete(scopeId, mfaOptionId);\n+\n+        return returnNoContent();\n+    }\n+\n+    /**\n+     * Disable trusted machine for a given {@link MfaOption}.\n+     *\n+     * @param scopeId     The ScopeId of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the {@link MfaOption}\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"{mfaOptionId}/disabletrust\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU2NTQ1OnYy", "diffSide": "RIGHT", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjo0OFrOH_Fk5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjo0OFrOH_Fk5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzcwMw==", "bodyText": "@DELETE", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535913703", "createdAt": "2020-12-04T08:16:48Z", "author": {"login": "Coduz"}, "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,\n+            @QueryParam(\"offset\") @DefaultValue(\"0\") int offset,\n+            @QueryParam(\"limit\") @DefaultValue(\"50\") int limit) throws KapuaException {\n+        MfaOptionQuery query = mfaOptionFactory.newQuery(scopeId);\n+\n+        AndPredicate andPredicate = query.andPredicate();\n+        if (userId != null) {\n+            andPredicate.and(query.attributePredicate(MfaOptionAttributes.USER_ID, userId));\n+        }\n+        query.setPredicate(andPredicate);\n+        query.setOffset(offset);\n+        query.setLimit(limit);\n+\n+        return query(scopeId, query);\n+    }\n+\n+    /**\n+     * Queries the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The {@link MfaOptionListResult} of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_query\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public MfaOptionListResult query(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return (MfaOptionListResult) mfaOptionService.query(query);  // FIXME: it does not seems to work without the cast, why?\n+    }\n+\n+    /**\n+     * Counts the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The count of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_count\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public CountResult count(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return new CountResult(mfaOptionService.count(query));\n+    }\n+\n+    /**\n+     * Creates a new {@link MfaOption} based on the information provided in {@link MfaOptionCreator} parameter.\n+     *\n+     * @param scopeId          The {@link ScopeId} in which to create the {@link MfaOption}\n+     * @param mfaOptionCreator Provides the information for the new {@link MfaOption} to be created.\n+     * @return The newly created {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response create(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionCreator mfaOptionCreator) throws KapuaException {\n+        mfaOptionCreator.setScopeId(scopeId);\n+\n+        return returnCreated(mfaOptionService.create(mfaOptionCreator));\n+    }\n+\n+    /**\n+     * Returns the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param scopeId     The {@link ScopeId} of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the requested {@link MfaOption}.\n+     * @return The requested {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Path(\"{mfaOptionId}\")\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOption find(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        MfaOption mfaOption = mfaOptionService.find(scopeId, mfaOptionId);\n+\n+        if (mfaOption == null) {\n+            throw new KapuaEntityNotFoundException(MfaOption.TYPE, mfaOptionId);\n+        }\n+\n+        return mfaOption;\n+    }\n+\n+    /**\n+     * Deletes the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param mfaOptionId The id of the {@link MfaOption} to be deleted.\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @DELETE\n+    @Path(\"{mfaOptionId}\")\n+    public Response deleteMfaOption(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        mfaOptionService.delete(scopeId, mfaOptionId);\n+\n+        return returnNoContent();\n+    }\n+\n+    /**\n+     * Disable trusted machine for a given {@link MfaOption}.\n+     *\n+     * @param scopeId     The ScopeId of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the {@link MfaOption}\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00018025bc42dba27aed52697c9339c960da062"}, "originalPosition": 193}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1684, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}