{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDE2MzQz", "number": 3008, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDo0Nzo1M1rOEMhgqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowNzoyOFrOEMiELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTY3NDAzOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDo0Nzo1M1rOGurr2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODowNzo0NFrOG2mpew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMzQxOA==", "bodyText": "This test is always true.\nIs not possible to have a null object after a new, and if new EventStoreRecordImpl(scopeId) goes on exception, this assertNotNull is not executed.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r451603418", "createdAt": "2020-07-08T14:47:53Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNzAyNg==", "bodyText": "@sonja-ct I suggest that you check here if the created object is of right instance (for example we are expecting \"X\" instance and if in future this changes so the method returns instance of an object \"Y\" we will have a test that will check this.\nassertNotNull is generally used only when you ahve two outcomes, Null and some not null value. It can also be a part of some assertion list (several assertions that check various things). I agree with @Coduz on this one.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r452637026", "createdAt": "2020-07-10T05:57:19Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMzQxOA=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNDAxMg==", "bodyText": "But a result of a new is always a notNull object, unless Exception, which is not covered anyway by this assertNotNull. This is the same thing as writing assertTrue(true).\nIf new returns a null, well Java must be a bit stoned or something \ud83d\ude02", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r459904012", "createdAt": "2020-07-24T07:55:07Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMzQxOA=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwOTQ5OQ==", "bodyText": "I wouldn't also mind to check for the right instance type.\nDoing:\nEventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\nassertTrue(eventStoreRecordImpl instence of EventStoreRecordImpl)\n\nis useless for the same reasons.\nAlso this:\nEventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\nassertTrue(eventStoreRecordImpl instence of EventStoreRecord)\n\nis useless. In both cases, if that isn't true ClassCastException would be thrown when assigning the new result to the local variable.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r459909499", "createdAt": "2020-07-24T08:07:44Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMzQxOA=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTc0MzY3OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowMjo1NFrOGusYKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo1OToxOVrOG2mbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNDc2Mw==", "bodyText": "I think that testing for different values of scopeId is not meaningful.\nWe want to test only once test and get.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r451614763", "createdAt": "2020-07-08T15:02:54Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+            assertEquals(\"Expected and actual values should be the same.\", scopeId, eventStoreRecordImpl.getScopeId());\n+            assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        }\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest3() throws KapuaException {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(eventStoreRecord);\n+\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl.getContextId());\n+        assertEquals(\"Expected and actual values should be the same.\", new Date().toString(), eventStoreRecordImpl.getTimestamp().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getUserId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"service\", eventStoreRecordImpl.getService());\n+        assertEquals(\"Expected and actual values should be the same.\", \"entityType\", eventStoreRecordImpl.getEntityType());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getEntityId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"operation\", eventStoreRecordImpl.getOperation());\n+        assertEquals(\"Expected and actual values should be the same.\", \"input\", eventStoreRecordImpl.getInputs());\n+        assertEquals(\"Expected and actual values should be the same.\", \"output\", eventStoreRecordImpl.getOutputs());\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertEquals(\"Expected and actual values should be the same.\", \"note\", eventStoreRecordImpl.getNote());\n+    }\n+\n+    @Test\n+    public void setAndGetContextIdTest() throws KapuaException {\n+        String contextId = \"ContextId\";\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl1 = new EventStoreRecordImpl(scopeId);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(contextId);\n+            assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(null);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNzE1OQ==", "bodyText": "I agree. We can test only with \"null\" and BigInteger.ONE for example.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r452637159", "createdAt": "2020-07-10T05:57:52Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+            assertEquals(\"Expected and actual values should be the same.\", scopeId, eventStoreRecordImpl.getScopeId());\n+            assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        }\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest3() throws KapuaException {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(eventStoreRecord);\n+\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl.getContextId());\n+        assertEquals(\"Expected and actual values should be the same.\", new Date().toString(), eventStoreRecordImpl.getTimestamp().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getUserId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"service\", eventStoreRecordImpl.getService());\n+        assertEquals(\"Expected and actual values should be the same.\", \"entityType\", eventStoreRecordImpl.getEntityType());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getEntityId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"operation\", eventStoreRecordImpl.getOperation());\n+        assertEquals(\"Expected and actual values should be the same.\", \"input\", eventStoreRecordImpl.getInputs());\n+        assertEquals(\"Expected and actual values should be the same.\", \"output\", eventStoreRecordImpl.getOutputs());\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertEquals(\"Expected and actual values should be the same.\", \"note\", eventStoreRecordImpl.getNote());\n+    }\n+\n+    @Test\n+    public void setAndGetContextIdTest() throws KapuaException {\n+        String contextId = \"ContextId\";\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl1 = new EventStoreRecordImpl(scopeId);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(contextId);\n+            assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(null);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNDc2Mw=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTkzNw==", "bodyText": "Yes good", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r459905937", "createdAt": "2020-07-24T07:59:19Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+            assertEquals(\"Expected and actual values should be the same.\", scopeId, eventStoreRecordImpl.getScopeId());\n+            assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        }\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest3() throws KapuaException {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(eventStoreRecord);\n+\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl.getContextId());\n+        assertEquals(\"Expected and actual values should be the same.\", new Date().toString(), eventStoreRecordImpl.getTimestamp().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getUserId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"service\", eventStoreRecordImpl.getService());\n+        assertEquals(\"Expected and actual values should be the same.\", \"entityType\", eventStoreRecordImpl.getEntityType());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getEntityId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"operation\", eventStoreRecordImpl.getOperation());\n+        assertEquals(\"Expected and actual values should be the same.\", \"input\", eventStoreRecordImpl.getInputs());\n+        assertEquals(\"Expected and actual values should be the same.\", \"output\", eventStoreRecordImpl.getOutputs());\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertEquals(\"Expected and actual values should be the same.\", \"note\", eventStoreRecordImpl.getNote());\n+    }\n+\n+    @Test\n+    public void setAndGetContextIdTest() throws KapuaException {\n+        String contextId = \"ContextId\";\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl1 = new EventStoreRecordImpl(scopeId);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(contextId);\n+            assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(null);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNDc2Mw=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTc0ODcxOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowMzo1NlrOGusbLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjowMTo0OVrOGvq2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNTUzNA==", "bodyText": "The clone method has been already been tested in eventStoreRecordImplTest3, if I'm correct.\nSo also this is not needed.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r451615534", "createdAt": "2020-07-08T15:03:56Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+            assertEquals(\"Expected and actual values should be the same.\", scopeId, eventStoreRecordImpl.getScopeId());\n+            assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        }\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest3() throws KapuaException {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(eventStoreRecord);\n+\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl.getContextId());\n+        assertEquals(\"Expected and actual values should be the same.\", new Date().toString(), eventStoreRecordImpl.getTimestamp().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getUserId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"service\", eventStoreRecordImpl.getService());\n+        assertEquals(\"Expected and actual values should be the same.\", \"entityType\", eventStoreRecordImpl.getEntityType());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getEntityId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"operation\", eventStoreRecordImpl.getOperation());\n+        assertEquals(\"Expected and actual values should be the same.\", \"input\", eventStoreRecordImpl.getInputs());\n+        assertEquals(\"Expected and actual values should be the same.\", \"output\", eventStoreRecordImpl.getOutputs());\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertEquals(\"Expected and actual values should be the same.\", \"note\", eventStoreRecordImpl.getNote());\n+    }\n+\n+    @Test\n+    public void setAndGetContextIdTest() throws KapuaException {\n+        String contextId = \"ContextId\";\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl1 = new EventStoreRecordImpl(scopeId);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(contextId);\n+            assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(null);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+        }\n+\n+        EventStoreRecordImpl eventStoreRecordImpl2 = new EventStoreRecordImpl();\n+        assertNull(\"Null expected.\", eventStoreRecordImpl2.getContextId());\n+        eventStoreRecordImpl2.setContextId(contextId);\n+        assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl2.getContextId());\n+        eventStoreRecordImpl2.setContextId(null);\n+        assertNull(\"Null expected.\", eventStoreRecordImpl2.getContextId());\n+\n+        EventStoreRecordImpl eventStoreRecordImpl3 = new EventStoreRecordImpl(eventStoreRecord);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl3.getContextId());\n+        eventStoreRecordImpl3.setContextId(contextId);\n+        assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl3.getContextId());\n+        eventStoreRecordImpl3.setContextId(null);\n+        assertNull(\"Null expected.\", eventStoreRecordImpl3.getContextId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzODI3Nw==", "bodyText": "@Coduz here we are checking if the contextId is null and in the \"eventStoreRecordImplTest3\" we check if the expected and actual values are the same, so these are two different cases. If I am seeing right.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r452638277", "createdAt": "2020-07-10T06:01:49Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreRecordImplTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.service.event.store.internal;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdStatic;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreRecordImplTest extends Assert {\n+\n+    EventStoreRecord eventStoreRecord;\n+\n+    @Before\n+    public void initialize() {\n+        eventStoreRecord = Mockito.mock(EventStoreRecord.class);\n+\n+        Mockito.when(eventStoreRecord.getContextId()).thenReturn(\"contextId\");\n+        Mockito.when(eventStoreRecord.getTimestamp()).thenReturn(new Date());\n+        Mockito.when(eventStoreRecord.getUserId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getService()).thenReturn(\"service\");\n+        Mockito.when(eventStoreRecord.getEntityType()).thenReturn(\"entityType\");\n+        Mockito.when(eventStoreRecord.getEntityId()).thenReturn(new KapuaEid(BigInteger.TEN));\n+        Mockito.when(eventStoreRecord.getOperation()).thenReturn(\"operation\");\n+        Mockito.when(eventStoreRecord.getInputs()).thenReturn(\"input\");\n+        Mockito.when(eventStoreRecord.getOutputs()).thenReturn(\"output\");\n+        Mockito.when(eventStoreRecord.getStatus()).thenReturn(ServiceEvent.EventStatus.TRIGGERED);\n+        Mockito.when(eventStoreRecord.getNote()).thenReturn(\"note\");\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest1() {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl();\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest2() {\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(scopeId);\n+            assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+            assertEquals(\"Expected and actual values should be the same.\", scopeId, eventStoreRecordImpl.getScopeId());\n+            assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        }\n+    }\n+\n+    @Test\n+    public void eventStoreRecordImplTest3() throws KapuaException {\n+        EventStoreRecordImpl eventStoreRecordImpl = new EventStoreRecordImpl(eventStoreRecord);\n+\n+        assertThat(\"EventStoreRecordImpl object expected.\", eventStoreRecordImpl, IsInstanceOf.instanceOf(EventStoreRecordImpl.class));\n+        assertNotNull(\"Null not expected.\", eventStoreRecordImpl);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl.getContextId());\n+        assertEquals(\"Expected and actual values should be the same.\", new Date().toString(), eventStoreRecordImpl.getTimestamp().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getUserId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"service\", eventStoreRecordImpl.getService());\n+        assertEquals(\"Expected and actual values should be the same.\", \"entityType\", eventStoreRecordImpl.getEntityType());\n+        assertEquals(\"Expected and actual values should be the same.\", new KapuaEid(BigInteger.TEN), eventStoreRecordImpl.getEntityId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"operation\", eventStoreRecordImpl.getOperation());\n+        assertEquals(\"Expected and actual values should be the same.\", \"input\", eventStoreRecordImpl.getInputs());\n+        assertEquals(\"Expected and actual values should be the same.\", \"output\", eventStoreRecordImpl.getOutputs());\n+        assertEquals(\"Expected and actual values should be the same.\", ServiceEvent.EventStatus.TRIGGERED, eventStoreRecordImpl.getStatus());\n+        assertEquals(\"Expected and actual values should be the same.\", \"note\", eventStoreRecordImpl.getNote());\n+    }\n+\n+    @Test\n+    public void setAndGetContextIdTest() throws KapuaException {\n+        String contextId = \"ContextId\";\n+        KapuaId[] scopeIdList = {null, new KapuaIdStatic(BigInteger.ONE), new KapuaIdStatic(BigInteger.TEN), new KapuaIdStatic(BigInteger.ZERO)};\n+\n+        for (KapuaId scopeId : scopeIdList) {\n+            EventStoreRecordImpl eventStoreRecordImpl1 = new EventStoreRecordImpl(scopeId);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(contextId);\n+            assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl1.getContextId());\n+            eventStoreRecordImpl1.setContextId(null);\n+            assertNull(\"Null expected.\", eventStoreRecordImpl1.getContextId());\n+        }\n+\n+        EventStoreRecordImpl eventStoreRecordImpl2 = new EventStoreRecordImpl();\n+        assertNull(\"Null expected.\", eventStoreRecordImpl2.getContextId());\n+        eventStoreRecordImpl2.setContextId(contextId);\n+        assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl2.getContextId());\n+        eventStoreRecordImpl2.setContextId(null);\n+        assertNull(\"Null expected.\", eventStoreRecordImpl2.getContextId());\n+\n+        EventStoreRecordImpl eventStoreRecordImpl3 = new EventStoreRecordImpl(eventStoreRecord);\n+        assertEquals(\"Expected and actual values should be the same.\", \"contextId\", eventStoreRecordImpl3.getContextId());\n+        eventStoreRecordImpl3.setContextId(contextId);\n+        assertEquals(\"Expected and actual values should be the same.\", contextId, eventStoreRecordImpl3.getContextId());\n+        eventStoreRecordImpl3.setContextId(null);\n+        assertNull(\"Null expected.\", eventStoreRecordImpl3.getContextId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNTUzNA=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTc2MjQ2OnYy", "diffSide": "RIGHT", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/EventStoreDAOTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowNjo1OVrOGusj4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowNjo1OVrOGusj4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNzc2MA==", "bodyText": "EventStoreDAO and other EntityDAO are static and testing the instantiation is not needed.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r451617760", "createdAt": "2020-07-08T15:06:59Z", "author": {"login": "Coduz"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/EventStoreDAOTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaEntityExistsException;\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.jpa.EntityManager;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecordListResult;\n+import org.eclipse.kapua.commons.service.event.store.internal.EventStoreDAO;\n+import org.eclipse.kapua.commons.service.event.store.internal.EventStoreRecordImpl;\n+import org.eclipse.kapua.model.KapuaEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.query.KapuaQuery;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.PersistenceException;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.Selection;\n+import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.metamodel.EntityType;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.Root;\n+import java.lang.reflect.Constructor;\n+import java.math.BigInteger;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreDAOTest extends Assert {\n+\n+    @Test\n+    public void eventStoreDAOTest() throws Exception {\n+        Constructor<EventStoreDAO> eventStoreDAO = EventStoreDAO.class.getDeclaredConstructor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTc2NDk1OnYy", "diffSide": "RIGHT", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/EventStoreDAOTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowNzoyOFrOGuslWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjowMDowNFrOGvq0Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxODEzOA==", "bodyText": "Why mock DAO methods when there is an actual implementation available and working?", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r451618138", "createdAt": "2020-07-08T15:07:28Z", "author": {"login": "Coduz"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/EventStoreDAOTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaEntityExistsException;\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.jpa.EntityManager;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecordListResult;\n+import org.eclipse.kapua.commons.service.event.store.internal.EventStoreDAO;\n+import org.eclipse.kapua.commons.service.event.store.internal.EventStoreRecordImpl;\n+import org.eclipse.kapua.model.KapuaEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.query.KapuaQuery;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.PersistenceException;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.Selection;\n+import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.metamodel.EntityType;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.Root;\n+import java.lang.reflect.Constructor;\n+import java.math.BigInteger;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreDAOTest extends Assert {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNzc1OQ==", "bodyText": "@Coduz we should always mock as much methods as possible to isolate unit test as much as possible.\nWe don't want actual implementation of other methods to imterfere with our Unit tests.", "url": "https://github.com/eclipse/kapua/pull/3008#discussion_r452637759", "createdAt": "2020-07-10T06:00:04Z", "author": {"login": "LeoNerdoG"}, "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/EventStoreDAOTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaEntityExistsException;\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.jpa.EntityManager;\n+import org.eclipse.kapua.commons.model.id.KapuaEid;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecord;\n+import org.eclipse.kapua.commons.service.event.store.api.EventStoreRecordListResult;\n+import org.eclipse.kapua.commons.service.event.store.internal.EventStoreDAO;\n+import org.eclipse.kapua.commons.service.event.store.internal.EventStoreRecordImpl;\n+import org.eclipse.kapua.model.KapuaEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.query.KapuaQuery;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.PersistenceException;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.Selection;\n+import javax.persistence.criteria.Expression;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.metamodel.EntityType;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.Root;\n+import java.lang.reflect.Constructor;\n+import java.math.BigInteger;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Category(JUnitTests.class)\n+public class EventStoreDAOTest extends Assert {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxODEzOA=="}, "originalCommit": {"oid": "a7228110c5b167b729b98a8b11eb96c5085f3777"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1723, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}