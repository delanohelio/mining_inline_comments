{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTE1NzYz", "number": 2905, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzowMzoyMVrODp8olA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzozMjowOVrODp9OAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzExNjM2OnYy", "diffSide": "RIGHT", "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzowMzoyMVrOF5cE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowNjoyMlrOF6mwqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MzE0MQ==", "bodyText": "This should invoke isPermitted(Lists.newArrayList(permission) so we can use the same logic and we don't need to keep methods aligned", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395773141", "createdAt": "2020-03-20T17:03:21Z", "author": {"login": "Coduz"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;\n+        }\n+        else {\n+            List<org.apache.shiro.authz.Permission> permissionsShiro = permissions.stream()\n+                    .map(permission -> (org.apache.shiro.authz.Permission) permission)\n+                    .collect(Collectors.toList());\n+            return SecurityUtils.getSubject().isPermitted(permissionsShiro);\n+        }\n+    }\n+\n     @Override\n     public boolean isPermitted(Permission permission)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4Nzg0MA==", "bodyText": "Manipulating data to reuse code (also by just invoking an object instantiation), in a critical path, is not a good practice in my opinion (the performances will be affected)", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396987840", "createdAt": "2020-03-24T08:51:49Z", "author": {"login": "riccardomodanese"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;\n+        }\n+        else {\n+            List<org.apache.shiro.authz.Permission> permissionsShiro = permissions.stream()\n+                    .map(permission -> (org.apache.shiro.authz.Permission) permission)\n+                    .collect(Collectors.toList());\n+            return SecurityUtils.getSubject().isPermitted(permissionsShiro);\n+        }\n+    }\n+\n     @Override\n     public boolean isPermitted(Permission permission)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MzE0MQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzUyNg==", "bodyText": "This will result in duplicated code. Next \"sonar fixes branch\" you know that this will be changed anyway....", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396993526", "createdAt": "2020-03-24T09:00:54Z", "author": {"login": "Coduz"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;\n+        }\n+        else {\n+            List<org.apache.shiro.authz.Permission> permissionsShiro = permissions.stream()\n+                    .map(permission -> (org.apache.shiro.authz.Permission) permission)\n+                    .collect(Collectors.toList());\n+            return SecurityUtils.getSubject().isPermitted(permissionsShiro);\n+        }\n+    }\n+\n     @Override\n     public boolean isPermitted(Permission permission)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MzE0MQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5Njc3OA==", "bodyText": "won't fix option can be used", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396996778", "createdAt": "2020-03-24T09:06:22Z", "author": {"login": "riccardomodanese"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;\n+        }\n+        else {\n+            List<org.apache.shiro.authz.Permission> permissionsShiro = permissions.stream()\n+                    .map(permission -> (org.apache.shiro.authz.Permission) permission)\n+                    .collect(Collectors.toList());\n+            return SecurityUtils.getSubject().isPermitted(permissionsShiro);\n+        }\n+    }\n+\n     @Override\n     public boolean isPermitted(Permission permission)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MzE0MQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE0NjQ0OnYy", "diffSide": "RIGHT", "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxMjozOVrOF5cYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMjoxOVrOF6mnKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3ODIyOQ==", "bodyText": "UnavailableSecurityManagerException is eaten.\nAdd log at least of the message Exception", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395778229", "createdAt": "2020-03-20T17:12:39Z", "author": {"login": "Coduz"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3OTM4Mg==", "bodyText": "It's the scope of this code. There is no needs to rethrow an exception if you already know what to do when happens.\nIf the Shiro context it's already configured the test code proceeds, otherwhise, in the catch block the context it's initialized.", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396979382", "createdAt": "2020-03-24T08:36:34Z", "author": {"login": "riccardomodanese"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3ODIyOQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MjY2MQ==", "bodyText": "I said just to log the Exception not re-throw it \ud83d\ude01", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396992661", "createdAt": "2020-03-24T08:59:31Z", "author": {"login": "Coduz"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3ODIyOQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5NDM0Nw==", "bodyText": "There is NO sense. It's not an Exception, it's like a check.\nInstead of writing\nif (!security manager defined)\nIt's used the try catch pattern", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396994347", "createdAt": "2020-03-24T09:02:19Z", "author": {"login": "riccardomodanese"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3ODIyOQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE1ODc1OnYy", "diffSide": "RIGHT", "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxNjowM1rOF5cgnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozNjo0NlrOF6ltDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MDI1NQ==", "bodyText": "Ini supports .loadFromPath and using \"classpath:shiro.ini\" should work, right?", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395780255", "createdAt": "2020-03-20T17:16:03Z", "author": {"login": "Coduz"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");\n+            final URL shiroIniUrl = getClass().getResource(\"/shiro.ini\");\n+            Ini shiroIni = new Ini();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3OTQ3MA==", "bodyText": "May be, I didn't test this option.\nI reused the already working code from the broker side to init Shiro context for those tests aren't doing it.", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396979470", "createdAt": "2020-03-24T08:36:46Z", "author": {"login": "riccardomodanese"}, "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/utils/InitShiro.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.qa.common.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.UnavailableSecurityManagerException;\n+import org.apache.shiro.config.Ini;\n+import org.apache.shiro.config.IniSecurityManagerFactory;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cucumber.api.java.en.Given;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+\n+@ScenarioScoped\n+public class InitShiro {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(InitShiro.class);\n+\n+    @Given(\"^Init Security Context$\")\n+    public void start() throws IOException {\n+        try {\n+            SecurityManager securityManager = SecurityUtils.getSecurityManager();\n+            logger.info(\"Found Shiro security manager {}\", securityManager);\n+        }\n+        catch (UnavailableSecurityManagerException e) {\n+            logger.info(\"Init shiro security manager...\");\n+            final URL shiroIniUrl = getClass().getResource(\"/shiro.ini\");\n+            Ini shiroIni = new Ini();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MDI1NQ=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE2NDQwOnYy", "diffSide": "RIGHT", "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxNzo0NVrOF5ckNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowNTo1NlrOF6mvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MTE3Mw==", "bodyText": "Make this reuse boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions)", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395781173", "createdAt": "2020-03-20T17:17:45Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?\n+            for (Realm realm : getRealms()) {\n+                return ((Authorizer) realm).isPermitted(principals, permissions);\n+            }\n+        }\n+        return new boolean[0];\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, String... permissions) {\n+        assertRealmsConfigured();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3ODk0Mg==", "bodyText": "Manipulating data to reuse code (also by just invoking an object instantiation), in a critical path, is not a good practice in my opinion (the performances will be affected)\nMoreover, we are using multiple permissions check (so with the List) in just one single point (the broker security plugin, if I'm right).\nSo, as I said, adapting the most used path code (one single permission) to follow a different path (multiple permissions), involving object manipulation will result just in a performance degradation.", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396978942", "createdAt": "2020-03-24T08:35:43Z", "author": {"login": "riccardomodanese"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?\n+            for (Realm realm : getRealms()) {\n+                return ((Authorizer) realm).isPermitted(principals, permissions);\n+            }\n+        }\n+        return new boolean[0];\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, String... permissions) {\n+        assertRealmsConfigured();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MTE3Mw=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzYyMw==", "bodyText": "This will result in duplicated code. Next \"sonar fixes branch\" you know that this will be changed anyway....", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396993623", "createdAt": "2020-03-24T09:01:05Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?\n+            for (Realm realm : getRealms()) {\n+                return ((Authorizer) realm).isPermitted(principals, permissions);\n+            }\n+        }\n+        return new boolean[0];\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, String... permissions) {\n+        assertRealmsConfigured();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MTE3Mw=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5NjQ5Nw==", "bodyText": "won't fix option can be used", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396996497", "createdAt": "2020-03-24T09:05:56Z", "author": {"login": "riccardomodanese"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?\n+            for (Realm realm : getRealms()) {\n+                return ((Authorizer) realm).isPermitted(principals, permissions);\n+            }\n+        }\n+        return new boolean[0];\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, String... permissions) {\n+        assertRealmsConfigured();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MTE3Mw=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE3MDAwOnYy", "diffSide": "RIGHT", "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxOToyNFrOF5cn5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1Nzo0NFrOF6mb2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MjExNw==", "bodyText": "Per permission checking right now we have only one AuthorizingRealm \ud83d\ude01 Remove this question", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395782117", "createdAt": "2020-03-20T17:19:24Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MDUwMg==", "bodyText": "Having one or more realms is not completely on our hand. If someone will customize Kapua adding another realm should be aware (at least with a commented code) of possible restrictions.", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396990502", "createdAt": "2020-03-24T08:56:13Z", "author": {"login": "riccardomodanese"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MjExNw=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MTQ1MA==", "bodyText": "Yes but this question is useless here.\nDocumentation should be the proper way \ud83d\ude01", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r396991450", "createdAt": "2020-03-24T08:57:44Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {\n+            //return the first realm result\n+            //the multiple realms case with aggregator should be handled or do we still have just one realm?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MjExNw=="}, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE4NTUyOnYy", "diffSide": "RIGHT", "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoyMzo1MVrOF5cyIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoyMzo1MVrOF5cyIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4NDczOA==", "bodyText": "Replace this with Arrays.fill(new boolean[permissions.size()], true );", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395784738", "createdAt": "2020-03-20T17:23:51Z", "author": {"login": "Coduz"}, "path": "service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/AuthorizationServiceImpl.java", "diffHunk": "@@ -29,6 +32,28 @@\n @KapuaProvider\n public class AuthorizationServiceImpl implements AuthorizationService {\n \n+    @Override\n+    public boolean[] isPermitted(List<Permission> permissions) throws KapuaException {\n+        KapuaSession session = KapuaSecurityUtils.getSession();\n+\n+        if (session == null) {\n+            throw new KapuaUnauthenticatedException();\n+        }\n+        if (session.isTrustedMode()) {\n+            boolean[] returnedPermissions = new boolean[permissions.size()];\n+            for (int i=0; i<permissions.size(); i++) {\n+                returnedPermissions[i] = true;\n+            }\n+            return returnedPermissions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzIxMjE3OnYy", "diffSide": "RIGHT", "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzozMjowOVrOF5dDzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzozMjowOVrOF5dDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4OTI2MA==", "bodyText": "Maybe this is:\nif (!CollectionUtils.isEmpty(permissions)) {\nThis is currently doing something only when  the given List<Permission> is empty", "url": "https://github.com/eclipse/kapua/pull/2905#discussion_r395789260", "createdAt": "2020-03-20T17:32:09Z", "author": {"login": "Coduz"}, "path": "broker-core/src/main/java/org/eclipse/kapua/broker/core/security/EnhModularRealmAuthorizer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.broker.core.security;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.shiro.authz.Authorizer;\n+import org.apache.shiro.authz.ModularRealmAuthorizer;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Custom {@link Authorizer} to reduce the query amount using the isPermitted method with the Permission list or String array.\n+ * To use this Authorizer a deeply modified shiro.ini is needed.\n+ * Without these changes this Authorizer will not have any realm configured. (see shiro.ini for explanation)\n+ * This authorizer takes the first valid configured realm and return the isPermitted evaluation skipping any aggregation strategy if more than one valid aggregator is defined.\n+ *\n+ */\n+public class EnhModularRealmAuthorizer extends ModularRealmAuthorizer {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(EnhModularRealmAuthorizer.class);\n+\n+    public EnhModularRealmAuthorizer() {\n+    }\n+\n+    public EnhModularRealmAuthorizer(Collection<Realm> realms) {\n+        super(realms);\n+    }\n+\n+    @Override\n+    public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions) {\n+        assertRealmsConfigured();\n+        if (CollectionUtils.isEmpty(permissions)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466e7f64d52171e9590aaa8eb45899d0ea100220"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1807, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}