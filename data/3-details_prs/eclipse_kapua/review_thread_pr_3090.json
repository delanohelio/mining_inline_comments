{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDQ5ODk2", "number": 3090, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMDozM1rOEtCSfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxMToxNVrOEtD1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjU4ODc5OnYy", "diffSide": "RIGHT", "path": "console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/ImageServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMDozM1rOHgmXhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNDozMVrOHjETHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NTA5NQ==", "bodyText": "Would QRCodeServlet be a more specific name for this class ?", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r503945095", "createdAt": "2020-10-13T13:20:33Z", "author": {"login": "stefanomorson"}, "path": "console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/ImageServlet.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.console.core.servlet;\n+\n+import com.google.zxing.BarcodeFormat;\n+import com.google.zxing.client.j2se.MatrixToImageWriter;\n+import com.google.zxing.common.BitMatrix;\n+import com.google.zxing.qrcode.QRCodeWriter;\n+import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n+import org.apache.commons.fileupload.servlet.FileCleanerCleanup;\n+import org.apache.commons.io.FileCleaningTracker;\n+import org.eclipse.kapua.DeviceMenagementException;\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaIllegalAccessException;\n+import org.eclipse.kapua.KapuaUnauthenticatedException;\n+import org.eclipse.kapua.app.console.module.api.setting.ConsoleSetting;\n+import org.eclipse.kapua.app.console.module.api.setting.ConsoleSettingKeys;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.service.account.Account;\n+import org.eclipse.kapua.service.account.AccountService;\n+import org.eclipse.kapua.service.authentication.shiro.utils.AuthenticationUtils;\n+import org.eclipse.kapua.service.user.User;\n+import org.eclipse.kapua.service.user.UserService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.imageio.ImageIO;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+\n+public class ImageServlet extends HttpServlet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMjYzNw==", "bodyText": "Yes, I agree, this will be done in PR #3115 .", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506532637", "createdAt": "2020-10-16T15:14:31Z", "author": {"login": "gbarbon"}, "path": "console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/ImageServlet.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.console.core.servlet;\n+\n+import com.google.zxing.BarcodeFormat;\n+import com.google.zxing.client.j2se.MatrixToImageWriter;\n+import com.google.zxing.common.BitMatrix;\n+import com.google.zxing.qrcode.QRCodeWriter;\n+import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n+import org.apache.commons.fileupload.servlet.FileCleanerCleanup;\n+import org.apache.commons.io.FileCleaningTracker;\n+import org.eclipse.kapua.DeviceMenagementException;\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaIllegalAccessException;\n+import org.eclipse.kapua.KapuaUnauthenticatedException;\n+import org.eclipse.kapua.app.console.module.api.setting.ConsoleSetting;\n+import org.eclipse.kapua.app.console.module.api.setting.ConsoleSettingKeys;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.service.account.Account;\n+import org.eclipse.kapua.service.account.AccountService;\n+import org.eclipse.kapua.service.authentication.shiro.utils.AuthenticationUtils;\n+import org.eclipse.kapua.service.user.User;\n+import org.eclipse.kapua.service.user.UserService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.imageio.ImageIO;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+\n+public class ImageServlet extends HttpServlet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NTA5NQ=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjY3ODIzOnYy", "diffSide": "RIGHT", "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/AuthenticationDomains.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzozODo1OVrOHgnPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyNzo0N1rOHit_JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1OTM0MA==", "bodyText": "Since MFA make sense only if there is a credential check at the first step and at the time being there's no use cases for a MFA/scratch-code to exist without a related credential, does it make sense to use CredentialsDomain permissions to authorize Credentials, MFACredentials and ScratchCodes all together?", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r503959340", "createdAt": "2020-10-13T13:38:59Z", "author": {"login": "stefanomorson"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/AuthenticationDomains.java", "diffHunk": "@@ -21,4 +23,8 @@ private AuthenticationDomains() { }\n     public static final CredentialDomain CREDENTIAL_DOMAIN = new CredentialDomain();\n \n     public static final AccessTokenDomain ACCESS_TOKEN_DOMAIN = new AccessTokenDomain();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2NzA3Nw==", "bodyText": "Yes, I agree. Please refer to PR #3112 for this fix.", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506167077", "createdAt": "2020-10-16T08:27:47Z", "author": {"login": "gbarbon"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/AuthenticationDomains.java", "diffHunk": "@@ -21,4 +23,8 @@ private AuthenticationDomains() { }\n     public static final CredentialDomain CREDENTIAL_DOMAIN = new CredentialDomain();\n \n     public static final AccessTokenDomain ACCESS_TOKEN_DOMAIN = new AccessTokenDomain();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1OTM0MA=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjczMjYzOnYy", "diffSide": "RIGHT", "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/MfaCredentialOption.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0OTo0MlrOHgnwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNDo0MlrOHjETiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzgyOA==", "bodyText": "Looks like this entity contains options regarding how the MFA should work, would MfaOption (in place of MfaCredentialOptions) be a more appropriate and compact name ?", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r503967828", "createdAt": "2020-10-13T13:49:42Z", "author": {"login": "stefanomorson"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/MfaCredentialOption.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.credential.mfa;\n+\n+import org.eclipse.kapua.model.KapuaUpdatableEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdAdapter;\n+import org.eclipse.kapua.model.xml.DateXmlAdapter;\n+import org.eclipse.kapua.service.authentication.credential.CredentialXmlRegistry;\n+import org.eclipse.kapua.service.user.User;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import java.util.Date;\n+\n+/**\n+ * MfaCredentialOption definition.<br>\n+ * Used to handle MfaCredentialOption needed by the various authentication algorithms.\n+ */\n+@XmlRootElement(name = \"mfaCredentialOption\")\n+@XmlAccessorType(XmlAccessType.PROPERTY)\n+@XmlType(propOrder = {\n+        \"userId\",\n+        \"mfaCredentialKey\",\n+        \"trustKey\",\n+        \"trustExpirationDate\"}, //\n+        factoryClass = CredentialXmlRegistry.class, //\n+        factoryMethod = \"newMfaCredentialOption\") //\n+public interface MfaCredentialOption extends KapuaUpdatableEntity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMjc0NA==", "bodyText": "Yes, I agree, this will be done in PR #3115 .", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506532744", "createdAt": "2020-10-16T15:14:42Z", "author": {"login": "gbarbon"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/MfaCredentialOption.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.credential.mfa;\n+\n+import org.eclipse.kapua.model.KapuaUpdatableEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdAdapter;\n+import org.eclipse.kapua.model.xml.DateXmlAdapter;\n+import org.eclipse.kapua.service.authentication.credential.CredentialXmlRegistry;\n+import org.eclipse.kapua.service.user.User;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import java.util.Date;\n+\n+/**\n+ * MfaCredentialOption definition.<br>\n+ * Used to handle MfaCredentialOption needed by the various authentication algorithms.\n+ */\n+@XmlRootElement(name = \"mfaCredentialOption\")\n+@XmlAccessorType(XmlAccessType.PROPERTY)\n+@XmlType(propOrder = {\n+        \"userId\",\n+        \"mfaCredentialKey\",\n+        \"trustKey\",\n+        \"trustExpirationDate\"}, //\n+        factoryClass = CredentialXmlRegistry.class, //\n+        factoryMethod = \"newMfaCredentialOption\") //\n+public interface MfaCredentialOption extends KapuaUpdatableEntity {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzgyOA=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjczOTIwOnYy", "diffSide": "RIGHT", "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/MfaCredentialOption.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1MTowN1rOHgn0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNDo1NlrOHjEURw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2ODg4OA==", "bodyText": "Following the name of the class would replace mfaCredentialKey with mfaKey (or mfaSecret or mfaSecretKey).", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r503968888", "createdAt": "2020-10-13T13:51:07Z", "author": {"login": "stefanomorson"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/MfaCredentialOption.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.credential.mfa;\n+\n+import org.eclipse.kapua.model.KapuaUpdatableEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdAdapter;\n+import org.eclipse.kapua.model.xml.DateXmlAdapter;\n+import org.eclipse.kapua.service.authentication.credential.CredentialXmlRegistry;\n+import org.eclipse.kapua.service.user.User;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import java.util.Date;\n+\n+/**\n+ * MfaCredentialOption definition.<br>\n+ * Used to handle MfaCredentialOption needed by the various authentication algorithms.\n+ */\n+@XmlRootElement(name = \"mfaCredentialOption\")\n+@XmlAccessorType(XmlAccessType.PROPERTY)\n+@XmlType(propOrder = {\n+        \"userId\",\n+        \"mfaCredentialKey\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMjkzNQ==", "bodyText": "Ok, this will be done in PR #3115 .", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506532935", "createdAt": "2020-10-16T15:14:56Z", "author": {"login": "gbarbon"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/MfaCredentialOption.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.credential.mfa;\n+\n+import org.eclipse.kapua.model.KapuaUpdatableEntity;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.model.id.KapuaIdAdapter;\n+import org.eclipse.kapua.model.xml.DateXmlAdapter;\n+import org.eclipse.kapua.service.authentication.credential.CredentialXmlRegistry;\n+import org.eclipse.kapua.service.user.User;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import java.util.Date;\n+\n+/**\n+ * MfaCredentialOption definition.<br>\n+ * Used to handle MfaCredentialOption needed by the various authentication algorithms.\n+ */\n+@XmlRootElement(name = \"mfaCredentialOption\")\n+@XmlAccessorType(XmlAccessType.PROPERTY)\n+@XmlType(propOrder = {\n+        \"userId\",\n+        \"mfaCredentialKey\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2ODg4OA=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc5MzcxOnYy", "diffSide": "RIGHT", "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowMToyNlrOHgoVqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNTowNVrOHjEUlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NzM4Nw==", "bodyText": "Remove Google Authenticator from the Java doc", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r503977387", "createdAt": "2020-10-13T14:01:26Z", "author": {"login": "stefanomorson"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.mfa;\n+\n+import org.eclipse.kapua.service.KapuaService;\n+\n+import java.util.List;\n+\n+/**\n+ * MfaAuthenticationService interface\n+ */\n+public interface MfaAuthenticationService extends KapuaService {\n+\n+    /**\n+     * @return true if the MfaAuthenticationService is enabled, false otherwise\n+     */\n+    boolean isEnabled();\n+\n+    /**\n+     * Validates a code generated with the Google Authenticator app", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzAxNA==", "bodyText": "Ok, this will be done in PR #3115 .", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506533014", "createdAt": "2020-10-16T15:15:05Z", "author": {"login": "gbarbon"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.mfa;\n+\n+import org.eclipse.kapua.service.KapuaService;\n+\n+import java.util.List;\n+\n+/**\n+ * MfaAuthenticationService interface\n+ */\n+public interface MfaAuthenticationService extends KapuaService {\n+\n+    /**\n+     * @return true if the MfaAuthenticationService is enabled, false otherwise\n+     */\n+    boolean isEnabled();\n+\n+    /**\n+     * Validates a code generated with the Google Authenticator app", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NzM4Nw=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njg0MjQyOnYy", "diffSide": "RIGHT", "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxMToxNVrOHgoztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNTozOFrOHjEWdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NTA3Ng==", "bodyText": "Do not inherit from KapuaService and get implementations with a dedicated locator class. Would MfaAuthenticator be a name that distiguish this class from a true KapuaService ?", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r503985076", "createdAt": "2020-10-13T14:11:15Z", "author": {"login": "stefanomorson"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.mfa;\n+\n+import org.eclipse.kapua.service.KapuaService;\n+\n+import java.util.List;\n+\n+/**\n+ * MfaAuthenticationService interface\n+ */\n+public interface MfaAuthenticationService extends KapuaService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2Nzg3OQ==", "bodyText": "Yes, I agree. Please refer to PR #3113 for this fix (only concerning the service part, the renaming part is taking into account in a dedicated PR).", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506167879", "createdAt": "2020-10-16T08:28:37Z", "author": {"login": "gbarbon"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.mfa;\n+\n+import org.eclipse.kapua.service.KapuaService;\n+\n+import java.util.List;\n+\n+/**\n+ * MfaAuthenticationService interface\n+ */\n+public interface MfaAuthenticationService extends KapuaService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NTA3Ng=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzQ5Mw==", "bodyText": "As for the renaming of the service it will be done in PR #3115 .", "url": "https://github.com/eclipse/kapua/pull/3090#discussion_r506533493", "createdAt": "2020-10-16T15:15:38Z", "author": {"login": "gbarbon"}, "path": "service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/mfa/MfaAuthenticationService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.authentication.mfa;\n+\n+import org.eclipse.kapua.service.KapuaService;\n+\n+import java.util.List;\n+\n+/**\n+ * MfaAuthenticationService interface\n+ */\n+public interface MfaAuthenticationService extends KapuaService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NTA3Ng=="}, "originalCommit": {"oid": "2d3673d87ca8b6de73fa26ade1c9f732c7d2adc4"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1785, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}