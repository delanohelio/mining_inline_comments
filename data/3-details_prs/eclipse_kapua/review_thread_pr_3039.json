{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Nzk0NzQ1", "number": 3039, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoyMjo1OVrOEfTzHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo1NDoyNVrOEfUxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjY1NjkyOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/KapuaConfigurableServiceSchemaUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoyMjo1OVrOHLgUow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoyMjo1OVrOHLgUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyNTk1NQ==", "bodyText": "Please add additional tests for DropSchemaObjects method (for now we have default, empty, null and wrong, but we also need some custom strings to be tested).", "url": "https://github.com/eclipse/kapua/pull/3039#discussion_r481825955", "createdAt": "2020-09-02T07:22:59Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/KapuaConfigurableServiceSchemaUtilsTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.configuration;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaConfigurableServiceSchemaUtilsTest extends Assert {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scriptSessionWithNullArgumentsTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(null, null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scriptSessionWithNullPathTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(null, KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scriptSessionWithNullFilterTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, null);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithDefaultValuesTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithEmptyPathValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(\"\", KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithWrongPathValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(\"wrong/path\", KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithEmptyFilterValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, \"\");\n+    }\n+\n+    @Test\n+    public void scriptSessionWithWrongFilterValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, \"*.wrong\");\n+    }\n+\n+    @Test\n+    public void createSchemaObjectsWithDefaultPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH);\n+    }\n+\n+    @Test\n+    public void createSchemaObjectsWithWrongPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(\"wrong/path\");\n+    }\n+\n+    @Test\n+    public void createSchemaObjectsWithEmptyPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(\"\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void createSchemaObjectsWithNullPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(null);\n+    }\n+\n+    @Test\n+    public void dropSchemaObjectsWithDefaultPathTest() {\n+        KapuaConfigurableServiceSchemaUtils.dropSchemaObjects(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH);\n+    }\n+\n+    @Test\n+    public void dropSchemaObjectsWithWrongPathTest() {\n+        KapuaConfigurableServiceSchemaUtils.dropSchemaObjects(\"wrong/path\");\n+    }\n+\n+    @Test\n+    public void dropSchemaObjectsWithEmptyPathTest() {\n+        KapuaConfigurableServiceSchemaUtils.dropSchemaObjects(\"\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void dropSchemaObjectsWithNullPathTest() {\n+        KapuaConfigurableServiceSchemaUtils.dropSchemaObjects(null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce9ff45bde146bd9673dc55f3c5fa37ec788f7f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjY1NzQyOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/KapuaConfigurableServiceSchemaUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoyMzowNlrOHLgVBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoyMzowNlrOHLgVBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyNjA1Mg==", "bodyText": "Please add additional tests for CreateSchemaObjects method (for now we have default, empty, null and wrong, but we also need some custom strings to be tested)", "url": "https://github.com/eclipse/kapua/pull/3039#discussion_r481826052", "createdAt": "2020-09-02T07:23:06Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/KapuaConfigurableServiceSchemaUtilsTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.configuration;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaConfigurableServiceSchemaUtilsTest extends Assert {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scriptSessionWithNullArgumentsTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(null, null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scriptSessionWithNullPathTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(null, KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scriptSessionWithNullFilterTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, null);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithDefaultValuesTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithEmptyPathValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(\"\", KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithWrongPathValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(\"wrong/path\", KapuaConfigurableServiceSchemaUtils.DEFAULT_FILTER);\n+    }\n+\n+    @Test\n+    public void scriptSessionWithEmptyFilterValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, \"\");\n+    }\n+\n+    @Test\n+    public void scriptSessionWithWrongFilterValueTest() {\n+        KapuaConfigurableServiceSchemaUtils.scriptSession(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH, \"*.wrong\");\n+    }\n+\n+    @Test\n+    public void createSchemaObjectsWithDefaultPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(KapuaConfigurableServiceSchemaUtils.DEFAULT_PATH);\n+    }\n+\n+    @Test\n+    public void createSchemaObjectsWithWrongPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(\"wrong/path\");\n+    }\n+\n+    @Test\n+    public void createSchemaObjectsWithEmptyPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(\"\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void createSchemaObjectsWithNullPathTest() throws KapuaException {\n+        KapuaConfigurableServiceSchemaUtils.createSchemaObjects(null);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce9ff45bde146bd9673dc55f3c5fa37ec788f7f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjc1NjQxOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/ServiceComponentConfigurationImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo0Mjo1N1rOHLhWWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo0Mjo1N1rOHLhWWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0Mjc3OQ==", "bodyText": "I think this test is obsolete, it is basically a copy of:\n@test\npublic void getIdIfIsSetTest() {\nserviceComponentConfiguration.setId(\"1\");\nassertEquals(serviceComponentConfiguration.getId(), \"1\");\n}", "url": "https://github.com/eclipse/kapua/pull/3039#discussion_r481842779", "createdAt": "2020-09-02T07:42:57Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/ServiceComponentConfigurationImplTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.configuration;\n+\n+import org.eclipse.kapua.commons.configuration.metatype.TocdImpl;\n+import org.eclipse.kapua.model.config.metatype.KapuaTocd;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Category(JUnitTests.class)\n+public class ServiceComponentConfigurationImplTest extends Assert {\n+\n+    ServiceComponentConfigurationImpl serviceComponentConfiguration;\n+\n+    @Before\n+    public void createInstanceOfClass() {\n+        serviceComponentConfiguration = new ServiceComponentConfigurationImpl();\n+    }\n+\n+    @Test\n+    public void createInstanceWithSecondConstructorTest() {\n+        ServiceComponentConfigurationImpl componentConfiguration = new ServiceComponentConfigurationImpl(\"12\");\n+        assertEquals(componentConfiguration.getId(), \"12\");\n+    }\n+\n+    @Test\n+    public void getIdIfNullTest() {\n+        assertNull(serviceComponentConfiguration.getId());\n+    }\n+\n+    @Test\n+    public void getIdIfIsSetTest() {\n+        serviceComponentConfiguration.setId(\"1\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"1\");\n+    }\n+\n+    @Test\n+    public void setIdToNullValueTest() {\n+        serviceComponentConfiguration.setId(null);\n+        assertNull(serviceComponentConfiguration.getId());\n+    }\n+\n+    @Test\n+    public void setIdToLargeValueTest() {\n+        serviceComponentConfiguration.setId(\"12312312312312331232313123123123\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"12312312312312331232313123123123\");\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce9ff45bde146bd9673dc55f3c5fa37ec788f7f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjc1OTc4OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/ServiceComponentConfigurationImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo0Mzo0MlrOHLhYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo0Mzo0MlrOHLhYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0MzM3Mw==", "bodyText": "I think this test is obsolete, it is basically a copy of:\n@test\npublic void setNameIfNotNullTest() {\nserviceComponentConfiguration.setName(\"name\");\nassertEquals(serviceComponentConfiguration.getName(), \"name\");\n}", "url": "https://github.com/eclipse/kapua/pull/3039#discussion_r481843373", "createdAt": "2020-09-02T07:43:42Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/ServiceComponentConfigurationImplTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.configuration;\n+\n+import org.eclipse.kapua.commons.configuration.metatype.TocdImpl;\n+import org.eclipse.kapua.model.config.metatype.KapuaTocd;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Category(JUnitTests.class)\n+public class ServiceComponentConfigurationImplTest extends Assert {\n+\n+    ServiceComponentConfigurationImpl serviceComponentConfiguration;\n+\n+    @Before\n+    public void createInstanceOfClass() {\n+        serviceComponentConfiguration = new ServiceComponentConfigurationImpl();\n+    }\n+\n+    @Test\n+    public void createInstanceWithSecondConstructorTest() {\n+        ServiceComponentConfigurationImpl componentConfiguration = new ServiceComponentConfigurationImpl(\"12\");\n+        assertEquals(componentConfiguration.getId(), \"12\");\n+    }\n+\n+    @Test\n+    public void getIdIfNullTest() {\n+        assertNull(serviceComponentConfiguration.getId());\n+    }\n+\n+    @Test\n+    public void getIdIfIsSetTest() {\n+        serviceComponentConfiguration.setId(\"1\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"1\");\n+    }\n+\n+    @Test\n+    public void setIdToNullValueTest() {\n+        serviceComponentConfiguration.setId(null);\n+        assertNull(serviceComponentConfiguration.getId());\n+    }\n+\n+    @Test\n+    public void setIdToLargeValueTest() {\n+        serviceComponentConfiguration.setId(\"12312312312312331232313123123123\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"12312312312312331232313123123123\");\n+    }\n+\n+    @Test\n+    public void setIdToRegularValueTest() {\n+        serviceComponentConfiguration.setId(\"2\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"2\");\n+    }\n+\n+    @Test\n+    public void setIdToSymbolsTest() {\n+        serviceComponentConfiguration.setId(\"@!#\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"@!#\");\n+    }\n+\n+    @Test\n+    public void setIdToEmptyStringTest() {\n+        serviceComponentConfiguration.setId(\"\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"\");\n+    }\n+\n+    @Test\n+    public void getNameIfNullTest() {\n+        assertNull(serviceComponentConfiguration.getName());\n+    }\n+\n+    @Test\n+    public void setNameIfNotNullTest() {\n+        serviceComponentConfiguration.setName(\"name\");\n+        assertEquals(serviceComponentConfiguration.getName(), \"name\");\n+    }\n+\n+    @Test\n+    public void setNameToNullTest() {\n+        serviceComponentConfiguration.setName(null);\n+        assertNull(serviceComponentConfiguration.getName());\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce9ff45bde146bd9673dc55f3c5fa37ec788f7f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjgxNzE5OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/ServiceComponentConfigurationImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo1NDoyNVrOHLh9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo1NDoyNVrOHLh9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1Mjc2OA==", "bodyText": "Cna we please try with different objects rather than just Integer?", "url": "https://github.com/eclipse/kapua/pull/3039#discussion_r481852768", "createdAt": "2020-09-02T07:54:25Z", "author": {"login": "LeoNerdoG"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/configuration/ServiceComponentConfigurationImplTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.configuration;\n+\n+import org.eclipse.kapua.commons.configuration.metatype.TocdImpl;\n+import org.eclipse.kapua.model.config.metatype.KapuaTocd;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Category(JUnitTests.class)\n+public class ServiceComponentConfigurationImplTest extends Assert {\n+\n+    ServiceComponentConfigurationImpl serviceComponentConfiguration;\n+\n+    @Before\n+    public void createInstanceOfClass() {\n+        serviceComponentConfiguration = new ServiceComponentConfigurationImpl();\n+    }\n+\n+    @Test\n+    public void createInstanceWithSecondConstructorTest() {\n+        ServiceComponentConfigurationImpl componentConfiguration = new ServiceComponentConfigurationImpl(\"12\");\n+        assertEquals(componentConfiguration.getId(), \"12\");\n+    }\n+\n+    @Test\n+    public void getIdIfNullTest() {\n+        assertNull(serviceComponentConfiguration.getId());\n+    }\n+\n+    @Test\n+    public void getIdIfIsSetTest() {\n+        serviceComponentConfiguration.setId(\"1\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"1\");\n+    }\n+\n+    @Test\n+    public void setIdToNullValueTest() {\n+        serviceComponentConfiguration.setId(null);\n+        assertNull(serviceComponentConfiguration.getId());\n+    }\n+\n+    @Test\n+    public void setIdToLargeValueTest() {\n+        serviceComponentConfiguration.setId(\"12312312312312331232313123123123\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"12312312312312331232313123123123\");\n+    }\n+\n+    @Test\n+    public void setIdToRegularValueTest() {\n+        serviceComponentConfiguration.setId(\"2\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"2\");\n+    }\n+\n+    @Test\n+    public void setIdToSymbolsTest() {\n+        serviceComponentConfiguration.setId(\"@!#\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"@!#\");\n+    }\n+\n+    @Test\n+    public void setIdToEmptyStringTest() {\n+        serviceComponentConfiguration.setId(\"\");\n+        assertEquals(serviceComponentConfiguration.getId(), \"\");\n+    }\n+\n+    @Test\n+    public void getNameIfNullTest() {\n+        assertNull(serviceComponentConfiguration.getName());\n+    }\n+\n+    @Test\n+    public void setNameIfNotNullTest() {\n+        serviceComponentConfiguration.setName(\"name\");\n+        assertEquals(serviceComponentConfiguration.getName(), \"name\");\n+    }\n+\n+    @Test\n+    public void setNameToNullTest() {\n+        serviceComponentConfiguration.setName(null);\n+        assertNull(serviceComponentConfiguration.getName());\n+    }\n+\n+    @Test\n+    public void setNameToRegularValueTest() {\n+        serviceComponentConfiguration.setName(\"regularName\");\n+        assertEquals(serviceComponentConfiguration.getName(), \"regularName\");\n+    }\n+\n+    @Test\n+    public void setNameToNameThatContainsSpacesTest() {\n+        serviceComponentConfiguration.setName(\"regular Name\");\n+        assertEquals(serviceComponentConfiguration.getName(), \"regular Name\");\n+    }\n+\n+    @Test\n+    public void setNameToNameThatContainsSymbolsTest() {\n+        serviceComponentConfiguration.setName(\"regular Name !$%&/&@\");\n+        assertEquals(serviceComponentConfiguration.getName(), \"regular Name !$%&/&@\");\n+    }\n+\n+    @Test\n+    public void setDefinitionToNullTest() {\n+        serviceComponentConfiguration.setDefinition(null);\n+        assertNull(serviceComponentConfiguration.getDefinition());\n+    }\n+\n+    @Test\n+    public void setDefinitionToRegularValueTest() {\n+        KapuaTocd tocd = new TocdImpl();\n+        serviceComponentConfiguration.setDefinition(tocd);\n+        assertEquals(serviceComponentConfiguration.getDefinition(), tocd);\n+    }\n+\n+    @Test\n+    public void setPropertiesToNullTest() {\n+        serviceComponentConfiguration.setProperties(null);\n+        assertNull(serviceComponentConfiguration.getProperties());\n+    }\n+\n+    @Test\n+    public void setPropertiesToRegularValueTest() {\n+        Map<String, Object> properties = new Map<String, Object>() {\n+            @Override\n+            public int size() {\n+                return 0;\n+            }\n+\n+            @Override\n+            public boolean isEmpty() {\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean containsKey(Object key) {\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean containsValue(Object value) {\n+                return false;\n+            }\n+\n+            @Override\n+            public Object get(Object key) {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object put(String key, Object value) {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object remove(Object key) {\n+                return null;\n+            }\n+\n+            @Override\n+            public void putAll(Map<? extends String, ?> m) {\n+\n+            }\n+\n+            @Override\n+            public void clear() {\n+\n+            }\n+\n+            @Override\n+            public Set<String> keySet() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Collection<Object> values() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Entry<String, Object>> entrySet() {\n+                return null;\n+            }\n+        };\n+        properties.put(\"property1\", 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ce9ff45bde146bd9673dc55f3c5fa37ec788f7f"}, "originalPosition": 200}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1748, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}