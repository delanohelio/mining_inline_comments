{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NjE5MjQ0", "number": 3064, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToxNzo1OFrOEf8aCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxMjoyMlrOEk57uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTMxMDE4OnYy", "diffSide": "RIGHT", "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToxNzo1OFrOHMh8bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToxNzo1OFrOHMh8bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMTEwMg==", "bodyText": "Please add test:\n@Test\n public void mqttMessageConstructorResponseTopicNullTest() {\n     MqttMessage mqttMessage = new MqttMessage(requestTopic, (MqttTopic) null, mqttPayload);\n     assertEquals(\"Expected and actual value should be the same!\", requestTopic , mqttMessage.getRequestTopic());\n     assertNull(\"Null expected!\", mqttMessage.getResponseTopic());\n     assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n }", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r482901102", "createdAt": "2020-09-03T11:17:58Z", "author": {"login": "LeoNerdoG"}, "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.transport.mqtt.test.message.mqtt;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class MqttMessageTest extends Assert {\n+\n+    MqttTopic requestTopic, responseTopic;\n+    MqttPayload mqttPayload;\n+    Date date;\n+\n+    @Before\n+    public void createInstancesOfClasses() {\n+        requestTopic = new MqttTopic(\"requestTopic\");\n+        responseTopic = new MqttTopic(\"responseTopic\");\n+        mqttPayload = new MqttPayload(\"payload.code\".getBytes());\n+        date = new Date();\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestTopicNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, responseTopic, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f730ab020d5bbc04b3d1d7342550595c0ccfeb55"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTMxMzU2OnYy", "diffSide": "RIGHT", "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToxODo1N1rOHMh-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToxODo1N1rOHMh-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMTYwNQ==", "bodyText": "Please add test:\n    @Test\n    public void mqttMessageConstructor2DateNullTest() {\n        MqttMessage mqttMessage = new MqttMessage(requestTopic, (Date) null, mqttPayload);\n        assertEquals(\"Expected and actual value should be the same!\", requestTopic , mqttMessage.getRequestTopic());\n        assertNull(\"Null expected!\", mqttMessage.getResponseTopic());\n        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n    }", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r482901605", "createdAt": "2020-09-03T11:18:57Z", "author": {"login": "LeoNerdoG"}, "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.transport.mqtt.test.message.mqtt;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class MqttMessageTest extends Assert {\n+\n+    MqttTopic requestTopic, responseTopic;\n+    MqttPayload mqttPayload;\n+    Date date;\n+\n+    @Before\n+    public void createInstancesOfClasses() {\n+        requestTopic = new MqttTopic(\"requestTopic\");\n+        responseTopic = new MqttTopic(\"responseTopic\");\n+        mqttPayload = new MqttPayload(\"payload.code\".getBytes());\n+        date = new Date();\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestTopicNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, responseTopic, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2Test() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, date, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2MqttRequestNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, date, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2RequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, date, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f730ab020d5bbc04b3d1d7342550595c0ccfeb55"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTMyOTE5OnYy", "diffSide": "RIGHT", "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyMzozM1rOHMiILA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMTo0NlrOHPCqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNDEwOA==", "bodyText": "For MqttMessage constructors add additional tests:\n\nalphanumeric characters combined with numbers and whitespaces for requestTopic, responseTopic, Payload and receivedOn paramteres\nalphanumeric characters combined with special symbols and whitespaces for requestTopic, responseTopic, Payload and receivedOn paramteres\n\nWe need these checks for future, if implementations change, that we get notified by tests.\nAlso add additional tests just for setters in this case, because for now the setters are only implicitly tested, throught constructors. Again, if implementation changes, we will be \"notified\" by tests.", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r482904108", "createdAt": "2020-09-03T11:23:33Z", "author": {"login": "LeoNerdoG"}, "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.transport.mqtt.test.message.mqtt;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class MqttMessageTest extends Assert {\n+\n+    MqttTopic requestTopic, responseTopic;\n+    MqttPayload mqttPayload;\n+    Date date;\n+\n+    @Before\n+    public void createInstancesOfClasses() {\n+        requestTopic = new MqttTopic(\"requestTopic\");\n+        responseTopic = new MqttTopic(\"responseTopic\");\n+        mqttPayload = new MqttPayload(\"payload.code\".getBytes());\n+        date = new Date();\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestTopicNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, responseTopic, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2Test() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, date, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2MqttRequestNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, date, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2RequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, date, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f730ab020d5bbc04b3d1d7342550595c0ccfeb55"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDM5OA==", "bodyText": "Just add stuff into the\n    @Before\n    public void createInstancesOfClasses() {\n        requestTopic = new MqttTopic(\"requestTopic\");\n        responseTopic = new MqttTopic(\"responseTopic\");\n        mqttPayload = new MqttPayload(\"payload.code\".getBytes());\n        date = new Date();\n    }\n\npart (you can change the whole suite into parameterized tests), so we check for all other options.", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r485534398", "createdAt": "2020-09-09T11:21:46Z", "author": {"login": "LeoNerdoG"}, "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttMessageTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.transport.mqtt.test.message.mqtt;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class MqttMessageTest extends Assert {\n+\n+    MqttTopic requestTopic, responseTopic;\n+    MqttPayload mqttPayload;\n+    Date date;\n+\n+    @Before\n+    public void createInstancesOfClasses() {\n+        requestTopic = new MqttTopic(\"requestTopic\");\n+        responseTopic = new MqttTopic(\"responseTopic\");\n+        mqttPayload = new MqttPayload(\"payload.code\".getBytes());\n+        date = new Date();\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestTopicNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, responseTopic, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructorRequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, responseTopic, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", responseTopic, mqttMessage.getResponseTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2Test() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, date, mqttPayload);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2MqttRequestNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(null, date, mqttPayload);\n+        assertNull(\"Null expected!\", mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", mqttPayload, mqttMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void mqttMessageConstructor2RequestPayloadNullTest() {\n+        MqttMessage mqttMessage = new MqttMessage(requestTopic, date, null);\n+        assertEquals(\"Expected and actual value should be the same!\", requestTopic, mqttMessage.getRequestTopic());\n+        assertEquals(\"Expected and actual value should be the same!\", date, mqttMessage.getTimestamp());\n+        assertEquals(\"Expected and actual value should be the same!\", \"\", mqttMessage.getPayload().toString());\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNDEwOA=="}, "originalCommit": {"oid": "f730ab020d5bbc04b3d1d7342550595c0ccfeb55"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTU0MjE1OnYy", "diffSide": "RIGHT", "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttPayloadTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoyNDo1MlrOHMkJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoyNDo1MlrOHMkJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzNzEwNw==", "bodyText": "Please add test:\n    @Test\n    public void constructorTest1() throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {\n        Constructor<MqttPayload> argvalidator = MqttPayload.class.getDeclaredConstructor();\n        Constructor<MqttPayload> mqttPayloadConstructor = MqttPayload.class.getDeclaredConstructor();\n        mqttPayloadConstructor.setAccessible(true);\n        mqttPayloadConstructor.newInstance();\n    }\n\nfor checking the default package-only-accessible constructor, to achieve higher coverage.", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r482937107", "createdAt": "2020-09-03T12:24:52Z", "author": {"login": "LeoNerdoG"}, "path": "transport/mqtt/src/test/java/org/eclipse/kapua/transport/mqtt/test/message/mqtt/MqttPayloadTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.transport.mqtt.test.message.mqtt;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class MqttPayloadTest extends Assert {\n+\n+    MqttPayload mqttPayload;\n+\n+    @Before\n+    public void createInstanceOfClass() {\n+        mqttPayload = new MqttPayload(body);\n+    }\n+\n+    byte[] body = \"!#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2uF8FF\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7qwertyuiopasdfghjklzxcvbnm1234567890\".getBytes();\n+\n+    @Test\n+    public void mqttPayloadSetAndGetTest() {\n+        mqttPayload.setBody(body);\n+        assertEquals(\"Expected and actual values should be the same!\", body, mqttPayload.getBody());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f730ab020d5bbc04b3d1d7342550595c0ccfeb55"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTMzMzY4OnYy", "diffSide": "RIGHT", "path": "transport/mqtt/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxMjoyMlrOHUG0eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToxNjoxNFrOHfB0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NTMwNQ==", "bodyText": "Why this dependency has been added?", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r490845305", "createdAt": "2020-09-18T10:12:22Z", "author": {"login": "Coduz"}, "path": "transport/mqtt/pom.xml", "diffHunk": "@@ -46,5 +46,16 @@\n             <groupId>org.eclipse.paho</groupId>\n             <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.kapua</groupId>\n+            <artifactId>kapua-qa-markers</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb3b500b4450dfd1aa7bb02f56f71e4fa1e6693"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0NzY4MA==", "bodyText": "Hi, @Coduz, Without this dependency, I had an error for some tests java.lang.NoClassDefFoundError: org/apache/commons/logging/Log after adding this dependency everything worked fine.", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r497347680", "createdAt": "2020-09-30T08:51:39Z", "author": {"login": "code-incubus"}, "path": "transport/mqtt/pom.xml", "diffHunk": "@@ -46,5 +46,16 @@\n             <groupId>org.eclipse.paho</groupId>\n             <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.kapua</groupId>\n+            <artifactId>kapua-qa-markers</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NTMwNQ=="}, "originalCommit": {"oid": "afb3b500b4450dfd1aa7bb02f56f71e4fa1e6693"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5Nzc5NA==", "bodyText": "That Exception means that a slf4j-api implementation is missing. So adding commons-logging will fix the issue, but in the \"wrong\" way in the sense that we use logback as implementation of slf4j .\nSo this dependency should be changed to logback  with <scope>test</scope>", "url": "https://github.com/eclipse/kapua/pull/3064#discussion_r502297794", "createdAt": "2020-10-09T09:16:14Z", "author": {"login": "Coduz"}, "path": "transport/mqtt/pom.xml", "diffHunk": "@@ -46,5 +46,16 @@\n             <groupId>org.eclipse.paho</groupId>\n             <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.kapua</groupId>\n+            <artifactId>kapua-qa-markers</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NTMwNQ=="}, "originalCommit": {"oid": "afb3b500b4450dfd1aa7bb02f56f71e4fa1e6693"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1768, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}