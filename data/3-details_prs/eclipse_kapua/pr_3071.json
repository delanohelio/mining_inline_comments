{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NDE1ODUy", "number": 3071, "title": "Added Junit Tests for service/api module", "bodyText": "Moved class KapuaExceptionWithoutBundle from test to main folder\nAdded Junit tests for KapuaEntityCloneException class\nAdded Junit tests for KapuaEntityExistsException\nAdded Junit tests for KapuaEntityUniquenessException class\nAdded Junit tests for KapuaException class\nAdded Junit tests for KapuaExceptionWithoutBundle class\nAdded Junit tests for KapuaIllegalAccessException class\nAdded Junit tests for KapuaIllegalNullArgumentException class\nAdded Junit tests for KapuaIllegalStateException class\nAdded Junit tests for KapuaMaxNumberOfItemsReachedException class\nAdded Junit tests for KapuaOptimisticLockingException class\nAdded Junit tests for KapuaUnauthenticatedException class\nSigned-off-by: Sonja sonja.matic@comtrade.com\nRelated Issue\n/\nDescription of the solution adopted\n/\nScreenshots\n/\nAny side note on the changes made\n/", "createdAt": "2020-09-14T07:44:56Z", "url": "https://github.com/eclipse/kapua/pull/3071", "merged": true, "mergeCommit": {"oid": "b0f3ba98e3cb5c748d4b1a91d2321b6720529e4a"}, "closed": true, "closedAt": "2020-09-18T10:06:35Z", "author": {"login": "sonja-ct"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJDXHXgFqTQ4ODM5NDk1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKCtf1gFqTQ5MTMyNzI2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Mzk0OTU0", "url": "https://github.com/eclipse/kapua/pull/3071#pullrequestreview-488394954", "createdAt": "2020-09-15T07:22:28Z", "commit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoyMjoyOFrOHR0M1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowODo0OVrOHR14SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ0MzA5NA==", "bodyText": "Please use enhanced for loop (String string: resourceBundleName)", "url": "https://github.com/eclipse/kapua/pull/3071#discussion_r488443094", "createdAt": "2020-09-15T07:22:28Z", "author": {"login": "LeoNerdoG"}, "path": "service/api/src/test/java/org/eclipse/kapua/ExceptionMessageUtilsTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Modifier;\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+\n+@Category(JUnitTests.class)\n+public class ExceptionMessageUtilsTest extends Assert {\n+\n+    String[] resourceBundleName;\n+    Locale locale;\n+    KapuaErrorCode kapuaErrorCode;\n+    KapuaErrorCode mockedKapuaErrorCode;\n+    Object[] objectList;\n+    String[] kapuaGenericMessageWithObject;\n+    String[] kapuaGenericMessage;\n+\n+    @Before\n+    public void initialize() {\n+        resourceBundleName = new String[]{\"kapua-service-error-messages\", \"Resource Bundle Name\"};\n+        locale = Locale.ENGLISH;\n+        kapuaErrorCode = KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR;\n+        mockedKapuaErrorCode = Mockito.mock(KapuaErrorCode.class);\n+        objectList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false};\n+        kapuaGenericMessageWithObject = new String[]{\"Operation not allowed on admin role.\", \"Error: 0, 10, 100000, String, c, -10, -1000000000, -100000000000, 10, 10.0, null, 10.1, true, false\", \"Error: \"};\n+        kapuaGenericMessage = new String[]{\"Operation not allowed on admin role.\", \"Error: \"};\n+    }\n+\n+    @Test\n+    public void exceptionMessageUtilsTest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        Constructor<ExceptionMessageUtils> exceptionMessageUtils = ExceptionMessageUtils.class.getDeclaredConstructor();\n+        assertTrue(Modifier.isPrivate(exceptionMessageUtils.getModifiers()));\n+        exceptionMessageUtils.setAccessible(true);\n+        exceptionMessageUtils.newInstance();\n+    }\n+\n+    @Test\n+    public void getLocalizedMessageTest() {\n+        for (int i = 0; i < resourceBundleName.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ0MzQ3MA==", "bodyText": "You are not covering line 57 of the tested class, please take a look.", "url": "https://github.com/eclipse/kapua/pull/3071#discussion_r488443470", "createdAt": "2020-09-15T07:23:11Z", "author": {"login": "LeoNerdoG"}, "path": "service/api/src/test/java/org/eclipse/kapua/ExceptionMessageUtilsTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Modifier;\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+\n+@Category(JUnitTests.class)\n+public class ExceptionMessageUtilsTest extends Assert {\n+\n+    String[] resourceBundleName;\n+    Locale locale;\n+    KapuaErrorCode kapuaErrorCode;\n+    KapuaErrorCode mockedKapuaErrorCode;\n+    Object[] objectList;\n+    String[] kapuaGenericMessageWithObject;\n+    String[] kapuaGenericMessage;\n+\n+    @Before\n+    public void initialize() {\n+        resourceBundleName = new String[]{\"kapua-service-error-messages\", \"Resource Bundle Name\"};\n+        locale = Locale.ENGLISH;\n+        kapuaErrorCode = KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR;\n+        mockedKapuaErrorCode = Mockito.mock(KapuaErrorCode.class);\n+        objectList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false};\n+        kapuaGenericMessageWithObject = new String[]{\"Operation not allowed on admin role.\", \"Error: 0, 10, 100000, String, c, -10, -1000000000, -100000000000, 10, 10.0, null, 10.1, true, false\", \"Error: \"};\n+        kapuaGenericMessage = new String[]{\"Operation not allowed on admin role.\", \"Error: \"};\n+    }\n+\n+    @Test\n+    public void exceptionMessageUtilsTest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        Constructor<ExceptionMessageUtils> exceptionMessageUtils = ExceptionMessageUtils.class.getDeclaredConstructor();\n+        assertTrue(Modifier.isPrivate(exceptionMessageUtils.getModifiers()));\n+        exceptionMessageUtils.setAccessible(true);\n+        exceptionMessageUtils.newInstance();\n+    }\n+\n+    @Test\n+    public void getLocalizedMessageTest() {\n+        for (int i = 0; i < resourceBundleName.length; i++) {\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaGenericMessageWithObject[i], ExceptionMessageUtils.getLocalizedMessage(resourceBundleName[i], locale, kapuaErrorCode, objectList));\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaGenericMessage[i], ExceptionMessageUtils.getLocalizedMessage(resourceBundleName[i], locale, kapuaErrorCode, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ0MzY3MA==", "bodyText": "Please use enhanced for loop (String string: resourceBundleName)", "url": "https://github.com/eclipse/kapua/pull/3071#discussion_r488443670", "createdAt": "2020-09-15T07:23:35Z", "author": {"login": "LeoNerdoG"}, "path": "service/api/src/test/java/org/eclipse/kapua/ExceptionMessageUtilsTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Modifier;\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+\n+@Category(JUnitTests.class)\n+public class ExceptionMessageUtilsTest extends Assert {\n+\n+    String[] resourceBundleName;\n+    Locale locale;\n+    KapuaErrorCode kapuaErrorCode;\n+    KapuaErrorCode mockedKapuaErrorCode;\n+    Object[] objectList;\n+    String[] kapuaGenericMessageWithObject;\n+    String[] kapuaGenericMessage;\n+\n+    @Before\n+    public void initialize() {\n+        resourceBundleName = new String[]{\"kapua-service-error-messages\", \"Resource Bundle Name\"};\n+        locale = Locale.ENGLISH;\n+        kapuaErrorCode = KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR;\n+        mockedKapuaErrorCode = Mockito.mock(KapuaErrorCode.class);\n+        objectList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false};\n+        kapuaGenericMessageWithObject = new String[]{\"Operation not allowed on admin role.\", \"Error: 0, 10, 100000, String, c, -10, -1000000000, -100000000000, 10, 10.0, null, 10.1, true, false\", \"Error: \"};\n+        kapuaGenericMessage = new String[]{\"Operation not allowed on admin role.\", \"Error: \"};\n+    }\n+\n+    @Test\n+    public void exceptionMessageUtilsTest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        Constructor<ExceptionMessageUtils> exceptionMessageUtils = ExceptionMessageUtils.class.getDeclaredConstructor();\n+        assertTrue(Modifier.isPrivate(exceptionMessageUtils.getModifiers()));\n+        exceptionMessageUtils.setAccessible(true);\n+        exceptionMessageUtils.newInstance();\n+    }\n+\n+    @Test\n+    public void getLocalizedMessageTest() {\n+        for (int i = 0; i < resourceBundleName.length; i++) {\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaGenericMessageWithObject[i], ExceptionMessageUtils.getLocalizedMessage(resourceBundleName[i], locale, kapuaErrorCode, objectList));\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaGenericMessage[i], ExceptionMessageUtils.getLocalizedMessage(resourceBundleName[i], locale, kapuaErrorCode, null));\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void getLocalizedMessageNullStringTest() {\n+        ExceptionMessageUtils.getLocalizedMessage(null, locale, kapuaErrorCode, objectList);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void getLocalizedMessageNullLocaleTest() {\n+        for (int i = 0; i < resourceBundleName.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTc5Nw==", "bodyText": "No tests for: KapuaException kapuaException = new KapuaException(null, null, null);?", "url": "https://github.com/eclipse/kapua/pull/3071#discussion_r488469797", "createdAt": "2020-09-15T08:07:23Z", "author": {"login": "LeoNerdoG"}, "path": "service/api/src/test/java/org/eclipse/kapua/KapuaExceptionTest.java", "diffHunk": "@@ -12,37 +12,293 @@\n package org.eclipse.kapua;\n \n import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n \n @Category(JUnitTests.class)\n-public class KapuaExceptionTest {\n+public class KapuaExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    KapuaErrorCode kapuaErrorCode;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-service-error-messages\";\n+        argument1 = \"user\";\n+        argument2 = 2;\n+        argument3 = 'c';\n+        throwables = new Throwable[]{new Throwable(), null};\n+        kapuaErrorCode = KapuaErrorCodes.ENTITY_NOT_FOUND;\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeParameterTest() {\n+        KapuaException kapuaException = new KapuaException(kapuaErrorCode);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getLocalizedMessage());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeParameterTest() {\n+        KapuaException kapuaException = new KapuaException(null);\n+        assertNull(\"Null expected.\", kapuaException.getCode());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(kapuaErrorCode, argument1, argument2, argument3);\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(null, argument1, argument2, argument3);\n+        assertNull(\"Null expected.\", kapuaException.getCode());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeNullObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(kapuaErrorCode, null);\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeNullObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(null, null);\n+        assertNull(\"Null expected.\", kapuaException.getCode());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeThrowableObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(kapuaErrorCode, throwable, argument1, argument2, argument3);\n+            assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getLocalizedMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeThrowableObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(null, throwable, argument1, argument2, argument3);\n+            assertNull(\"Null expected.\", kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            try {\n+                kapuaException.getMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+            try {\n+                kapuaException.getLocalizedMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+        }\n+    }\n \n     @Test\n-    public void test() {\n-        KapuaException ke = new KapuaException(KapuaErrorCodes.ENTITY_NOT_FOUND, \"user\", 1);\n-        Assert.assertEquals(\"The entity of type user with id/name 1 was not found.\", ke.getMessage());\n+    public void kapuaExceptionKapuaErrorCodeThrowableNullObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(kapuaErrorCode, throwable, null);\n+            assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getLocalizedMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+        }\n+    }\n \n-        ke = KapuaException.internalError(\"ciao\");\n-        Assert.assertEquals(\"An internal error occurred: ciao.\", ke.getMessage());\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeThrowableNullObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(null, throwable, null);\n+            assertNull(\"Null expected.\", kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+            try {\n+                kapuaException.getMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+            try {\n+                kapuaException.getLocalizedMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3MDYwMQ==", "bodyText": "Enhanced for loop?\nfor (Throwable throwableParameter: throwables) {", "url": "https://github.com/eclipse/kapua/pull/3071#discussion_r488470601", "createdAt": "2020-09-15T08:08:49Z", "author": {"login": "LeoNerdoG"}, "path": "service/api/src/test/java/org/eclipse/kapua/KapuaExceptionTest.java", "diffHunk": "@@ -12,37 +12,293 @@\n package org.eclipse.kapua;\n \n import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n \n @Category(JUnitTests.class)\n-public class KapuaExceptionTest {\n+public class KapuaExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    KapuaErrorCode kapuaErrorCode;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-service-error-messages\";\n+        argument1 = \"user\";\n+        argument2 = 2;\n+        argument3 = 'c';\n+        throwables = new Throwable[]{new Throwable(), null};\n+        kapuaErrorCode = KapuaErrorCodes.ENTITY_NOT_FOUND;\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeParameterTest() {\n+        KapuaException kapuaException = new KapuaException(kapuaErrorCode);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getLocalizedMessage());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeParameterTest() {\n+        KapuaException kapuaException = new KapuaException(null);\n+        assertNull(\"Null expected.\", kapuaException.getCode());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(kapuaErrorCode, argument1, argument2, argument3);\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(null, argument1, argument2, argument3);\n+        assertNull(\"Null expected.\", kapuaException.getCode());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeNullObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(kapuaErrorCode, null);\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeNullObjectParametersTest() {\n+        KapuaException kapuaException = new KapuaException(null, null);\n+        assertNull(\"Null expected.\", kapuaException.getCode());\n+        assertNull(\"Null expected.\", kapuaException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionKapuaErrorCodeThrowableObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(kapuaErrorCode, throwable, argument1, argument2, argument3);\n+            assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaException.getLocalizedMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeThrowableObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(null, throwable, argument1, argument2, argument3);\n+            assertNull(\"Null expected.\", kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            try {\n+                kapuaException.getMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+            try {\n+                kapuaException.getLocalizedMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+        }\n+    }\n \n     @Test\n-    public void test() {\n-        KapuaException ke = new KapuaException(KapuaErrorCodes.ENTITY_NOT_FOUND, \"user\", 1);\n-        Assert.assertEquals(\"The entity of type user with id/name 1 was not found.\", ke.getMessage());\n+    public void kapuaExceptionKapuaErrorCodeThrowableNullObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(kapuaErrorCode, throwable, null);\n+            assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaException.getLocalizedMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+        }\n+    }\n \n-        ke = KapuaException.internalError(\"ciao\");\n-        Assert.assertEquals(\"An internal error occurred: ciao.\", ke.getMessage());\n+    @Test\n+    public void kapuaExceptionNullKapuaErrorCodeThrowableNullObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaException = new KapuaException(null, throwable, null);\n+            assertNull(\"Null expected.\", kapuaException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaException.getCause());\n+            try {\n+                kapuaException.getMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+            try {\n+                kapuaException.getLocalizedMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+        }\n+    }\n \n-        ke = KapuaException.internalError(new NullPointerException());\n-        Assert.assertEquals(\"An internal error occurred: java.lang.NullPointerException.\", ke.getMessage());\n+    @Test\n+    public void internalErrorCauseMessageTest() {\n+        Throwable[] cause = {new Throwable(), null};\n+        String[] messages = {\"Message\", null};\n \n-        ke = new KapuaException((KapuaErrorCode) () -> \"MISSING\", \"abc\", 1);\n-        Assert.assertEquals(\"Error: abc, 1\", ke.getMessage());\n+        for (Throwable throwable : cause) {\n+            for (String msg : messages) {\n+                assertThat(\"Instance of KapuaException expected.\", KapuaException.internalError(throwable, msg), IsInstanceOf.instanceOf(KapuaException.class));\n+                assertEquals(\"Expected and actual values should be the same.\", new KapuaException(KapuaErrorCodes.INTERNAL_ERROR, throwable, msg).toString(), KapuaException.internalError(throwable, msg).toString());\n+                assertEquals(\"Expected and actual values should be the same.\", \"An internal error occurred: \" + msg + \".\", KapuaException.internalError(throwable, msg).getMessage());\n+                assertEquals(\"Expected and actual values should be the same.\", \"An internal error occurred: \" + msg + \".\", KapuaException.internalError(throwable, msg).getLocalizedMessage());\n+                assertEquals(\"Expected and actual values should be the same.\", throwable, KapuaException.internalError(throwable, msg).getCause());\n+                assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.INTERNAL_ERROR, KapuaException.internalError(throwable, msg).getCode());\n+                assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, KapuaException.internalError(throwable, msg).getKapuaErrorMessagesBundle());\n+            }\n+        }\n     }\n \n     @Test\n-    public void missingBundleTest() {\n-        KapuaExceptionWithoutBundle exceptionWithoutBundle = new KapuaExceptionWithoutBundle(KapuaErrorCodes.ILLEGAL_STATE, \"param1\", \"param2\");\n-        Assert.assertEquals(\"Error: param1, param2\", exceptionWithoutBundle.getMessage());\n+    public void internalErrorCauseTest() {\n+        String message = \"Message\";\n+        Throwable nullThrowable = null;\n+        Throwable[] throwables = {new Throwable(message), new Throwable()};\n+        String[] expectedMessage = {\"An internal error occurred: \" + message + \".\", \"An internal error occurred: \" + throwables[1] + \".\"};\n+        String[] arguments = {\"Message\", \"java.lang.Throwable\"};\n+\n+        for (int i = 0; i < throwables.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb"}, "originalPosition": 226}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e557a446c71601ab380d6e78b6834a2c92adcb24", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/e557a446c71601ab380d6e78b6834a2c92adcb24", "committedDate": "2020-09-15T11:29:07Z", "message": "Added Junit Tests for service/api module\n\nMoved class KapuaExceptionWithoutBundle from test to main folder\n\nAdded Junit tests for KapuaEntityCloneException class\nAdded Junit tests for KapuaEntityExistsException\nAdded Junit tests for KapuaEntityUniquenessException class\nAdded Junit tests for KapuaException class\nAdded Junit tests for KapuaExceptionWithoutBundle class\nAdded Junit tests for KapuaIllegalAccessException class\nAdded Junit tests for KapuaIllegalNullArgumentException class\nAdded Junit tests for KapuaIllegalStateException class\nAdded Junit tests for KapuaMaxNumberOfItemsReachedException class\nAdded Junit tests for KapuaOptimisticLockingException class\nAdded Junit tests for KapuaUnauthenticatedException class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/d2eea1ee8e7433af92c3e6ff32f0cf27c2c05beb", "committedDate": "2020-09-14T06:13:51Z", "message": "Added Junit Tests for service/api module\n\nAdded Junit tests for ExceptionMessageUtils class\nAdded Junit tests for KapuaEntityCloneException class\nAdded Junit tests for KapuaEntityExistsException\nAdded Junit tests for KapuaEntityUniquenessException class\nAdded Junit tests for KapuaException class\nAdded Junit tests for KapuaExceptionWithoutBundle class\nAdded Junit tests for KapuaIllegalAccessException class\nAdded Junit tests for KapuaIllegalNullArgumentException class\nAdded Junit tests for KapuaIllegalStateException class\nAdded Junit tests for KapuaMaxNumberOfItemsReachedException class\nAdded Junit tests for KapuaOptimisticLockingException class\nAdded Junit tests for KapuaUnauthenticatedException class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>"}, "afterCommit": {"oid": "e557a446c71601ab380d6e78b6834a2c92adcb24", "author": {"user": null}, "url": "https://github.com/eclipse/kapua/commit/e557a446c71601ab380d6e78b6834a2c92adcb24", "committedDate": "2020-09-15T11:29:07Z", "message": "Added Junit Tests for service/api module\n\nMoved class KapuaExceptionWithoutBundle from test to main folder\n\nAdded Junit tests for KapuaEntityCloneException class\nAdded Junit tests for KapuaEntityExistsException\nAdded Junit tests for KapuaEntityUniquenessException class\nAdded Junit tests for KapuaException class\nAdded Junit tests for KapuaExceptionWithoutBundle class\nAdded Junit tests for KapuaIllegalAccessException class\nAdded Junit tests for KapuaIllegalNullArgumentException class\nAdded Junit tests for KapuaIllegalStateException class\nAdded Junit tests for KapuaMaxNumberOfItemsReachedException class\nAdded Junit tests for KapuaOptimisticLockingException class\nAdded Junit tests for KapuaUnauthenticatedException class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTk3NDk4", "url": "https://github.com/eclipse/kapua/pull/3071#pullrequestreview-488597498", "createdAt": "2020-09-15T11:45:34Z", "commit": {"oid": "e557a446c71601ab380d6e78b6834a2c92adcb24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzI3MjYz", "url": "https://github.com/eclipse/kapua/pull/3071#pullrequestreview-491327263", "createdAt": "2020-09-18T10:05:59Z", "commit": {"oid": "e557a446c71601ab380d6e78b6834a2c92adcb24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 202, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}