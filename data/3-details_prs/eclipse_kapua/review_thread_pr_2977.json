{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NTAxODg4", "number": 2977, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToyODoyMFrOD9UGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToyMjoxNVrOD9tnfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjE5MDA1OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaFileUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToyODoyMFrOGWu8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToyODoyMFrOGWu8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5MTAyNg==", "bodyText": "assertEquals has an overload method that accepts a message as a first argument. So fail invoked in the catch exception is not the correct usage of Assert stuff.\nPlease change this and also other similar usages.", "url": "https://github.com/eclipse/kapua/pull/2977#discussion_r426491026", "createdAt": "2020-05-18T09:28:20Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaFileUtilsTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.util;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.net.URL;\n+\n+@Category(JUnitTests.class)\n+public class KapuaFileUtilsTest extends Assert {\n+\n+    @Test\n+    public void constructorTest() throws Exception {\n+        Constructor<KapuaFileUtils> fileUtilsConstructor = KapuaFileUtils.class.getDeclaredConstructor();\n+        fileUtilsConstructor.setAccessible(true);\n+        fileUtilsConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getAsUrlPositiveAndNegativeTest() throws Exception {\n+        String[] permittedFormats = new String[] {\"https://www.example3345.com/\", \"http://www.example.com:1080/docs/resource1.html\",\n+                \"https://www.example.com:1080/docs/resource2.html\", \"file:///c:/EXAMPLE/clock.example\"};\n+        String [] invalidFormats = new String [] {\"www.example.com:1080/docs/resource1.html\", \"/c:/WINDOWS/clock.example\",\n+                \"http://www.example.com:10800000000000/docs/resource1.html\", \"htp://www.example.com:1080/docs/resource1.html\"};\n+\n+        URL[] expectedUrl = new URL[] {new URL(\"https://www.example3345.com/\"), new URL(\"http://www.example.com:1080/docs/resource1.html\"),\n+                                       new URL(\"https://www.example.com:1080/docs/resource2.html\"), new URL(\"file:///c:/EXAMPLE/clock.example\")};\n+        for (int i = 0; i < permittedFormats.length; i++) {\n+            try {\n+                assertEquals(expectedUrl[i], KapuaFileUtils.getAsURL(permittedFormats[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a166127978c73bae21374958cfe0ce149855c9c5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI1ODIyOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaFileUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0NjoxN1rOGWvnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0NjoxN1rOGWvnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMTkyMg==", "bodyText": "If they are not intended to match please use assertNotEquals.\nIf KapuaFileUtils.getAsURL(...) is meant to throw an Exception catch the Exception and do asserts on the type of Exception expected.", "url": "https://github.com/eclipse/kapua/pull/2977#discussion_r426501922", "createdAt": "2020-05-18T09:46:17Z", "author": {"login": "Coduz"}, "path": "commons/src/test/java/org/eclipse/kapua/commons/util/KapuaFileUtilsTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.util;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.net.URL;\n+\n+@Category(JUnitTests.class)\n+public class KapuaFileUtilsTest extends Assert {\n+\n+    @Test\n+    public void constructorTest() throws Exception {\n+        Constructor<KapuaFileUtils> fileUtilsConstructor = KapuaFileUtils.class.getDeclaredConstructor();\n+        fileUtilsConstructor.setAccessible(true);\n+        fileUtilsConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getAsUrlPositiveAndNegativeTest() throws Exception {\n+        String[] permittedFormats = new String[] {\"https://www.example3345.com/\", \"http://www.example.com:1080/docs/resource1.html\",\n+                \"https://www.example.com:1080/docs/resource2.html\", \"file:///c:/EXAMPLE/clock.example\"};\n+        String [] invalidFormats = new String [] {\"www.example.com:1080/docs/resource1.html\", \"/c:/WINDOWS/clock.example\",\n+                \"http://www.example.com:10800000000000/docs/resource1.html\", \"htp://www.example.com:1080/docs/resource1.html\"};\n+\n+        URL[] expectedUrl = new URL[] {new URL(\"https://www.example3345.com/\"), new URL(\"http://www.example.com:1080/docs/resource1.html\"),\n+                                       new URL(\"https://www.example.com:1080/docs/resource2.html\"), new URL(\"file:///c:/EXAMPLE/clock.example\")};\n+        for (int i = 0; i < permittedFormats.length; i++) {\n+            try {\n+                assertEquals(expectedUrl[i], KapuaFileUtils.getAsURL(permittedFormats[i]));\n+            } catch (Exception ex) {\n+                fail(\"Inappropriate http scheme.\");\n+            }\n+            try {\n+                assertEquals(invalidFormats[i], KapuaFileUtils.getAsURL(invalidFormats[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a166127978c73bae21374958cfe0ce149855c9c5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDM3MTE3OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/org/eclipse/kapua/commons/util/KapuaFileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToyMjoxNVrOGXXnWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozNDo0NFrOGXYFhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1NzMzOA==", "bodyText": "Which is the issue with this method?", "url": "https://github.com/eclipse/kapua/pull/2977#discussion_r427157338", "createdAt": "2020-05-19T09:22:15Z", "author": {"login": "Coduz"}, "path": "commons/src/main/java/org/eclipse/kapua/commons/util/KapuaFileUtils.java", "diffHunk": "@@ -79,6 +79,7 @@ public static File getAsFile(String filePath) throws KapuaSettingException {\n \n             if (hasHttpScheme(filePath)) {\n                 // FIXME:\n+                // After fixing this method, needs to adjust/fix the tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea2536b4f6d043b14028868293d4515345b3bb9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTA2MQ==", "bodyText": "@Coduz\nThat\u2019s the comment I found in that class. So if that method ever changes or whatever ... it is necessary to adjust the test. That's all.", "url": "https://github.com/eclipse/kapua/pull/2977#discussion_r427165061", "createdAt": "2020-05-19T09:34:44Z", "author": {"login": "code-incubus"}, "path": "commons/src/main/java/org/eclipse/kapua/commons/util/KapuaFileUtils.java", "diffHunk": "@@ -79,6 +79,7 @@ public static File getAsFile(String filePath) throws KapuaSettingException {\n \n             if (hasHttpScheme(filePath)) {\n                 // FIXME:\n+                // After fixing this method, needs to adjust/fix the tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1NzMzOA=="}, "originalCommit": {"oid": "4ea2536b4f6d043b14028868293d4515345b3bb9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1693, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}