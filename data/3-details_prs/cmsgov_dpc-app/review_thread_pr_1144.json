{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjUyMTc2", "number": 1144, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo1Mjo0MFrOFG4Q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozMjo0MVrOFHNQHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzU3NjA1OnYy", "diffSide": "RIGHT", "path": "dpc-api/src/test/java/gov/cms/dpc/api/APIResourceAnnotationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo1Mjo0MFrOIIGQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo1Mjo0MFrOIIGQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM2MTk0Ng==", "bodyText": "Should this be Authorizer and PathAuthorizer?", "url": "https://github.com/CMSgov/dpc-app/pull/1144#discussion_r545361946", "createdAt": "2020-12-17T19:52:40Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/test/java/gov/cms/dpc/api/APIResourceAnnotationTest.java", "diffHunk": "@@ -82,28 +81,13 @@ void allResourcesHaveSecurityAnnotations() {\n \n     /**\n      * Asserts that the method has valid auth-annotations\n-     * To pass, the method must either have a parameter with an Auth or a PathAuthorizer or Public annotation on the method\n+     * To pass, the method must either have a parameter with an Authorized, PathAuthorized, or Public annotation on the method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f3e565185dd6b300a9bcff982db630486a64b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTAxNDY5OnYy", "diffSide": "RIGHT", "path": "dpc-attribution/src/test/java/gov/cms/dpc/attribution/resources/v1/GroupResourceUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozMjo0MVrOIIlG5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozMjo0MVrOIIlG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2NzQ5NQ==", "bodyText": "You can try one of those regex to string generators https://github.com/curious-odd-man/RgxGen", "url": "https://github.com/CMSgov/dpc-app/pull/1144#discussion_r545867495", "createdAt": "2020-12-18T14:32:41Z", "author": {"login": "MrBilnon"}, "path": "dpc-attribution/src/test/java/gov/cms/dpc/attribution/resources/v1/GroupResourceUnitTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package gov.cms.dpc.attribution.resources.v1;\n+\n+import com.google.common.collect.Maps;\n+import gov.cms.dpc.attribution.DPCAttributionConfiguration;\n+import gov.cms.dpc.attribution.jdbi.*;\n+import gov.cms.dpc.common.entities.PatientEntity;\n+import gov.cms.dpc.common.entities.ProviderEntity;\n+import gov.cms.dpc.common.entities.RosterEntity;\n+import gov.cms.dpc.common.utils.NPIUtil;\n+import gov.cms.dpc.fhir.converters.FHIREntityConverter;\n+import gov.cms.dpc.testing.factories.FHIRGroupBuilder;\n+import gov.cms.dpc.testing.factories.FHIRPatientBuilder;\n+import org.assertj.core.util.Lists;\n+import org.hl7.fhir.dstu3.model.Group;\n+import org.hl7.fhir.dstu3.model.Patient;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Response;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+\n+public class GroupResourceUnitTest {\n+\n+    private GroupResource groupResource;\n+\n+    @Mock\n+    OrganizationDAO mockOrganizationDao;\n+\n+    @Mock\n+    EndpointDAO mockEndpointDao;\n+\n+    @Mock\n+    ProviderDAO providerDAO;\n+\n+    @Mock\n+    PatientDAO patientDAO;\n+\n+    @Mock\n+    RosterDAO rosterDAO;\n+\n+    @Mock\n+    RelationshipDAO relationshipDAO;\n+\n+    private DPCAttributionConfiguration configuration;\n+\n+    private FHIREntityConverter converter = FHIREntityConverter.initialize();\n+\n+\n+    @BeforeEach\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        configuration = new DPCAttributionConfiguration();\n+        groupResource = new GroupResource(converter, providerDAO, rosterDAO, patientDAO, relationshipDAO, configuration);\n+    }\n+\n+\n+    @Test\n+    public void testCreateRosterHappyCase(){\n+        //Arrange\n+        final UUID orgId = UUID.randomUUID();\n+        final String providerNpi = NPIUtil.generateNPI();\n+\n+        final Map<UUID,Patient> patientBank = makeTestPatients(5, orgId);\n+\n+        final Group group = FHIRGroupBuilder\n+                .newBuild()\n+                .attributedTo(providerNpi)\n+                .withPatients(patientBank.keySet().toArray(UUID[]::new))\n+                .withOrgTag(orgId)\n+                .build();\n+\n+        configuration.setPatientLimit(10);\n+        configuration.setExpirationThreshold(10);\n+        Mockito.when(rosterDAO.findEntities(isNull(),eq(orgId), eq(providerNpi), isNull())).thenReturn(Lists.emptyList());\n+        Mockito.when(providerDAO.getProviders(isNull(),eq(providerNpi), eq(orgId))).thenReturn(List.of(new ProviderEntity()));\n+        patientBank.keySet().stream().forEach(patientId ->\n+                Mockito.when(patientDAO.patientSearch(eq(patientId), isNull(),eq(orgId))).thenReturn(List.of(new PatientEntity())));\n+\n+        Mockito.when(rosterDAO.persistEntity(any(RosterEntity.class))).thenAnswer(invocation -> invocation.getArguments()[0]);\n+\n+        //Act\n+        Response response = groupResource.createRoster(group);\n+\n+        //Assert\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus(), \"Response status should have been CREATED (201)\");\n+        assertNotNull(response.getEntity(), \"Response should have contained a body\");\n+        assertEquals(patientBank.keySet().size(),((Group) response.getEntity()).getMember().size(), \"Patients count should be the same as submitted\");\n+    }\n+\n+    @Test\n+    public void testCreateRosterWithInvalidPatient(){\n+        //Arrange\n+        final UUID orgId = UUID.randomUUID();\n+        final String providerNpi = NPIUtil.generateNPI();\n+\n+        final Map<UUID,Patient> patientBank = makeTestPatients(5, orgId);\n+\n+        final UUID badPatientUUID = UUID.randomUUID();\n+\n+        final Group group = FHIRGroupBuilder\n+                .newBuild()\n+                .attributedTo(providerNpi)\n+                .withPatients(patientBank.keySet().toArray(UUID[]::new))\n+                .withPatients(badPatientUUID)\n+                .withOrgTag(orgId)\n+                .build();\n+\n+        configuration.setPatientLimit(10);\n+        configuration.setExpirationThreshold(10);\n+        Mockito.when(rosterDAO.findEntities(isNull(),eq(orgId), eq(providerNpi), isNull())).thenReturn(Lists.emptyList());\n+        Mockito.when(providerDAO.getProviders(isNull(),eq(providerNpi), eq(orgId))).thenReturn(List.of(new ProviderEntity()));\n+        patientBank.keySet().stream().forEach(patientId ->\n+                Mockito.when(patientDAO.patientSearch(eq(patientId), isNull(),eq(orgId))).thenReturn(List.of(new PatientEntity())));\n+\n+        Mockito.when(patientDAO.patientSearch(eq(badPatientUUID), isNull(),eq(orgId))).thenReturn(List.of());\n+        Mockito.when(rosterDAO.persistEntity(any(RosterEntity.class))).thenAnswer(invocation -> invocation.getArguments()[0]);\n+\n+        //Act & Assert\n+        assertThrows(WebApplicationException.class, () -> groupResource.createRoster(group), \"Expected and exception if an invalid patient was added\");\n+    }\n+\n+    private Map<UUID,Patient> makeTestPatients(int count, UUID orgId){\n+        if(count>88){\n+            throw new IllegalStateException(\"Don't support building more than 88 patients..yet (need a better mbi generator)\");\n+        }\n+        final Map<UUID,Patient> patients = Maps.newHashMap();\n+        while(count>0){\n+            UUID id = UUID.randomUUID();\n+            Patient patient = FHIRPatientBuilder\n+                    .newBuild()\n+                    .withMbi(\"4S41C00AA\"+(count+10)) //makes MBI in range 4S41C00AA10 -> 4S41C00AA99", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75e3bc55d5c75ca27ef729009d37a985552eacc0"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 49, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}