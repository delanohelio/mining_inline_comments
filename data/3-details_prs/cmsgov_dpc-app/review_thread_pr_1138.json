{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDc4NzQw", "number": 1138, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1MjoyNFrOFDJ_5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToyNzowNFrOFDiP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODUzODYzOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/AggregationAppModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1MjoyNFrOICrMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0Njo1OVrOICuwow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NTY2OA==", "bodyText": "Method provideLookBackService has 5 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r539675668", "createdAt": "2020-12-09T21:52:24Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/AggregationAppModule.java", "diffHunk": "@@ -94,13 +96,13 @@ public int provideJobTimeoutInSeconds() {\n     }\n \n     @Provides\n-    LookBackService provideLookBackService(DPCManagedSessionFactory sessionFactory, RosterDAO rosterDAO, OrganizationDAO organizationDAO, OperationsConfig operationsConfig) {\n+    LookBackService provideLookBackService(DPCManagedSessionFactory sessionFactory, ProviderDAO providerDAO, RosterDAO rosterDAO, OrganizationDAO organizationDAO, OperationsConfig operationsConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNDE3OQ==", "bodyText": "the constructor requires all of those for injection by guice. The only way to avoid this would be to create another class that takes a subset of those as a constructor, which is unnecessary.", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r539734179", "createdAt": "2020-12-09T23:46:59Z", "author": {"login": "jonfulk"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/AggregationAppModule.java", "diffHunk": "@@ -94,13 +96,13 @@ public int provideJobTimeoutInSeconds() {\n     }\n \n     @Provides\n-    LookBackService provideLookBackService(DPCManagedSessionFactory sessionFactory, RosterDAO rosterDAO, OrganizationDAO organizationDAO, OperationsConfig operationsConfig) {\n+    LookBackService provideLookBackService(DPCManagedSessionFactory sessionFactory, ProviderDAO providerDAO, RosterDAO rosterDAO, OrganizationDAO organizationDAO, OperationsConfig operationsConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NTY2OA=="}, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQ5Njk1OnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToyNDoyNlrOIDOuqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOToyMjowNlrOIDZe5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1Nzk2Mw==", "bodyText": "could you change the description too?  Something like List of patient MBIs", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r540257963", "createdAt": "2020-12-10T15:24:26Z", "author": {"login": "MrBilnon"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -53,17 +53,17 @@ public Resource retrieveData(UUID organizationId, UUID providerId, List<String>\n      * Retrieves data from BFD\n      * @param organizationID UUID of organization\n      * @param providerID UUID of provider\n-     * @param patientIDs List of patient String UUIDs\n+     * @param patientMBIs List of patient String UUIDs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzNDE1MA==", "bodyText": "good point. i'll do that!", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r540434150", "createdAt": "2020-12-10T19:22:06Z", "author": {"login": "jonfulk"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -53,17 +53,17 @@ public Resource retrieveData(UUID organizationId, UUID providerId, List<String>\n      * Retrieves data from BFD\n      * @param organizationID UUID of organization\n      * @param providerID UUID of provider\n-     * @param patientIDs List of patient String UUIDs\n+     * @param patientMBIs List of patient String UUIDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1Nzk2Mw=="}, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjUxMTYwOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/PatientResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToyNzowNFrOIDO3aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDozNDowOVrOIDcJaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MDIwMA==", "bodyText": "not sure about the name of this exception as an operation outcome could be returned due to BFD being down or the MBI was in a bad format or something else.", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r540260200", "createdAt": "2020-12-10T15:27:04Z", "author": {"login": "MrBilnon"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/PatientResource.java", "diffHunk": "@@ -198,16 +197,16 @@ public Bundle everything(@ApiParam(hidden = true) @Auth OrganizationPrincipal or\n         final String patientMbi = FHIRExtractors.getPatientMBI(patient);\n         final UUID orgId = organization.getID();\n \n-        if (!isPatientInRoster(patientId, FHIRExtractors.getProviderNPI(practitioner), orgId)) {\n-            throw new WebApplicationException(HttpStatus.UNAUTHORIZED_401);\n-        }\n-\n         final String requestingIP = APIHelpers.fetchRequestingIP(request);\n         Resource result = dataService.retrieveData(orgId, practitionerId, List.of(patientMbi), APIHelpers.fetchTransactionTime(bfdClient),\n                 requestingIP, ResourceType.Patient, ResourceType.ExplanationOfBenefit, ResourceType.Coverage);\n         if (ResourceType.Bundle.equals(result.getResourceType())) {\n             return (Bundle) result;\n         }\n+        if (ResourceType.OperationOutcome.equals(result.getResourceType())) {\n+            OperationOutcome resultOp = (OperationOutcome) result;\n+            throw new NotAuthorizedException(resultOp.getIssueFirstRep().getDetails().getText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzNTcyOQ==", "bodyText": "@whuang85 Are you saying that it should be a different exception type, that we should check something else before throwing an exception, and/or that the message could fail if there isn't an issue with details and text? All of the above is an acceptable answer.", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r540435729", "createdAt": "2020-12-10T19:24:34Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/PatientResource.java", "diffHunk": "@@ -198,16 +197,16 @@ public Bundle everything(@ApiParam(hidden = true) @Auth OrganizationPrincipal or\n         final String patientMbi = FHIRExtractors.getPatientMBI(patient);\n         final UUID orgId = organization.getID();\n \n-        if (!isPatientInRoster(patientId, FHIRExtractors.getProviderNPI(practitioner), orgId)) {\n-            throw new WebApplicationException(HttpStatus.UNAUTHORIZED_401);\n-        }\n-\n         final String requestingIP = APIHelpers.fetchRequestingIP(request);\n         Resource result = dataService.retrieveData(orgId, practitionerId, List.of(patientMbi), APIHelpers.fetchTransactionTime(bfdClient),\n                 requestingIP, ResourceType.Patient, ResourceType.ExplanationOfBenefit, ResourceType.Coverage);\n         if (ResourceType.Bundle.equals(result.getResourceType())) {\n             return (Bundle) result;\n         }\n+        if (ResourceType.OperationOutcome.equals(result.getResourceType())) {\n+            OperationOutcome resultOp = (OperationOutcome) result;\n+            throw new NotAuthorizedException(resultOp.getIssueFirstRep().getDetails().getText());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MDIwMA=="}, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NzgwMw==", "bodyText": "@jonfulk just not sure if it should be returning a 401 when the reason data could not be returned is because either BFD is down, mbi is malformed, or look back failed. Could theoretically be caused by a null pointer exception in aggregation too.", "url": "https://github.com/CMSgov/dpc-app/pull/1138#discussion_r540477803", "createdAt": "2020-12-10T20:34:09Z", "author": {"login": "MrBilnon"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/PatientResource.java", "diffHunk": "@@ -198,16 +197,16 @@ public Bundle everything(@ApiParam(hidden = true) @Auth OrganizationPrincipal or\n         final String patientMbi = FHIRExtractors.getPatientMBI(patient);\n         final UUID orgId = organization.getID();\n \n-        if (!isPatientInRoster(patientId, FHIRExtractors.getProviderNPI(practitioner), orgId)) {\n-            throw new WebApplicationException(HttpStatus.UNAUTHORIZED_401);\n-        }\n-\n         final String requestingIP = APIHelpers.fetchRequestingIP(request);\n         Resource result = dataService.retrieveData(orgId, practitionerId, List.of(patientMbi), APIHelpers.fetchTransactionTime(bfdClient),\n                 requestingIP, ResourceType.Patient, ResourceType.ExplanationOfBenefit, ResourceType.Coverage);\n         if (ResourceType.Bundle.equals(result.getResourceType())) {\n             return (Bundle) result;\n         }\n+        if (ResourceType.OperationOutcome.equals(result.getResourceType())) {\n+            OperationOutcome resultOp = (OperationOutcome) result;\n+            throw new NotAuthorizedException(resultOp.getIssueFirstRep().getDetails().getText());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MDIwMA=="}, "originalCommit": {"oid": "8513a0274b8255575c62c6be8956629bb26e393e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 38, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}