{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzI2MTI1", "number": 571, "title": "DPC-954: Refactoring of API integration and related web app modeling", "bodyText": "Why\nThe code in the Rails app supporting the API integration (specifically the RegisteredOrganization, FhirEndpoint, Organization, and OrganizationRegistrar classes) was overly complicated and not very extensible. We wanted to be able to do things like support a different FhirEndpoint per API environment and show errors to the internal user when an API request is unsuccessful, which would've been difficult in the previous architecture. This refactoring simplifies the code a lot and adds those features.\nWhat Changed\n\nChange workflow for enabling API environments. This is no longer all on the organization's edit page; instead you enable an environment from the organization's show page and then add the FHIR endopoint details for the environment on its own page. If the API env cannot be enabled, you see the API error message. See screenshots below.\nRegsiteredOrganization is now one-to-one with the API organization and its relationship with that external record is managed completely in callbacks. It utilizes validation errors to store and communicate API request issues that prevent any transaction in the integration lifecycle (e.g. if the API org record can't be updated, the registered organization can't be updated and the user sees an error).\nAPI requests related to the organization (create, update, delete) are no longer made asynchronously. This way we can display any errors to the user so they can correct them or contact devs for support.\nSeeing the production option in the UI is now behind a feature flag.\n\nNew workflow\nCreate an org. Now there are no checkboxes for environment or fields for FHIR endpoint.\n\nOrg details/show page. Now there is a link to Enable Sandbox\n\nEnabling Sandbox. For sandbox, fhir endpoint fields are autopopulated but you can still change them if you want.\n\nError message if a field is invalid.\n\nError message if the API returns an error (e.g. the API is down and can't be connected to).\n\nSuccess -- goes back to org details page. Now you can see FHIR endpoint details and the API ID for the organization in Sandbox. You only see this if the API request was successful.\n\nEditing the FHIR endpoint for sandbox.\n\nSuccessful update message.\n\nDisabling sandbox with the disable link.\n\nChoices Made\n\nAPI environment enabling is no longer on organization edit page because it was too much info and too complex of error handling for a single page.\nProduction env access is now behind a feature flag so we can turn this on without as many code updates.\n\nTickets closed:\nDPC-954\nDPC-957\nFuture Work\nDPC-1016\nDPC-1017\nDPC-1018\nDPC-1019\nChecklist\n\n All tests are passing via make ci-app (app change) and make ci-web (website change)\n Swagger documentation has been updated\n FHIR documentation has been updated\n Any required dpc-ops changes have a PR submitted and mentioned in this ticket\n Any manual migration steps are documented, scripts written (where applicable), and tested\n Before merging, any required dpc-ops changes have been approved and merged into master of the dpc-ops repo", "createdAt": "2020-01-29T19:27:00Z", "url": "https://github.com/CMSgov/dpc-app/pull/571", "merged": true, "mergeCommit": {"oid": "40613ed2a6423e79e47756acc85814c324bd5c5d"}, "closed": true, "closedAt": "2020-02-03T13:02:15Z", "author": {"login": "switzersc-usds"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_LWfogFqTM1MDM3NzQxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_1F9RAH2gAyMzY4NzI2MTI1OmI3ZDhjYmQ0YWQ3MGYyYzFlMmFhZGNkNWI1MzdkNzU0Y2UzODZlOWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzc3NDE5", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-350377419", "createdAt": "2020-01-29T19:45:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MFrOFjVUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MVrOFjVUoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgxMQ==", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593811", "createdAt": "2020-01-29T19:45:40Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/organization.rb", "diffHunk": "@@ -3,23 +3,22 @@\n class Organization < ApplicationRecord\n   include OrganizationTypable\n \n-  has_one :address, as: :addressable\n+  has_one :address, as: :addressable, dependent: :destroy\n   has_many :organization_user_assignments, dependent: :destroy\n   has_many :users, through: :organization_user_assignments\n-  has_many :fhir_endpoints\n-  has_many :registered_organizations\n+  has_many :registered_organizations, dependent: :destroy\n \n   enum organization_type: ORGANIZATION_TYPES\n \n   validates :organization_type, inclusion: { in: ORGANIZATION_TYPES.keys }\n   validates :name, uniqueness: true, presence: true\n-  validate :api_environments_allowed\n   validates :npi, uniqueness: { allow_blank: true }\n \n   delegate :street, :street_2, :city, :state, :zip, to: :address, allow_nil: true, prefix: true\n-  accepts_nested_attributes_for :address, :fhir_endpoints, reject_if: :all_blank\n+  accepts_nested_attributes_for :address, reject_if: :all_blank\n \n-  after_save :update_registered_organizations\n+  # TODO update this", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgxNQ==", "bodyText": "Use the return of the conditional for variable assignment and comparison.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593815", "createdAt": "2020-01-29T19:45:40Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -143,7 +143,11 @@ def http_request(request, uri)\n \n     response = http.request(request)\n     @response_status = response.code.to_i\n-    @response_body = parsed_response(response)\n+    if response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgyMQ==", "bodyText": "Do not use space inside array brackets.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593821", "createdAt": "2020-01-29T19:45:41Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "diffHunk": "@@ -63,14 +63,14 @@ def address\n   end\n \n   def endpoint_resources\n-    object.fhir_endpoints.map { |fhir_endpoint| endpoint_resource(fhir_endpoint) }\n+    [ endpoint_resource(instance_options[:fhir_endpoint]) ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgyNA==", "bodyText": "Do not use space inside array brackets.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593824", "createdAt": "2020-01-29T19:45:41Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "diffHunk": "@@ -63,14 +63,14 @@ def address\n   end\n \n   def endpoint_resources\n-    object.fhir_endpoints.map { |fhir_endpoint| endpoint_resource(fhir_endpoint) }\n+    [ endpoint_resource(instance_options[:fhir_endpoint]) ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTk4MjE2", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-350598216", "createdAt": "2020-01-30T06:08:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowOFrOFjgRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Mw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773263", "createdAt": "2020-01-30T06:08:07Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2NQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773265", "createdAt": "2020-01-30T06:08:07Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be registered with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Ng==", "bodyText": "Align the elements of an array literal if they span more than one line.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773266", "createdAt": "2020-01-30T06:08:07Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Nw==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773267", "createdAt": "2020-01-30T06:08:08Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2OQ==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773269", "createdAt": "2020-01-30T06:08:08Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be registered with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTg3MzE1", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351187315", "createdAt": "2020-01-30T22:29:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyM1rOFj8Eag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyNFrOFj8EdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1MA==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228650", "createdAt": "2020-01-30T22:29:23Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1NA==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228654", "createdAt": "2020-01-30T22:29:23Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1Nw==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228657", "createdAt": "2020-01-30T22:29:23Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (endpoint update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def delete_api_organization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1OQ==", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228659", "createdAt": "2020-01-30T22:29:24Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY2MQ==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228661", "createdAt": "2020-01-30T22:29:24Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (endpoint update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def delete_api_organization\n+    api_request = APIClient.new(api_env).delete_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTQ0NTEw", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351544510", "createdAt": "2020-01-31T14:35:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozNToxNlrOFkNNuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozNToxNlrOFkNNuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwOTU2Mw==", "bodyText": "Extra empty line detected before the rescue.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373509563", "createdAt": "2020-01-31T14:35:16Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -143,25 +148,18 @@ def http_request(request, uri)\n \n     response = http.request(request)\n     @response_status = response.code.to_i\n-    @response_body = parsed_response(response)\n+    @response_body = response_successful? ? parsed_response(response) : response.body\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTYwMjQz", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351560243", "createdAt": "2020-01-31T14:57:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1NzoyOVrOFkN8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1NzoyOVrOFkN8MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMTQ1Ng==", "bodyText": "@nickrobison-usds Does the API delete an org's endpoint when the org is deleted, or do we need to make an API call to do that from the web app?", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373521456", "createdAt": "2020-01-31T14:57:29Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,95 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO: do we need to delete api endpoint too?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTYxNjYw", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351561660", "createdAt": "2020-01-31T14:59:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OToxOFrOFkOAbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OToxOFrOFkOAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjU0Mg==", "bodyText": "To discuss: What kind of data cleanup in sandbox should we do? Should we write a data migration to move FHIR Endpoints to belong to the registered_organization instead of the organization_id?", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373522542", "createdAt": "2020-01-31T14:59:18Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/db/migrate/20200124204655_drop_index_from_fhir_endpoints.rb", "diffHunk": "@@ -0,0 +1,6 @@\n+class DropIndexFromFhirEndpoints < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :fhir_endpoints, :organization_id, true\n+    remove_index :fhir_endpoints, :organization_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTYyMTI1", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351562125", "createdAt": "2020-01-31T14:59:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OTo1MVrOFkOBrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OTo1MVrOFkOBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjg2MQ==", "bodyText": "Should we go ahead and also remove the api_environments column from organizations now that we don't use it?", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373522861", "createdAt": "2020-01-31T14:59:51Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/db/migrate/20200127141604_change_null_api_id_for_registered_organizations.rb", "diffHunk": "@@ -0,0 +1,5 @@\n+class ChangeNullApiIdForRegisteredOrganizations < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :registered_organizations, :api_id, true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59cd484262a62744d0a191ba900fd6333ce60eb8", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/59cd484262a62744d0a191ba900fd6333ce60eb8", "committedDate": "2020-01-31T17:52:09Z", "message": "WIP initial work refactoring registered orgs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5157f16d5a9168e994e1d44514e02dbb0c0dff1", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/c5157f16d5a9168e994e1d44514e02dbb0c0dff1", "committedDate": "2020-01-31T17:52:09Z", "message": "Flesh out views and workflow for registered orgs\n\n* Make a separate page for editing a registered org and its fhir\n  endpoint, to simplify showing error messages\n* Use a callback to create org in API before the registered org gets\n  saved on the Rails side\n* Remove not-null contraint for organization_id on fhir_endpoints -\n  will remove this column altogether after data cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a2f3b0fc32262ad6827b5e06b6a322d06c06db", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/a4a2f3b0fc32262ad6827b5e06b6a322d06c06db", "committedDate": "2020-01-31T17:52:09Z", "message": "Refactor RegisteredOrganization logic, Part 1\n\n* Move sandbox email notification to happen if API org creation has been\n  successful in RegisteredOrganization model. This doesn\u2019t feel quite\n  right but it\u2019s the best place to do it right now.\n* Set a RegisteredOrganization\u2019s api_id from the API request *after*\n  creation, not before. This simplifies the flow, even though\n* Surface API errors to the user if the API org can\u2019t be created. Then\n  the user can retry from the edit page\n* Make prod API access a feature flag (with an env var) so we can flip\n  this on more easily when we\u2019re ready\n* Stop using OrganizationRegistrar for api org creation and just make\n  API syncing logic that belongs to the RegisteredOrganization model;\n  this simplifies things for now\n* FhirEndpoint now belongs to RegisteredOrganization and tests/logic is\n  up to date for that. We may need a data migration before we remove the\n  organization_id column from the fhir_endpoints table\n* Do not JSON parse error response from API because it is sometimes not\n  JSON\n* Add more tests, although some are still pending part 2 of the refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37976b2148b8a496aaabd853da0bf4ad11f9c9db", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/37976b2148b8a496aaabd853da0bf4ad11f9c9db", "committedDate": "2020-01-31T17:52:09Z", "message": "WIP Refactor RegisteredOrganization Part 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e7f042fce2cfb075f931324f61015c057849849", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/4e7f042fce2cfb075f931324f61015c057849849", "committedDate": "2020-01-31T17:52:09Z", "message": "Update tests for refactor work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d0da901c35eee3aabb8da27d6aa6e559a5e89f3", "author": {"user": {"login": "Sun-Mountain", "name": "Nicole Zonnenberg"}}, "url": "https://github.com/CMSgov/dpc-app/commit/1d0da901c35eee3aabb8da27d6aa6e559a5e89f3", "committedDate": "2020-01-31T17:52:09Z", "message": "delete method and delete test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca502e771fcdd59ae7790899f8db519c558f27b8", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/ca502e771fcdd59ae7790899f8db519c558f27b8", "committedDate": "2020-01-31T17:52:09Z", "message": "Add disable API functionality\n\n* Adds link on org page to disable sandbox (or prod) access\n* Delete corresponding API organization from API as callback on\n  RegisteredOrganization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/1e932d20ddd512764874b372e8c3d54c76ebd9de", "committedDate": "2020-01-31T17:56:46Z", "message": "Remove no longer needed column from orgs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/1e932d20ddd512764874b372e8c3d54c76ebd9de", "committedDate": "2020-01-31T17:56:46Z", "message": "Remove no longer needed column from orgs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjk2MTI3", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351696127", "createdAt": "2020-01-31T18:35:33Z", "commit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNTozM1rOFkUL0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNTozM1rOFkUL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzc2MQ==", "bodyText": "move this to next section (only show if prod has been enabled for this org)", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373623761", "createdAt": "2020-01-31T18:35:33Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/views/internal/organizations/show.html.erb", "diffHunk": "@@ -94,17 +94,76 @@\n \n <section class=\"box\">\n     <div class=\"box__content\">\n-      <h2 class=\"box__heading\">FHIR Endpoint</h2>\n-      <% @organization.fhir_endpoints.each do |fhir_endpoint| %>\n+      <h2 class=\"box__heading\">Enabled Environments</h2>\n+\n+      <h3>Sandbox</h3>\n+      <% if @organization.sandbox_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.sandbox_registered_organization.api_id %>\n+        </div>\n+        <h4>FHIR Endpoint</h4>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API Reference: <%= @organization.sandbox_registered_organization.api_endpoint_ref %>\n+        </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Name: <%= fhir_endpoint.name %>\n+          Name: <%= @organization.sandbox_fhir_endpoint.name %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          URI: <%= fhir_endpoint.uri %>\n+          URI: <%= @organization.sandbox_fhir_endpoint.uri %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Status: <%= fhir_endpoint.status.titleize %>\n+          Status: <%= @organization.sandbox_fhir_endpoint.status.titleize %>\n         </div>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          api_env: 'sandbox'\n+          ) %>\n+        <%= link_to \"Disable Sandbox\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-sandbox' } %>\n+      <% else %>\n+        <%= link_to 'Enable Sandbox',\n+                    new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'sandbox'),\n+                    data: { test: 'enable-sandbox' } %>\n+      <% end %>\n+\n+      <h3>Production</h3>\n+      <% if production_api_access_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.production_registered_organization.api_id %>\n+        </div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjk2NDYz", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351696463", "createdAt": "2020-01-31T18:36:08Z", "commit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjowOFrOFkUM3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjowOFrOFkUM3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDAzMQ==", "bodyText": "Move these up to be in the if organization.production_enabled? section", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373624031", "createdAt": "2020-01-31T18:36:08Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/views/internal/organizations/show.html.erb", "diffHunk": "@@ -94,17 +94,76 @@\n \n <section class=\"box\">\n     <div class=\"box__content\">\n-      <h2 class=\"box__heading\">FHIR Endpoint</h2>\n-      <% @organization.fhir_endpoints.each do |fhir_endpoint| %>\n+      <h2 class=\"box__heading\">Enabled Environments</h2>\n+\n+      <h3>Sandbox</h3>\n+      <% if @organization.sandbox_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.sandbox_registered_organization.api_id %>\n+        </div>\n+        <h4>FHIR Endpoint</h4>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API Reference: <%= @organization.sandbox_registered_organization.api_endpoint_ref %>\n+        </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Name: <%= fhir_endpoint.name %>\n+          Name: <%= @organization.sandbox_fhir_endpoint.name %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          URI: <%= fhir_endpoint.uri %>\n+          URI: <%= @organization.sandbox_fhir_endpoint.uri %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Status: <%= fhir_endpoint.status.titleize %>\n+          Status: <%= @organization.sandbox_fhir_endpoint.status.titleize %>\n         </div>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          api_env: 'sandbox'\n+          ) %>\n+        <%= link_to \"Disable Sandbox\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-sandbox' } %>\n+      <% else %>\n+        <%= link_to 'Enable Sandbox',\n+                    new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'sandbox'),\n+                    data: { test: 'enable-sandbox' } %>\n+      <% end %>\n+\n+      <h3>Production</h3>\n+      <% if production_api_access_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.production_registered_organization.api_id %>\n+        </div>\n+        <% if @organization.production_enabled? %>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            API Reference: <%= @organization.production_registered_organization.api_endpoint_ref %>\n+          </div>\n+          <h4>FHIR Endpoint</h4>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            Name: <%= @organization.production_fhir_endpoint.name %>\n+          </div>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            URI: <%= @organization.production_fhir_endpoint.uri %>\n+          </div>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            Status: <%= @organization.production_fhir_endpoint.status.titleize %>\n+          </div>\n+        <% else %>\n+          <%= link_to 'Enable Production', new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'production') %>\n+        <% end %>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.production_registered_organization.id,\n+          api_env: 'production'\n+          ) %>\n+        <%= link_to \"Disable Production\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.production_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-production' } %>\n+      <% else %>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzA4OTg0", "url": "https://github.com/CMSgov/dpc-app/pull/571#pullrequestreview-351708984", "createdAt": "2020-01-31T18:58:04Z", "commit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae311cbc43880d570b14ceef602e1e67718e97a", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/fae311cbc43880d570b14ceef602e1e67718e97a", "committedDate": "2020-01-31T19:20:48Z", "message": "More readable argument name and fixed html"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df34c9fd3231a34e94127d640d4d2e1fdf1d5f0", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/1df34c9fd3231a34e94127d640d4d2e1fdf1d5f0", "committedDate": "2020-01-31T19:34:41Z", "message": "Update flaky test for travis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d8cbd4ad70f2c1e2aadcd5b537d754ce386e9f", "author": {"user": null}, "url": "https://github.com/CMSgov/dpc-app/commit/b7d8cbd4ad70f2c1e2aadcd5b537d754ce386e9f", "committedDate": "2020-01-31T20:23:38Z", "message": "Fix time compare in test\n\nhttps://stackoverflow.com/questions/20403063/trouble-comparing-time-with-rspec"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 235, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}