{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzI2MTI1", "number": 571, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MFrODbsrOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjowOFrODcUm4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcwMTA2OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MFrOFjVUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MFrOFjVUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgxMQ==", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593811", "createdAt": "2020-01-29T19:45:40Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/organization.rb", "diffHunk": "@@ -3,23 +3,22 @@\n class Organization < ApplicationRecord\n   include OrganizationTypable\n \n-  has_one :address, as: :addressable\n+  has_one :address, as: :addressable, dependent: :destroy\n   has_many :organization_user_assignments, dependent: :destroy\n   has_many :users, through: :organization_user_assignments\n-  has_many :fhir_endpoints\n-  has_many :registered_organizations\n+  has_many :registered_organizations, dependent: :destroy\n \n   enum organization_type: ORGANIZATION_TYPES\n \n   validates :organization_type, inclusion: { in: ORGANIZATION_TYPES.keys }\n   validates :name, uniqueness: true, presence: true\n-  validate :api_environments_allowed\n   validates :npi, uniqueness: { allow_blank: true }\n \n   delegate :street, :street_2, :city, :state, :zip, to: :address, allow_nil: true, prefix: true\n-  accepts_nested_attributes_for :address, :fhir_endpoints, reject_if: :all_blank\n+  accepts_nested_attributes_for :address, reject_if: :all_blank\n \n-  after_save :update_registered_organizations\n+  # TODO update this", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcwMTExOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MFrOFjVUlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MFrOFjVUlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgxNQ==", "bodyText": "Use the return of the conditional for variable assignment and comparison.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593815", "createdAt": "2020-01-29T19:45:40Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -143,7 +143,11 @@ def http_request(request, uri)\n \n     response = http.request(request)\n     @response_status = response.code.to_i\n-    @response_body = parsed_response(response)\n+    if response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcwMTE1OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MVrOFjVUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MVrOFjVUnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgyMQ==", "bodyText": "Do not use space inside array brackets.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593821", "createdAt": "2020-01-29T19:45:41Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "diffHunk": "@@ -63,14 +63,14 @@ def address\n   end\n \n   def endpoint_resources\n-    object.fhir_endpoints.map { |fhir_endpoint| endpoint_resource(fhir_endpoint) }\n+    [ endpoint_resource(instance_options[:fhir_endpoint]) ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcwMTE4OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MVrOFjVUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0NTo0MVrOFjVUoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgyNA==", "bodyText": "Do not use space inside array brackets.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593824", "createdAt": "2020-01-29T19:45:41Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "diffHunk": "@@ -63,14 +63,14 @@ def address\n   end\n \n   def endpoint_resources\n-    object.fhir_endpoints.map { |fhir_endpoint| endpoint_resource(fhir_endpoint) }\n+    [ endpoint_resource(instance_options[:fhir_endpoint]) ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg0NDUyOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Mw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773263", "createdAt": "2020-01-30T06:08:07Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg0NDUzOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2NQ==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773265", "createdAt": "2020-01-30T06:08:07Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be registered with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg0NDU0OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowN1rOFjgRkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Ng==", "bodyText": "Align the elements of an array literal if they span more than one line.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773266", "createdAt": "2020-01-30T06:08:07Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg0NDU1OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowOFrOFjgRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowOFrOFjgRkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Nw==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773267", "createdAt": "2020-01-30T06:08:08Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg0NDU2OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowOFrOFjgRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjowODowOFrOFjgRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2OQ==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773269", "createdAt": "2020-01-30T06:08:08Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be registered with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcyMjc1OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyM1rOFj8Eag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxMDo0M1rOFkMdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1MA==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228650", "createdAt": "2020-01-30T22:29:23Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzE2Mg==", "bodyText": "Ignoring. There are enough differences. DRYing up the code would make it harder to understand.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373497162", "createdAt": "2020-01-31T14:10:43Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1MA=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcyMjc4OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyM1rOFj8Ebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyM1rOFj8Ebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1NA==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228654", "createdAt": "2020-01-30T22:29:23Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcyMjgxOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyM1rOFj8EcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyM1rOFj8EcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1Nw==", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228657", "createdAt": "2020-01-30T22:29:23Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (endpoint update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def delete_api_organization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcyMjgzOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyNFrOFj8Ecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyNFrOFj8Ecw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1OQ==", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228659", "createdAt": "2020-01-30T22:29:24Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzcyMjg1OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyNFrOFj8EdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoyOToyNFrOFj8EdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY2MQ==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228661", "createdAt": "2020-01-30T22:29:24Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (endpoint update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def delete_api_organization\n+    api_request = APIClient.new(api_env).delete_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTUzMzA2OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozNToxNlrOFkNNuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozNToxNlrOFkNNuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwOTU2Mw==", "bodyText": "Extra empty line detected before the rescue.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373509563", "createdAt": "2020-01-31T14:35:16Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -143,25 +148,18 @@ def http_request(request, uri)\n \n     response = http.request(request)\n     @response_status = response.code.to_i\n-    @response_body = parsed_response(response)\n+    @response_body = response_successful? ? parsed_response(response) : response.body\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTYwNzIzOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1NzoyOVrOFkN8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxOTozOVrOFkTxJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMTQ1Ng==", "bodyText": "@nickrobison-usds Does the API delete an org's endpoint when the org is deleted, or do we need to make an API call to do that from the web app?", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373521456", "createdAt": "2020-01-31T14:57:29Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,95 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO: do we need to delete api endpoint too?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjkzNA==", "bodyText": "Deleting an org removes all of its dependent resources (e.g. Providers, Patients, Endpoints, etc).", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373616934", "createdAt": "2020-01-31T18:19:39Z", "author": {"login": "nickrobison-usds"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,95 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO: do we need to delete api endpoint too?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMTQ1Ng=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTYxNDA0OnYy", "diffSide": "RIGHT", "path": "dpc-web/db/migrate/20200124204655_drop_index_from_fhir_endpoints.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OToxOFrOFkOAbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0MTo0OVrOFkUWzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjU0Mg==", "bodyText": "To discuss: What kind of data cleanup in sandbox should we do? Should we write a data migration to move FHIR Endpoints to belong to the registered_organization instead of the organization_id?", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373522542", "createdAt": "2020-01-31T14:59:18Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/db/migrate/20200124204655_drop_index_from_fhir_endpoints.rb", "diffHunk": "@@ -0,0 +1,6 @@\n+class DropIndexFromFhirEndpoints < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :fhir_endpoints, :organization_id, true\n+    remove_index :fhir_endpoints, :organization_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjU3NQ==", "bodyText": "Discussed synchronously: Because this is pretty instantaneous, small, and low-cost, let's do that data migration. Let's do this in two separate PRs.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373626575", "createdAt": "2020-01-31T18:41:49Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/db/migrate/20200124204655_drop_index_from_fhir_endpoints.rb", "diffHunk": "@@ -0,0 +1,6 @@\n+class DropIndexFromFhirEndpoints < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :fhir_endpoints, :organization_id, true\n+    remove_index :fhir_endpoints, :organization_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjU0Mg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTYxNjIwOnYy", "diffSide": "RIGHT", "path": "dpc-web/db/migrate/20200127141604_change_null_api_id_for_registered_organizations.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OTo1MVrOFkOBrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0MjowMlrOFkUXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjg2MQ==", "bodyText": "Should we go ahead and also remove the api_environments column from organizations now that we don't use it?", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373522861", "createdAt": "2020-01-31T14:59:51Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/db/migrate/20200127141604_change_null_api_id_for_registered_organizations.rb", "diffHunk": "@@ -0,0 +1,5 @@\n+class ChangeNullApiIdForRegisteredOrganizations < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :registered_organizations, :api_id, true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjY4Mw==", "bodyText": "Did this.", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373626683", "createdAt": "2020-01-31T18:42:02Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/db/migrate/20200127141604_change_null_api_id_for_registered_organizations.rb", "diffHunk": "@@ -0,0 +1,5 @@\n+class ChangeNullApiIdForRegisteredOrganizations < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :registered_organizations, :api_id, true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjg2MQ=="}, "originalCommit": null, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDI0MTc2OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/views/internal/organizations/show.html.erb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNTozM1rOFkUL0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNTozM1rOFkUL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzc2MQ==", "bodyText": "move this to next section (only show if prod has been enabled for this org)", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373623761", "createdAt": "2020-01-31T18:35:33Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/views/internal/organizations/show.html.erb", "diffHunk": "@@ -94,17 +94,76 @@\n \n <section class=\"box\">\n     <div class=\"box__content\">\n-      <h2 class=\"box__heading\">FHIR Endpoint</h2>\n-      <% @organization.fhir_endpoints.each do |fhir_endpoint| %>\n+      <h2 class=\"box__heading\">Enabled Environments</h2>\n+\n+      <h3>Sandbox</h3>\n+      <% if @organization.sandbox_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.sandbox_registered_organization.api_id %>\n+        </div>\n+        <h4>FHIR Endpoint</h4>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API Reference: <%= @organization.sandbox_registered_organization.api_endpoint_ref %>\n+        </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Name: <%= fhir_endpoint.name %>\n+          Name: <%= @organization.sandbox_fhir_endpoint.name %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          URI: <%= fhir_endpoint.uri %>\n+          URI: <%= @organization.sandbox_fhir_endpoint.uri %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Status: <%= fhir_endpoint.status.titleize %>\n+          Status: <%= @organization.sandbox_fhir_endpoint.status.titleize %>\n         </div>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          api_env: 'sandbox'\n+          ) %>\n+        <%= link_to \"Disable Sandbox\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-sandbox' } %>\n+      <% else %>\n+        <%= link_to 'Enable Sandbox',\n+                    new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'sandbox'),\n+                    data: { test: 'enable-sandbox' } %>\n+      <% end %>\n+\n+      <h3>Production</h3>\n+      <% if production_api_access_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.production_registered_organization.api_id %>\n+        </div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDI0MzUzOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/views/internal/organizations/show.html.erb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjowOFrOFkUM3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjowOFrOFkUM3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDAzMQ==", "bodyText": "Move these up to be in the if organization.production_enabled? section", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373624031", "createdAt": "2020-01-31T18:36:08Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/views/internal/organizations/show.html.erb", "diffHunk": "@@ -94,17 +94,76 @@\n \n <section class=\"box\">\n     <div class=\"box__content\">\n-      <h2 class=\"box__heading\">FHIR Endpoint</h2>\n-      <% @organization.fhir_endpoints.each do |fhir_endpoint| %>\n+      <h2 class=\"box__heading\">Enabled Environments</h2>\n+\n+      <h3>Sandbox</h3>\n+      <% if @organization.sandbox_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.sandbox_registered_organization.api_id %>\n+        </div>\n+        <h4>FHIR Endpoint</h4>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API Reference: <%= @organization.sandbox_registered_organization.api_endpoint_ref %>\n+        </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Name: <%= fhir_endpoint.name %>\n+          Name: <%= @organization.sandbox_fhir_endpoint.name %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          URI: <%= fhir_endpoint.uri %>\n+          URI: <%= @organization.sandbox_fhir_endpoint.uri %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Status: <%= fhir_endpoint.status.titleize %>\n+          Status: <%= @organization.sandbox_fhir_endpoint.status.titleize %>\n         </div>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          api_env: 'sandbox'\n+          ) %>\n+        <%= link_to \"Disable Sandbox\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-sandbox' } %>\n+      <% else %>\n+        <%= link_to 'Enable Sandbox',\n+                    new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'sandbox'),\n+                    data: { test: 'enable-sandbox' } %>\n+      <% end %>\n+\n+      <h3>Production</h3>\n+      <% if production_api_access_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.production_registered_organization.api_id %>\n+        </div>\n+        <% if @organization.production_enabled? %>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            API Reference: <%= @organization.production_registered_organization.api_endpoint_ref %>\n+          </div>\n+          <h4>FHIR Endpoint</h4>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            Name: <%= @organization.production_fhir_endpoint.name %>\n+          </div>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            URI: <%= @organization.production_fhir_endpoint.uri %>\n+          </div>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            Status: <%= @organization.production_fhir_endpoint.status.titleize %>\n+          </div>\n+        <% else %>\n+          <%= link_to 'Enable Production', new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'production') %>\n+        <% end %>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.production_registered_organization.id,\n+          api_env: 'production'\n+          ) %>\n+        <%= link_to \"Disable Production\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.production_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-production' } %>\n+      <% else %>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4959, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}