{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTQyMDQ4", "number": 753, "title": "DPC-25 Lookback in Aggregation Engine", "bodyText": "Why\nAlternative solution where look back is in aggregation engine. Instead of preventing a patient from being added to the roster, we instead check the request if the patient is associated with the provider and org through a roster. If they are associated, we then make a call to fetch that patient's EoB to determine if they have a claim within 18 months (which determines the eligibility of the provider fetching and saving a patient's data).\nWhat Changed\nAggregation engine changes to grab the EoB of the patient to be able to determine look back before processing the job. The consequence of this change is regardless of what resource types are exported, an additional call to BFD for EoB will be made for the sole purpose of look back determination.\nChoices Made\nRefactored the observables for reusability in the look back determination. Look back only needs the EoB resource and not actually saving that data, so refactoring the methods to be broken up into more atomic methods allow look back to only grab the data without also saving the data.\nTickets closed:\nhttps://jiraent.cms.gov/browse/DPC-25\nFuture Work\nList any additional tickets that have either been created due to work in this PR, or existing tickets that expand upon the feature or provide additional fixes.\nChecklist\n\n All tests are passing via make ci-app (app change) and make ci-web (website change)\n Swagger documentation has been updated\n FHIR documentation has been updated\n Any required dpc-ops changes have a PR submitted and mentioned in this ticket\n Any manual migration steps are documented, scripts written (where applicable), and tested\n Before merging, any required dpc-ops changes have been approved and merged into master of the dpc-ops repo", "createdAt": "2020-04-16T06:20:26Z", "url": "https://github.com/CMSgov/dpc-app/pull/753", "merged": true, "mergeCommit": {"oid": "997b8aa2996a8666cb188a36b5df5d1a9e4b180c"}, "closed": true, "closedAt": "2020-04-30T21:27:37Z", "author": {"login": "MrBilnon"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYGiu9AH2gAyNDA0MTQyMDQ4OjllM2NlZWViMjA1MTQ0MDZjMTc5ZjYyM2EyOGJjOTdhYzQ2MWQ5YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccyoh2gH2gAyNDA0MTQyMDQ4OmZjYjM4YjFkNTFiNzliNzA1ZTIzZjMyMjhmOTdlODM2NDZhZDhkYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e3ceeeb20514406c179f623a28bc97ac461d9bf", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/9e3ceeeb20514406c179f623a28bc97ac461d9bf", "committedDate": "2020-04-16T06:17:38Z", "message": "lookback in aggregation engine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a0e1d1b917bbfe98840c8329d653a6bbad9a76", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/20a0e1d1b917bbfe98840c8329d653a6bbad9a76", "committedDate": "2020-04-16T06:17:58Z", "message": "make existing tests pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a264beba5ea2d919ce04402af0f80250826491ab", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/a264beba5ea2d919ce04402af0f80250826491ab", "committedDate": "2020-04-16T06:24:14Z", "message": "clean up some variable names and commented out code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzQ5NDg0", "url": "https://github.com/CMSgov/dpc-app/pull/753#pullrequestreview-394749484", "createdAt": "2020-04-16T15:28:12Z", "commit": {"oid": "a264beba5ea2d919ce04402af0f80250826491ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyODoxMlrOGGq7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyODoxMlrOGGq7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0ODAyMQ==", "bodyText": "Would it be more flexible to pass in the Patient and Practitioner UUIDs so they don't have to be parsed out of the reference strings?", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r409648021", "createdAt": "2020-04-16T15:28:12Z", "author": {"login": "em1"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package gov.cms.dpc.aggregation.dao;\n+\n+import gov.cms.dpc.common.entities.*;\n+import gov.cms.dpc.common.hibernate.attribution.DPCManagedSessionFactory;\n+import gov.cms.dpc.fhir.FHIRExtractors;\n+import io.dropwizard.hibernate.AbstractDAO;\n+import org.hibernate.query.Query;\n+\n+import javax.inject.Inject;\n+import javax.persistence.criteria.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class RosterDAO extends AbstractDAO<RosterEntity> {\n+\n+    @Inject\n+    public RosterDAO(DPCManagedSessionFactory factory) {\n+        super(factory.getSessionFactory());\n+    }\n+\n+    public boolean withinRoster(UUID organizationID, String providerID, String patientReference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a264beba5ea2d919ce04402af0f80250826491ab"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542b778efa90b9dc816623f8614f5d0583d90015", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/542b778efa90b9dc816623f8614f5d0583d90015", "committedDate": "2020-04-16T21:05:51Z", "message": "renamed patientReference to patientMBIHash to reflect the actual thing being passed in, lookback no longer ignores operation outcome"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "816edae61d9a280a423d9816b83aa44adfd13275", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/816edae61d9a280a423d9816b83aa44adfd13275", "committedDate": "2020-04-18T00:40:17Z", "message": "retrieve providerID from roster, because job provides rosterID not providerID and update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c4ccfa42f3835ef68f98ddb0ed3cc049e12ff9", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/73c4ccfa42f3835ef68f98ddb0ed3cc049e12ff9", "committedDate": "2020-04-18T00:42:31Z", "message": "update lookback service and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83f7f6669b36b547f110d61452b2c31f31c17cd", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/f83f7f6669b36b547f110d61452b2c31f31c17cd", "committedDate": "2020-04-18T01:21:59Z", "message": "handle when the group resource passes in a rosterID and when the data service passes in a providerID to be able to find the roster when processing a job"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODY4Nzcx", "url": "https://github.com/CMSgov/dpc-app/pull/753#pullrequestreview-395868771", "createdAt": "2020-04-18T01:39:06Z", "commit": {"oid": "f83f7f6669b36b547f110d61452b2c31f31c17cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMTozOTowNlrOGHhjLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMTozOTowNlrOGHhjLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0Mjg5Mg==", "bodyText": "Method ambiguousIDPredicates has 5 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r410542892", "createdAt": "2020-04-18T01:39:06Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package gov.cms.dpc.aggregation.dao;\n+\n+import gov.cms.dpc.common.entities.*;\n+import gov.cms.dpc.common.hibernate.attribution.DPCManagedSessionFactory;\n+import io.dropwizard.hibernate.AbstractDAO;\n+import org.hibernate.query.Query;\n+\n+import javax.inject.Inject;\n+import javax.persistence.criteria.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class RosterDAO extends AbstractDAO<RosterEntity> {\n+\n+    @Inject\n+    public RosterDAO(DPCManagedSessionFactory factory) {\n+        super(factory.getSessionFactory());\n+    }\n+\n+    public UUID retrieveProviderIDFromRoster(UUID organizationID, UUID ambiguousID, String patientMBI) {\n+        // Build a selection query to get records from the database\n+        final CriteriaBuilder builder = currentSession().getCriteriaBuilder();\n+        final CriteriaQuery<UUID> query = builder.createQuery(UUID.class);\n+        final Root<RosterEntity> root = query.from(RosterEntity.class);\n+\n+        query.select(root.get(RosterEntity_.ATTRIBUTED_PROVIDER).get(ProviderEntity_.ID));\n+        query.where(ambiguousIDPredicates(builder, root, organizationID, ambiguousID, patientMBI).toArray(new Predicate[0]));\n+\n+\n+        Query<UUID> q = currentSession().createQuery(query);\n+        return q.getSingleResult();\n+    }\n+\n+    private List<Predicate> ambiguousIDPredicates(CriteriaBuilder builder, Root<RosterEntity> root, UUID organizationID, UUID ambiguousID, String patientMBI) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83f7f6669b36b547f110d61452b2c31f31c17cd"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b067d106d534305eed89f45bb525ad8e5613cf", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/a1b067d106d534305eed89f45bb525ad8e5613cf", "committedDate": "2020-04-19T21:41:17Z", "message": "trying to make code climate happy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDY2NjM2", "url": "https://github.com/CMSgov/dpc-app/pull/753#pullrequestreview-396066636", "createdAt": "2020-04-19T21:59:45Z", "commit": {"oid": "a1b067d106d534305eed89f45bb525ad8e5613cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMTo1OTo0NVrOGH9g4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMTo1OTo0NVrOGH9g4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTA1OA==", "bodyText": "Method bufferAndWrite has 5 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r411001058", "createdAt": "2020-04-19T21:59:45Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/JobBatchProcessor.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package gov.cms.dpc.aggregation.engine;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.Meter;\n+import com.codahale.metrics.MetricRegistry;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.common.utils.MetricMaker;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import io.reactivex.Flowable;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.reactivestreams.Publisher;\n+\n+import javax.inject.Inject;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class JobBatchProcessor {\n+\n+    private final BlueButtonClient bbclient;\n+    private final OperationsConfig operationsConfig;\n+    private final FhirContext fhirContext;\n+    private final Meter resourceMeter;\n+    private final Meter operationalOutcomeMeter;\n+\n+    @Inject\n+    public JobBatchProcessor(BlueButtonClient bbclient, FhirContext fhirContext, MetricRegistry metricRegistry, OperationsConfig operationsConfig) {\n+        this.bbclient = bbclient;\n+        this.fhirContext = fhirContext;\n+        this.operationsConfig = operationsConfig;\n+\n+        // Metrics\n+        final var metricFactory = new MetricMaker(metricRegistry, JobBatchProcessor.class);\n+        resourceMeter = metricFactory.registerMeter(\"resourceFetched\");\n+        operationalOutcomeMeter = metricFactory.registerMeter(\"operationalOutcomes\");\n+    }\n+\n+    /**\n+     * Processes a partial of a job batch. Marks the partial as completed upon processing\n+     *\n+     * @param job       - the job to process\n+     * @param patientID - The current patient id processing\n+     */\n+    public List<JobQueueBatchFile> processJobBatchPartial(UUID aggregatorID, IJobQueue queue, JobQueueBatch job, String patientID) {\n+        final var results = Flowable.fromIterable(job.getResourceTypes())\n+                .map(resourceType -> fetchResource(job, patientID, resourceType))\n+                .flatMap(result -> writeResource(job, result.getRight(), result.getLeft().flatMap(Flowable::fromIterable)))\n+                .toList()\n+                .blockingGet(); // Wait on the main thread until completion\n+        queue.completePartialBatch(job, aggregatorID);\n+        return results;\n+    }\n+\n+    /**\n+     * Fetch and write a specific resource type\n+     *\n+     * @param job          context\n+     * @param resourceType to process\n+     */\n+    public Pair<Flowable<List<Resource>>, ResourceType> fetchResource(JobQueueBatch job, String patientID, ResourceType resourceType) {\n+        // Make this flow hot (ie. only called once) when multiple subscribers attach\n+        final var fetcher = new ResourceFetcher(bbclient, job.getJobID(), job.getBatchID(), resourceType, operationsConfig);\n+        return Pair.of(fetcher.fetchResources(patientID), resourceType);\n+    }\n+\n+    private Flowable<JobQueueBatchFile> writeResource(JobQueueBatch job, ResourceType resourceType, Flowable<Resource> flow) {\n+        var connectableMixedFlow = flow.publish().autoConnect(2);\n+        // Batch the non-error resources into files\n+        final var resourceCount = new AtomicInteger();\n+        final var sequenceCount = new AtomicInteger();\n+        job.getJobQueueFileLatest(resourceType).ifPresent(file -> {\n+            resourceCount.set(file.getCount());\n+            sequenceCount.set(file.getSequence());\n+        });\n+        final var writer = new ResourceWriter(fhirContext, job, resourceType, operationsConfig);\n+        final Flowable<JobQueueBatchFile> resourceFlow = connectableMixedFlow.compose((upstream) -> bufferAndWrite(upstream, writer, resourceCount, sequenceCount, resourceMeter));\n+\n+        // Batch the error resources into files\n+        final var errorResourceCount = new AtomicInteger();\n+        final var errorSequenceCount = new AtomicInteger();\n+        job.getJobQueueFileLatest(ResourceType.OperationOutcome).ifPresent(file -> {\n+            errorResourceCount.set(file.getCount());\n+            errorSequenceCount.set(file.getSequence());\n+        });\n+        final var errorWriter = new ResourceWriter(fhirContext, job, ResourceType.OperationOutcome, operationsConfig);\n+        final Flowable<JobQueueBatchFile> outcomeFlow = connectableMixedFlow.compose((upstream) -> bufferAndWrite(upstream, errorWriter, errorResourceCount, errorSequenceCount, operationalOutcomeMeter));\n+\n+        // Merge the resultant flows\n+        return resourceFlow.mergeWith(outcomeFlow);\n+    }\n+\n+    /**\n+     * This part of the flow chain buffers resources and writes them in batches to a file\n+     *\n+     * @param writer        - the writer to use\n+     * @param resourceCount - the number of resources in the current file\n+     * @param sequenceCount - the sequence counter\n+     * @param meter         - a meter on the number of resources\n+     * @return a transformed flow\n+     */\n+    private Publisher<JobQueueBatchFile> bufferAndWrite(Flowable<Resource> upstream, ResourceWriter writer, AtomicInteger resourceCount, AtomicInteger sequenceCount, Meter meter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b067d106d534305eed89f45bb525ad8e5613cf"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd1e4e2f2065017ed7e07deeca106c003b1ebd6", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/9bd1e4e2f2065017ed7e07deeca106c003b1ebd6", "committedDate": "2020-04-19T22:10:20Z", "message": "code climate please be happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f15e65023d8ac628d5d8b8dad76beb125f9f6ede", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/f15e65023d8ac628d5d8b8dad76beb125f9f6ede", "committedDate": "2020-04-20T06:18:27Z", "message": "Merge branch 'master' into DPC-25-Lookback-alternative"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7613f359e03d237ff61d0857e53271fcd776bf88", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/7613f359e03d237ff61d0857e53271fcd776bf88", "committedDate": "2020-04-20T15:32:51Z", "message": "add java docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c28dc2abfd3edba29bd829d7c2cde3b5eabb1969", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/c28dc2abfd3edba29bd829d7c2cde3b5eabb1969", "committedDate": "2020-04-20T15:33:01Z", "message": "Merge remote-tracking branch 'origin/DPC-25-Lookback-alternative' into DPC-25-Lookback-alternative"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62680c53cdb8c4d60269b1daaff90d36ce6e874e", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/62680c53cdb8c4d60269b1daaff90d36ce6e874e", "committedDate": "2020-04-24T01:47:01Z", "message": "Merge branch 'master' into DPC-25-Lookback-alternative\n\n# Conflicts:\n#\tdpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java\n#\tdpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java\n#\tdpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java\n#\tsrc/test/EndToEndRequestTest.postman_collection.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjM1MjM0", "url": "https://github.com/CMSgov/dpc-app/pull/753#pullrequestreview-399635234", "createdAt": "2020-04-24T04:41:53Z", "commit": {"oid": "62680c53cdb8c4d60269b1daaff90d36ce6e874e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo0MTo1NFrOGLGINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDo0MTo1NFrOGLGINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4NzkyNw==", "bodyText": "If we know for sure the ID is a rosterID, do we need to go to the trouble of using an ambiguousID parameter to getProviderIDFromRoster()?  Why not call it rosterID?", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r414287927", "createdAt": "2020-04-24T04:41:54Z", "author": {"login": "dhgreene"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -195,12 +177,38 @@ protected void processJobBatch(JobQueueBatch job) {\n         }\n     }\n \n+    private Optional<String> processPatient(JobQueueBatch job, String patientId) {\n+        if (isValidLookBack(job, patientId)) {\n+            jobBatchProcessor.processJobBatchPartial(aggregatorID, queue, job, patientId);\n+        }\n+        // Stop processing when no patients or early shutdown\n+        return this.isRunning() ? job.fetchNextPatient(aggregatorID) : Optional.empty();\n+    }\n+\n+    private boolean isValidLookBack(JobQueueBatch job, String patientId) {\n+        boolean result = false;\n+        //job.getProviderID is really not providerID, it is the rosterID, see createJob in GroupResource export for confirmation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62680c53cdb8c4d60269b1daaff90d36ce6e874e"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f7661f6299b6614e885cb2c14aa02a66d417c6", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/55f7661f6299b6614e885cb2c14aa02a66d417c6", "committedDate": "2020-04-24T17:36:38Z", "message": "rename variable and method to be clearer on what IDs it's operating on"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ae8149a93c555a2b5504538c016d4cbdf9ee3e", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/e6ae8149a93c555a2b5504538c016d4cbdf9ee3e", "committedDate": "2020-04-24T17:36:53Z", "message": "add mechanism to skip look back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ee4e99dd2d55f357663ca670a4acc560cd1c9f", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/47ee4e99dd2d55f357663ca670a4acc560cd1c9f", "committedDate": "2020-04-27T01:03:20Z", "message": "look back should not be limited by since date"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjY0MzQw", "url": "https://github.com/CMSgov/dpc-app/pull/753#pullrequestreview-401264340", "createdAt": "2020-04-27T19:34:06Z", "commit": {"oid": "47ee4e99dd2d55f357663ca670a4acc560cd1c9f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12ec1aed424a3caeaced182835e73bdc0f617f7c", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/12ec1aed424a3caeaced182835e73bdc0f617f7c", "committedDate": "2020-04-29T04:40:00Z", "message": "disable lookback for prod-sbx, test, dev"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba1f9dfac6c8c22b4cf76d202520564be993fed", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/dba1f9dfac6c8c22b4cf76d202520564be993fed", "committedDate": "2020-04-30T06:48:03Z", "message": "Merge branch 'master' into DPC-25-Lookback-alternative"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68506c3b1ee1c35f4be1128281c1474218da4de2", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/68506c3b1ee1c35f4be1128281c1474218da4de2", "committedDate": "2020-04-30T15:35:31Z", "message": "Merge branch 'master' into DPC-25-Lookback-alternative"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4d0d0f95bf9a1fd36424b22742e207f558a124", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/cb4d0d0f95bf9a1fd36424b22742e207f558a124", "committedDate": "2020-04-30T15:51:27Z", "message": "move test to appropriate package and rename test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abc50d4d327f5ae836239ab69767f5037ddd9e49", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/abc50d4d327f5ae836239ab69767f5037ddd9e49", "committedDate": "2020-04-30T15:51:41Z", "message": "Create test for EveryoneGetsDataLookBackServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33ef342447029b3f538e535a6cb3949c854653fc", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/33ef342447029b3f538e535a6cb3949c854653fc", "committedDate": "2020-04-30T15:56:13Z", "message": "Merge branch 'DPC-25-Lookback-alternative' of https://github.com/CMSgov/dpc-app into DPC-25-Lookback-alternative"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb38b1d51b79b705e23f3228f97e83646ad8daa", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/fcb38b1d51b79b705e23f3228f97e83646ad8daa", "committedDate": "2020-04-30T19:55:29Z", "message": "Merge branch 'master' into DPC-25-Lookback-alternative"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 104, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}