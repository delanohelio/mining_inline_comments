{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNDY4NTA1", "number": 1057, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0MjoxM1rOEmsB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0ODoxOVrOEmsKxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDAyNzEzOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/main.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0MjoxM1rOHW3WjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0MjoxM1rOHW3WjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNzYxMg==", "bodyText": "I like the nextKeyID func!", "url": "https://github.com/CMSgov/dpc-app/pull/1057#discussion_r493737612", "createdAt": "2020-09-23T16:42:13Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/main.go", "diffHunk": "@@ -46,6 +49,71 @@ func testMetadata() {\n \trunTest(getMetadataTarget, 5, 5)\n }\n \n+func testKeyEndpoints(accessToken string) {\n+\n+\tresps := runTestWithTargeter(fmt.Sprintf(\"POST %s/Key\", apiURL), newPOSTKeyTargeter(accessToken), 5, 5)\n+\tfor _, resp := range resps {\n+\t\tvar result Resource\n+\t\tjson.Unmarshal(resp, &result)\n+\t\tkeyIDs = append(keyIDs, result.ID)\n+\t}\n+\n+\tgetKeysTarget := vegeta.Target{\n+\t\tMethod: \"GET\",\n+\t\tURL:    fmt.Sprintf(\"%s%s\", apiURL, \"/Key\"),\n+\t\tHeader: map[string][]string{\n+\t\t\t\"Accept\":        {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t},\n+\t}\n+\trunTest(getKeysTarget, 5, 5)\n+\n+\tgetKeyTarget := vegeta.Target{\n+\t\tMethod: \"GET\",\n+\t\tURL:    fmt.Sprintf(\"%s%s%s\", apiURL, \"/Key/\", keyIDs[0]),\n+\t\tHeader: map[string][]string{\n+\t\t\t\"Accept\":        {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t},\n+\t}\n+\trunTest(getKeyTarget, 5, 5)\n+\n+\tdeleteKeyTargeter := newDELETEKeyTargeter(accessToken, func() string {\n+\t\tkeyID := keyIDs[0]\n+\t\tkeyIDs = keyIDs[1:]\n+\t\treturn keyID\n+\t})\n+\trunTestWithTargeter(fmt.Sprintf(\"DELETE %s/Key/{id}\", apiURL), deleteKeyTargeter, 5, 5)\n+}\n+\n+func newPOSTKeyTargeter(accessToken string) vegeta.Targeter {\n+\treturn func(t *vegeta.Target) error {\n+\t\tt.Method = \"POST\"\n+\t\tt.URL = fmt.Sprintf(\"%s/Key\", apiURL)\n+\t\tt.Header = map[string][]string{\n+\t\t\t\"Content-Type\":  {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t}\n+\n+\t\tpubKeyStr, _, signature := generateKeyPairAndSignature()\n+\t\tbody := fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)\n+\t\tt.Body = []byte(body)\n+\n+\t\treturn nil\n+\t}\n+}\n+\n+func newDELETEKeyTargeter(accessToken string, nextKeyID func() string) vegeta.Targeter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a326d83e68da3c8a9fc64daea6c1ef3781553d00"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDA0OTk3OnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/setup.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0ODoxOVrOHW3kyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoxNzo0OVrOHW4rzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTI1OA==", "bodyText": "Is this change an artifact from troubleshooting the intermittent signature bug, or is it helpful in another way?", "url": "https://github.com/CMSgov/dpc-app/pull/1057#discussion_r493741258", "createdAt": "2020-09-23T16:48:19Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/setup.go", "diffHunk": "@@ -91,7 +91,7 @@ func getKeyPairAndSignature() (string, *rsa.PrivateKey, string) {\n \t\tcleanAndPanic(err)\n \t}\n \n-\tsignature, err := privKey.Sign(rand.Reader, snippetHash.Sum(nil), crypto.SHA256)\n+\tsignature, err := rsa.SignPKCS1v15(rand.Reader, privKey, crypto.SHA256, snippetHash.Sum(nil))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a326d83e68da3c8a9fc64daea6c1ef3781553d00"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1OTQzNw==", "bodyText": "It is indeed the result of troubleshooting. Turns out rsa.SignPKCS1v15() is what PrivateKey.Sign() calls if you don't specify, so it didn't make any difference, but I figured it made sense to call it directly. https://golang.org/src/crypto/rsa/rsa.go?s=4735:4794#L136", "url": "https://github.com/CMSgov/dpc-app/pull/1057#discussion_r493759437", "createdAt": "2020-09-23T17:17:49Z", "author": {"login": "em1"}, "path": "dpc-testing/performance/setup.go", "diffHunk": "@@ -91,7 +91,7 @@ func getKeyPairAndSignature() (string, *rsa.PrivateKey, string) {\n \t\tcleanAndPanic(err)\n \t}\n \n-\tsignature, err := privKey.Sign(rand.Reader, snippetHash.Sum(nil), crypto.SHA256)\n+\tsignature, err := rsa.SignPKCS1v15(rand.Reader, privKey, crypto.SHA256, snippetHash.Sum(nil))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTI1OA=="}, "originalCommit": {"oid": "a326d83e68da3c8a9fc64daea6c1ef3781553d00"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 87, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}