{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0OTM0ODkw", "number": 1091, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToyNDowOFrOEvmmbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToyNDowOFrOEvmmbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzUwOTU4OnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToyNDowOFrOHkrGDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1ODo0MlrOHlIEzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNjg0Ng==", "bodyText": "I feel like this check should also be in the checkRequestHeaders method", "url": "https://github.com/CMSgov/dpc-app/pull/1091#discussion_r508216846", "createdAt": "2020-10-20T05:24:08Z", "author": {"login": "MrBilnon"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -268,15 +273,25 @@ public Response export(@ApiParam(hidden = true)\n                            @PathParam(\"rosterID\") @NoHtml String rosterID,\n                            @ApiParam(value = \"List of FHIR resources to export\", allowableValues = \"ExplanationOfBenefits, Coverage, Patient\")\n                            @QueryParam(\"_type\") @NoHtml String resourceTypes,\n-                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON , defaultValue = FHIR_NDJSON)\n+                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON, defaultValue = FHIR_NDJSON)\n                            @QueryParam(\"_outputFormat\") @NoHtml String outputFormat,\n                            @ApiParam(value = \"Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\")\n                            @QueryParam(\"_since\") @NoHtml String since,\n-                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\")  @Valid String Prefer) {\n+                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\") @Valid String prefer,\n+                           @ApiParam(hidden = true) @HeaderParam(\"Accept\") @Valid String accept) {\n         logger.info(\"Exporting data for provider: {} _since: {}\", rosterID, since);\n \n         // Check the parameters\n-        checkExportRequest(outputFormat, Prefer);\n+        Map<String, String> headers = Stream.of(Pair.of(\"Prefer\", prefer), Pair.of(\"Accept\", accept))\n+                .peek(header -> {\n+                    if (header.getRight() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddb677d32fa9efba5ce93ec5664bc7698f5dca53"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUwMTcxMQ==", "bodyText": "Initially it was, but it needs to be here in order to get rid of any null values before creating the Map since the Map does not allow a null to be set as a value. The point of this line of code is to build up a map of headers that can be passed down to the verification methods instead of multiple strings.", "url": "https://github.com/CMSgov/dpc-app/pull/1091#discussion_r508501711", "createdAt": "2020-10-20T13:28:15Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -268,15 +273,25 @@ public Response export(@ApiParam(hidden = true)\n                            @PathParam(\"rosterID\") @NoHtml String rosterID,\n                            @ApiParam(value = \"List of FHIR resources to export\", allowableValues = \"ExplanationOfBenefits, Coverage, Patient\")\n                            @QueryParam(\"_type\") @NoHtml String resourceTypes,\n-                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON , defaultValue = FHIR_NDJSON)\n+                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON, defaultValue = FHIR_NDJSON)\n                            @QueryParam(\"_outputFormat\") @NoHtml String outputFormat,\n                            @ApiParam(value = \"Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\")\n                            @QueryParam(\"_since\") @NoHtml String since,\n-                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\")  @Valid String Prefer) {\n+                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\") @Valid String prefer,\n+                           @ApiParam(hidden = true) @HeaderParam(\"Accept\") @Valid String accept) {\n         logger.info(\"Exporting data for provider: {} _since: {}\", rosterID, since);\n \n         // Check the parameters\n-        checkExportRequest(outputFormat, Prefer);\n+        Map<String, String> headers = Stream.of(Pair.of(\"Prefer\", prefer), Pair.of(\"Accept\", accept))\n+                .peek(header -> {\n+                    if (header.getRight() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNjg0Ng=="}, "originalCommit": {"oid": "ddb677d32fa9efba5ce93ec5664bc7698f5dca53"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NjUwMA==", "bodyText": "ah I see.. maybe filter out the nulls instead and then do a check on an empty map or missing key in the checkRequestHeaders?  Sorry, just seeing if there is a way to contain the BadRequestException to the check methods.", "url": "https://github.com/CMSgov/dpc-app/pull/1091#discussion_r508576500", "createdAt": "2020-10-20T14:50:34Z", "author": {"login": "MrBilnon"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -268,15 +273,25 @@ public Response export(@ApiParam(hidden = true)\n                            @PathParam(\"rosterID\") @NoHtml String rosterID,\n                            @ApiParam(value = \"List of FHIR resources to export\", allowableValues = \"ExplanationOfBenefits, Coverage, Patient\")\n                            @QueryParam(\"_type\") @NoHtml String resourceTypes,\n-                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON , defaultValue = FHIR_NDJSON)\n+                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON, defaultValue = FHIR_NDJSON)\n                            @QueryParam(\"_outputFormat\") @NoHtml String outputFormat,\n                            @ApiParam(value = \"Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\")\n                            @QueryParam(\"_since\") @NoHtml String since,\n-                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\")  @Valid String Prefer) {\n+                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\") @Valid String prefer,\n+                           @ApiParam(hidden = true) @HeaderParam(\"Accept\") @Valid String accept) {\n         logger.info(\"Exporting data for provider: {} _since: {}\", rosterID, since);\n \n         // Check the parameters\n-        checkExportRequest(outputFormat, Prefer);\n+        Map<String, String> headers = Stream.of(Pair.of(\"Prefer\", prefer), Pair.of(\"Accept\", accept))\n+                .peek(header -> {\n+                    if (header.getRight() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNjg0Ng=="}, "originalCommit": {"oid": "ddb677d32fa9efba5ce93ec5664bc7698f5dca53"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NDkwOQ==", "bodyText": "I appreciate the suggestions. I'll look into that. I considered that approach as well, but I ran into the issue of losing track of which header value was for which header in the Map, which was necessary in order to give the proper error message.", "url": "https://github.com/CMSgov/dpc-app/pull/1091#discussion_r508644909", "createdAt": "2020-10-20T15:57:35Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -268,15 +273,25 @@ public Response export(@ApiParam(hidden = true)\n                            @PathParam(\"rosterID\") @NoHtml String rosterID,\n                            @ApiParam(value = \"List of FHIR resources to export\", allowableValues = \"ExplanationOfBenefits, Coverage, Patient\")\n                            @QueryParam(\"_type\") @NoHtml String resourceTypes,\n-                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON , defaultValue = FHIR_NDJSON)\n+                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON, defaultValue = FHIR_NDJSON)\n                            @QueryParam(\"_outputFormat\") @NoHtml String outputFormat,\n                            @ApiParam(value = \"Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\")\n                            @QueryParam(\"_since\") @NoHtml String since,\n-                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\")  @Valid String Prefer) {\n+                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\") @Valid String prefer,\n+                           @ApiParam(hidden = true) @HeaderParam(\"Accept\") @Valid String accept) {\n         logger.info(\"Exporting data for provider: {} _since: {}\", rosterID, since);\n \n         // Check the parameters\n-        checkExportRequest(outputFormat, Prefer);\n+        Map<String, String> headers = Stream.of(Pair.of(\"Prefer\", prefer), Pair.of(\"Accept\", accept))\n+                .peek(header -> {\n+                    if (header.getRight() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNjg0Ng=="}, "originalCommit": {"oid": "ddb677d32fa9efba5ce93ec5664bc7698f5dca53"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTY2Mw==", "bodyText": "You can add @DefaultValue(\"\") to each header and that will handle any NPE, but you would still need to build the map.\nIt looks like there are only two headers at the moment, so we could just pass those two as arguments without a map.\nAnother option that we can use if we ever need more headers is to use @Context HttpHeaders headers,\nthis will give you a nice way to manage multiple headers without having to explicitly specify each header in the method signature.", "url": "https://github.com/CMSgov/dpc-app/pull/1091#discussion_r508691663", "createdAt": "2020-10-20T16:58:42Z", "author": {"login": "MrMorie"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -268,15 +273,25 @@ public Response export(@ApiParam(hidden = true)\n                            @PathParam(\"rosterID\") @NoHtml String rosterID,\n                            @ApiParam(value = \"List of FHIR resources to export\", allowableValues = \"ExplanationOfBenefits, Coverage, Patient\")\n                            @QueryParam(\"_type\") @NoHtml String resourceTypes,\n-                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON , defaultValue = FHIR_NDJSON)\n+                           @ApiParam(value = \"Output format of requested data\", allowableValues = FHIR_NDJSON, defaultValue = FHIR_NDJSON)\n                            @QueryParam(\"_outputFormat\") @NoHtml String outputFormat,\n                            @ApiParam(value = \"Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\")\n                            @QueryParam(\"_since\") @NoHtml String since,\n-                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\")  @Valid String Prefer) {\n+                           @ApiParam(hidden = true) @HeaderParam(\"Prefer\") @Valid String prefer,\n+                           @ApiParam(hidden = true) @HeaderParam(\"Accept\") @Valid String accept) {\n         logger.info(\"Exporting data for provider: {} _since: {}\", rosterID, since);\n \n         // Check the parameters\n-        checkExportRequest(outputFormat, Prefer);\n+        Map<String, String> headers = Stream.of(Pair.of(\"Prefer\", prefer), Pair.of(\"Accept\", accept))\n+                .peek(header -> {\n+                    if (header.getRight() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNjg0Ng=="}, "originalCommit": {"oid": "ddb677d32fa9efba5ce93ec5664bc7698f5dca53"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}