{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzY1MTcx", "number": 710, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNDowN1rODray5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNDowN1rODray5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU0MzcyOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/DataResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNDowN1rOF7wXpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxNDowN1rOF7wXpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjc5MA==", "bodyText": "Remove this expression which always evaluates to \"true\"", "url": "https://github.com/CMSgov/dpc-app/pull/710#discussion_r398202790", "createdAt": "2020-03-25T22:14:07Z", "author": {"login": "codeclimate"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/DataResource.java", "diffHunk": "@@ -187,24 +187,36 @@ private Response buildRangedRequest(String fileID, File file, RangeHeader range)\n             throw new WebApplicationException(\"Range end cannot be before begin\", Response.Status.REQUESTED_RANGE_NOT_SATISFIABLE);\n         }\n \n+        RandomAccessFile randomAccessFile = null;\n         try {\n-            final RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");\n-            randomAccessFile.seek(rangeStart);\n-\n-            final PartialFileStreamer fileStreamer = new PartialFileStreamer((int) len, randomAccessFile);\n-\n-            final String responseRange = String.format(\"bytes %d-%d/%d\", rangeStart, rangeEnd, file.length());\n-            return Response\n-                    .status(Response.Status.PARTIAL_CONTENT)\n-                    .entity(fileStreamer)\n-                    .header(HttpHeaders.ACCEPT_RANGES, ACCEPTED_RANGE_VALUE)\n-                    .header(HttpHeaders.CONTENT_RANGE, responseRange)\n-                    // Set the X-Content-Length header, so we can manually override what Jersey does\n-                    .header(X_CONTENT_LENGTH, fileStreamer.getLength())\n-                    .build();\n+            randomAccessFile = new RandomAccessFile(file, \"r\");\n         } catch (IOException e) {\n             throw new WebApplicationException(String.format(\"Unable to open file `%s`.`.\", fileID), e, Response.Status.INTERNAL_SERVER_ERROR);\n         }\n+        try {\n+            randomAccessFile.seek(rangeStart);\n+        } catch (IOException e) {\n+            try {\n+                if (randomAccessFile != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4922, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}