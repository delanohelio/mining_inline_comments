{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjUyMTc2", "number": 1144, "title": "DPC-953 Prohibit orgs from adding another orgs patient to their group.", "bodyText": "Fixes DPC-953\nIssue: Organizations could add another org's patient to their group during group creation (if they guessed their patient's UUID), update and with the $add operation\nDuring implementation it was also discovered that a method using @Auth AND @PathAuthorizer would ignore the @PathAuthorizer and not perform path authentication (just regular auth). This new issue was fixed in this PR since it was required in order to implement the original fix.\nCause of org being able to add another org's patient:\n\nAttribution only checked for a patients existence, it did not verify that the patient belonged to the org.\n\nCause of @PathAuthorizer being ignored when used with @Auth:\n\nWe have 2 Authorizers:  the StandardAuthorizer and PathAuthorizer\nDPCAuthDynamicFeature.java determined what authorizer to use, if method contained @Auth the StandardAuthorizer was used, if it contained @PathAuthorizer the PathAuthorizer was used.\n@Auth came first in the list, if it was found it would use its authorizer and return, and never checked for @PathAuthorizer.\n\n\nProposed Changes\n\nIn attribution: check if a patient belongs to the org before adding them to group.\n@Auth should be used to inject the authenticated principal regardless of what authorizer is used; it should not be used to determine what authorizer to use.\nIntroduce new security annotation \"Authorizer\" to specify the use of the regular authorizer, allowing the @Auth param to be used solely for its intended purpose (Injecting the principal).\nResolution\n\n\nChange Details\n\nVerified patients in group by searching by UUID and Org id instead of just looking up by UUID.\nAdded org tag to group before making request to attribution (required to extract org id in attribution)\nCreated new @Authorizer annotation, and added the annotation to any method requiring standard authentication\nre-arranged order of authorizer selection in DPCAuthDynamicFeature.java from most to least restrictive.\nAdded integration tests\n\n\nSecurity Implications\n\n\n new software dependencies\n\n\n\n security controls or supporting software altered\n\n\n\n new data stored or transmitted\n\n\n\n security checklist is completed for this change\n\n\n\n requires more information or team discussion to evaluate security implications\n\n\n\n no PHI/PII is affected by this change\n\n\nAcceptance Validation\n\nLocally make-ci app and smoke tests\n\nFeedback Requested\nthoughts on new auth changes?", "createdAt": "2020-12-16T15:36:24Z", "url": "https://github.com/CMSgov/dpc-app/pull/1144", "merged": true, "mergeCommit": {"oid": "331da8399abb518db510b6ad2974a2003691713d"}, "closed": true, "closedAt": "2020-12-18T20:53:32Z", "author": {"login": "MrMorie"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmwuN-gH2gAyNTQxMjUyMTc2OjkzZTAzNTNiZmJkMWFhOGNjZDgzOGZhYTZiZGM0MTc4Y2VjODM5MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdneeZTAFqTU1NTgwNTYwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93e0353bfbd1aa8ccd838faa6bdc4178cec83919", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/93e0353bfbd1aa8ccd838faa6bdc4178cec83919", "committedDate": "2020-12-16T15:32:17Z", "message": "Checked if patient belongs to org before adding to group. Introduced Authorized annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a7a7e25a13fededde61c5afe097c796b61b5a0", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/72a7a7e25a13fededde61c5afe097c796b61b5a0", "committedDate": "2020-12-16T15:33:04Z", "message": "Merge branch 'master' of https://github.com/CMSgov/dpc-app into sg/DPC-953-Prohibit-adding-another-orgs-patient-to-group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be68ed02ecd90f06d450d6c79590a1147ac8fbea", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/be68ed02ecd90f06d450d6c79590a1147ac8fbea", "committedDate": "2020-12-16T16:22:06Z", "message": "Reverted back annotation name to PathAuthorizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c80712cde702a70ab252ca5254075c5613b61ccc", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/c80712cde702a70ab252ca5254075c5613b61ccc", "committedDate": "2020-12-16T19:32:35Z", "message": "Refactored integration tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0544735c40e052c3bf553f2c30644198e4031d", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/ed0544735c40e052c3bf553f2c30644198e4031d", "committedDate": "2020-12-16T19:51:36Z", "message": "fixed typo in patient resource test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a436de2539f5cd8e5a73dcd7bc83af5a43ebc1c9", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/a436de2539f5cd8e5a73dcd7bc83af5a43ebc1c9", "committedDate": "2020-12-16T20:17:21Z", "message": "refacored group resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "684f4eeb9474b42134c69d7977f9b172f928d72c", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/684f4eeb9474b42134c69d7977f9b172f928d72c", "committedDate": "2020-12-16T20:17:50Z", "message": "Merge branch 'master' into sg/DPC-953-Prohibit-adding-another-orgs-patient-to-group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "997246c51abf30b7dbb9c9af3fce290710caab40", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/997246c51abf30b7dbb9c9af3fce290710caab40", "committedDate": "2020-12-17T18:54:14Z", "message": "Re-ordered anotations in AuthDynamicFeature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c43f3e565185dd6b300a9bcff982db630486a64b", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/c43f3e565185dd6b300a9bcff982db630486a64b", "committedDate": "2020-12-17T18:57:03Z", "message": "Removed unused code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTI2NjQ0", "url": "https://github.com/CMSgov/dpc-app/pull/1144#pullrequestreview-554926644", "createdAt": "2020-12-17T19:37:15Z", "commit": {"oid": "c43f3e565185dd6b300a9bcff982db630486a64b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTM3Njc0", "url": "https://github.com/CMSgov/dpc-app/pull/1144#pullrequestreview-554937674", "createdAt": "2020-12-17T19:52:39Z", "commit": {"oid": "c43f3e565185dd6b300a9bcff982db630486a64b"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo1Mjo0MFrOIIGQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo1Mjo0MFrOIIGQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM2MTk0Ng==", "bodyText": "Should this be Authorizer and PathAuthorizer?", "url": "https://github.com/CMSgov/dpc-app/pull/1144#discussion_r545361946", "createdAt": "2020-12-17T19:52:40Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/test/java/gov/cms/dpc/api/APIResourceAnnotationTest.java", "diffHunk": "@@ -82,28 +81,13 @@ void allResourcesHaveSecurityAnnotations() {\n \n     /**\n      * Asserts that the method has valid auth-annotations\n-     * To pass, the method must either have a parameter with an Auth or a PathAuthorizer or Public annotation on the method\n+     * To pass, the method must either have a parameter with an Authorized, PathAuthorized, or Public annotation on the method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43f3e565185dd6b300a9bcff982db630486a64b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75e3bc55d5c75ca27ef729009d37a985552eacc0", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/75e3bc55d5c75ca27ef729009d37a985552eacc0", "committedDate": "2020-12-18T08:34:27Z", "message": "Added some unit tests for group resource."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTM4MTc0", "url": "https://github.com/CMSgov/dpc-app/pull/1144#pullrequestreview-555538174", "createdAt": "2020-12-18T14:32:41Z", "commit": {"oid": "75e3bc55d5c75ca27ef729009d37a985552eacc0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozMjo0MVrOIIlG5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozMjo0MVrOIIlG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2NzQ5NQ==", "bodyText": "You can try one of those regex to string generators https://github.com/curious-odd-man/RgxGen", "url": "https://github.com/CMSgov/dpc-app/pull/1144#discussion_r545867495", "createdAt": "2020-12-18T14:32:41Z", "author": {"login": "MrBilnon"}, "path": "dpc-attribution/src/test/java/gov/cms/dpc/attribution/resources/v1/GroupResourceUnitTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package gov.cms.dpc.attribution.resources.v1;\n+\n+import com.google.common.collect.Maps;\n+import gov.cms.dpc.attribution.DPCAttributionConfiguration;\n+import gov.cms.dpc.attribution.jdbi.*;\n+import gov.cms.dpc.common.entities.PatientEntity;\n+import gov.cms.dpc.common.entities.ProviderEntity;\n+import gov.cms.dpc.common.entities.RosterEntity;\n+import gov.cms.dpc.common.utils.NPIUtil;\n+import gov.cms.dpc.fhir.converters.FHIREntityConverter;\n+import gov.cms.dpc.testing.factories.FHIRGroupBuilder;\n+import gov.cms.dpc.testing.factories.FHIRPatientBuilder;\n+import org.assertj.core.util.Lists;\n+import org.hl7.fhir.dstu3.model.Group;\n+import org.hl7.fhir.dstu3.model.Patient;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Response;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+\n+public class GroupResourceUnitTest {\n+\n+    private GroupResource groupResource;\n+\n+    @Mock\n+    OrganizationDAO mockOrganizationDao;\n+\n+    @Mock\n+    EndpointDAO mockEndpointDao;\n+\n+    @Mock\n+    ProviderDAO providerDAO;\n+\n+    @Mock\n+    PatientDAO patientDAO;\n+\n+    @Mock\n+    RosterDAO rosterDAO;\n+\n+    @Mock\n+    RelationshipDAO relationshipDAO;\n+\n+    private DPCAttributionConfiguration configuration;\n+\n+    private FHIREntityConverter converter = FHIREntityConverter.initialize();\n+\n+\n+    @BeforeEach\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        configuration = new DPCAttributionConfiguration();\n+        groupResource = new GroupResource(converter, providerDAO, rosterDAO, patientDAO, relationshipDAO, configuration);\n+    }\n+\n+\n+    @Test\n+    public void testCreateRosterHappyCase(){\n+        //Arrange\n+        final UUID orgId = UUID.randomUUID();\n+        final String providerNpi = NPIUtil.generateNPI();\n+\n+        final Map<UUID,Patient> patientBank = makeTestPatients(5, orgId);\n+\n+        final Group group = FHIRGroupBuilder\n+                .newBuild()\n+                .attributedTo(providerNpi)\n+                .withPatients(patientBank.keySet().toArray(UUID[]::new))\n+                .withOrgTag(orgId)\n+                .build();\n+\n+        configuration.setPatientLimit(10);\n+        configuration.setExpirationThreshold(10);\n+        Mockito.when(rosterDAO.findEntities(isNull(),eq(orgId), eq(providerNpi), isNull())).thenReturn(Lists.emptyList());\n+        Mockito.when(providerDAO.getProviders(isNull(),eq(providerNpi), eq(orgId))).thenReturn(List.of(new ProviderEntity()));\n+        patientBank.keySet().stream().forEach(patientId ->\n+                Mockito.when(patientDAO.patientSearch(eq(patientId), isNull(),eq(orgId))).thenReturn(List.of(new PatientEntity())));\n+\n+        Mockito.when(rosterDAO.persistEntity(any(RosterEntity.class))).thenAnswer(invocation -> invocation.getArguments()[0]);\n+\n+        //Act\n+        Response response = groupResource.createRoster(group);\n+\n+        //Assert\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus(), \"Response status should have been CREATED (201)\");\n+        assertNotNull(response.getEntity(), \"Response should have contained a body\");\n+        assertEquals(patientBank.keySet().size(),((Group) response.getEntity()).getMember().size(), \"Patients count should be the same as submitted\");\n+    }\n+\n+    @Test\n+    public void testCreateRosterWithInvalidPatient(){\n+        //Arrange\n+        final UUID orgId = UUID.randomUUID();\n+        final String providerNpi = NPIUtil.generateNPI();\n+\n+        final Map<UUID,Patient> patientBank = makeTestPatients(5, orgId);\n+\n+        final UUID badPatientUUID = UUID.randomUUID();\n+\n+        final Group group = FHIRGroupBuilder\n+                .newBuild()\n+                .attributedTo(providerNpi)\n+                .withPatients(patientBank.keySet().toArray(UUID[]::new))\n+                .withPatients(badPatientUUID)\n+                .withOrgTag(orgId)\n+                .build();\n+\n+        configuration.setPatientLimit(10);\n+        configuration.setExpirationThreshold(10);\n+        Mockito.when(rosterDAO.findEntities(isNull(),eq(orgId), eq(providerNpi), isNull())).thenReturn(Lists.emptyList());\n+        Mockito.when(providerDAO.getProviders(isNull(),eq(providerNpi), eq(orgId))).thenReturn(List.of(new ProviderEntity()));\n+        patientBank.keySet().stream().forEach(patientId ->\n+                Mockito.when(patientDAO.patientSearch(eq(patientId), isNull(),eq(orgId))).thenReturn(List.of(new PatientEntity())));\n+\n+        Mockito.when(patientDAO.patientSearch(eq(badPatientUUID), isNull(),eq(orgId))).thenReturn(List.of());\n+        Mockito.when(rosterDAO.persistEntity(any(RosterEntity.class))).thenAnswer(invocation -> invocation.getArguments()[0]);\n+\n+        //Act & Assert\n+        assertThrows(WebApplicationException.class, () -> groupResource.createRoster(group), \"Expected and exception if an invalid patient was added\");\n+    }\n+\n+    private Map<UUID,Patient> makeTestPatients(int count, UUID orgId){\n+        if(count>88){\n+            throw new IllegalStateException(\"Don't support building more than 88 patients..yet (need a better mbi generator)\");\n+        }\n+        final Map<UUID,Patient> patients = Maps.newHashMap();\n+        while(count>0){\n+            UUID id = UUID.randomUUID();\n+            Patient patient = FHIRPatientBuilder\n+                    .newBuild()\n+                    .withMbi(\"4S41C00AA\"+(count+10)) //makes MBI in range 4S41C00AA10 -> 4S41C00AA99", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75e3bc55d5c75ca27ef729009d37a985552eacc0"}, "originalPosition": 139}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149dc0ac50409f1202b7d21d90a5beb4b5abf514", "author": {"user": {"login": "MrMorie", "name": "Salvador"}}, "url": "https://github.com/CMSgov/dpc-app/commit/149dc0ac50409f1202b7d21d90a5beb4b5abf514", "committedDate": "2020-12-18T18:58:41Z", "message": "Added unit tests for test helpers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODA1NjA2", "url": "https://github.com/CMSgov/dpc-app/pull/1144#pullrequestreview-555805606", "createdAt": "2020-12-18T20:50:38Z", "commit": {"oid": "149dc0ac50409f1202b7d21d90a5beb4b5abf514"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 345, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}