{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MDQxODYz", "number": 1101, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNjoxMVrOExQPdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowNTo1OFrOE0iCUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDgxNzgyOnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNjoxMVrOHnSrfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNjoxMVrOHnSrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2MjU1OA==", "bodyText": "Method runAndMonitorExportJob has 6 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r510962558", "createdAt": "2020-10-23T15:26:11Z", "author": {"login": "codeclimate"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -221,18 +204,20 @@ public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n             patientSample.sampleEnd();\n             smokeTestResult.addSubResult(patientSample);\n         }\n+        return patientReferences;\n+    }\n \n \n-        // Upload the roster bundle\n+    private void uploadRosterBundle(JavaSamplerContext samplerContext, Bundle providerBundle, IGenericClient exportClient, Map<String,Reference> patientReferences){\n         logger.debug(\"Uploading roster\");\n         try {\n-            ClientUtils.createAndUploadRosters(javaSamplerContext.getParameter(\"seed-file\"), providerBundle, exportClient, UUID.fromString(organizationID), patientReferences);\n+            ClientUtils.createAndUploadRosters(samplerContext.getParameter(\"seed-file\"), providerBundle, exportClient, UUID.fromString(organizationID), patientReferences);\n         } catch (Exception e) {\n             throw new IllegalStateException(\"Cannot upload roster\", e);\n         }\n+    }\n \n-        // Run the job\n-        // Create a custom http client to use for monitoring the non-FHIR export request\n+    private void runAndMonitorExportJob(SampleResult smokeTestResult, String hostParam, String clientToken, Pair<UUID, PrivateKey> keyTuple, IGenericClient exportClient, List<String> providerNPIs){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440a848b6233370b7af9ab71acf4aedfe12f4912"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY0ODg2OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MzoyMlrOHqftfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzozNTo0MVrOHw8pAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTc4OA==", "bodyText": "would it be possible to log the error here so that we know what is going on?", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514321788", "createdAt": "2020-10-29T14:53:22Z", "author": {"login": "jonfulk"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -61,11 +66,10 @@ static void handleExportJob(IGenericClient exportClient, List<String> providerNP\n                 .map(npi -> exportRequestDispatcher(exportClient, npi))\n                 .map(search -> (Group) search.getEntryFirstRep().getResource())\n                 .map(group -> jobCompletionLambda(exportClient, httpClient, group, overrideURL))\n-                //TODO: ignore until we can skip lookback per request and switch over to use real bfd client\n-//                .peek(jobResponse -> {\n-//                    if (jobResponse.getError().size() > 0)\n-//                        throw new IllegalStateException(\"Export job completed, but with errors\");\n-//                })\n+                .peek(jobResponse -> {\n+                    if (jobResponse.getError().size() > 0)\n+                        throw new IllegalStateException(\"Export job completed, but with errors\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4NzIzNQ==", "bodyText": "They are found in the operation outcome files.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r521087235", "createdAt": "2020-11-11T03:35:41Z", "author": {"login": "MrMorie"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -61,11 +66,10 @@ static void handleExportJob(IGenericClient exportClient, List<String> providerNP\n                 .map(npi -> exportRequestDispatcher(exportClient, npi))\n                 .map(search -> (Group) search.getEntryFirstRep().getResource())\n                 .map(group -> jobCompletionLambda(exportClient, httpClient, group, overrideURL))\n-                //TODO: ignore until we can skip lookback per request and switch over to use real bfd client\n-//                .peek(jobResponse -> {\n-//                    if (jobResponse.getError().size() > 0)\n-//                        throw new IllegalStateException(\"Export job completed, but with errors\");\n-//                })\n+                .peek(jobResponse -> {\n+                    if (jobResponse.getError().size() > 0)\n+                        throw new IllegalStateException(\"Export job completed, but with errors\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTc4OA=="}, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY1OTc5OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NToyMlrOHqf0Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyMjowOFrOHqkACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzUxNA==", "bodyText": "should this check be case insensitive?", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514323514", "createdAt": "2020-10-29T14:55:22Z", "author": {"login": "jonfulk"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){\n+                verifyOperationOutcomeContents(file);\n+            }\n         } catch (IOException e) {\n             throw new RuntimeException(\"Cannot output file\", e);\n         }\n     }\n \n+    private static void verifyOperationOutcomeContents(File outcomeFile){\n+        try (BufferedReader reader = Files.newBufferedReader(outcomeFile.toPath(), Charset.defaultCharset())){\n+            String line = reader.readLine();\n+            while (line != null) {\n+                JsonObject outcomeEntry = new JsonParser().parse(line).getAsJsonObject();\n+                JsonArray outcomeIssues = outcomeEntry.getAsJsonArray(\"issue\");\n+                String finalLine = line;\n+                outcomeIssues.forEach(issue-> {\n+                    if(\"error\".equals(issue.getAsJsonObject().get(\"severity\").getAsString())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5MjA3Mw==", "bodyText": "not sure, but good point. ill make the change.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514392073", "createdAt": "2020-10-29T16:22:08Z", "author": {"login": "MrMorie"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){\n+                verifyOperationOutcomeContents(file);\n+            }\n         } catch (IOException e) {\n             throw new RuntimeException(\"Cannot output file\", e);\n         }\n     }\n \n+    private static void verifyOperationOutcomeContents(File outcomeFile){\n+        try (BufferedReader reader = Files.newBufferedReader(outcomeFile.toPath(), Charset.defaultCharset())){\n+            String line = reader.readLine();\n+            while (line != null) {\n+                JsonObject outcomeEntry = new JsonParser().parse(line).getAsJsonObject();\n+                JsonArray outcomeIssues = outcomeEntry.getAsJsonArray(\"issue\");\n+                String finalLine = line;\n+                outcomeIssues.forEach(issue-> {\n+                    if(\"error\".equals(issue.getAsJsonObject().get(\"severity\").getAsString())){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzUxNA=="}, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY4NjE1OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMDoyNlrOHqgFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyNDoxMlrOHqkF7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNzgyOQ==", "bodyText": "Seems like we should check that the created org is what we expect before confirming that it was created, but maybe you do that in createOrganization", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514327829", "createdAt": "2020-10-29T15:00:26Z", "author": {"login": "jonfulk"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -102,85 +95,77 @@ public void teardownTest(JavaSamplerContext context) {\n \n     @Override\n     public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n-        // Create things\n-        final String hostParam = javaSamplerContext.getParameter(\"host\");\n+        final String apiURL = javaSamplerContext.getParameter(\"host\");\n         final String adminURL = javaSamplerContext.getParameter(\"admin-url\");\n-        logger.info(\"Running against {}\", hostParam);\n+        logger.info(\"Running against {}\", apiURL);\n         logger.info(\"Admin URL: {}\", adminURL);\n         logger.info(\"Running with {} threads\", JMeterContextService.getNumberOfThreads());\n \n-        this.organizationID = javaSamplerContext.getParameter(\"organization-id\");\n-        String clientToken = javaSamplerContext.getParameter(\"client-token\");\n-        String privateKeyPath = javaSamplerContext.getParameter(\"private-key\");\n-        final String keyID = javaSamplerContext.getParameter(\"key-id\");\n+        this.organizationID = getTestOrganizationId(javaSamplerContext);\n \n         final SampleResult smokeTestResult = new SampleResult();\n         smokeTestResult.setSampleLabel(\"Smoke Test\");\n-        // False, unless proven otherwise\n         smokeTestResult.setSuccessful(false);\n         smokeTestResult.sampleStart();\n \n         // Disable validation against Attribution service\n         this.ctx = FhirContext.forDstu3();\n \n-        // If we're not supplied all the init parameters, create a new org\n-        Pair<UUID, PrivateKey> keyTuple;\n-        if (organizationID.equals(\"\") || clientToken.equals(\"\") || privateKeyPath.equals(\"\") || keyID.equals(\"\")) {\n-            this.organizationID = UUID.randomUUID().toString();\n+        try {\n+            this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed creating Macaroon\", e);\n+        }\n \n-            logger.info(String.format(\"Creating organization %s\", organizationID));\n+        final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, apiURL, goldenMacaroon, true, true);\n \n-            try {\n-                this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"Failed creating Macaroon\", e);\n-            }\n-            // Create admin client for registering organization\n-            final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, hostParam, goldenMacaroon, true, true);\n-\n-            final SampleResult orgRegistrationResult = new SampleResult();\n-            smokeTestResult.addSubResult(orgRegistrationResult);\n-\n-            orgRegistrationResult.sampleStart();\n-            try {\n-                String npi = NPIUtil.generateNPI();\n-                clientToken = FHIRHelpers.registerOrganization(adminClient, ctx.newJsonParser(), organizationID, npi, adminURL);\n-                orgRegistrationResult.setSuccessful(true);\n-            } catch (Exception e) {\n-                orgRegistrationResult.setSuccessful(false);\n-                throw new IllegalStateException(\"Cannot register org\", e);\n-            } finally {\n-                orgRegistrationResult.sampleEnd();\n-            }\n+        String clientToken = createOrganization(smokeTestResult, adminClient, adminURL);\n+        orgWasCreated = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5MzU4Mg==", "bodyText": "I think that would go beyond the scope of what we are trying to cover in our smoke tests. here this flag is only used to determine if the org can be safely deleted.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514393582", "createdAt": "2020-10-29T16:24:12Z", "author": {"login": "MrMorie"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -102,85 +95,77 @@ public void teardownTest(JavaSamplerContext context) {\n \n     @Override\n     public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n-        // Create things\n-        final String hostParam = javaSamplerContext.getParameter(\"host\");\n+        final String apiURL = javaSamplerContext.getParameter(\"host\");\n         final String adminURL = javaSamplerContext.getParameter(\"admin-url\");\n-        logger.info(\"Running against {}\", hostParam);\n+        logger.info(\"Running against {}\", apiURL);\n         logger.info(\"Admin URL: {}\", adminURL);\n         logger.info(\"Running with {} threads\", JMeterContextService.getNumberOfThreads());\n \n-        this.organizationID = javaSamplerContext.getParameter(\"organization-id\");\n-        String clientToken = javaSamplerContext.getParameter(\"client-token\");\n-        String privateKeyPath = javaSamplerContext.getParameter(\"private-key\");\n-        final String keyID = javaSamplerContext.getParameter(\"key-id\");\n+        this.organizationID = getTestOrganizationId(javaSamplerContext);\n \n         final SampleResult smokeTestResult = new SampleResult();\n         smokeTestResult.setSampleLabel(\"Smoke Test\");\n-        // False, unless proven otherwise\n         smokeTestResult.setSuccessful(false);\n         smokeTestResult.sampleStart();\n \n         // Disable validation against Attribution service\n         this.ctx = FhirContext.forDstu3();\n \n-        // If we're not supplied all the init parameters, create a new org\n-        Pair<UUID, PrivateKey> keyTuple;\n-        if (organizationID.equals(\"\") || clientToken.equals(\"\") || privateKeyPath.equals(\"\") || keyID.equals(\"\")) {\n-            this.organizationID = UUID.randomUUID().toString();\n+        try {\n+            this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed creating Macaroon\", e);\n+        }\n \n-            logger.info(String.format(\"Creating organization %s\", organizationID));\n+        final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, apiURL, goldenMacaroon, true, true);\n \n-            try {\n-                this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"Failed creating Macaroon\", e);\n-            }\n-            // Create admin client for registering organization\n-            final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, hostParam, goldenMacaroon, true, true);\n-\n-            final SampleResult orgRegistrationResult = new SampleResult();\n-            smokeTestResult.addSubResult(orgRegistrationResult);\n-\n-            orgRegistrationResult.sampleStart();\n-            try {\n-                String npi = NPIUtil.generateNPI();\n-                clientToken = FHIRHelpers.registerOrganization(adminClient, ctx.newJsonParser(), organizationID, npi, adminURL);\n-                orgRegistrationResult.setSuccessful(true);\n-            } catch (Exception e) {\n-                orgRegistrationResult.setSuccessful(false);\n-                throw new IllegalStateException(\"Cannot register org\", e);\n-            } finally {\n-                orgRegistrationResult.sampleEnd();\n-            }\n+        String clientToken = createOrganization(smokeTestResult, adminClient, adminURL);\n+        orgWasCreated = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNzgyOQ=="}, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY5MzY0OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMTo1OFrOHqgJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMTo1OFrOHqgJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyOTAxMQ==", "bodyText": "it's long, but i would call this practitionerSubmitResults for clarity.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514329011", "createdAt": "2020-10-29T15:01:58Z", "author": {"login": "jonfulk"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -102,85 +95,77 @@ public void teardownTest(JavaSamplerContext context) {\n \n     @Override\n     public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n-        // Create things\n-        final String hostParam = javaSamplerContext.getParameter(\"host\");\n+        final String apiURL = javaSamplerContext.getParameter(\"host\");\n         final String adminURL = javaSamplerContext.getParameter(\"admin-url\");\n-        logger.info(\"Running against {}\", hostParam);\n+        logger.info(\"Running against {}\", apiURL);\n         logger.info(\"Admin URL: {}\", adminURL);\n         logger.info(\"Running with {} threads\", JMeterContextService.getNumberOfThreads());\n \n-        this.organizationID = javaSamplerContext.getParameter(\"organization-id\");\n-        String clientToken = javaSamplerContext.getParameter(\"client-token\");\n-        String privateKeyPath = javaSamplerContext.getParameter(\"private-key\");\n-        final String keyID = javaSamplerContext.getParameter(\"key-id\");\n+        this.organizationID = getTestOrganizationId(javaSamplerContext);\n \n         final SampleResult smokeTestResult = new SampleResult();\n         smokeTestResult.setSampleLabel(\"Smoke Test\");\n-        // False, unless proven otherwise\n         smokeTestResult.setSuccessful(false);\n         smokeTestResult.sampleStart();\n \n         // Disable validation against Attribution service\n         this.ctx = FhirContext.forDstu3();\n \n-        // If we're not supplied all the init parameters, create a new org\n-        Pair<UUID, PrivateKey> keyTuple;\n-        if (organizationID.equals(\"\") || clientToken.equals(\"\") || privateKeyPath.equals(\"\") || keyID.equals(\"\")) {\n-            this.organizationID = UUID.randomUUID().toString();\n+        try {\n+            this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed creating Macaroon\", e);\n+        }\n \n-            logger.info(String.format(\"Creating organization %s\", organizationID));\n+        final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, apiURL, goldenMacaroon, true, true);\n \n-            try {\n-                this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"Failed creating Macaroon\", e);\n-            }\n-            // Create admin client for registering organization\n-            final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, hostParam, goldenMacaroon, true, true);\n-\n-            final SampleResult orgRegistrationResult = new SampleResult();\n-            smokeTestResult.addSubResult(orgRegistrationResult);\n-\n-            orgRegistrationResult.sampleStart();\n-            try {\n-                String npi = NPIUtil.generateNPI();\n-                clientToken = FHIRHelpers.registerOrganization(adminClient, ctx.newJsonParser(), organizationID, npi, adminURL);\n-                orgRegistrationResult.setSuccessful(true);\n-            } catch (Exception e) {\n-                orgRegistrationResult.setSuccessful(false);\n-                throw new IllegalStateException(\"Cannot register org\", e);\n-            } finally {\n-                orgRegistrationResult.sampleEnd();\n-            }\n+        String clientToken = createOrganization(smokeTestResult, adminClient, adminURL);\n+        orgWasCreated = true;\n+\n+        Pair<UUID, PrivateKey> keyTuple = createPublicKey(apiURL);\n \n-            // Create a new public key\n-            try {\n-                keyTuple = APIAuthHelpers.generateAndUploadKey(KEY_ID, organizationID, goldenMacaroon, hostParam);\n-            } catch (IOException | URISyntaxException | GeneralSecurityException e) {\n-                throw new IllegalStateException(\"Failed uploading public key\", e);\n-            }\n-        } else {\n-            // Parse the private key and create a new ID/PrivateKey tuple\n-            final Path path = Paths.get(privateKeyPath);\n-            try (final PEMParser pemParser = new PEMParser(Files.newBufferedReader(path, StandardCharsets.UTF_8))) {\n-                JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\n-                Object object = pemParser.readObject();\n-                KeyPair kp = converter.getKeyPair((PEMKeyPair) object);\n-                PrivateKey privateKey = kp.getPrivate();\n-                if (privateKey == null) {\n-                    throw new IllegalStateException(\"Key cannot be null\");\n-                }\n-                keyTuple = Pair.of(UUID.fromString(keyID), privateKey);\n-            } catch (IOException e) {\n-                throw new IllegalArgumentException(String.format(\"Cannot read private key from: %s\", privateKeyPath));\n-            }\n-        }\n         // Create an authenticated and async client (the async part is ignored by other endpoints)\n-        final IGenericClient exportClient;\n+        final IGenericClient exportClient = APIAuthHelpers.buildAuthenticatedClient(ctx, apiURL, clientToken, keyTuple.getLeft(), keyTuple.getRight(), true, true);\n+\n+        Pair<Bundle, List<String>> practSubmitResults = submitPractitioners(javaSamplerContext, smokeTestResult, exportClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjcwODk5OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNTowOFrOHqgTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNTowOFrOHqgTDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMTQwNg==", "bodyText": "you removed String.format() before and used {} for interpolation instead. we should that here too.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514331406", "createdAt": "2020-10-29T15:05:08Z", "author": {"login": "jonfulk"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -102,85 +95,77 @@ public void teardownTest(JavaSamplerContext context) {\n \n     @Override\n     public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n-        // Create things\n-        final String hostParam = javaSamplerContext.getParameter(\"host\");\n+        final String apiURL = javaSamplerContext.getParameter(\"host\");\n         final String adminURL = javaSamplerContext.getParameter(\"admin-url\");\n-        logger.info(\"Running against {}\", hostParam);\n+        logger.info(\"Running against {}\", apiURL);\n         logger.info(\"Admin URL: {}\", adminURL);\n         logger.info(\"Running with {} threads\", JMeterContextService.getNumberOfThreads());\n \n-        this.organizationID = javaSamplerContext.getParameter(\"organization-id\");\n-        String clientToken = javaSamplerContext.getParameter(\"client-token\");\n-        String privateKeyPath = javaSamplerContext.getParameter(\"private-key\");\n-        final String keyID = javaSamplerContext.getParameter(\"key-id\");\n+        this.organizationID = getTestOrganizationId(javaSamplerContext);\n \n         final SampleResult smokeTestResult = new SampleResult();\n         smokeTestResult.setSampleLabel(\"Smoke Test\");\n-        // False, unless proven otherwise\n         smokeTestResult.setSuccessful(false);\n         smokeTestResult.sampleStart();\n \n         // Disable validation against Attribution service\n         this.ctx = FhirContext.forDstu3();\n \n-        // If we're not supplied all the init parameters, create a new org\n-        Pair<UUID, PrivateKey> keyTuple;\n-        if (organizationID.equals(\"\") || clientToken.equals(\"\") || privateKeyPath.equals(\"\") || keyID.equals(\"\")) {\n-            this.organizationID = UUID.randomUUID().toString();\n+        try {\n+            this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed creating Macaroon\", e);\n+        }\n \n-            logger.info(String.format(\"Creating organization %s\", organizationID));\n+        final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, apiURL, goldenMacaroon, true, true);\n \n-            try {\n-                this.goldenMacaroon = APIAuthHelpers.createGoldenMacaroon(adminURL);\n-            } catch (Exception e) {\n-                throw new IllegalStateException(\"Failed creating Macaroon\", e);\n-            }\n-            // Create admin client for registering organization\n-            final IGenericClient adminClient = APIAuthHelpers.buildAdminClient(ctx, hostParam, goldenMacaroon, true, true);\n-\n-            final SampleResult orgRegistrationResult = new SampleResult();\n-            smokeTestResult.addSubResult(orgRegistrationResult);\n-\n-            orgRegistrationResult.sampleStart();\n-            try {\n-                String npi = NPIUtil.generateNPI();\n-                clientToken = FHIRHelpers.registerOrganization(adminClient, ctx.newJsonParser(), organizationID, npi, adminURL);\n-                orgRegistrationResult.setSuccessful(true);\n-            } catch (Exception e) {\n-                orgRegistrationResult.setSuccessful(false);\n-                throw new IllegalStateException(\"Cannot register org\", e);\n-            } finally {\n-                orgRegistrationResult.sampleEnd();\n-            }\n+        String clientToken = createOrganization(smokeTestResult, adminClient, adminURL);\n+        orgWasCreated = true;\n+\n+        Pair<UUID, PrivateKey> keyTuple = createPublicKey(apiURL);\n \n-            // Create a new public key\n-            try {\n-                keyTuple = APIAuthHelpers.generateAndUploadKey(KEY_ID, organizationID, goldenMacaroon, hostParam);\n-            } catch (IOException | URISyntaxException | GeneralSecurityException e) {\n-                throw new IllegalStateException(\"Failed uploading public key\", e);\n-            }\n-        } else {\n-            // Parse the private key and create a new ID/PrivateKey tuple\n-            final Path path = Paths.get(privateKeyPath);\n-            try (final PEMParser pemParser = new PEMParser(Files.newBufferedReader(path, StandardCharsets.UTF_8))) {\n-                JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\n-                Object object = pemParser.readObject();\n-                KeyPair kp = converter.getKeyPair((PEMKeyPair) object);\n-                PrivateKey privateKey = kp.getPrivate();\n-                if (privateKey == null) {\n-                    throw new IllegalStateException(\"Key cannot be null\");\n-                }\n-                keyTuple = Pair.of(UUID.fromString(keyID), privateKey);\n-            } catch (IOException e) {\n-                throw new IllegalArgumentException(String.format(\"Cannot read private key from: %s\", privateKeyPath));\n-            }\n-        }\n         // Create an authenticated and async client (the async part is ignored by other endpoints)\n-        final IGenericClient exportClient;\n+        final IGenericClient exportClient = APIAuthHelpers.buildAuthenticatedClient(ctx, apiURL, clientToken, keyTuple.getLeft(), keyTuple.getRight(), true, true);\n+\n+        Pair<Bundle, List<String>> practSubmitResults = submitPractitioners(javaSamplerContext, smokeTestResult, exportClient);\n+\n+        final Map<String, Reference> patientReferences = submitPatients(javaSamplerContext, smokeTestResult, exportClient);\n+\n+        uploadRosterBundle(javaSamplerContext, practSubmitResults.getLeft(), exportClient, patientReferences);\n \n-        exportClient = APIAuthHelpers.buildAuthenticatedClient(ctx, hostParam, clientToken, keyTuple.getLeft(), keyTuple.getRight(), true, true);\n+        runAndMonitorExportJob(smokeTestResult, apiURL, clientToken, keyTuple, exportClient, practSubmitResults.getRight());\n \n-        // Upload a batch of patients and a batch of providers\n+        return smokeTestResult;\n+    }\n+\n+    private Pair<UUID, PrivateKey> createPublicKey(String hostParam){\n+        try {\n+            return APIAuthHelpers.generateAndUploadKey(KEY_ID, organizationID, goldenMacaroon, hostParam);\n+        } catch (IOException | URISyntaxException | GeneralSecurityException e) {\n+            throw new IllegalStateException(\"Failed uploading public key\", e);\n+        }\n+    }\n+\n+    private String createOrganization(SampleResult smokeTestResult, IGenericClient adminClient, String adminURL){\n+        logger.info(String.format(\"Creating organization %s\", organizationID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjcxMjg5OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNTo1NlrOHqgVZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo0MTozOFrOHw84BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMjAwNA==", "bodyText": "we use practitioner in some places and provider in other places. Are they the same?", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514332004", "createdAt": "2020-10-29T15:05:56Z", "author": {"login": "jonfulk"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -203,14 +188,16 @@ public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n         } finally {\n             practitionerSample.sampleEnd();\n         }\n-\n         smokeTestResult.addSubResult(practitionerSample);\n+        return Pair.of(providerBundle, providerNPIs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MTA3Nw==", "bodyText": "They are the same. We will need to revisit refactoring or rewriting these tests eventually.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r521091077", "createdAt": "2020-11-11T03:41:38Z", "author": {"login": "MrMorie"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/SmokeTest.java", "diffHunk": "@@ -203,14 +188,16 @@ public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n         } finally {\n             practitionerSample.sampleEnd();\n         }\n-\n         smokeTestResult.addSubResult(practitionerSample);\n+        return Pair.of(providerBundle, providerNPIs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMjAwNA=="}, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjk1NDYyOnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo1NDoxN1rOHqis3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo1NDoxN1rOHqis3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDc4MQ==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r514370781", "createdAt": "2020-10-29T15:54:17Z", "author": {"login": "codeclimate"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){\n+                verifyOperationOutcomeContents(file);\n+            }\n         } catch (IOException e) {\n             throw new RuntimeException(\"Cannot output file\", e);\n         }\n     }\n \n+    private static void verifyOperationOutcomeContents(File outcomeFile){\n+        try (BufferedReader reader = Files.newBufferedReader(outcomeFile.toPath(), Charset.defaultCharset())){\n+            String line = reader.readLine();\n+            while (line != null) {\n+                JsonObject outcomeEntry = new JsonParser().parse(line).getAsJsonObject();\n+                JsonArray outcomeIssues = outcomeEntry.getAsJsonArray(\"issue\");\n+                String finalLine = line;\n+                outcomeIssues.forEach(issue-> {\n+                    if(\"error\".equals(issue.getAsJsonObject().get(\"severity\").getAsString())){\n+                        throw new IllegalStateException(String.format(\"Operation outcome contains an error: File path:  %s, Error line: %s\", outcomeFile.getPath(), finalLine));\n+                    }\n+                });\n+                line = reader.readLine();\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Cannot read operation outcome file.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf580b3286798c8d887eaed1cae8d2192503367a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDQ4MjQwOnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1NDo1M1rOHsNGLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1NDo1M1rOHsNGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExMzk2Nw==", "bodyText": "You can use the fhircontext to get a json parser that will parse it directly to an OperationOutcome object", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r516113967", "createdAt": "2020-11-02T16:54:53Z", "author": {"login": "MrBilnon"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){\n+                verifyOperationOutcomeContents(file);\n+            }\n         } catch (IOException e) {\n             throw new RuntimeException(\"Cannot output file\", e);\n         }\n     }\n \n+    private static void verifyOperationOutcomeContents(File outcomeFile){\n+        try (BufferedReader reader = Files.newBufferedReader(outcomeFile.toPath(), Charset.defaultCharset())){\n+            String line = reader.readLine();\n+            while (line != null) {\n+                JsonObject outcomeEntry = new JsonParser().parse(line).getAsJsonObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3403fbb9dba19216ef89fbef40776a4326d68f4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTE5MDU2OnYy", "diffSide": "RIGHT", "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowNTo1OFrOHsT2CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1MToyMVrOHw9KEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDUyMA==", "bodyText": "I don't think this will ever get called because you already throw an exception if there are errors", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r516224520", "createdAt": "2020-11-02T20:05:58Z", "author": {"login": "MrBilnon"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3403fbb9dba19216ef89fbef40776a4326d68f4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMjQzNQ==", "bodyText": "My understanding is an OperationOutcome does not always have to be an error. But now that you mentioned it, I believe this would still get called but it would never fail validation since it would have thrown an exception before.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r520932435", "createdAt": "2020-11-10T23:09:50Z", "author": {"login": "MrMorie"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDUyMA=="}, "originalCommit": {"oid": "a3403fbb9dba19216ef89fbef40776a4326d68f4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NTY5OA==", "bodyText": "Fixed: Removed this validation since it would never get reached.", "url": "https://github.com/CMSgov/dpc-app/pull/1101#discussion_r521095698", "createdAt": "2020-11-11T03:51:21Z", "author": {"login": "MrMorie"}, "path": "dpc-smoketest/src/main/java/gov/cms/dpc/testing/smoketests/ClientUtils.java", "diffHunk": "@@ -242,11 +246,36 @@ private static void jobResponseHandler(CloseableHttpClient client, JobCompletion\n         try {\n             final File file = fetchExportedFiles(entry.getUrl(), client);\n             System.out.println(String.format(\"Downloaded file to: %s\", file.getPath()));\n+            if(file.length() == 0){\n+                throw new IllegalStateException(String.format(\"Downloaded file was empty. file path:  %s\", file.getPath()));\n+            }\n+            if(ResourceType.OperationOutcome.equals(entry.getType())){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDUyMA=="}, "originalCommit": {"oid": "a3403fbb9dba19216ef89fbef40776a4326d68f4"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 12, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}