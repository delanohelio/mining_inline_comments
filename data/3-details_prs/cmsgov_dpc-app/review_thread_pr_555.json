{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1ODU3MjA0", "number": 555, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxN1rODZ1kow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NjoxMlrODZ_T8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDE4NzIzOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/organization_registrar.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcufQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MDoxOVrOFgqg_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTQwNQ==", "bodyText": "Method OrganizationRegistrar#existing_registered_orgs is defined at both dpc-web/app/services/organization_registrar.rb:4 and dpc-web/app/services/organization_registrar.rb:39.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369569405", "createdAt": "2020-01-22T13:51:18Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/organization_registrar.rb", "diffHunk": "@@ -26,18 +25,28 @@ def register_organization(api_env)\n     api_client = APIClient.new(api_env).create_organization(organization)\n     api_org = api_client.response_body\n \n-    create_registered_org(api_env, api_org) if api_client.response_successful?\n+    create_registered_organization(api_env, api_org) if api_client.response_successful?\n+  end\n+\n+  def update_existing_registered_orgs\n+    existing_registered_orgs.each do |registered_org|\n+      APIClient.new(registered_org.api_env).update_organization(registered_org)\n+    end\n   end\n \n   private\n \n-  def no_change?\n+  def existing_registered_orgs", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NTMyNQ==", "bodyText": "Took care of this", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369795325", "createdAt": "2020-01-22T20:50:19Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/organization_registrar.rb", "diffHunk": "@@ -26,18 +25,28 @@ def register_organization(api_env)\n     api_client = APIClient.new(api_env).create_organization(organization)\n     api_org = api_client.response_body\n \n-    create_registered_org(api_env, api_org) if api_client.response_successful?\n+    create_registered_organization(api_env, api_org) if api_client.response_successful?\n+  end\n+\n+  def update_existing_registered_orgs\n+    existing_registered_orgs.each do |registered_org|\n+      APIClient.new(registered_org.api_env).update_organization(registered_org)\n+    end\n   end\n \n   private\n \n-  def no_change?\n+  def existing_registered_orgs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTQwNQ=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDE4NzI0OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcufg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTQwNg==", "bodyText": "Space inside { missing.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369569406", "createdAt": "2020-01-22T13:51:18Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,42 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n+  def update_organization(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(id: reg_org.api_id, name: org.name, identifier: [{system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi}])", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDE4NzI1OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTQwNw==", "bodyText": "Space inside } missing.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369569407", "createdAt": "2020-01-22T13:51:18Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,42 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n+  def update_organization(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(id: reg_org.api_id, name: org.name, identifier: [{system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi}])", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDE4NzI2OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOFrOFgcugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTQwOQ==", "bodyText": "Line is too long. [147/120]", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369569409", "createdAt": "2020-01-22T13:51:18Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,42 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n+  def update_organization(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(id: reg_org.api_id, name: org.name, identifier: [{system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi}])", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDE4NzI4OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOVrOFgcuhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1MToxOVrOFgcuhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTQxMg==", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369569412", "createdAt": "2020-01-22T13:51:19Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,42 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n+  def update_organization(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(id: reg_org.api_id, name: org.name, identifier: [{system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi}])\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    response = client.update(fhir_org, reg_org.api_id)\n+    if response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = response.response[:code]\n+      @response_body = { 'issue' => [{ 'details' => { 'text' => 'Request error' } }] }\n+      false\n+    end\n+    # TODO update fhir endpoint from reg_org.api_endpoint_ref", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkyNTAyOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoxOVrOFgj4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoxOVrOFgj4BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjUzMg==", "bodyText": "Extra empty line detected before the rescue.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369686532", "createdAt": "2020-01-22T17:04:19Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -118,6 +192,7 @@ def http_request(request, uri)\n     response = http.request(request)\n     @response_status = response.code.to_i\n     @response_body = parsed_response(response)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkyNTA1OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoxOVrOFgj4CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoxOVrOFgj4CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjUzNw==", "bodyText": "Space inside { missing.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369686537", "createdAt": "2020-01-22T17:04:19Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,97 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    response = client.read(FHIR::Organization, reg_org.api_id)\n+    binding.pry\n+  end\n+\n+  def update_organization(reg_org)\n+    # build the FHIR::Organization with latest attributes\n+    # build the FHIR::Endpoint with latest attributes\n+    # instantiate the FHIR::Client\n+    # add auth heads to client\n+    # client makes org update request\n+    # client makes endpoint update request\n+    # return true or false\n+\n+    fhir_org = build_fhir_org(reg_org)\n+    fhir_endpoint = build_fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]\n+      @response_body = { 'issue' => [{ 'details' => { 'text' => 'Request error' } }] }\n+      false\n+    end\n+  end\n+\n+  def build_fhir_org(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(\n+      id: reg_org.api_id,\n+      name: org.name,\n+      identifier: [{system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkyNTA2OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoyMFrOFgj4Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoyMFrOFgj4Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjUzOA==", "bodyText": "Space inside } missing.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369686538", "createdAt": "2020-01-22T17:04:20Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,97 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    response = client.read(FHIR::Organization, reg_org.api_id)\n+    binding.pry\n+  end\n+\n+  def update_organization(reg_org)\n+    # build the FHIR::Organization with latest attributes\n+    # build the FHIR::Endpoint with latest attributes\n+    # instantiate the FHIR::Client\n+    # add auth heads to client\n+    # client makes org update request\n+    # client makes endpoint update request\n+    # return true or false\n+\n+    fhir_org = build_fhir_org(reg_org)\n+    fhir_endpoint = build_fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]\n+      @response_body = { 'issue' => [{ 'details' => { 'text' => 'Request error' } }] }\n+      false\n+    end\n+  end\n+\n+  def build_fhir_org(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(\n+      id: reg_org.api_id,\n+      name: org.name,\n+      identifier: [{system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkyNTA4OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoyMFrOFgj4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoyMFrOFgj4DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjU0MA==", "bodyText": "Remove debugger entry point binding.pry.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369686540", "createdAt": "2020-01-22T17:04:20Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,97 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    response = client.read(FHIR::Organization, reg_org.api_id)\n+    binding.pry", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkyNTA5OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoyMFrOFgj4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDoyMFrOFgj4Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjU0Mg==", "bodyText": "Method has too many lines. [18/15]", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369686542", "createdAt": "2020-01-22T17:04:20Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,97 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    response = client.read(FHIR::Organization, reg_org.api_id)\n+    binding.pry\n+  end\n+\n+  def update_organization(reg_org)\n+    # build the FHIR::Organization with latest attributes\n+    # build the FHIR::Endpoint with latest attributes\n+    # instantiate the FHIR::Client\n+    # add auth heads to client\n+    # client makes org update request\n+    # client makes endpoint update request\n+    # return true or false\n+\n+    fhir_org = build_fhir_org(reg_org)\n+    fhir_endpoint = build_fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]\n+      @response_body = { 'issue' => [{ 'details' => { 'text' => 'Request error' } }] }\n+      false\n+    end\n+  end\n+\n+  def build_fhir_org(reg_org)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTU5MTcwOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo0OTo0N1rOFgqgLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo0OTo0N1rOFgqgLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NTExNw==", "bodyText": "We aren't using this method in the app code but it was super helpful when messing around in console and testing with the live API.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369795117", "createdAt": "2020-01-22T20:49:47Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,53 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTU5Nzg2OnYy", "diffSide": "RIGHT", "path": "dpc-web/spec/services/api_client_spec.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MTo1M1rOFgqj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MTo1M1rOFgqj-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NjA4OA==", "bodyText": "Would've included the whole body but ran into an issue where I couldn't replicate the whitespace in the JSON request the FHIR Client makes, and webmock doesn't ignore whitespace. So instead I'm just making sure the body has something in it that is unique to this request.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369796088", "createdAt": "2020-01-22T20:51:53Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/spec/services/api_client_spec.rb", "diffHunk": "@@ -166,6 +186,71 @@\n     end\n   end\n \n+  describe '#update_organization' do\n+    context 'successful request' do\n+      it 'uses fhir_client to send org data to API' do\n+        org = create(:organization, api_environments: [0])\n+        create(:fhir_endpoint, organization: org)\n+        reg_org = create(:registered_organization, organization: org, api_env: 'sandbox', api_endpoint_ref: 'Endpoint/12345')\n+\n+        stub_request(:put, \"http://dpc.example.com/Organization/#{reg_org.api_id}\").\n+          with(\n+            body: /#{reg_org.api_id}/,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTYwMjAyOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/fhir_resource_builder.rb", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MzoxOFrOFgqmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToxNzowM1rOFgrSBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5Njc0NA==", "bodyText": "This is a workaround for now. We are going to refactor this model structure soon so that we can fully support multiple FHIR endpoints for an org, rather than sort of supporting it in theory but in practicality only supporting a single one.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369796744", "createdAt": "2020-01-22T20:53:18Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/fhir_resource_builder.rb", "diffHunk": "@@ -0,0 +1,65 @@\n+# frozen_string_literal: true\n+\n+class FhirResourceBuilder\n+  def fhir_org(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(\n+      id: reg_org.api_id,\n+      name: org.name,\n+      identifier: [{ system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi }]\n+    )\n+    fhir_org.endpoint = { reference: reg_org.api_endpoint_ref }\n+\n+    fhir_org.address = fhir_address(org)\n+    fhir_org\n+  end\n+\n+  def fhir_address(org)\n+    FHIR::Address.new(\n+      line: org.address_street,\n+      city: org.address_city,\n+      postalCode: org.address_zip,\n+      state: org.address_state,\n+      country: 'US',\n+      use: org.address_use,\n+      type: org.address_type\n+    )\n+  end\n+\n+  def fhir_endpoint(reg_org)\n+    org = reg_org.organization\n+    org_endpoint = org.fhir_endpoints.first", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNDE0NA==", "bodyText": "Do we have a ticket for this?", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369804144", "createdAt": "2020-01-22T21:08:44Z", "author": {"login": "nickrobison-usds"}, "path": "dpc-web/app/services/fhir_resource_builder.rb", "diffHunk": "@@ -0,0 +1,65 @@\n+# frozen_string_literal: true\n+\n+class FhirResourceBuilder\n+  def fhir_org(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(\n+      id: reg_org.api_id,\n+      name: org.name,\n+      identifier: [{ system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi }]\n+    )\n+    fhir_org.endpoint = { reference: reg_org.api_endpoint_ref }\n+\n+    fhir_org.address = fhir_address(org)\n+    fhir_org\n+  end\n+\n+  def fhir_address(org)\n+    FHIR::Address.new(\n+      line: org.address_street,\n+      city: org.address_city,\n+      postalCode: org.address_zip,\n+      state: org.address_state,\n+      country: 'US',\n+      use: org.address_use,\n+      type: org.address_type\n+    )\n+  end\n+\n+  def fhir_endpoint(reg_org)\n+    org = reg_org.organization\n+    org_endpoint = org.fhir_endpoints.first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5Njc0NA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzg3OA==", "bodyText": "DPC-954", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369807878", "createdAt": "2020-01-22T21:17:03Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/fhir_resource_builder.rb", "diffHunk": "@@ -0,0 +1,65 @@\n+# frozen_string_literal: true\n+\n+class FhirResourceBuilder\n+  def fhir_org(reg_org)\n+    org = reg_org.organization\n+    fhir_org = FHIR::Organization.new(\n+      id: reg_org.api_id,\n+      name: org.name,\n+      identifier: [{ system: 'http://hl7.org/fhir/sid/us-npi', value: org.npi }]\n+    )\n+    fhir_org.endpoint = { reference: reg_org.api_endpoint_ref }\n+\n+    fhir_org.address = fhir_address(org)\n+    fhir_org\n+  end\n+\n+  def fhir_address(org)\n+    FHIR::Address.new(\n+      line: org.address_street,\n+      city: org.address_city,\n+      postalCode: org.address_zip,\n+      state: org.address_state,\n+      country: 'US',\n+      use: org.address_use,\n+      type: org.address_type\n+    )\n+  end\n+\n+  def fhir_endpoint(reg_org)\n+    org = reg_org.organization\n+    org_endpoint = org.fhir_endpoints.first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5Njc0NA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTYxMDk0OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1NjowMlrOFgqrtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1NjowMlrOFgqrtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5ODA3MA==", "bodyText": "Will be implemented with DPC-957", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369798070", "createdAt": "2020-01-22T20:56:02Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,53 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    client.read(FHIR::Organization, reg_org.api_id).resource\n+  end\n+\n+  def update_organization(reg_org)\n+    fhir_org = FhirResourceBuilder.new.fhir_org(reg_org)\n+    fhir_endpoint = FhirResourceBuilder.new.fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]\n+      @response_body = { 'issue' => [{ 'details' => { 'text' => 'Request error' } }] }\n+      false\n+    end\n+  end\n+\n+  def delete_organization(org)\n+    # DELETE\n+    # client.destroy(FHIR::Organization, org.id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTY0NTYzOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTowNzoxNlrOFgrAzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToxNjozMVrOFgrQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMzQ2OQ==", "bodyText": "Should we also check the endpoint_response code?", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369803469", "createdAt": "2020-01-22T21:07:16Z", "author": {"login": "nickrobison-usds"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,53 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    client.read(FHIR::Organization, reg_org.api_id).resource\n+  end\n+\n+  def update_organization(reg_org)\n+    fhir_org = FhirResourceBuilder.new.fhir_org(reg_org)\n+    fhir_endpoint = FhirResourceBuilder.new.fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzU2MA==", "bodyText": "Hm, yeah. We do check for the code in line 34 and only respond with success if both the org and the endpoint codes are 200. However, we set the status to be the org's response code. It would be better not to make two requests here in the APIClient but instead have the OrganizationRegistrar call the API Client to make both requests -- that way we don't have to muddy the semantics and with two API requests in a single method that suggests it's making just one request.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369807560", "createdAt": "2020-01-22T21:16:25Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,53 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    client.read(FHIR::Organization, reg_org.api_id).resource\n+  end\n+\n+  def update_organization(reg_org)\n+    fhir_org = FhirResourceBuilder.new.fhir_org(reg_org)\n+    fhir_endpoint = FhirResourceBuilder.new.fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMzQ2OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzYxNA==", "bodyText": "I'll refactor", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369807614", "createdAt": "2020-01-22T21:16:31Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -1,23 +1,53 @@\n # frozen_string_literal: true\n \n class APIClient\n-  attr_reader :api_env, :response_body, :response_status\n+  attr_reader :api_env, :base_url, :response_body, :response_status\n \n   def initialize(api_env)\n     @api_env = api_env\n+    @base_url = base_urls[api_env]\n   end\n \n   def create_organization(org)\n-    uri_string = base_urls[api_env] + '/Organization/$submit'\n+    uri_string = base_url + '/Organization/$submit'\n     json = OrganizationSubmitSerializer.new(org).to_json\n     post_request(uri_string, json, fhir_headers(golden_macaroon))\n     self\n   end\n \n-  def delete_organization(org); end\n+  def get_organization(reg_org)\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+    client.read(FHIR::Organization, reg_org.api_id).resource\n+  end\n+\n+  def update_organization(reg_org)\n+    fhir_org = FhirResourceBuilder.new.fhir_org(reg_org)\n+    fhir_endpoint = FhirResourceBuilder.new.fhir_endpoint(reg_org)\n+\n+    client = FHIR::Client.new(base_url)\n+    client.additional_headers = auth_header(delegated_macaroon(reg_org.api_id))\n+\n+    org_response = client.update(fhir_org, reg_org.api_id)\n+    endpoint_response = client.update(fhir_endpoint, fhir_endpoint.id)\n+\n+    if org_response.response[:code] == '200' && endpoint_response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = org_response.response[:code]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMzQ2OQ=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTY0Nzk5OnYy", "diffSide": "RIGHT", "path": "dpc-web/Gemfile.lock", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTowODoxMlrOFgrCbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToxMzoxOVrOFgrL4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMzg4Ng==", "bodyText": "How difficult would it be to avoid bringing in the DSTU2 models? Not a huge deal, but might be a nice way to reduce the deployment size.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369803886", "createdAt": "2020-01-22T21:08:12Z", "author": {"login": "nickrobison-usds"}, "path": "dpc-web/Gemfile.lock", "diffHunk": "@@ -113,12 +118,41 @@ GEM\n     faraday (0.15.4)\n       multipart-post (>= 1.2, < 3)\n     ffi (1.11.3)\n+    fhir_client (4.0.3)\n+      activesupport (>= 3)\n+      addressable (>= 2.3)\n+      fhir_dstu2_models (>= 1.0.10)\n+      fhir_models (>= 4.0.2)\n+      fhir_stu3_models (>= 3.0.1)\n+      nokogiri (>= 1.10.4)\n+      oauth2 (~> 1.1)\n+      rack (>= 1.5)\n+      rest-client (~> 2.0)\n+      tilt (>= 1.1)\n+    fhir_dstu2_models (1.0.10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNjMwNQ==", "bodyText": "Unavoidable if we want to use the Ruby FHIR client gem. It's required: https://github.com/fhir-crucible/fhir_client/blob/master/fhir_client.gemspec#L27", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369806305", "createdAt": "2020-01-22T21:13:19Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/Gemfile.lock", "diffHunk": "@@ -113,12 +118,41 @@ GEM\n     faraday (0.15.4)\n       multipart-post (>= 1.2, < 3)\n     ffi (1.11.3)\n+    fhir_client (4.0.3)\n+      activesupport (>= 3)\n+      addressable (>= 2.3)\n+      fhir_dstu2_models (>= 1.0.10)\n+      fhir_models (>= 4.0.2)\n+      fhir_stu3_models (>= 3.0.1)\n+      nokogiri (>= 1.10.4)\n+      oauth2 (~> 1.1)\n+      rack (>= 1.5)\n+      rest-client (~> 2.0)\n+      tilt (>= 1.1)\n+    fhir_dstu2_models (1.0.10)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMzg4Ng=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc4Mjg4OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/services/api_client.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NjoxM1rOFgsXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo1NjoxM1rOFgsXzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTc0MA==", "bodyText": "Do not prefix writer method names with set_.", "url": "https://github.com/CMSgov/dpc-app/pull/555#discussion_r369825740", "createdAt": "2020-01-22T21:56:13Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -124,6 +150,25 @@ def http_request(request, uri)\n     @response_body = { 'issue' => [{ 'details' => { 'text' => 'Connection error' } }] }\n   end\n \n+  def fhir_client_update_request(reg_org_id, resource, resource_id)\n+    set_fhir_client_auth(reg_org_id)\n+\n+    response = fhir_client.update(resource, resource_id)\n+\n+    if response.response[:code] == '200'\n+      true\n+    else\n+      Rails.logger.warn 'Unsuccessulful request to API'\n+      @response_status = response.response[:code]\n+      @response_body = { 'issue' => [{ 'details' => { 'text' => 'Request error' } }] }\n+      false\n+    end\n+  end\n+\n+  def set_fhir_client_auth(reg_org_id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4943, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}