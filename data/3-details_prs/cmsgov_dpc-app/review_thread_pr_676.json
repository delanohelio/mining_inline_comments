{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTcyMjI0", "number": 676, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozMzoyN1rODmwpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozNjowNVrODn2wrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTY5NTY4OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozMzoyN1rOF0XISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0NTo0NVrOF1IfBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTIyNA==", "bodyText": "Marking a batch as failed is a recoverable state. How would the aggregator return to a healthy state after marking a batch as inError?", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r390449224", "createdAt": "2020-03-10T16:33:27Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -179,6 +186,7 @@ protected void processJobBatch(JobQueueBatch job) {\n         } catch (Exception error) {\n             logger.error(\"FAILED job {} batch {}\", job.getJobID(), job.getBatchID(), error);\n             this.queue.failBatch(job, aggregatorID);\n+            inError.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDkwMA==", "bodyText": "I'm thinking we either need to set inError on line 188, and then set it back to false in a finally block (so if the batch is marked correctly as failed and processing resumes, the aggregator is no longer inError), or we don't count this scenario as an error scenario.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r390454900", "createdAt": "2020-03-10T16:41:47Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -179,6 +186,7 @@ protected void processJobBatch(JobQueueBatch job) {\n         } catch (Exception error) {\n             logger.error(\"FAILED job {} batch {}\", job.getJobID(), job.getBatchID(), error);\n             this.queue.failBatch(job, aggregatorID);\n+            inError.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTIyNA=="}, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MzYwOQ==", "bodyText": "@ronaldheft-usds, if it went to inError and it's running wouldn't EC2 restart the instance and spin up a new AggregationEngine?", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r390463609", "createdAt": "2020-03-10T16:54:26Z", "author": {"login": "MrBilnon"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -179,6 +186,7 @@ protected void processJobBatch(JobQueueBatch job) {\n         } catch (Exception error) {\n             logger.error(\"FAILED job {} batch {}\", job.getJobID(), job.getBatchID(), error);\n             this.queue.failBatch(job, aggregatorID);\n+            inError.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTIyNA=="}, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0OTMzNg==", "bodyText": "Correct, but this.queue.failBatch is a recoverable scenario. It marks the batch as failed and then starts processing the next item. Unlike what happens in the pollQueue method, where an error in their stops processing, and the AggregationEngine ends up just sitting there doing nothing.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r390549336", "createdAt": "2020-03-10T19:10:33Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -179,6 +186,7 @@ protected void processJobBatch(JobQueueBatch job) {\n         } catch (Exception error) {\n             logger.error(\"FAILED job {} batch {}\", job.getJobID(), job.getBatchID(), error);\n             this.queue.failBatch(job, aggregatorID);\n+            inError.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTIyNA=="}, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1Nzg2Mw==", "bodyText": "just to put it here, so the only place where a true unrecoverable error can happen is in the error callback of the subscribe but since the processBatch catches all exceptions, it should technically never reach that callback", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391257863", "createdAt": "2020-03-11T20:45:45Z", "author": {"login": "MrBilnon"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -179,6 +186,7 @@ protected void processJobBatch(JobQueueBatch job) {\n         } catch (Exception error) {\n             logger.error(\"FAILED job {} batch {}\", job.getJobID(), job.getBatchID(), error);\n             this.queue.failBatch(job, aggregatorID);\n+            inError.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTIyNA=="}, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc0OTQ5OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NjoxOVrOF0Xq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyODozNVrOF1qX0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODA2Nw==", "bodyText": "Is this test starting the aggregator for 5 seconds, then running assertions, and stopping the aggregator?\nDo we need to test the behind-the-scenes action of the AggregationEngine, or is a mock more sufficient (simulating isRunning and inError states)?\nWe do have an existing test suite called AggregationEngineTest that may be better suited to handle the verifying the inError state is set correct.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r390458067", "createdAt": "2020-03-10T16:46:19Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {\n+    private static final String TEST_PROVIDER_ID = \"1\";\n+    private static final UUID aggregatorID = UUID.randomUUID();\n+\n+    private IJobQueue queue;\n+    private BlueButtonClient bbclient;\n+    private AggregationEngine engine;\n+\n+    static private FhirContext fhirContext = FhirContext.forDstu3();\n+    static private MetricRegistry metricRegistry = new MetricRegistry();\n+    static private String exportPath;\n+\n+\n+    @BeforeAll\n+    static void setupAll() {\n+        final var config = ConfigFactory.load(\"testing.conf\").getConfig(\"dpc.aggregation\");\n+        exportPath = config.getString(\"exportPath\");\n+        AggregationEngine.setGlobalErrorHandler();\n+        ContextUtils.prefetchResourceModels(fhirContext, JobQueueBatch.validResourceTypes);\n+    }\n+\n+    @BeforeEach\n+    void setupEach() {\n+        queue = Mockito.spy(new MemoryBatchQueue(10));\n+        bbclient = Mockito.spy(new MockBlueButtonClient(fhirContext));\n+        var operationalConfig = new OperationsConfig(1000, exportPath, 500);\n+        engine = new AggregationEngine(aggregatorID, bbclient, queue, fhirContext, metricRegistry, operationalConfig);\n+        AggregationEngine.setGlobalErrorHandler();\n+    }\n+\n+    @Test\n+    public void testHealthyEngine() throws InterruptedException {\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(aggregatorID, engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);\n+        executor.awaitTermination(5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMzA3NA==", "bodyText": "I\u2019ve left these tests to showcase that these scenarios should not cause the engine to shutdown but to continue running.\nI\u2019ve added a test in aggregationEngineTest that does have the engine exit the loop with an error and thus calls onError and sets the isRunning to false.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391813074", "createdAt": "2020-03-12T18:28:35Z", "author": {"login": "MrBilnon"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {\n+    private static final String TEST_PROVIDER_ID = \"1\";\n+    private static final UUID aggregatorID = UUID.randomUUID();\n+\n+    private IJobQueue queue;\n+    private BlueButtonClient bbclient;\n+    private AggregationEngine engine;\n+\n+    static private FhirContext fhirContext = FhirContext.forDstu3();\n+    static private MetricRegistry metricRegistry = new MetricRegistry();\n+    static private String exportPath;\n+\n+\n+    @BeforeAll\n+    static void setupAll() {\n+        final var config = ConfigFactory.load(\"testing.conf\").getConfig(\"dpc.aggregation\");\n+        exportPath = config.getString(\"exportPath\");\n+        AggregationEngine.setGlobalErrorHandler();\n+        ContextUtils.prefetchResourceModels(fhirContext, JobQueueBatch.validResourceTypes);\n+    }\n+\n+    @BeforeEach\n+    void setupEach() {\n+        queue = Mockito.spy(new MemoryBatchQueue(10));\n+        bbclient = Mockito.spy(new MockBlueButtonClient(fhirContext));\n+        var operationalConfig = new OperationsConfig(1000, exportPath, 500);\n+        engine = new AggregationEngine(aggregatorID, bbclient, queue, fhirContext, metricRegistry, operationalConfig);\n+        AggregationEngine.setGlobalErrorHandler();\n+    }\n+\n+    @Test\n+    public void testHealthyEngine() throws InterruptedException {\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(aggregatorID, engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);\n+        executor.awaitTermination(5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODA2Nw=="}, "originalCommit": {"oid": "fc4dd4df246369f0f6ee88c6846695bc8a2c5904"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDgzOTEwOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTowMjoxMFrOF1I-ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxNDowMVrOF1K_9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2NTk1NQ==", "bodyText": "Should anything outside of the engine ever call the onError? In other words, why is this method public? I don't quite follow the logic here. It seems to be saying if engine.onError is called then engine.inError is true. Not sure if that is what you wanted to test.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391265955", "createdAt": "2020-03-11T21:02:10Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "diffHunk": "@@ -157,6 +158,26 @@ void simpleJobTest() {\n         assertTrue(Files.exists(Path.of(outputFilePath)));\n         final var errorFilePath = ResourceWriter.formOutputFilePath(exportPath, completeJob.getBatchID(), ResourceType.OperationOutcome, 0);\n         assertFalse(Files.exists(Path.of(errorFilePath)), \"expect no error file\");\n+        assertFalse(engine.inError());\n+    }\n+\n+    @Test\n+    void simpleJobExceptionTest() {\n+        final var orgID = UUID.randomUUID();\n+\n+        // Make a simple job with one resource type\n+        final var jobID = queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(MockBlueButtonClient.TEST_PATIENT_MBIS.get(0)),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        // Work the batch\n+        queue.claimBatch(engine.getAggregatorID())\n+                .ifPresent(t -> engine.onError(new RuntimeException(\"error\")));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3676ff60b4a617564efdf17a68161c2eff2a0feb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5OTA2Mw==", "bodyText": "After the changes from Ron and Emily, theoretically the engine.onError should never be called as the processBatch already catches all Exceptions and then marks the batch failed and the engine moves on. My health check is getting less relevant as Ron checks in more commits.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391299063", "createdAt": "2020-03-11T22:14:01Z", "author": {"login": "MrBilnon"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "diffHunk": "@@ -157,6 +158,26 @@ void simpleJobTest() {\n         assertTrue(Files.exists(Path.of(outputFilePath)));\n         final var errorFilePath = ResourceWriter.formOutputFilePath(exportPath, completeJob.getBatchID(), ResourceType.OperationOutcome, 0);\n         assertFalse(Files.exists(Path.of(errorFilePath)), \"expect no error file\");\n+        assertFalse(engine.inError());\n+    }\n+\n+    @Test\n+    void simpleJobExceptionTest() {\n+        final var orgID = UUID.randomUUID();\n+\n+        // Make a simple job with one resource type\n+        final var jobID = queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(MockBlueButtonClient.TEST_PATIENT_MBIS.get(0)),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        // Work the batch\n+        queue.claimBatch(engine.getAggregatorID())\n+                .ifPresent(t -> engine.onError(new RuntimeException(\"error\")));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2NTk1NQ=="}, "originalCommit": {"oid": "3676ff60b4a617564efdf17a68161c2eff2a0feb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDg1MDQxOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTowNjoxMFrOF1JGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTowNjoxMFrOF1JGAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2Nzg0Mg==", "bodyText": "Unless I'm missing something, I'm don't see a negative (eg. Assert.assertFalse(healthCheck.check().isHealth())) test. Should there be one?", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391267842", "createdAt": "2020-03-11T21:06:10Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {\n+    private static final String TEST_PROVIDER_ID = \"1\";\n+    private static final UUID aggregatorID = UUID.randomUUID();\n+\n+    private IJobQueue queue;\n+    private BlueButtonClient bbclient;\n+    private AggregationEngine engine;\n+\n+    static private FhirContext fhirContext = FhirContext.forDstu3();\n+    static private MetricRegistry metricRegistry = new MetricRegistry();\n+    static private String exportPath;\n+\n+\n+    @BeforeAll\n+    static void setupAll() {\n+        final var config = ConfigFactory.load(\"testing.conf\").getConfig(\"dpc.aggregation\");\n+        exportPath = config.getString(\"exportPath\");\n+        AggregationEngine.setGlobalErrorHandler();\n+        ContextUtils.prefetchResourceModels(fhirContext, JobQueueBatch.validResourceTypes);\n+    }\n+\n+    @BeforeEach\n+    void setupEach() {\n+        queue = Mockito.spy(new MemoryBatchQueue(10));\n+        bbclient = Mockito.spy(new MockBlueButtonClient(fhirContext));\n+        var operationalConfig = new OperationsConfig(1000, exportPath, 500);\n+        engine = Mockito.spy(new AggregationEngine(aggregatorID, bbclient, queue, fhirContext, metricRegistry, operationalConfig));\n+        AggregationEngine.setGlobalErrorHandler();\n+    }\n+\n+    @Test\n+    public void testHealthyEngine() throws InterruptedException {\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);\n+        executor.awaitTermination(5, TimeUnit.SECONDS);\n+\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+    }\n+\n+    @Test\n+    public void testHealthyEngineWhenJobBatchErrors() throws InterruptedException {\n+\n+        Mockito.doThrow(new RuntimeException(\"Error\")).when(bbclient).requestPatientFromServer(Mockito.anyString());\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);\n+        executor.awaitTermination(5, TimeUnit.SECONDS);\n+\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+    }\n+\n+    @Test\n+    public void testHealthyEngineWhenClaimBatchErrors() throws InterruptedException {\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        Mockito.doThrow(new RuntimeException(\"Error\")).when(queue).claimBatch(Mockito.any(UUID.class));\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);\n+        executor.awaitTermination(5, TimeUnit.SECONDS);\n+\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+    }\n+\n+    @Test\n+    public void testHealthyEngineWhenQueueOperationsError() throws InterruptedException {\n+        Mockito.doThrow(new RuntimeException(\"Error\")).when(queue).completePartialBatch(Mockito.any(JobQueueBatch.class), Mockito.any(UUID.class));\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);\n+        executor.awaitTermination(5, TimeUnit.SECONDS);\n+\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3676ff60b4a617564efdf17a68161c2eff2a0feb"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDg2ODg5OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMToxMjoyMFrOF1JR5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxOTozN1rOF1lnbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3MDg4Ng==", "bodyText": "I'm wondering how a stuck job will make the aggregator unhealthy? Or is the intent to only make the aggregator unhealthy when an exception is thrown?", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391270886", "createdAt": "2020-03-11T21:12:20Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -123,17 +129,23 @@ protected void pollQueue() {\n                 .map(Optional::get)\n                 .subscribe(\n                         this::processJobBatch,\n-                        error -> {\n-                            logger.error(\"Error processing queue. Exiting...\", error);\n-                            queueRunning.set(false);\n-                        },\n-                        () -> {\n-                            logger.info(\"Finished processing queue. Exiting...\");\n-                            queueRunning.set(false);\n-                        }\n+                        this::onError,\n+                        this::onCompleted\n                 );\n     }\n \n+    public void onError(Throwable error) {\n+        logger.error(\"Error processing queue. Exiting...\", error);\n+        queueRunning.set(false);\n+        inError.set(true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3676ff60b4a617564efdf17a68161c2eff2a0feb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczNTE0OA==", "bodyText": "A stuck job will be handled by the JobQueueHealthCheck. This is to handle the scenario we were seeing where the aggregator is exiting the loop. That has been fixed with #664, but I still think it's a great idea to have a health check that catches this issue if it gets reintroduced somehow.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r391735148", "createdAt": "2020-03-12T16:19:37Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -123,17 +129,23 @@ protected void pollQueue() {\n                 .map(Optional::get)\n                 .subscribe(\n                         this::processJobBatch,\n-                        error -> {\n-                            logger.error(\"Error processing queue. Exiting...\", error);\n-                            queueRunning.set(false);\n-                        },\n-                        () -> {\n-                            logger.info(\"Finished processing queue. Exiting...\");\n-                            queueRunning.set(false);\n-                        }\n+                        this::onError,\n+                        this::onCompleted\n                 );\n     }\n \n+    public void onError(Throwable error) {\n+        logger.error(\"Error processing queue. Exiting...\", error);\n+        queueRunning.set(false);\n+        inError.set(true);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3MDg4Ng=="}, "originalCommit": {"oid": "3676ff60b4a617564efdf17a68161c2eff2a0feb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTA3MTIyOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowNjoyMFrOF2E8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowNjoyMFrOF2E8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0ODU3MA==", "bodyText": "Suggest that you add a comment for the reason to initialize to running. There was a discussion on this and it would be helpful to capture.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392248570", "createdAt": "2020-03-13T14:06:20Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -54,7 +54,7 @@\n     private final Meter resourceMeter;\n     private final Meter operationalOutcomeMeter;\n     private Disposable subscribe;\n-    protected AtomicBoolean queueRunning = new AtomicBoolean(false);\n+    protected AtomicBoolean queueRunning = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE1NTQwOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoyODo0OVrOF2FyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NzozM1rOF2G3ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MjE0Ng==", "bodyText": "Isn't it important to assert while the engine is running? Suggest that you check isHealthy() here.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392262146", "createdAt": "2020-03-13T14:28:49Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * These tests are here to make sure the engine is still running/polling in situations where errors are recoverable.\n+ * A test to check if the engine exits out of the loop correctly when an error occurs\n+ * in AggregationEngineTest#testUnhealthyIfProcessJobBatchThrowsException\n+ */\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {\n+    private static final String TEST_PROVIDER_ID = \"1\";\n+    private static final UUID aggregatorID = UUID.randomUUID();\n+\n+    private IJobQueue queue;\n+    private BlueButtonClient bbclient;\n+    private AggregationEngine engine;\n+\n+    static private FhirContext fhirContext = FhirContext.forDstu3();\n+    static private MetricRegistry metricRegistry = new MetricRegistry();\n+    static private String exportPath;\n+\n+\n+    @BeforeAll\n+    static void setupAll() {\n+        final var config = ConfigFactory.load(\"testing.conf\").getConfig(\"dpc.aggregation\");\n+        exportPath = config.getString(\"exportPath\");\n+        AggregationEngine.setGlobalErrorHandler();\n+        ContextUtils.prefetchResourceModels(fhirContext, JobQueueBatch.validResourceTypes);\n+    }\n+\n+    @BeforeEach\n+    void setupEach() {\n+        queue = Mockito.spy(new MemoryBatchQueue(10));\n+        bbclient = Mockito.spy(new MockBlueButtonClient(fhirContext));\n+        var operationalConfig = new OperationsConfig(1000, exportPath, 500);\n+        engine = Mockito.spy(new AggregationEngine(aggregatorID, bbclient, queue, fhirContext, metricRegistry, operationalConfig));\n+        AggregationEngine.setGlobalErrorHandler();\n+    }\n+\n+    @Test\n+    public void testHealthyEngine() throws InterruptedException {\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3OTk0Ng==", "bodyText": "@RickHawesUSDS I think @whuang85 has that covered here: https://github.com/CMSgov/dpc-app/pull/676/files#diff-b6b2fc6f1b1f240ec7b0a995d56cf410R84", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392279946", "createdAt": "2020-03-13T14:57:33Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * These tests are here to make sure the engine is still running/polling in situations where errors are recoverable.\n+ * A test to check if the engine exits out of the loop correctly when an error occurs\n+ * in AggregationEngineTest#testUnhealthyIfProcessJobBatchThrowsException\n+ */\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {\n+    private static final String TEST_PROVIDER_ID = \"1\";\n+    private static final UUID aggregatorID = UUID.randomUUID();\n+\n+    private IJobQueue queue;\n+    private BlueButtonClient bbclient;\n+    private AggregationEngine engine;\n+\n+    static private FhirContext fhirContext = FhirContext.forDstu3();\n+    static private MetricRegistry metricRegistry = new MetricRegistry();\n+    static private String exportPath;\n+\n+\n+    @BeforeAll\n+    static void setupAll() {\n+        final var config = ConfigFactory.load(\"testing.conf\").getConfig(\"dpc.aggregation\");\n+        exportPath = config.getString(\"exportPath\");\n+        AggregationEngine.setGlobalErrorHandler();\n+        ContextUtils.prefetchResourceModels(fhirContext, JobQueueBatch.validResourceTypes);\n+    }\n+\n+    @BeforeEach\n+    void setupEach() {\n+        queue = Mockito.spy(new MemoryBatchQueue(10));\n+        bbclient = Mockito.spy(new MockBlueButtonClient(fhirContext));\n+        var operationalConfig = new OperationsConfig(1000, exportPath, 500);\n+        engine = Mockito.spy(new AggregationEngine(aggregatorID, bbclient, queue, fhirContext, metricRegistry, operationalConfig));\n+        AggregationEngine.setGlobalErrorHandler();\n+    }\n+\n+    @Test\n+    public void testHealthyEngine() throws InterruptedException {\n+\n+        final var orgID = UUID.randomUUID();\n+\n+        queue.createJob(\n+                orgID,\n+                TEST_PROVIDER_ID,\n+                Collections.singletonList(\"1\"),\n+                Collections.singletonList(ResourceType.Patient)\n+        );\n+\n+        AggregationEngineHealthCheck healthCheck = new AggregationEngineHealthCheck(engine);\n+        Assert.assertTrue(healthCheck.check().isHealthy());\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        executor.execute(engine);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MjE0Ng=="}, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE1ODQ2OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoyOTozNlrOF2Fz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoyOTozNlrOF2Fz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MjYzMg==", "bodyText": "Great change! Covers us in that window during startup.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392262632", "createdAt": "2020-03-13T14:29:36Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -54,7 +54,7 @@\n     private final Meter resourceMeter;\n     private final Meter operationalOutcomeMeter;\n     private Disposable subscribe;\n-    protected AtomicBoolean queueRunning = new AtomicBoolean(false);\n+    protected AtomicBoolean queueRunning = new AtomicBoolean(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE2MDkyOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMDoxNlrOF2F1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMDoxNlrOF2F1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MzA2OA==", "bodyText": "Nice breaking out the methods into their own callbacks. Makes the code easier to read and easier to test.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392263068", "createdAt": "2020-03-13T14:30:16Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -123,17 +123,21 @@ protected void pollQueue() {\n                 .map(Optional::get)\n                 .subscribe(\n                         this::processJobBatch,\n-                        error -> {\n-                            logger.error(\"Error processing queue. Exiting...\", error);\n-                            queueRunning.set(false);\n-                        },\n-                        () -> {\n-                            logger.info(\"Finished processing queue. Exiting...\");\n-                            queueRunning.set(false);\n-                        }\n+                        this::onError,\n+                        this::onCompleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE2NTE0OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMToyMlrOF2F4TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMToyMlrOF2F4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2Mzc1Ng==", "bodyText": "Switching up aggregationID to public was a good move. Ensures we are consistent with the IDs.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392263756", "createdAt": "2020-03-13T14:31:22Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheck.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import com.codahale.metrics.health.HealthCheck;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class AggregationEngineHealthCheck extends HealthCheck {\n+\n+    private AggregationEngine aggregationEngine;\n+\n+    @Inject\n+    public AggregationEngineHealthCheck(AggregationEngine aggregationEngine) {\n+        this.aggregationEngine = aggregationEngine;\n+    }\n+\n+    @Override\n+    public Result check() {\n+        Result result = Result.healthy();\n+        if (!aggregationEngine.isRunning()) {\n+            result = Result.unhealthy(\"Aggregation Engine instance: \" + aggregationEngine.getAggregatorID() + \" in error state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE2OTg5OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMjo0MlrOF2F7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMjo0MlrOF2F7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NDUzNA==", "bodyText": "Great work covering this scenario. This scenario is exactly why we want this health check.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392264534", "createdAt": "2020-03-13T14:32:42Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "diffHunk": "@@ -388,6 +392,31 @@ void testBlueButtonException() throws GeneralSecurityException {\n \n     }\n \n+    @Test\n+    public void testUnhealthyIfProcessJobBatchThrowsException() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE4MjUyOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozNjowNVrOF2GDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozMjo1NVrOF2IN3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NjU2NA==", "bodyText": "I really like this test quite. You covered all the issues that have tripped up on the incident.\nMy only concern is the 5 second requirement per test. This adds 20+ seconds to our test suite. I don't want to hold up closing out the incident over this, but I think we should keep this tech debt in mind, that we may have to optimize our unit tests in the future to run quicker.", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392266564", "createdAt": "2020-03-13T14:36:05Z", "author": {"login": "ronaldheft-usds"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * These tests are here to make sure the engine is still running/polling in situations where errors are recoverable.\n+ * A test to check if the engine exits out of the loop correctly when an error occurs\n+ * in AggregationEngineTest#testUnhealthyIfProcessJobBatchThrowsException\n+ */\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMjA0Ng==", "bodyText": "I can cut it down on some time, I just wanted to ensure it has time to process a job and the rest of the time it is sitting in the repeatWhen loop", "url": "https://github.com/CMSgov/dpc-app/pull/676#discussion_r392302046", "createdAt": "2020-03-13T15:32:55Z", "author": {"login": "MrBilnon"}, "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.aggregation.health;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import com.typesafe.config.ConfigFactory;\n+import gov.cms.dpc.aggregation.engine.AggregationEngine;\n+import gov.cms.dpc.aggregation.engine.OperationsConfig;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.bluebutton.client.MockBlueButtonClient;\n+import gov.cms.dpc.fhir.hapi.ContextUtils;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.MemoryBatchQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.testing.BufferedLoggerHandler;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * These tests are here to make sure the engine is still running/polling in situations where errors are recoverable.\n+ * A test to check if the engine exits out of the loop correctly when an error occurs\n+ * in AggregationEngineTest#testUnhealthyIfProcessJobBatchThrowsException\n+ */\n+@ExtendWith(BufferedLoggerHandler.class)\n+public class AggregationEngineHealthCheckTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NjU2NA=="}, "originalCommit": {"oid": "65538a965dfabf2dbfd493a491fcb48849304565"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4917, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}