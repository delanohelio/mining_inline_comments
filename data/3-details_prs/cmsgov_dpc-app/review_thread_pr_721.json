{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTI4MTg4", "number": 721, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrODs38hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1NDowMFrODtiwVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzgwNTQ5OnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwMA==", "bodyText": "Similar blocks of code found in 6 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527900", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzgwNTUxOnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzowOTo1OVrOF-_0oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwMg==", "bodyText": "Call \"optionalBatches.isPresent()\" before accessing the value.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527902", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMTY5Nw==", "bodyText": "I wonder if an if/else based on optionalBatches.isPresent() would make codeclimate happier. That's not to say that I agree with its complaint; I like the way you've written it. Just curious if that would make a difference.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401601697", "createdAt": "2020-04-01T13:09:59Z", "author": {"login": "em1"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwMg=="}, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzgwNTUzOnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwNA==", "bodyText": "Call \"batchFile.isPresent()\" before accessing the value.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527904", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> finalStatusFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                finalStatusFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        finalStatusFuture.completeOnTimeout(Optional.empty(), JOB_POLLING_TIMEOUT, TimeUnit.SECONDS);\n+\n+        try {\n+            return finalStatusFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {\n+        final Bundle bundle = new Bundle().setType(Bundle.BundleType.SEARCHSET);\n+\n+        batches.stream()\n+                .map(JobQueueBatch::getJobQueueBatchFiles)\n+                .flatMap(List::stream)\n+                .filter(bf -> resourceTypes.contains(bf.getResourceType()))\n+                .forEach(batchFile -> {\n+                    java.nio.file.Path path = Paths.get(String.format(\"%s/%s.ndjson\", exportPath, batchFile.getFileName()));\n+                    addResourceEntries(Resource.class, path, bundle);\n+                });\n+\n+\n+        // set a bundle id here? anything else?\n+        bundle.setId(UUID.randomUUID().toString());\n+        return bundle.setTotal(bundle.getEntry().size());\n+    }\n+\n+    private void addResourceEntries(Class<? extends Resource> clazz, java.nio.file.Path path, Bundle bundle) {\n+        try (BufferedReader br = Files.newBufferedReader(path)) {\n+            br.lines().forEach(line -> {\n+                Resource r = fhirContext.newJsonParser().parseResource(clazz, line);\n+                bundle.addEntry().setResource(r);\n+            });\n+        } catch (IOException e) {\n+            throw new DataRetrievalException(String.format(\"Unable to read resource because %s\", e.getMessage()));\n+        }\n+    }\n+\n+    OperationOutcome assembleOperationOutcome(List<JobQueueBatch> batches) {\n+        // There is only ever 1 OperationOutcome file\n+        final Optional<JobQueueBatchFile> batchFile = batches.stream()\n+                .map(b -> b.getJobQueueFileLatest(ResourceType.OperationOutcome))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst();\n+\n+\n+        if (batchFile.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve operationOutcome\");\n+        }\n+\n+        OperationOutcome outcome = new OperationOutcome();\n+        java.nio.file.Path path = Paths.get(String.format(\"%s/%s.ndjson\", exportPath, batchFile.get().getFileName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzgwNTU1OnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjowNDo1NFrOF_HvwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwNg==", "bodyText": "Remove this unused method parameter \"resourceTypes\".", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527906", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> finalStatusFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                finalStatusFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        finalStatusFuture.completeOnTimeout(Optional.empty(), JOB_POLLING_TIMEOUT, TimeUnit.SECONDS);\n+\n+        try {\n+            return finalStatusFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMTUyMQ==", "bodyText": "Not sure why codeClimate doesn't see it being used at line 135.. I debugged just to make sure it is using it...", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401731521", "createdAt": "2020-04-01T16:04:54Z", "author": {"login": "MrBilnon"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> finalStatusFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                finalStatusFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        finalStatusFuture.completeOnTimeout(Optional.empty(), JOB_POLLING_TIMEOUT, TimeUnit.SECONDS);\n+\n+        try {\n+            return finalStatusFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwNg=="}, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzUzNDMxOnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxNTo1MFrOF-iQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjowNTo0OVrOF_HybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNzMxMw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401117313", "createdAt": "2020-03-31T18:15:50Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54d511f1da59c86ea81a4b48d4037d34e0a345ab"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMjIwNQ==", "bodyText": "I don't quite understand what this is pertaining to", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401732205", "createdAt": "2020-04-01T16:05:49Z", "author": {"login": "MrBilnon"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNzMxMw=="}, "originalCommit": {"oid": "54d511f1da59c86ea81a4b48d4037d34e0a345ab"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODkwNjU4OnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoxNDoyN1rOF-vYRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoxNDoyN1rOF-vYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMjI5NQ==", "bodyText": "Method retrieveData has 6 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401332295", "createdAt": "2020-04-01T03:14:27Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.OffsetDateTime;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath, @JobTimeout  int jobTimeoutInSeconds) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+        this.jobTimeoutInSeconds = jobTimeoutInSeconds;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDgxOTQzOnYy", "diffSide": "RIGHT", "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1NDowMFrOF_Bvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1NDowMFrOF_Bvzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMzIzMA==", "bodyText": "What's the reason for not importing java.nio.file.Path?", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401633230", "createdAt": "2020-04-01T13:54:00Z", "author": {"login": "em1"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.OffsetDateTime;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath, @JobTimeout  int jobTimeoutInSeconds) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+        this.jobTimeoutInSeconds = jobTimeoutInSeconds;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID,\n+                                 UUID providerID,\n+                                 List<String> patientIDs,\n+                                 OffsetDateTime since,\n+                                 OffsetDateTime transactionTime,\n+                                 ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), since, transactionTime);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    private Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> dataFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                dataFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        dataFuture.completeOnTimeout(Optional.empty(), jobTimeoutInSeconds, TimeUnit.SECONDS);\n+\n+        try {\n+            return dataFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    private List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {\n+        final Bundle bundle = new Bundle().setType(Bundle.BundleType.SEARCHSET);\n+\n+        batches.stream()\n+                .map(JobQueueBatch::getJobQueueBatchFiles)\n+                .flatMap(List::stream)\n+                .filter(bf -> resourceTypes.contains(bf.getResourceType()))\n+                .forEach(batchFile -> {\n+                    java.nio.file.Path path = Paths.get(String.format(\"%s/%s.ndjson\", exportPath, batchFile.getFileName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4924, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}