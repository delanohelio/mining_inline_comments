{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwOTI0NDY5", "number": 1143, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0MzoxN1rOFGShaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjo0MToyNlrOFLH6wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTM5MjQwOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/dpc.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0MzoxN1rOIHOuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0MzoxN1rOIHOuVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MjE4MQ==", "bodyText": "We'll want to capture and respond to possible errors here, and with any other functions that can return an error.", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544452181", "createdAt": "2020-12-16T16:43:17Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -29,6 +36,22 @@ func unmarshalIDs(resps [][]byte) []string {\n \treturn IDs\n }\n \n+// Pull `identifier` out of a set of response bodies\n+func unmarshalIdentifiers(resps [][]byte, system string) []string {\n+\tvar identifierValue []string\n+\tfor _, resp := range resps {\n+\t\tvar result Resource\n+\t\tjson.Unmarshal(resp, &result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTM5Nzc5OnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/main.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0NDoxOFrOIHOxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0NDoxOFrOIHOxZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1Mjk2Nw==", "bodyText": "We probably don't need to modify this \ud83d\ude04", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544452967", "createdAt": "2020-12-16T16:44:18Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/main.go", "diffHunk": "@@ -26,4 +26,5 @@ func main() {\n \tapi.RunPractitionerTests()\n \tapi.RunOrgTests()\n \tapi.RunGroupTests()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTQzNzUzOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/dpc.go", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1MTo0NlrOIHPIwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1MzozNVrOIHUQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1ODk0NQ==", "bodyText": "What's our convention for test MBIs?", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544458945", "createdAt": "2020-12-16T16:51:46Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -109,11 +132,15 @@ func readBodies(pattern string) [][]byte {\n \treturn bodies\n }\n \n-func generateKeyBodies(n int, fn func() (string, *rsa.PrivateKey, string)) [][]byte {\n-\tvar bodies [][]byte\n-\tfor i := 0; i < n; i++ {\n-\t\tpubKeyStr, _, signature := fn()\n-\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n+func generateNPI() string {\n+\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")\n+\treturn luhnWithPrefix[len(luhnWithPrefix)-10:]\n+}\n+\n+func generateMBI() string {\n+\tmbi, err := regen.Generate(\"^[1-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z]{2}[0-9]{2}$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MjIwMQ==", "bodyText": "this is a copy form the java code, only change made was changing \\d to 0-9 since \\d means something else in golang regex.  I did make it slightly stricter by making the first position only 1-9 instead of 0-9 according to CMS mbi", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544492201", "createdAt": "2020-12-16T17:37:15Z", "author": {"login": "MrBilnon"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -109,11 +132,15 @@ func readBodies(pattern string) [][]byte {\n \treturn bodies\n }\n \n-func generateKeyBodies(n int, fn func() (string, *rsa.PrivateKey, string)) [][]byte {\n-\tvar bodies [][]byte\n-\tfor i := 0; i < n; i++ {\n-\t\tpubKeyStr, _, signature := fn()\n-\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n+func generateNPI() string {\n+\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")\n+\treturn luhnWithPrefix[len(luhnWithPrefix)-10:]\n+}\n+\n+func generateMBI() string {\n+\tmbi, err := regen.Generate(\"^[1-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z]{2}[0-9]{2}$\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1ODk0NQ=="}, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNjk2Mg==", "bodyText": "Right, but we don't want valid MBIs, just MBI-like test values.  Can we have one of those characters limited to the proscribed characater set [SLOIBZ]?", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544506962", "createdAt": "2020-12-16T17:58:43Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -109,11 +132,15 @@ func readBodies(pattern string) [][]byte {\n \treturn bodies\n }\n \n-func generateKeyBodies(n int, fn func() (string, *rsa.PrivateKey, string)) [][]byte {\n-\tvar bodies [][]byte\n-\tfor i := 0; i < n; i++ {\n-\t\tpubKeyStr, _, signature := fn()\n-\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n+func generateNPI() string {\n+\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")\n+\treturn luhnWithPrefix[len(luhnWithPrefix)-10:]\n+}\n+\n+func generateMBI() string {\n+\tmbi, err := regen.Generate(\"^[1-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z]{2}[0-9]{2}$\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1ODk0NQ=="}, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0MjgyNg==", "bodyText": "I think for our purposes here, generating strict mbis here are fine since the check in the service is more lenient.", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544542826", "createdAt": "2020-12-16T18:53:35Z", "author": {"login": "MrBilnon"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -109,11 +132,15 @@ func readBodies(pattern string) [][]byte {\n \treturn bodies\n }\n \n-func generateKeyBodies(n int, fn func() (string, *rsa.PrivateKey, string)) [][]byte {\n-\tvar bodies [][]byte\n-\tfor i := 0; i < n; i++ {\n-\t\tpubKeyStr, _, signature := fn()\n-\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n+func generateNPI() string {\n+\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")\n+\treturn luhnWithPrefix[len(luhnWithPrefix)-10:]\n+}\n+\n+func generateMBI() string {\n+\tmbi, err := regen.Generate(\"^[1-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z]{2}[0-9]{2}$\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1ODk0NQ=="}, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTQ1NzUzOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/generator.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1NTo0NlrOIHPUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1NTo0NlrOIHPUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MTk4OA==", "bodyText": "Let's add unit tests for the functions in this file!  \ud83e\uddea", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544461988", "createdAt": "2020-12-16T16:55:46Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/pkg/dpc/generator.go", "diffHunk": "@@ -0,0 +1,99 @@\n+package dpc\n+\n+import (\n+\t\"bytes\"\n+\t\"crypto/rsa\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net/url\"\n+)\n+\n+func templateBodyGenerator(templateFile string, replacementMap map[string]func() string) func() []byte {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTQ5NDg3OnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/generator.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzowMzoyM1rOIHPq5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzowMzoyM1rOIHPq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2NzY4Ng==", "bodyText": "This will be more readable with `` instead of \"\":\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n          \n          \n            \n            \t\tbodies = append(bodies, []byte(fmt.Sprintf(`{ \"key\": \"%s\", \"signature\": \"%s\"}`, pubKeyStr, signature)))", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544467686", "createdAt": "2020-12-16T17:03:23Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/pkg/dpc/generator.go", "diffHunk": "@@ -0,0 +1,99 @@\n+package dpc\n+\n+import (\n+\t\"bytes\"\n+\t\"crypto/rsa\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net/url\"\n+)\n+\n+func templateBodyGenerator(templateFile string, replacementMap map[string]func() string) func() []byte {\n+\tbody, err := ioutil.ReadFile(templateFile)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn func() []byte {\n+\t\toutput := body\n+\n+\t\tfor k, v := range replacementMap {\n+\t\t\tkeyCount := bytes.Count(body, []byte(k))\n+\t\t\tfor i := 0; i < keyCount; i++ {\n+\t\t\t\tvalue := v()\n+\t\t\t\toutput = bytes.Replace(output, []byte(k), []byte(value), i+1)\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\treturn output\n+\t}\n+}\n+\n+func keyBodyGenerator(n int, fn func() (string, *rsa.PrivateKey, string)) func() []byte {\n+\tvar bodies [][]byte\n+\tfor i := 0; i < n; i++ {\n+\t\tpubKeyStr, _, signature := fn()\n+\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTU2MjMwOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/dpc.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoxNzoyNVrOIHQTag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoxNzoyNVrOIHQTag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3ODA1OA==", "bodyText": "thats pretty cool", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544478058", "createdAt": "2020-12-16T17:17:25Z", "author": {"login": "MrMorie"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -109,11 +132,15 @@ func readBodies(pattern string) [][]byte {\n \treturn bodies\n }\n \n-func generateKeyBodies(n int, fn func() (string, *rsa.PrivateKey, string)) [][]byte {\n-\tvar bodies [][]byte\n-\tfor i := 0; i < n; i++ {\n-\t\tpubKeyStr, _, signature := fn()\n-\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n+func generateNPI() string {\n+\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")\n+\treturn luhnWithPrefix[len(luhnWithPrefix)-10:]\n+}\n+\n+func generateMBI() string {\n+\tmbi, err := regen.Generate(\"^[1-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z][a-zA-Z0-9][0-9][a-zA-Z]{2}[0-9]{2}$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTY0NDkzOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/test_organization.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzozNToxMlrOIHRFRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzozNToxMlrOIHRFRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MDgyMA==", "bodyText": "Can we make dpc.generateNPI() public and reference it here and a few lines later?", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r544490820", "createdAt": "2020-12-16T17:35:12Z", "author": {"login": "dhgreene"}, "path": "dpc-testing/performance/pkg/dpc/test_organization.go", "diffHunk": "@@ -13,7 +14,10 @@ func (api *API) RunOrgTests() {\n \t\tBaseURL:     api.URL,\n \t\tEndpoint:    endpoint + \"/$submit\",\n \t\tAccessToken: string(api.goldenMacaroon),\n-\t\tBodies:      readBodies(\"../../src/main/resources/organizations/base-organization.json\"),\n+\t\tGenerator: templateBodyGenerator(\"./templates/organization-bundle-template.json\", map[string]func() string{\"{NPI}\": func() string {\n+\t\t\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4766c39a081ac911550d8973bce5c987f198ee90"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjA4Mzg2OnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/pkg/dpc/dpc.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjo0MToyNlrOIOINFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjo0MToyNlrOIOINFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4NTM5Nw==", "bodyText": "Thats pretty cool.", "url": "https://github.com/CMSgov/dpc-app/pull/1143#discussion_r551685397", "createdAt": "2021-01-05T02:41:26Z", "author": {"login": "MrMorie"}, "path": "dpc-testing/performance/pkg/dpc/dpc.go", "diffHunk": "@@ -90,30 +110,15 @@ func cleanAndPanic(err error) {\n \tpanic(err)\n }\n \n-func readBodies(pattern string) [][]byte {\n-\tfilenames, err := filepath.Glob(pattern)\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\n-\tbodies := make([][]byte, 0)\n-\tfor _, fname := range filenames {\n-\t\tbody, err := ioutil.ReadFile(fname)\n-\t\tif err != nil {\n-\t\t\tpanic(err)\n-\t\t}\n-\n-\t\tbodies = append(bodies, body)\n-\t}\n-\n-\treturn bodies\n+func generateNPI() string {\n+\tluhnWithPrefix := luhn.GenerateWithPrefix(15, \"808403\")\n+\treturn luhnWithPrefix[len(luhnWithPrefix)-10:]\n }\n \n-func generateKeyBodies(n int, fn func() (string, *rsa.PrivateKey, string)) [][]byte {\n-\tvar bodies [][]byte\n-\tfor i := 0; i < n; i++ {\n-\t\tpubKeyStr, _, signature := fn()\n-\t\tbodies = append(bodies, []byte(fmt.Sprintf(\"{ \\\"key\\\": \\\"%s\\\", \\\"signature\\\": \\\"%s\\\"}\", pubKeyStr, signature)))\n+func generateMBI() string {\n+\tmbi, err := regen.Generate(\"^[1-9][ac-hj-km-np-rt-yAC-HJ-KM-NP-RT-Y][ac-hj-km-np-rt-yAC-HJ-KM-NP-RT-Y0-9][0-9][ac-hj-km-np-rt-yAC-HJ-KM-NP-RT-Y][ac-hj-km-np-rt-yAC-HJ-KM-NP-RT-Y0-9][0-9][ac-hj-km-np-rt-yAC-HJ-KM-NP-RT-Y]{2}[0-9]{2}$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfb7b2b02865b2ed3782458452860db8ec5fd67"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 46, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}