{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjE0Nzkx", "number": 822, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0ODoxNVrOEAnLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0ODoxNVrOEAnLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc3Mzc4OnYy", "diffSide": "RIGHT", "path": "dpc-common/src/test/java/gov/cms/dpc/common/logging/filters/AuthRelatedLoggingFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0ODoxNVrOGcAHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo1NTo0NlrOGcEcmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTIyNg==", "bodyText": "Could we make this client_assertion (singular) since that's likely the name for the parameter? Or maybe include both to show that client_assertion anywhere is rejected.", "url": "https://github.com/CMSgov/dpc-app/pull/822#discussion_r432015226", "createdAt": "2020-05-28T17:48:15Z", "author": {"login": "em1"}, "path": "dpc-common/src/test/java/gov/cms/dpc/common/logging/filters/AuthRelatedLoggingFilterTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package gov.cms.dpc.common.logging.filters;\n+\n+\n+import ch.qos.logback.access.spi.IAccessEvent;\n+import ch.qos.logback.core.filter.Filter;\n+import ch.qos.logback.core.spi.FilterReply;\n+import io.dropwizard.logging.filter.FilterFactory;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mockito;\n+\n+import java.util.stream.Stream;\n+\n+public class AuthRelatedLoggingFilterTest {\n+\n+    private Filter<IAccessEvent> filter;\n+    private IAccessEvent event = Mockito.mock(IAccessEvent.class);\n+\n+    @BeforeEach\n+    public void setUp() {\n+        FilterFactory<IAccessEvent> filterFactory = new AuthRelatedLoggingFilter();\n+        filter = filterFactory.build();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"stringSource\")\n+    public void testQueryString(String queryString, FilterReply expectedReply) {\n+        Mockito.when(event.getQueryString()).thenReturn(queryString);\n+        FilterReply reply = filter.decide(event);\n+        Assertions.assertEquals(expectedReply, reply);\n+    }\n+\n+    private static Stream<Arguments> stringSource() {\n+        return Stream.of(\n+                Arguments.of(\"client_assertions=secret_token\", FilterReply.DENY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6879d7695179430910211384d610b243f82516"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4NjE3MA==", "bodyText": "ah good catch, I even copied it from the token resource so I have no idea how an s got appended lol", "url": "https://github.com/CMSgov/dpc-app/pull/822#discussion_r432086170", "createdAt": "2020-05-28T19:55:46Z", "author": {"login": "MrBilnon"}, "path": "dpc-common/src/test/java/gov/cms/dpc/common/logging/filters/AuthRelatedLoggingFilterTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package gov.cms.dpc.common.logging.filters;\n+\n+\n+import ch.qos.logback.access.spi.IAccessEvent;\n+import ch.qos.logback.core.filter.Filter;\n+import ch.qos.logback.core.spi.FilterReply;\n+import io.dropwizard.logging.filter.FilterFactory;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mockito;\n+\n+import java.util.stream.Stream;\n+\n+public class AuthRelatedLoggingFilterTest {\n+\n+    private Filter<IAccessEvent> filter;\n+    private IAccessEvent event = Mockito.mock(IAccessEvent.class);\n+\n+    @BeforeEach\n+    public void setUp() {\n+        FilterFactory<IAccessEvent> filterFactory = new AuthRelatedLoggingFilter();\n+        filter = filterFactory.build();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"stringSource\")\n+    public void testQueryString(String queryString, FilterReply expectedReply) {\n+        Mockito.when(event.getQueryString()).thenReturn(queryString);\n+        FilterReply reply = filter.decide(event);\n+        Assertions.assertEquals(expectedReply, reply);\n+    }\n+\n+    private static Stream<Arguments> stringSource() {\n+        return Stream.of(\n+                Arguments.of(\"client_assertions=secret_token\", FilterReply.DENY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTIyNg=="}, "originalCommit": {"oid": "4e6879d7695179430910211384d610b243f82516"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}