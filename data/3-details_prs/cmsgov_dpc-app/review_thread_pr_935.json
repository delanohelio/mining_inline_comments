{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTM0MzMx", "number": 935, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoyNzoxM1rOETVPCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjowODowM1rOExRR3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzA2MzEyOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoyNzoxM1rOG5Abpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0NDowNFrOG5DRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyOTA5NA==", "bodyText": "Doesn't _since allow much more precision?  Only considering the day wouldn't allow _since to be set to a time earlier in the day of the query.  There might be cases where this is useful (such as a known data dump, unit tests, etc.).", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r462429094", "createdAt": "2020-07-29T16:27:13Z", "author": {"login": "dhgreene"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -337,6 +339,10 @@ private OffsetDateTime handleSinceQueryParam(String since) {\n         try {\n             var dt = new DateTimeDt();\n             dt.setValueAsString(since);\n+            LocalDate today = LocalDate.now( ZoneOffset.UTC );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db89f8927315056919eb1a4176c0bf34618fb236"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2OTI4Mw==", "bodyText": "I think the precision is there.  I just named the variable \"today\", maybe should be called rightNow?", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r462469283", "createdAt": "2020-07-29T17:33:30Z", "author": {"login": "richbraman"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -337,6 +339,10 @@ private OffsetDateTime handleSinceQueryParam(String since) {\n         try {\n             var dt = new DateTimeDt();\n             dt.setValueAsString(since);\n+            LocalDate today = LocalDate.now( ZoneOffset.UTC );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyOTA5NA=="}, "originalCommit": {"oid": "db89f8927315056919eb1a4176c0bf34618fb236"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NTcxNg==", "bodyText": "ahh maybe should be LocalDateTime.now().\ni am changing precision", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r462475716", "createdAt": "2020-07-29T17:44:04Z", "author": {"login": "richbraman"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -337,6 +339,10 @@ private OffsetDateTime handleSinceQueryParam(String since) {\n         try {\n             var dt = new DateTimeDt();\n             dt.setValueAsString(since);\n+            LocalDate today = LocalDate.now( ZoneOffset.UTC );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyOTA5NA=="}, "originalCommit": {"oid": "db89f8927315056919eb1a4176c0bf34618fb236"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzY2NDk4OnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyMzozNVrOHlTTqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyMzozNVrOHlTTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3NTY4OQ==", "bodyText": "Refactor this method to not always return the same value.", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r508875689", "createdAt": "2020-10-20T22:23:35Z", "author": {"login": "codeclimate"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -331,24 +330,15 @@ private Group executeGroupOperation(UUID rosterID, Group groupUpdate, String ope\n         return resources;\n     }\n \n-    /**\n-     * Convert the '_since' {@link QueryParam} to a Date\n-     *\n-     * @param since - {@link String} an instant\n-     * @return - A {@link OffsetDateTime} for this since.\n-     */\n-    private OffsetDateTime handleSinceQueryParam(String since) {\n-        if (StringUtils.isEmpty(since)) {\n+    private OffsetDateTime handleSinceQueryParam(Optional<OffsetDateTimeParam> sinceParam) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a649640e5b264ea6733eaaf22c87a1eecf3fdbd"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzY2NTAxOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyMzozNVrOHlTTrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyMzozNVrOHlTTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3NTY5Mw==", "bodyText": "Call \"sinceParam.isPresent()\" before accessing the value.", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r508875693", "createdAt": "2020-10-20T22:23:35Z", "author": {"login": "codeclimate"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -331,24 +330,15 @@ private Group executeGroupOperation(UUID rosterID, Group groupUpdate, String ope\n         return resources;\n     }\n \n-    /**\n-     * Convert the '_since' {@link QueryParam} to a Date\n-     *\n-     * @param since - {@link String} an instant\n-     * @return - A {@link OffsetDateTime} for this since.\n-     */\n-    private OffsetDateTime handleSinceQueryParam(String since) {\n-        if (StringUtils.isEmpty(since)) {\n+    private OffsetDateTime handleSinceQueryParam(Optional<OffsetDateTimeParam> sinceParam) {\n+        if (sinceParam.isEmpty()) {\n             return null;\n         }\n-        // check that _since is a valid time\n-        try {\n-            var dt = new DateTimeDt();\n-            dt.setValueAsString(since);\n-            return dt.getValue().toInstant().atOffset(ZoneOffset.UTC);\n-        } catch (DataFormatException ex) {\n-            throw new BadRequestException(\"'_since' query parameter must be a valid date time value\");\n+        OffsetDateTime now = OffsetDateTime.now(ZoneId.systemDefault());\n+        if (sinceParam.get().get().isAfter(now)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a649640e5b264ea6733eaaf22c87a1eecf3fdbd"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDk0OTY5OnYy", "diffSide": "LEFT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1Nzo1NlrOHnT-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0MjozNlrOHnd4Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MzY4Nw==", "bodyText": "did you mean to delete the doc string?", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r510983687", "createdAt": "2020-10-23T15:57:56Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -331,24 +331,19 @@ private Group executeGroupOperation(UUID rosterID, Group groupUpdate, String ope\n         return resources;\n     }\n \n-    /**\n-     * Convert the '_since' {@link QueryParam} to a Date\n-     *\n-     * @param since - {@link String} an instant\n-     * @return - A {@link OffsetDateTime} for this since.\n-     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee93c63a40ac669e8855421e8049fa88a360f8e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NDUxMQ==", "bodyText": "Yea, it's a private method and doesn't tell anything more than the signature of the method does. Thought it was distracting.", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r511144511", "createdAt": "2020-10-23T20:38:51Z", "author": {"login": "MrMorie"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -331,24 +331,19 @@ private Group executeGroupOperation(UUID rosterID, Group groupUpdate, String ope\n         return resources;\n     }\n \n-    /**\n-     * Convert the '_since' {@link QueryParam} to a Date\n-     *\n-     * @param since - {@link String} an instant\n-     * @return - A {@link OffsetDateTime} for this since.\n-     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MzY4Nw=="}, "originalCommit": {"oid": "eee93c63a40ac669e8855421e8049fa88a360f8e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NjA3OQ==", "bodyText": "makes sense", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r511146079", "createdAt": "2020-10-23T20:42:36Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -331,24 +331,19 @@ private Group executeGroupOperation(UUID rosterID, Group groupUpdate, String ope\n         return resources;\n     }\n \n-    /**\n-     * Convert the '_since' {@link QueryParam} to a Date\n-     *\n-     * @param since - {@link String} an instant\n-     * @return - A {@link OffsetDateTime} for this since.\n-     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MzY4Nw=="}, "originalCommit": {"oid": "eee93c63a40ac669e8855421e8049fa88a360f8e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDk4NzgwOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/GroupResourceUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjowODowM1rOHnUVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjowODowM1rOHnUVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4OTczMw==", "bodyText": "When Will's related PR gets merged, we might want to move this stuff into the setUp method.", "url": "https://github.com/CMSgov/dpc-app/pull/935#discussion_r510989733", "createdAt": "2020-10-23T16:08:03Z", "author": {"login": "jonfulk"}, "path": "dpc-api/src/test/java/gov/cms/dpc/api/resources/v1/GroupResourceUnitTest.java", "diffHunk": "@@ -157,4 +171,112 @@ public void testCreateRosterProviderNotFound() {\n         Assertions.assertThrows(WebApplicationException.class, () -> resource.createRoster(organizationPrincipal, provenance, group));\n     }\n \n+    @Test\n+    public void testExportWithValidSinceParam(){\n+        UUID orgId = UUID.randomUUID();\n+        Organization organization = new Organization();\n+        organization.setId(orgId.toString());\n+        OrganizationPrincipal organizationPrincipal = new OrganizationPrincipal(organization);\n+\n+        String groupId = \"123456789\";\n+\n+        //Mock Group\n+        Group group = new Group();\n+        group.setId(groupId);\n+        group.addMember();\n+\n+        IReadExecutable<Group> readExec = Mockito.mock(IReadExecutable.class);\n+        Mockito.when(attributionClient.read().resource(Group.class).withId(new IdType(\"Group\", groupId)).encodedJson()).thenReturn(readExec);\n+        Mockito.when(readExec.execute()).thenReturn(group);\n+\n+        //Mock get bundle\n+        IOperationUntypedWithInput<Bundle> bundleOperation = Mockito.mock(IOperationUntypedWithInput.class);\n+        Mockito.when(attributionClient\n+                .operation()\n+                .onInstance(new IdType(groupId))\n+\n+                .named(\"patients\")\n+                .withParameters(Mockito.any(Parameters.class))\n+                .returnResourceType(Bundle.class)\n+                .useHttpGet()\n+                .encodedJson()).thenReturn(bundleOperation);\n+\n+        Mockito.when(bundleOperation.execute()).thenReturn(new Bundle());\n+        Meta bfdTransactionMeta = new Meta();\n+        Mockito.when(mockBfdClient.requestPatientFromServer(SYNTHETIC_BENE_ID, null).getMeta()).thenReturn(bfdTransactionMeta);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee93c63a40ac669e8855421e8049fa88a360f8e"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}