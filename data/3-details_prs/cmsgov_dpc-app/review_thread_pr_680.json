{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2Mzg0NzA5", "number": 680, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNToxNFrODm4Bsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo0MToyM1rODogqSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDkwNDE5OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNToxNFrOF0i9Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNToxNFrOF0i9Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0Mjk3OQ==", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r390642979", "createdAt": "2020-03-10T22:15:14Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -76,10 +76,15 @@ def update_api_endpoint\n   def delete_api_organization\n     api_request = APIClient.new(api_env).delete_organization(self)\n     api_response = api_request.response_body\n-    return if api_request.response_successful?\n \n-    errors.add(:base, \"couldn't be deleted from #{api_env} API: #{api_response}\")\n-    throw(:abort)\n+    if api_request.response_successful?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34bf44fe95c5f18c81d19e7db6c9f99930a6c18"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDkwNDIwOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNToxNVrOF0i9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoxNToxNVrOF0i9JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0Mjk4MQ==", "bodyText": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r390642981", "createdAt": "2020-03-10T22:15:15Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -76,10 +76,15 @@ def update_api_endpoint\n   def delete_api_organization\n     api_request = APIClient.new(api_env).delete_organization(self)\n     api_response = api_request.response_body\n-    return if api_request.response_successful?\n \n-    errors.add(:base, \"couldn't be deleted from #{api_env} API: #{api_response}\")\n-    throw(:abort)\n+    if api_request.response_successful?\n+      return\n+    elsif api_response.include? \"Cannot find organization\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34bf44fe95c5f18c81d19e7db6c9f99930a6c18"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODA0MzA5OnYy", "diffSide": "RIGHT", "path": "dpc-web/spec/models/registered_organization_spec.rb", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTozOTozM1rOF3GpeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MDo0NVrOF3fVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNDkyMA==", "bodyText": "In specs, it's conventional to assign variables used across examples with let outside of the before block. Instead of creating an instance variable here, before line 187 add this let block:\nlet(:registered_organization) { create(:registered_organization } \n\nAnd then you'll be able to use registered_organization in the examples instead of @reg_org", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r393324920", "createdAt": "2020-03-16T21:39:33Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/spec/models/registered_organization_spec.rb", "diffHunk": "@@ -184,18 +184,29 @@\n       end\n \n       context 'failed API request' do\n-        it 'adds to errors and does not destroy object' do\n+        before(:each) do\n           stub_api_client(message: :create_organization, success: true, response: default_org_creation_response)\n-          reg_org = create(:registered_organization)\n+          @reg_org = create(:registered_organization)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdd64633cbf9f1ed8fe78e196190107d2cbcaea"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjE2MA==", "bodyText": "When I tried using let(:registered_organization) { create(:registered_organization) } the test responded with the following error for both tests:\nFailure/Error:\n       api_request = APIClient.new(api_env).create_organization(\n         organization,\n         fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n       )\n     \n       #<InstanceDouble(APIClient) (anonymous)> received unexpected message :create_organization with (#<Organization id: 1, name: \"The Health Factory 1\", organization_type: \"primary_care_clinic\", num_pro...-03-17 13:18:11\", updated_at: \"2020-03-17 13:18:11\", npi: \"test-npi-1\", vendor: nil, vendor_id: nil>, {:fhir_endpoint=>{\"name\"=>\"DPC Sandbox Test Endpoint\", \"status\"=>\"test\", \"uri\"=>\"https://dpc.cms.gov/test-endpoint\"}})", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r393676160", "createdAt": "2020-03-17T13:25:28Z", "author": {"login": "Sun-Mountain"}, "path": "dpc-web/spec/models/registered_organization_spec.rb", "diffHunk": "@@ -184,18 +184,29 @@\n       end\n \n       context 'failed API request' do\n-        it 'adds to errors and does not destroy object' do\n+        before(:each) do\n           stub_api_client(message: :create_organization, success: true, response: default_org_creation_response)\n-          reg_org = create(:registered_organization)\n+          @reg_org = create(:registered_organization)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNDkyMA=="}, "originalCommit": {"oid": "dfdd64633cbf9f1ed8fe78e196190107d2cbcaea"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyOTQzMg==", "bodyText": "Gotcha. Looks like that would be caused by let getting called before the API client gets stubbed (line 188). I don't think this is a blocker but I would prefer using let or local variables rather than instance variables, partly as a project convention and partly because ivars can end up being cruft that adds either latency or confusion later, IME.", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r393729432", "createdAt": "2020-03-17T14:40:45Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/spec/models/registered_organization_spec.rb", "diffHunk": "@@ -184,18 +184,29 @@\n       end\n \n       context 'failed API request' do\n-        it 'adds to errors and does not destroy object' do\n+        before(:each) do\n           stub_api_client(message: :create_organization, success: true, response: default_org_creation_response)\n-          reg_org = create(:registered_organization)\n+          @reg_org = create(:registered_organization)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNDkyMA=="}, "originalCommit": {"oid": "dfdd64633cbf9f1ed8fe78e196190107d2cbcaea"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODA0NzQ0OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/models/registered_organization.rb", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo0MToyM1rOF3GsOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1MjozMFrOF3dMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNTYyNQ==", "bodyText": "What do you think about logging that the org wasn't found in the API? I'm inclined to suggest it in case we have to trace a transaction later; logging that there was an unexpected consistency in the transaction chain might be helpful.", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r393325625", "createdAt": "2020-03-16T21:41:23Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -76,8 +76,11 @@ def update_api_endpoint\n   def delete_api_organization\n     api_request = APIClient.new(api_env).delete_organization(self)\n     api_response = api_request.response_body\n+\n     return if api_request.response_successful?\n \n+    return if api_response.include? 'Cannot find organization'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdd64633cbf9f1ed8fe78e196190107d2cbcaea"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3ODY3Nw==", "bodyText": "I agree. How would you log this in the app?", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r393678677", "createdAt": "2020-03-17T13:29:08Z", "author": {"login": "Sun-Mountain"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -76,8 +76,11 @@ def update_api_endpoint\n   def delete_api_organization\n     api_request = APIClient.new(api_env).delete_organization(self)\n     api_response = api_request.response_body\n+\n     return if api_request.response_successful?\n \n+    return if api_response.include? 'Cannot find organization'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNTYyNQ=="}, "originalCommit": {"oid": "dfdd64633cbf9f1ed8fe78e196190107d2cbcaea"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NDI5Nw==", "bodyText": "if  api_response.include? 'Cannot find organization'\n  Rails.logger.warn \"Cannot delete API organization with id #{api_id}: Organization not found.\"\n  return\nend", "url": "https://github.com/CMSgov/dpc-app/pull/680#discussion_r393694297", "createdAt": "2020-03-17T13:52:30Z", "author": {"login": "switzersc-usds"}, "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -76,8 +76,11 @@ def update_api_endpoint\n   def delete_api_organization\n     api_request = APIClient.new(api_env).delete_organization(self)\n     api_response = api_request.response_body\n+\n     return if api_request.response_successful?\n \n+    return if api_response.include? 'Cannot find organization'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNTYyNQ=="}, "originalCommit": {"oid": "dfdd64633cbf9f1ed8fe78e196190107d2cbcaea"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4919, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}