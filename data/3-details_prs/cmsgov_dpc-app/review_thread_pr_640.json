{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTY5NDky", "number": 640, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxOTo0OVrODi0c1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowMDoxNFrODi1Sog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM3NTI0OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxOTo0OVrOFuR68A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTozNjo1N1rOFuSfOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjQzMg==", "bodyText": "Is there a reason for declaring this outside of the switch statement? If possible, I'd prefer to do a local allocation to a final, rather than have an uninitialized variable at the top.", "url": "https://github.com/CMSgov/dpc-app/pull/640#discussion_r384072432", "createdAt": "2020-02-25T19:19:49Z", "author": {"login": "nickrobison-usds"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -55,87 +57,114 @@\n      * Fetch all the resources for a specific patient. If errors are encountered from BlueButton,\n      * a OperationalOutcome resource is used.\n      *\n-     * @param patientID to use\n+     * @param mbi to use\n      * @return a flow with all the resources for specific patient\n      */\n-    Flowable<Resource> fetchResources(String patientID) {\n+    Flowable<Resource> fetchResources(String mbi) {\n         Retry retry = Retry.of(\"bb-resource-fetcher\", this.retryConfig);\n         return Flowable.fromCallable(() -> {\n-            logger.debug(\"Fetching first {} from BlueButton for {}\", resourceType.toString(), patientID);\n-            final Resource firstFetched = fetchFirst(patientID);\n+            String fetchId = UUID.randomUUID().toString();\n+            logger.debug(\"Fetching first {} from BlueButton for {}\", resourceType.toString(), fetchId);\n+            final Resource firstFetched = fetchFirst(mbi);\n             if (ResourceType.Coverage.equals(resourceType) || ResourceType.ExplanationOfBenefit.equals(resourceType)) {\n-                return fetchAllBundles(patientID, (Bundle)firstFetched);\n+                return fetchAllBundles((Bundle)firstFetched, fetchId);\n             } else {\n-                logger.debug(\"Done fetching {} for {}\", resourceType.toString(), patientID);\n+                logger.debug(\"Done fetching {} for {}\", resourceType.toString(), fetchId);\n                 return List.of(firstFetched);\n             }\n         })\n                 .compose(RetryTransformer.of(retry))\n-                .onErrorResumeNext((Throwable error) -> handleError(patientID, error))\n+                .onErrorResumeNext((Throwable error) -> handleError(mbi, error))\n                 .flatMap(Flowable::fromIterable);\n     }\n \n     /**\n      * Given a bundle, return a list of resources in the passed in bundle and all\n      * the resources from the next bundles.\n      *\n-     * @param patientID to fetch for\n      * @param firstBundle of resources. Included in the result list\n      * @return a list of all the resources in the first bundle and all next bundles\n      */\n-    private List<Resource> fetchAllBundles(String patientID, Bundle firstBundle) {\n+    private List<Resource> fetchAllBundles(Bundle firstBundle, String fetchId) {\n         final var resources = new ArrayList<Resource>();\n         addResources(resources, firstBundle);\n \n         // Loop until no more next bundles\n         var bundle = firstBundle;\n         while (bundle.getLink(Bundle.LINK_NEXT) != null) {\n-            logger.debug(\"Fetching next bundle {} from BlueButton for {}\", resourceType.toString(), patientID);\n+            logger.debug(\"Fetching next bundle {} from BlueButton for {}\", resourceType.toString(), fetchId);\n             bundle = blueButtonClient.requestNextBundleFromServer(bundle);\n             addResources(resources, bundle);\n         }\n \n-        logger.debug(\"Done fetching bundles {} for {}\", resourceType.toString(), patientID);\n+        logger.debug(\"Done fetching bundles {} for {}\", resourceType.toString(), fetchId);\n         return resources;\n     }\n \n     /**\n      * Turn an error into a flow.\n-     * @param patientID the flow\n+     * @param mbi MBI\n      * @param error the error\n      * @return a Flowable of list of resources\n      */\n-    private Publisher<List<Resource>> handleError(String patientID, Throwable error) {\n+    private Publisher<List<Resource>> handleError(String mbi, Throwable error) {\n         if (error instanceof JobQueueFailure) {\n             // JobQueueFailure is an internal error. Just pass it along as an error.\n             return Flowable.error(error);\n         }\n \n         // Other errors should be turned into OperationalOutcome and just recorded.\n         logger.error(\"Turning error into OperationalOutcome. Error is: \", error);\n-        final var operationOutcome = formOperationOutcome(patientID, error);\n+        final var operationOutcome = formOperationOutcome(mbi, error);\n         return Flowable.just(List.of(operationOutcome));\n     }\n \n     /**\n      * Based on resourceType, fetch a resource or a bundle of resources.\n      *\n-     * @param patientID of the resource to fetch\n+     * @param mbi of the resource to fetch\n      * @return either a single resource or the first bundle of resources\n      */\n-    private Resource fetchFirst(String patientID) {\n+    private Resource fetchFirst(String mbi) {\n+        Patient patient = fetchPatient(mbi);\n+        String beneId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d97c034961428318af2aeb6ebf153e8513155"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4MTcyMA==", "bodyText": "The scope of a switch is the whole block. We can declare it under the EOB case, but it couldn't be final, unless I'm misunderstanding the suggestion?", "url": "https://github.com/CMSgov/dpc-app/pull/640#discussion_r384081720", "createdAt": "2020-02-25T19:36:57Z", "author": {"login": "em1"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -55,87 +57,114 @@\n      * Fetch all the resources for a specific patient. If errors are encountered from BlueButton,\n      * a OperationalOutcome resource is used.\n      *\n-     * @param patientID to use\n+     * @param mbi to use\n      * @return a flow with all the resources for specific patient\n      */\n-    Flowable<Resource> fetchResources(String patientID) {\n+    Flowable<Resource> fetchResources(String mbi) {\n         Retry retry = Retry.of(\"bb-resource-fetcher\", this.retryConfig);\n         return Flowable.fromCallable(() -> {\n-            logger.debug(\"Fetching first {} from BlueButton for {}\", resourceType.toString(), patientID);\n-            final Resource firstFetched = fetchFirst(patientID);\n+            String fetchId = UUID.randomUUID().toString();\n+            logger.debug(\"Fetching first {} from BlueButton for {}\", resourceType.toString(), fetchId);\n+            final Resource firstFetched = fetchFirst(mbi);\n             if (ResourceType.Coverage.equals(resourceType) || ResourceType.ExplanationOfBenefit.equals(resourceType)) {\n-                return fetchAllBundles(patientID, (Bundle)firstFetched);\n+                return fetchAllBundles((Bundle)firstFetched, fetchId);\n             } else {\n-                logger.debug(\"Done fetching {} for {}\", resourceType.toString(), patientID);\n+                logger.debug(\"Done fetching {} for {}\", resourceType.toString(), fetchId);\n                 return List.of(firstFetched);\n             }\n         })\n                 .compose(RetryTransformer.of(retry))\n-                .onErrorResumeNext((Throwable error) -> handleError(patientID, error))\n+                .onErrorResumeNext((Throwable error) -> handleError(mbi, error))\n                 .flatMap(Flowable::fromIterable);\n     }\n \n     /**\n      * Given a bundle, return a list of resources in the passed in bundle and all\n      * the resources from the next bundles.\n      *\n-     * @param patientID to fetch for\n      * @param firstBundle of resources. Included in the result list\n      * @return a list of all the resources in the first bundle and all next bundles\n      */\n-    private List<Resource> fetchAllBundles(String patientID, Bundle firstBundle) {\n+    private List<Resource> fetchAllBundles(Bundle firstBundle, String fetchId) {\n         final var resources = new ArrayList<Resource>();\n         addResources(resources, firstBundle);\n \n         // Loop until no more next bundles\n         var bundle = firstBundle;\n         while (bundle.getLink(Bundle.LINK_NEXT) != null) {\n-            logger.debug(\"Fetching next bundle {} from BlueButton for {}\", resourceType.toString(), patientID);\n+            logger.debug(\"Fetching next bundle {} from BlueButton for {}\", resourceType.toString(), fetchId);\n             bundle = blueButtonClient.requestNextBundleFromServer(bundle);\n             addResources(resources, bundle);\n         }\n \n-        logger.debug(\"Done fetching bundles {} for {}\", resourceType.toString(), patientID);\n+        logger.debug(\"Done fetching bundles {} for {}\", resourceType.toString(), fetchId);\n         return resources;\n     }\n \n     /**\n      * Turn an error into a flow.\n-     * @param patientID the flow\n+     * @param mbi MBI\n      * @param error the error\n      * @return a Flowable of list of resources\n      */\n-    private Publisher<List<Resource>> handleError(String patientID, Throwable error) {\n+    private Publisher<List<Resource>> handleError(String mbi, Throwable error) {\n         if (error instanceof JobQueueFailure) {\n             // JobQueueFailure is an internal error. Just pass it along as an error.\n             return Flowable.error(error);\n         }\n \n         // Other errors should be turned into OperationalOutcome and just recorded.\n         logger.error(\"Turning error into OperationalOutcome. Error is: \", error);\n-        final var operationOutcome = formOperationOutcome(patientID, error);\n+        final var operationOutcome = formOperationOutcome(mbi, error);\n         return Flowable.just(List.of(operationOutcome));\n     }\n \n     /**\n      * Based on resourceType, fetch a resource or a bundle of resources.\n      *\n-     * @param patientID of the resource to fetch\n+     * @param mbi of the resource to fetch\n      * @return either a single resource or the first bundle of resources\n      */\n-    private Resource fetchFirst(String patientID) {\n+    private Resource fetchFirst(String mbi) {\n+        Patient patient = fetchPatient(mbi);\n+        String beneId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjQzMg=="}, "originalCommit": {"oid": "c15d97c034961428318af2aeb6ebf153e8513155"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM5MDM5OnYy", "diffSide": "RIGHT", "path": "dpc-bluebutton/src/main/java/gov/cms/dpc/bluebutton/client/BlueButtonClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNDoxNFrOFuSERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNDoxNFrOFuSERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NDgyMQ==", "bodyText": "I believe I ran into an issue with the secret key factory not being thread safe, were you able to determine that as well? I believe there was a commit addressing that in my original branch.", "url": "https://github.com/CMSgov/dpc-app/pull/640#discussion_r384074821", "createdAt": "2020-02-25T19:24:14Z", "author": {"login": "nickrobison-usds"}, "path": "dpc-bluebutton/src/main/java/gov/cms/dpc/bluebutton/client/BlueButtonClientImpl.java", "diffHunk": "@@ -89,6 +89,18 @@ public Patient requestPatientFromServer(String patientID) throws ResourceNotFoun\n                 .execute());\n     }\n \n+    /**\n+     * Hashes MBI and queries Blue Button server for patient data.\n+     *\n+     * @param mbi The MBI\n+     * @return {@link Bundle} A FHIR Bundle of Patient resources\n+     */\n+    @Override\n+    public Bundle requestPatientFromServerByMbi(String mbi) throws ResourceNotFoundException, GeneralSecurityException {\n+        String mbiHash = hashMbi(mbi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d97c034961428318af2aeb6ebf153e8513155"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODUxMjk4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/bb-test-data/patient/-20140000009893.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowMDoxNFrOFuTQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoyOTowNFrOFuUHzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NDM3Ng==", "bodyText": "This change to this system value doesn't look right. BTW: BFD is removing this identifier in its latest response, so the best way to fix this may be to just remove the whole HICN identifier clause.", "url": "https://github.com/CMSgov/dpc-app/pull/640#discussion_r384094376", "createdAt": "2020-02-25T20:00:14Z", "author": {"login": "RickHawesUSDS"}, "path": "src/test/resources/bb-test-data/patient/-20140000009893.xml", "diffHunk": "@@ -9,12 +9,16 @@\n    </extension>\n    <identifier>\n       <system value=\"https://bluebutton.cms.gov/resources/variables/bene_id\"/>\n-      <value value=\"20140000009893\"/>\n+      <value value=\"-20140000009893\"/>\n    </identifier>\n    <identifier>\n-      <system value=\"https://bluebutton.cms.gov/resources/identifier/hicn-hash\"/>\n+      <system value=\"http://bluebutton.cms.hhs.gov/identifier#hicnHash\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d97c034961428318af2aeb6ebf153e8513155"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwODQ5NA==", "bodyText": "That is how we've seen it in BFD responses. Also formatted that way here: https://github.com/CMSgov/beneficiary-fhir-data/blob/a995592c40d77e3974ade09eb5017492e0865608/apps/bfd-server/dev/data-model.md\nI'd propose a new ticket to remove HICN entirely.\nEdit: I see it changed. I'll remove the change in this PR.", "url": "https://github.com/CMSgov/dpc-app/pull/640#discussion_r384108494", "createdAt": "2020-02-25T20:29:04Z", "author": {"login": "em1"}, "path": "src/test/resources/bb-test-data/patient/-20140000009893.xml", "diffHunk": "@@ -9,12 +9,16 @@\n    </extension>\n    <identifier>\n       <system value=\"https://bluebutton.cms.gov/resources/variables/bene_id\"/>\n-      <value value=\"20140000009893\"/>\n+      <value value=\"-20140000009893\"/>\n    </identifier>\n    <identifier>\n-      <system value=\"https://bluebutton.cms.gov/resources/identifier/hicn-hash\"/>\n+      <system value=\"http://bluebutton.cms.hhs.gov/identifier#hicnHash\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NDM3Ng=="}, "originalCommit": {"oid": "c15d97c034961428318af2aeb6ebf153e8513155"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4901, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}