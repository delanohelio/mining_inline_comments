{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjY2NDUw", "number": 782, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0MToxMFrOD5OYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0MToxMVrOD5OYPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMxMDAyOnYy", "diffSide": "RIGHT", "path": "dpc-web/app/validators/domain_exists_validator.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0MToxMFrOGQX8rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0MToxMFrOGQX8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMjc2NA==", "bodyText": "Add an empty line after magic comments.", "url": "https://github.com/CMSgov/dpc-app/pull/782#discussion_r419822764", "createdAt": "2020-05-05T01:41:10Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/validators/domain_exists_validator.rb", "diffHunk": "@@ -0,0 +1,12 @@\n+# frozen_string_literal: true\n+require 'mail'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb86b1616a937a47da2975ccdb5a72c408376e2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMxMDA0OnYy", "diffSide": "RIGHT", "path": "dpc-web/app/validators/domain_exists_validator.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0MToxMVrOGQX8rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo0MToxMVrOGQX8rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMjc2Ng==", "bodyText": "Final newline missing.", "url": "https://github.com/CMSgov/dpc-app/pull/782#discussion_r419822766", "createdAt": "2020-05-05T01:41:11Z", "author": {"login": "codeclimate"}, "path": "dpc-web/app/validators/domain_exists_validator.rb", "diffHunk": "@@ -0,0 +1,12 @@\n+# frozen_string_literal: true\n+require 'mail'\n+class DomainExistsValidator < ActiveModel::EachValidator\n+  def validate_each(record, attribute, value)\n+    begin\n+      r = Truemail.validate(value).result.success\n+    rescue StandardError\n+      r = false\n+    end\n+    record.errors[attribute] << (options[:message] || 'is invalid') unless r\n+  end\n+end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb86b1616a937a47da2975ccdb5a72c408376e2"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4877, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}