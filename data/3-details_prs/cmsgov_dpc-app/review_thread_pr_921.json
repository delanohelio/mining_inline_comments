{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzUwNzAx", "number": 921, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMjo0OVrOETUoPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjozNzoxNVrOEUlodA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njk2MzgyOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMjo0OVrOG4_dEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTowMToyNFrOG6LxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzA3Mg==", "bodyText": "Should we set a status code on these two exceptions so it doesn't use the default of 500? My initial thought was 401 Unauthorized, but maybe 422 Unprocessable Entity is more accurate because it's the attestation that's a problem, not their authentication. \ud83e\udd14", "url": "https://github.com/CMSgov/dpc-app/pull/921#discussion_r462413072", "createdAt": "2020-07-29T16:02:49Z", "author": {"login": "em1"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -431,7 +433,29 @@ private void logAttestation(Provenance provenance, UUID rosterID, Group attribut\n \n         logger.info(\"Organization {} is attesting a {} purpose between provider {} and patient(s) {}{}\", performer.getWhoReference().getReference(),\n                 reason.getCode(),\n-                performer.getOnBehalfOfReference().getReference(), attributedPatients, groupIDLog);\n+                practitionerUUID, attributedPatients, groupIDLog);\n+\n+        verifyHeader(practitionerUUID, attributionRoster);\n+    }\n+\n+    private void verifyHeader(String practitionerUUID, Group attributionRoster) {\n+        try {\n+            Practitioner practitioner = client.read()\n+                    .resource(Practitioner.class)\n+                    .withId(FHIRExtractors.getEntityUUID(practitionerUUID).toString())\n+                    .encodedJson()\n+                    .execute();\n+\n+            Identifier provenancePractitionerNPI = FHIRExtractors.findMatchingIdentifier(practitioner.getIdentifier(), DPCIdentifierSystem.NPPES);\n+            String groupPractitionerNPI = FHIRExtractors.getAttributedNPI(attributionRoster);\n+\n+            if (!provenancePractitionerNPI.getValue().equals(groupPractitionerNPI)) {\n+                throw new WebApplicationException(\"Provenance header's provider does not match group provider\");\n+            }\n+        } catch(ResourceNotFoundException e) {\n+            throw new WebApplicationException(\"Could not find provider defined in provenance header\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b70654a71666a67c25c4d9da553d3f747218419"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MzQxNw==", "bodyText": "I would think 422 would be most appropriate, remember this should require a swagger annotation indicating 422 as a potential API response....", "url": "https://github.com/CMSgov/dpc-app/pull/921#discussion_r463663417", "createdAt": "2020-07-31T15:01:24Z", "author": {"login": "richbraman"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -431,7 +433,29 @@ private void logAttestation(Provenance provenance, UUID rosterID, Group attribut\n \n         logger.info(\"Organization {} is attesting a {} purpose between provider {} and patient(s) {}{}\", performer.getWhoReference().getReference(),\n                 reason.getCode(),\n-                performer.getOnBehalfOfReference().getReference(), attributedPatients, groupIDLog);\n+                practitionerUUID, attributedPatients, groupIDLog);\n+\n+        verifyHeader(practitionerUUID, attributionRoster);\n+    }\n+\n+    private void verifyHeader(String practitionerUUID, Group attributionRoster) {\n+        try {\n+            Practitioner practitioner = client.read()\n+                    .resource(Practitioner.class)\n+                    .withId(FHIRExtractors.getEntityUUID(practitionerUUID).toString())\n+                    .encodedJson()\n+                    .execute();\n+\n+            Identifier provenancePractitionerNPI = FHIRExtractors.findMatchingIdentifier(practitioner.getIdentifier(), DPCIdentifierSystem.NPPES);\n+            String groupPractitionerNPI = FHIRExtractors.getAttributedNPI(attributionRoster);\n+\n+            if (!provenancePractitionerNPI.getValue().equals(groupPractitionerNPI)) {\n+                throw new WebApplicationException(\"Provenance header's provider does not match group provider\");\n+            }\n+        } catch(ResourceNotFoundException e) {\n+            throw new WebApplicationException(\"Could not find provider defined in provenance header\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzA3Mg=="}, "originalCommit": {"oid": "0b70654a71666a67c25c4d9da553d3f747218419"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDIzNTQwOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjozNzoxNVrOG631Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjozNzoxNVrOG631Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4NTMzOA==", "bodyText": "It looks like we've established a pattern of using constants for response codes, either from Response.Status or HttpStatus, so it may make sense to do that here (e.g., HttpStatus.UNPROCESSABLE_ENTITY_422).", "url": "https://github.com/CMSgov/dpc-app/pull/921#discussion_r464385338", "createdAt": "2020-08-03T12:37:15Z", "author": {"login": "em1"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -431,7 +437,29 @@ private void logAttestation(Provenance provenance, UUID rosterID, Group attribut\n \n         logger.info(\"Organization {} is attesting a {} purpose between provider {} and patient(s) {}{}\", performer.getWhoReference().getReference(),\n                 reason.getCode(),\n-                performer.getOnBehalfOfReference().getReference(), attributedPatients, groupIDLog);\n+                practitionerUUID, attributedPatients, groupIDLog);\n+\n+        verifyHeader(practitionerUUID, attributionRoster);\n+    }\n+\n+    private void verifyHeader(String practitionerUUID, Group attributionRoster) {\n+        try {\n+            Practitioner practitioner = client.read()\n+                    .resource(Practitioner.class)\n+                    .withId(FHIRExtractors.getEntityUUID(practitionerUUID).toString())\n+                    .encodedJson()\n+                    .execute();\n+\n+            Identifier provenancePractitionerNPI = FHIRExtractors.findMatchingIdentifier(practitioner.getIdentifier(), DPCIdentifierSystem.NPPES);\n+            String groupPractitionerNPI = FHIRExtractors.getAttributedNPI(attributionRoster);\n+\n+            if (!provenancePractitionerNPI.getValue().equals(groupPractitionerNPI)) {\n+                throw new WebApplicationException(\"Provenance header's provider does not match group provider\", Response.status(422).build());\n+            }\n+        } catch(ResourceNotFoundException e) {\n+            throw new WebApplicationException(\"Could not find provider defined in provenance header\", Response.status(422).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe5b31d5eb8a43873c40b132d6000b5d19fc471"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}