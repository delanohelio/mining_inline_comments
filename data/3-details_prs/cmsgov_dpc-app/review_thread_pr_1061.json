{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNjk1NTA4", "number": 1061, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1ODo1N1rOEnN5Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToyMDowMVrOEpNVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTU3NTQyOnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/token.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1ODo1OFrOHXsZ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1ODo1OFrOHXsZ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNjg0MQ==", "bodyText": "Function testTokenEndpoints has 73 lines of code (exceeds 50 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/1061#discussion_r494606841", "createdAt": "2020-09-24T20:58:58Z", "author": {"login": "codeclimate"}, "path": "dpc-testing/performance/token.go", "diffHunk": "@@ -0,0 +1,153 @@\n+package main\n+\n+import (\n+\t\"container/list\"\n+\t\"crypto/rsa\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/url\"\n+\n+\tdpcclient \"github.com/CMSgov/dpc-app/dpcclient/lib\"\n+\tvegeta \"github.com/tsenart/vegeta/lib\"\n+)\n+\n+type ClientTokenResp struct {\n+\tResource\n+\tClientToken []byte `json:\"token\"`\n+}\n+\n+type AccessTokenResp struct {\n+\tResource\n+\tAccessToken string `json:\"access_token\"`\n+}\n+\n+func testTokenEndpoints(accessToken string, privateKey *rsa.PrivateKey, keyID string, clientToken []byte) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a00ef1b2f913540714ac83877e961d4b27b58f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ1NTA5OnYy", "diffSide": "RIGHT", "path": "dpc-testing/performance/key.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToyMDowMVrOHavvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTo1MDo0NlrOHawm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzE1Ng==", "bodyText": "This is probably due to my limited knowledge of Go, but I'm not finding the definition of generateKeyPairAndSignature", "url": "https://github.com/CMSgov/dpc-app/pull/1061#discussion_r497807156", "createdAt": "2020-09-30T21:20:01Z", "author": {"login": "jonfulk"}, "path": "dpc-testing/performance/key.go", "diffHunk": "@@ -0,0 +1,74 @@\n+package main\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\tvegeta \"github.com/tsenart/vegeta/lib\"\n+)\n+\n+func testKeyEndpoints(accessToken string) {\n+\n+\tresps := runTestWithTargeter(fmt.Sprintf(\"POST %s/Key\", apiURL), newPOSTKeyTargeter(accessToken), 5, 5)\n+\tvar keyIDs []string\n+\tfor _, resp := range resps {\n+\t\tvar result Resource\n+\t\tjson.Unmarshal(resp, &result)\n+\t\tkeyIDs = append(keyIDs, result.ID)\n+\t}\n+\n+\tgetKeysTarget := vegeta.Target{\n+\t\tMethod: \"GET\",\n+\t\tURL:    fmt.Sprintf(\"%s%s\", apiURL, \"/Key\"),\n+\t\tHeader: map[string][]string{\n+\t\t\t\"Accept\":        {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t},\n+\t}\n+\trunTest(getKeysTarget, 5, 5)\n+\n+\tgetKeyTarget := vegeta.Target{\n+\t\tMethod: \"GET\",\n+\t\tURL:    fmt.Sprintf(\"%s%s%s\", apiURL, \"/Key/\", keyIDs[0]),\n+\t\tHeader: map[string][]string{\n+\t\t\t\"Accept\":        {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t},\n+\t}\n+\trunTest(getKeyTarget, 5, 5)\n+\n+\tdeleteKeyTargeter := newDELETEKeyTargeter(accessToken, func() string {\n+\t\tkeyID := keyIDs[0]\n+\t\tkeyIDs = keyIDs[1:]\n+\t\treturn keyID\n+\t})\n+\trunTestWithTargeter(fmt.Sprintf(\"DELETE %s/Key/{id}\", apiURL), deleteKeyTargeter, 5, 5)\n+}\n+\n+func newPOSTKeyTargeter(accessToken string) vegeta.Targeter {\n+\treturn func(t *vegeta.Target) error {\n+\t\tt.Method = \"POST\"\n+\t\tt.URL = fmt.Sprintf(\"%s/Key\", apiURL)\n+\t\tt.Header = map[string][]string{\n+\t\t\t\"Content-Type\":  {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t}\n+\n+\t\tpubKeyStr, _, signature := generateKeyPairAndSignature()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a00ef1b2f913540714ac83877e961d4b27b58f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyMTQzNg==", "bodyText": "Thanks for taking a look! That function is in setup.go, in the same package main: https://github.com/CMSgov/dpc-app/blob/master/dpc-testing/performance/setup.go#L78", "url": "https://github.com/CMSgov/dpc-app/pull/1061#discussion_r497821436", "createdAt": "2020-09-30T21:50:46Z", "author": {"login": "em1"}, "path": "dpc-testing/performance/key.go", "diffHunk": "@@ -0,0 +1,74 @@\n+package main\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\tvegeta \"github.com/tsenart/vegeta/lib\"\n+)\n+\n+func testKeyEndpoints(accessToken string) {\n+\n+\tresps := runTestWithTargeter(fmt.Sprintf(\"POST %s/Key\", apiURL), newPOSTKeyTargeter(accessToken), 5, 5)\n+\tvar keyIDs []string\n+\tfor _, resp := range resps {\n+\t\tvar result Resource\n+\t\tjson.Unmarshal(resp, &result)\n+\t\tkeyIDs = append(keyIDs, result.ID)\n+\t}\n+\n+\tgetKeysTarget := vegeta.Target{\n+\t\tMethod: \"GET\",\n+\t\tURL:    fmt.Sprintf(\"%s%s\", apiURL, \"/Key\"),\n+\t\tHeader: map[string][]string{\n+\t\t\t\"Accept\":        {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t},\n+\t}\n+\trunTest(getKeysTarget, 5, 5)\n+\n+\tgetKeyTarget := vegeta.Target{\n+\t\tMethod: \"GET\",\n+\t\tURL:    fmt.Sprintf(\"%s%s%s\", apiURL, \"/Key/\", keyIDs[0]),\n+\t\tHeader: map[string][]string{\n+\t\t\t\"Accept\":        {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t},\n+\t}\n+\trunTest(getKeyTarget, 5, 5)\n+\n+\tdeleteKeyTargeter := newDELETEKeyTargeter(accessToken, func() string {\n+\t\tkeyID := keyIDs[0]\n+\t\tkeyIDs = keyIDs[1:]\n+\t\treturn keyID\n+\t})\n+\trunTestWithTargeter(fmt.Sprintf(\"DELETE %s/Key/{id}\", apiURL), deleteKeyTargeter, 5, 5)\n+}\n+\n+func newPOSTKeyTargeter(accessToken string) vegeta.Targeter {\n+\treturn func(t *vegeta.Target) error {\n+\t\tt.Method = \"POST\"\n+\t\tt.URL = fmt.Sprintf(\"%s/Key\", apiURL)\n+\t\tt.Header = map[string][]string{\n+\t\t\t\"Content-Type\":  {\"application/json\"},\n+\t\t\t\"Authorization\": {fmt.Sprintf(\"Bearer %s\", accessToken)},\n+\t\t}\n+\n+\t\tpubKeyStr, _, signature := generateKeyPairAndSignature()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzE1Ng=="}, "originalCommit": {"oid": "68a00ef1b2f913540714ac83877e961d4b27b58f"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 89, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}