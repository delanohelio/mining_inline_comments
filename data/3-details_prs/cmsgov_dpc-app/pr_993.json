{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTk2MTMy", "number": 993, "title": "DPC-389 tweak logging to one line", "bodyText": "Fixes DPC-389\n\nHave the logging on one line to easily correlate the different variables used by look back easier by EoB\nProposed Changes\n\n\nMove check of look back variables to a private method so can return after logging the different variables\nAdd some more tests to look back\n\nChange Details\n\nSecurity Implications\nThe only new logging change here is that we can now correlate all the different eob information with the eob itself through the claim id\n\n\n new software dependencies\n\n\n\n security controls or supporting software altered\n\n\n\n new data stored or transmitted\n\n\n\n security checklist is completed for this change\n\n\n\n requires more information or team discussion to evaluate security implications\n\n\n\n no PHI/PII is affected by this change\n\n\nAcceptance Validation\n\n\nFeedback Requested", "createdAt": "2020-08-20T02:53:37Z", "url": "https://github.com/CMSgov/dpc-app/pull/993", "merged": true, "mergeCommit": {"oid": "5076253398d6be55be1621f1404d4c22ef27c524"}, "closed": true, "closedAt": "2020-08-24T18:01:49Z", "author": {"login": "MrBilnon"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAnGqygH2gAyNDcwNTk2MTMyOjMyMWM0MjU1ZGU3ZjIyOGY3NDM2YjJkYzJlYmU0MGY4ODNkYzkzMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCGDQKAH2gAyNDcwNTk2MTMyOjE2ZWFkNzVhYTk2ZTUwOTQzMzA1Yjg2NDYzZmVkM2Y2ZTQ5ZTBmZTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/321c4255de7f228f7436b2dc2ebe40f883dc9310", "committedDate": "2020-08-20T02:50:49Z", "message": "tweak logging to one line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDk3ODUw", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-471097850", "createdAt": "2020-08-20T03:13:44Z", "commit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMzo0NFrOHDn8mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMzo0NFrOHDn8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI2Nw==", "bodyText": "Refactor this method to not always return the same value.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473562267", "createdAt": "2020-08-20T03:13:44Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n+\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n+\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI3MA==", "bodyText": "Call \"optionalBillingPeriod.isPresent()\" before accessing the value.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473562270", "createdAt": "2020-08-20T03:13:44Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n+\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n+\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {\n+        Optional<Date> optionalBillingPeriod = Optional.ofNullable(billingPeriod);\n+        Optional<String> optionalProviderID = Optional.ofNullable(providerID);\n+        Optional<String> optionalOrganizationID = Optional.ofNullable(organizationID);\n+        Optional<String> optionalEobOrganizationID = Optional.ofNullable(eobOrganizationID);\n+\n+        if (optionalBillingPeriod.isEmpty() || optionalProviderID.isEmpty() || optionalOrganizationID.isEmpty() || optionalEobOrganizationID.isEmpty()) {\n             LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n             return false;\n         }\n \n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n+        long lookBackMonthsDifference = getMonthsDifference(optionalBillingPeriod.get(), operationsConfig.getLookBackDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI3MQ==", "bodyText": "Method passLookBack has 6 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473562271", "createdAt": "2020-08-20T03:13:44Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n+\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n+\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTQwMjcw", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-471540270", "createdAt": "2020-08-20T12:22:40Z", "commit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyMjo0MFrOHD-USQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyMjo0MFrOHD-USQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyODc3Nw==", "bodyText": "Would it be easier for us to shape the Splunk results if we give each value its own key? I'm thinking that would allow more flexibility than putting values together with -.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473928777", "createdAt": "2020-08-20T12:22:40Z", "author": {"login": "em1"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6489d6ed5ab811dd022438c3efd04b79d2cb2399", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/6489d6ed5ab811dd022438c3efd04b79d2cb2399", "committedDate": "2020-08-20T14:53:26Z", "message": "change log variables, fix a code climate complaint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/c28e3c4df8afe31acaa4a573a46a161f7284e4ac", "committedDate": "2020-08-20T14:54:10Z", "message": "Merge branch 'master' into DPC-389-tweak-logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzIyODgz", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-471722883", "createdAt": "2020-08-20T15:20:52Z", "commit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyMDo1MlrOHEGpnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyMDo1MlrOHEGpnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NTMwOQ==", "bodyText": "Consider simplifying this complex logical expression.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474065309", "createdAt": "2020-08-20T15:20:52Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,68 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n-\n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n-\n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, eobProviders={}, jobProvider={}, eobOrganization={} jobOrganization={}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n \n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n \n-        return hasClaim;\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {\n+        Optional<Date> optionalBillingPeriod = Optional.ofNullable(billingPeriod);\n+        Optional<String> optionalProviderID = Optional.ofNullable(providerID);\n+        Optional<String> optionalOrganizationID = Optional.ofNullable(organizationID);\n+        Optional<String> optionalEobOrganizationID = Optional.ofNullable(eobOrganizationID);\n+\n+        boolean result = false;\n+        if (optionalBillingPeriod.isPresent() && optionalProviderID.isPresent() && optionalOrganizationID.isPresent() && optionalEobOrganizationID.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTEwNDM5", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-471910439", "createdAt": "2020-08-20T19:18:02Z", "commit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDAxNjI3", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-472001627", "createdAt": "2020-08-20T21:33:39Z", "commit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTozMzo0MFrOHEUEWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTozMzo0MFrOHEUEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4NTE0Ng==", "bodyText": "For DPC-572, it would be helpful to have these 3 booleans as well as the lookBackMonthsDifference included in the logs. Could we return a list of these values to the logging statement and log those as well as the result of the aggregation of them?", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474285146", "createdAt": "2020-08-20T21:33:40Z", "author": {"login": "jonfulk"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,68 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n-\n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n-\n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, eobProviders={}, jobProvider={}, eobOrganization={} jobOrganization={}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n \n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n \n-        return hasClaim;\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {\n+        Optional<Date> optionalBillingPeriod = Optional.ofNullable(billingPeriod);\n+        Optional<String> optionalProviderID = Optional.ofNullable(providerID);\n+        Optional<String> optionalOrganizationID = Optional.ofNullable(organizationID);\n+        Optional<String> optionalEobOrganizationID = Optional.ofNullable(eobOrganizationID);\n+\n+        boolean result = false;\n+        if (optionalBillingPeriod.isPresent() && optionalProviderID.isPresent() && optionalOrganizationID.isPresent() && optionalEobOrganizationID.isPresent()) {\n+            long lookBackMonthsDifference = getMonthsDifference(optionalBillingPeriod.get(), operationsConfig.getLookBackDate());\n+            boolean eobContainsProvider = eobProviderNPIs.contains(optionalProviderID.get());\n+            boolean eobRelatedToOrganization = optionalOrganizationID.get().equals(optionalEobOrganizationID.get());\n+            boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDE2NTA3", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-472016507", "createdAt": "2020-08-20T22:02:33Z", "commit": {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf358053072069b55358b8b46eee4f9e88b8ee4", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/caf358053072069b55358b8b46eee4f9e88b8ee4", "committedDate": "2020-08-20T22:30:24Z", "message": "log more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab2a2dd7f66eea8b364243f4a97ccc053dbede5", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/cab2a2dd7f66eea8b364243f4a97ccc053dbede5", "committedDate": "2020-08-20T22:30:32Z", "message": "Merge remote-tracking branch 'origin/DPC-389-tweak-logging' into DPC-389-tweak-logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDM3NDI5", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-472037429", "createdAt": "2020-08-20T22:52:52Z", "commit": {"oid": "cab2a2dd7f66eea8b364243f4a97ccc053dbede5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1Mjo1MlrOHEV4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1Mjo1MlrOHEV4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNDgxNQ==", "bodyText": "Method passLookBack has 6 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474314815", "createdAt": "2020-08-20T22:52:52Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,89 +42,82 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n-\n-        Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n-\n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n+        Pair<String, Set<String>> npis = extractPractionerNPIs(explanationOfBenefit);\n+        Set<String> allNPIs = new HashSet<>(npis.getRight());\n+        allNPIs.add(npis.getLeft());\n \n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        LookBackAnswer lookBackAnswer = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, allNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, monthsDifference={}, eobProvider={}, eobCareTeamProviders={}, jobProvider={}, eobOrganization={} jobOrganization={}, withinLimit={}, eobProviderMatch={}, eobOrganizationMatch={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), lookBackAnswer.getBillingDateMonthsFromNow(), npis.getLeft(), npis.getRight(), providerNPI, eobOrganizationID,\n+                organizationID, lookBackAnswer.isMatchLookBackLimitCriteria(), lookBackAnswer.isMatchProvidersCriteria(), lookBackAnswer.isMatchOrganizationCriteria());\n \n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n+        MDC.remove(EOB_ID);\n+        return lookBackAnswer.answer();\n+    }\n \n-        return hasClaim;\n+    private LookBackAnswer passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab2a2dd7f66eea8b364243f4a97ccc053dbede5"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/971d467f8b025dcf40efca332c3d53e3913d6b0e", "committedDate": "2020-08-20T22:53:44Z", "message": "fix missing comma"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTQ2MTcz", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-472546173", "createdAt": "2020-08-21T14:38:30Z", "commit": {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDozODozMFrOHEv2LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo1MTowOFrOHEwTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MDI2OQ==", "bodyText": "Based on the conversation yesterday, you might want to break this out into two separate variables:\n\nOrg NPI matches EOB.organization.\nOrg NPI matches EOB.careTeam.\n\nOr that might be part of another ticket/PR. \ud83e\udd37\nIf it is part of another ticket, though, I'd probably rename this one to be clearer, e.g. matchOrganizationNPIToOrganizationCriteria (with a future matchOrganizationNPIToCareTeam field coming in that later ticket).", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474740269", "createdAt": "2020-08-21T14:38:30Z", "author": {"login": "karlmdavis"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackAnswer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package gov.cms.dpc.aggregation.service;\n+\n+public class LookBackAnswer {\n+\n+    private boolean matchLookBackLimitCriteria;\n+    private boolean matchProvidersCriteria;\n+    private boolean matchOrganizationCriteria;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw==", "bodyText": "Am I understanding this correctly? For every rostered (but not yet verified-via-lookback bene), we're logging:\n\nFor each of their claims:\n\nThe claim ID, and associating that with:\n\nThe claim's service date.\nAll of the NPIs from the claim (via EOB.provider, EOB.organization, and EOB.careTeam).\n\n\n\n\n\nIf so, that seems fine by me, but it's also the kind of thing I'd run past Jason to double-check. Have you?\nAlso, a suggestion: because you're doing this detailed logging per-claim, you don't need to do the detailed logging that I was suggesting at the aggregate level, but since you still want that calculation you're setting yourselves up for having to create what feels like a gnarly parsing, aggregation, and math query in Splunk. Personally, I'd do that in the Java code, instead, in whatever code you have that's using LookbackServiceImpl. hasClaimWithin(...). It's likely easier to do in app code and would result in a lot less logging volume, but (I think) more logging value. YMMV, though.", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474747727", "createdAt": "2020-08-21T14:51:08Z", "author": {"login": "karlmdavis"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,89 +42,82 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n-\n-        Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n-\n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n+        Pair<String, Set<String>> npis = extractPractionerNPIs(explanationOfBenefit);\n+        Set<String> allNPIs = new HashSet<>(npis.getRight());\n+        allNPIs.add(npis.getLeft());\n \n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        LookBackAnswer lookBackAnswer = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, allNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, monthsDifference={}, eobProvider={}, eobCareTeamProviders={}, jobProvider={}, eobOrganization={}, jobOrganization={}, withinLimit={}, eobProviderMatch={}, eobOrganizationMatch={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), lookBackAnswer.getBillingDateMonthsFromNow(), npis.getLeft(), npis.getRight(), providerNPI, eobOrganizationID,\n+                organizationID, lookBackAnswer.isMatchLookBackLimitCriteria(), lookBackAnswer.isMatchProvidersCriteria(), lookBackAnswer.isMatchOrganizationCriteria());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTcyNDU1", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-472572455", "createdAt": "2020-08-21T15:08:53Z", "commit": {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTc3ODI3", "url": "https://github.com/CMSgov/dpc-app/pull/993#pullrequestreview-472577827", "createdAt": "2020-08-21T15:16:02Z", "commit": {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7580a9f7156de0d35ef88bae2382dc76d1e9a608", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/7580a9f7156de0d35ef88bae2382dc76d1e9a608", "committedDate": "2020-08-21T15:29:38Z", "message": "Merge branch 'master' into DPC-389-tweak-logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd55e41deb9ea550abb7a6624f693e1eab983cbf", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/bd55e41deb9ea550abb7a6624f693e1eab983cbf", "committedDate": "2020-08-21T17:50:30Z", "message": "Merge branch 'master' into DPC-389-tweak-logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ead75aa96e50943305b86463fed3f6e49e0fe0", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/16ead75aa96e50943305b86463fed3f6e49e0fe0", "committedDate": "2020-08-24T17:28:04Z", "message": "Merge branch 'master' into DPC-389-tweak-logging"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 365, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}