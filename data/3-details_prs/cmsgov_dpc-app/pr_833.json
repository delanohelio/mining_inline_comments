{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NDUzNDYz", "number": 833, "title": "DPC-136: Add support for creating and updating Consent resources", "bodyText": "Why\nFor test data and in the future, we will need the consent service to include endpoints for creating and updating records.\nWhat Changed\n\nPOST operation added to /Consent\nPUT operation added to /Consent/{id}\n\nTickets closed:\nDPC-136\nChecklist\n\n All tests are passing via make ci-app (app change) and make ci-web (website change)\n Swagger documentation has been updated\n FHIR documentation has been updated\n Any required dpc-ops changes have a PR submitted and mentioned in this ticket\n Any manual migration steps are documented, scripts written (where applicable), and tested\n Before merging, any required dpc-ops changes have been approved and merged into master of the dpc-ops repo", "createdAt": "2020-06-05T13:35:16Z", "url": "https://github.com/CMSgov/dpc-app/pull/833", "merged": true, "mergeCommit": {"oid": "29457c015433544aa94a99c04ed273a6ffa94284"}, "closed": true, "closedAt": "2020-06-10T17:27:02Z", "author": {"login": "em1"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoUmtTAFqTQyNTQxNjM2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp714rAFqTQyODIwNDk0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDE2MzYy", "url": "https://github.com/CMSgov/dpc-app/pull/833#pullrequestreview-425416362", "createdAt": "2020-06-05T15:43:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0MzoyNlrOGfzu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0MzoyNlrOGfzu6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNjYzNQ==", "bodyText": "Method fromFhir has 35 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/833#discussion_r436006635", "createdAt": "2020-06-05T15:43:26Z", "author": {"login": "codeclimate"}, "path": "dpc-common/src/main/java/gov/cms/dpc/fhir/converters/entities/ConsentEntityConverter.java", "diffHunk": "@@ -70,14 +79,101 @@ private static String policyRule(String value) {\n         return code;\n     }\n \n+    private static String policyUriToCode(String uri) {\n+        if (OPT_IN_MAGIC.equals(uri)) {\n+            return OPT_IN;\n+        } else if (OPT_OUT_MAGIC.equals(uri)) {\n+            return OPT_OUT;\n+        }\n+        throw new WebApplicationException(String.format(\"Policy rule must be %s or %s.\", OPT_IN_MAGIC, OPT_OUT_MAGIC), Response.Status.BAD_REQUEST);\n+    }\n+\n     private static List<CodeableConcept> category(String loincCode) {\n         // there must code to look up the code systems used in these CodeableConcept values. What is it?\n         CodeableConcept category = new CodeableConcept();\n-        category.addCoding().setSystem(\"http://loinc.org\").setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n+        category.addCoding().setSystem(SYSTEM_LOINC).setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n         return List.of(category);\n     }\n \n-    public static Consent convert(ConsentEntity consentEntity, String orgURL, String fhirURL) {\n+    private static String categoriesToLoincCode(List<CodeableConcept> categories) {\n+        if (categories == null || categories.size() != 1) {\n+            throw new WebApplicationException(\"Must include one category\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        CodeableConcept category = categories.get(0);\n+        List<Coding> codings = category.getCoding();\n+        if (codings == null || codings.size() != 1) {\n+            throw new WebApplicationException(\"Category must have one coding\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Coding coding = category.getCodingFirstRep();\n+        if (!SYSTEM_LOINC.equals(coding.getSystem()) || !CATEGORY_LOINC_CODE.equals(coding.getCode())) {\n+            throw new WebApplicationException(String.format(\"Category coding must have system %s and code %s\", SYSTEM_LOINC, CATEGORY_LOINC_CODE), HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        return coding.getCode();\n+    }\n+\n+    private static UUID organizationsToCustodianUUID(List<Reference> orgRefs) {\n+        if (orgRefs == null || orgRefs.size() != 1) {\n+            throw new WebApplicationException(\"Must include one organization\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Reference orgRef = orgRefs.get(0);\n+        if (StringUtils.isBlank(orgRef.getReference())) {\n+            throw new WebApplicationException(\"Organization must include reference\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+        return FHIRExtractors.getEntityUUID(orgRef.getReference());\n+    }\n+\n+    public static ConsentEntity fromFhir(Consent consent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDU3Mjkx", "url": "https://github.com/CMSgov/dpc-app/pull/833#pullrequestreview-425457291", "createdAt": "2020-06-05T16:40:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo0MDowNFrOGf1m1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo0MDowNFrOGf1m1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzNzMzNQ==", "bodyText": "Method fromFhir has 27 lines of code (exceeds 25 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/833#discussion_r436037335", "createdAt": "2020-06-05T16:40:04Z", "author": {"login": "codeclimate"}, "path": "dpc-common/src/main/java/gov/cms/dpc/fhir/converters/entities/ConsentEntityConverter.java", "diffHunk": "@@ -70,14 +79,102 @@ private static String policyRule(String value) {\n         return code;\n     }\n \n+    private static String policyUriToCode(String uri) {\n+        if (OPT_IN_MAGIC.equals(uri)) {\n+            return OPT_IN;\n+        } else if (OPT_OUT_MAGIC.equals(uri)) {\n+            return OPT_OUT;\n+        }\n+        throw new WebApplicationException(String.format(\"Policy rule must be %s or %s.\", OPT_IN_MAGIC, OPT_OUT_MAGIC), Response.Status.BAD_REQUEST);\n+    }\n+\n     private static List<CodeableConcept> category(String loincCode) {\n         // there must code to look up the code systems used in these CodeableConcept values. What is it?\n         CodeableConcept category = new CodeableConcept();\n-        category.addCoding().setSystem(\"http://loinc.org\").setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n+        category.addCoding().setSystem(SYSTEM_LOINC).setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n         return List.of(category);\n     }\n \n-    public static Consent convert(ConsentEntity consentEntity, String orgURL, String fhirURL) {\n+    private static String categoriesToLoincCode(List<CodeableConcept> categories) {\n+        if (categories == null || categories.size() != 1) {\n+            throw new WebApplicationException(\"Must include one category\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        CodeableConcept category = categories.get(0);\n+        List<Coding> codings = category.getCoding();\n+        if (codings == null || codings.size() != 1) {\n+            throw new WebApplicationException(\"Category must have one coding\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Coding coding = category.getCodingFirstRep();\n+        if (!SYSTEM_LOINC.equals(coding.getSystem()) || !CATEGORY_LOINC_CODE.equals(coding.getCode())) {\n+            throw new WebApplicationException(String.format(\"Category coding must have system %s and code %s\", SYSTEM_LOINC, CATEGORY_LOINC_CODE), HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        return coding.getCode();\n+    }\n+\n+    private static UUID organizationsToCustodianUUID(List<Reference> orgRefs) {\n+        if (orgRefs == null || orgRefs.size() != 1) {\n+            throw new WebApplicationException(\"Must include one organization\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Reference orgRef = orgRefs.get(0);\n+        if (StringUtils.isBlank(orgRef.getReference())) {\n+            throw new WebApplicationException(\"Organization must include reference\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+        return FHIRExtractors.getEntityUUID(orgRef.getReference());\n+    }\n+\n+    private static String mbiFromPatientReference(String patientRefStr) {\n+        String mbi = \"\";\n+        Pattern patientIdPattern = Pattern.compile(\"/Patient\\\\?identity=\\\\|(?<mbi>\\\\d[a-zA-Z][a-zA-Z0-9]\\\\d[a-zA-Z][a-zA-Z0-9]\\\\d[a-zA-Z]{2}\\\\d{2})\");\n+        Matcher matcher = patientIdPattern.matcher(patientRefStr);\n+        if (matcher.find()) {\n+            mbi = matcher.group(\"mbi\");\n+        }\n+        return mbi;\n+    }\n+\n+    public static ConsentEntity fromFhir(Consent consent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e58d87ec36f79210b3db129d4ee5473675a6af", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/c9e58d87ec36f79210b3db129d4ee5473675a6af", "committedDate": "2020-06-10T15:27:40Z", "message": "Consent create and update WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4eb33775bf981e09b9788a2f13876b2426ed116", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/c4eb33775bf981e09b9788a2f13876b2426ed116", "committedDate": "2020-06-10T15:27:43Z", "message": "Update consent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "011f997ff398e6a0367bafb43cf82f629918bee0", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/011f997ff398e6a0367bafb43cf82f629918bee0", "committedDate": "2020-06-10T15:27:43Z", "message": "More consent fields for converter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69dc62433ff7abf18d846f47388909c7756e6ad1", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/69dc62433ff7abf18d846f47388909c7756e6ad1", "committedDate": "2020-06-10T15:27:43Z", "message": "Create/update consent Postman tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "897bef0abb5b61bc53f0c4f598c86284003530d1", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/897bef0abb5b61bc53f0c4f598c86284003530d1", "committedDate": "2020-06-10T15:27:44Z", "message": "Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a896de802e589bb53df821e775d6ddb50dd81db", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/3a896de802e589bb53df821e775d6ddb50dd81db", "committedDate": "2020-06-10T15:27:44Z", "message": "Postman test startup fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea1011d69f512ad26bb342960b6e4a57658f07d", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/2ea1011d69f512ad26bb342960b6e4a57658f07d", "committedDate": "2020-06-10T15:27:44Z", "message": "Shorten fromFhir() a bit (but not enough for Code Climate)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2ea1011d69f512ad26bb342960b6e4a57658f07d", "author": {"user": {"login": "em1", "name": null}}, "url": "https://github.com/CMSgov/dpc-app/commit/2ea1011d69f512ad26bb342960b6e4a57658f07d", "committedDate": "2020-06-10T15:27:44Z", "message": "Shorten fromFhir() a bit (but not enough for Code Climate)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjA0OTQ4", "url": "https://github.com/CMSgov/dpc-app/pull/833#pullrequestreview-428204948", "createdAt": "2020-06-10T16:00:14Z", "commit": {"oid": "2ea1011d69f512ad26bb342960b6e4a57658f07d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 478, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}