{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTI4MTg4", "number": 721, "title": "DPC-25 Common code", "bodyText": "Why\nCommon code that can be used between the patient everything code and look back\nWhat Changed\nDescribe the changes made to the code base including new features, refactoring of existing services and user visible API changes.\nChoices Made\nAdded this code to dpc-queue instead of dpc-common as there are circular dependencies when added to dpc-common when used in dpc-attribution\nTickets closed:\nGive a list of tickets closed in this PR.\nFuture Work\nList any additional tickets that have either been created due to work in this PR, or existing tickets that expand upon the feature or provide additional fixes.\nChecklist\n\n All tests are passing via make ci-app (app change) and make ci-web (website change)\n Swagger documentation has been updated\n FHIR documentation has been updated\n Any required dpc-ops changes have a PR submitted and mentioned in this ticket\n Any manual migration steps are documented, scripts written (where applicable), and tested\n Before merging, any required dpc-ops changes have been approved and merged into master of the dpc-ops repo", "createdAt": "2020-03-30T22:00:27Z", "url": "https://github.com/CMSgov/dpc-app/pull/721", "merged": true, "mergeCommit": {"oid": "a2a1bc7cfe24ee497f98f572b0a2ec7ae1075684"}, "closed": true, "closedAt": "2020-04-03T15:55:36Z", "author": {"login": "MrBilnon"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS1zMIAH2gAyMzk1OTI4MTg4OjBjYjU1NTA2MmNkNzJlNGM2M2M4MzBjNmUzYjAzY2E1NGU1ODMwMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUB5lNAH2gAyMzk1OTI4MTg4OjNjOWU3YzI5MWVlMDc4NzU4YzEzYmIwOThlYWIwMzhkNGU5NmZkYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/0cb555062cd72e4c63c830c6e3b03ca54e583023", "committedDate": "2020-03-30T21:57:36Z", "message": "move to queue module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjcxODUz", "url": "https://github.com/CMSgov/dpc-app/pull/721#pullrequestreview-384271853", "createdAt": "2020-03-30T22:17:17Z", "commit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNzoxOFrOF9-SIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwMA==", "bodyText": "Similar blocks of code found in 6 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527900", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwMg==", "bodyText": "Call \"optionalBatches.isPresent()\" before accessing the value.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527902", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwNA==", "bodyText": "Call \"batchFile.isPresent()\" before accessing the value.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527904", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> finalStatusFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                finalStatusFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        finalStatusFuture.completeOnTimeout(Optional.empty(), JOB_POLLING_TIMEOUT, TimeUnit.SECONDS);\n+\n+        try {\n+            return finalStatusFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {\n+        final Bundle bundle = new Bundle().setType(Bundle.BundleType.SEARCHSET);\n+\n+        batches.stream()\n+                .map(JobQueueBatch::getJobQueueBatchFiles)\n+                .flatMap(List::stream)\n+                .filter(bf -> resourceTypes.contains(bf.getResourceType()))\n+                .forEach(batchFile -> {\n+                    java.nio.file.Path path = Paths.get(String.format(\"%s/%s.ndjson\", exportPath, batchFile.getFileName()));\n+                    addResourceEntries(Resource.class, path, bundle);\n+                });\n+\n+\n+        // set a bundle id here? anything else?\n+        bundle.setId(UUID.randomUUID().toString());\n+        return bundle.setTotal(bundle.getEntry().size());\n+    }\n+\n+    private void addResourceEntries(Class<? extends Resource> clazz, java.nio.file.Path path, Bundle bundle) {\n+        try (BufferedReader br = Files.newBufferedReader(path)) {\n+            br.lines().forEach(line -> {\n+                Resource r = fhirContext.newJsonParser().parseResource(clazz, line);\n+                bundle.addEntry().setResource(r);\n+            });\n+        } catch (IOException e) {\n+            throw new DataRetrievalException(String.format(\"Unable to read resource because %s\", e.getMessage()));\n+        }\n+    }\n+\n+    OperationOutcome assembleOperationOutcome(List<JobQueueBatch> batches) {\n+        // There is only ever 1 OperationOutcome file\n+        final Optional<JobQueueBatchFile> batchFile = batches.stream()\n+                .map(b -> b.getJobQueueFileLatest(ResourceType.OperationOutcome))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst();\n+\n+\n+        if (batchFile.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve operationOutcome\");\n+        }\n+\n+        OperationOutcome outcome = new OperationOutcome();\n+        java.nio.file.Path path = Paths.get(String.format(\"%s/%s.ndjson\", exportPath, batchFile.get().getFileName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzkwNg==", "bodyText": "Remove this unused method parameter \"resourceTypes\".", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r400527906", "createdAt": "2020-03-30T22:17:18Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private static final int JOB_POLLING_TIMEOUT = 3 * 5;\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID, UUID providerID, List<String> patientIDs, ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), null, null);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> finalStatusFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                finalStatusFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        finalStatusFuture.completeOnTimeout(Optional.empty(), JOB_POLLING_TIMEOUT, TimeUnit.SECONDS);\n+\n+        try {\n+            return finalStatusFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb555062cd72e4c63c830c6e3b03ca54e583023"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96078ac31656406a3141c867c659a2b3595d750a", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/96078ac31656406a3141c867c659a2b3595d750a", "committedDate": "2020-03-31T06:19:55Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54d511f1da59c86ea81a4b48d4037d34e0a345ab", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/54d511f1da59c86ea81a4b48d4037d34e0a345ab", "committedDate": "2020-03-31T17:50:34Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTg2OTA0", "url": "https://github.com/CMSgov/dpc-app/pull/721#pullrequestreview-384986904", "createdAt": "2020-03-31T18:15:50Z", "commit": {"oid": "54d511f1da59c86ea81a4b48d4037d34e0a345ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxNTo1MFrOF-iQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxNTo1MFrOF-iQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNzMxMw==", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401117313", "createdAt": "2020-03-31T18:15:50Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54d511f1da59c86ea81a4b48d4037d34e0a345ab"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/8089049a9c85544074ba6d2efef6c610674554a7", "committedDate": "2020-04-01T02:55:41Z", "message": "allow passing in since and transactionTime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjM5MTkw", "url": "https://github.com/CMSgov/dpc-app/pull/721#pullrequestreview-385239190", "createdAt": "2020-04-01T03:14:27Z", "commit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoxNDoyN1rOF-vYRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzoxNDoyN1rOF-vYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMjI5NQ==", "bodyText": "Method retrieveData has 6 arguments (exceeds 4 allowed). Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401332295", "createdAt": "2020-04-01T03:14:27Z", "author": {"login": "codeclimate"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.OffsetDateTime;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath, @JobTimeout  int jobTimeoutInSeconds) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+        this.jobTimeoutInSeconds = jobTimeoutInSeconds;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTU2NTA1", "url": "https://github.com/CMSgov/dpc-app/pull/721#pullrequestreview-385556505", "createdAt": "2020-04-01T12:56:40Z", "commit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NjA3OTg2", "url": "https://github.com/CMSgov/dpc-app/pull/721#pullrequestreview-385607986", "createdAt": "2020-04-01T13:54:00Z", "commit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1NDowMFrOF_Bvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1NDowMFrOF_Bvzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMzIzMA==", "bodyText": "What's the reason for not importing java.nio.file.Path?", "url": "https://github.com/CMSgov/dpc-app/pull/721#discussion_r401633230", "createdAt": "2020-04-01T13:54:00Z", "author": {"login": "em1"}, "path": "dpc-queue/src/main/java/gov/cms/dpc/queue/service/DataService.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package gov.cms.dpc.queue.service;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import gov.cms.dpc.common.annotations.ExportPath;\n+import gov.cms.dpc.common.annotations.JobTimeout;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.JobStatus;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalException;\n+import gov.cms.dpc.queue.exceptions.DataRetrievalRetryException;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+\n+import javax.inject.Inject;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.OffsetDateTime;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n+\n+public class DataService {\n+\n+    private IJobQueue queue;\n+    private String exportPath;\n+    private FhirContext fhirContext;\n+    private int jobTimeoutInSeconds;\n+\n+    @Inject\n+    public DataService(IJobQueue queue, FhirContext fhirContext, @ExportPath String exportPath, @JobTimeout  int jobTimeoutInSeconds) {\n+        this.queue = queue;\n+        this.fhirContext = fhirContext;\n+        this.exportPath = exportPath;\n+        this.jobTimeoutInSeconds = jobTimeoutInSeconds;\n+    }\n+\n+    public Resource retrieveData(UUID organizationID,\n+                                 UUID providerID,\n+                                 List<String> patientIDs,\n+                                 OffsetDateTime since,\n+                                 OffsetDateTime transactionTime,\n+                                 ResourceType... resourceTypes) {\n+        UUID jobID = this.queue.createJob(organizationID, providerID.toString(), patientIDs, List.of(resourceTypes), since, transactionTime);\n+        Optional<List<JobQueueBatch>> optionalBatches = waitForJobToComplete(jobID, organizationID, this.queue);\n+\n+        if (optionalBatches.isEmpty()) {\n+            throw new DataRetrievalException(\"Failed to retrieve data\");\n+        }\n+\n+        List<JobQueueBatch> batches = optionalBatches.get();\n+        List<JobQueueBatchFile> files = batches.stream().map(JobQueueBatch::getJobQueueBatchFiles).flatMap(List::stream).collect(Collectors.toList());\n+        if (files.size() == 1 && files.get(0).getResourceType() == ResourceType.OperationOutcome) {\n+            return assembleOperationOutcome(batches);\n+        } else {\n+            return assembleBundleFromBatches(batches, Arrays.asList(resourceTypes));\n+        }\n+    }\n+\n+    private Optional<List<JobQueueBatch>> waitForJobToComplete(UUID jobID, UUID organizationID, IJobQueue queue) {\n+        CompletableFuture<Optional<List<JobQueueBatch>>> dataFuture = new CompletableFuture<>();\n+        final ScheduledExecutorService poller = Executors.newSingleThreadScheduledExecutor();\n+        final ScheduledFuture<?> task = poller.scheduleAtFixedRate(() -> {\n+            try {\n+                List<JobQueueBatch> batches = getJobBatch(jobID, organizationID, queue);\n+                dataFuture.complete(Optional.of(batches));\n+            } catch (DataRetrievalRetryException e) {\n+                //retrying\n+            }\n+        }, 0, 250, TimeUnit.MILLISECONDS);\n+\n+        // this timeout value should probably be adjusted according to the number of types being requested\n+        dataFuture.completeOnTimeout(Optional.empty(), jobTimeoutInSeconds, TimeUnit.SECONDS);\n+\n+        try {\n+            return dataFuture.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return Optional.empty();\n+        } finally {\n+            task.cancel(true);\n+            poller.shutdown();\n+        }\n+    }\n+\n+    private List<JobQueueBatch> getJobBatch(UUID jobID, UUID organizationId, IJobQueue queue) throws DataRetrievalRetryException {\n+        final List<JobQueueBatch> batches = queue.getJobBatches(jobID);\n+        if (batches.isEmpty()) {\n+            throw new DataRetrievalRetryException();\n+        }\n+\n+        Set<JobStatus> jobStatusSet = batches\n+                .stream()\n+                .filter(b -> b.getOrgID().equals(organizationId))\n+                .filter(JobQueueBatch::isValid)\n+                .map(JobQueueBatch::getStatus).collect(Collectors.toSet());\n+\n+        if (jobStatusSet.size() == 1 && jobStatusSet.contains(JobStatus.COMPLETED)) {\n+            return batches;\n+        } else if (jobStatusSet.contains(JobStatus.FAILED)) {\n+            throw new DataRetrievalException(\"Failed to retrieve batches\");\n+        } else {\n+            throw new DataRetrievalRetryException();\n+        }\n+    }\n+\n+    private Bundle assembleBundleFromBatches(List<JobQueueBatch> batches, List<ResourceType> resourceTypes) {\n+        final Bundle bundle = new Bundle().setType(Bundle.BundleType.SEARCHSET);\n+\n+        batches.stream()\n+                .map(JobQueueBatch::getJobQueueBatchFiles)\n+                .flatMap(List::stream)\n+                .filter(bf -> resourceTypes.contains(bf.getResourceType()))\n+                .forEach(batchFile -> {\n+                    java.nio.file.Path path = Paths.get(String.format(\"%s/%s.ndjson\", exportPath, batchFile.getFileName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8089049a9c85544074ba6d2efef6c610674554a7"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec772e02585d409f7e9eccafd9c2c8885e1d9fbe", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/ec772e02585d409f7e9eccafd9c2c8885e1d9fbe", "committedDate": "2020-04-01T16:02:32Z", "message": "try to fix code climate, add log statements, fix PR concerns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db0473fa540f17ff908e637fdea2930ae54c50ff", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/db0473fa540f17ff908e637fdea2930ae54c50ff", "committedDate": "2020-04-01T16:11:56Z", "message": "add documentation and comments to highlight codeclimate issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf61a00629187d5cf54700d0c5ed3b6c4f3ffc8e", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/bf61a00629187d5cf54700d0c5ed3b6c4f3ffc8e", "committedDate": "2020-04-01T18:24:41Z", "message": "Merge branch 'master' into DPC-25-common-code\n\n# Conflicts:\n#\tdpc-api/src/main/java/gov/cms/dpc/api/DPCAPIConfiguration.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Mjc5NjQ0", "url": "https://github.com/CMSgov/dpc-app/pull/721#pullrequestreview-387279644", "createdAt": "2020-04-03T13:56:50Z", "commit": {"oid": "bf61a00629187d5cf54700d0c5ed3b6c4f3ffc8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9470113c265ace356b9b5c4dd4edc48d0ba70f2", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/e9470113c265ace356b9b5c4dd4edc48d0ba70f2", "committedDate": "2020-04-03T14:01:57Z", "message": "Merge branch 'master' into DPC-25-common-code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc7eeadaf53fab51ace852744e4008ae63da742", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/acc7eeadaf53fab51ace852744e4008ae63da742", "committedDate": "2020-04-03T14:26:13Z", "message": "try to fix code climate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5c860b3fa0787939ddc2c2d204b3551823f8e42", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/c5c860b3fa0787939ddc2c2d204b3551823f8e42", "committedDate": "2020-04-03T14:35:50Z", "message": "try to fix code climate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c9e7c291ee078758c13bb098eab038d4e96fdc7", "author": {"user": {"login": "MrBilnon", "name": "Will H"}}, "url": "https://github.com/CMSgov/dpc-app/commit/3c9e7c291ee078758c13bb098eab038d4e96fdc7", "committedDate": "2020-04-03T14:37:22Z", "message": "Merge branch 'master' into DPC-25-common-code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 201, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}