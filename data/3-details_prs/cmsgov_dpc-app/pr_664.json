{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTE0MDYw", "number": 664, "title": "DPC-1171: Queue NPE fixes", "bodyText": "Why\nFrom the ticket:\n\nWe've seen NPEs on the subscriber at AggregationEngine:149. We can add a null check there, but it would be even better to determine how it is ending up null in the first place.\n\nWhat Changed\n\nRefactors the queue stopped check to not use the RxJava disposable as the queue stopped indicator (since it can be null in some cases), and instead use our more reliable thread-safe boolean.\nRefactors the main queue loop to address the following issues:\n\nImproved logging (now includes a trace for when items are being processed, and an output message when the queue stopped entirely)\nSets the queue to a stopped state when it exits the processing loop for any reason\n\nThis should not happen once we fix the root issue, but if this does happen again, the queue will now be marked as unhealthy (due to queueRunning=false and ECS will launch a new instance\n\n\nSwitches from using onErrorResumeNext to retry for error-recovery\n\nThe onErrorResumeNext call was recovering the first time on an error, but it only worked once. The second or third error would not recover\n\n\n\n\nGreatly improved our error recovery unit test to not only verify errors are being handle, but multiple errors are being recovered from and processing resumes, allowing a job to complete successfully\n\nChoices Made\n\nThis so far fixes the issue from a generic perspective, and it will allow the queue to either recover from an error or get marked unhealthy. We haven't fixed the issue that lead to this yet (that seems to be db-related).\n\nTickets closed:\n\nEventually DPC-1171\n\nFuture Work\nChecklist\n\n All tests are passing via make ci-app (app change) and make ci-web (website change)\n Swagger documentation has been updated\n FHIR documentation has been updated\n Any required dpc-ops changes have a PR submitted and mentioned in this ticket\n Any manual migration steps are documented, scripts written (where applicable), and tested\n Before merging, any required dpc-ops changes have been approved and merged into master of the dpc-ops repo", "createdAt": "2020-03-06T16:35:25Z", "url": "https://github.com/CMSgov/dpc-app/pull/664", "merged": true, "mergeCommit": {"oid": "19cba2857a05183af6942029161fd63bf62a4b76"}, "closed": true, "closedAt": "2020-03-09T20:39:20Z", "author": {"login": "ronaldheft-usds"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKtlXcAH2gAyMzg0OTE0MDYwOmY2NzdmMTUxMDRlMGUzYTdkNTc3ZDI0ZDUwMzU3ODRjYzczMWFjNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMDqdeAFqTM3MTQ5MjgwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f677f15104e0e3a7d577d24d5035784cc731ac60", "author": {"user": {"login": "ronaldheft-usds", "name": "Ron Heft"}}, "url": "https://github.com/CMSgov/dpc-app/commit/f677f15104e0e3a7d577d24d5035784cc731ac60", "committedDate": "2020-03-05T15:51:52Z", "message": "Fix for NPE on queue stop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66101ef10a40041e4fc4b540106fe831975aff00", "author": {"user": {"login": "ronaldheft-usds", "name": "Ron Heft"}}, "url": "https://github.com/CMSgov/dpc-app/commit/66101ef10a40041e4fc4b540106fe831975aff00", "committedDate": "2020-03-05T20:42:59Z", "message": "Refactors the queue listener so it doesn't stop on error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57209c078bbe51b3bc87966afcdd95db6ff0a62b", "author": {"user": {"login": "ronaldheft-usds", "name": "Ron Heft"}}, "url": "https://github.com/CMSgov/dpc-app/commit/57209c078bbe51b3bc87966afcdd95db6ff0a62b", "committedDate": "2020-03-06T16:42:24Z", "message": "DPC-1171: Improves failure unit tests to trigger multiple exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cfd6869f06431066f082592f93cdded1fbf74c1", "author": {"user": {"login": "ronaldheft-usds", "name": "Ron Heft"}}, "url": "https://github.com/CMSgov/dpc-app/commit/4cfd6869f06431066f082592f93cdded1fbf74c1", "committedDate": "2020-03-06T16:43:45Z", "message": "DPC-1171: Batch aggregator needs unit test update to match refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjQzODY1", "url": "https://github.com/CMSgov/dpc-app/pull/664#pullrequestreview-371243865", "createdAt": "2020-03-09T14:44:15Z", "commit": {"oid": "4cfd6869f06431066f082592f93cdded1fbf74c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NDoxNVrOFzrmCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NDo1NFrOFzrn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNTk0Nw==", "bodyText": "Instead of using a defer, I suggest that you use fromCallable. This would handle the case if claimBatch threw an exception.", "url": "https://github.com/CMSgov/dpc-app/pull/664#discussion_r389735947", "createdAt": "2020-03-09T14:44:15Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -110,21 +111,38 @@ public Boolean isRunning() {\n      * The main run-loop of the engine.\n      */\n     protected void pollQueue() {\n-        queueRunning.set(true);\n-        subscribe = Observable.fromCallable(() -> this.queue.claimBatch(aggregatorID))\n-                .doOnNext(job -> logger.trace(\"Polling queue for job\"))\n-                .doOnError(error -> logger.error(\"Unable to complete job.\", error))\n-                .onErrorResumeNext(Observable.empty()) // Keep the queue running on error\n-                .filter(Optional::isPresent)\n-                .map(Optional::get)\n+        this.subscribe = this.createQueueObserver()\n                 .repeatWhen(completed -> {\n-                    logger.debug(String.format(\"No job, polling again in %d milliseconds\", operationsConfig.getPollingFrequency()));\n+                    logger.debug(String.format(\"Configuring queue to poll every %d milliseconds\", operationsConfig.getPollingFrequency()));\n                     return completed.delay(operationsConfig.getPollingFrequency(), TimeUnit.MILLISECONDS);\n                 })\n-                .subscribe(this::processJobBatch, error -> {\n-                    logger.error(\"Fatal error processing the queue! Queue processing is stopping!\", error);\n-                    queueRunning.set(false);\n-                });\n+                .doOnEach(item -> logger.trace(\"Processing item: \" + item.toString()))\n+                .doOnError(error -> logger.error(\"Unable to complete job.\", error))\n+                .retry()\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .subscribe(\n+                        this::processJobBatch,\n+                        error -> {\n+                            logger.error(\"Error processing queue. Exiting...\", error);\n+                            queueRunning.set(false);\n+                        },\n+                        () -> {\n+                            logger.info(\"Finished processing queue. Exiting...\");\n+                            queueRunning.set(false);\n+                        }\n+                );\n+    }\n+\n+    /**\n+     * Creates an observer to monitor the queue\n+     */\n+    private Observable<Optional<JobQueueBatch>> createQueueObserver() {\n+        // Create using defer. This ensures that no events are omitted before a subscriber connects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfd6869f06431066f082592f93cdded1fbf74c1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjQwOA==", "bodyText": "What happens if claimBatch throws an exception? I believe you need a try-catch here.", "url": "https://github.com/CMSgov/dpc-app/pull/664#discussion_r389736408", "createdAt": "2020-03-09T14:44:54Z", "author": {"login": "RickHawesUSDS"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -110,21 +111,38 @@ public Boolean isRunning() {\n      * The main run-loop of the engine.\n      */\n     protected void pollQueue() {\n-        queueRunning.set(true);\n-        subscribe = Observable.fromCallable(() -> this.queue.claimBatch(aggregatorID))\n-                .doOnNext(job -> logger.trace(\"Polling queue for job\"))\n-                .doOnError(error -> logger.error(\"Unable to complete job.\", error))\n-                .onErrorResumeNext(Observable.empty()) // Keep the queue running on error\n-                .filter(Optional::isPresent)\n-                .map(Optional::get)\n+        this.subscribe = this.createQueueObserver()\n                 .repeatWhen(completed -> {\n-                    logger.debug(String.format(\"No job, polling again in %d milliseconds\", operationsConfig.getPollingFrequency()));\n+                    logger.debug(String.format(\"Configuring queue to poll every %d milliseconds\", operationsConfig.getPollingFrequency()));\n                     return completed.delay(operationsConfig.getPollingFrequency(), TimeUnit.MILLISECONDS);\n                 })\n-                .subscribe(this::processJobBatch, error -> {\n-                    logger.error(\"Fatal error processing the queue! Queue processing is stopping!\", error);\n-                    queueRunning.set(false);\n-                });\n+                .doOnEach(item -> logger.trace(\"Processing item: \" + item.toString()))\n+                .doOnError(error -> logger.error(\"Unable to complete job.\", error))\n+                .retry()\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .subscribe(\n+                        this::processJobBatch,\n+                        error -> {\n+                            logger.error(\"Error processing queue. Exiting...\", error);\n+                            queueRunning.set(false);\n+                        },\n+                        () -> {\n+                            logger.info(\"Finished processing queue. Exiting...\");\n+                            queueRunning.set(false);\n+                        }\n+                );\n+    }\n+\n+    /**\n+     * Creates an observer to monitor the queue\n+     */\n+    private Observable<Optional<JobQueueBatch>> createQueueObserver() {\n+        // Create using defer. This ensures that no events are omitted before a subscriber connects\n+        return Observable.defer(() -> {\n+            logger.trace(\"Polling queue for job...\");\n+            return Observable.just(this.queue.claimBatch(this.aggregatorID));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfd6869f06431066f082592f93cdded1fbf74c1"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bcfec404195e893cbb936396bb382ae0f45cdf1", "author": {"user": {"login": "ronaldheft-usds", "name": "Ron Heft"}}, "url": "https://github.com/CMSgov/dpc-app/commit/3bcfec404195e893cbb936396bb382ae0f45cdf1", "committedDate": "2020-03-09T14:53:05Z", "message": "Switch to using fromCallable, which includes defer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjkwMTg1", "url": "https://github.com/CMSgov/dpc-app/pull/664#pullrequestreview-371290185", "createdAt": "2020-03-09T15:35:20Z", "commit": {"oid": "3bcfec404195e893cbb936396bb382ae0f45cdf1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjkwNjcy", "url": "https://github.com/CMSgov/dpc-app/pull/664#pullrequestreview-371290672", "createdAt": "2020-03-09T15:35:52Z", "commit": {"oid": "3bcfec404195e893cbb936396bb382ae0f45cdf1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDkyODAx", "url": "https://github.com/CMSgov/dpc-app/pull/664#pullrequestreview-371492801", "createdAt": "2020-03-09T20:09:16Z", "commit": {"oid": "3bcfec404195e893cbb936396bb382ae0f45cdf1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 168, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}