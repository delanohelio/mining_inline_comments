{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODYwMzky", "number": 996, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyMTo1MVrOEedatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNzoyN1rOEeed7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzc0NzA5OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyMTo1MVrOHKH6rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1NzoyM1rOHKI-Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NzUxNw==", "bodyText": "Do we want to null check the providerOrRosterID before getting UUID?", "url": "https://github.com/CMSgov/dpc-app/pull/996#discussion_r480377517", "createdAt": "2020-08-31T20:21:51Z", "author": {"login": "MrMorie"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,94 +39,64 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c9264904066ccbae8cc3b242e7ed783de39da"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5NDc4Mg==", "bodyText": "I assume it's not possible for the job to have a null providerID", "url": "https://github.com/CMSgov/dpc-app/pull/996#discussion_r480394782", "createdAt": "2020-08-31T20:57:23Z", "author": {"login": "MrBilnon"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,94 +39,64 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NzUxNw=="}, "originalCommit": {"oid": "df6c9264904066ccbae8cc3b242e7ed783de39da"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzc2MzQyOnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyNjo1OFrOHKIE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyODo0OFrOHKIINA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MDExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Pair<String, Set<String>> extractPractionerNPIs(ExplanationOfBenefit explanationOfBenefit) {\n          \n          \n            \n                private Pair<String, Set<String>> extractPractitionerNPIs(ExplanationOfBenefit explanationOfBenefit) {", "url": "https://github.com/CMSgov/dpc-app/pull/996#discussion_r480380116", "createdAt": "2020-08-31T20:26:58Z", "author": {"login": "em1"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,94 +39,64 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n-\n-        Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n-\n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n-\n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n-\n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n-\n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n-\n-        return hasClaim;\n+                .map(Identifier::getValue)\n+                .orElse(null);\n+\n+        Pair<String, Set<String>> npis = extractPractionerNPIs(explanationOfBenefit);\n+        Set<String> allNPIs = new HashSet<>(npis.getRight());\n+        allNPIs.add(npis.getLeft());\n+\n+        LookBackAnswer lookBackAnswer = new LookBackAnswer(providerNPI, organizationID, withinMonth, operationsConfig.getLookBackDate())\n+                .addEobBillingPeriod(billingPeriod)\n+                .addEobOrganization(eobOrganizationID)\n+                .addEobProviders(allNPIs);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, monthsDifference={}, eobProvider={}, eobCareTeamProviders={}, jobProvider={}, eobOrganization={}, jobOrganization={}, withinLimit={}, eobProviderMatch={}, eobOrganizationMatch={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), lookBackAnswer.calculatedMonthDifference(), npis.getLeft(), npis.getRight(), providerNPI, eobOrganizationID,\n+                organizationID, lookBackAnswer.matchDateCriteria(), lookBackAnswer.providerMatchEob(), lookBackAnswer.orgMatchEob());\n+\n+        MDC.remove(EOB_ID);\n+        return lookBackAnswer.matchDateCriteria() && (lookBackAnswer.orgNPIMatchAnyEobNPIs() || lookBackAnswer.providerNPIMatchAnyEobNPIs());\n     }\n \n-    private Set<String> extractPractionerNPIs(ExplanationOfBenefit explanationOfBenefit) {\n-        Set<String> eobProviderNPIs = new HashSet<>();\n-        Optional<String> providerNPI = Optional.ofNullable(explanationOfBenefit)\n+    private Pair<String, Set<String>> extractPractionerNPIs(ExplanationOfBenefit explanationOfBenefit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df6c9264904066ccbae8cc3b242e7ed783de39da"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MDk4MA==", "bodyText": "Actually, maybe this is one case where it should be provider (i.e., extractProviderNpis(), since it's getting all the NPIs from the EoB.", "url": "https://github.com/CMSgov/dpc-app/pull/996#discussion_r480380980", "createdAt": "2020-08-31T20:28:48Z", "author": {"login": "em1"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,94 +39,64 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n-\n-        Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n-\n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n-\n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n-\n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n-\n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n-\n-        return hasClaim;\n+                .map(Identifier::getValue)\n+                .orElse(null);\n+\n+        Pair<String, Set<String>> npis = extractPractionerNPIs(explanationOfBenefit);\n+        Set<String> allNPIs = new HashSet<>(npis.getRight());\n+        allNPIs.add(npis.getLeft());\n+\n+        LookBackAnswer lookBackAnswer = new LookBackAnswer(providerNPI, organizationID, withinMonth, operationsConfig.getLookBackDate())\n+                .addEobBillingPeriod(billingPeriod)\n+                .addEobOrganization(eobOrganizationID)\n+                .addEobProviders(allNPIs);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, monthsDifference={}, eobProvider={}, eobCareTeamProviders={}, jobProvider={}, eobOrganization={}, jobOrganization={}, withinLimit={}, eobProviderMatch={}, eobOrganizationMatch={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), lookBackAnswer.calculatedMonthDifference(), npis.getLeft(), npis.getRight(), providerNPI, eobOrganizationID,\n+                organizationID, lookBackAnswer.matchDateCriteria(), lookBackAnswer.providerMatchEob(), lookBackAnswer.orgMatchEob());\n+\n+        MDC.remove(EOB_ID);\n+        return lookBackAnswer.matchDateCriteria() && (lookBackAnswer.orgNPIMatchAnyEobNPIs() || lookBackAnswer.providerNPIMatchAnyEobNPIs());\n     }\n \n-    private Set<String> extractPractionerNPIs(ExplanationOfBenefit explanationOfBenefit) {\n-        Set<String> eobProviderNPIs = new HashSet<>();\n-        Optional<String> providerNPI = Optional.ofNullable(explanationOfBenefit)\n+    private Pair<String, Set<String>> extractPractionerNPIs(ExplanationOfBenefit explanationOfBenefit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MDExNg=="}, "originalCommit": {"oid": "df6c9264904066ccbae8cc3b242e7ed783de39da"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzkxOTE5OnYy", "diffSide": "RIGHT", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackAnswer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNzoyN1rOHKJjNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMToxNzoyN1rOHKJjNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDI3Nw==", "bodyText": "Similar blocks of code found in 5 locations. Consider refactoring.", "url": "https://github.com/CMSgov/dpc-app/pull/996#discussion_r480404277", "createdAt": "2020-08-31T21:17:27Z", "author": {"login": "codeclimate"}, "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackAnswer.java", "diffHunk": "@@ -1,45 +1,84 @@\n package gov.cms.dpc.aggregation.service;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.time.YearMonth;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n public class LookBackAnswer {\n \n-    private boolean matchLookBackLimitCriteria;\n-    private boolean matchProvidersCriteria;\n-    private boolean matchOrganizationCriteria;\n-    private long billingDateMonthsFromNow;\n+    private final String practitionerNPI;\n+    private final String organizationNPI;\n+    private final long withinMonths;\n+    private final Date lookBackMonth;\n+\n+    private final Set<String> eobProviderNPIs = new HashSet<>();\n+    private String eobOrganizationNPI;\n+    private Date billingPeriodEndDate;\n+\n+    public LookBackAnswer(String practitionerNPI, String organizationNPI, long withinMonths, Date lookBackMonth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9504d3030aca4d789c2ef8610887a0d88b47af14"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 69, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}