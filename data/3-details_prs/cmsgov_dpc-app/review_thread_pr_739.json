{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTE5OTAx", "number": 739, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxOToyMVrODwwoIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo1MDowM1rOD23fyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDU0OTQ0OnYy", "diffSide": "RIGHT", "path": "dpc-common/src/main/java/gov/cms/dpc/common/hibernate/validator/NoHtmlValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxOToyMlrOGD7xmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxOToyMlrOGD7xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODI2Nw==", "bodyText": "Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.", "url": "https://github.com/CMSgov/dpc-app/pull/739#discussion_r406778267", "createdAt": "2020-04-10T14:19:22Z", "author": {"login": "codeclimate"}, "path": "dpc-common/src/main/java/gov/cms/dpc/common/hibernate/validator/NoHtmlValidator.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package gov.cms.dpc.common.hibernate.validator;\n+\n+import gov.cms.dpc.common.annotations.NoHtml;\n+import org.jsoup.Jsoup;\n+import org.jsoup.safety.Whitelist;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+public class NoHtmlValidator implements ConstraintValidator<NoHtml, String> {\n+\n+    public static final String VALIDATION_MESSAGE = \"Cannot contain HTML\";\n+\n+    @Override\n+    public void initialize(NoHtml noHtml) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b1cbbfd1d083309d65de7e3cae5e4b27f7a3d87"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTU3MDMzOnYy", "diffSide": "RIGHT", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/AbstractGroupResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzoxNzoxMFrOGEmKzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToyNDo1M1rOGK4Z4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3Mjg0Nw==", "bodyText": "Should we also be preventing HTML in the FHIR resources like Provenance and Group?", "url": "https://github.com/CMSgov/dpc-app/pull/739#discussion_r407472847", "createdAt": "2020-04-13T13:17:10Z", "author": {"login": "em1"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/AbstractGroupResource.java", "diffHunk": "@@ -26,7 +27,7 @@ protected AbstractGroupResource() {\n     public abstract Response createRoster(OrganizationPrincipal organizationPrincipal, @Valid @Profiled(profile = AttestationProfile.PROFILE_URI) Provenance rosterAttestation, Group attributionRoster);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9af480157accd435d73224cb9711468dd29387e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NzE4MQ==", "bodyText": "@EmBh all the FHIR resources are not under our control so I can't add the annotation to them. That is why I had to validate our hibernate entity classes instead which should be fine since I believe this method hits the corresponding attribution method which just converts these FHIR resources into hibernate entity classes and saves to the database.", "url": "https://github.com/CMSgov/dpc-app/pull/739#discussion_r407497181", "createdAt": "2020-04-13T14:09:46Z", "author": {"login": "MrBilnon"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/AbstractGroupResource.java", "diffHunk": "@@ -26,7 +27,7 @@ protected AbstractGroupResource() {\n     public abstract Response createRoster(OrganizationPrincipal organizationPrincipal, @Valid @Profiled(profile = AttestationProfile.PROFILE_URI) Provenance rosterAttestation, Group attributionRoster);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3Mjg0Nw=="}, "originalCommit": {"oid": "a9af480157accd435d73224cb9711468dd29387e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MzA3Mg==", "bodyText": "Since our intent with this PR is to cover all cases, can you make a test that proves we're covered for Provenance and Group?", "url": "https://github.com/CMSgov/dpc-app/pull/739#discussion_r414063072", "createdAt": "2020-04-23T19:24:53Z", "author": {"login": "dhgreene"}, "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/AbstractGroupResource.java", "diffHunk": "@@ -26,7 +27,7 @@ protected AbstractGroupResource() {\n     public abstract Response createRoster(OrganizationPrincipal organizationPrincipal, @Valid @Profiled(profile = AttestationProfile.PROFILE_URI) Provenance rosterAttestation, Group attributionRoster);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3Mjg0Nw=="}, "originalCommit": {"oid": "a9af480157accd435d73224cb9711468dd29387e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODU4OTU0OnYy", "diffSide": "RIGHT", "path": "dpc-common/src/test/java/gov/cms/dpc/common/hibernate/validator/NoHtmlValidatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo1MDowM1rOGM02Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo1MDowM1rOGM02Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwMTk4Ng==", "bodyText": "There are a number of tricks attackers can use to fool HTML sanitizers.  Can you include a few from this or another source?", "url": "https://github.com/CMSgov/dpc-app/pull/739#discussion_r416101986", "createdAt": "2020-04-27T19:50:03Z", "author": {"login": "dhgreene"}, "path": "dpc-common/src/test/java/gov/cms/dpc/common/hibernate/validator/NoHtmlValidatorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package gov.cms.dpc.common.hibernate.validator;\n+\n+import gov.cms.dpc.common.annotations.NoHtml;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class NoHtmlValidatorTest {\n+\n+    private Validator validator;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n+        validator = factory.getValidator();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"stringSource\")\n+    public void noHtmlValidatorTest(String value, boolean isEmpty) {\n+\n+        TestObject testObject = new TestObject();\n+        testObject.setA(value);\n+        Set<ConstraintViolation<TestObject>> violations = validator.validate(testObject);\n+        Assertions.assertEquals(isEmpty, violations.isEmpty());\n+    }\n+\n+    private static Stream<Arguments> stringSource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ea2410128963894281c620249f27a6f62525b"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4850, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}