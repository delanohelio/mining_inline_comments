{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzQ1OTA0", "number": 396, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzo1M1rOEF3Gmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOTowMVrOEF_znw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgxMTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/PropServerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzo1M1rOGkTamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzo1M1rOGkTamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDAyNg==", "bodyText": "is there a way to default limits to \"unlimited\" ?", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440720026", "createdAt": "2020-06-16T09:37:53Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/PropServerConfiguration.java", "diffHunk": "@@ -312,6 +321,7 @@ public PropServerConfiguration(String root, Properties properties) throws Server\n         this.workStealTimeoutNanos = getLong(properties, \"cairo.work.steal.timeout.nanos\", 10_000);\n         this.parallelIndexingEnabled = getBoolean(properties, \"cairo.parallel.indexing.enabled\", true);\n         this.sqlJoinMetadataPageSize = getIntSize(properties, \"cairo.sql.join.metadata.page.size\", 16384);\n+        this.sqlJoinMetadataMaxResizes = getIntSize(properties, \"cairo.sql.join.metadata.max.resizes\", 25_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgyMDM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cairo/map/FastMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MDowMFrOGkTfyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MDowMFrOGkTfyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTM1NA==", "bodyText": "throwing static instance of exception does not preserve correct stack trace. For that reason we need to indicate where limit overflow came from. Include name of class for example", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440721354", "createdAt": "2020-06-16T09:40:00Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/map/FastMap.java", "diffHunk": "@@ -346,28 +343,33 @@ private void rehash() {\n     }\n \n     private void resize(int size) {\n-        long kCapacity = (kLimit - kStart) << 1;\n-        long target = key.appendAddress + size - kStart;\n-        if (kCapacity < target) {\n-            kCapacity = Numbers.ceilPow2(target);\n-        }\n-        long kAddress = Unsafe.realloc(this.kStart, this.capacity, kCapacity);\n-\n-        this.capacity = kCapacity;\n-        long d = kAddress - this.kStart;\n-        kPos += d;\n-        long colOffsetDelta = key.nextColOffset - key.startAddress;\n-        key.startAddress += d;\n-        key.appendAddress += d;\n-        key.nextColOffset = key.startAddress + colOffsetDelta;\n-\n-        assert kPos > 0;\n-        assert key.startAddress > 0;\n-        assert key.appendAddress > 0;\n-        assert key.nextColOffset > 0;\n-\n-        this.kStart = kAddress;\n-        this.kLimit = kAddress + kCapacity;\n+        if (nResizes < maxResizes) {\n+            nResizes++;\n+            long kCapacity = (kLimit - kStart) << 1;\n+            long target = key.appendAddress + size - kStart;\n+            if (kCapacity < target) {\n+                kCapacity = Numbers.ceilPow2(target);\n+            }\n+            long kAddress = Unsafe.realloc(this.kStart, this.capacity, kCapacity);\n+    \n+            this.capacity = kCapacity;\n+            long d = kAddress - this.kStart;\n+            kPos += d;\n+            long colOffsetDelta = key.nextColOffset - key.startAddress;\n+            key.startAddress += d;\n+            key.appendAddress += d;\n+            key.nextColOffset = key.startAddress + colOffsetDelta;\n+    \n+            assert kPos > 0;\n+            assert key.startAddress > 0;\n+            assert key.appendAddress > 0;\n+            assert key.nextColOffset > 0;\n+    \n+            this.kStart = kAddress;\n+            this.kLimit = kAddress + kCapacity;\n+        } else {\n+            throw LimitOverflowException.instance().put(\"limit of \").put(maxResizes).put(\" resizes exceeded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgzMDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0Mjo0M1rOGkTmKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowNDoyOVrOGkUX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjk4NA==", "bodyText": "this has to be optimised. Prevalent outcome of the \"if\" statement is that nothing needs checking, for example 1 in 1_000_000 loop iterations checks. The method need to look like optimised for \"not checking\" outcome.", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440722984", "createdAt": "2020-06-16T09:42:43Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.questdb.griffin;\n+\n+import java.io.Closeable;\n+\n+import io.questdb.cairo.CairoException;\n+import io.questdb.network.NetworkFacade;\n+import io.questdb.std.Unsafe;\n+\n+public class HttpSqlExecutionInterruptor implements SqlExecutionInterruptor, Closeable {\n+    private final NetworkFacade nf;\n+    private final int nIterationsPerCheck;\n+    private final int bufferSize;\n+    private long buffer;\n+    private int nIterationsSinceCheck;\n+    private long fd = -1;\n+\n+    public HttpSqlExecutionInterruptor(NetworkFacade nf, int nIterationsPerCheck, int bufferSize) {\n+        super();\n+        this.nf = nf;\n+        this.nIterationsPerCheck = nIterationsPerCheck;\n+        this.bufferSize = bufferSize;\n+        buffer = Unsafe.malloc(bufferSize);\n+    }\n+\n+    @Override\n+    public void checkInterrupted() {\n+        assert fd != -1;\n+        if (nIterationsSinceCheck == nIterationsPerCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNTcxMw==", "bodyText": "I can change this, but I dont agree with it. I doubt it will have any significant impact and may actually be slower on more modern processors which are biased towards the if statement being true regardless of the compiler hints", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440735713", "createdAt": "2020-06-16T10:04:29Z", "author": {"login": "patrickSpaceSurfer"}, "path": "core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.questdb.griffin;\n+\n+import java.io.Closeable;\n+\n+import io.questdb.cairo.CairoException;\n+import io.questdb.network.NetworkFacade;\n+import io.questdb.std.Unsafe;\n+\n+public class HttpSqlExecutionInterruptor implements SqlExecutionInterruptor, Closeable {\n+    private final NetworkFacade nf;\n+    private final int nIterationsPerCheck;\n+    private final int bufferSize;\n+    private long buffer;\n+    private int nIterationsSinceCheck;\n+    private long fd = -1;\n+\n+    public HttpSqlExecutionInterruptor(NetworkFacade nf, int nIterationsPerCheck, int bufferSize) {\n+        super();\n+        this.nf = nf;\n+        this.nIterationsPerCheck = nIterationsPerCheck;\n+        this.bufferSize = bufferSize;\n+        buffer = Unsafe.malloc(bufferSize);\n+    }\n+\n+    @Override\n+    public void checkInterrupted() {\n+        assert fd != -1;\n+        if (nIterationsSinceCheck == nIterationsPerCheck) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjk4NA=="}, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg0MjYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NjowNVrOGkTtxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NjowNVrOGkTtxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDkzNQ==", "bodyText": "lets cache interruptor instance. If JIT leaves double de-reference inside the loop - its bad", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440724935", "createdAt": "2020-06-16T09:46:05Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java", "diffHunk": "@@ -89,13 +90,14 @@ public void toTop() {\n     }\n \n     @Override\n-    public void of(RecordCursor base) {\n+    public void of(RecordCursor base, SqlExecutionContext executionContext) {\n         this.base = base;\n         this.baseRecord = base.getRecord();\n         final Record placeHolderRecord = base.getRecordB();\n \n         chain.clear();\n         while (base.hasNext()) {\n+            executionContext.getSqlExecutionInterruptor().checkInterrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg0Mzk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NjoyNVrOGkTunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NjoyNVrOGkTunQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTE0OQ==", "bodyText": "same, double de-ref", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440725149", "createdAt": "2020-06-16T09:46:25Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java", "diffHunk": "@@ -81,34 +81,21 @@ public long size() {\n     }\n \n     @Override\n-    public void of(RecordCursor base) {\n-        of(base, Long.MAX_VALUE);\n-    }\n-\n-    public void of(RecordCursor base, long maxSize) {\n+    public void of(RecordCursor base, SqlExecutionContext executionContext) {\n         try {\n-            if (maxSize > base.size()) {\n-                this.chainCursor = chain.getCursor(base);\n-                final Record record = base.getRecord();\n+            this.chainCursor = chain.getCursor(base);\n+            final Record record = base.getRecord();\n \n-                long nRows = 0;\n-                chain.clear();\n-                while (base.hasNext()) {\n-                    if (nRows < maxSize) {\n-                        nRows++;\n-                        // Tree chain is liable to re-position record to\n-                        // other rows to do record comparison. We must use our\n-                        // own record instance in case base cursor keeps\n-                        // state in the record it returns.\n-                        chain.put(record);\n-                    } else {\n-                        throw LimitOverflowException.instance(maxSize);\n-                    }\n-                }\n-                chainCursor.toTop();\n-            } else {\n-                throw LimitOverflowException.instance(maxSize);\n+            chain.clear();\n+            while (base.hasNext()) {\n+                executionContext.getSqlExecutionInterruptor().checkInterrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg5MDgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/std/MemoryPages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1OToyNlrOGkUMbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1OToyNlrOGkUMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMjc4Mw==", "bodyText": "likewise, we need to denote source of exception", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440732783", "createdAt": "2020-06-16T09:59:26Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/std/MemoryPages.java", "diffHunk": "@@ -87,6 +95,10 @@ private void allocate0(long index) {\n             throw new OutOfMemoryError();\n         }\n \n+        if (index > maxPages) {\n+            throw LimitOverflowException.instance().put(\"Maximum number of pages (\").put(maxPages).put(\") breached\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg5NDU3OnYy", "diffSide": "RIGHT", "path": "core/src/test/resources/server.conf", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowMDoyOFrOGkUO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowMDoyOFrOGkUO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMzQwNw==", "bodyText": "could we add these properties in production server.conf as well with comments?", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440733407", "createdAt": "2020-06-16T10:00:28Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/resources/server.conf", "diffHunk": "@@ -73,8 +76,10 @@ cairo.sql.join.context.pool.capacity=32\n cairo.lexer.pool.capacity=1024\n cairo.sql.map.key.capacity=1024\n cairo.sql.map.page.size=6m\n+cairo.sql.map.max.resizes=128", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIzNzQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOTowMVrOGkhd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOTowMVrOGkhd4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Mg==", "bodyText": "this is intense. Function exec should take long time, lets keep this on cursor only", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440950242", "createdAt": "2020-06-16T15:39:01Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java", "diffHunk": "@@ -106,13 +117,15 @@ public boolean hasNext() {\n \n         final int n = groupByFunctions.size();\n         for (int i = 0; i < n; i++) {\n+            interruptor.checkInterrupted();\n             groupByFunctions.getQuick(i).computeFirst(simpleMapValue, baseRecord);\n         }\n \n         while (base.hasNext()) {\n             long timestamp = timestampSampler.round(baseRecord.getTimestamp(timestampIndex));\n             if (lastTimestamp == timestamp) {\n                 for (int i = 0; i < n; i++) {\n+                    interruptor.checkInterrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2221, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}