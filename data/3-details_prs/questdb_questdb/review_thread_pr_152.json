{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjkwNjM4", "number": 152, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MToxOFrODy1tiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MTo1NVrODy1uXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjM1NDAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cairo/TableReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MToxOFrOGHHkaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MToxOFrOGHHkaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNzIyNA==", "bodyText": "could we roll this line back and then we can commit C-level impls that can be integrated into SQL later", "url": "https://github.com/questdb/questdb/pull/152#discussion_r410117224", "createdAt": "2020-04-17T09:51:18Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/TableReader.java", "diffHunk": "@@ -440,7 +440,7 @@ public double sumDouble(int columnIndex) {\n                 for (int pageIndex = 0, pageCount = column.getPageCount(); pageIndex < pageCount; pageIndex++) {\n                     long a = column.getPageAddress(pageIndex);\n                     long count = column.getPageSize(pageIndex) / Double.BYTES;\n-                    result += Vect.sumDouble(a, count);\n+                    result += Vect.sumDoubleNeumaier(a, count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f171aa7ad498b2f0d85d7823681fca21bc10f1e0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjM1NjE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/c/share/vect.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MTo1NVrOGHHl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MTo1NVrOGHHl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNzYwMQ==", "bodyText": "lets have prefetch just above load. See \"native\" sum", "url": "https://github.com/questdb/questdb/pull/152#discussion_r410117601", "createdAt": "2020-04-17T09:51:55Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/c/share/vect.cpp", "diffHunk": "@@ -404,6 +412,98 @@ double SUM_DOUBLE(double *d, int64_t count) {\n     return NAN;\n }\n \n+double SUM_DOUBLE_KAHAN(double *d, int64_t count) {\n+    Vec8d inputVec;\n+    const int step = 8;\n+    const auto *lim = d + count;\n+    const auto remainder = (int32_t) (count - (count / step) * step);\n+    const auto *lim_vec = lim - remainder;\n+    Vec8d sumVec = 0.;\n+    Vec8d yVec;\n+    Vec8d cVec = 0.;\n+    Vec8db bVec;\n+    Vec8q nancount = 0;\n+    Vec8d tVec;\n+    for (; d < lim_vec; d += step) {\n+        //loading to vector\n+        inputVec.load(d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f171aa7ad498b2f0d85d7823681fca21bc10f1e0"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2253, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}