{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzQ0NTEy", "number": 110, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo0Nzo0N1rODjyXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzowMzoyNlrODjzj_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODUxOTIxOnYy", "diffSide": "RIGHT", "path": "core/CMakeLists.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo0Nzo0N1rOFvyamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjozMToyMVrOFvzbcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MzQwMw==", "bodyText": "This is a really old school method to check system name.  There is a decent (and up to date) guide on how to do this that can be found here:\nhttps://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/How-To-Write-Platform-Checks\nIf above works it would be much better to avoid accidents such as running uname on windows. I know it may not run on windows, but still, external command exec isn't great.", "url": "https://github.com/questdb/questdb/pull/110#discussion_r385653403", "createdAt": "2020-02-28T11:47:47Z", "author": {"login": "bluestreak01"}, "path": "core/CMakeLists.txt", "diffHunk": "@@ -43,21 +44,40 @@ if (APPLE)\n             src/main/c/osx/accept.c\n     )\n elseif (UNIX)\n-    include_directories($ENV{JAVA_HOME}/include/linux/)\n-    message(${CMAKE_SYSTEM_PROCESSOR})\n-    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/armlinux)\n-        set(AARCH64 1)\n-    else ()\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/linux)\n-    endif ()\n-    set(\n+    EXEC_PROGRAM(uname OUTPUT_VARIABLE SYSTEM_NAME)\n+    SET(SYSTEM_NAME \"${SYSTEM_NAME}\" CACHE INTERNAL \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a16a85036e97f93bb0debb27e37f23c23d5bd5a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3MDAwMw==", "bodyText": "I was looking for that... to avoid the EXEC\n\nbuild also failed. CircleCI runs on Linux.", "url": "https://github.com/questdb/questdb/pull/110#discussion_r385670003", "createdAt": "2020-02-28T12:31:21Z", "author": {"login": "patrickSpaceSurfer"}, "path": "core/CMakeLists.txt", "diffHunk": "@@ -43,21 +44,40 @@ if (APPLE)\n             src/main/c/osx/accept.c\n     )\n elseif (UNIX)\n-    include_directories($ENV{JAVA_HOME}/include/linux/)\n-    message(${CMAKE_SYSTEM_PROCESSOR})\n-    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/armlinux)\n-        set(AARCH64 1)\n-    else ()\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/linux)\n-    endif ()\n-    set(\n+    EXEC_PROGRAM(uname OUTPUT_VARIABLE SYSTEM_NAME)\n+    SET(SYSTEM_NAME \"${SYSTEM_NAME}\" CACHE INTERNAL \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MzQwMw=="}, "originalCommit": {"oid": "5a16a85036e97f93bb0debb27e37f23c23d5bd5a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODUyODA2OnYy", "diffSide": "RIGHT", "path": "core/CMakeLists.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1MToyMFrOFvyf-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjozMTo0MVrOFvzcFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NDc3Nw==", "bodyText": "it is bit trick to change CMAKE build. Post change it has to be tested across multiple architectures. I anticipate that build will fail on ARM64 because check is done inside of FreeBSD branch - ARM64 is a linux.", "url": "https://github.com/questdb/questdb/pull/110#discussion_r385654777", "createdAt": "2020-02-28T11:51:20Z", "author": {"login": "bluestreak01"}, "path": "core/CMakeLists.txt", "diffHunk": "@@ -43,21 +44,40 @@ if (APPLE)\n             src/main/c/osx/accept.c\n     )\n elseif (UNIX)\n-    include_directories($ENV{JAVA_HOME}/include/linux/)\n-    message(${CMAKE_SYSTEM_PROCESSOR})\n-    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/armlinux)\n-        set(AARCH64 1)\n-    else ()\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/linux)\n-    endif ()\n-    set(\n+    EXEC_PROGRAM(uname OUTPUT_VARIABLE SYSTEM_NAME)\n+    SET(SYSTEM_NAME \"${SYSTEM_NAME}\" CACHE INTERNAL \"\")\n+\n+    if (SYSTEM_NAME STREQUAL \"FreeBSD\")\n+        MESSAGE(\"Building for FreeBSD\")\n+        include_directories($ENV{JAVA_HOME}/include/freebsd/)\n+        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/freebsd)\n+        set(\n+            SOURCE_FILES ${SOURCE_FILES}\n+            src/main/c/freebsd/kqueue.c\n+            src/main/c/share/net.c\n+            src/main/c/freebsd/affinity.c\n+            src/main/c/freebsd/accept.c\n+        )\n+    else (SYSTEM_NAME STREQUAL \"FreeBSD\")\n+        MESSAGE(\"Building for GNU/Linux\")\n+        include_directories($ENV{JAVA_HOME}/include/linux/)\n+        message(${CMAKE_SYSTEM_PROCESSOR})\n+        if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a16a85036e97f93bb0debb27e37f23c23d5bd5a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3MDE2Nw==", "bodyText": "I think you have misread it, the check is done in the linux branch", "url": "https://github.com/questdb/questdb/pull/110#discussion_r385670167", "createdAt": "2020-02-28T12:31:41Z", "author": {"login": "patrickSpaceSurfer"}, "path": "core/CMakeLists.txt", "diffHunk": "@@ -43,21 +44,40 @@ if (APPLE)\n             src/main/c/osx/accept.c\n     )\n elseif (UNIX)\n-    include_directories($ENV{JAVA_HOME}/include/linux/)\n-    message(${CMAKE_SYSTEM_PROCESSOR})\n-    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/armlinux)\n-        set(AARCH64 1)\n-    else ()\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/linux)\n-    endif ()\n-    set(\n+    EXEC_PROGRAM(uname OUTPUT_VARIABLE SYSTEM_NAME)\n+    SET(SYSTEM_NAME \"${SYSTEM_NAME}\" CACHE INTERNAL \"\")\n+\n+    if (SYSTEM_NAME STREQUAL \"FreeBSD\")\n+        MESSAGE(\"Building for FreeBSD\")\n+        include_directories($ENV{JAVA_HOME}/include/freebsd/)\n+        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/freebsd)\n+        set(\n+            SOURCE_FILES ${SOURCE_FILES}\n+            src/main/c/freebsd/kqueue.c\n+            src/main/c/share/net.c\n+            src/main/c/freebsd/affinity.c\n+            src/main/c/freebsd/accept.c\n+        )\n+    else (SYSTEM_NAME STREQUAL \"FreeBSD\")\n+        MESSAGE(\"Building for GNU/Linux\")\n+        include_directories($ENV{JAVA_HOME}/include/linux/)\n+        message(${CMAKE_SYSTEM_PROCESSOR})\n+        if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NDc3Nw=="}, "originalCommit": {"oid": "5a16a85036e97f93bb0debb27e37f23c23d5bd5a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODcxNTUwOnYy", "diffSide": "RIGHT", "path": "core/CMakeLists.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzowMzoyNlrOFv0Psw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzowMzoyNlrOFv0Psw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4MzM3OQ==", "bodyText": "i guess i wasn't prepare to see else() with a condition inside? may be worth leaving this as else()", "url": "https://github.com/questdb/questdb/pull/110#discussion_r385683379", "createdAt": "2020-02-28T13:03:26Z", "author": {"login": "bluestreak01"}, "path": "core/CMakeLists.txt", "diffHunk": "@@ -43,21 +43,37 @@ if (APPLE)\n             src/main/c/osx/accept.c\n     )\n elseif (UNIX)\n-    include_directories($ENV{JAVA_HOME}/include/linux/)\n-    message(${CMAKE_SYSTEM_PROCESSOR})\n-    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/armlinux)\n-        set(AARCH64 1)\n-    else ()\n-        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/linux)\n-    endif ()\n-    set(\n+    if (CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n+        MESSAGE(\"Building for FreeBSD\")\n+        include_directories($ENV{JAVA_HOME}/include/freebsd/)\n+        set(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/binaries/freebsd)\n+        set(\n+            SOURCE_FILES ${SOURCE_FILES}\n+            src/main/c/freebsd/kqueue.c\n+            src/main/c/share/net.c\n+            src/main/c/freebsd/affinity.c\n+            src/main/c/freebsd/accept.c\n+        )\n+    else (CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d396096f478573c479fede1970f29a58f1f61c7b"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2299, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}