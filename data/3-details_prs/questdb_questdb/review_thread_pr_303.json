{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjMwNTgz", "number": 303, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxMjo0N1rOD9uy1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxNjo1OFrOD9u4qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDU2NDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cairo/CairoEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxMjo0N1rOGXZgDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxMjo0N1rOGXZgDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4ODIzOQ==", "bodyText": "static call looks a little strange here. I was expecting something like\nsecurityContext.checkWritePermission();", "url": "https://github.com/questdb/questdb/pull/303#discussion_r427188239", "createdAt": "2020-05-19T10:12:47Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/CairoEngine.java", "diffHunk": "@@ -82,6 +83,7 @@ public void creatTable(\n             Path path,\n             TableStructure struct\n     ) {\n+        CairoSecurityContext.checkWritePermission(securityContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc42575ca50be9ddda81d827b9395a85221718b4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDU3ODk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cairo/CairoSecurityContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxNjo1OFrOGXZpPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDo0MDo1MVrOGXabMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5MDU4OQ==", "bodyText": "Generally speaking nothing in the codebase handles exceptions via Throwable. The rule of thumb when new exception is introduced a special consideration needs to be paid to how this exception is received by API users. This special consideration is missing from the PR.\nEasier way to deal with this is to reuse CairoException this is also a runtime exception and it is handled (and handling is tested)", "url": "https://github.com/questdb/questdb/pull/303#discussion_r427190589", "createdAt": "2020-05-19T10:16:58Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/CairoSecurityContext.java", "diffHunk": "@@ -24,5 +24,15 @@\n \n package io.questdb.cairo;\n \n+import io.questdb.cairo.security.CairoSecurityException;\n+\n public interface CairoSecurityContext {\n+\n+    public static void checkWritePermission(CairoSecurityContext securityContext) {\n+        if (null == securityContext || !securityContext.canWrite()) {\n+            throw CairoSecurityException.instance().put(\"Write permission denied\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc42575ca50be9ddda81d827b9395a85221718b4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwMzM3OA==", "bodyText": "Yes, I can see how this breaks the GUI, I didn't notice that. I had originally used a CairoException but the problem with that is that SqlCompiler.alterTable catches CairoException and assumes its due to a failed table lock and then throws a SqlException which is wrong due to the incorrect assumption.\nIn my view I should be using a CairoException, but the behaviour of SqlCompiler.alterTable is wrong, we shouldn't be making assumptions on the reasons for exceptions", "url": "https://github.com/questdb/questdb/pull/303#discussion_r427203378", "createdAt": "2020-05-19T10:40:51Z", "author": {"login": "patrickSpaceSurfer"}, "path": "core/src/main/java/io/questdb/cairo/CairoSecurityContext.java", "diffHunk": "@@ -24,5 +24,15 @@\n \n package io.questdb.cairo;\n \n+import io.questdb.cairo.security.CairoSecurityException;\n+\n public interface CairoSecurityContext {\n+\n+    public static void checkWritePermission(CairoSecurityContext securityContext) {\n+        if (null == securityContext || !securityContext.canWrite()) {\n+            throw CairoSecurityException.instance().put(\"Write permission denied\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5MDU4OQ=="}, "originalCommit": {"oid": "bc42575ca50be9ddda81d827b9395a85221718b4"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2279, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}