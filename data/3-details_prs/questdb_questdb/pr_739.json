{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjgxMzg0", "number": 739, "title": "feat(griffin) - Add build() function to list QuestDB build details", "bodyText": "Solves #720.\nSummary\n\nAdd commit hash to the manifest file\nCreate a function to list the following build details:\n\nQuestDb version\nJDK version\nCommit hash", "createdAt": "2020-12-30T00:24:08Z", "url": "https://github.com/questdb/questdb/pull/739", "merged": true, "mergeCommit": {"oid": "f5889405087263fecc6fe7beb4a310b7c694b94e"}, "closed": true, "closedAt": "2021-01-04T19:01:52Z", "author": {"login": "upsidedownsmile"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrSoQ9gFqTU2MDEyNjA3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABds4wkNAFqTU2MTE1NTg1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTI2MDcw", "url": "https://github.com/questdb/questdb/pull/739#pullrequestreview-560126070", "createdAt": "2020-12-30T16:55:05Z", "commit": {"oid": "e5d915fac649cc6100369f591d8bff6258dbc029"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNjo1NTowNVrOIMxN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzoxNzo1N1rOIMxowA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MDE5Mg==", "bodyText": "for some reason version doesn't default as intended when running from IDE", "url": "https://github.com/questdb/questdb/pull/739#discussion_r550260192", "createdAt": "2020-12-30T16:55:05Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/ServerMain.java", "diffHunk": "@@ -38,25 +38,52 @@\n import io.questdb.log.LogRecord;\n import io.questdb.mp.WorkerPool;\n import io.questdb.network.NetworkError;\n-import io.questdb.std.*;\n+import io.questdb.std.CharSequenceObjHashMap;\n+import io.questdb.std.Chars;\n+import io.questdb.std.Misc;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.Os;\n+import io.questdb.std.Vect;\n import io.questdb.std.time.Dates;\n-import sun.misc.Signal;\n-\n-import java.io.*;\n-import java.net.*;\n-import java.util.*;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.ServiceLoader;\n import java.util.concurrent.locks.LockSupport;\n import java.util.jar.Attributes;\n import java.util.jar.Manifest;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n+import sun.misc.Signal;\n \n public class ServerMain {\n     private static final String VERSION_TXT = \"version.txt\";\n+\n     protected PropServerConfiguration configuration;\n \n     public ServerMain(String[] args) throws Exception {\n-        System.err.printf(\"QuestDB server %s%nCopyright (C) 2014-%d, all rights reserved.%n%n\", getVersion(), Dates.getYear(System.currentTimeMillis()));\n+        //properties fetched from sources other than server.conf\n+        final Map<CharSequence, CharSequence> internalProperties = buildInternalProperties();\n+\n+        System.err.printf(\n+                \"QuestDB server %s%nCopyright (C) 2014-%d, all rights reserved.%n%n\",\n+                internalProperties.getOrDefault(\"build.questdb.version\", \"Unknown Version\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d915fac649cc6100369f591d8bff6258dbc029"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MTkzNw==", "bodyText": "Delivering build information to server can be done via BuildInformation interface above, which configuration can keep the reference to.", "url": "https://github.com/questdb/questdb/pull/739#discussion_r550261937", "createdAt": "2020-12-30T17:00:17Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/ServerMain.java", "diffHunk": "@@ -451,4 +468,43 @@ protected void startQuestDb(\n     ) {\n         workerPool.start(log);\n     }\n+\n+    private static CharSequence getQuestDbVersion(final Attributes manifestAttributes) {\n+        return manifestAttributes.getValue(\"Implementation-Version\");\n+    }\n+\n+    private static CharSequence getJdkVersion(final Attributes manifestAttributes) {\n+        return manifestAttributes.getValue(\"Build-Jdk\");\n+    }\n+\n+    private static CharSequence getCommitHash(final Attributes manifestAttributes) {\n+        return manifestAttributes.getValue(\"Build-Commit-Hash\");\n+    }\n+\n+    private static Map<CharSequence, CharSequence> buildInternalProperties() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d915fac649cc6100369f591d8bff6258dbc029"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MzU4MQ==", "bodyText": "Perhaps we should try to keep this information on single line, otherwise its tricky to have it displayed correctly to multiple clients:", "url": "https://github.com/questdb/questdb/pull/739#discussion_r550263581", "createdAt": "2020-12-30T17:05:51Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/metadata/BuildFuntionFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.metadata;\n+\n+import io.questdb.BuildInformation;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.constants.StrConstant;\n+import io.questdb.std.Misc;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.CharSink;\n+import io.questdb.std.str.StringSink;\n+\n+public class BuildFuntionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"build()\";\n+    }\n+\n+    @Override\n+    public Function newInstance(final ObjList<Function> args,\n+                                final int position,\n+                                final CairoConfiguration configuration,\n+                                final SqlExecutionContext sqlExecutionContext) throws SqlException {\n+\n+        return Memoizer.getInstance(configuration).function;\n+    }\n+\n+    private static class Memoizer {\n+        private static Memoizer instance;\n+\n+        private final StrFunction function;\n+\n+        private Memoizer(final CharSequence message) {\n+            this.function = new StrConstant(0, message);\n+        }\n+\n+        public static Memoizer getInstance(final CairoConfiguration configuration) {\n+            if (instance == null) {\n+                synchronized (Memoizer.class) {\n+                    if (instance == null) {\n+                        instance = new Memoizer(message(configuration));\n+                    }\n+                }\n+            }\n+            return instance;\n+        }\n+\n+        private static CharSequence message(final CairoConfiguration configuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d915fac649cc6100369f591d8bff6258dbc029"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2Njc4MQ==", "bodyText": "this is some heavy artillery going on here :)\nGenerally speaking FunctionFactory instances are singletons already, this could perhaps remove static variable use. Then double-check locking can perhaps be replaced with\nif (instance == null) {\n    instance = new Memoizer(message(configuration));\n}\nThe worst case scenario is that under very heavy load we might have several classes created unnecessarily. But realistically this is very small and unlikely overhead in the name of code simplicity.", "url": "https://github.com/questdb/questdb/pull/739#discussion_r550266781", "createdAt": "2020-12-30T17:16:48Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/metadata/BuildFuntionFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.metadata;\n+\n+import io.questdb.BuildInformation;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.constants.StrConstant;\n+import io.questdb.std.Misc;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.CharSink;\n+import io.questdb.std.str.StringSink;\n+\n+public class BuildFuntionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"build()\";\n+    }\n+\n+    @Override\n+    public Function newInstance(final ObjList<Function> args,\n+                                final int position,\n+                                final CairoConfiguration configuration,\n+                                final SqlExecutionContext sqlExecutionContext) throws SqlException {\n+\n+        return Memoizer.getInstance(configuration).function;\n+    }\n+\n+    private static class Memoizer {\n+        private static Memoizer instance;\n+\n+        private final StrFunction function;\n+\n+        private Memoizer(final CharSequence message) {\n+            this.function = new StrConstant(0, message);\n+        }\n+\n+        public static Memoizer getInstance(final CairoConfiguration configuration) {\n+            if (instance == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d915fac649cc6100369f591d8bff6258dbc029"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2NzA3Mg==", "bodyText": "spelling", "url": "https://github.com/questdb/questdb/pull/739#discussion_r550267072", "createdAt": "2020-12-30T17:17:57Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/metadata/BuildFuntionFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.metadata;\n+\n+import io.questdb.BuildInformation;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.constants.StrConstant;\n+import io.questdb.std.Misc;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.CharSink;\n+import io.questdb.std.str.StringSink;\n+\n+public class BuildFuntionFactory implements FunctionFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d915fac649cc6100369f591d8bff6258dbc029"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f942b0a4c2edef519f93c8bf110d0b63ea7d84c4", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/f942b0a4c2edef519f93c8bf110d0b63ea7d84c4", "committedDate": "2020-12-30T21:44:36Z", "message": "feat-720: Create query to get build information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d636aa68c46ba5b36f337c7220373b9bc0fe4e", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/c5d636aa68c46ba5b36f337c7220373b9bc0fe4e", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc1ba515c90b7149a0c80861cf184957b621f158", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/cc1ba515c90b7149a0c80861cf184957b621f158", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Rename default values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf92c459bf11258df0bdc8333f33909cd6616942", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/cf92c459bf11258df0bdc8333f33909cd6616942", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove autoformating from ServerMain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7cb64c8c2c52b58a92293eeb0ad12cc3401232", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/df7cb64c8c2c52b58a92293eeb0ad12cc3401232", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove autoformating from ServerMain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3650c86094b32656a9d9f47669f7f8a759123c8e", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/3650c86094b32656a9d9f47669f7f8a759123c8e", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove root directory used for manual testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c28f2c19a6422e946ecb4f8d7fc0d1763d8de4", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/08c28f2c19a6422e946ecb4f8d7fc0d1763d8de4", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d9a25f4fffa926ad23dc66c01f472a2167aeba6", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/6d9a25f4fffa926ad23dc66c01f472a2167aeba6", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove root directory used for manual testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a745d93d41e736b1dd2c1e89de27788f4aa000fa", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/a745d93d41e736b1dd2c1e89de27788f4aa000fa", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631cec710adfaca1207997df1c8da70851d57d10", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/631cec710adfaca1207997df1c8da70851d57d10", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Display build information in only one line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99eb69e42448d50ebd6121eb749756402075009c", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/99eb69e42448d50ebd6121eb749756402075009c", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Use BuildInformation instead of a map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043d657f9c9f873f2ea7979c99415feedb36efbc", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/043d657f9c9f873f2ea7979c99415feedb36efbc", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove Memoizer and double-check locking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc26173400b531c340f05a9d52c820c17338d4b", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/1fc26173400b531c340f05a9d52c820c17338d4b", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Remove root directory used for manual testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53d45e186717940f93b69df7654d8bbc715410c0", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/53d45e186717940f93b69df7654d8bbc715410c0", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Fix typo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "151533b61a01fdef2cfb99ca9151a3d0503a2212", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/151533b61a01fdef2cfb99ca9151a3d0503a2212", "committedDate": "2020-12-30T20:50:10Z", "message": "feat-720: Fix typo"}, "afterCommit": {"oid": "53d45e186717940f93b69df7654d8bbc715410c0", "author": {"user": {"login": "upsidedownsmile", "name": "Tiago Martins"}}, "url": "https://github.com/questdb/questdb/commit/53d45e186717940f93b69df7654d8bbc715410c0", "committedDate": "2020-12-30T21:44:38Z", "message": "feat-720: Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a14526f618b4c68871db72b8e55a0dbc2c3acd", "author": {"user": {"login": "bluestreak01", "name": "Vlad Ilyushchenko"}}, "url": "https://github.com/questdb/questdb/commit/f0a14526f618b4c68871db72b8e55a0dbc2c3acd", "committedDate": "2021-01-04T16:10:15Z", "message": "Merge branch 'master' into feat-720"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTU1ODUy", "url": "https://github.com/questdb/questdb/pull/739#pullrequestreview-561155852", "createdAt": "2021-01-04T16:17:38Z", "commit": {"oid": "f0a14526f618b4c68871db72b8e55a0dbc2c3acd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3163, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}