{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTU5NTk1", "number": 101, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDowMjoxMVrODV0ekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMjoyNjozM1rODV3OzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA2NDgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDowMjoxMVrOFaPgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDowMjoxMVrOFaPgzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTQ1NA==", "bodyText": "Now that you know right is constant there no need to pass Function, pass int instead. This will eliminate possible function call for every row.", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061454", "createdAt": "2020-01-05T00:02:11Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?\n+                    new FuncConst(position, args.getQuick(0), precision) :\n+                    new DoubleConstant(position, Double.NaN);\n+        }\n+        return new Func(position, args.getQuick(0), args.getQuick(1));\n+    }\n+\n+    private static class FuncConst extends DoubleFunction implements BinaryFunction {\n+        private final Function left;\n+        private final Function right;\n+\n+        public FuncConst(int position, Function left, Function right) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA2NTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDowNDoxNVrOFaPhGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDowNDoxNVrOFaPhGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTUzMQ==", "bodyText": "the check\nr > 0\n\ncan be done in factory and instead of one FuncConst class we could have two: FuncPosConst and FuncNegConst, which will invoke respective Numbers static function.", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061531", "createdAt": "2020-01-05T00:04:15Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?\n+                    new FuncConst(position, args.getQuick(0), precision) :\n+                    new DoubleConstant(position, Double.NaN);\n+        }\n+        return new Func(position, args.getQuick(0), args.getQuick(1));\n+    }\n+\n+    private static class FuncConst extends DoubleFunction implements BinaryFunction {\n+        private final Function left;\n+        private final Function right;\n+\n+        public FuncConst(int position, Function left, Function right) {\n+            super(position);\n+            this.left = left;\n+            this.right = right;\n+        }\n+\n+        @Override\n+        public double getDouble(Record rec) {\n+            final double l = left.getDouble(rec);\n+            if (l != l) {\n+                return l;\n+            }\n+\n+            final int r = right.getInt(null);\n+            return (r > 0) ? Numbers.roundDownPosScale(l, r) : Numbers.roundDownNegScale(l, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA2NTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDowNToyMFrOFaPhKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMDoxMTo0NFrOFaPiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ==", "bodyText": "what is the secret behind comparing squared values, why not compare precisionValue and pow10max directly?", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061545", "createdAt": "2020-01-05T00:05:20Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTY5MQ==", "bodyText": "precisionValue can be positive or negative while pow10max is positive only", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061691", "createdAt": "2020-01-05T00:09:31Z", "author": {"login": "TheTanc"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ=="}, "originalCommit": {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc0Mg==", "bodyText": "ok, the kicker here what checking for negative before compare is faster than double multiplication. Rule of thumb is to avoid multiplication and division at all costs", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061742", "createdAt": "2020-01-05T00:11:15Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ=="}, "originalCommit": {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc2Mg==", "bodyText": "abs() compare is faster", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061762", "createdAt": "2020-01-05T00:11:44Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ=="}, "originalCommit": {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA3OTk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMTowNzoyMlrOFaPoMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMTowNzoyMlrOFaPoMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzM0Nw==", "bodyText": "technically, <= will execute a little slower that >. This branch can be inverted without changing logic of the code.", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063347", "createdAt": "2020-01-05T01:07:22Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac490981b025a63d9ce4d6a6fd98749f730f927"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA4MDMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMTowODoxMVrOFaPoWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMTowODoxMVrOFaPoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzM4NQ==", "bodyText": "in the same vane, x >= 0 is slower than x > -1. The outcome is the same though", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063385", "createdAt": "2020-01-05T01:08:11Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n+                if (precisionValue >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac490981b025a63d9ce4d6a6fd98749f730f927"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA4MTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMToxMTo0NVrOFaPouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjoyNzo1NlrOFaPw5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzQ4MA==", "bodyText": "here is a suggestion: when we pass precisionValue as is to this constructor we will have to execute -scale for every row. If on other hand we pass -previsionValue the functions can be rewritten to take positive scale value and but interpret it as negative. Thus not execute - operator for every row.", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063480", "createdAt": "2020-01-05T01:11:45Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n+                if (precisionValue >= 0) {\n+                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+                }\n+                return new FuncNegConst(position, args.getQuick(0), precisionValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac490981b025a63d9ce4d6a6fd98749f730f927"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NTU3NQ==", "bodyText": "Will leave open for the moment - can only do once I convert other functions - round() and roundup() to the same model.", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363065575", "createdAt": "2020-01-05T02:27:56Z", "author": {"login": "TheTanc"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n+                if (precisionValue >= 0) {\n+                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+                }\n+                return new FuncNegConst(position, args.getQuick(0), precisionValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzQ4MA=="}, "originalCommit": {"oid": "1ac490981b025a63d9ce4d6a6fd98749f730f927"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjA4MTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMToxMjoxNVrOFaPovA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMToxMjoxNVrOFaPovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzQ4NA==", "bodyText": "may be we should use scale term instead of precision", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063484", "createdAt": "2020-01-05T01:12:15Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac490981b025a63d9ce4d6a6fd98749f730f927"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjEwMDc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjo0MjozMFrOFaPyiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjo0MjozMFrOFaPyiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NTk5NQ==", "bodyText": "no return statement?", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363065995", "createdAt": "2020-01-05T02:42:30Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjEwMDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjo0Mjo1NVrOFaPynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjo0Mjo1NVrOFaPynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NjAxMg==", "bodyText": "no return statement and perhaps this should be a NaN constant rather than 0", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363066012", "createdAt": "2020-01-05T02:42:55Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjEwMTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjo0NTowOVrOFaPy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwMjo0NTowOVrOFaPy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NjA3Nw==", "bodyText": "no return statement?", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363066077", "createdAt": "2020-01-05T02:45:09Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);\n+                }\n+            }\n+            new DoubleConstant(position, Double.NaN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjUxNTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMjoyNjozM1rOFaTK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMjoyNjozM1rOFaTK0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMTM2MQ==", "bodyText": "when scaleValue is NaN we go ahead and return  heaviest implementation. Perhaps return statement just above this comment needs to sit outside if(scaleValue != Numbers.INT_NaN)", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363121361", "createdAt": "2020-01-05T22:26:33Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > -1 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                }\n+                return new DoubleConstant(position, Double.NaN);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a1c06dbd938b6800671bf7c4e571053b9de2c0"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2292, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}