{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzQ1OTA0", "number": 396, "title": "Security", "bodyText": "", "createdAt": "2020-06-15T19:52:47Z", "url": "https://github.com/questdb/questdb/pull/396", "merged": true, "mergeCommit": {"oid": "c9f3021bae4c19dfe175daab8b45e8f60d25aa38"}, "closed": true, "closedAt": "2020-06-17T14:34:36Z", "author": {"login": "patrickSpaceSurfer"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpp84ZgH2gAyNDM0NzQ1OTA0OmE4NzNhZWZhYjZkNWM4NTIwMmU5NDRmY2M0MzgzYjc1YzMzZTBjMmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsKxbDgFqTQzMjQ2NDE0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a873aefab6d5c85202e944fcc4383b75c33e0c2f", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/a873aefab6d5c85202e944fcc4383b75c33e0c2f", "committedDate": "2020-06-09T19:09:35Z", "message": "chore: add Net.peek"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70e155666ece6a0050f7e77e51f7090e441a8604", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/70e155666ece6a0050f7e77e51f7090e441a8604", "committedDate": "2020-06-09T19:09:35Z", "message": "chore: add Net.peek"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb1d0824f335d0867f42b84770afcc7a7a33591", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/aeb1d0824f335d0867f42b84770afcc7a7a33591", "committedDate": "2020-06-09T19:09:35Z", "message": "chore: add Net.peek"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3214716d6edd1b95c21d27bb6f918b0324c0ac", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/fe3214716d6edd1b95c21d27bb6f918b0324c0ac", "committedDate": "2020-06-09T19:09:35Z", "message": "patrick@questdb.io"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c0fc8b1aac78e8e5e81f6367528860ec4796bf", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/a7c0fc8b1aac78e8e5e81f6367528860ec4796bf", "committedDate": "2020-06-09T19:09:35Z", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c1f1c51c0b8c10ace6cdb9b64c7f9aa42d4e78", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/63c1f1c51c0b8c10ace6cdb9b64c7f9aa42d4e78", "committedDate": "2020-06-09T19:09:35Z", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98cd606e5c6f19bc4438a3e2010bad4ba8121503", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/98cd606e5c6f19bc4438a3e2010bad4ba8121503", "committedDate": "2020-06-09T19:21:43Z", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c404cdf7a423b8b0599bfa253046ef609f640d75", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/c404cdf7a423b8b0599bfa253046ef609f640d75", "committedDate": "2020-06-11T12:25:23Z", "message": "chore: Fix bug in HttpException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f9f21d0c1e326bfed42a334c3c762e7a20d85f7", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/4f9f21d0c1e326bfed42a334c3c762e7a20d85f7", "committedDate": "2020-06-11T12:27:07Z", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e22053f3944d2e0370c84ab5aaec8cf9a024f5", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/52e22053f3944d2e0370c84ab5aaec8cf9a024f5", "committedDate": "2020-06-11T15:22:36Z", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b2ac36db30b9004bc430f9773313bb9185303f6", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/1b2ac36db30b9004bc430f9773313bb9185303f6", "committedDate": "2020-06-11T16:22:16Z", "message": "Merge remote-tracking branch 'origin/master' into security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78240754668554e090a258199936a674a066430", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/e78240754668554e090a258199936a674a066430", "committedDate": "2020-06-11T16:31:23Z", "message": "chore: linux library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf87f1ccfa3e903524a068c354b32c0b27a59852", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/cf87f1ccfa3e903524a068c354b32c0b27a59852", "committedDate": "2020-06-12T09:01:50Z", "message": "chore: Limit max resizes in fastmap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458fcb4f08a13e4577a9186e0008b2a5bdc8acbf", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/458fcb4f08a13e4577a9186e0008b2a5bdc8acbf", "committedDate": "2020-06-12T09:23:06Z", "message": "chore: Limit max resizes in compactmap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aef27a4388bdf0523cd66366a588c97e20533348", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/aef27a4388bdf0523cd66366a588c97e20533348", "committedDate": "2020-06-12T10:05:16Z", "message": "chore: revert SqlExecutionContextImpl API changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "110ed475a451874b9d202cd5721e2856747e138c", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/110ed475a451874b9d202cd5721e2856747e138c", "committedDate": "2020-06-12T10:17:46Z", "message": "chore: freebsd library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b13350841e6a562b18b665dfac19caa7510ad9a", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/4b13350841e6a562b18b665dfac19caa7510ad9a", "committedDate": "2020-06-12T15:32:33Z", "message": "chore: Add max memory pages to sorted key sets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2b9a8eb1daef624e551e9f6193fa2e6485b4fb", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/aa2b9a8eb1daef624e551e9f6193fa2e6485b4fb", "committedDate": "2020-06-15T08:43:33Z", "message": "chore: Remove SqlResourceLimiter from Map and use SqlExecutionInterruptor where possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24888d397ce5d84ffe83d217e357f20686a9ab62", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/24888d397ce5d84ffe83d217e357f20686a9ab62", "committedDate": "2020-06-15T08:49:54Z", "message": "chore: Remove SqlResourceLimiter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e2619520985427ea4d95637f90ca7db81130ff6", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/3e2619520985427ea4d95637f90ca7db81130ff6", "committedDate": "2020-06-15T09:28:29Z", "message": "chore: Revert file commited by mistake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a9aaf72f64c2baab38c7e3f3cbbfbc71e582f83", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/7a9aaf72f64c2baab38c7e3f3cbbfbc71e582f83", "committedDate": "2020-06-15T09:44:39Z", "message": "chore: Fix resource closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3133c99a6fce3c291cf7d1e2299a6cb1fe6798b", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/e3133c99a6fce3c291cf7d1e2299a6cb1fe6798b", "committedDate": "2020-06-15T12:03:54Z", "message": "chore: Add interruptor to UnionRecordCursor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3b71c51ffa3cc0cd5b57f94517c63a45d91c29f", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/f3b71c51ffa3cc0cd5b57f94517c63a45d91c29f", "committedDate": "2020-06-15T12:26:14Z", "message": "chore: Add interruptor to DelegatingRecordCursor instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "979e10032961ce5e92422e7ba1de1c3114b7dc9e", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/979e10032961ce5e92422e7ba1de1c3114b7dc9e", "committedDate": "2020-06-15T12:44:33Z", "message": "chore: Remove http.security.max.in.memory.rows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079abf901d990f0e4905a89a4fd90c17f070067a", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/079abf901d990f0e4905a89a4fd90c17f070067a", "committedDate": "2020-06-15T14:32:45Z", "message": "chore: Fix memory restriction tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc3d6c9e41f53a0fec1fb3f7b918f1b9ffe72d4", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/4fc3d6c9e41f53a0fec1fb3f7b918f1b9ffe72d4", "committedDate": "2020-06-15T14:41:49Z", "message": "chore: Fix memory restriction tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60d278635fe7f8cc9730f3487d91fcecddb2024", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/d60d278635fe7f8cc9730f3487d91fcecddb2024", "committedDate": "2020-06-15T14:49:48Z", "message": "Merge remote-tracking branch 'origin/master' into security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/401ba1cd547041f9a8cd18d7670794c03b27111b", "committedDate": "2020-06-15T19:36:30Z", "message": "Merge remote-tracking branch 'origin/master' into security"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzMxNDgx", "url": "https://github.com/questdb/questdb/pull/396#pullrequestreview-431331481", "createdAt": "2020-06-16T09:37:53Z", "commit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzo1M1rOGkTamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowMDoyOFrOGkUO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDAyNg==", "bodyText": "is there a way to default limits to \"unlimited\" ?", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440720026", "createdAt": "2020-06-16T09:37:53Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/PropServerConfiguration.java", "diffHunk": "@@ -312,6 +321,7 @@ public PropServerConfiguration(String root, Properties properties) throws Server\n         this.workStealTimeoutNanos = getLong(properties, \"cairo.work.steal.timeout.nanos\", 10_000);\n         this.parallelIndexingEnabled = getBoolean(properties, \"cairo.parallel.indexing.enabled\", true);\n         this.sqlJoinMetadataPageSize = getIntSize(properties, \"cairo.sql.join.metadata.page.size\", 16384);\n+        this.sqlJoinMetadataMaxResizes = getIntSize(properties, \"cairo.sql.join.metadata.max.resizes\", 25_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTM1NA==", "bodyText": "throwing static instance of exception does not preserve correct stack trace. For that reason we need to indicate where limit overflow came from. Include name of class for example", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440721354", "createdAt": "2020-06-16T09:40:00Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/map/FastMap.java", "diffHunk": "@@ -346,28 +343,33 @@ private void rehash() {\n     }\n \n     private void resize(int size) {\n-        long kCapacity = (kLimit - kStart) << 1;\n-        long target = key.appendAddress + size - kStart;\n-        if (kCapacity < target) {\n-            kCapacity = Numbers.ceilPow2(target);\n-        }\n-        long kAddress = Unsafe.realloc(this.kStart, this.capacity, kCapacity);\n-\n-        this.capacity = kCapacity;\n-        long d = kAddress - this.kStart;\n-        kPos += d;\n-        long colOffsetDelta = key.nextColOffset - key.startAddress;\n-        key.startAddress += d;\n-        key.appendAddress += d;\n-        key.nextColOffset = key.startAddress + colOffsetDelta;\n-\n-        assert kPos > 0;\n-        assert key.startAddress > 0;\n-        assert key.appendAddress > 0;\n-        assert key.nextColOffset > 0;\n-\n-        this.kStart = kAddress;\n-        this.kLimit = kAddress + kCapacity;\n+        if (nResizes < maxResizes) {\n+            nResizes++;\n+            long kCapacity = (kLimit - kStart) << 1;\n+            long target = key.appendAddress + size - kStart;\n+            if (kCapacity < target) {\n+                kCapacity = Numbers.ceilPow2(target);\n+            }\n+            long kAddress = Unsafe.realloc(this.kStart, this.capacity, kCapacity);\n+    \n+            this.capacity = kCapacity;\n+            long d = kAddress - this.kStart;\n+            kPos += d;\n+            long colOffsetDelta = key.nextColOffset - key.startAddress;\n+            key.startAddress += d;\n+            key.appendAddress += d;\n+            key.nextColOffset = key.startAddress + colOffsetDelta;\n+    \n+            assert kPos > 0;\n+            assert key.startAddress > 0;\n+            assert key.appendAddress > 0;\n+            assert key.nextColOffset > 0;\n+    \n+            this.kStart = kAddress;\n+            this.kLimit = kAddress + kCapacity;\n+        } else {\n+            throw LimitOverflowException.instance().put(\"limit of \").put(maxResizes).put(\" resizes exceeded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjk4NA==", "bodyText": "this has to be optimised. Prevalent outcome of the \"if\" statement is that nothing needs checking, for example 1 in 1_000_000 loop iterations checks. The method need to look like optimised for \"not checking\" outcome.", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440722984", "createdAt": "2020-06-16T09:42:43Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.questdb.griffin;\n+\n+import java.io.Closeable;\n+\n+import io.questdb.cairo.CairoException;\n+import io.questdb.network.NetworkFacade;\n+import io.questdb.std.Unsafe;\n+\n+public class HttpSqlExecutionInterruptor implements SqlExecutionInterruptor, Closeable {\n+    private final NetworkFacade nf;\n+    private final int nIterationsPerCheck;\n+    private final int bufferSize;\n+    private long buffer;\n+    private int nIterationsSinceCheck;\n+    private long fd = -1;\n+\n+    public HttpSqlExecutionInterruptor(NetworkFacade nf, int nIterationsPerCheck, int bufferSize) {\n+        super();\n+        this.nf = nf;\n+        this.nIterationsPerCheck = nIterationsPerCheck;\n+        this.bufferSize = bufferSize;\n+        buffer = Unsafe.malloc(bufferSize);\n+    }\n+\n+    @Override\n+    public void checkInterrupted() {\n+        assert fd != -1;\n+        if (nIterationsSinceCheck == nIterationsPerCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDkzNQ==", "bodyText": "lets cache interruptor instance. If JIT leaves double de-reference inside the loop - its bad", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440724935", "createdAt": "2020-06-16T09:46:05Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java", "diffHunk": "@@ -89,13 +90,14 @@ public void toTop() {\n     }\n \n     @Override\n-    public void of(RecordCursor base) {\n+    public void of(RecordCursor base, SqlExecutionContext executionContext) {\n         this.base = base;\n         this.baseRecord = base.getRecord();\n         final Record placeHolderRecord = base.getRecordB();\n \n         chain.clear();\n         while (base.hasNext()) {\n+            executionContext.getSqlExecutionInterruptor().checkInterrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTE0OQ==", "bodyText": "same, double de-ref", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440725149", "createdAt": "2020-06-16T09:46:25Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java", "diffHunk": "@@ -81,34 +81,21 @@ public long size() {\n     }\n \n     @Override\n-    public void of(RecordCursor base) {\n-        of(base, Long.MAX_VALUE);\n-    }\n-\n-    public void of(RecordCursor base, long maxSize) {\n+    public void of(RecordCursor base, SqlExecutionContext executionContext) {\n         try {\n-            if (maxSize > base.size()) {\n-                this.chainCursor = chain.getCursor(base);\n-                final Record record = base.getRecord();\n+            this.chainCursor = chain.getCursor(base);\n+            final Record record = base.getRecord();\n \n-                long nRows = 0;\n-                chain.clear();\n-                while (base.hasNext()) {\n-                    if (nRows < maxSize) {\n-                        nRows++;\n-                        // Tree chain is liable to re-position record to\n-                        // other rows to do record comparison. We must use our\n-                        // own record instance in case base cursor keeps\n-                        // state in the record it returns.\n-                        chain.put(record);\n-                    } else {\n-                        throw LimitOverflowException.instance(maxSize);\n-                    }\n-                }\n-                chainCursor.toTop();\n-            } else {\n-                throw LimitOverflowException.instance(maxSize);\n+            chain.clear();\n+            while (base.hasNext()) {\n+                executionContext.getSqlExecutionInterruptor().checkInterrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMjc4Mw==", "bodyText": "likewise, we need to denote source of exception", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440732783", "createdAt": "2020-06-16T09:59:26Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/std/MemoryPages.java", "diffHunk": "@@ -87,6 +95,10 @@ private void allocate0(long index) {\n             throw new OutOfMemoryError();\n         }\n \n+        if (index > maxPages) {\n+            throw LimitOverflowException.instance().put(\"Maximum number of pages (\").put(maxPages).put(\") breached\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMzQwNw==", "bodyText": "could we add these properties in production server.conf as well with comments?", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440733407", "createdAt": "2020-06-16T10:00:28Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/resources/server.conf", "diffHunk": "@@ -73,8 +76,10 @@ cairo.sql.join.context.pool.capacity=32\n cairo.lexer.pool.capacity=1024\n cairo.sql.map.key.capacity=1024\n cairo.sql.map.page.size=6m\n+cairo.sql.map.max.resizes=128", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2872483e57cbe3098c16508a3fdfb4265d810f0f", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/2872483e57cbe3098c16508a3fdfb4265d810f0f", "committedDate": "2020-06-16T13:24:13Z", "message": "chore: Ressource limit check changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "committedDate": "2020-06-16T14:35:47Z", "message": "chore: Resource limit check changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c529b396f07f8de2b106975fedde18c513892c2", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/8c529b396f07f8de2b106975fedde18c513892c2", "committedDate": "2020-06-16T15:35:41Z", "message": "chore: build windows library"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjQwMDY4", "url": "https://github.com/questdb/questdb/pull/396#pullrequestreview-431640068", "createdAt": "2020-06-16T15:39:01Z", "commit": {"oid": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOTowMVrOGkhd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOTowMVrOGkhd4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Mg==", "bodyText": "this is intense. Function exec should take long time, lets keep this on cursor only", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440950242", "createdAt": "2020-06-16T15:39:01Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java", "diffHunk": "@@ -106,13 +117,15 @@ public boolean hasNext() {\n \n         final int n = groupByFunctions.size();\n         for (int i = 0; i < n; i++) {\n+            interruptor.checkInterrupted();\n             groupByFunctions.getQuick(i).computeFirst(simpleMapValue, baseRecord);\n         }\n \n         while (base.hasNext()) {\n             long timestamp = timestampSampler.round(baseRecord.getTimestamp(timestampIndex));\n             if (lastTimestamp == timestamp) {\n                 for (int i = 0; i < n; i++) {\n+                    interruptor.checkInterrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313ec4111eedaed336d71283da974e2ad5c81eba", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/313ec4111eedaed336d71283da974e2ad5c81eba", "committedDate": "2020-06-16T15:49:49Z", "message": "chore: Resource limit check changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ddb35c920d3d4d77ba54c95c94461081a6f9c1d", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/5ddb35c920d3d4d77ba54c95c94461081a6f9c1d", "committedDate": "2020-06-17T14:05:22Z", "message": "chore: Change interruptor logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df201650e76b936a3aa051a564e615c4b56d2f3", "author": {"user": {"login": "patrickSpaceSurfer", "name": "Patrick Mackinlay"}}, "url": "https://github.com/questdb/questdb/commit/8df201650e76b936a3aa051a564e615c4b56d2f3", "committedDate": "2020-06-17T14:08:12Z", "message": "chore: Change interruptor logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e8c29dcc8f37be5d6d094d3cb3968cf472beff", "author": {"user": {"login": "bluestreak01", "name": "Vlad Ilyushchenko"}}, "url": "https://github.com/questdb/questdb/commit/e7e8c29dcc8f37be5d6d094d3cb3968cf472beff", "committedDate": "2020-06-17T14:30:11Z", "message": "chore(http): log tidy up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDY0MTQ3", "url": "https://github.com/questdb/questdb/pull/396#pullrequestreview-432464147", "createdAt": "2020-06-17T14:31:47Z", "commit": {"oid": "e7e8c29dcc8f37be5d6d094d3cb3968cf472beff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3237, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}