{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTAwNjIy", "number": 566, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxMzozOFrOEcmHXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNDozOVrOEcmJZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDIwMDYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxMzozOFrOHHOJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzowMTo0NFrOHIC__w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDAxNQ==", "bodyText": "This method is introduced but not tested. How does this map to PG type?", "url": "https://github.com/questdb/questdb/pull/566#discussion_r477334015", "createdAt": "2020-08-26T14:13:38Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "diffHunk": "@@ -518,6 +540,12 @@ private void appendByteColumn(Record record, int columnIndex) {\n         responseAsciiSink.putLenEx(a);\n     }\n \n+    private void appendCharColumn(Record record, int columnIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3987680a323fc8dd2e32901e1f67d7cf5583c54"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5OTgwNw==", "bodyText": "sorry, removed as not used", "url": "https://github.com/questdb/questdb/pull/566#discussion_r478199807", "createdAt": "2020-08-27T07:01:44Z", "author": {"login": "jaugsburger"}, "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "diffHunk": "@@ -518,6 +540,12 @@ private void appendByteColumn(Record record, int columnIndex) {\n         responseAsciiSink.putLenEx(a);\n     }\n \n+    private void appendCharColumn(Record record, int columnIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDAxNQ=="}, "originalCommit": {"oid": "c3987680a323fc8dd2e32901e1f67d7cf5583c54"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDIwMzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNDoxOVrOHHOL7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzowMTo0OVrOHIDAPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDUxMQ==", "bodyText": "inferParameterType() is liable to return -1, which is not handled and not tested either.", "url": "https://github.com/questdb/questdb/pull/566#discussion_r477334511", "createdAt": "2020-08-26T14:14:19Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "diffHunk": "@@ -690,11 +702,50 @@ private void bindVariables(\n                 throw BadProtocolException.INSTANCE;\n             }\n             ensureData(lo, valueLen, msgLimit, j);\n+            //infer type if needed\n+            if (inferTypes) {\n+                int pgType = inferParameterType(lo, valueLen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3987680a323fc8dd2e32901e1f67d7cf5583c54"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5OTg2OA==", "bodyText": "fixed", "url": "https://github.com/questdb/questdb/pull/566#discussion_r478199868", "createdAt": "2020-08-27T07:01:49Z", "author": {"login": "jaugsburger"}, "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "diffHunk": "@@ -690,11 +702,50 @@ private void bindVariables(\n                 throw BadProtocolException.INSTANCE;\n             }\n             ensureData(lo, valueLen, msgLimit, j);\n+            //infer type if needed\n+            if (inferTypes) {\n+                int pgType = inferParameterType(lo, valueLen);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDUxMQ=="}, "originalCommit": {"oid": "c3987680a323fc8dd2e32901e1f67d7cf5583c54"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDIwNTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNDozOVrOHHONIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzowMTo1OVrOHIDAmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDgxNg==", "bodyText": "tests don't get here", "url": "https://github.com/questdb/questdb/pull/566#discussion_r477334816", "createdAt": "2020-08-26T14:14:39Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "diffHunk": "@@ -817,6 +868,16 @@ private CharSequence getStatementName(long lo, long hi) throws BadProtocolExcept\n         return statementName;\n     }\n \n+    private int inferParameterType(long lo, int valueLen) {\n+        for (int i = 0; i < typeManager.getProbeCount(); i++) {\n+            TypeAdapter typeAdapter = typeManager.getProbe(i);\n+            if (typeAdapter.probe(parameterHolder.of(lo, lo + valueLen))) {\n+                return typeOids.get(typeAdapter.getType());\n+            }\n+        }\n+        return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3987680a323fc8dd2e32901e1f67d7cf5583c54"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5OTk2Mg==", "bodyText": "added test", "url": "https://github.com/questdb/questdb/pull/566#discussion_r478199962", "createdAt": "2020-08-27T07:01:59Z", "author": {"login": "jaugsburger"}, "path": "core/src/main/java/io/questdb/cutlass/pgwire/PGConnectionContext.java", "diffHunk": "@@ -817,6 +868,16 @@ private CharSequence getStatementName(long lo, long hi) throws BadProtocolExcept\n         return statementName;\n     }\n \n+    private int inferParameterType(long lo, int valueLen) {\n+        for (int i = 0; i < typeManager.getProbeCount(); i++) {\n+            TypeAdapter typeAdapter = typeManager.getProbe(i);\n+            if (typeAdapter.probe(parameterHolder.of(lo, lo + valueLen))) {\n+                return typeOids.get(typeAdapter.getType());\n+            }\n+        }\n+        return -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDgxNg=="}, "originalCommit": {"oid": "c3987680a323fc8dd2e32901e1f67d7cf5583c54"}, "originalPosition": 214}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2185, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}