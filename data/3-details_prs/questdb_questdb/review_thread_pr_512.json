{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNjAxMDEx", "number": 512, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo1ODo1M1rOEQ5obg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjozNjo0N1rOEQ6MHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTU2OTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeCharFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo1ODo1M1rOG1T0uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyNzoyNVrOG44X0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MjUwNQ==", "bodyText": "SQL 'like' is case sensitive", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458552505", "createdAt": "2020-07-22T05:58:53Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeCharFunctionFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+public class LikeCharFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Sa)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        return new MatchFunction(\n+                position,\n+                args.getQuick(0),\n+                args.getQuick(1).getChar(null)\n+        );\n+    }\n+\n+    private static class MatchFunction extends BooleanFunction implements UnaryFunction {\n+        private final Function value;\n+        private final char expected;\n+\n+        public MatchFunction(int position, Function value, char expected) {\n+            super(position);\n+            this.value = value;\n+            this.expected = expected;\n+        }\n+\n+        @Override\n+        public boolean getBool(Record rec) {\n+            CharSequence cs = getArg().getStr(rec);\n+            return cs != null && cs.length()==1 && Character.toLowerCase(cs.charAt(0))==Character.toLowerCase(expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NzA0MA==", "bodyText": "@bluestreak01  https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like\nTry query : SELECT * FROM Customers WHERE CustomerName LIKE 'alfreds%';\nI am getting results for Alfred. Just want to double check before making change.", "url": "https://github.com/questdb/questdb/pull/512#discussion_r462297040", "createdAt": "2020-07-29T13:27:25Z", "author": {"login": "mick2004"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeCharFunctionFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+public class LikeCharFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Sa)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        return new MatchFunction(\n+                position,\n+                args.getQuick(0),\n+                args.getQuick(1).getChar(null)\n+        );\n+    }\n+\n+    private static class MatchFunction extends BooleanFunction implements UnaryFunction {\n+        private final Function value;\n+        private final char expected;\n+\n+        public MatchFunction(int position, Function value, char expected) {\n+            super(position);\n+            this.value = value;\n+            this.expected = expected;\n+        }\n+\n+        @Override\n+        public boolean getBool(Record rec) {\n+            CharSequence cs = getArg().getStr(rec);\n+            return cs != null && cs.length()==1 && Character.toLowerCase(cs.charAt(0))==Character.toLowerCase(expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MjUwNQ=="}, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTU3MzcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjowMDo1N1rOG1T3dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyOTowNlrOG44ctA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MzIwNg==", "bodyText": "This message is shown to user as well as position of the error. User needs to know what to do with this. 'likeString' is not a commonly known term :)", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458553206", "createdAt": "2020-07-22T06:00:57Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5ODI5Mg==", "bodyText": "@bluestreak01  What should be message. Is \"NULL not supported for like expression\" ok ? else suggest some message", "url": "https://github.com/questdb/questdb/pull/512#discussion_r462298292", "createdAt": "2020-07-29T13:29:06Z", "author": {"login": "mick2004"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MzIwNg=="}, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTU4NjI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjowNjozNVrOG1T-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyOToyNVrOG44diQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NTA3NA==", "bodyText": "What IDE are you using? Would it be possible to format the code?", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458555074", "createdAt": "2020-07-22T06:06:35Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");\n+\n+\n+            return new MatchFunction(position, value, matcher);\n+\n+\n+        } catch (PatternSyntaxException e) {\n+            throw SqlException.$(args.getQuick(1).getPosition() + e.getIndex() + 1, e.getMessage());\n+        }\n+    }\n+\n+    public static String escapeSpecialChars(CharSequence s )\n+    {\n+        int len = s.length();\n+        if (len == 0)\n+        {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder(s.length() * 2);\n+        for (int i = 0; i < len; i++)\n+        {\n+            char c = s.charAt(i);\n+            if (\"[](){}.*+?$^|#\\\\\".indexOf(c) != -1)\n+            {\n+                sb.append(\"\\\\\");\n+            }\n+            sb.append(c);\n+        }\n+        return sb.toString();\n+    }\n+\n+\n+    private static class MatchFunction extends BooleanFunction implements UnaryFunction {\n+        private final Function value;\n+        private final Matcher matcher;\n+\n+        public MatchFunction(int position, Function value, Matcher matcher) {\n+            super(position);\n+            this.value = value;\n+            this.matcher = matcher;\n+        }\n+\n+        @Override\n+        public boolean getBool(Record rec) {\n+            CharSequence cs = getArg().getStr(rec);\n+            return cs != null && matcher.reset(cs).matches();\n+        }\n+\n+        @Override\n+        public Function getArg() {\n+            return value;\n+        }\n+    }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5ODUwNQ==", "bodyText": "@bluestreak01  sure", "url": "https://github.com/questdb/questdb/pull/512#discussion_r462298505", "createdAt": "2020-07-29T13:29:25Z", "author": {"login": "mick2004"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");\n+\n+\n+            return new MatchFunction(position, value, matcher);\n+\n+\n+        } catch (PatternSyntaxException e) {\n+            throw SqlException.$(args.getQuick(1).getPosition() + e.getIndex() + 1, e.getMessage());\n+        }\n+    }\n+\n+    public static String escapeSpecialChars(CharSequence s )\n+    {\n+        int len = s.length();\n+        if (len == 0)\n+        {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder(s.length() * 2);\n+        for (int i = 0; i < len; i++)\n+        {\n+            char c = s.charAt(i);\n+            if (\"[](){}.*+?$^|#\\\\\".indexOf(c) != -1)\n+            {\n+                sb.append(\"\\\\\");\n+            }\n+            sb.append(c);\n+        }\n+        return sb.toString();\n+    }\n+\n+\n+    private static class MatchFunction extends BooleanFunction implements UnaryFunction {\n+        private final Function value;\n+        private final Matcher matcher;\n+\n+        public MatchFunction(int position, Function value, Matcher matcher) {\n+            super(position);\n+            this.value = value;\n+            this.matcher = matcher;\n+        }\n+\n+        @Override\n+        public boolean getBool(Record rec) {\n+            CharSequence cs = getArg().getStr(rec);\n+            return cs != null && matcher.reset(cs).matches();\n+        }\n+\n+        @Override\n+        public Function getArg() {\n+            return value;\n+        }\n+    }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NTA3NA=="}, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYwMDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxMjo0OFrOG1UG-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxMjo0OFrOG1UG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NzE3Nw==", "bodyText": "StringBuilder is transient and throw-away instance. Please instead use\nMisc.getThreadLocalBuilder()", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458557177", "createdAt": "2020-07-22T06:12:48Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");\n+\n+\n+            return new MatchFunction(position, value, matcher);\n+\n+\n+        } catch (PatternSyntaxException e) {\n+            throw SqlException.$(args.getQuick(1).getPosition() + e.getIndex() + 1, e.getMessage());\n+        }\n+    }\n+\n+    public static String escapeSpecialChars(CharSequence s )\n+    {\n+        int len = s.length();\n+        if (len == 0)\n+        {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder(s.length() * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYwNDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNDoxNVrOG1UJAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNDoxNVrOG1UJAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NzY5OQ==", "bodyText": "this can be done in the same loop as escaping special characters, which would eliminate two extra loops and two string instances.", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458557699", "createdAt": "2020-07-22T06:14:15Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYwNTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNDo0NlrOG1UJrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNDo0NlrOG1UJrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1Nzg2OA==", "bodyText": "'like' is case sensitive", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458557868", "createdAt": "2020-07-22T06:14:46Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYwODMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNTo1NVrOG1ULew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxNTo1NVrOG1ULew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1ODMzMQ==", "bodyText": "please use Chars.toString(). Instances of strings are liable to be cached in the future.", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458558331", "createdAt": "2020-07-22T06:15:55Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");\n+\n+\n+            return new MatchFunction(position, value, matcher);\n+\n+\n+        } catch (PatternSyntaxException e) {\n+            throw SqlException.$(args.getQuick(1).getPosition() + e.getIndex() + 1, e.getMessage());\n+        }\n+    }\n+\n+    public static String escapeSpecialChars(CharSequence s )\n+    {\n+        int len = s.length();\n+        if (len == 0)\n+        {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder(s.length() * 2);\n+        for (int i = 0; i < len; i++)\n+        {\n+            char c = s.charAt(i);\n+            if (\"[](){}.*+?$^|#\\\\\".indexOf(c) != -1)\n+            {\n+                sb.append(\"\\\\\");\n+            }\n+            sb.append(c);\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYzMzM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNTo1MlrOG1UaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNTo1MlrOG1UaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MjEzOQ==", "bodyText": "there is no unit test that hits this line", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458562139", "createdAt": "2020-07-22T06:25:52Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");\n+\n+\n+            return new MatchFunction(position, value, matcher);\n+\n+\n+        } catch (PatternSyntaxException e) {\n+            throw SqlException.$(args.getQuick(1).getPosition() + e.getIndex() + 1, e.getMessage());\n+        }\n+    }\n+\n+    public static String escapeSpecialChars(CharSequence s )\n+    {\n+        int len = s.length();\n+        if (len == 0)\n+        {\n+            return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYzNDI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNjoxNlrOG1Ua6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNjoxNlrOG1Ua6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MjI4MA==", "bodyText": "this code is untested", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458562280", "createdAt": "2020-07-22T06:26:16Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/regex/LikeStrFunctionFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.regex;\n+\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.BooleanFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.ObjList;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+public class LikeStrFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"like(Ss)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) throws SqlException {\n+        Function value = args.getQuick(0);\n+\n+        CharSequence likeString=args.getQuick(1).getStr(null);\n+\n+        if (likeString == null) {\n+            throw SqlException.$(args.getQuick(1).getPosition(), \"NULL likeString\");\n+        }\n+\n+        String regex = escapeSpecialChars(likeString).\n+                replace('_', '.').replace(\"%\", \".*?\");\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex,\n+                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL).matcher(\"\");\n+\n+\n+            return new MatchFunction(position, value, matcher);\n+\n+\n+        } catch (PatternSyntaxException e) {\n+            throw SqlException.$(args.getQuick(1).getPosition() + e.getIndex() + 1, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTY2MDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/OperatorExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjozNjo0N1rOG1UrBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzozNDoyOFrOG44qyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NjQwNg==", "bodyText": "'like' must not be a symbol (see 'and', 'not' etc.)\nThe reason is that symbols break up words, for example 'dislike' will be tokenized as 'dis' + 'like' if 'like' was a symbol. When 'like' is not a symbol - 'dislike' will remain whole and 'like' will only be tokenized as such when it is separated with whitespace, e.g.  x like '%a'", "url": "https://github.com/questdb/questdb/pull/512#discussion_r458566406", "createdAt": "2020-07-22T06:36:47Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/OperatorExpression.java", "diffHunk": "@@ -54,6 +54,7 @@\n         add(new OperatorExpression(\"and\", 11, true, BINARY, false));\n         add(new OperatorExpression(\"or\", 11, true, BINARY, false));\n         add(new OperatorExpression(\"not\", 11, true, UNARY, false));\n+        add(new OperatorExpression(\"like\", 7, true, BINARY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwMTg5OA==", "bodyText": "@bluestreak01 understood", "url": "https://github.com/questdb/questdb/pull/512#discussion_r462301898", "createdAt": "2020-07-29T13:34:28Z", "author": {"login": "mick2004"}, "path": "core/src/main/java/io/questdb/griffin/OperatorExpression.java", "diffHunk": "@@ -54,6 +54,7 @@\n         add(new OperatorExpression(\"and\", 11, true, BINARY, false));\n         add(new OperatorExpression(\"or\", 11, true, BINARY, false));\n         add(new OperatorExpression(\"not\", 11, true, UNARY, false));\n+        add(new OperatorExpression(\"like\", 7, true, BINARY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NjQwNg=="}, "originalCommit": {"oid": "6b5e6e287a27dcfb62c41b0d96da7db1caabdf6b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2172, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}