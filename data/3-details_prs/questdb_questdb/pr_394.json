{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDkzOTQ4", "number": 394, "title": "feature(griffin) - support rename column. fixed #223", "bodyText": "", "createdAt": "2020-06-15T12:03:48Z", "url": "https://github.com/questdb/questdb/pull/394", "merged": true, "mergeCommit": {"oid": "d74a57d71dbae348e85d53dd01212eefe9679bfe"}, "closed": true, "closedAt": "2020-06-22T11:51:01Z", "author": {"login": "jaugsburger"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrfLK4gH2gAyNDM0NDkzOTQ4OmU1YWYxNmE2OGJiOWI1ZWIxOTlmZjU2ZTRmMmNlMjY5ODA0YTNkOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctvdeAAFqTQzNDg0ODQyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c", "committedDate": "2020-06-15T11:44:05Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjYzNjY3", "url": "https://github.com/questdb/questdb/pull/394#pullrequestreview-430663667", "createdAt": "2020-06-15T13:51:57Z", "commit": {"oid": "e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo1MjozMVrOGjzJBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo1ODo0OVrOGjza6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5MTIzNg==", "bodyText": "There is no test to ensure already existing TableReader is able to pick up new column", "url": "https://github.com/questdb/questdb/pull/394#discussion_r440191236", "createdAt": "2020-06-15T13:52:31Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/java/io/questdb/griffin/AlterTableRenameColumnTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin;\n+\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.TableUtils;\n+import io.questdb.cairo.TableWriter;\n+import io.questdb.cairo.security.AllowAllCairoSecurityContext;\n+import io.questdb.griffin.engine.functions.rnd.SharedRandom;\n+import io.questdb.std.Rnd;\n+import io.questdb.test.tools.TestUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.questdb.griffin.CompiledQuery.ALTER;\n+\n+public class AlterTableRenameColumnTest extends AbstractGriffinTest {\n+\n+    @Before\n+    public void setUp3() {\n+        SharedRandom.RANDOM.set(new Rnd());\n+    }\n+\n+    @Test\n+    public void testBadSyntax() throws Exception {\n+        assertFailure(\"alter table x rename column l ,m\", 31, \"',' expected\");\n+    }\n+\n+    @Test\n+    public void testBusyTable() throws Exception {\n+        TestUtils.assertMemoryLeak(() -> {\n+            CountDownLatch allHaltLatch = new CountDownLatch(1);\n+            try {\n+                createX();\n+                AtomicInteger errorCounter = new AtomicInteger();\n+\n+                // start a thread that would lock table we\n+                // about to alter\n+                CyclicBarrier startBarrier = new CyclicBarrier(2);\n+                CountDownLatch haltLatch = new CountDownLatch(1);\n+                new Thread(() -> {\n+                    try (TableWriter ignore = engine.getWriter(AllowAllCairoSecurityContext.INSTANCE, \"x\")) {\n+                        // make sure writer is locked before test begins\n+                        startBarrier.await();\n+                        // make sure we don't release writer until main test finishes\n+                        Assert.assertTrue(haltLatch.await(5, TimeUnit.SECONDS));\n+                    } catch (Throwable e) {\n+                        e.printStackTrace();\n+                        errorCounter.incrementAndGet();\n+                    } finally {\n+                        engine.releaseAllReaders();\n+                        engine.releaseAllWriters();\n+\n+                        allHaltLatch.countDown();\n+                    }\n+                }).start();\n+\n+                startBarrier.await();\n+                try {\n+                    compiler.compile(\"alter table x rename column ik\", sqlExecutionContext);\n+                    Assert.fail();\n+                } finally {\n+                    haltLatch.countDown();\n+                }\n+            } catch (SqlException e) {\n+                Assert.assertEquals(12, e.getPosition());\n+                TestUtils.assertContains(e.getFlyweightMessage(), \"table 'x' cannot be altered: [0]: table busy\");\n+            }\n+\n+            engine.releaseAllReaders();\n+            engine.releaseAllWriters();\n+\n+            allHaltLatch.await(2, TimeUnit.SECONDS);\n+        });\n+    }\n+\n+    @Test\n+    public void testRenameExpectColumnKeyword() throws Exception {\n+        assertFailure(\"alter table x rename\", 20, \"'column' expected\");\n+    }\n+\n+    @Test\n+    public void testRenameExpectColumnName() throws Exception {\n+        assertFailure(\"alter table x rename column\", 27, \"column name expected\");\n+    }\n+\n+    @Test\n+    public void testRenameColumn() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5MzE5MQ==", "bodyText": "the syntax of rename column SQL has to be correct", "url": "https://github.com/questdb/questdb/pull/394#discussion_r440193191", "createdAt": "2020-06-15T13:55:17Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/java/io/questdb/griffin/AlterTableRenameColumnTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin;\n+\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.TableUtils;\n+import io.questdb.cairo.TableWriter;\n+import io.questdb.cairo.security.AllowAllCairoSecurityContext;\n+import io.questdb.griffin.engine.functions.rnd.SharedRandom;\n+import io.questdb.std.Rnd;\n+import io.questdb.test.tools.TestUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.questdb.griffin.CompiledQuery.ALTER;\n+\n+public class AlterTableRenameColumnTest extends AbstractGriffinTest {\n+\n+    @Before\n+    public void setUp3() {\n+        SharedRandom.RANDOM.set(new Rnd());\n+    }\n+\n+    @Test\n+    public void testBadSyntax() throws Exception {\n+        assertFailure(\"alter table x rename column l ,m\", 31, \"',' expected\");\n+    }\n+\n+    @Test\n+    public void testBusyTable() throws Exception {\n+        TestUtils.assertMemoryLeak(() -> {\n+            CountDownLatch allHaltLatch = new CountDownLatch(1);\n+            try {\n+                createX();\n+                AtomicInteger errorCounter = new AtomicInteger();\n+\n+                // start a thread that would lock table we\n+                // about to alter\n+                CyclicBarrier startBarrier = new CyclicBarrier(2);\n+                CountDownLatch haltLatch = new CountDownLatch(1);\n+                new Thread(() -> {\n+                    try (TableWriter ignore = engine.getWriter(AllowAllCairoSecurityContext.INSTANCE, \"x\")) {\n+                        // make sure writer is locked before test begins\n+                        startBarrier.await();\n+                        // make sure we don't release writer until main test finishes\n+                        Assert.assertTrue(haltLatch.await(5, TimeUnit.SECONDS));\n+                    } catch (Throwable e) {\n+                        e.printStackTrace();\n+                        errorCounter.incrementAndGet();\n+                    } finally {\n+                        engine.releaseAllReaders();\n+                        engine.releaseAllWriters();\n+\n+                        allHaltLatch.countDown();\n+                    }\n+                }).start();\n+\n+                startBarrier.await();\n+                try {\n+                    compiler.compile(\"alter table x rename column ik\", sqlExecutionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NDQ0NA==", "bodyText": "I would suggest we update column name on existing metadata", "url": "https://github.com/questdb/questdb/pull/394#discussion_r440194444", "createdAt": "2020-06-15T13:56:52Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/TableWriterMetadata.java", "diffHunk": "@@ -102,6 +102,21 @@ void removeColumn(CharSequence name) {\n         }\n     }\n \n+    void renameColumn(CharSequence name, CharSequence newName) {\n+        int index = columnNameIndexMap.keyIndex(name);\n+        int columnIndex = columnNameIndexMap.valueAt(index);\n+        columnNameIndexMap.removeAt(index);\n+        columnNameIndexMap.putAt(columnNameIndexMap.keyIndex(newName), newName, columnIndex);\n+        //\n+        TableColumnMetadata oldColumnMetadata = columnMetadata.get(columnIndex);\n+        TableColumnMetadata newColumnMetadata = new TableColumnMetadata(Chars.toString(newName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NTgxNg==", "bodyText": "there is no need to reference lambda here", "url": "https://github.com/questdb/questdb/pull/394#discussion_r440195816", "createdAt": "2020-06-15T13:58:49Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/TableWriter.java", "diffHunk": "@@ -690,6 +691,80 @@ public void removeColumn(CharSequence name) {\n         LOG.info().$(\"REMOVED column '\").utf8(name).$(\"' from \").$(path).$();\n     }\n \n+\n+    public void renameColumn(CharSequence currentName, CharSequence newName) {\n+\n+        checkDistressed();\n+\n+        final int index = getColumnIndex(currentName);\n+        final int type = metadata.getColumnType(index);\n+\n+        LOG.info().$(\"renaming column '\").utf8(currentName).$(\"' to '\").utf8(newName).$(\"' from \").$(path).$();\n+\n+        commit();\n+\n+        this.metaSwapIndex = renameColumnFromMeta(index, newName);\n+\n+        // close _meta so we can rename it\n+        metaMem.close();\n+\n+        // rename _meta to _meta.prev\n+        renameMetaToMetaPrev(currentName);\n+\n+        // after we moved _meta to _meta.prev\n+        // we have to have _todo to restore _meta should anything go wrong\n+        writeRestoreMetaTodo(currentName);\n+\n+        // rename _meta.swp to _meta\n+        renameSwapMetaToMeta(currentName);\n+\n+        try {\n+            // open _meta file\n+            openMetaFile();\n+\n+            // remove _todo\n+            removeTodoFile();\n+\n+            // remove column files has to be done after _todo is removed\n+            renameColumnFiles(currentName, newName, type);\n+        } catch (CairoException err) {\n+            throwDistressException(err);\n+        }\n+\n+        bumpStructureVersion();\n+\n+        metadata.renameColumn(currentName, newName);\n+\n+        LOG.info().$(\"RENAMED column '\").utf8(currentName).$(\"' to '\").utf8(newName).$(\"' from \").$(path).$();\n+    }\n+\n+    private void renameColumnFiles(CharSequence columnName, CharSequence newName, int columnType) {\n+        try {\n+            ff.iterateDir(path.$(), (file, type) -> {\n+                nativeLPSZ.of(file);\n+                if (type == Files.DT_DIR && IGNORED_FILES.excludes(nativeLPSZ)) {\n+                    path.trimTo(rootLen);\n+                    path.concat(nativeLPSZ);\n+                    int plen = path.length();\n+                    RENAME_OR_LOG.rename(ff, dFile(path, columnName), dFile(path.trimTo(plen), newName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5af16a68bb9b5eb199ff56e4f2ce269804a3d8c"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3d9d41b549a225566de9844bffdaf52855d711", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/3c3d9d41b549a225566de9844bffdaf52855d711", "committedDate": "2020-06-16T08:44:38Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00829409ee7ec71b86a3fcc3ccf52c1ac064c99b", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/00829409ee7ec71b86a3fcc3ccf52c1ac064c99b", "committedDate": "2020-06-16T10:33:01Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d4806d135a9bb0c7a449cd45b05fcde160bd1a", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/b6d4806d135a9bb0c7a449cd45b05fcde160bd1a", "committedDate": "2020-06-17T12:49:06Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e34cc25a5b22de55d9f71db4ff78d4874d60f9", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/16e34cc25a5b22de55d9f71db4ff78d4874d60f9", "committedDate": "2020-06-17T13:22:30Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bfa9f49cea3f94f458fbbae00d82f3730e37f21", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/8bfa9f49cea3f94f458fbbae00d82f3730e37f21", "committedDate": "2020-06-17T15:11:46Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "966828dc7a4c4300c4a25ae579c5006700ba7839", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/966828dc7a4c4300c4a25ae579c5006700ba7839", "committedDate": "2020-06-19T14:22:39Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de0681afa7532ebaf69e6c51d31870b57b290695", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/de0681afa7532ebaf69e6c51d31870b57b290695", "committedDate": "2020-06-22T10:43:23Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cbc9e2ebab58466e7ad7265fd3dfcd8413c8c3d", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/1cbc9e2ebab58466e7ad7265fd3dfcd8413c8c3d", "committedDate": "2020-06-22T10:51:44Z", "message": "feature(griffin) - support rename column. fixed #223"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0ODQ4NDIy", "url": "https://github.com/questdb/questdb/pull/394#pullrequestreview-434848422", "createdAt": "2020-06-22T11:50:24Z", "commit": {"oid": "1cbc9e2ebab58466e7ad7265fd3dfcd8413c8c3d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3235, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}