{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Nzk3NTM3", "number": 499, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0NTozMVrOEM2-bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowOTo1OVrOEM3c5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTE5MDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0NTozMVrOGvNhLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo0NTozMVrOGvNhLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1Nzc0MQ==", "bodyText": "this is not tested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452157741", "createdAt": "2020-07-09T11:45:31Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -2095,62 +2096,87 @@ private RecordCursorFactory generateTableQuery(\n                         }\n                     }\n \n-                    if (nKeyValues == 1) {\n-                        final RowCursorFactory rcf;\n-                        final CharSequence symbol = intrinsicModel.keyValues.get(0);\n-                        final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n-                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n-                        if (f != null && f.isConstant() && !f.getBool(null)) {\n-                            return new EmptyTableRecordCursorFactory(myMeta);\n-                        }\n+                    if (intrinsicModel.keyExcludedValues.size() == 0) {\n+                        if (nKeyValues == 1) {\n+                            final RowCursorFactory rcf;\n+                            final CharSequence symbol = intrinsicModel.keyValues.get(0);\n+                            final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n+                            final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                            if (f != null && f.isConstant() && !f.getBool(null)) {\n+                                return new EmptyTableRecordCursorFactory(myMeta);\n+                            }\n \n-                        if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n-                            if (f == null) {\n-                                rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                            if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n+                                if (f == null) {\n+                                    rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                                } else {\n+                                    rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                }\n                             } else {\n-                                rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                if (f == null) {\n+                                    rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                                } else {\n+                                    rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                }\n                             }\n-                        } else {\n-                            if (f == null) {\n-                                rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                            return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n+                        }\n+\n+                        symbolValueList.clear();\n+\n+                        for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n+                            symbolValueList.add(intrinsicModel.keyValues.get(i));\n+                        }\n+\n+                        if (orderByKeyColumn) {\n+                            myMeta.setTimestampIndex(-1);\n+                            if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n                             } else {\n-                                rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n                             }\n                         }\n-                        return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n-                    }\n \n-                    symbolValueList.clear();\n-\n-                    for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n-                        symbolValueList.add(intrinsicModel.keyValues.get(i));\n-                    }\n+                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant() && !f.getBool(null)) {\n+                            return new EmptyTableRecordCursorFactory(myMeta);\n+                        }\n+                        return new FilterOnValuesRecordCursorFactory(\n+                                myMeta,\n+                                dfcFactory,\n+                                symbolValueList,\n+                                keyColumnIndex,\n+                                reader,\n+                                f,\n+                                model.getOrderByAdviceMnemonic(),\n+                                orderByKeyColumn,\n+                                indexDirection,\n+                                columnIndexes\n+                        );\n \n-                    if (orderByKeyColumn) {\n-                        myMeta.setTimestampIndex(-1);\n-                        if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n-                            symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n-                        } else {\n-                            symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n+                    } else if (intrinsicModel.keyExcludedValues.size() > 0 && reader.getSymbolMapReader(keyColumnIndex).size() < configuration.getMaxSymbolNotEqualsCount()) {\n+                        symbolValueList.clear();\n+                        for (int i = 0, n = intrinsicModel.keyExcludedValues.size(); i < n; i++) {\n+                            symbolValueList.add(intrinsicModel.keyExcludedValues.get(i));\n+                        }\n+                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant() && !f.getBool(null)) {\n+                            return new EmptyTableRecordCursorFactory(myMeta);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTIzODEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMDoxNFrOGvN95w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMDoxNFrOGvN95w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTA5NQ==", "bodyText": "I recently tackled potential memory leak in Functions. Function is Closeable interface.\nWhen 'f' is constant we will be discarding it regardless if it is true or false. 'false' branch is ok, but 'true' branch needs to behave as if there is no filter. In both cases 'f' need to be closed. I usually do something like:\nif (f.isConstant()) {\n   try (f) {\n       if (f.getBool(null)) {\n       } else {\n       }\n   }\n}", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452165095", "createdAt": "2020-07-09T12:00:14Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -2095,62 +2096,87 @@ private RecordCursorFactory generateTableQuery(\n                         }\n                     }\n \n-                    if (nKeyValues == 1) {\n-                        final RowCursorFactory rcf;\n-                        final CharSequence symbol = intrinsicModel.keyValues.get(0);\n-                        final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n-                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n-                        if (f != null && f.isConstant() && !f.getBool(null)) {\n-                            return new EmptyTableRecordCursorFactory(myMeta);\n-                        }\n+                    if (intrinsicModel.keyExcludedValues.size() == 0) {\n+                        if (nKeyValues == 1) {\n+                            final RowCursorFactory rcf;\n+                            final CharSequence symbol = intrinsicModel.keyValues.get(0);\n+                            final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n+                            final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                            if (f != null && f.isConstant() && !f.getBool(null)) {\n+                                return new EmptyTableRecordCursorFactory(myMeta);\n+                            }\n \n-                        if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n-                            if (f == null) {\n-                                rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                            if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n+                                if (f == null) {\n+                                    rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                                } else {\n+                                    rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                }\n                             } else {\n-                                rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                if (f == null) {\n+                                    rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                                } else {\n+                                    rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                }\n                             }\n-                        } else {\n-                            if (f == null) {\n-                                rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                            return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n+                        }\n+\n+                        symbolValueList.clear();\n+\n+                        for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n+                            symbolValueList.add(intrinsicModel.keyValues.get(i));\n+                        }\n+\n+                        if (orderByKeyColumn) {\n+                            myMeta.setTimestampIndex(-1);\n+                            if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n                             } else {\n-                                rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n                             }\n                         }\n-                        return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n-                    }\n \n-                    symbolValueList.clear();\n-\n-                    for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n-                        symbolValueList.add(intrinsicModel.keyValues.get(i));\n-                    }\n+                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant() && !f.getBool(null)) {\n+                            return new EmptyTableRecordCursorFactory(myMeta);\n+                        }\n+                        return new FilterOnValuesRecordCursorFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI0MTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMToxOFrOGvN_4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozNDoxOVrOGvRYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTYwMA==", "bodyText": "this branch is untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452165600", "createdAt": "2020-07-09T12:01:18Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMTA0OA==", "bodyText": "done", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452221048", "createdAt": "2020-07-09T13:34:19Z", "author": {"login": "jaugsburger"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTYwMA=="}, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI0NzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMzoyMlrOGvOD6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMzoyMlrOGvOD6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NjYzNA==", "bodyText": "the loops should not be calling size() on every iteration. Somewhere else you did:\nfor (int n = 0, k = keyExclNodes.size(); n < k; n++) {\nwhich is much better", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452166634", "createdAt": "2020-07-09T12:03:22Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);\n+                                            int removedIndex = model.keyExcludedValues.remove(value);\n+                                            if (removedIndex > -1) {\n+                                                model.keyExcludedValuePositions.removeIndex(index);\n+                                            }\n+                                        } else {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                        }\n+                                        tempNodes.clear();\n+                                        for (int i = 0; i < keyExclNodes.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI0ODM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMzozNVrOGvOEVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowMzozNVrOGvOEVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2Njc0Mw==", "bodyText": "same as above", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452166743", "createdAt": "2020-07-09T12:03:35Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);\n+                                            int removedIndex = model.keyExcludedValues.remove(value);\n+                                            if (removedIndex > -1) {\n+                                                model.keyExcludedValuePositions.removeIndex(index);\n+                                            }\n+                                        } else {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                        }\n+                                        tempNodes.clear();\n+                                        for (int i = 0; i < keyExclNodes.size(); i++) {\n+                                            ExpressionNode expressionNode = keyExclNodes.get(i);\n+                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                                                tempNodes.add(expressionNode);\n+                                            }\n+                                        }\n+                                        for (int i = 0; i < tempNodes.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI1MjQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNDo1NFrOGvOG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNDo1NFrOGvOG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NzQwMA==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452167400", "createdAt": "2020-07-09T12:04:54Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -460,21 +493,78 @@ private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel mod\n                     case ColumnType.LONG:\n                     case ColumnType.INT:\n                         if (m.isColumnIndexed(index)) {\n-\n-                            // check if we are limited by preferred column\n-                            if (preferredKeyColumn != null && !Chars.equals(preferredKeyColumn, column)) {\n+                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n+                            final boolean indexed = m.isColumnIndexed(index);\n+                            if (indexed && preferredKeyColumn == null) {\n+                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n+                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI1MzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNToxNVrOGvOHmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNToxNVrOGvOHmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NzU3Nw==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452167577", "createdAt": "2020-07-09T12:05:15Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -460,21 +493,78 @@ private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel mod\n                     case ColumnType.LONG:\n                     case ColumnType.INT:\n                         if (m.isColumnIndexed(index)) {\n-\n-                            // check if we are limited by preferred column\n-                            if (preferredKeyColumn != null && !Chars.equals(preferredKeyColumn, column)) {\n+                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n+                            final boolean indexed = m.isColumnIndexed(index);\n+                            if (indexed && preferredKeyColumn == null) {\n+                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n+                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n+                                        // so we have to clear all other key values\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                            model.keyExcludedValues.add(value);\n+                                            model.keyExcludedValuePositions.add(b.position);\n+                                            return true;\n+                                        }\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n+                                    } else {\n+                                        if (model.keyValues.contains(value)) {\n+                                            if (model.keyValues.size() > 1) {\n+                                                int removedIndex = model.keyValues.remove(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI1NjMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNjowMFrOGvOJSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNjowMFrOGvOJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODAxMQ==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168011", "createdAt": "2020-07-09T12:06:00Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -460,21 +493,78 @@ private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel mod\n                     case ColumnType.LONG:\n                     case ColumnType.INT:\n                         if (m.isColumnIndexed(index)) {\n-\n-                            // check if we are limited by preferred column\n-                            if (preferredKeyColumn != null && !Chars.equals(preferredKeyColumn, column)) {\n+                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n+                            final boolean indexed = m.isColumnIndexed(index);\n+                            if (indexed && preferredKeyColumn == null) {\n+                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n+                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n+                                        // so we have to clear all other key values\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                            model.keyExcludedValues.add(value);\n+                                            model.keyExcludedValuePositions.add(b.position);\n+                                            return true;\n+                                        }\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n+                                    } else {\n+                                        if (model.keyValues.contains(value)) {\n+                                            if (model.keyValues.size() > 1) {\n+                                                int removedIndex = model.keyValues.remove(value);\n+                                                if (removedIndex > -1) {\n+                                                    model.keyValuePositions.removeIndex(index);\n+                                                }\n+                                                model.keyValuePositions.remove(b.position);\n+                                            } else {\n+                                                model.keyValues.clear();\n+                                                model.keyValuePositions.clear();\n+                                            }\n+                                            tempNodes.clear();\n+                                            for (int i = 0; i < keyNodes.size(); i++) {\n+                                                ExpressionNode expressionNode = keyNodes.get(i);\n+                                                if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                                    expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                                                    tempNodes.add(expressionNode);\n+                                                }\n+                                            }\n+                                            for (int i = 0; i < tempNodes.size(); i++) {\n+                                                keyNodes.remove(tempNodes.get(i));\n+                                            }\n+                                        }\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n+                                        model.intrinsicValue = IntrinsicModel.FALSE;\n+                                        return false;\n+                                    }\n+                                } else if (model.keyColumn == null || m.getIndexValueBlockCapacity(index) > m.getIndexValueBlockCapacity(model.keyColumn)) {\n+                                    model.keyColumn = column;\n+                                    model.keyExcludedValues.clear();\n+                                    model.keyExcludedValuePositions.clear();\n+                                    model.keyExcludedValues.add(value);\n+                                    model.keyExcludedValuePositions.add(b.position);\n+                                    for (int n = 0, k = keyExclNodes.size(); n < k; n++) {\n+                                        keyExclNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n+                                    }\n+                                    keyExclNodes.clear();\n+                                    for (int n = 0, k = keyNodes.size(); n < k; n++) {\n+                                        keyNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI1ODI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNjozNVrOGvOKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNjozNVrOGvOKdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODMwOQ==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168309", "createdAt": "2020-07-09T12:06:35Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -548,16 +638,79 @@ private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, E\n         return false;\n     }\n \n-    private void analyzeNotListOfValues(CharSequence columnName, RecordMetadata m, ExpressionNode notNode) {\n-        final int columnIndex = m.getColumnIndex(columnName);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (m.getColumnType(columnIndex)) {\n+        switch (meta.getColumnType(columnIndex)) {\n             case ColumnType.SYMBOL:\n             case ColumnType.STRING:\n             case ColumnType.LONG:\n             case ColumnType.INT:\n-                if (m.isColumnIndexed(columnIndex) && (preferredKeyColumn == null || Chars.equals(preferredKeyColumn, columnName))) {\n-                    keyExclNodes.add(notNode);\n+\n+                boolean newColumn = true;\n+\n+                if (model.keyColumn != null\n+                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI1OTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNzowMVrOGvOLcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNzowMVrOGvOLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODU2Mg==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168562", "createdAt": "2020-07-09T12:07:01Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -548,16 +638,79 @@ private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, E\n         return false;\n     }\n \n-    private void analyzeNotListOfValues(CharSequence columnName, RecordMetadata m, ExpressionNode notNode) {\n-        final int columnIndex = m.getColumnIndex(columnName);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (m.getColumnType(columnIndex)) {\n+        switch (meta.getColumnType(columnIndex)) {\n             case ColumnType.SYMBOL:\n             case ColumnType.STRING:\n             case ColumnType.LONG:\n             case ColumnType.INT:\n-                if (m.isColumnIndexed(columnIndex) && (preferredKeyColumn == null || Chars.equals(preferredKeyColumn, columnName))) {\n-                    keyExclNodes.add(notNode);\n+\n+                boolean newColumn = true;\n+\n+                if (model.keyColumn != null\n+                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                    return;\n+                }\n+\n+\n+                int i = node.paramCount - 1;\n+                tempKeys.clear();\n+                tempPos.clear();\n+\n+                // collect and analyze values of indexed field\n+                // if any of values is not an indexed constant - bail out\n+                if (i == 1) {\n+                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI2MTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNzo0MFrOGvOMtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowNzo0MFrOGvOMtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODg4NQ==", "bodyText": "untested loop", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168885", "createdAt": "2020-07-09T12:07:40Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -548,16 +638,79 @@ private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, E\n         return false;\n     }\n \n-    private void analyzeNotListOfValues(CharSequence columnName, RecordMetadata m, ExpressionNode notNode) {\n-        final int columnIndex = m.getColumnIndex(columnName);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (m.getColumnType(columnIndex)) {\n+        switch (meta.getColumnType(columnIndex)) {\n             case ColumnType.SYMBOL:\n             case ColumnType.STRING:\n             case ColumnType.LONG:\n             case ColumnType.INT:\n-                if (m.isColumnIndexed(columnIndex) && (preferredKeyColumn == null || Chars.equals(preferredKeyColumn, columnName))) {\n-                    keyExclNodes.add(notNode);\n+\n+                boolean newColumn = true;\n+\n+                if (model.keyColumn != null\n+                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                    return;\n+                }\n+\n+\n+                int i = node.paramCount - 1;\n+                tempKeys.clear();\n+                tempPos.clear();\n+\n+                // collect and analyze values of indexed field\n+                // if any of values is not an indexed constant - bail out\n+                if (i == 1) {\n+                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n+                        return;\n+                    }\n+                    if (tempKeys.add(unquote(node.rhs.token))) {\n+                        tempPos.add(node.position);\n+                    }\n+                } else {\n+                    for (i--; i > -1; i--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI2NzUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowOTozMVrOGvOQfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozMTo1MlrOGvRSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTg1NQ==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452169855", "createdAt": "2020-07-09T12:09:31Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.table;\n+\n+import io.questdb.cairo.SymbolMapReaderImpl;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.OrderByMnemonic;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class FilterOnExcludedValuesRecordCursorFactory extends AbstractDataFrameRecordCursorFactory {\n+    private final DataFrameRecordCursor cursor;\n+    private final int columnIndex;\n+    private final Function filter;\n+    private final ObjList<RowCursorFactory> cursorFactories;\n+    private final ObjList<CharSequence> keyExcludedValues = new ObjList<>();\n+    private final ObjList<CharSequence> includedValues = new ObjList<>();\n+    private final boolean followedOrderByAdvice;\n+    private final int indexDirection;\n+    private final int maxSymbolNotEqualsCount;\n+\n+    public FilterOnExcludedValuesRecordCursorFactory(\n+            @NotNull RecordMetadata metadata,\n+            @NotNull DataFrameCursorFactory dataFrameCursorFactory,\n+            @NotNull @Transient ObjList<CharSequence> keyValues,\n+            int columnIndex,\n+            @Nullable Function filter,\n+            int orderByMnemonic,\n+            boolean followedOrderByAdvice,\n+            int indexDirection,\n+            @NotNull IntList columnIndexes,\n+            int maxSymbolNotEqualsCount) {\n+        super(metadata, dataFrameCursorFactory);\n+        this.indexDirection = indexDirection;\n+        this.maxSymbolNotEqualsCount = maxSymbolNotEqualsCount;\n+        final int nKeyValues = keyValues.size();\n+        this.keyExcludedValues.addAll(keyValues);\n+        this.columnIndex = columnIndex;\n+        this.filter = filter;\n+        cursorFactories = new ObjList<>(nKeyValues);\n+        if (orderByMnemonic == OrderByMnemonic.ORDER_BY_INVARIANT) {\n+            this.cursor = new DataFrameRecordCursor(new SequentialRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        } else {\n+            this.cursor = new DataFrameRecordCursor(new HeapRowCursorFactory(cursorFactories), false, filter, columnIndexes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxOTQxNA==", "bodyText": "done", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452219414", "createdAt": "2020-07-09T13:31:52Z", "author": {"login": "jaugsburger"}, "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.table;\n+\n+import io.questdb.cairo.SymbolMapReaderImpl;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.OrderByMnemonic;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class FilterOnExcludedValuesRecordCursorFactory extends AbstractDataFrameRecordCursorFactory {\n+    private final DataFrameRecordCursor cursor;\n+    private final int columnIndex;\n+    private final Function filter;\n+    private final ObjList<RowCursorFactory> cursorFactories;\n+    private final ObjList<CharSequence> keyExcludedValues = new ObjList<>();\n+    private final ObjList<CharSequence> includedValues = new ObjList<>();\n+    private final boolean followedOrderByAdvice;\n+    private final int indexDirection;\n+    private final int maxSymbolNotEqualsCount;\n+\n+    public FilterOnExcludedValuesRecordCursorFactory(\n+            @NotNull RecordMetadata metadata,\n+            @NotNull DataFrameCursorFactory dataFrameCursorFactory,\n+            @NotNull @Transient ObjList<CharSequence> keyValues,\n+            int columnIndex,\n+            @Nullable Function filter,\n+            int orderByMnemonic,\n+            boolean followedOrderByAdvice,\n+            int indexDirection,\n+            @NotNull IntList columnIndexes,\n+            int maxSymbolNotEqualsCount) {\n+        super(metadata, dataFrameCursorFactory);\n+        this.indexDirection = indexDirection;\n+        this.maxSymbolNotEqualsCount = maxSymbolNotEqualsCount;\n+        final int nKeyValues = keyValues.size();\n+        this.keyExcludedValues.addAll(keyValues);\n+        this.columnIndex = columnIndex;\n+        this.filter = filter;\n+        cursorFactories = new ObjList<>(nKeyValues);\n+        if (orderByMnemonic == OrderByMnemonic.ORDER_BY_INVARIANT) {\n+            this.cursor = new DataFrameRecordCursor(new SequentialRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        } else {\n+            this.cursor = new DataFrameRecordCursor(new HeapRowCursorFactory(cursorFactories), false, filter, columnIndexes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTg1NQ=="}, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI2ODg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjowOTo1OVrOGvORVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozMjowN1rOGvRS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3MDA2OQ==", "bodyText": "untested", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452170069", "createdAt": "2020-07-09T12:09:59Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.table;\n+\n+import io.questdb.cairo.SymbolMapReaderImpl;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.OrderByMnemonic;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class FilterOnExcludedValuesRecordCursorFactory extends AbstractDataFrameRecordCursorFactory {\n+    private final DataFrameRecordCursor cursor;\n+    private final int columnIndex;\n+    private final Function filter;\n+    private final ObjList<RowCursorFactory> cursorFactories;\n+    private final ObjList<CharSequence> keyExcludedValues = new ObjList<>();\n+    private final ObjList<CharSequence> includedValues = new ObjList<>();\n+    private final boolean followedOrderByAdvice;\n+    private final int indexDirection;\n+    private final int maxSymbolNotEqualsCount;\n+\n+    public FilterOnExcludedValuesRecordCursorFactory(\n+            @NotNull RecordMetadata metadata,\n+            @NotNull DataFrameCursorFactory dataFrameCursorFactory,\n+            @NotNull @Transient ObjList<CharSequence> keyValues,\n+            int columnIndex,\n+            @Nullable Function filter,\n+            int orderByMnemonic,\n+            boolean followedOrderByAdvice,\n+            int indexDirection,\n+            @NotNull IntList columnIndexes,\n+            int maxSymbolNotEqualsCount) {\n+        super(metadata, dataFrameCursorFactory);\n+        this.indexDirection = indexDirection;\n+        this.maxSymbolNotEqualsCount = maxSymbolNotEqualsCount;\n+        final int nKeyValues = keyValues.size();\n+        this.keyExcludedValues.addAll(keyValues);\n+        this.columnIndex = columnIndex;\n+        this.filter = filter;\n+        cursorFactories = new ObjList<>(nKeyValues);\n+        if (orderByMnemonic == OrderByMnemonic.ORDER_BY_INVARIANT) {\n+            this.cursor = new DataFrameRecordCursor(new SequentialRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        } else {\n+            this.cursor = new DataFrameRecordCursor(new HeapRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        }\n+        this.followedOrderByAdvice = followedOrderByAdvice;\n+    }\n+\n+    @Override\n+    public void close() {\n+        Misc.free(filter);\n+        Misc.free(includedValues);\n+        Misc.free(keyExcludedValues);\n+    }\n+\n+    @Override\n+    public boolean followedOrderByAdvice() {\n+        return followedOrderByAdvice;\n+    }\n+\n+    @Override\n+    public boolean recordCursorSupportsRandomAccess() {\n+        return true;\n+    }\n+\n+    public void recalculateIncludedValues(TableReader tableReader) {\n+        final SymbolMapReaderImpl symbolMapReader = (SymbolMapReaderImpl) tableReader.getSymbolMapReader(columnIndex);\n+        for (int i = 0; i < symbolMapReader.size(); i++) {\n+            final CharSequence symbol = symbolMapReader.valueOf(i);\n+            if (keyExcludedValues.indexOf(symbol) < 0 && includedValues.indexOf(symbol) < 0) {\n+                final RowCursorFactory rowCursorFactory;\n+                int symbolKey = symbolMapReader.keyOf(symbol);\n+                if (filter == null) {\n+                    rowCursorFactory = new SymbolIndexRowCursorFactory(columnIndex, symbolKey, cursorFactories.size() == 0, indexDirection);\n+                } else {\n+                    rowCursorFactory = new SymbolIndexFilteredRowCursorFactory(columnIndex, symbolKey, filter, cursorFactories.size() == 0, indexDirection);\n+                }\n+                includedValues.add(Chars.toString(symbol));\n+                cursorFactories.add(rowCursorFactory);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected RecordCursor getCursorInstance(\n+            DataFrameCursor dataFrameCursor,\n+            SqlExecutionContext executionContext\n+    ) {\n+        try (TableReader reader = dataFrameCursor.getTableReader()) {\n+            if (reader.getSymbolMapReader(columnIndex).size() > maxSymbolNotEqualsCount) {\n+                throw ReaderOutOfDateException.INSTANCE;\n+            }\n+        }\n+        this.recalculateIncludedValues(dataFrameCursor.getTableReader());\n+        this.cursor.of(dataFrameCursor, executionContext);\n+        if (filter != null) {\n+            filter.init(this.cursor, executionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxOTYwMA==", "bodyText": "done", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452219600", "createdAt": "2020-07-09T13:32:07Z", "author": {"login": "jaugsburger"}, "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.table;\n+\n+import io.questdb.cairo.SymbolMapReaderImpl;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.OrderByMnemonic;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class FilterOnExcludedValuesRecordCursorFactory extends AbstractDataFrameRecordCursorFactory {\n+    private final DataFrameRecordCursor cursor;\n+    private final int columnIndex;\n+    private final Function filter;\n+    private final ObjList<RowCursorFactory> cursorFactories;\n+    private final ObjList<CharSequence> keyExcludedValues = new ObjList<>();\n+    private final ObjList<CharSequence> includedValues = new ObjList<>();\n+    private final boolean followedOrderByAdvice;\n+    private final int indexDirection;\n+    private final int maxSymbolNotEqualsCount;\n+\n+    public FilterOnExcludedValuesRecordCursorFactory(\n+            @NotNull RecordMetadata metadata,\n+            @NotNull DataFrameCursorFactory dataFrameCursorFactory,\n+            @NotNull @Transient ObjList<CharSequence> keyValues,\n+            int columnIndex,\n+            @Nullable Function filter,\n+            int orderByMnemonic,\n+            boolean followedOrderByAdvice,\n+            int indexDirection,\n+            @NotNull IntList columnIndexes,\n+            int maxSymbolNotEqualsCount) {\n+        super(metadata, dataFrameCursorFactory);\n+        this.indexDirection = indexDirection;\n+        this.maxSymbolNotEqualsCount = maxSymbolNotEqualsCount;\n+        final int nKeyValues = keyValues.size();\n+        this.keyExcludedValues.addAll(keyValues);\n+        this.columnIndex = columnIndex;\n+        this.filter = filter;\n+        cursorFactories = new ObjList<>(nKeyValues);\n+        if (orderByMnemonic == OrderByMnemonic.ORDER_BY_INVARIANT) {\n+            this.cursor = new DataFrameRecordCursor(new SequentialRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        } else {\n+            this.cursor = new DataFrameRecordCursor(new HeapRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        }\n+        this.followedOrderByAdvice = followedOrderByAdvice;\n+    }\n+\n+    @Override\n+    public void close() {\n+        Misc.free(filter);\n+        Misc.free(includedValues);\n+        Misc.free(keyExcludedValues);\n+    }\n+\n+    @Override\n+    public boolean followedOrderByAdvice() {\n+        return followedOrderByAdvice;\n+    }\n+\n+    @Override\n+    public boolean recordCursorSupportsRandomAccess() {\n+        return true;\n+    }\n+\n+    public void recalculateIncludedValues(TableReader tableReader) {\n+        final SymbolMapReaderImpl symbolMapReader = (SymbolMapReaderImpl) tableReader.getSymbolMapReader(columnIndex);\n+        for (int i = 0; i < symbolMapReader.size(); i++) {\n+            final CharSequence symbol = symbolMapReader.valueOf(i);\n+            if (keyExcludedValues.indexOf(symbol) < 0 && includedValues.indexOf(symbol) < 0) {\n+                final RowCursorFactory rowCursorFactory;\n+                int symbolKey = symbolMapReader.keyOf(symbol);\n+                if (filter == null) {\n+                    rowCursorFactory = new SymbolIndexRowCursorFactory(columnIndex, symbolKey, cursorFactories.size() == 0, indexDirection);\n+                } else {\n+                    rowCursorFactory = new SymbolIndexFilteredRowCursorFactory(columnIndex, symbolKey, filter, cursorFactories.size() == 0, indexDirection);\n+                }\n+                includedValues.add(Chars.toString(symbol));\n+                cursorFactories.add(rowCursorFactory);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected RecordCursor getCursorInstance(\n+            DataFrameCursor dataFrameCursor,\n+            SqlExecutionContext executionContext\n+    ) {\n+        try (TableReader reader = dataFrameCursor.getTableReader()) {\n+            if (reader.getSymbolMapReader(columnIndex).size() > maxSymbolNotEqualsCount) {\n+                throw ReaderOutOfDateException.INSTANCE;\n+            }\n+        }\n+        this.recalculateIncludedValues(dataFrameCursor.getTableReader());\n+        this.cursor.of(dataFrameCursor, executionContext);\n+        if (filter != null) {\n+            filter.init(this.cursor, executionContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3MDA2OQ=="}, "originalCommit": {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2169, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}