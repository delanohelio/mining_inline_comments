{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjc3MzYw", "number": 671, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowMzoxM1rOEy4rMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0ODo0MFrOEy6AsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzkyODE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cairo/TableWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowMzoxM1rOHpxphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowMzoxM1rOHpxphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NzEwOA==", "bodyText": "lambdas like this are allocating, please create member variable with reference to class method", "url": "https://github.com/questdb/questdb/pull/671#discussion_r513567108", "createdAt": "2020-10-28T16:03:13Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/TableWriter.java", "diffHunk": "@@ -874,6 +879,61 @@ public boolean removePartition(long timestamp) {\n         }\n     }\n \n+    public boolean removePartition(Function function) {\n+        if (partitionBy == PartitionBy.NONE) {\n+            return false;\n+        }\n+\n+        long activePartition = timestampFloorMethod.floor(maxTimestamp);\n+        findAllPartitions();\n+        int partitionCount = partitionListByTimestamp.size();\n+        boolean droppingActivePartition = false;\n+        for (int i = 0; i < partitionCount; i++) {\n+            long timestampToRemove = partitionListByTimestamp.get(i);\n+            dropPartitionFunctionRec.setTimestamp(timestampToRemove);\n+            if (function.getBool(dropPartitionFunctionRec)) {\n+                partitionsToDrop.add(timestampToRemove);\n+                if (activePartition == timestampToRemove) {\n+                    droppingActivePartition = true;\n+                }\n+            }\n+        }\n+\n+        int dropPartitionCount = partitionsToDrop.size();\n+        if (dropPartitionCount == 0) {\n+            return false;\n+        } else if (dropPartitionCount == partitionCount) {\n+            truncate();\n+            return true;\n+        } else if (droppingActivePartition) {\n+            LOG.error()\n+                    .$(\"cannot remove active partition [path=\").$(path)\n+                    .$(\", maxTimestamp=\").$ts(maxTimestamp)\n+                    .$(']').$();\n+            return false;\n+        } else {\n+            for (int i = 0; i < dropPartitionCount; i++) {\n+                removePartition(partitionsToDrop.get(i));\n+            }\n+            return true;\n+        }\n+    }\n+\n+    private void findAllPartitions() {\n+        try {\n+            partitionListByTimestamp.clear();\n+            ff.iterateDir(path.$(), (file, type) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "992e5eccebf689ce65d9f18ea7b0b2b7f736da1b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODA2Mjg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMDo1NlrOHpy-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMDo1NlrOHpy-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4ODgxNg==", "bodyText": "there is no feedback if timestamp column is not defined", "url": "https://github.com/questdb/questdb/pull/671#discussion_r513588816", "createdAt": "2020-10-28T16:30:56Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -1027,6 +1027,28 @@ private void alterTableDropColumn(int tableNamePosition, TableWriter writer) thr\n     }\n \n     private void alterTableDropPartition(TableWriter writer) throws SqlException {\n+        CharSequence tok = expectToken(lexer, \"'list' or 'where'\");\n+        if (SqlKeywords.isListKeyword(tok)) {\n+            alterTableDropPartitionByList(writer);\n+        } else if (SqlKeywords.isWhereKeyword(tok)) {\n+            ExpressionNode expr = parser.expr(lexer, (QueryModel) null);\n+            int timestampIndex = writer.getMetadata().getTimestampIndex();\n+            if (timestampIndex != -1) {\n+                String timestampColumnName = writer.getMetadata().getColumnName(timestampIndex);\n+                Function function = functionParser.parseFunction(expr, new SingleTimestampColumnRecordMetadata(timestampColumnName), currentExecutionContext);\n+                if (function != null && function.getType() == ColumnType.BOOLEAN) {\n+                    writer.removePartition(function);\n+                } else {\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"boolean expression expected\");\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "992e5eccebf689ce65d9f18ea7b0b2b7f736da1b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODA2ODc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMjoxM1rOHpzCCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMjoxM1rOHpzCCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4OTc3MA==", "bodyText": "such metadata can be cached with writer to reduce allocations. When we cache this with writer we would need to check what happens when timestamp column is renamed, can we still drop partitions?", "url": "https://github.com/questdb/questdb/pull/671#discussion_r513589770", "createdAt": "2020-10-28T16:32:13Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -1027,6 +1027,28 @@ private void alterTableDropColumn(int tableNamePosition, TableWriter writer) thr\n     }\n \n     private void alterTableDropPartition(TableWriter writer) throws SqlException {\n+        CharSequence tok = expectToken(lexer, \"'list' or 'where'\");\n+        if (SqlKeywords.isListKeyword(tok)) {\n+            alterTableDropPartitionByList(writer);\n+        } else if (SqlKeywords.isWhereKeyword(tok)) {\n+            ExpressionNode expr = parser.expr(lexer, (QueryModel) null);\n+            int timestampIndex = writer.getMetadata().getTimestampIndex();\n+            if (timestampIndex != -1) {\n+                String timestampColumnName = writer.getMetadata().getColumnName(timestampIndex);\n+                Function function = functionParser.parseFunction(expr, new SingleTimestampColumnRecordMetadata(timestampColumnName), currentExecutionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "992e5eccebf689ce65d9f18ea7b0b2b7f736da1b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODA3NjE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/SingleTimestampColumnRecordMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMzo0OVrOHpzGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMzo0OVrOHpzGpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5MDk1MQ==", "bodyText": "there is GenericRecordMetadata, we should use that for consistency", "url": "https://github.com/questdb/questdb/pull/671#discussion_r513590951", "createdAt": "2020-10-28T16:33:49Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SingleTimestampColumnRecordMetadata.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin;\n+\n+import io.questdb.cairo.BaseRecordMetadata;\n+import io.questdb.cairo.ColumnType;\n+import io.questdb.cairo.TableColumnMetadata;\n+import io.questdb.std.CharSequenceIntHashMap;\n+import io.questdb.std.ObjList;\n+\n+public final class SingleTimestampColumnRecordMetadata extends BaseRecordMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "992e5eccebf689ce65d9f18ea7b0b2b7f736da1b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODE0NzA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/cairo/TableWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0ODo0MFrOHpzzxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0ODo0MFrOHpzzxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwMjUwMA==", "bodyText": "can we add partitions to \"toDrop\" list as we find them?\nThis way we only need one new list.", "url": "https://github.com/questdb/questdb/pull/671#discussion_r513602500", "createdAt": "2020-10-28T16:48:40Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/TableWriter.java", "diffHunk": "@@ -874,6 +879,61 @@ public boolean removePartition(long timestamp) {\n         }\n     }\n \n+    public boolean removePartition(Function function) {\n+        if (partitionBy == PartitionBy.NONE) {\n+            return false;\n+        }\n+\n+        long activePartition = timestampFloorMethod.floor(maxTimestamp);\n+        findAllPartitions();\n+        int partitionCount = partitionListByTimestamp.size();\n+        boolean droppingActivePartition = false;\n+        for (int i = 0; i < partitionCount; i++) {\n+            long timestampToRemove = partitionListByTimestamp.get(i);\n+            dropPartitionFunctionRec.setTimestamp(timestampToRemove);\n+            if (function.getBool(dropPartitionFunctionRec)) {\n+                partitionsToDrop.add(timestampToRemove);\n+                if (activePartition == timestampToRemove) {\n+                    droppingActivePartition = true;\n+                }\n+            }\n+        }\n+\n+        int dropPartitionCount = partitionsToDrop.size();\n+        if (dropPartitionCount == 0) {\n+            return false;\n+        } else if (dropPartitionCount == partitionCount) {\n+            truncate();\n+            return true;\n+        } else if (droppingActivePartition) {\n+            LOG.error()\n+                    .$(\"cannot remove active partition [path=\").$(path)\n+                    .$(\", maxTimestamp=\").$ts(maxTimestamp)\n+                    .$(']').$();\n+            return false;\n+        } else {\n+            for (int i = 0; i < dropPartitionCount; i++) {\n+                removePartition(partitionsToDrop.get(i));\n+            }\n+            return true;\n+        }\n+    }\n+\n+    private void findAllPartitions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "992e5eccebf689ce65d9f18ea7b0b2b7f736da1b"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2141, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}