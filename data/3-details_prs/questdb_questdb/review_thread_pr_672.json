{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjAxMTQy", "number": 672, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozMDo1MVrOEyrlrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzozNjozMlrOE0e7Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTc4NDE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozMDo1MVrOHpdA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozMDo1MVrOHpdA7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyOTAzNg==", "bodyText": "thank you for the contribution! Much appreciated!\nIt would be good to also implement getStrLen(). Although the default implementation will work it would be less efficient than retrieving string length without printing uppercase characters to sink", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513229036", "createdAt": "2020-10-28T07:30:51Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.str;\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.Chars;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.StringSink;\n+\n+public class ToUppercaseFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"to_uppercase(S)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(final ObjList<Function> args, final int position, final CairoConfiguration configuration) throws SqlException {\n+        return new ToUppercaseFunc(position, args.get(0));\n+    }\n+\n+    private static class ToUppercaseFunc extends StrFunction implements UnaryFunction {\n+        private final Function arg;\n+\n+        private final StringSink sinkA = new StringSink();\n+\n+        private final StringSink sinkB = new StringSink();\n+\n+        public ToUppercaseFunc(final int position, final Function arg) {\n+            super(position);\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public CharSequence getStr(final Record rec) {\n+            CharSequence str = getArg().getStr(rec);\n+            if (str == null) {\n+                return null;\n+            }\n+\n+            sinkA.clear();\n+            sinkA.put(Chars.toUpperCaseAscii(str));\n+            return sinkA;\n+        }\n+\n+        @Override\n+        public CharSequence getStrB(final Record rec) {\n+            CharSequence str = getArg().getStr(rec);\n+            if (str == null) {\n+                return null;\n+            }\n+\n+            sinkB.clear();\n+            sinkB.put(Chars.toUpperCaseAscii(str));\n+            return sinkB;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTc5MzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/std/Chars.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNDoxMFrOHpdGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNDoxMFrOHpdGIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMDM2OQ==", "bodyText": "This implementation is needlessly allocating. Calls to this method are made from function, that has local CharSink already. String instantiation is not required.", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513230369", "createdAt": "2020-10-28T07:34:10Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -482,14 +482,32 @@ public static String toLowerCaseAscii(@Nullable CharSequence value) {\n             b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n         return b.toString();\n-\n-\n     }\n \n     public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static String toUpperCaseAscii(@Nullable CharSequence value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        final int len = value.length();\n+        if (len == 0) {\n+            return \"\";\n+        }\n+\n+        final CharSink b = Misc.getThreadLocalBuilder();\n+        for (int i = 0; i < len; i++) {\n+            b.put(toUpperCaseAscii(value.charAt(i)));\n+        }\n+        return b.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTc5ODE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/std/Chars.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNTo0N1rOHpdI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNTo0N1rOHpdI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMTA3MQ==", "bodyText": "The ascii uppercase method is insufficient. You should use\nCharacter.toUpperCase()\n\nit is more generic but slower.\nSame things apply to \"lowercase\"", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513231071", "createdAt": "2020-10-28T07:35:47Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -482,14 +482,32 @@ public static String toLowerCaseAscii(@Nullable CharSequence value) {\n             b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n         return b.toString();\n-\n-\n     }\n \n     public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static String toUpperCaseAscii(@Nullable CharSequence value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        final int len = value.length();\n+        if (len == 0) {\n+            return \"\";\n+        }\n+\n+        final CharSink b = Misc.getThreadLocalBuilder();\n+        for (int i = 0; i < len; i++) {\n+            b.put(toUpperCaseAscii(value.charAt(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTgwMDYwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNjozNFrOHpdKTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzozNjozNFrOHpdKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMTQzOQ==", "bodyText": "it would also be good to have test for non-ascii characters", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513231439", "createdAt": "2020-10-28T07:36:34Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java", "diffHunk": "@@ -600,6 +602,54 @@ public void testShortIndexed() throws SqlException {\n         Assert.assertEquals(55, func.getShort(builder.getRecord()));\n     }\n \n+    @Test\n+    public void testUppercaseStr() throws SqlException {\n+        bindVariableService.setStr(\"str\", \"abcDEFghiJKLmnoPQRstuVXZ\");\n+        Function func = expr(\"to_uppercase(:str)\")\n+                .withFunction(new ToUppercaseFunctionFactory())\n+                .$();\n+\n+        func.init(null, sqlExecutionContext);\n+        TestUtils.assertEquals(\"ABCDEFGHIJKLMNOPQRSTUVXZ\", func.getStr(builder.getRecord()));\n+    }\n+\n+    @Test\n+    public void testLowercaseStr() throws SqlException {\n+        bindVariableService.setStr(\"str\", \"abcDEFghiJKLmnoPQRstuVXZ\");\n+        Function func = expr(\"to_lowercase(:str)\")\n+                .withFunction(new ToLowercaseFunctionFactory())\n+                .$();\n+\n+        func.init(null, sqlExecutionContext);\n+        TestUtils.assertEquals(\"abcdefghijklmnopqrstuvxz\", func.getStr(builder.getRecord()));\n+    }\n+\n+    @Test\n+    public void testUppercaseIndexedStr() throws SqlException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDc1NDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/std/Chars.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjozNjozN1rOHqNa8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTowNTo1MlrOHqur6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyMjEyOQ==", "bodyText": "toLowerCaseAscii() is used elsewhere, where only ascii characters allowed. We need to keep implementation unchanged.  The SQL to_lowercase() should call Character.toLowerCase() directly.\nCalling Character.toLowerCase() from toLowerCaseAscii() is also misleading, because implementation is no longer \"ascii\" specific.", "url": "https://github.com/questdb/questdb/pull/672#discussion_r514022129", "createdAt": "2020-10-29T06:36:37Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -468,26 +468,45 @@ public static String stringFromUtf8Bytes(long lo, long hi) {\n         return b.toString();\n     }\n \n-    public static String toLowerCaseAscii(@Nullable CharSequence value) {\n-        if (value == null) {\n-            return null;\n+    public static void toLowerCaseAscii(@Nullable final CharSequence value, final CharSink sink) {\n+        if (value == null || value.length() == 0) {\n+            return;\n         }\n-        final int len = value.length();\n-        if (len == 0) {\n-            return \"\";\n+\n+        for (int i = 0; i < value.length(); i++) {\n+            sink.put(toLowerCaseAscii(value.charAt(i)));\n         }\n+    }\n \n-        final CharSink b = Misc.getThreadLocalBuilder();\n-        for (int i = 0; i < len; i++) {\n-            b.put(toLowerCaseAscii(value.charAt(i)));\n+    public static String toLowerCaseAscii(@Nullable final CharSequence value) {\n+        CharSink sink = Misc.getThreadLocalBuilder();\n+        toLowerCaseAscii(value, sink);\n+        return sink.toString();\n+    }\n+\n+    public static char toLowerCaseAscii(char character) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092222ea194a45c1064e0e879e570c200da9c785"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2NzE0Nw==", "bodyText": "As Character.toLowerCase() is a superset of what the toLowercaseAscii(char) was doing I thought it was ok just to call it inside toLowercaseAscii(char).\nI'll create new methods toUppercase(...) and toLowercase(...) to use Character.toUpperCase() and Character.toLowerCase() respectively.", "url": "https://github.com/questdb/questdb/pull/672#discussion_r514567147", "createdAt": "2020-10-29T21:05:52Z", "author": {"login": "upsidedownsmile"}, "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -468,26 +468,45 @@ public static String stringFromUtf8Bytes(long lo, long hi) {\n         return b.toString();\n     }\n \n-    public static String toLowerCaseAscii(@Nullable CharSequence value) {\n-        if (value == null) {\n-            return null;\n+    public static void toLowerCaseAscii(@Nullable final CharSequence value, final CharSink sink) {\n+        if (value == null || value.length() == 0) {\n+            return;\n         }\n-        final int len = value.length();\n-        if (len == 0) {\n-            return \"\";\n+\n+        for (int i = 0; i < value.length(); i++) {\n+            sink.put(toLowerCaseAscii(value.charAt(i)));\n         }\n+    }\n \n-        final CharSink b = Misc.getThreadLocalBuilder();\n-        for (int i = 0; i < len; i++) {\n-            b.put(toLowerCaseAscii(value.charAt(i)));\n+    public static String toLowerCaseAscii(@Nullable final CharSequence value) {\n+        CharSink sink = Misc.getThreadLocalBuilder();\n+        toLowerCaseAscii(value, sink);\n+        return sink.toString();\n+    }\n+\n+    public static char toLowerCaseAscii(char character) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyMjEyOQ=="}, "originalCommit": {"oid": "092222ea194a45c1064e0e879e570c200da9c785"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzYyOTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDoxMjoyMFrOHrQ3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDoxMjoyMFrOHrQ3vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEyNzIyOQ==", "bodyText": "Rename to ToLowercaseFunc", "url": "https://github.com/questdb/questdb/pull/672#discussion_r515127229", "createdAt": "2020-10-30T14:12:20Z", "author": {"login": "mpsq"}, "path": "core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.str;\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.Chars;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.StringSink;\n+\n+public class ToLowercaseFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"to_lowercase(S)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(final ObjList<Function> args, final int position, final CairoConfiguration configuration) throws SqlException {\n+        return new ToUppercaseFunc(position, args.get(0));\n+    }\n+\n+    private static class ToUppercaseFunc extends StrFunction implements UnaryFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a213d4ce56accc79f69974d3a9d7289bf18eb78"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDY4MDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/std/Chars.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzozNjozM1rOHsO9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo1NTowMVrOHsY-7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDQ3Ng==", "bodyText": "this implementation can be improved in terms of hot path isolation:\n\nstring is not null and longer than zero (hot)\nstring is null or empty (less frequent - cold)\n\nhot path might look like:\nif (str != null) {\n    for (int i = 0, n=str.length(); i < n; i++) {\n                sink.put(toLowerCase(str.charAt(i)));\n    }\n}\nnote that is str.length() is not cached into local variable, java will be calling length() method for every iteration", "url": "https://github.com/questdb/questdb/pull/672#discussion_r516144476", "createdAt": "2020-11-02T17:36:33Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -490,6 +490,34 @@ public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toUpperCase(str.charAt(i)));\n+        }\n+    }\n+\n+    public static char toUpperCase(final char character) {\n+        return Character.toUpperCase(character);\n+    }\n+\n+    public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7abeb6f69e0bc971241fe54eefad9a4beee524fc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwODcxOA==", "bodyText": "As we are trying to have as few method calls as possible then I will remove the methods toUpperCase(char) and toLowerCase(char) and call the respective Character methods directly.", "url": "https://github.com/questdb/questdb/pull/672#discussion_r516308718", "createdAt": "2020-11-02T22:55:01Z", "author": {"login": "upsidedownsmile"}, "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -490,6 +490,34 @@ public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toUpperCase(str.charAt(i)));\n+        }\n+    }\n+\n+    public static char toUpperCase(final char character) {\n+        return Character.toUpperCase(character);\n+    }\n+\n+    public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDQ3Ng=="}, "originalCommit": {"oid": "7abeb6f69e0bc971241fe54eefad9a4beee524fc"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2144, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}