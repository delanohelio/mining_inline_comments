{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NDc1ODgw", "number": 111, "title": "feat(griffin): distinct queries on symbol column retrieve the list fr\u2026", "bodyText": "\u2026om metadata instead of iterating through the table.", "createdAt": "2020-03-12T21:11:04Z", "url": "https://github.com/questdb/questdb/pull/111", "merged": true, "mergeCommit": {"oid": "2edbff196f5481d8aae3fd5fd6779128ac5ae445"}, "closed": true, "closedAt": "2020-03-20T10:22:53Z", "author": {"login": "jaugsburger"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNCUdHgH2gAyMzg3NDc1ODgwOjYzMzAxZWZiZGQwZWJhYzk3NTgyNGY1YzE0MDgwNTNlY2VhYzI5NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPd2zPgFqTM3ODM2NTY5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/63301efbdd0ebac975824f5c1408053eceac295c", "committedDate": "2020-03-12T21:09:15Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTE4OTU3", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-373918957", "createdAt": "2020-03-12T21:35:21Z", "commit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNToyMVrOF1wVrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo0ODo1N1rOF1w9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMDgyOQ==", "bodyText": "this factory does not need creating if condition below is met", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391910829", "createdAt": "2020-03-12T21:35:21Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1110,6 +1110,21 @@ private RecordCursorFactory generateSelectChoose(QueryModel model, SqlExecutionC\n     private RecordCursorFactory generateSelectDistinct(QueryModel model, SqlExecutionContext executionContext) throws SqlException {\n         final RecordCursorFactory factory = generateSubQuery(model, executionContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMTY2OQ==", "bodyText": "reader is a shared resource - SQL code generator must not assign it to the factory, but close it instead in try() block.", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391911669", "createdAt": "2020-03-12T21:36:19Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1110,6 +1110,21 @@ private RecordCursorFactory generateSelectChoose(QueryModel model, SqlExecutionC\n     private RecordCursorFactory generateSelectDistinct(QueryModel model, SqlExecutionContext executionContext) throws SqlException {\n         final RecordCursorFactory factory = generateSubQuery(model, executionContext);\n         try {\n+            if (model.getColumns().size() == 1 && model.getNestedModel() != null && model.getNestedModel().getNestedModel() != null && model.getNestedModel().getNestedModel().getTableName() != null) {\n+                ExpressionNode tableName = model.getNestedModel().getNestedModel().getTableName();\n+                TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName.token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNDYwMQ==", "bodyText": "this cursor should not need base factory", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391914601", "createdAt": "2020-03-12T21:40:15Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1110,6 +1110,21 @@ private RecordCursorFactory generateSelectChoose(QueryModel model, SqlExecutionC\n     private RecordCursorFactory generateSelectDistinct(QueryModel model, SqlExecutionContext executionContext) throws SqlException {\n         final RecordCursorFactory factory = generateSubQuery(model, executionContext);\n         try {\n+            if (model.getColumns().size() == 1 && model.getNestedModel() != null && model.getNestedModel().getNestedModel() != null && model.getNestedModel().getNestedModel().getTableName() != null) {\n+                ExpressionNode tableName = model.getNestedModel().getNestedModel().getTableName();\n+                TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName.token);\n+                CharSequence columnName = model.getColumnNames().get(0);\n+                int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+                int columnType = reader.getMetadata().getColumnType(columnIndex);\n+                if (columnType == ColumnType.SYMBOL) {\n+                    return new DistinctSymbolRecordCursorFactory(\n+                            factory,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNTQ2NQ==", "bodyText": "Reader must not be held by factory. This is a resource hungry instance, which are shared through the engine. Factory must hold on to the CairoEngine instance instead and table name.", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391915465", "createdAt": "2020-03-12T21:41:27Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1110,6 +1110,21 @@ private RecordCursorFactory generateSelectChoose(QueryModel model, SqlExecutionC\n     private RecordCursorFactory generateSelectDistinct(QueryModel model, SqlExecutionContext executionContext) throws SqlException {\n         final RecordCursorFactory factory = generateSubQuery(model, executionContext);\n         try {\n+            if (model.getColumns().size() == 1 && model.getNestedModel() != null && model.getNestedModel().getNestedModel() != null && model.getNestedModel().getNestedModel().getTableName() != null) {\n+                ExpressionNode tableName = model.getNestedModel().getNestedModel().getTableName();\n+                TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName.token);\n+                CharSequence columnName = model.getColumnNames().get(0);\n+                int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+                int columnType = reader.getMetadata().getColumnType(columnIndex);\n+                if (columnType == ColumnType.SYMBOL) {\n+                    return new DistinctSymbolRecordCursorFactory(\n+                            factory,\n+                            entityColumnFilter,\n+                            reader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNTc4MA==", "bodyText": "it is better to pass column index", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391915780", "createdAt": "2020-03-12T21:41:52Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1110,6 +1110,21 @@ private RecordCursorFactory generateSelectChoose(QueryModel model, SqlExecutionC\n     private RecordCursorFactory generateSelectDistinct(QueryModel model, SqlExecutionContext executionContext) throws SqlException {\n         final RecordCursorFactory factory = generateSubQuery(model, executionContext);\n         try {\n+            if (model.getColumns().size() == 1 && model.getNestedModel() != null && model.getNestedModel().getNestedModel() != null && model.getNestedModel().getNestedModel().getTableName() != null) {\n+                ExpressionNode tableName = model.getNestedModel().getNestedModel().getTableName();\n+                TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName.token);\n+                CharSequence columnName = model.getColumnNames().get(0);\n+                int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+                int columnType = reader.getMetadata().getColumnType(columnIndex);\n+                if (columnType == ColumnType.SYMBOL) {\n+                    return new DistinctSymbolRecordCursorFactory(\n+                            factory,\n+                            entityColumnFilter,\n+                            reader,\n+                            columnName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxODc3MA==", "bodyText": "not sure why we need column filter?", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391918770", "createdAt": "2020-03-12T21:45:48Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.EntityColumnFilter;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final RecordMetadata metadata;\n+    private final TableReader reader;\n+    private final CharSequence columnName;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            RecordCursorFactory base,\n+            EntityColumnFilter columnFilter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxOTk5Nw==", "bodyText": "when you have CairoEngine - this is the place to get reader", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391919997", "createdAt": "2020-03-12T21:47:35Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.EntityColumnFilter;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final RecordMetadata metadata;\n+    private final TableReader reader;\n+    private final CharSequence columnName;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            RecordCursorFactory base,\n+            EntityColumnFilter columnFilter,\n+            TableReader reader,\n+            CharSequence columnName) {\n+        final RecordMetadata metadata = base.getMetadata();\n+        columnFilter.of(metadata.getColumnCount());\n+        this.metadata = metadata;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+        this.reader = reader;\n+        this.columnName = columnName;\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        cursor.of(reader, columnName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyMDM4NQ==", "bodyText": "there is method Misc.free() that does something like this", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391920385", "createdAt": "2020-03-12T21:48:04Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.EntityColumnFilter;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final RecordMetadata metadata;\n+    private final TableReader reader;\n+    private final CharSequence columnName;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            RecordCursorFactory base,\n+            EntityColumnFilter columnFilter,\n+            TableReader reader,\n+            CharSequence columnName) {\n+        final RecordMetadata metadata = base.getMetadata();\n+        columnFilter.of(metadata.getColumnCount());\n+        this.metadata = metadata;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+        this.reader = reader;\n+        this.columnName = columnName;\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        cursor.of(reader, columnName);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = new DistinctSymbolRecord();\n+        private TableReader reader;\n+        private SymbolMapReader symbolMapReader;\n+        private int numberOfSymbols;\n+\n+        DistinctSymbolRecordCursor() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (reader != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyMTA0NA==", "bodyText": "we need one more test where symbol value is NULL", "url": "https://github.com/questdb/questdb/pull/111#discussion_r391921044", "createdAt": "2020-03-12T21:48:57Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/java/io/questdb/griffin/SqlCodeGeneratorTest.java", "diffHunk": "@@ -1104,6 +1104,31 @@ public void testSumDoubleColumn() throws Exception {\n         }\n     }\n \n+\n+    @Test\n+    public void testDistinctSymbolColumn() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63301efbdd0ebac975824f5c1408053eceac295c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680668e8bc766f33c598560357aa7c4472850726", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/680668e8bc766f33c598560357aa7c4472850726", "committedDate": "2020-03-13T10:55:30Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MjExMzY4", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374211368", "createdAt": "2020-03-13T10:58:42Z", "commit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo1ODo0MlrOF1_ipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowNjo0N1rOF1_xKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1OTkxMA==", "bodyText": "what is happening here? :) you already have column index", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392159910", "createdAt": "2020-03-13T10:58:42Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        CharSequence columnName = reader.getMetadata().getColumnName(columnIndex);\n+        int columnIndex = reader.getMetadata().getColumnIndex(columnName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MDczOA==", "bodyText": "you shouldn't need to pass TableReader to record. Record needs SymbolMapReader", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392160738", "createdAt": "2020-03-13T11:00:22Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        CharSequence columnName = reader.getMetadata().getColumnName(columnIndex);\n+        int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = new DistinctSymbolRecord();\n+        private TableReader reader;\n+        private SymbolMapReader symbolMapReader;\n+        private int numberOfSymbols;\n+\n+        DistinctSymbolRecordCursor() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            Misc.free(reader);\n+        }\n+\n+        @Override\n+        public Record getRecord() {\n+            return recordA;\n+        }\n+\n+        @Override\n+        public SymbolTable getSymbolTable(int columnIndex) {\n+            return symbolMapReader;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (recordA.getRecordIndex() + 1 < numberOfSymbols) {\n+                recordA.incrementRecordIndex();\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Record getRecordB() {\n+            return recordB;\n+        }\n+\n+        @Override\n+        public void recordAt(Record record, long atRowId) {\n+            ((DistinctSymbolRecord) record).recordIndex = (int) atRowId;\n+        }\n+\n+        @Override\n+        public void toTop() {\n+            recordA.recordIndex = -1;\n+        }\n+\n+        public void of(TableReader reader, int columnIndex) {\n+            this.symbolMapReader = reader.getSymbolMapReader(columnIndex);\n+            this.numberOfSymbols = symbolMapReader.size();\n+            this.reader = reader;\n+            this.recordA.of(reader, columnIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MTI1MA==", "bodyText": "we can avoid calling for every value of the result set\nreader.getSymbolMapReader(columnIndex)", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392161250", "createdAt": "2020-03-13T11:01:26Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        CharSequence columnName = reader.getMetadata().getColumnName(columnIndex);\n+        int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = new DistinctSymbolRecord();\n+        private TableReader reader;\n+        private SymbolMapReader symbolMapReader;\n+        private int numberOfSymbols;\n+\n+        DistinctSymbolRecordCursor() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            Misc.free(reader);\n+        }\n+\n+        @Override\n+        public Record getRecord() {\n+            return recordA;\n+        }\n+\n+        @Override\n+        public SymbolTable getSymbolTable(int columnIndex) {\n+            return symbolMapReader;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (recordA.getRecordIndex() + 1 < numberOfSymbols) {\n+                recordA.incrementRecordIndex();\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Record getRecordB() {\n+            return recordB;\n+        }\n+\n+        @Override\n+        public void recordAt(Record record, long atRowId) {\n+            ((DistinctSymbolRecord) record).recordIndex = (int) atRowId;\n+        }\n+\n+        @Override\n+        public void toTop() {\n+            recordA.recordIndex = -1;\n+        }\n+\n+        public void of(TableReader reader, int columnIndex) {\n+            this.symbolMapReader = reader.getSymbolMapReader(columnIndex);\n+            this.numberOfSymbols = symbolMapReader.size();\n+            this.reader = reader;\n+            this.recordA.of(reader, columnIndex);\n+            this.recordB.of(reader, columnIndex);\n+        }\n+\n+        @Override\n+        public long size() {\n+            return numberOfSymbols;\n+        }\n+    }\n+\n+    public static class DistinctSymbolRecord implements Record {\n+        private int columnIndex;\n+        private int recordIndex = -1;\n+        private TableReader reader;\n+\n+        @Override\n+        public CharSequence getSym(int col) {\n+            if (reader != null) {\n+                return reader.getSymbolMapReader(columnIndex).valueOf(recordIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MTc2OQ==", "bodyText": "reader null check should not be necessary when Record is setup correctly. If reader is every to become null this should be reported where cursor is requested (don't think null is possible at all in this case)", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392161769", "createdAt": "2020-03-13T11:02:36Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        CharSequence columnName = reader.getMetadata().getColumnName(columnIndex);\n+        int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = new DistinctSymbolRecord();\n+        private TableReader reader;\n+        private SymbolMapReader symbolMapReader;\n+        private int numberOfSymbols;\n+\n+        DistinctSymbolRecordCursor() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            Misc.free(reader);\n+        }\n+\n+        @Override\n+        public Record getRecord() {\n+            return recordA;\n+        }\n+\n+        @Override\n+        public SymbolTable getSymbolTable(int columnIndex) {\n+            return symbolMapReader;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (recordA.getRecordIndex() + 1 < numberOfSymbols) {\n+                recordA.incrementRecordIndex();\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Record getRecordB() {\n+            return recordB;\n+        }\n+\n+        @Override\n+        public void recordAt(Record record, long atRowId) {\n+            ((DistinctSymbolRecord) record).recordIndex = (int) atRowId;\n+        }\n+\n+        @Override\n+        public void toTop() {\n+            recordA.recordIndex = -1;\n+        }\n+\n+        public void of(TableReader reader, int columnIndex) {\n+            this.symbolMapReader = reader.getSymbolMapReader(columnIndex);\n+            this.numberOfSymbols = symbolMapReader.size();\n+            this.reader = reader;\n+            this.recordA.of(reader, columnIndex);\n+            this.recordB.of(reader, columnIndex);\n+        }\n+\n+        @Override\n+        public long size() {\n+            return numberOfSymbols;\n+        }\n+    }\n+\n+    public static class DistinctSymbolRecord implements Record {\n+        private int columnIndex;\n+        private int recordIndex = -1;\n+        private TableReader reader;\n+\n+        @Override\n+        public CharSequence getSym(int col) {\n+            if (reader != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MzA2MA==", "bodyText": "I would suggest making DistinctSymbolRecord non-static class. This way it can access symbol map reader on factory instance and only have its own record index.\nThis said, recordB is better be created lazily. It is only used when someone is ordering symbols returned by this cursor. Which is not very often.", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392163060", "createdAt": "2020-03-13T11:05:37Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        CharSequence columnName = reader.getMetadata().getColumnName(columnIndex);\n+        int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = new DistinctSymbolRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MzYyNQ==", "bodyText": "spelling disticntSymbolMetadata", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392163625", "createdAt": "2020-03-13T11:06:47Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1108,6 +1108,37 @@ private RecordCursorFactory generateSelectChoose(QueryModel model, SqlExecutionC\n     }\n \n     private RecordCursorFactory generateSelectDistinct(QueryModel model, SqlExecutionContext executionContext) throws SqlException {\n+\n+        if (model.getColumns().size() == 1 && model.getNestedModel() != null && model.getNestedModel().getNestedModel() != null && model.getNestedModel().getNestedModel().getTableName() != null) {\n+            ExpressionNode tableNameExpressionNode = model.getNestedModel().getNestedModel().getTableName();\n+            CharSequence tableName = tableNameExpressionNode.token;\n+            TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName);\n+            CharSequence columnName = model.getColumnNames().get(0);\n+            RecordMetadata readerMetadata = reader.getMetadata();\n+            int columnIndex = readerMetadata.getColumnIndex(columnName);\n+            int columnType = readerMetadata.getColumnType(columnIndex);\n+            if (columnType == ColumnType.SYMBOL) {\n+                final GenericRecordMetadata disticntSymbolMetadata = new GenericRecordMetadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MjE3MTE3", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374217117", "createdAt": "2020-03-13T11:08:35Z", "commit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowODozNlrOF1_0QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowODozNlrOF1_0QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDQxNw==", "bodyText": "it would be better to assign reader, e.g.\nreader = Misc.free(reader);\n\nto defend against double close", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392164417", "createdAt": "2020-03-13T11:08:36Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        CharSequence columnName = reader.getMetadata().getColumnName(columnIndex);\n+        int columnIndex = reader.getMetadata().getColumnIndex(columnName);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = new DistinctSymbolRecord();\n+        private TableReader reader;\n+        private SymbolMapReader symbolMapReader;\n+        private int numberOfSymbols;\n+\n+        DistinctSymbolRecordCursor() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            Misc.free(reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MjE3MzI5", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374217329", "createdAt": "2020-03-13T11:08:57Z", "commit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowODo1OFrOF1_03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowODo1OFrOF1_03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDU3NQ==", "bodyText": "factory must close its cursor (which is closeable)", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392164575", "createdAt": "2020-03-13T11:08:58Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680668e8bc766f33c598560357aa7c4472850726"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e49045ac24f8eba61df250dd08575760f902b47", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/9e49045ac24f8eba61df250dd08575760f902b47", "committedDate": "2020-03-13T11:52:36Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e56228b6d6588f465d15543b531fa3d4a1c8af", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/48e56228b6d6588f465d15543b531fa3d4a1c8af", "committedDate": "2020-03-13T11:52:57Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac90c9504613bbbf16bdd53d39d6e195f5f03d03", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/ac90c9504613bbbf16bdd53d39d6e195f5f03d03", "committedDate": "2020-03-13T11:54:34Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9394bf63a30ee3c87d0b4edb5e72c62295058129", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/9394bf63a30ee3c87d0b4edb5e72c62295058129", "committedDate": "2020-03-13T13:47:20Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzU0Mjg1", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374354285", "createdAt": "2020-03-13T14:41:01Z", "commit": {"oid": "9394bf63a30ee3c87d0b4edb5e72c62295058129"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0MTowMVrOF2GO_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0MTowMVrOF2GO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2OTU2Ng==", "bodyText": "minor: toTop() and record.reset() implement the same logic, perhaps topTop() can call recordA.reset(). Or may be record.reset() could be renamed to record.toTop()", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392269566", "createdAt": "2020-03-13T14:41:01Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final CharSequence tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final CharSequence tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+        cursor.close();\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = null;\n+        private TableReader reader;\n+        private int columnIndex;\n+        private int numberOfSymbols;\n+        private SymbolMapReader symbolMapReader;\n+\n+        @Override\n+        public void close() {\n+            reader = Misc.free(reader);\n+        }\n+\n+        @Override\n+        public Record getRecord() {\n+            return recordA;\n+        }\n+\n+        @Override\n+        public SymbolTable getSymbolTable(int columnIndex) {\n+            return symbolMapReader;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (recordA.getRecordIndex() + 1 < numberOfSymbols) {\n+                recordA.incrementRecordIndex();\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Record getRecordB() {\n+            if (recordB == null) {\n+                recordB = new DistinctSymbolRecord();\n+            }\n+            recordB.reset();\n+            return recordB;\n+        }\n+\n+        @Override\n+        public void recordAt(Record record, long atRowId) {\n+            ((DistinctSymbolRecord) record).recordIndex = (int) atRowId;\n+        }\n+\n+        @Override\n+        public void toTop() {\n+            recordA.recordIndex = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9394bf63a30ee3c87d0b4edb5e72c62295058129"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36321bb44678dd406945c10956e9235e4065580f", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/36321bb44678dd406945c10956e9235e4065580f", "committedDate": "2020-03-13T16:13:33Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDM5Mzcy", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374439372", "createdAt": "2020-03-13T16:25:49Z", "commit": {"oid": "36321bb44678dd406945c10956e9235e4065580f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNTo0OVrOF2KNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNTo0OVrOF2KNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNDY0NQ==", "bodyText": "Can we pull this value up StaticSymbolTable interface level? The idea of static symbol table is that it is bounded, e.g. knows of its size and presumably that it knows that it has null?", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392334645", "createdAt": "2020-03-13T16:25:49Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/SymbolMapReader.java", "diffHunk": "@@ -35,4 +35,6 @@\n     boolean isDeleted();\n \n     void updateSymbolCount(int count);\n+\n+    boolean containsNullValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36321bb44678dd406945c10956e9235e4065580f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDQwNTAy", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374440502", "createdAt": "2020-03-13T16:27:22Z", "commit": {"oid": "36321bb44678dd406945c10956e9235e4065580f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNzoyMlrOF2KQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNzoyMlrOF2KQ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTYwNg==", "bodyText": "this write should be cached i feel like, e.g. read of class member is faster than write to memory mapped file", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392335606", "createdAt": "2020-03-13T16:27:22Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/cairo/SymbolMapWriter.java", "diffHunk": "@@ -155,6 +158,7 @@ public int getSymbolCount() {\n     public int put(CharSequence symbol) {\n \n         if (symbol == null) {\n+            offsetMem.putBool(HEADER_NULL_FLAG, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36321bb44678dd406945c10956e9235e4065580f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDQxNDEx", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-374441411", "createdAt": "2020-03-13T16:28:39Z", "commit": {"oid": "36321bb44678dd406945c10956e9235e4065580f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyODo0MFrOF2KToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyODo0MFrOF2KToQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNjI4OQ==", "bodyText": "I don't follow this condition. Why are we comparing int value of symbol to size of symbol map?", "url": "https://github.com/questdb/questdb/pull/111#discussion_r392336289", "createdAt": "2020-03-13T16:28:40Z", "author": {"login": "bluestreak01"}, "path": "core/src/test/java/io/questdb/griffin/AbstractGriffinTest.java", "diffHunk": "@@ -290,7 +287,11 @@ private static void testSymbolAPI(RecordMetadata metadata, RecordCursor cursor)\n                     if (symbolTable instanceof StaticSymbolTable) {\n                         CharSequence sym = record.getSym(column);\n                         int value = record.getInt(column);\n-                        Assert.assertEquals(value, ((StaticSymbolTable) symbolTable).keyOf(sym));\n+                        if (symbolTable instanceof SymbolMapReader && ((SymbolMapReader) symbolTable).containsNullValue() && value == ((StaticSymbolTable) symbolTable).size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36321bb44678dd406945c10956e9235e4065580f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "016fb9fb731fcc3fac8cfccef089cf67372c3d4c", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/016fb9fb731fcc3fac8cfccef089cf67372c3d4c", "committedDate": "2020-03-14T14:02:41Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73111cfe29645c5a9836bb6528bd9e88c4b0ec16", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/73111cfe29645c5a9836bb6528bd9e88c4b0ec16", "committedDate": "2020-03-16T10:01:37Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a69a57522b890215dba99a1242d0c1bbe17e70a", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/7a69a57522b890215dba99a1242d0c1bbe17e70a", "committedDate": "2020-03-17T10:28:07Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTE4MTY5", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-375918169", "createdAt": "2020-03-17T10:42:35Z", "commit": {"oid": "7a69a57522b890215dba99a1242d0c1bbe17e70a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo0MjozNVrOF3Wpwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo0MjozNVrOF3Wpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NzEzOA==", "bodyText": "missed a spot", "url": "https://github.com/questdb/questdb/pull/111#discussion_r393587138", "createdAt": "2020-03-17T10:42:35Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/groupby/DistinctSymbolRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/* ******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.groupby;\n+\n+import io.questdb.cairo.CairoEngine;\n+import io.questdb.cairo.GenericRecordMetadata;\n+import io.questdb.cairo.SymbolMapReader;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.Misc;\n+\n+public class DistinctSymbolRecordCursorFactory implements RecordCursorFactory {\n+    private final DistinctSymbolRecordCursor cursor;\n+    private final CairoEngine engine;\n+    private final GenericRecordMetadata metadata;\n+    private final String tableName;\n+    private final int columnIndex;\n+    private final long tableVersion;\n+\n+    public DistinctSymbolRecordCursorFactory(\n+            final CairoEngine engine,\n+            final GenericRecordMetadata metadata,\n+            final String tableName,\n+            final int columnIndex,\n+            final long tableVersion) {\n+        this.engine = engine;\n+        this.metadata = metadata;\n+        this.tableName = tableName;\n+        this.columnIndex = columnIndex;\n+        this.tableVersion = tableVersion;\n+        this.cursor = new DistinctSymbolRecordCursor();\n+    }\n+\n+    @Override\n+    public void close() {\n+        cursor.close();\n+    }\n+\n+    @Override\n+    public RecordCursor getCursor(SqlExecutionContext executionContext) {\n+        TableReader reader = engine.getReader(executionContext.getCairoSecurityContext(), tableName, tableVersion);\n+        cursor.of(reader, columnIndex);\n+        return cursor;\n+    }\n+\n+    @Override\n+    public RecordMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public boolean isRandomAccessCursor() {\n+        return true;\n+    }\n+\n+    private static class DistinctSymbolRecordCursor implements RecordCursor {\n+        private DistinctSymbolRecord recordA = new DistinctSymbolRecord();\n+        private DistinctSymbolRecord recordB = null;\n+        private TableReader reader;\n+        private int columnIndex;\n+        private int numberOfSymbols;\n+        private SymbolMapReader symbolMapReader;\n+\n+        @Override\n+        public void close() {\n+            reader = Misc.free(reader);\n+        }\n+\n+        @Override\n+        public Record getRecord() {\n+            return recordA;\n+        }\n+\n+        @Override\n+        public SymbolTable getSymbolTable(int columnIndex) {\n+            return symbolMapReader;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (recordA.getAndIncrementRecordIndex() < numberOfSymbols) {\n+                return true;\n+            }\n+            recordA.decrementRecordIndex();\n+            return false;\n+        }\n+\n+        @Override\n+        public Record getRecordB() {\n+            if (recordB == null) {\n+                recordB = new DistinctSymbolRecord();\n+            }\n+            recordB.reset();\n+            return recordB;\n+        }\n+\n+        @Override\n+        public void recordAt(Record record, long atRowId) {\n+            ((DistinctSymbolRecord) record).recordIndex = (int) atRowId;\n+        }\n+\n+        @Override\n+        public void toTop() {\n+            recordA.reset();\n+        }\n+\n+        public void of(TableReader reader, int columnIndex) {\n+            this.reader = reader;\n+            this.columnIndex = columnIndex;\n+            this.symbolMapReader = reader.getSymbolMapReader(columnIndex);\n+            this.numberOfSymbols = symbolMapReader.size() + (symbolMapReader.containsNullValue() ? 1 : 0);\n+            this.recordA.reset();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return numberOfSymbols;\n+        }\n+\n+        public class DistinctSymbolRecord implements Record {\n+            private int recordIndex = -1;\n+\n+            public void decrementRecordIndex() {\n+                recordIndex--;\n+            }\n+\n+            @Override\n+            public CharSequence getSym(int col) {\n+                return reader.getSymbolMapReader(columnIndex).valueOf(recordIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a69a57522b890215dba99a1242d0c1bbe17e70a"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b95878137c57cff9981fe1bef911e9fe0a7723", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/c3b95878137c57cff9981fe1bef911e9fe0a7723", "committedDate": "2020-03-19T12:53:55Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1f3a0876c6e03005366857ffea69b53cb620805", "author": {"user": {"login": "jaugsburger", "name": "Joan Augsburger"}}, "url": "https://github.com/questdb/questdb/commit/a1f3a0876c6e03005366857ffea69b53cb620805", "committedDate": "2020-03-20T10:14:06Z", "message": "feat(griffin): distinct queries on symbol column retrieve the list from metadata instead of iterating through the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MzY1Njk4", "url": "https://github.com/questdb/questdb/pull/111#pullrequestreview-378365698", "createdAt": "2020-03-20T10:22:03Z", "commit": {"oid": "a1f3a0876c6e03005366857ffea69b53cb620805"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3345, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}