{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTgzMTY0", "number": 426, "title": "feature(griffin): alter system lock/unlock writer", "bodyText": "", "createdAt": "2020-06-22T14:31:15Z", "url": "https://github.com/questdb/questdb/pull/426", "merged": true, "mergeCommit": {"oid": "6cef370fd85c10cc2f5f0a7d0fcdff7005a59942"}, "closed": true, "closedAt": "2020-06-23T13:24:34Z", "author": {"login": "jaugsburger"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctxndDgH2gAyNDM3OTgzMTY0OmY3NTRhMmM1NTI4MTI2YzRhYjgyMDE4NGFlOGQ3MzU3NDZhYTA3ZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuFZx-gFqTQzNTc3NzE2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f754a2c5528126c4ab820184ae8d735746aa07ee", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/f754a2c5528126c4ab820184ae8d735746aa07ee", "committedDate": "2020-06-22T14:21:07Z", "message": "feature(griffin): alter system lock/unlock writer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTUyMzg5", "url": "https://github.com/questdb/questdb/pull/426#pullrequestreview-435152389", "createdAt": "2020-06-22T17:56:28Z", "commit": {"oid": "f754a2c5528126c4ab820184ae8d735746aa07ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1NjoyOFrOGnLPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1OTo1M1rOGnLW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMTgxNQ==", "bodyText": "I don't think we need immutable char sequence to lock/unlock pool item,", "url": "https://github.com/questdb/questdb/pull/426#discussion_r443731815", "createdAt": "2020-06-22T17:56:28Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -676,68 +676,97 @@ private static CharSequence expectToken(GenericLexer lexer, CharSequence expecte\n \n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n-        expectKeyword(lexer, \"table\");\n+        tok = expectToken(lexer, \"'table' or 'system'\");\n \n-        final int tableNamePosition = lexer.getPosition();\n+        if (SqlKeywords.isTableKeyword(tok)) {\n+            final int tableNamePosition = lexer.getPosition();\n \n-        tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+            tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n \n-        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+            tableExistsOrFail(tableNamePosition, tok, executionContext);\n \n-        CharSequence tableName = GenericLexer.immutableOf(tok);\n-        try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n-\n-            tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n-\n-            if (SqlKeywords.isAddKeyword(tok)) {\n-                alterTableAddColumn(tableNamePosition, writer);\n-            } else if (SqlKeywords.isDropKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column' or 'partition'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableDropColumn(tableNamePosition, writer);\n-                } else if (SqlKeywords.isPartitionKeyword(tok)) {\n-                    alterTableDropPartition(writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n-                }\n-            } else if (SqlKeywords.isRenameKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableRenameColumn(tableNamePosition, writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n-                }\n-            } else if (SqlKeywords.isAlterKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    final int columnNameNamePosition = lexer.getPosition();\n-                    tok = expectToken(lexer, \"column name\");\n-                    final CharSequence columnName = GenericLexer.immutableOf(tok);\n-                    tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n-                    if (SqlKeywords.isAddKeyword(tok)) {\n-                        expectKeyword(lexer, \"index\");\n-                        alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n+            CharSequence tableName = GenericLexer.immutableOf(tok);\n+            try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n+\n+                tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n+\n+                if (SqlKeywords.isAddKeyword(tok)) {\n+                    alterTableAddColumn(tableNamePosition, writer);\n+                } else if (SqlKeywords.isDropKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column' or 'partition'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableDropColumn(tableNamePosition, writer);\n+                    } else if (SqlKeywords.isPartitionKeyword(tok)) {\n+                        alterTableDropPartition(writer);\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    }\n+                } else if (SqlKeywords.isRenameKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableRenameColumn(tableNamePosition, writer);\n                     } else {\n-                        if (SqlKeywords.isCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n-                        } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n+                    }\n+                } else if (SqlKeywords.isAlterKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        final int columnNameNamePosition = lexer.getPosition();\n+                        tok = expectToken(lexer, \"column name\");\n+                        final CharSequence columnName = GenericLexer.immutableOf(tok);\n+                        tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n+                        if (SqlKeywords.isAddKeyword(tok)) {\n+                            expectKeyword(lexer, \"index\");\n+                            alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n                         } else {\n-                            throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            if (SqlKeywords.isCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n+                            } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                            } else {\n+                                throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            }\n                         }\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n                     }\n+\n                 } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"'add' or 'drop' or 'rename' expected\");\n                 }\n+            } catch (CairoException e) {\n+                LOG.info().$(\"failed to alter table: \").$((Sinkable) e).$();\n+                throw SqlException.$(tableNamePosition, \"table '\").put(tableName).put(\"' cannot be altered: \").put(e);\n+            }\n+        } else if (SqlKeywords.isSystemKeyword(tok)) {\n+            tok = expectToken(lexer, \"'lock' or 'unlock'\");\n \n+            if (SqlKeywords.isLockKeyword(tok)) {\n+                tok = expectToken(lexer, \"'writer'\");\n+\n+                if (SqlKeywords.isWriterKeyword(tok)) {\n+                    final int tableNamePosition = lexer.getPosition();\n+                    tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+                    tableExistsOrFail(tableNamePosition, tok, executionContext);\n+                    CharSequence tableName = GenericLexer.immutableOf(tok);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f754a2c5528126c4ab820184ae8d735746aa07ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMjgxNQ==", "bodyText": "the lock operation returns success flag, this needs to be re-interpreted into SqlException", "url": "https://github.com/questdb/questdb/pull/426#discussion_r443732815", "createdAt": "2020-06-22T17:58:11Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -676,68 +676,97 @@ private static CharSequence expectToken(GenericLexer lexer, CharSequence expecte\n \n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n-        expectKeyword(lexer, \"table\");\n+        tok = expectToken(lexer, \"'table' or 'system'\");\n \n-        final int tableNamePosition = lexer.getPosition();\n+        if (SqlKeywords.isTableKeyword(tok)) {\n+            final int tableNamePosition = lexer.getPosition();\n \n-        tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+            tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n \n-        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+            tableExistsOrFail(tableNamePosition, tok, executionContext);\n \n-        CharSequence tableName = GenericLexer.immutableOf(tok);\n-        try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n-\n-            tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n-\n-            if (SqlKeywords.isAddKeyword(tok)) {\n-                alterTableAddColumn(tableNamePosition, writer);\n-            } else if (SqlKeywords.isDropKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column' or 'partition'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableDropColumn(tableNamePosition, writer);\n-                } else if (SqlKeywords.isPartitionKeyword(tok)) {\n-                    alterTableDropPartition(writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n-                }\n-            } else if (SqlKeywords.isRenameKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableRenameColumn(tableNamePosition, writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n-                }\n-            } else if (SqlKeywords.isAlterKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    final int columnNameNamePosition = lexer.getPosition();\n-                    tok = expectToken(lexer, \"column name\");\n-                    final CharSequence columnName = GenericLexer.immutableOf(tok);\n-                    tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n-                    if (SqlKeywords.isAddKeyword(tok)) {\n-                        expectKeyword(lexer, \"index\");\n-                        alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n+            CharSequence tableName = GenericLexer.immutableOf(tok);\n+            try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n+\n+                tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n+\n+                if (SqlKeywords.isAddKeyword(tok)) {\n+                    alterTableAddColumn(tableNamePosition, writer);\n+                } else if (SqlKeywords.isDropKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column' or 'partition'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableDropColumn(tableNamePosition, writer);\n+                    } else if (SqlKeywords.isPartitionKeyword(tok)) {\n+                        alterTableDropPartition(writer);\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    }\n+                } else if (SqlKeywords.isRenameKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableRenameColumn(tableNamePosition, writer);\n                     } else {\n-                        if (SqlKeywords.isCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n-                        } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n+                    }\n+                } else if (SqlKeywords.isAlterKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        final int columnNameNamePosition = lexer.getPosition();\n+                        tok = expectToken(lexer, \"column name\");\n+                        final CharSequence columnName = GenericLexer.immutableOf(tok);\n+                        tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n+                        if (SqlKeywords.isAddKeyword(tok)) {\n+                            expectKeyword(lexer, \"index\");\n+                            alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n                         } else {\n-                            throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            if (SqlKeywords.isCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n+                            } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                            } else {\n+                                throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            }\n                         }\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n                     }\n+\n                 } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"'add' or 'drop' or 'rename' expected\");\n                 }\n+            } catch (CairoException e) {\n+                LOG.info().$(\"failed to alter table: \").$((Sinkable) e).$();\n+                throw SqlException.$(tableNamePosition, \"table '\").put(tableName).put(\"' cannot be altered: \").put(e);\n+            }\n+        } else if (SqlKeywords.isSystemKeyword(tok)) {\n+            tok = expectToken(lexer, \"'lock' or 'unlock'\");\n \n+            if (SqlKeywords.isLockKeyword(tok)) {\n+                tok = expectToken(lexer, \"'writer'\");\n+\n+                if (SqlKeywords.isWriterKeyword(tok)) {\n+                    final int tableNamePosition = lexer.getPosition();\n+                    tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+                    tableExistsOrFail(tableNamePosition, tok, executionContext);\n+                    CharSequence tableName = GenericLexer.immutableOf(tok);\n+                    engine.lockWriter(tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f754a2c5528126c4ab820184ae8d735746aa07ee"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMzczNQ==", "bodyText": "although lock should not throw CairoException right now, it is still best to handle it the same way other 'alter' operations handle this.", "url": "https://github.com/questdb/questdb/pull/426#discussion_r443733735", "createdAt": "2020-06-22T17:59:53Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -676,68 +676,97 @@ private static CharSequence expectToken(GenericLexer lexer, CharSequence expecte\n \n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n-        expectKeyword(lexer, \"table\");\n+        tok = expectToken(lexer, \"'table' or 'system'\");\n \n-        final int tableNamePosition = lexer.getPosition();\n+        if (SqlKeywords.isTableKeyword(tok)) {\n+            final int tableNamePosition = lexer.getPosition();\n \n-        tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+            tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n \n-        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+            tableExistsOrFail(tableNamePosition, tok, executionContext);\n \n-        CharSequence tableName = GenericLexer.immutableOf(tok);\n-        try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n-\n-            tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n-\n-            if (SqlKeywords.isAddKeyword(tok)) {\n-                alterTableAddColumn(tableNamePosition, writer);\n-            } else if (SqlKeywords.isDropKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column' or 'partition'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableDropColumn(tableNamePosition, writer);\n-                } else if (SqlKeywords.isPartitionKeyword(tok)) {\n-                    alterTableDropPartition(writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n-                }\n-            } else if (SqlKeywords.isRenameKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableRenameColumn(tableNamePosition, writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n-                }\n-            } else if (SqlKeywords.isAlterKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    final int columnNameNamePosition = lexer.getPosition();\n-                    tok = expectToken(lexer, \"column name\");\n-                    final CharSequence columnName = GenericLexer.immutableOf(tok);\n-                    tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n-                    if (SqlKeywords.isAddKeyword(tok)) {\n-                        expectKeyword(lexer, \"index\");\n-                        alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n+            CharSequence tableName = GenericLexer.immutableOf(tok);\n+            try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n+\n+                tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n+\n+                if (SqlKeywords.isAddKeyword(tok)) {\n+                    alterTableAddColumn(tableNamePosition, writer);\n+                } else if (SqlKeywords.isDropKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column' or 'partition'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableDropColumn(tableNamePosition, writer);\n+                    } else if (SqlKeywords.isPartitionKeyword(tok)) {\n+                        alterTableDropPartition(writer);\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    }\n+                } else if (SqlKeywords.isRenameKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableRenameColumn(tableNamePosition, writer);\n                     } else {\n-                        if (SqlKeywords.isCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n-                        } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n+                    }\n+                } else if (SqlKeywords.isAlterKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        final int columnNameNamePosition = lexer.getPosition();\n+                        tok = expectToken(lexer, \"column name\");\n+                        final CharSequence columnName = GenericLexer.immutableOf(tok);\n+                        tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n+                        if (SqlKeywords.isAddKeyword(tok)) {\n+                            expectKeyword(lexer, \"index\");\n+                            alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n                         } else {\n-                            throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            if (SqlKeywords.isCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n+                            } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                            } else {\n+                                throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            }\n                         }\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n                     }\n+\n                 } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"'add' or 'drop' or 'rename' expected\");\n                 }\n+            } catch (CairoException e) {\n+                LOG.info().$(\"failed to alter table: \").$((Sinkable) e).$();\n+                throw SqlException.$(tableNamePosition, \"table '\").put(tableName).put(\"' cannot be altered: \").put(e);\n+            }\n+        } else if (SqlKeywords.isSystemKeyword(tok)) {\n+            tok = expectToken(lexer, \"'lock' or 'unlock'\");\n \n+            if (SqlKeywords.isLockKeyword(tok)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f754a2c5528126c4ab820184ae8d735746aa07ee"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f371e6349253cb8e33f601d70462b94376304c", "author": {"user": null}, "url": "https://github.com/questdb/questdb/commit/22f371e6349253cb8e33f601d70462b94376304c", "committedDate": "2020-06-23T10:46:19Z", "message": "feature(griffin): alter system lock/unlock writer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Nzc3MTY1", "url": "https://github.com/questdb/questdb/pull/426#pullrequestreview-435777165", "createdAt": "2020-06-23T13:24:17Z", "commit": {"oid": "22f371e6349253cb8e33f601d70462b94376304c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3247, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}