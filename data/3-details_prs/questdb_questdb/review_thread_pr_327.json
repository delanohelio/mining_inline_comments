{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjU2MTky", "number": 327, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo1NzoxNlrOD_tlvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo1NzoxNlrOD_tlvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTMzODIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/questdb/griffin/engine/orderby/RecordTreeChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo1NzoxNlrOGaiR0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo1NzoxNlrOGaiR0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3Nzc3Ng==", "bodyText": "i'm a little dubious how does this work?", "url": "https://github.com/questdb/questdb/pull/327#discussion_r430477776", "createdAt": "2020-05-26T14:57:16Z", "author": {"login": "bluestreak01"}, "path": "core/src/main/java/io/questdb/griffin/engine/orderby/RecordTreeChain.java", "diffHunk": "@@ -160,43 +164,48 @@ public TreeCursor getCursor(RecordCursor base) {\n     }\n \n     public void put(Record record) {\n-        if (root == -1) {\n-            putParent(record);\n-            return;\n-        }\n+        if (size < maxSize) {\n+            size++;\n+            if (root == -1) {\n+                putParent(record);\n+                return;\n+            }\n+\n+            comparator.setLeft(record);\n+\n+            long p = root;\n+            long parent;\n+            int cmp;\n+            do {\n+                parent = p;\n+                long r = refOf(p);\n+                recordChain.recordAt(recordChainRecord, r);\n+                cmp = comparator.compare(recordChainRecord);\n+                if (cmp < 0) {\n+                    p = leftOf(p);\n+                } else if (cmp > 0) {\n+                    p = rightOf(p);\n+                } else {\n+                    setRef(p, recordChain.put(record, r));\n+                    return;\n+                }\n+            } while (p > -1);\n \n-        comparator.setLeft(record);\n+            p = allocateBlock();\n+            setParent(p, parent);\n+            long r = recordChain.put(record, -1L);\n+            setTop(p, r);\n+            setRef(p, r);\n \n-        long p = root;\n-        long parent;\n-        int cmp;\n-        do {\n-            parent = p;\n-            long r = refOf(p);\n-            recordChain.recordAt(recordChainRecord, r);\n-            cmp = comparator.compare(recordChainRecord);\n             if (cmp < 0) {\n-                p = leftOf(p);\n-            } else if (cmp > 0) {\n-                p = rightOf(p);\n+                setLeft(parent, p);\n             } else {\n-                setRef(p, recordChain.put(record, r));\n-                return;\n+                setRight(parent, p);\n             }\n-        } while (p > -1);\n-\n-        p = allocateBlock();\n-        setParent(p, parent);\n-        long r = recordChain.put(record, -1L);\n-        setTop(p, r);\n-        setRef(p, r);\n-\n-        if (cmp < 0) {\n-            setLeft(parent, p);\n+            fix(p);\n         } else {\n-            setRight(parent, p);\n+            throw LimitOverflowException.instance(maxSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426e2d7bd347d0b0cfb880fc7eac30e3a620aa3e"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2202, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}