{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTk3NzU2", "number": 469, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo0NTowMVrODvAXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMzozNFrODyKqQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjE1NzA1OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/resources/spring.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo0NTowMVrOGBLc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1Nzo1MFrOGBL5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTM5NA==", "bodyText": "https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongodb-connectors\nDoes it make sense to reuse spring provided functionality?", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r403889394", "createdAt": "2020-04-06T07:45:01Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/resources/spring.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"mongoDbSteps\" class=\"org.vividus.bdd.steps.mongodb.MongoDbSteps\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c66c0f2b67717bd573ad6b4b75af37245700171c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5NjY0MA==", "bodyText": "spring mongodb support is built on mongo native driver, I don't see any advantage of using wrappers and pulling additional dependencies in bounds of our needs", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r403896640", "createdAt": "2020-04-06T07:57:50Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/resources/spring.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"mongoDbSteps\" class=\"org.vividus.bdd.steps.mongodb.MongoDbSteps\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTM5NA=="}, "originalCommit": {"oid": "c66c0f2b67717bd573ad6b4b75af37245700171c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjE5MjcwOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0MjozMFrOGE_AzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0MjozMFrOGE_AzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3OTg4NA==", "bodyText": "why not to apply parameter converter?\nString command > Bson command", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407879884", "createdAt": "2020-04-14T05:42:30Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(String command, String dbName, String instanceKey, Set<VariableScope> scopes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb9bd2bdc626a84e977c45d145aeebb9d799810"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjE5ODI1OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0NToyMlrOGE_EFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0NToyMlrOGE_EFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4MDcyNQ==", "bodyText": "checkMid > checkIntermediate", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407880725", "createdAt": "2020-04-14T05:45:22Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(String command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName, db ->\n+        {\n+            Bson executable = Document.parse(command);\n+            db.runCommand(executable).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName)));\n+        });\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();\n+\n+        boolean checkStart = empty || !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\n+        appendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n+                + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n+\n+        boolean checkEnd = empty\n+                || !commands.get(commands.size() - 1).getCommand().getCommandType().equals(CommandType.TERMINAL);\n+        appendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n+                + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n+\n+        boolean checkMid = !empty && commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb9bd2bdc626a84e977c45d145aeebb9d799810"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjIwMDQyOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0NjozMFrOGE_FcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0NjozMFrOGE_FcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4MTA3Mw==", "bodyText": "onces  > ones", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407881073", "createdAt": "2020-04-14T05:46:30Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(String command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName, db ->\n+        {\n+            Bson executable = Document.parse(command);\n+            db.runCommand(executable).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName)));\n+        });\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();\n+\n+        boolean checkStart = empty || !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\n+        appendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n+                + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n+\n+        boolean checkEnd = empty\n+                || !commands.get(commands.size() - 1).getCommand().getCommandType().equals(CommandType.TERMINAL);\n+        appendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n+                + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n+\n+        boolean checkMid = !empty && commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()\n+                .map(MongoCommandEntry::getCommand)\n+                .map(MongoCommand::getCommandType)\n+                .allMatch(CommandType.INTERMEDIATE::equals);\n+        appendIf(checkMid, () -> \"Only the following commands are allowed between the first and the last onces: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb9bd2bdc626a84e977c45d145aeebb9d799810"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjIyMTMyOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/resources/spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo1Njo0NFrOGE_RxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo1Njo0NFrOGE_RxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NDIyOQ==", "bodyText": "Use @Named instead of explicit declaration to keep consistency with other modules", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407884229", "createdAt": "2020-04-14T05:56:44Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mongodb/src/main/resources/spring.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"mongoDbSteps\" class=\"org.vividus.bdd.steps.mongodb.MongoDbSteps\">\n+        <constructor-arg index=\"0\">\n+            <bean factory-bean=\"propertyParser\" factory-method=\"getPropertyValuesByPrefix\">\n+                <constructor-arg value=\"mongodb.connection.\" />\n+            </bean>\n+        </constructor-arg>\n+        <constructor-arg index=\"1\" ref=\"jsonUtils-LowerCamelCase\" />\n+    </bean>\n+\n+    <bean class=\"org.vividus.bdd.converter.StringToBsonConverter\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb9bd2bdc626a84e977c45d145aeebb9d799810"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjIyMzM5OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo1NzozN1rOGE_S8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo1NzozN1rOGE_S8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NDUzMA==", "bodyText": "use alphabetical order", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407884530", "createdAt": "2020-04-14T05:57:37Z", "author": {"login": "valfirst"}, "path": "settings.gradle", "diffHunk": "@@ -18,6 +18,7 @@ include 'vividus-plugin-db'\n include 'vividus-plugin-excel'\n include 'vividus-plugin-html'\n include 'vividus-plugin-parquet'\n+include 'vividus-plugin-mongodb'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb9bd2bdc626a84e977c45d145aeebb9d799810"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzAxNjE0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzozMToyNVrOGFtOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowMDoxOFrOGGDEkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg==", "bodyText": "why don't you fast return or fast fail in case of empty commands?", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408637132", "createdAt": "2020-04-15T07:31:25Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNTQ2Mg==", "bodyText": "I would like to give to the end used as comprehensive info as possible without errors like \"command sequence can not be empty\"", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408935462", "createdAt": "2020-04-15T15:31:48Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NzI0OA==", "bodyText": "Yep, you will give them it's empty", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408957248", "createdAt": "2020-04-15T16:01:53Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTgyMw==", "bodyText": "it's not informative enough, instead they will get info on how to start and end sequence", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408961823", "createdAt": "2020-04-15T16:08:46Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTg0OQ==", "bodyText": "\"Yep, you will give them it's empty\" - I disagree that this is more informative than\n\nCommand sequence must start with one of the source commands: [FIND]\nCommand sequence must end with one of the terminal commands: [COLLECT, COUNT]", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408971849", "createdAt": "2020-04-15T16:23:51Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDk2MQ==", "bodyText": "fixed", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408994961", "createdAt": "2020-04-15T17:00:18Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA2ODE3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo0NTo1OVrOGFtuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo0NTo1OVrOGFtuLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NTE2NQ==", "bodyText": "cache the search?\nhttps://github.com/vividus-framework/vividus/blob/master/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/ActionAttributeType.java#L113-L114", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408645165", "createdAt": "2020-04-15T07:45:59Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommand.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import static java.util.stream.StreamSupport.stream;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.FindIterable;\n+import com.mongodb.client.MongoCollection;\n+\n+import org.bson.conversions.Bson;\n+\n+public enum MongoCommand\n+{\n+    FIND(CommandType.SOURCE)\n+    {\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(out -> cast(out, MongoCollection.class).find(argument));\n+        }\n+    },\n+    PROJECTION(CommandType.INTERMEDIATE)\n+    {\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(out -> cast(out, FindIterable.class).projection(argument));\n+        }\n+    },\n+    COLLECT(CommandType.TERMINAL)\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(\n+                out -> stream(cast(out, FindIterable.class).spliterator(), false).collect(Collectors.toList()));\n+        }\n+    },\n+    COUNT(CommandType.TERMINAL)\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(out -> stream(cast(out, FindIterable.class).spliterator(), false).count());\n+        }\n+    };\n+\n+    private final CommandType commandType;\n+\n+    MongoCommand(CommandType commandType)\n+    {\n+        this.commandType = commandType;\n+    }\n+\n+    public CommandType getCommandType()\n+    {\n+        return commandType;\n+    }\n+\n+    public static Collection<MongoCommand> findByCommandType(CommandType commandType)\n+    {\n+        return Arrays.stream(MongoCommand.values())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM5NjA3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNDo1MlrOGFw67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo0NlrOGGA2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA==", "bodyText": "are setters necessary ?", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408697580", "createdAt": "2020-04-15T09:14:52Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class MongoCommandEntry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODc5MQ==", "bodyText": "My point is without setters it could be converted into Record https://openjdk.java.net/jeps/359", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408698791", "createdAt": "2020-04-15T09:16:58Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class MongoCommandEntry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMTk3Nw==", "bodyText": "for anyone who doesn't know how behave populate data, class with private methods and without any setter will look weirds, I also think that sonar will consider this as warning", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408931977", "createdAt": "2020-04-15T15:27:24Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class MongoCommandEntry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNDQwOA==", "bodyText": "\"Records cannot extend any other class, and cannot declare instance fields other than the private final fields which correspond to components\" - we will need first to adjust jbahave strategy on how to populate annotated with @AsParameters object fields", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408934408", "createdAt": "2020-04-15T15:30:22Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class MongoCommandEntry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODU5NA==", "bodyText": "Yep, but the setters never used, only in the tests.", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408958594", "createdAt": "2020-04-15T16:03:46Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class MongoCommandEntry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc0Nzc1OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowMzoxMVrOGF-GOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowODowM1rOGGBBPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ==", "bodyText": "you could use csvsource here and it will be 1 Document.parse instead of 3", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408913465", "createdAt": "2020-04-15T15:03:11Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.util.stream.Stream;\n+\n+import org.bson.Document;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class StringToBsonConverterTests\n+{\n+    private static final String EMPTY_JSON = \"{}\";\n+\n+    private final StringToBsonConverter converter = new StringToBsonConverter();\n+\n+    static Stream<Arguments> documents()\n+    {\n+        return Stream.of(\n+                Arguments.of(Document.parse(EMPTY_JSON), null),\n+                Arguments.of(Document.parse(EMPTY_JSON), \"\"),\n+                Arguments.of(Document.parse(\"{ \\\"id\\\" : 1 }\"), \"{\\\"id\\\":1}\")\n+            );\n+    }\n+\n+    @MethodSource(\"documents\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MzE2MQ==", "bodyText": "under the hood it will be still 3 Document.parse", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408953161", "createdAt": "2020-04-15T15:55:59Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.util.stream.Stream;\n+\n+import org.bson.Document;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class StringToBsonConverterTests\n+{\n+    private static final String EMPTY_JSON = \"{}\";\n+\n+    private final StringToBsonConverter converter = new StringToBsonConverter();\n+\n+    static Stream<Arguments> documents()\n+    {\n+        return Stream.of(\n+                Arguments.of(Document.parse(EMPTY_JSON), null),\n+                Arguments.of(Document.parse(EMPTY_JSON), \"\"),\n+                Arguments.of(Document.parse(\"{ \\\"id\\\" : 1 }\"), \"{\\\"id\\\":1}\")\n+            );\n+    }\n+\n+    @MethodSource(\"documents\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTczNw==", "bodyText": "from my pov MethodSource is more readable than\n\"{},\", \"{},''\", \"......\"", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408955737", "createdAt": "2020-04-15T15:59:37Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.util.stream.Stream;\n+\n+import org.bson.Document;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class StringToBsonConverterTests\n+{\n+    private static final String EMPTY_JSON = \"{}\";\n+\n+    private final StringToBsonConverter converter = new StringToBsonConverter();\n+\n+    static Stream<Arguments> documents()\n+    {\n+        return Stream.of(\n+                Arguments.of(Document.parse(EMPTY_JSON), null),\n+                Arguments.of(Document.parse(EMPTY_JSON), \"\"),\n+                Arguments.of(Document.parse(\"{ \\\"id\\\" : 1 }\"), \"{\\\"id\\\":1}\")\n+            );\n+    }\n+\n+    @MethodSource(\"documents\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NzU3MQ==", "bodyText": "Less code - less support", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408957571", "createdAt": "2020-04-15T16:02:22Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.util.stream.Stream;\n+\n+import org.bson.Document;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class StringToBsonConverterTests\n+{\n+    private static final String EMPTY_JSON = \"{}\";\n+\n+    private final StringToBsonConverter converter = new StringToBsonConverter();\n+\n+    static Stream<Arguments> documents()\n+    {\n+        return Stream.of(\n+                Arguments.of(Document.parse(EMPTY_JSON), null),\n+                Arguments.of(Document.parse(EMPTY_JSON), \"\"),\n+                Arguments.of(Document.parse(\"{ \\\"id\\\" : 1 }\"), \"{\\\"id\\\":1}\")\n+            );\n+    }\n+\n+    @MethodSource(\"documents\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTM0MQ==", "bodyText": "we should not prefer readability in favor of less code especially in unit tests", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408961341", "createdAt": "2020-04-15T16:08:03Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.util.stream.Stream;\n+\n+import org.bson.Document;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class StringToBsonConverterTests\n+{\n+    private static final String EMPTY_JSON = \"{}\";\n+\n+    private final StringToBsonConverter converter = new StringToBsonConverter();\n+\n+    static Stream<Arguments> documents()\n+    {\n+        return Stream.of(\n+                Arguments.of(Document.parse(EMPTY_JSON), null),\n+                Arguments.of(Document.parse(EMPTY_JSON), \"\"),\n+                Arguments.of(Document.parse(\"{ \\\"id\\\" : 1 }\"), \"{\\\"id\\\":1}\")\n+            );\n+    }\n+\n+    @MethodSource(\"documents\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc1NTEzOnYy", "diffSide": "RIGHT", "path": "vividus-tests/src/main/resources/story/system/MongodbStepsTests.story", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowNDozOFrOGF-Ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowNDozOFrOGF-Ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDYxMQ==", "bodyText": "please validate result if there are any", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408914611", "createdAt": "2020-04-15T15:04:38Z", "author": {"login": "ikalinin1"}, "path": "vividus-tests/src/main/resources/story/system/MongodbStepsTests.story", "diffHunk": "@@ -0,0 +1,95 @@\n+Description: Integration tests for MongoDbSteps class\n+\n+Meta:\n+  @group vividus-plugin-mongodb\n+\n+Scenario: Set up\n+When I initialize the STORY variable `collectionName` with value `#{generate(regexify '[a-z]{15}')}`\n+When I execute command `{ create: \"${collectionName}\", collation: { locale: \"en\" } }` against `${db-name}` database on `${instance-key}` MongoDB instance and save result to SCENARIO variable `create`\n+When I execute command `\n+{\n+    insert: \"${collectionName}\",\n+    documents: [\n+        {\n+            \"age\": 33,\n+            \"name\": \"Joanna Pierce\",\n+            \"gender\": \"female\",\n+            \"company\": \"LINGOAGE\",\n+            \"email\": \"joannapierce@lingoage.com\",\n+            \"pets\" : [\n+                {\n+                    \"type\" : \"cat\",\n+                    \"name\" : \"Kitty\"\n+                }\n+            ]\n+        },\n+        {\n+            \"age\": 40,\n+            \"name\": \"Buck Frazier\",\n+            \"gender\": \"male\",\n+            \"company\": \"AUTOGRATE\",\n+            \"email\": \"buckfrazier@autograte.com\",\n+            \"pets\" : [\n+                {\n+                    \"type\" : \"cat\",\n+                    \"value\" : \"Fluff\"\n+                },\n+                {\n+                    \"type\" : \"dinosaur\",\n+                    \"value\" : \"Ulad\"\n+                }\n+            ]\n+        },\n+        {\n+            \"age\": 20,\n+            \"name\": \"Rowena Fitzpatrick\",\n+            \"gender\": \"female\",\n+            \"company\": \"IDETICA\",\n+            \"email\": \"rowenafitzpatrick@idetica.com\"\n+        }\n+    ]\n+}\n+` against `${db-name}` database on `${instance-key}` MongoDB instance and save result to SCENARIO variable `insert`\n+\n+Scenario: Find and collect\n+When I execute commands\n+|command   |argument                                    |\n+|find      |{ age: { $gte: 25 }, \"pets.type\": \"cat\" }   |\n+|projection|{ name: 1, email: 1, \"pets.$\": 1, \"_id\": 0 }|\n+|collect   |                                            |\n+ in `${collectionName}` collection against `${db-name}` database on `${instance-key}` MongoDB instance and save result to SCENARIO variable `find`\n+Then a JSON element from '${find}' by the JSON path '$' is equal to '\n+[\n+   {\n+      \"name\":\"Joanna Pierce\",\n+      \"email\":\"joannapierce@lingoage.com\",\n+      \"pets\":[\n+         {\n+            \"type\":\"cat\",\n+            \"name\":\"Kitty\"\n+         }\n+      ]\n+   },\n+   {\n+      \"name\":\"Buck Frazier\",\n+      \"email\":\"buckfrazier@autograte.com\",\n+      \"pets\":[\n+         {\n+            \"type\":\"cat\",\n+            \"value\":\"Fluff\"\n+         }\n+      ]\n+   }\n+]'\n+\n+Scenario: Find and count\n+When I execute commands\n+|command   |argument                                 |\n+|find      |{ age: { $gte: 25 }, \"pets.type\": \"cat\" }|\n+|projection|{ name: 1, email: 1, \"pets.$\": 1 }       |\n+|count     |                                         |\n+ in `${collectionName}` collection against `${db-name}` database on `${instance-key}` MongoDB instance and save result to SCENARIO variable `count`\n+Then `${count}` is equal to `2`\n+\n+Scenario: Tear down\n+When I execute command `{ drop: \"${collectionName}\" }` against `${db-name}` database on `${instance-key}` MongoDB instance and save result to SCENARIO variable `create`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTMwMDQ5OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMzozNFrOGGDkbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMzozNFrOGGDkbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMzExNg==", "bodyText": "Validate.notEmpty(commands, \"Command sequence must not be empty\");\n\nList<String> errors = new ArrayList<>();\nboolean checkStart = !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\nappendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n        + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n\nboolean checkEnd = !commands.get(commands.size() - 1).getCommand().getCommandType()\n        .equals(CommandType.TERMINAL);\nappendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n        + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n\nboolean checkIntermediate = commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()\n        .map(MongoCommandEntry::getCommand)\n        .map(MongoCommand::getCommandType)\n        .allMatch(CommandType.INTERMEDIATE::equals);\nappendIf(checkIntermediate,\n    () -> \"Only the following commands are allowed between the first and the last ones: \"\n        + MongoCommand.findByCommandType(CommandType.INTERMEDIATE), errors);\n\nValidate.isTrue(errors.isEmpty(), \"%n%s\",\n        errors.stream().map(e -> \" - \" + e).collect(Collectors.joining(System.lineSeparator())));", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r409003116", "createdAt": "2020-04-15T17:13:34Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+\n+        if (!commands.isEmpty())\n+        {\n+            boolean checkStart = !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\n+            appendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n+                    + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n+\n+            boolean checkEnd = !commands.get(commands.size() - 1).getCommand().getCommandType()\n+                    .equals(CommandType.TERMINAL);\n+            appendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n+                    + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n+\n+            boolean checkIntermediate = commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()\n+                    .map(MongoCommandEntry::getCommand)\n+                    .map(MongoCommand::getCommandType)\n+                    .allMatch(CommandType.INTERMEDIATE::equals);\n+            appendIf(checkIntermediate,\n+                () -> \"Only the following commands are allowed between the first and the last ones: \"\n+                    + MongoCommand.findByCommandType(CommandType.INTERMEDIATE), errors);\n+        }\n+        else\n+        {\n+            errors.add(\"Command sequence must not be empty\");\n+        }\n+\n+        Validate.isTrue(errors.isEmpty(), \"%n%s\",\n+                errors.stream().map(e -> \" - \" + e).collect(Collectors.joining(System.lineSeparator())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde8de952786fafb6dd4d6e959a169f24210e0ac"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 394, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}