{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MzkxMzU3", "number": 1097, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo0MzozNlrOE1OqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxMzozNFrOE1Pe6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjUwMTk4OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo0MzozNlrOHtYnxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzo0MzozNlrOHtYnxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MTM2Ng==", "bodyText": "remove public and other places?", "url": "https://github.com/vividus-framework/vividus/pull/1097#discussion_r517351366", "createdAt": "2020-11-04T13:43:36Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java", "diffHunk": "@@ -29,25 +33,19 @@\n import com.browserup.bup.proxy.CaptureType;\n import com.browserup.bup.proxy.dns.AdvancedHostResolver;\n \n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.littleshoot.proxy.MitmManager;\n import org.littleshoot.proxy.impl.ThreadPoolConfiguration;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.mockito.MockedConstruction;\n import org.vividus.proxy.mitm.IMitmManagerFactory;\n import org.vividus.proxy.mitm.MitmManagerOptions;\n \n-@RunWith(PowerMockRunner.class)\n-@PowerMockIgnore(\"javax.net.ssl.*\")\n public class ProxyServerFactoryTests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf11df76473f3517a648a04ba027a5602ca6cad"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjYzMDg5OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxMjoyMFrOHtZ2Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxMjoyMFrOHtZ2Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MTQwNw==", "bodyText": "times(0) -> never()", "url": "https://github.com/vividus-framework/vividus/pull/1097#discussion_r517371407", "createdAt": "2020-11-04T14:12:20Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/ProxyServerFactoryTests.java", "diffHunk": "@@ -57,53 +55,55 @@ public void testCreateProxyServer()\n     }\n \n     @Test\n-    @PrepareForTest({BrowserUpProxyServer.class, ThreadPoolConfiguration.class, ProxyServerFactory.class})\n-    public void testCreateProxyServerConfig() throws Exception\n+    void testCreateProxyServerConfig()\n     {\n         MitmManagerOptions mitmManagerOptions = mock(MitmManagerOptions.class);\n         IMitmManagerFactory mitmManagerFactory = mock(IMitmManagerFactory.class);\n         MitmManager mitmManager = mock(MitmManager.class);\n         when(mitmManagerFactory.createMitmManager(mitmManagerOptions)).thenReturn(mitmManager);\n-        BrowserUpProxyServer mockedServer = mock(BrowserUpProxyServer.class);\n-        PowerMockito.whenNew(BrowserUpProxyServer.class).withNoArguments().thenReturn(mockedServer);\n-        ThreadPoolConfiguration mockedConfig = mock(ThreadPoolConfiguration.class);\n-        PowerMockito.whenNew(ThreadPoolConfiguration.class).withNoArguments().thenReturn(mockedConfig);\n-        AdvancedHostResolver hostNameResolver = mock(AdvancedHostResolver.class);\n \n-        boolean trustAllServers = true;\n-        proxyServerFactory.setMitmManagerOptions(mitmManagerOptions);\n-        proxyServerFactory.setMitmManagerFactory(mitmManagerFactory);\n-        proxyServerFactory.setTrustAllServers(trustAllServers);\n-        proxyServerFactory.setMitmEnabled(true);\n-        proxyServerFactory.setAdvancedHostResolver(hostNameResolver);\n-        proxyServerFactory.setCaptureTypes(CaptureType.getAllContentCaptureTypes());\n-        proxyServerFactory.createProxyServer();\n-        int expectedThreadsCount = 16;\n-        verify(mockedConfig).withClientToProxyWorkerThreads(expectedThreadsCount);\n-        verify(mockedConfig).withProxyToServerWorkerThreads(expectedThreadsCount);\n-        verify(mockedServer).setTrustAllServers(trustAllServers);\n-        verify(mockedServer).setMitmManager(mitmManager);\n-        verify(mockedServer).setThreadPoolConfiguration(mockedConfig);\n-        verify(mockedServer).setHostNameResolver(hostNameResolver);\n-        verify(mockedServer).enableHarCaptureTypes(CaptureType.getAllContentCaptureTypes());\n+        try (MockedConstruction<BrowserUpProxyServer> mockedServer = mockConstruction(BrowserUpProxyServer.class);\n+                MockedConstruction<ThreadPoolConfiguration> mockedConfig = mockConstruction(\n+                        ThreadPoolConfiguration.class))\n+        {\n+            AdvancedHostResolver hostNameResolver = mock(AdvancedHostResolver.class);\n+\n+            boolean trustAllServers = true;\n+            proxyServerFactory.setMitmManagerOptions(mitmManagerOptions);\n+            proxyServerFactory.setMitmManagerFactory(mitmManagerFactory);\n+            proxyServerFactory.setTrustAllServers(trustAllServers);\n+            proxyServerFactory.setMitmEnabled(true);\n+            proxyServerFactory.setAdvancedHostResolver(hostNameResolver);\n+            proxyServerFactory.setCaptureTypes(CaptureType.getAllContentCaptureTypes());\n+            proxyServerFactory.createProxyServer();\n+            int expectedThreadsCount = 16;\n+\n+            assertEquals(1, mockedConfig.constructed().size());\n+            ThreadPoolConfiguration config = mockedConfig.constructed().get(0);\n+            verify(config).withClientToProxyWorkerThreads(expectedThreadsCount);\n+            verify(config).withProxyToServerWorkerThreads(expectedThreadsCount);\n+\n+            assertEquals(1, mockedServer.constructed().size());\n+            BrowserUpProxyServer server = mockedServer.constructed().get(0);\n+            verify(server).setTrustAllServers(trustAllServers);\n+            verify(server).setMitmManager(mitmManager);\n+            verify(server).setThreadPoolConfiguration(config);\n+            verify(server).setHostNameResolver(hostNameResolver);\n+            verify(server).enableHarCaptureTypes(CaptureType.getAllContentCaptureTypes());\n+        }\n     }\n \n     @Test\n-    @PrepareForTest({BrowserUpProxyServer.class, ThreadPoolConfiguration.class, ProxyServerFactory.class})\n-    public void testCreateProxyServerConfigDisableMitm() throws Exception\n+    void testCreateProxyServerConfigDisableMitm()\n     {\n-        MitmManagerOptions mitmManagerOptions = mock(MitmManagerOptions.class);\n-        IMitmManagerFactory mitmManagerFactory = mock(IMitmManagerFactory.class);\n-        MitmManager mitmManager = mock(MitmManager.class);\n-        when(mitmManagerFactory.createMitmManager(mitmManagerOptions)).thenReturn(mitmManager);\n-        BrowserUpProxyServer mockedServer = mock(BrowserUpProxyServer.class);\n-        PowerMockito.whenNew(BrowserUpProxyServer.class).withNoArguments().thenReturn(mockedServer);\n-\n-        proxyServerFactory.setMitmManagerOptions(mitmManagerOptions);\n-        proxyServerFactory.setMitmManagerFactory(mitmManagerFactory);\n-        proxyServerFactory.setMitmEnabled(true);\n-        proxyServerFactory.createProxyServer();\n+        try (MockedConstruction<BrowserUpProxyServer> mockedServer = mockConstruction(BrowserUpProxyServer.class))\n+        {\n+            proxyServerFactory.setMitmEnabled(false);\n+            proxyServerFactory.createProxyServer();\n \n-        verify(mockedServer).setMitmManager(mitmManager);\n+            assertEquals(1, mockedServer.constructed().size());\n+            BrowserUpProxyServer server = mockedServer.constructed().get(0);\n+            verify(server, times(0)).setMitmManager(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef0b6ea747e06bccaf648260457ae997a91e823"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjYzNjU2OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxMzozNFrOHtZ5YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxMzozNFrOHtZ5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MjI1Nw==", "bodyText": "times(0) -> never() ?", "url": "https://github.com/vividus-framework/vividus/pull/1097#discussion_r517372257", "createdAt": "2020-11-04T14:13:34Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/proxy/dns/HostNameResolverTests.java", "diffHunk": "@@ -17,96 +17,86 @@\n package org.vividus.proxy.dns;\n \n import static com.github.valfirst.slf4jtest.LoggingEvent.warn;\n-import static java.util.Collections.singletonList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.mockStatic;\n import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.times;\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n \n import com.github.valfirst.slf4jtest.TestLogger;\n import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n \n-import org.junit.After;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+import org.mockito.MockedStatic;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n-@PrepareForTest(HostNameResolver.class)\n-@RunWith(PowerMockRunner.class)\n-@PowerMockRunnerDelegate(MockitoJUnitRunner.class)\n-public class HostNameResolverTests\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class HostNameResolverTests\n {\n-    private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(HostNameResolver.class);\n-\n     private static final String HOST = \"host\";\n     private static final String IP_ADDRESS = \"1.1.1.1\";\n \n-    @Mock\n-    private InetAddress inetAddress;\n+    private final TestLogger logger = TestLoggerFactory.getTestLogger(HostNameResolver.class);\n \n-    @InjectMocks\n-    private HostNameResolver hostNameResolver;\n-\n-    @After\n-    public void clearLoggers()\n-    {\n-        TestLoggerFactory.clear();\n-    }\n+    @Mock private InetAddress inetAddress;\n+    @InjectMocks private HostNameResolver hostNameResolver;\n \n     @Test\n-    public void testResolve() throws Exception\n+    void testResolve()\n     {\n-        hostNameResolver.setDnsMappingStorage(Collections.singletonMap(HOST, IP_ADDRESS));\n-        PowerMockito.mockStatic(InetAddress.class);\n-        when(InetAddress.getByName(IP_ADDRESS)).thenReturn(inetAddress);\n-        assertEquals(singletonList(inetAddress), hostNameResolver.resolve(HOST));\n-        assertTrue(LOGGER.getLoggingEvents().isEmpty());\n-        PowerMockito.verifyStatic(InetAddress.class, never());\n-        InetAddress.getAllByName(any());\n+        hostNameResolver.setDnsMappingStorage(Map.of(HOST, IP_ADDRESS));\n+        try (MockedStatic<InetAddress> inetAddressMock = mockStatic(InetAddress.class))\n+        {\n+            inetAddressMock.when(() -> InetAddress.getByName(IP_ADDRESS)).thenReturn(inetAddress);\n+            assertEquals(List.of(inetAddress), hostNameResolver.resolve(HOST));\n+            assertTrue(logger.getLoggingEvents().isEmpty());\n+            inetAddressMock.verify(times(0), () -> InetAddress.getAllByName(any()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef0b6ea747e06bccaf648260457ae997a91e823"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 52, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}