{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2Nzk0NTIw", "number": 977, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NTozNVrOEpwfaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwOTowMToyOFrOEqAOYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIxNTQ1OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NTozNVrOHbn4bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NTozNVrOHbn4bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNzAyMg==", "bodyText": "why api scope?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498727022", "createdAt": "2020-10-02T09:55:35Z", "author": {"login": "valfirst"}, "path": "vividus-extension-selenium/build.gradle", "diffHunk": "@@ -18,6 +18,7 @@ project.description = 'Vividus extension for selenium'\n      api(group: 'io.appium', name: 'java-client', version: '7.1.0') {\n          exclude module: 'selenium-java'\n      }\n+     api(group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.4')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4352dfe5953d3ad746aeab85209c68e054d99849"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIxNzg0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/configuration/MobileAppTestConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NjoxOVrOHbn52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1NjoxOVrOHbn52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNzM4NQ==", "bodyText": "why is screenSwipe? but not just swipe?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498727385", "createdAt": "2020-10-02T09:56:19Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/configuration/MobileAppTestConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mobileapp.configuration;\n+\n+import java.time.Duration;\n+\n+public class MobileAppTestConfiguration\n+{\n+    private final Duration screenSwipeStabilizationDuration;\n+    private final int screenSwipeLimit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4352dfe5953d3ad746aeab85209c68e054d99849"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIxOTQ1OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/model/Location.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1Njo0N1rOHbn62w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1Njo0N1rOHbn62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyNzY0Mw==", "bodyText": "the fields doesn't correspond to the name of the class", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498727643", "createdAt": "2020-10-02T09:56:47Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/model/Location.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mobileapp.model;\n+\n+public class Location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4352dfe5953d3ad746aeab85209c68e054d99849"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIyNTc3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/SwipeActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1ODo1OVrOHbn-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1ODo1OVrOHbn-ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyODYzNA==", "bodyText": "I propose to have a single class for all mobile actions", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498728634", "createdAt": "2020-10-02T09:58:59Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/SwipeActions.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.mobileapp.action;\n+\n+import static io.appium.java_client.touch.WaitOptions.waitOptions;\n+import static io.appium.java_client.touch.offset.PointOption.point;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Duration;\n+import java.util.function.BooleanSupplier;\n+\n+import org.openqa.selenium.Dimension;\n+import org.vividus.bdd.mobileapp.configuration.MobileAppTestConfiguration;\n+import org.vividus.bdd.mobileapp.model.Location;\n+import org.vividus.bdd.mobileapp.model.SwipeCoordinates;\n+import org.vividus.bdd.mobileapp.model.SwipeDirection;\n+import org.vividus.selenium.IWebDriverProvider;\n+import org.vividus.selenium.manager.GenericWebDriverManager;\n+import org.vividus.selenium.mobileapp.MobileAppScreenshotTaker;\n+import org.vividus.util.Sleeper;\n+\n+import ru.yandex.qatools.ashot.util.ImageTool;\n+\n+public class SwipeActions extends AbstractActions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4352dfe5953d3ad746aeab85209c68e054d99849"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjIyNzc0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/selenium/mobileapp/MobileAppScreenshotTaker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1OTozOFrOHbn_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo1OTozOFrOHbn_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyODkzOA==", "bodyText": "it doesn't look like mobile specific", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498728938", "createdAt": "2020-10-02T09:59:38Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/selenium/mobileapp/MobileAppScreenshotTaker.java", "diffHunk": "@@ -41,7 +47,19 @@ public MobileAppScreenshotTaker(IWebDriverProvider webDriverProvider,\n     public Optional<Screenshot> takeScreenshot(String screenshotName)\n     {\n         String fileName = screenshotFileNameGenerator.generateScreenshotFileName(screenshotName);\n-        byte[] data = webDriverProvider.getUnwrapped(TakesScreenshot.class).getScreenshotAs(OutputType.BYTES);\n-        return Optional.of(new Screenshot(fileName, data));\n+        return Optional.of(new Screenshot(fileName, getScreenshotBytes()));\n+    }\n+\n+    public BufferedImage takeViewportScreenshot() throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4352dfe5953d3ad746aeab85209c68e054d99849"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU1NjU5OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNDo0NlrOHb1D8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNDo0NlrOHb1D8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0Mjk2Mg==", "bodyText": "Swipe to an element", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498942962", "createdAt": "2020-10-02T17:04:46Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "diffHunk": "@@ -268,5 +268,39 @@ Scenario: Type text\n When I type `Bob` in field located `accessibilityId(username)`\n ----\n \n+=== Swipe to element", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU1NzQxOnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNTowMVrOHb1EdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNTowMVrOHb1EdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MzA5Mw==", "bodyText": "Swipes to an element", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498943093", "createdAt": "2020-10-02T17:05:01Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "diffHunk": "@@ -268,5 +268,39 @@ Scenario: Type text\n When I type `Bob` in field located `accessibilityId(username)`\n ----\n \n+=== Swipe to element\n+\n+==== *_Info_*\n+\n+Swipes to element in either UP or DOWN direction with the specified duration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU2MTY0OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNjoyNVrOHb1HKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNjoyNVrOHb1HKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0Mzc4NQ==", "bodyText": "defines max numbers of swipes to perform (if it's reached the swipe process is stopped and the error is thrown)", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498943785", "createdAt": "2020-10-02T17:06:25Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "diffHunk": "@@ -268,5 +268,39 @@ Scenario: Type text\n When I type `Bob` in field located `accessibilityId(username)`\n ----\n \n+=== Swipe to element\n+\n+==== *_Info_*\n+\n+Swipes to element in either UP or DOWN direction with the specified duration\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+When I swipe $direction to element located `$locator` with duration $swipeDuration\n+----\n+\n+==== Properties\n+\n+* `mobile-application.swipe.limit` - defines a swipe limit number by exceeding which swipe process fails", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU2Mjk4OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNjo1MVrOHb1H8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNjo1MVrOHb1H8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0Mzk4NA==", "bodyText": "unchangeable -> stable", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498943984", "createdAt": "2020-10-02T17:06:51Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "diffHunk": "@@ -268,5 +268,39 @@ Scenario: Type text\n When I type `Bob` in field located `accessibilityId(username)`\n ----\n \n+=== Swipe to element\n+\n+==== *_Info_*\n+\n+Swipes to element in either UP or DOWN direction with the specified duration\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+When I swipe $direction to element located `$locator` with duration $swipeDuration\n+----\n+\n+==== Properties\n+\n+* `mobile-application.swipe.limit` - defines a swipe limit number by exceeding which swipe process fails\n+* `mobile-application.swipe.stabilization-duration` - defines a duration to wait after swipe until view becomes unchangeable, this plays a role in 'end of scrollable view' determination which is based on image comparison", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU2Mzg3OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNzoxMFrOHb1IlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNzoxMFrOHb1IlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NDE0OA==", "bodyText": "this plays a role in 'end of scrollable view' determination which is based on image comparison - not clear", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498944148", "createdAt": "2020-10-02T17:07:10Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "diffHunk": "@@ -268,5 +268,39 @@ Scenario: Type text\n When I type `Bob` in field located `accessibilityId(username)`\n ----\n \n+=== Swipe to element\n+\n+==== *_Info_*\n+\n+Swipes to element in either UP or DOWN direction with the specified duration\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+When I swipe $direction to element located `$locator` with duration $swipeDuration\n+----\n+\n+==== Properties\n+\n+* `mobile-application.swipe.limit` - defines a swipe limit number by exceeding which swipe process fails\n+* `mobile-application.swipe.stabilization-duration` - defines a duration to wait after swipe until view becomes unchangeable, this plays a role in 'end of scrollable view' determination which is based on image comparison", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU2NTM3OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNzo0MVrOHb1JhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowNzo0MVrOHb1JhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NDM4OA==", "bodyText": "duration between a touch pointer moves from the start to the end of the swipe coordinates  - not clear", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498944388", "createdAt": "2020-10-02T17:07:41Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-mobile-app.adoc", "diffHunk": "@@ -268,5 +268,39 @@ Scenario: Type text\n When I type `Bob` in field located `accessibilityId(username)`\n ----\n \n+=== Swipe to element\n+\n+==== *_Info_*\n+\n+Swipes to element in either UP or DOWN direction with the specified duration\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+When I swipe $direction to element located `$locator` with duration $swipeDuration\n+----\n+\n+==== Properties\n+\n+* `mobile-application.swipe.limit` - defines a swipe limit number by exceeding which swipe process fails\n+* `mobile-application.swipe.stabilization-duration` - defines a duration to wait after swipe until view becomes unchangeable, this plays a role in 'end of scrollable view' determination which is based on image comparison\n+\n+==== *_Parameters_*\n+\n+. `$direction` - direction to swipe, either UP or DOWN\n+. `$locator` - <<_locator>>\n+. `$duration` - duration between a touch pointer moves from the start to the end of the swipe coordinates in {iso-date-format-link} format", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgwOTgxOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/model/SwipeDirection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyODozNlrOHb3mJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyODozNlrOHb3mJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NDQ4Ng==", "bodyText": "midX -> centerX", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498984486", "createdAt": "2020-10-02T18:28:36Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/model/SwipeDirection.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mobileapp.model;\n+\n+import org.openqa.selenium.Dimension;\n+\n+public enum SwipeDirection\n+{\n+    UP\n+    {\n+        @Override\n+        public SwipeCoordinates calculateCoordinates(Dimension dimension)\n+        {\n+            int midX = dimension.getWidth() / 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgxMDc4OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/model/SwipeDirection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyOTowMFrOHb3myQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyOTowMFrOHb3myQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NDY0OQ==", "bodyText": "midX -> centerX", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498984649", "createdAt": "2020-10-02T18:29:00Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/model/SwipeDirection.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mobileapp.model;\n+\n+import org.openqa.selenium.Dimension;\n+\n+public enum SwipeDirection\n+{\n+    UP\n+    {\n+        @Override\n+        public SwipeCoordinates calculateCoordinates(Dimension dimension)\n+        {\n+            int midX = dimension.getWidth() / 2;\n+            int indent = dimension.getHeight() / VERTICAL_INDENT_COEFFICIENT;\n+            return new SwipeCoordinates(midX, dimension.getHeight() - indent, midX, indent);\n+        }\n+    },\n+    DOWN\n+    {\n+        @Override\n+        public SwipeCoordinates calculateCoordinates(Dimension dimension)\n+        {\n+            int midX = dimension.getWidth() / 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgxMzQ4OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyOTo0MVrOHb3oVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyOTo0MVrOHb3oVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTA0NQ==", "bodyText": "not clear", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498985045", "createdAt": "2020-10-02T18:29:41Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "diffHunk": "@@ -92,6 +100,33 @@ public void typeTextInField(String text, Locator locator)\n                 .ifPresent(e -> keyboardActions.typeText(e, text));\n     }\n \n+    /**\n+     * Swipes to element in <b>direction</b> direction with duration <b>duration</b>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param locator locator to find an element\n+     * @param duration between a pointer moves from the start to the end of the swipe coordinates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgxNTg2OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMDoyOFrOHb3pzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NzoxOFrOHb5slg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTQyMw==", "bodyText": "it's so by default", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498985423", "createdAt": "2020-10-02T18:30:28Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "diffHunk": "@@ -92,6 +100,33 @@ public void typeTextInField(String text, Locator locator)\n                 .ifPresent(e -> keyboardActions.typeText(e, text));\n     }\n \n+    /**\n+     * Swipes to element in <b>direction</b> direction with duration <b>duration</b>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param locator locator to find an element\n+     * @param duration between a pointer moves from the start to the end of the swipe coordinates\n+     */\n+    @When(\"I swipe $direction to element located `$locator` with duration $swipeDuration\")\n+    public void swipeToElement(SwipeDirection direction, Locator locator, Duration duration)\n+    {\n+        locator.getSearchParameters()\n+               .setVisibility(Visibility.VISIBLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMDQ0MQ==", "bodyText": "yes, but we can also set visibility by using locators, shouldn't we prevent user from like accident usage of visibility modifiers and ensure that the state of element should be visible?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499010441", "createdAt": "2020-10-02T19:26:54Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "diffHunk": "@@ -92,6 +100,33 @@ public void typeTextInField(String text, Locator locator)\n                 .ifPresent(e -> keyboardActions.typeText(e, text));\n     }\n \n+    /**\n+     * Swipes to element in <b>direction</b> direction with duration <b>duration</b>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param locator locator to find an element\n+     * @param duration between a pointer moves from the start to the end of the swipe coordinates\n+     */\n+    @When(\"I swipe $direction to element located `$locator` with duration $swipeDuration\")\n+    public void swipeToElement(SwipeDirection direction, Locator locator, Duration duration)\n+    {\n+        locator.getSearchParameters()\n+               .setVisibility(Visibility.VISIBLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTQyMw=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODkwMg==", "bodyText": "nope, if you want to prevent it, then validate and throw an error, but you shouldn't change input parameters silently", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499018902", "createdAt": "2020-10-02T19:47:18Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "diffHunk": "@@ -92,6 +100,33 @@ public void typeTextInField(String text, Locator locator)\n                 .ifPresent(e -> keyboardActions.typeText(e, text));\n     }\n \n+    /**\n+     * Swipes to element in <b>direction</b> direction with duration <b>duration</b>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param locator locator to find an element\n+     * @param duration between a pointer moves from the start to the end of the swipe coordinates\n+     */\n+    @When(\"I swipe $direction to element located `$locator` with duration $swipeDuration\")\n+    public void swipeToElement(SwipeDirection direction, Locator locator, Duration duration)\n+    {\n+        locator.getSearchParameters()\n+               .setVisibility(Visibility.VISIBLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTQyMw=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgxOTA0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMTozNFrOHb3r3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMTozNFrOHb3r3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTk1MA==", "bodyText": "swipeWhile -> swipeUntil ?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498985950", "createdAt": "2020-10-02T18:31:34Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/steps/TouchSteps.java", "diffHunk": "@@ -92,6 +100,33 @@ public void typeTextInField(String text, Locator locator)\n                 .ifPresent(e -> keyboardActions.typeText(e, text));\n     }\n \n+    /**\n+     * Swipes to element in <b>direction</b> direction with duration <b>duration</b>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param locator locator to find an element\n+     * @param duration between a pointer moves from the start to the end of the swipe coordinates\n+     */\n+    @When(\"I swipe $direction to element located `$locator` with duration $swipeDuration\")\n+    public void swipeToElement(SwipeDirection direction, Locator locator, Duration duration)\n+    {\n+        locator.getSearchParameters()\n+               .setVisibility(Visibility.VISIBLE)\n+               .setWaitForElement(false);\n+\n+        List<WebElement> elements = searchActions.findElements(locator);\n+        if (elements.isEmpty())\n+        {\n+            touchActions.swipeWhile(direction, duration, () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgyMjgxOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/configuration/MobileAppTestConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMjo1MVrOHb3uPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNjo0OFrOHb46MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NjU1OA==", "bodyText": "MobileAppTestConfiguration -> MobileApplicationConfiguration", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498986558", "createdAt": "2020-10-02T18:32:51Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/configuration/MobileAppTestConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mobileapp.configuration;\n+\n+import java.time.Duration;\n+\n+public class MobileAppTestConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNjAwMA==", "bodyText": "but this is not mobile application configuration, it's a bit confusing\nwe used to have MobileApp prefix carol mobile app module", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499006000", "createdAt": "2020-10-02T19:16:48Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/bdd/mobileapp/configuration/MobileAppTestConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mobileapp.configuration;\n+\n+import java.time.Duration;\n+\n+public class MobileAppTestConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NjU1OA=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgyNjM5OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/TouchActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMzo1M1rOHb3wYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMzo1M1rOHb3wYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzEwNA==", "bodyText": "add links to appium documentation", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498987104", "createdAt": "2020-10-02T18:33:53Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/TouchActions.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.mobileapp.action;\n+\n+import static io.appium.java_client.touch.WaitOptions.waitOptions;\n+import static io.appium.java_client.touch.offset.ElementOption.element;\n+import static io.appium.java_client.touch.offset.PointOption.point;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Duration;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.UnaryOperator;\n+\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.remote.RemoteWebElement;\n+import org.vividus.bdd.mobileapp.configuration.MobileAppTestConfiguration;\n+import org.vividus.bdd.mobileapp.model.SwipeCoordinates;\n+import org.vividus.bdd.mobileapp.model.SwipeDirection;\n+import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n+import org.vividus.selenium.IWebDriverProvider;\n+import org.vividus.selenium.WebDriverUtil;\n+import org.vividus.selenium.manager.GenericWebDriverManager;\n+import org.vividus.selenium.screenshot.ScreenshotTaker;\n+import org.vividus.util.Sleeper;\n+\n+import io.appium.java_client.PerformsTouchActions;\n+import io.appium.java_client.TouchAction;\n+import io.appium.java_client.touch.offset.ElementOption;\n+import ru.yandex.qatools.ashot.util.ImageTool;\n+\n+@TakeScreenshotOnFailure\n+public class TouchActions\n+{\n+    private static final int HEIGHT_DIVIDER = 3;\n+\n+    private final IWebDriverProvider webDriverProvider;\n+    private final GenericWebDriverManager genericWebDriverManager;\n+    private final ScreenshotTaker screenshotTaker;\n+    private final MobileAppTestConfiguration mobileAppTestConfiguration;\n+\n+    public TouchActions(IWebDriverProvider webDriverProvider, GenericWebDriverManager genericWebDriverManager,\n+            ScreenshotTaker screenshotTaker, MobileAppTestConfiguration mobileAppTestConfiguration)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.genericWebDriverManager = genericWebDriverManager;\n+        this.screenshotTaker = screenshotTaker;\n+        this.mobileAppTestConfiguration = mobileAppTestConfiguration;\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     */\n+    public void tap(WebElement element)\n+    {\n+        performAction(b -> b.tap(elementOption(element)));\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b> with specified <b>duration</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>wait for the duration</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     * @param duration between an element is pressed and released in\n+     * <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format, must not be {@code null}\n+     */\n+    public void tap(WebElement element, Duration duration)\n+    {\n+        performAction(b -> b.press(elementOption(element))\n+                            .waitAction(waitOptions(duration))\n+                            .release());\n+    }\n+\n+    /**\n+     * Swipes in <b>swipeDuration</b> direction until one of the following conditions happen:\n+     * <ul>\n+     * <li>the <b>stopCondition</b> return true result</li>\n+     * <li>the end of mobile scroll view is reached</li>\n+     * <li>the swipe limit is exceeded</li>\n+     * </ul>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param swipeDuration duration between a pointer moves from the start to the end of the swipe coordinates\n+     * @param stopCondition condition to stop swiping\n+     */\n+    public void swipeWhile(SwipeDirection direction, Duration swipeDuration, BooleanSupplier stopCondition)\n+    {\n+        /*\n+         * mobile:scroll\n+         * iOS\n+         * - scroll to an element works only if the element resides in UP scroll direction\n+         * - if the element in DOWN scroll direction, the command still tries to find the element in UP scroll direction\n+         * - payload is {\"element\" : \"hash\", \"toVisible\" : true}\n+         * Android\n+         * - supports only accessibility id, uiautomator strategies\n+         * - payload is {\"strategy\": \"accessibility id\", \"selector\": \"selector\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgzMzMwOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/TouchActions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozNjowNlrOHb30mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTozNzo1NVrOHb5dNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODE4NQ==", "bodyText": "I believe there is no much sense to wrap it", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498988185", "createdAt": "2020-10-02T18:36:06Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/TouchActions.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.mobileapp.action;\n+\n+import static io.appium.java_client.touch.WaitOptions.waitOptions;\n+import static io.appium.java_client.touch.offset.ElementOption.element;\n+import static io.appium.java_client.touch.offset.PointOption.point;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Duration;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.UnaryOperator;\n+\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.remote.RemoteWebElement;\n+import org.vividus.bdd.mobileapp.configuration.MobileAppTestConfiguration;\n+import org.vividus.bdd.mobileapp.model.SwipeCoordinates;\n+import org.vividus.bdd.mobileapp.model.SwipeDirection;\n+import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n+import org.vividus.selenium.IWebDriverProvider;\n+import org.vividus.selenium.WebDriverUtil;\n+import org.vividus.selenium.manager.GenericWebDriverManager;\n+import org.vividus.selenium.screenshot.ScreenshotTaker;\n+import org.vividus.util.Sleeper;\n+\n+import io.appium.java_client.PerformsTouchActions;\n+import io.appium.java_client.TouchAction;\n+import io.appium.java_client.touch.offset.ElementOption;\n+import ru.yandex.qatools.ashot.util.ImageTool;\n+\n+@TakeScreenshotOnFailure\n+public class TouchActions\n+{\n+    private static final int HEIGHT_DIVIDER = 3;\n+\n+    private final IWebDriverProvider webDriverProvider;\n+    private final GenericWebDriverManager genericWebDriverManager;\n+    private final ScreenshotTaker screenshotTaker;\n+    private final MobileAppTestConfiguration mobileAppTestConfiguration;\n+\n+    public TouchActions(IWebDriverProvider webDriverProvider, GenericWebDriverManager genericWebDriverManager,\n+            ScreenshotTaker screenshotTaker, MobileAppTestConfiguration mobileAppTestConfiguration)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.genericWebDriverManager = genericWebDriverManager;\n+        this.screenshotTaker = screenshotTaker;\n+        this.mobileAppTestConfiguration = mobileAppTestConfiguration;\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     */\n+    public void tap(WebElement element)\n+    {\n+        performAction(b -> b.tap(elementOption(element)));\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b> with specified <b>duration</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>wait for the duration</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     * @param duration between an element is pressed and released in\n+     * <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format, must not be {@code null}\n+     */\n+    public void tap(WebElement element, Duration duration)\n+    {\n+        performAction(b -> b.press(elementOption(element))\n+                            .waitAction(waitOptions(duration))\n+                            .release());\n+    }\n+\n+    /**\n+     * Swipes in <b>swipeDuration</b> direction until one of the following conditions happen:\n+     * <ul>\n+     * <li>the <b>stopCondition</b> return true result</li>\n+     * <li>the end of mobile scroll view is reached</li>\n+     * <li>the swipe limit is exceeded</li>\n+     * </ul>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param swipeDuration duration between a pointer moves from the start to the end of the swipe coordinates\n+     * @param stopCondition condition to stop swiping\n+     */\n+    public void swipeWhile(SwipeDirection direction, Duration swipeDuration, BooleanSupplier stopCondition)\n+    {\n+        /*\n+         * mobile:scroll\n+         * iOS\n+         * - scroll to an element works only if the element resides in UP scroll direction\n+         * - if the element in DOWN scroll direction, the command still tries to find the element in UP scroll direction\n+         * - payload is {\"element\" : \"hash\", \"toVisible\" : true}\n+         * Android\n+         * - supports only accessibility id, uiautomator strategies\n+         * - payload is {\"strategy\": \"accessibility id\", \"selector\": \"selector\"}\n+         * */\n+\n+        int screenshotHeightToCompare = genericWebDriverManager.getSize().getHeight() / HEIGHT_DIVIDER;\n+        int heightOffset = screenshotHeightToCompare * 2;\n+\n+        Duration stabilizationDuration = mobileAppTestConfiguration.getSwipeStabilizationDuration();\n+        int swipeLimit = mobileAppTestConfiguration.getSwipeLimit();\n+        BufferedImage previousFrame = null;\n+        for (int count = 0; count <= swipeLimit; count++)\n+        {\n+            swipe(direction, swipeDuration);\n+            Sleeper.sleep(stabilizationDuration);\n+            if (stopCondition.getAsBoolean())\n+            {\n+                break;\n+            }\n+            BufferedImage area = takeScreenshot();\n+            BufferedImage currentFrame = area.getSubimage(0, area.getHeight() - heightOffset, area.getWidth(),\n+                    screenshotHeightToCompare);\n+            if (previousFrame != null && ImageTool.equalImage(currentFrame).matches(previousFrame))\n+            {\n+                break;\n+            }\n+            previousFrame = currentFrame;\n+            if (count == swipeLimit)\n+            {\n+                throw new IllegalStateException(\n+                        String.format(\"Swiping is stopped due to exceeded swipe limit '%d'\", swipeLimit));\n+            }\n+        }\n+    }\n+\n+    private BufferedImage takeScreenshot()\n+    {\n+        try\n+        {\n+            return screenshotTaker.takeViewportScreenshot();\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwOTYyOA==", "bodyText": "using images is a temporary solution to determine swipes and it would look weird that the swipe gesture throws IOException because it doesn't imply any IO.", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499009628", "createdAt": "2020-10-02T19:24:57Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/TouchActions.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.mobileapp.action;\n+\n+import static io.appium.java_client.touch.WaitOptions.waitOptions;\n+import static io.appium.java_client.touch.offset.ElementOption.element;\n+import static io.appium.java_client.touch.offset.PointOption.point;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Duration;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.UnaryOperator;\n+\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.remote.RemoteWebElement;\n+import org.vividus.bdd.mobileapp.configuration.MobileAppTestConfiguration;\n+import org.vividus.bdd.mobileapp.model.SwipeCoordinates;\n+import org.vividus.bdd.mobileapp.model.SwipeDirection;\n+import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n+import org.vividus.selenium.IWebDriverProvider;\n+import org.vividus.selenium.WebDriverUtil;\n+import org.vividus.selenium.manager.GenericWebDriverManager;\n+import org.vividus.selenium.screenshot.ScreenshotTaker;\n+import org.vividus.util.Sleeper;\n+\n+import io.appium.java_client.PerformsTouchActions;\n+import io.appium.java_client.TouchAction;\n+import io.appium.java_client.touch.offset.ElementOption;\n+import ru.yandex.qatools.ashot.util.ImageTool;\n+\n+@TakeScreenshotOnFailure\n+public class TouchActions\n+{\n+    private static final int HEIGHT_DIVIDER = 3;\n+\n+    private final IWebDriverProvider webDriverProvider;\n+    private final GenericWebDriverManager genericWebDriverManager;\n+    private final ScreenshotTaker screenshotTaker;\n+    private final MobileAppTestConfiguration mobileAppTestConfiguration;\n+\n+    public TouchActions(IWebDriverProvider webDriverProvider, GenericWebDriverManager genericWebDriverManager,\n+            ScreenshotTaker screenshotTaker, MobileAppTestConfiguration mobileAppTestConfiguration)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.genericWebDriverManager = genericWebDriverManager;\n+        this.screenshotTaker = screenshotTaker;\n+        this.mobileAppTestConfiguration = mobileAppTestConfiguration;\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     */\n+    public void tap(WebElement element)\n+    {\n+        performAction(b -> b.tap(elementOption(element)));\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b> with specified <b>duration</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>wait for the duration</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     * @param duration between an element is pressed and released in\n+     * <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format, must not be {@code null}\n+     */\n+    public void tap(WebElement element, Duration duration)\n+    {\n+        performAction(b -> b.press(elementOption(element))\n+                            .waitAction(waitOptions(duration))\n+                            .release());\n+    }\n+\n+    /**\n+     * Swipes in <b>swipeDuration</b> direction until one of the following conditions happen:\n+     * <ul>\n+     * <li>the <b>stopCondition</b> return true result</li>\n+     * <li>the end of mobile scroll view is reached</li>\n+     * <li>the swipe limit is exceeded</li>\n+     * </ul>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param swipeDuration duration between a pointer moves from the start to the end of the swipe coordinates\n+     * @param stopCondition condition to stop swiping\n+     */\n+    public void swipeWhile(SwipeDirection direction, Duration swipeDuration, BooleanSupplier stopCondition)\n+    {\n+        /*\n+         * mobile:scroll\n+         * iOS\n+         * - scroll to an element works only if the element resides in UP scroll direction\n+         * - if the element in DOWN scroll direction, the command still tries to find the element in UP scroll direction\n+         * - payload is {\"element\" : \"hash\", \"toVisible\" : true}\n+         * Android\n+         * - supports only accessibility id, uiautomator strategies\n+         * - payload is {\"strategy\": \"accessibility id\", \"selector\": \"selector\"}\n+         * */\n+\n+        int screenshotHeightToCompare = genericWebDriverManager.getSize().getHeight() / HEIGHT_DIVIDER;\n+        int heightOffset = screenshotHeightToCompare * 2;\n+\n+        Duration stabilizationDuration = mobileAppTestConfiguration.getSwipeStabilizationDuration();\n+        int swipeLimit = mobileAppTestConfiguration.getSwipeLimit();\n+        BufferedImage previousFrame = null;\n+        for (int count = 0; count <= swipeLimit; count++)\n+        {\n+            swipe(direction, swipeDuration);\n+            Sleeper.sleep(stabilizationDuration);\n+            if (stopCondition.getAsBoolean())\n+            {\n+                break;\n+            }\n+            BufferedImage area = takeScreenshot();\n+            BufferedImage currentFrame = area.getSubimage(0, area.getHeight() - heightOffset, area.getWidth(),\n+                    screenshotHeightToCompare);\n+            if (previousFrame != null && ImageTool.equalImage(currentFrame).matches(previousFrame))\n+            {\n+                break;\n+            }\n+            previousFrame = currentFrame;\n+            if (count == swipeLimit)\n+            {\n+                throw new IllegalStateException(\n+                        String.format(\"Swiping is stopped due to exceeded swipe limit '%d'\", swipeLimit));\n+            }\n+        }\n+    }\n+\n+    private BufferedImage takeScreenshot()\n+    {\n+        try\n+        {\n+            return screenshotTaker.takeViewportScreenshot();\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODE4NQ=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxNDk2Nw==", "bodyText": "ok, I buy it", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499014967", "createdAt": "2020-10-02T19:37:55Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/java/org/vividus/mobileapp/action/TouchActions.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.mobileapp.action;\n+\n+import static io.appium.java_client.touch.WaitOptions.waitOptions;\n+import static io.appium.java_client.touch.offset.ElementOption.element;\n+import static io.appium.java_client.touch.offset.PointOption.point;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Duration;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.UnaryOperator;\n+\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.remote.RemoteWebElement;\n+import org.vividus.bdd.mobileapp.configuration.MobileAppTestConfiguration;\n+import org.vividus.bdd.mobileapp.model.SwipeCoordinates;\n+import org.vividus.bdd.mobileapp.model.SwipeDirection;\n+import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n+import org.vividus.selenium.IWebDriverProvider;\n+import org.vividus.selenium.WebDriverUtil;\n+import org.vividus.selenium.manager.GenericWebDriverManager;\n+import org.vividus.selenium.screenshot.ScreenshotTaker;\n+import org.vividus.util.Sleeper;\n+\n+import io.appium.java_client.PerformsTouchActions;\n+import io.appium.java_client.TouchAction;\n+import io.appium.java_client.touch.offset.ElementOption;\n+import ru.yandex.qatools.ashot.util.ImageTool;\n+\n+@TakeScreenshotOnFailure\n+public class TouchActions\n+{\n+    private static final int HEIGHT_DIVIDER = 3;\n+\n+    private final IWebDriverProvider webDriverProvider;\n+    private final GenericWebDriverManager genericWebDriverManager;\n+    private final ScreenshotTaker screenshotTaker;\n+    private final MobileAppTestConfiguration mobileAppTestConfiguration;\n+\n+    public TouchActions(IWebDriverProvider webDriverProvider, GenericWebDriverManager genericWebDriverManager,\n+            ScreenshotTaker screenshotTaker, MobileAppTestConfiguration mobileAppTestConfiguration)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.genericWebDriverManager = genericWebDriverManager;\n+        this.screenshotTaker = screenshotTaker;\n+        this.mobileAppTestConfiguration = mobileAppTestConfiguration;\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     */\n+    public void tap(WebElement element)\n+    {\n+        performAction(b -> b.tap(elementOption(element)));\n+    }\n+\n+    /**\n+     * Taps on the <b>element</b> with specified <b>duration</b>\n+     * <br>\n+     * The atomic actions performed are:\n+     * <ol>\n+     * <li>press on the element</li>\n+     * <li>wait for the duration</li>\n+     * <li>release</li>\n+     * </ol>\n+     * @param element element to tap, must not be {@code null}\n+     * @param duration between an element is pressed and released in\n+     * <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format, must not be {@code null}\n+     */\n+    public void tap(WebElement element, Duration duration)\n+    {\n+        performAction(b -> b.press(elementOption(element))\n+                            .waitAction(waitOptions(duration))\n+                            .release());\n+    }\n+\n+    /**\n+     * Swipes in <b>swipeDuration</b> direction until one of the following conditions happen:\n+     * <ul>\n+     * <li>the <b>stopCondition</b> return true result</li>\n+     * <li>the end of mobile scroll view is reached</li>\n+     * <li>the swipe limit is exceeded</li>\n+     * </ul>\n+     * @param direction direction to swipe, either <b>UP</b> or <b>DOWN</b>\n+     * @param swipeDuration duration between a pointer moves from the start to the end of the swipe coordinates\n+     * @param stopCondition condition to stop swiping\n+     */\n+    public void swipeWhile(SwipeDirection direction, Duration swipeDuration, BooleanSupplier stopCondition)\n+    {\n+        /*\n+         * mobile:scroll\n+         * iOS\n+         * - scroll to an element works only if the element resides in UP scroll direction\n+         * - if the element in DOWN scroll direction, the command still tries to find the element in UP scroll direction\n+         * - payload is {\"element\" : \"hash\", \"toVisible\" : true}\n+         * Android\n+         * - supports only accessibility id, uiautomator strategies\n+         * - payload is {\"strategy\": \"accessibility id\", \"selector\": \"selector\"}\n+         * */\n+\n+        int screenshotHeightToCompare = genericWebDriverManager.getSize().getHeight() / HEIGHT_DIVIDER;\n+        int heightOffset = screenshotHeightToCompare * 2;\n+\n+        Duration stabilizationDuration = mobileAppTestConfiguration.getSwipeStabilizationDuration();\n+        int swipeLimit = mobileAppTestConfiguration.getSwipeLimit();\n+        BufferedImage previousFrame = null;\n+        for (int count = 0; count <= swipeLimit; count++)\n+        {\n+            swipe(direction, swipeDuration);\n+            Sleeper.sleep(stabilizationDuration);\n+            if (stopCondition.getAsBoolean())\n+            {\n+                break;\n+            }\n+            BufferedImage area = takeScreenshot();\n+            BufferedImage currentFrame = area.getSubimage(0, area.getHeight() - heightOffset, area.getWidth(),\n+                    screenshotHeightToCompare);\n+            if (previousFrame != null && ImageTool.equalImage(currentFrame).matches(previousFrame))\n+            {\n+                break;\n+            }\n+            previousFrame = currentFrame;\n+            if (count == swipeLimit)\n+            {\n+                throw new IllegalStateException(\n+                        String.format(\"Swiping is stopped due to exceeded swipe limit '%d'\", swipeLimit));\n+            }\n+        }\n+    }\n+\n+    private BufferedImage takeScreenshot()\n+    {\n+        try\n+        {\n+            return screenshotTaker.takeViewportScreenshot();\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODE4NQ=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgzNDMwOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozNjozMVrOHb31RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDowNTo0MVrOHb6KEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODM1Nw==", "bodyText": "isn't it to much?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r498988357", "createdAt": "2020-10-02T18:36:31Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwODEwOQ==", "bodyText": "it's tested many times and seems enough to wait for scroll disappearance after we stop swiping for both iOS and Vedroid", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499008109", "createdAt": "2020-10-02T19:21:33Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODM1Nw=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNjQ1MA==", "bodyText": "discussed to keep pt1s", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499026450", "createdAt": "2020-10-02T20:05:41Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODM1Nw=="}, "originalCommit": {"oid": "bdcad571143eb1fdc3c0042430fd2dcc28aa9bfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDc5MTgxOnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/screenshot/ScreenshotTaker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwODo1ODozMFrOHcAfwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODozMDoxMlrOHcSnvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwNg==", "bodyText": "there is a strategy for this?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499130306", "createdAt": "2020-10-03T08:58:30Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/screenshot/ScreenshotTaker.java", "diffHunk": "@@ -16,9 +16,13 @@\n \n package org.vividus.selenium.screenshot;\n \n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n import java.util.Optional;\n \n public interface ScreenshotTaker\n {\n     Optional<Screenshot> takeScreenshot(String screenshotName);\n+\n+    BufferedImage takeViewportScreenshot() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDM3Mg==", "bodyText": "takeScreenshot(ScreenshotShootingStrategy strategy) ?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499130372", "createdAt": "2020-10-03T08:59:38Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/screenshot/ScreenshotTaker.java", "diffHunk": "@@ -16,9 +16,13 @@\n \n package org.vividus.selenium.screenshot;\n \n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n import java.util.Optional;\n \n public interface ScreenshotTaker\n {\n     Optional<Screenshot> takeScreenshot(String screenshotName);\n+\n+    BufferedImage takeViewportScreenshot() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwNg=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzNjcwMw==", "bodyText": "usage of ScreenshotShootingStrategy is currently redundant for mobile app, also it's in common interface because it perfectly suites for both mobile and web platform", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499136703", "createdAt": "2020-10-03T10:35:02Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/screenshot/ScreenshotTaker.java", "diffHunk": "@@ -16,9 +16,13 @@\n \n package org.vividus.selenium.screenshot;\n \n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n import java.util.Optional;\n \n public interface ScreenshotTaker\n {\n     Optional<Screenshot> takeScreenshot(String screenshotName);\n+\n+    BufferedImage takeViewportScreenshot() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwNg=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxOTg4OA==", "bodyText": "If you use the strategy there is no need to support screenshot taking code", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499419888", "createdAt": "2020-10-05T08:16:55Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/screenshot/ScreenshotTaker.java", "diffHunk": "@@ -16,9 +16,13 @@\n \n package org.vividus.selenium.screenshot;\n \n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n import java.util.Optional;\n \n public interface ScreenshotTaker\n {\n     Optional<Screenshot> takeScreenshot(String screenshotName);\n+\n+    BufferedImage takeViewportScreenshot() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwNg=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyNzI2MA==", "bodyText": "I don't need strategy in mobile application, I just need to take a screenshot of viewport without any additional handling", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499427260", "createdAt": "2020-10-05T08:30:12Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/screenshot/ScreenshotTaker.java", "diffHunk": "@@ -16,9 +16,13 @@\n \n package org.vividus.selenium.screenshot;\n \n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n import java.util.Optional;\n \n public interface ScreenshotTaker\n {\n     Optional<Screenshot> takeScreenshot(String screenshotName);\n+\n+    BufferedImage takeViewportScreenshot() throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwNg=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDc5MzMxOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwOTowMToyOFrOHcAgjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODozMzozMFrOHcSu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDUwOQ==", "bodyText": "How much in % takes one swipe?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499130509", "createdAt": "2020-10-03T09:01:28Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S\n+mobile-application.swipe.limit=10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzNjI0NQ==", "bodyText": "depends on swipe duration :)", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499136245", "createdAt": "2020-10-03T10:28:04Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S\n+mobile-application.swipe.limit=10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDUwOQ=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMDQzMQ==", "bodyText": "My thoughts here: this is to small value? How many screens it will be able to swipe until the limit reached?", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499420431", "createdAt": "2020-10-05T08:18:02Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S\n+mobile-application.swipe.limit=10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDUwOQ=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyOTExMQ==", "bodyText": "I would say that 10 is good for most apps I previously meet", "url": "https://github.com/vividus-framework/vividus/pull/977#discussion_r499429111", "createdAt": "2020-10-05T08:33:30Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-mobile-app/src/main/resources/properties/profile/mobile_app/profile.properties", "diffHunk": "@@ -2,3 +2,5 @@ spring.profiles.active=mobile_app\n \n mobile-app=true\n mobile-application.session-scope=story\n+mobile-application.swipe.stabilization-duration=PT1S\n+mobile-application.swipe.limit=10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDUwOQ=="}, "originalCommit": {"oid": "57cab5615ae37142447bb00d60e859a2fd98338d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 152, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}