{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDc0MjIy", "number": 1216, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNjoxMVrOFDlxrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoyOTo1MVrOFGC8ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzA4OTc0OnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNjoxMVrOIDUVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo0NTowM1rOIDVplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTcyNQ==", "bodyText": "why is it needed?", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540349725", "createdAt": "2020-12-10T17:16:11Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MTM1MQ==", "bodyText": "to avoid multiple links received from GivenStories scenarios at Scenario level", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540371351", "createdAt": "2020-12-10T17:45:03Z", "author": {"login": "uarlouski"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTcyNQ=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzA5MDUxOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNjoyMVrOIDUVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTozNzoxNlrOIDaEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTg0Ng==", "bodyText": "why tms?", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540349846", "createdAt": "2020-12-10T17:16:21Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())\n+                                                      && l.getName().equals(event.getName()));\n+\n+            if (!exists)\n+            {\n+                Link link = ResultsUtils.createLink(null, event.getName(), event.getUrl(), \"tms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MjExMg==", "bodyText": "there is no much variety, either issue or tms, we can consider introducing new icon for links in the future", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540372112", "createdAt": "2020-12-10T17:46:14Z", "author": {"login": "uarlouski"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())\n+                                                      && l.getName().equals(event.getName()));\n+\n+            if (!exists)\n+            {\n+                Link link = ResultsUtils.createLink(null, event.getName(), event.getUrl(), \"tms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTg0Ng=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNjQxMA==", "bodyText": "you can use any link type, the difference is that custom link types won't have icons", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540406410", "createdAt": "2020-12-10T18:37:42Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())\n+                                                      && l.getName().equals(event.getName()));\n+\n+            if (!exists)\n+            {\n+                Link link = ResultsUtils.createLink(null, event.getName(), event.getUrl(), \"tms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTg0Ng=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNzY1Mg==", "bodyText": "yes, but this will look like plain txt, that's why I excluded this from the choice", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540407652", "createdAt": "2020-12-10T18:39:44Z", "author": {"login": "uarlouski"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())\n+                                                      && l.getName().equals(event.getName()));\n+\n+            if (!exists)\n+            {\n+                Link link = ResultsUtils.createLink(null, event.getName(), event.getUrl(), \"tms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTg0Ng=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0MzgwNQ==", "bodyText": "TMS - Test management system, not every link points to TMS, so the event should have ability to provide link type, it won't have any icon, but that's better than misleading icon", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540443805", "createdAt": "2020-12-10T19:37:16Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())\n+                                                      && l.getName().equals(event.getName()));\n+\n+            if (!exists)\n+            {\n+                Link link = ResultsUtils.createLink(null, event.getName(), event.getUrl(), \"tms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0OTg0Ng=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzEwNDExOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxOToxOFrOIDUd4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDoyMTozN1rOIDbs-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTk2OQ==", "bodyText": "I believe you can have a sinlge class for all BS steps (only 2)", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540351969", "createdAt": "2020-12-10T17:19:18Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.browserstack.steps;\n+\n+import com.browserstack.automate.model.Session;\n+import com.browserstack.client.exception.BrowserStackException;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterScenario;\n+import org.openqa.selenium.remote.RemoteWebDriver;\n+import org.vividus.browserstack.BrowserStackAutomateClient;\n+import org.vividus.reporter.event.LinkPublishEvent;\n+import org.vividus.selenium.IWebDriverProvider;\n+\n+public class BrowserStackSteps\n+{\n+    private final IWebDriverProvider webDriverProvider;\n+    private final EventBus eventBus;\n+    private final BrowserStackAutomateClient appAutomateClient;\n+\n+    public BrowserStackSteps(IWebDriverProvider webDriverProvider, EventBus eventBus,\n+            BrowserStackAutomateClient appAutomateClient)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.eventBus = eventBus;\n+        this.appAutomateClient = appAutomateClient;\n+    }\n+\n+    @AfterScenario\n+    public void publishReport() throws BrowserStackException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MzI4OA==", "bodyText": "it's more clear when we separate steps used by users and not by users\nsome users may dig into implementation, such steps can bring additional noise", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540373288", "createdAt": "2020-12-10T17:47:53Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.browserstack.steps;\n+\n+import com.browserstack.automate.model.Session;\n+import com.browserstack.client.exception.BrowserStackException;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterScenario;\n+import org.openqa.selenium.remote.RemoteWebDriver;\n+import org.vividus.browserstack.BrowserStackAutomateClient;\n+import org.vividus.reporter.event.LinkPublishEvent;\n+import org.vividus.selenium.IWebDriverProvider;\n+\n+public class BrowserStackSteps\n+{\n+    private final IWebDriverProvider webDriverProvider;\n+    private final EventBus eventBus;\n+    private final BrowserStackAutomateClient appAutomateClient;\n+\n+    public BrowserStackSteps(IWebDriverProvider webDriverProvider, EventBus eventBus,\n+            BrowserStackAutomateClient appAutomateClient)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.eventBus = eventBus;\n+        this.appAutomateClient = appAutomateClient;\n+    }\n+\n+    @AfterScenario\n+    public void publishReport() throws BrowserStackException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTk2OQ=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNzY5Mg==", "bodyText": "if users are skilled enough to read java code, then there should be no problem to have any other methods in the class", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540407692", "createdAt": "2020-12-10T18:39:48Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.browserstack.steps;\n+\n+import com.browserstack.automate.model.Session;\n+import com.browserstack.client.exception.BrowserStackException;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterScenario;\n+import org.openqa.selenium.remote.RemoteWebDriver;\n+import org.vividus.browserstack.BrowserStackAutomateClient;\n+import org.vividus.reporter.event.LinkPublishEvent;\n+import org.vividus.selenium.IWebDriverProvider;\n+\n+public class BrowserStackSteps\n+{\n+    private final IWebDriverProvider webDriverProvider;\n+    private final EventBus eventBus;\n+    private final BrowserStackAutomateClient appAutomateClient;\n+\n+    public BrowserStackSteps(IWebDriverProvider webDriverProvider, EventBus eventBus,\n+            BrowserStackAutomateClient appAutomateClient)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.eventBus = eventBus;\n+        this.appAutomateClient = appAutomateClient;\n+    }\n+\n+    @AfterScenario\n+    public void publishReport() throws BrowserStackException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTk2OQ=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MDUyMg==", "bodyText": "what is advantage of putting two completely different sets of functionality into one class?", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540470522", "createdAt": "2020-12-10T20:21:37Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.browserstack.steps;\n+\n+import com.browserstack.automate.model.Session;\n+import com.browserstack.client.exception.BrowserStackException;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterScenario;\n+import org.openqa.selenium.remote.RemoteWebDriver;\n+import org.vividus.browserstack.BrowserStackAutomateClient;\n+import org.vividus.reporter.event.LinkPublishEvent;\n+import org.vividus.selenium.IWebDriverProvider;\n+\n+public class BrowserStackSteps\n+{\n+    private final IWebDriverProvider webDriverProvider;\n+    private final EventBus eventBus;\n+    private final BrowserStackAutomateClient appAutomateClient;\n+\n+    public BrowserStackSteps(IWebDriverProvider webDriverProvider, EventBus eventBus,\n+            BrowserStackAutomateClient appAutomateClient)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.eventBus = eventBus;\n+        this.appAutomateClient = appAutomateClient;\n+    }\n+\n+    @AfterScenario\n+    public void publishReport() throws BrowserStackException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTk2OQ=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzEwNjEwOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxOTo0MlrOIDUfDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxOTo0MlrOIDUfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MjI2OA==", "bodyText": "publishSessionLink", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540352268", "createdAt": "2020-12-10T17:19:42Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.browserstack.steps;\n+\n+import com.browserstack.automate.model.Session;\n+import com.browserstack.client.exception.BrowserStackException;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterScenario;\n+import org.openqa.selenium.remote.RemoteWebDriver;\n+import org.vividus.browserstack.BrowserStackAutomateClient;\n+import org.vividus.reporter.event.LinkPublishEvent;\n+import org.vividus.selenium.IWebDriverProvider;\n+\n+public class BrowserStackSteps\n+{\n+    private final IWebDriverProvider webDriverProvider;\n+    private final EventBus eventBus;\n+    private final BrowserStackAutomateClient appAutomateClient;\n+\n+    public BrowserStackSteps(IWebDriverProvider webDriverProvider, EventBus eventBus,\n+            BrowserStackAutomateClient appAutomateClient)\n+    {\n+        this.webDriverProvider = webDriverProvider;\n+        this.eventBus = eventBus;\n+        this.appAutomateClient = appAutomateClient;\n+    }\n+\n+    @AfterScenario\n+    public void publishReport() throws BrowserStackException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzE0MzI3OnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNzo0NFrOIDU1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozMToxOVrOIDU_Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1ODAzNQ==", "bodyText": "what about caching event.getUrl/getName?", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540358035", "createdAt": "2020-12-10T17:27:44Z", "author": {"login": "ikalinin1"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MDU1MQ==", "bodyText": "notExists and noneMatch", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r540360551", "createdAt": "2020-12-10T17:31:19Z", "author": {"login": "ikalinin1"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,23 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            boolean exists = result.getLinks().stream()\n+                                              .anyMatch(l -> l.getUrl().equals(event.getUrl())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1ODAzNQ=="}, "originalCommit": {"oid": "3ad87e9eb71060c80a84f75d3fdf99d6ef8f5dcb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODg0MDQyOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoyOTo1MVrOIG3gnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoyOTo1MVrOIG3gnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3MTgzNw==", "bodyText": "just new Link()... ?", "url": "https://github.com/vividus-framework/vividus/pull/1216#discussion_r544071837", "createdAt": "2020-12-16T07:29:51Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureStoryReporter.java", "diffHunk": "@@ -441,6 +442,26 @@ public void onAttachmentPublish(AttachmentPublishEvent event)\n         lifecycle.addAttachment(attachment.getTitle(), attachment.getContentType(), null, attachment.getContent());\n     }\n \n+    @Subscribe\n+    public void onLinkPublish(LinkPublishEvent event)\n+    {\n+        lifecycle.updateTestCase(getRootStepId(), result ->\n+        {\n+            String name = event.getName();\n+            String url = event.getUrl();\n+\n+            boolean notExists = result.getLinks().stream()\n+                                              .noneMatch(l -> l.getUrl().equals(url) && l.getName().equals(name));\n+\n+            if (notExists)\n+            {\n+                Link link = ResultsUtils.createLink(null, event.getName(), event.getUrl(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd082dcfce12e987f040674266b2314532420288"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4979, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}