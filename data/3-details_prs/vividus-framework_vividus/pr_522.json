{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDQwMDEy", "number": 522, "title": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer", "bodyText": "Closes #456", "createdAt": "2020-05-02T11:48:16Z", "url": "https://github.com/vividus-framework/vividus/pull/522", "merged": true, "mergeCommit": {"oid": "30957208c2b7dd25f66d7ba224180950dcfa396b"}, "closed": true, "closedAt": "2020-05-09T10:02:30Z", "author": {"login": "Yauhenda"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdVUpvgBqjMyOTU2OTY2MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfRXEVgBqjMzMTY4MzY0NzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36db220eec93a51e0b09707b23c7b7bf41532946", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/36db220eec93a51e0b09707b23c7b7bf41532946", "committedDate": "2020-05-02T11:45:35Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}, "afterCommit": {"oid": "637386cf11b785cd7ede51775656dbbbbcab22ac", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/637386cf11b785cd7ede51775656dbbbbcab22ac", "committedDate": "2020-05-02T12:20:10Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjA4NDQw", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-404608440", "createdAt": "2020-05-03T11:28:32Z", "commit": {"oid": "637386cf11b785cd7ede51775656dbbbbcab22ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMToyODozMlrOGPrMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMToyODozMlrOGPrMgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4OTUzOA==", "bodyText": "should not it be thread safe?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419089538", "createdAt": "2020-05-03T11:28:32Z", "author": {"login": "uarlouski"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637386cf11b785cd7ede51775656dbbbbcab22ac"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3524114944ba6374fe40125b50981134ff405047", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/3524114944ba6374fe40125b50981134ff405047", "committedDate": "2020-05-04T21:10:20Z", "message": "Create inner class to make it thread-safe"}, "afterCommit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/735474e3a36d5fc5728e0247111755f36e631ece", "committedDate": "2020-05-05T05:38:24Z", "message": "Create inner class to make it thread-safe"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTE0ODU3", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-405514857", "createdAt": "2020-05-05T06:16:04Z", "commit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjoxNjowNFrOGQbs7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjozODozM1rOGQcOmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4NDI3MA==", "bodyText": "just org.jbehave.core.steps.ParameterControls.createDelimitedName(String) ?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419884270", "createdAt": "2020-05-05T06:16:04Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private Map<String, String> resolvedValues;\n+        private final Pattern placeholderPattern;\n+\n+        private SelfReferencesResolver()\n+        {\n+            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+        }\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues = new HashMap<>();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n+            List<String> result = new ArrayList<>();\n+            for (int i = 0; i < range; i++)\n+            {\n+                String key = header.get(i);\n+                resolveValue(key);\n+                result.add(resolvedValues.get(key));\n+            }\n+            return result;\n+        }\n+\n+        private void resolveValue(String key)\n+        {\n+            if (alreadyResolved(key))\n+            {\n+                return;\n+            }\n+            String valueToResolve = valuesToResolve.get(key);\n+            boolean toBeResolved = valueToResolve != null;\n+            if (!toBeResolved)\n+            {\n+                putPlaceholderWithoutResolving(key);\n+                return;\n+            }\n+            resolvedValues.put(key, valueToResolve);\n+            resolveValue(key, valueToResolve);\n+        }\n+\n+        private void resolveValue(String key, String valueToResolve)\n+        {\n+            String result = valueToResolve;\n+            Matcher matcher = placeholderPattern.matcher(result);\n+            while (matcher.find())\n+            {\n+                String placeholder = matcher.group(1);\n+                if (!placeholder.equals(key))\n+                {\n+                    resolveValue(placeholder);\n+                    result = parameterControls\n+                            .replaceAllDelimitedNames(result, placeholder, resolvedValues.get(placeholder));\n+                }\n+            }\n+            resolvedValues.put(key, result);\n+        }\n+\n+        private void putPlaceholderWithoutResolving(String key)\n+        {\n+            resolvedValues.put(key, addDelimiters(key));\n+        }\n+\n+        private boolean alreadyResolved(String key)\n+        {\n+            return resolvedValues.containsKey(key);\n+        }\n+\n+        private String addDelimiters(String s)\n+        {\n+            return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4NjA1MA==", "bodyText": "also this bean should be injected in configuration", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419886050", "createdAt": "2020-05-05T06:21:14Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/resources/org/vividus/bdd/spring.xml", "diffHunk": "@@ -115,4 +115,6 @@\n        <property name=\"examplesTableFactory\" value=\"#{@'configuration'.getExamplesTableFactory()}\" />\n     </bean>\n \n+    <bean class=\"org.jbehave.core.steps.ParameterControls\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MjQ5NA==", "bodyText": "this should be converted to a final field of transformer to avoid pattern re-compilation for each table row", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419892494", "createdAt": "2020-05-05T06:37:36Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private Map<String, String> resolvedValues;\n+        private final Pattern placeholderPattern;\n+\n+        private SelfReferencesResolver()\n+        {\n+            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5Mjg4OA==", "bodyText": "init this field at its declaration", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r419892888", "createdAt": "2020-05-05T06:38:33Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private Map<String, String> resolvedValues;\n+        private final Pattern placeholderPattern;\n+\n+        private SelfReferencesResolver()\n+        {\n+            placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+        }\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "735474e3a36d5fc5728e0247111755f36e631ece", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/735474e3a36d5fc5728e0247111755f36e631ece", "committedDate": "2020-05-05T05:38:24Z", "message": "Create inner class to make it thread-safe"}, "afterCommit": {"oid": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/1ae8f2597425af6778a78190a3ddf11cc422dca3", "committedDate": "2020-05-05T16:23:41Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTU5NjQ2", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-405959646", "createdAt": "2020-05-05T16:33:03Z", "commit": {"oid": "1ae8f2597425af6778a78190a3ddf11cc422dca3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozMzowM1rOGQxvhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozNDo1MVrOGQx1Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NTM4MQ==", "bodyText": "it should be placed between before  useParameterConverters since ParameterConvertersDecorator constructor uses ParameterControls", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420245381", "createdAt": "2020-05-05T16:33:03Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/spring/ExtendedConfiguration.java", "diffHunk": "@@ -71,6 +73,7 @@ public void init() throws IOException\n         customTableTransformers.forEach(transformers::useTransformer);\n         useStepMonitor(new DelegatingStepMonitor(stepMonitors));\n         useStoryControls(storyControls);\n+        useParameterControls(parameterControls);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae8f2597425af6778a78190a3ddf11cc422dca3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0Njc5NQ==", "bodyText": "that's still not optimal, every new instance of SelfReferencesResolver will lead to regex compilation, so it should be a field of transformer class ResolvingSelfReferencesEagerlyTransformer", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420246795", "createdAt": "2020-05-05T16:34:51Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+        private final Pattern placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae8f2597425af6778a78190a3ddf11cc422dca3"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ae8f2597425af6778a78190a3ddf11cc422dca3", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/1ae8f2597425af6778a78190a3ddf11cc422dca3", "committedDate": "2020-05-05T16:23:41Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}, "afterCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/384fdefba1ff157435ee7ef0f20c2c6a080755e6", "committedDate": "2020-05-05T17:05:34Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDAyNjIw", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-406002620", "createdAt": "2020-05-05T17:26:34Z", "commit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzM1MjYz", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-406335263", "createdAt": "2020-05-06T06:37:24Z", "commit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjozNzoyNFrOGRFuUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzowMDo1MFrOGRGRIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3Mjc1NQ==", "bodyText": "Does it reflect JBehave's behavior for not aligned tables?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420572755", "createdAt": "2020-05-06T06:37:24Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NTM2OA==", "bodyText": "unresolvedRow ?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420575368", "createdAt": "2020-05-06T06:44:31Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NTUyMA==", "bodyText": "resolvedRow", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420575520", "createdAt": "2020-05-06T06:44:56Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NjUxOA==", "bodyText": "so this is one parametrized test, perfectly aligned and easier to read?\n{ \"|A|B|C|\\n|a||c|\", \"|A|B|C|\\n|a|a|c|\" ...}", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420576518", "createdAt": "2020-05-06T06:47:43Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformerTests.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Properties;\n+\n+import org.jbehave.core.model.ExamplesTable;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.junit.jupiter.api.Test;\n+\n+class ResolvingSelfReferencesEagerlyTransformerTests\n+{\n+    private final ResolvingSelfReferencesEagerlyTransformer transformer = new ResolvingSelfReferencesEagerlyTransformer(\n+            new ParameterControls());\n+\n+    @Test\n+    void shouldTransform()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODUwOA==", "bodyText": "java.util.Map.computeIfAbsent ?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420578508", "createdAt": "2020-05-06T06:52:59Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n+            List<String> result = new ArrayList<>();\n+            for (int i = 0; i < range; i++)\n+            {\n+                String key = header.get(i);\n+                resolveValue(key);\n+                result.add(resolvedValues.get(key));\n+            }\n+            return result;\n+        }\n+\n+        private void resolveValue(String key)\n+        {\n+            if (alreadyResolved(key))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3OTM5NA==", "bodyText": "This is unnecessary double !\nboolean notResolve = valueToResolve == null;\nif (notResolve)\n{\n    putPlaceholderWithoutResolving(key);\n    return;\n}", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420579394", "createdAt": "2020-05-06T06:55:11Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();\n+            int range = Integer.min(row.size(), header.size());\n+            valuesToResolve = IntStream.range(0, range).boxed().collect(Collectors.toMap(header::get, row::get));\n+            List<String> result = new ArrayList<>();\n+            for (int i = 0; i < range; i++)\n+            {\n+                String key = header.get(i);\n+                resolveValue(key);\n+                result.add(resolvedValues.get(key));\n+            }\n+            return result;\n+        }\n+\n+        private void resolveValue(String key)\n+        {\n+            if (alreadyResolved(key))\n+            {\n+                return;\n+            }\n+            String valueToResolve = valuesToResolve.get(key);\n+            boolean toBeResolved = valueToResolve != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4MTM0Mg==", "bodyText": "Please cover different cases, like in unit tests?\nasda< column1 >asdasd etc", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420581342", "createdAt": "2020-05-06T07:00:04Z", "author": {"login": "ikalinin1"}, "path": "vividus-tests/src/main/resources/story/integration/TableTransformers.story", "diffHunk": "@@ -85,3 +85,12 @@ Then `${table[0].name}` is not equal to `${table[0].name}`\n When I initialize story variable `table_resolved` with values:\n /data/with-eagerly-transformer.table\n Then `${table_resolved[0].name}` is equal to `${table_resolved[0].name}`\n+\n+Scenario: Verify RESOLVING_SELF_REFERENCES_EAGERLY transformer\n+Then `<column1>` is equal to `A`\n+Then `<column2>` is equal to `A`\n+Then `<column3>` is equal to `A`\n+Examples:\n+{transformer=RESOLVING_SELF_REFERENCES_EAGERLY}\n+|column1|column2  |column3  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4MTY2Ng==", "bodyText": "|column1|column2  |column3  |column 4|\n|A      |||", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420581666", "createdAt": "2020-05-06T07:00:50Z", "author": {"login": "ikalinin1"}, "path": "vividus-tests/src/main/resources/story/integration/TableTransformers.story", "diffHunk": "@@ -85,3 +85,12 @@ Then `${table[0].name}` is not equal to `${table[0].name}`\n When I initialize story variable `table_resolved` with values:\n /data/with-eagerly-transformer.table\n Then `${table_resolved[0].name}` is equal to `${table_resolved[0].name}`\n+\n+Scenario: Verify RESOLVING_SELF_REFERENCES_EAGERLY transformer\n+Then `<column1>` is equal to `A`\n+Then `<column2>` is equal to `A`\n+Then `<column3>` is equal to `A`\n+Examples:\n+{transformer=RESOLVING_SELF_REFERENCES_EAGERLY}\n+|column1|column2  |column3  |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4MTM0Mg=="}, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzY2MDE1", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-406366015", "createdAt": "2020-05-06T07:35:46Z", "commit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozNTo0NlrOGRHOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMDowNjo0OFrOGRML1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NzQyMA==", "bodyText": "instead of clear create a new one with the expected size?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420597420", "createdAt": "2020-05-06T07:35:46Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))\n+                .collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private String addDelimiters(String s)\n+    {\n+        return parameterControls.nameDelimiterLeft() + s + parameterControls.nameDelimiterRight();\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private Map<String, String> valuesToResolve;\n+        private final Map<String, String> resolvedValues = new HashMap<>();\n+\n+        private List<String> resolveRow(List<String> row, List<String> header)\n+        {\n+            resolvedValues.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3ODYxNQ==", "bodyText": "no need to pass header always? The header is the same for every single row, pass it via constructor", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r420678615", "createdAt": "2020-05-06T10:06:48Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(addDelimiters(\"(.*?)\"));\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        SelfReferencesResolver resolver = new SelfReferencesResolver();\n+        List<List<String>> resolvedRows = inputRows.stream().map(dataRow -> resolver.resolveRow(dataRow, header))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "384fdefba1ff157435ee7ef0f20c2c6a080755e6", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/384fdefba1ff157435ee7ef0f20c2c6a080755e6", "committedDate": "2020-05-05T17:05:34Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}, "afterCommit": {"oid": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/e1249f48dbe2daca8ed49c41301b97c0dad604b8", "committedDate": "2020-05-07T13:45:43Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODYwODYy", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-407860862", "createdAt": "2020-05-07T21:47:13Z", "commit": {"oid": "e1249f48dbe2daca8ed49c41301b97c0dad604b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1249f48dbe2daca8ed49c41301b97c0dad604b8", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/e1249f48dbe2daca8ed49c41301b97c0dad604b8", "committedDate": "2020-05-07T13:45:43Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}, "afterCommit": {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "committedDate": "2020-05-08T10:37:10Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTczNTQ4", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-408173548", "createdAt": "2020-05-08T11:26:23Z", "commit": {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTgwOTAz", "url": "https://github.com/vividus-framework/vividus/pull/522#pullrequestreview-408180903", "createdAt": "2020-05-08T11:42:34Z", "commit": {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMTo0MjozNVrOGSiv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMTo0MzowMlrOGSiwlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5Njg1Mg==", "bodyText": "private?", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r422096852", "createdAt": "2020-05-08T11:42:35Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(\n+                parameterControls.nameDelimiterLeft() + \"(.*?)\" + parameterControls.nameDelimiterRight());\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        List<List<String>> resolvedRows = new SelfReferencesResolver(header).resolveRows(inputRows);\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private final List<String> header;\n+\n+        SelfReferencesResolver(List<String> header)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NzA0Nw==", "bodyText": "no reason to calculate header for each row", "url": "https://github.com/vividus-framework/vividus/pull/522#discussion_r422097047", "createdAt": "2020-05-08T11:43:02Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/ResolvingSelfReferencesEagerlyTransformer.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.transformer;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Named;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.jbehave.core.model.ExamplesTable.ExamplesTableProperties;\n+import org.jbehave.core.model.TableParsers;\n+import org.jbehave.core.steps.ParameterControls;\n+import org.vividus.bdd.util.ExamplesTableProcessor;\n+\n+@Named(\"RESOLVING_SELF_REFERENCES_EAGERLY\")\n+public class ResolvingSelfReferencesEagerlyTransformer implements ExtendedTableTransformer\n+{\n+    private final ParameterControls parameterControls;\n+    private final Pattern placeholderPattern;\n+\n+    public ResolvingSelfReferencesEagerlyTransformer(ParameterControls parameterControls)\n+    {\n+        this.parameterControls = parameterControls;\n+        placeholderPattern = Pattern.compile(\n+                parameterControls.nameDelimiterLeft() + \"(.*?)\" + parameterControls.nameDelimiterRight());\n+    }\n+\n+    @Override\n+    public String transform(String tableAsString, TableParsers tableParsers, ExamplesTableProperties properties)\n+    {\n+        List<String> tableAsRows = ExamplesTableProcessor.parseRows(tableAsString);\n+        List<String> header = tableParsers.parseRow(tableAsRows.get(0), true, properties);\n+        List<List<String>> inputRows = ExamplesTableProcessor.parseDataRows(tableAsRows, tableParsers, properties);\n+        List<List<String>> resolvedRows = new SelfReferencesResolver(header).resolveRows(inputRows);\n+        return ExamplesTableProcessor.buildExamplesTable(header, resolvedRows, properties, true);\n+    }\n+\n+    private final class SelfReferencesResolver\n+    {\n+        private final List<String> header;\n+\n+        SelfReferencesResolver(List<String> header)\n+        {\n+            this.header = header;\n+        }\n+\n+        List<List<String>> resolveRows(List<List<String>> rows)\n+        {\n+            return rows.stream().map(this::resolveRow).collect(Collectors.toList());\n+        }\n+\n+        private List<String> resolveRow(List<String> row)\n+        {\n+            int range = Integer.min(row.size(), header.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/e636d3c7e8f8bc9936c1dc0067f53d6aabfb2113", "committedDate": "2020-05-08T10:37:10Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}, "afterCommit": {"oid": "74447e91a00240fb190a3af466495878dbbde2ee", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/74447e91a00240fb190a3af466495878dbbde2ee", "committedDate": "2020-05-08T12:05:11Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6768261013cceb2baf7fe8907ef95edbf871fcf", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/a6768261013cceb2baf7fe8907ef95edbf871fcf", "committedDate": "2020-05-08T12:51:04Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74447e91a00240fb190a3af466495878dbbde2ee", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/74447e91a00240fb190a3af466495878dbbde2ee", "committedDate": "2020-05-08T12:05:11Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}, "afterCommit": {"oid": "a6768261013cceb2baf7fe8907ef95edbf871fcf", "author": {"user": {"login": "Yauhenda", "name": "Yauhen Dashkevich"}}, "url": "https://github.com/vividus-framework/vividus/commit/a6768261013cceb2baf7fe8907ef95edbf871fcf", "committedDate": "2020-05-08T12:51:04Z", "message": "Add RESOLVING_SELF_REFERENCES_EAGERLY table transformer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 309, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}