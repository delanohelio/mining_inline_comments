{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTA4NzA2", "number": 665, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyMzo1MlrOEEtQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NTozMFrOEFA6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzcxMjExOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyMzo1M1rOGifwPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyMzo1M1rOGifwPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNTAyMQ==", "bodyText": "since writeExecutorInfo creates ObjectMapper as well and ObjectMapper is thread-safe, I propose\n\nto create a new field: ObjectMapper obejctMapper\nto use it in both writeCategoriesInfo and writeExecutorInfo", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r438825021", "createdAt": "2020-06-11T14:23:53Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,6 +116,20 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n+    private void writeCategoriesInfo() throws IOException\n+    {\n+        List<AllureCategory> categories = Arrays.asList(\n+                new AllureCategory(\"Test defects\", Collections.singletonList(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", Collections.singletonList(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", Collections.singletonList(Status.UNKNOWN)));\n+\n+        try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(\"categories.json\")))\n+        {\n+            ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e42d46369f57b6489accdebf023b4f38bce25f0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzcxOTIyOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNTozNlrOGif07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0NTowM1rOGisImg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjIyMg==", "bodyText": "this logic of writing the data to the file is very similar to the logic from writeExecutorInfo so I propose to move the common part to a new method and reuse it", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r438826222", "createdAt": "2020-06-11T14:25:36Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,6 +116,20 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n+    private void writeCategoriesInfo() throws IOException\n+    {\n+        List<AllureCategory> categories = Arrays.asList(\n+                new AllureCategory(\"Test defects\", Collections.singletonList(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", Collections.singletonList(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", Collections.singletonList(Status.UNKNOWN)));\n+\n+        try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(\"categories.json\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e42d46369f57b6489accdebf023b4f38bce25f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMjEyMQ==", "bodyText": "Then we don't need to create ObjectMapper obejctMapper field?", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r439002121", "createdAt": "2020-06-11T18:54:11Z", "author": {"login": "ngrudnitsky"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,6 +116,20 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n+    private void writeCategoriesInfo() throws IOException\n+    {\n+        List<AllureCategory> categories = Arrays.asList(\n+                new AllureCategory(\"Test defects\", Collections.singletonList(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", Collections.singletonList(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", Collections.singletonList(Status.UNKNOWN)));\n+\n+        try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(\"categories.json\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjIyMg=="}, "originalCommit": {"oid": "3e42d46369f57b6489accdebf023b4f38bce25f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNzg2Ng==", "bodyText": "you can create ObjectMapper field or variable, the key is to create it once and reuse (do not create it in the method invoked twice)", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r439027866", "createdAt": "2020-06-11T19:45:03Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,6 +116,20 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n+    private void writeCategoriesInfo() throws IOException\n+    {\n+        List<AllureCategory> categories = Arrays.asList(\n+                new AllureCategory(\"Test defects\", Collections.singletonList(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", Collections.singletonList(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", Collections.singletonList(Status.UNKNOWN)));\n+\n+        try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(\"categories.json\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjIyMg=="}, "originalCommit": {"oid": "3e42d46369f57b6489accdebf023b4f38bce25f0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzcyMDM1OnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNTo1MlrOGif1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNTo1MlrOGif1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjQyOQ==", "bodyText": "Collections.singletonList -> List.of ?", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r438826429", "createdAt": "2020-06-11T14:25:52Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,6 +116,20 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n+    private void writeCategoriesInfo() throws IOException\n+    {\n+        List<AllureCategory> categories = Arrays.asList(\n+                new AllureCategory(\"Test defects\", Collections.singletonList(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", Collections.singletonList(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", Collections.singletonList(Status.UNKNOWN)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e42d46369f57b6489accdebf023b4f38bce25f0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzcyMTQwOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNjowNlrOGif2cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNjowNlrOGif2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjYwOQ==", "bodyText": "Arrays.asList -> List.of ?", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r438826609", "createdAt": "2020-06-11T14:26:06Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,6 +116,20 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n+    private void writeCategoriesInfo() throws IOException\n+    {\n+        List<AllureCategory> categories = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e42d46369f57b6489accdebf023b4f38bce25f0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDk5MTY2OnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowMzowNFrOGisqJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowMzowNFrOGisqJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNjQ1Mg==", "bodyText": "private void createJsonFileInResultsDirectory(ObjectMapper objectMapper, String fileName, Object content) throws IOException\n{\n    try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(fileName)))\n    {\n        objectMapper.writeValue(writer, content);\n    }\n}", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r439036452", "createdAt": "2020-06-11T20:03:04Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,16 +115,29 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n-    private void writeExecutorInfo() throws IOException\n+    private void writeCategoriesInfo() throws IOException\n     {\n-        ExecutorInfo executorInfo = propertyMapper.readValue(\"allure.executor.\", ExecutorInfo.class);\n+        List<AllureCategory> categories = List.of(\n+                new AllureCategory(\"Test defects\", List.of(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", List.of(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", List.of(Status.UNKNOWN)));\n+        writeJsonToFile(resultsDirectory.toPath().resolve(\"categories.json\"), categories);\n+    }\n \n-        try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(\"executor.json\")))\n+    private void writeJsonToFile(Path path, Object value) throws IOException\n+    {\n+        try (BufferedWriter writer = Files.newBufferedWriter(path))\n         {\n-            new ObjectMapper().writeValue(writer, executorInfo);\n+            new ObjectMapper().writeValue(writer, value);\n         }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a53ed354096a00cd8803c294f31614a9da6ac4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY5NDkwOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNzo1N1rOGi9IFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToxNzo1N1rOGi9IFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwNjI2Mg==", "bodyText": "as you decided to make ObjectMapper a field of class, there is no reason to pass it as input parameter to the method of the same class", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r439306262", "createdAt": "2020-06-12T09:17:57Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,16 +115,30 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n-    private void writeExecutorInfo() throws IOException\n+    private void writeCategoriesInfo() throws IOException\n     {\n-        ExecutorInfo executorInfo = propertyMapper.readValue(\"allure.executor.\", ExecutorInfo.class);\n+        List<AllureCategory> categories = List.of(\n+                new AllureCategory(\"Test defects\", List.of(Status.BROKEN)),\n+                new AllureCategory(\"Product defects\", List.of(Status.FAILED)),\n+                new AllureCategory(\"Known issue\", List.of(Status.UNKNOWN)));\n+        createJsonFileInResultsDirectory(objectMapper, \"categories.json\", categories);\n+    }\n \n-        try (BufferedWriter writer = Files.newBufferedWriter(resultsDirectory.toPath().resolve(\"executor.json\")))\n+    private void createJsonFileInResultsDirectory(ObjectMapper objectMapper, String fileName, Object content)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72f84e3ac28bcbf37f8ab527be8ad922c5a8839"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkzMjUwOnYy", "diffSide": "RIGHT", "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NTozMFrOGi_gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NTozMFrOGi_gvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTM0Mw==", "bodyText": "I believe you need to add validations to unit tests to be sure, that categories.json is generated", "url": "https://github.com/vividus-framework/vividus/pull/665#discussion_r439345343", "createdAt": "2020-06-12T10:45:30Z", "author": {"login": "valfirst"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/AllureReportGenerator.java", "diffHunk": "@@ -111,16 +115,29 @@ private void generateReport()\n         LOGGER.info(\"Allure report is successfully generated at: {}\", reportDirectory.getAbsolutePath());\n     }\n \n-    private void writeExecutorInfo() throws IOException\n+    private void writeCategoriesInfo() throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74a9d776fe980d68bfe1cd823e603c3d35cf046"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 361, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}