{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Mjg1ODUz", "number": 1233, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTozOTo0NlrOFE49pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowMDo0MFrOFFcwpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjcxOTEwOnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTozOTo0NlrOIFHy_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDowODozMFrOIFJAjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTUzNQ==", "bodyText": "MetaBasedStoryExecutionPriority", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542241535", "createdAt": "2020-12-14T09:39:46Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f73936d33d40f11f760ec80ebb6ff0c3d443b13"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MTM4OA==", "bodyText": "renamed, but here is a risk that we will want to add some more ordering strategies and will have to rename this class to something more generic leading to difficulties in support", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542261388", "createdAt": "2020-12-14T10:08:30Z", "author": {"login": "uarlouski"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTUzNQ=="}, "originalCommit": {"oid": "8f73936d33d40f11f760ec80ebb6ff0c3d443b13"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjcyMTM0OnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo0MDoxOFrOIFH0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo0MDoxOFrOIFH0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTg4MA==", "bodyText": "public static Comparator<Story> byNumericMetaValue(String metaName)", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542241880", "createdAt": "2020-12-14T09:40:18Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder\n+{\n+    private StoryOrder()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n+     * @param key key to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericValue(String key)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f73936d33d40f11f760ec80ebb6ff0c3d443b13"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjcyNzM1OnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo0MTozMlrOIFH3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo0MTozMlrOIFH3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0Mjc2NA==", "bodyText": "I don't think an empty value should be considered as valid", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542242764", "createdAt": "2020-12-14T09:41:32Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/order/StoryOrder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.order;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factory methods for story comparators\n+ */\n+public final class StoryOrder\n+{\n+    private StoryOrder()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric value extracted by the key in descending order\n+     * @param key key to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericValue(String key)\n+    {\n+        isTrue(StringUtils.isNotBlank(key), \"The key must be a non-zero length string\");\n+        return Comparator.comparing(story -> getNumericValue(story, key), Comparator.reverseOrder());\n+    }\n+\n+    private static int getNumericValue(Story story, String key)\n+    {\n+        String priorityAsStrinig = story.getMeta().getProperty(key);\n+        if (priorityAsStrinig.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f6e9e0301c8c8600aca542c85d1b33a2084345"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzI1MjMxOnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTo0MDozMlrOIFMj-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTo0MDozMlrOIFMj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxOTYxMA==", "bodyText": "isNotBlank  also checks for whitespace-only string", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r542319610", "createdAt": "2020-12-14T11:40:32Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.priority;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factories for story comparators\n+ */\n+public final class MetaBasedStoryExecutionPriority\n+{\n+    private MetaBasedStoryExecutionPriority()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n+    {\n+        isTrue(StringUtils.isNotBlank(metaName), \"The meta name must be a non-zero length string\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a68130d449d450b3b224c75b2b7aa5b47268197"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjU4NDA3OnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowMDo0MFrOIF9sUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowNjozMFrOIF95JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNDU2MA==", "bodyText": "StringUtils.isNotEmpty ?", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r543124560", "createdAt": "2020-12-15T08:00:40Z", "author": {"login": "ikalinin1"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.priority;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factories for story comparators\n+ */\n+public final class MetaBasedStoryExecutionPriority\n+{\n+    private MetaBasedStoryExecutionPriority()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n+    {\n+        isTrue(metaName.matches(\"[^ ]+\"), \"The meta name must be a non-zero length string without spaces\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23bb6ae31397c4912ecce5891a25401af31502fd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNzg0NQ==", "bodyText": "values with spaces are not allowed", "url": "https://github.com/vividus-framework/vividus/pull/1233#discussion_r543127845", "createdAt": "2020-12-15T08:06:30Z", "author": {"login": "uarlouski"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/priority/MetaBasedStoryExecutionPriority.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.priority;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jbehave.core.model.Meta;\n+import org.jbehave.core.model.Story;\n+\n+/**\n+ * Methods of this class are expected to be used in test projects as static factories for story comparators\n+ */\n+public final class MetaBasedStoryExecutionPriority\n+{\n+    private MetaBasedStoryExecutionPriority()\n+    {\n+    }\n+\n+    /**\n+     * Create a comparator that sorts stories by a numeric meta value extracted by the meta name in descending order\n+     * @param metaName meta name to extract a numeric meta value, must not be a blank\n+     * @return comparator\n+     */\n+    public static Comparator<Story> byNumericMetaValue(String metaName)\n+    {\n+        isTrue(metaName.matches(\"[^ ]+\"), \"The meta name must be a non-zero length string without spaces\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNDU2MA=="}, "originalCommit": {"oid": "23bb6ae31397c4912ecce5891a25401af31502fd"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4985, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}