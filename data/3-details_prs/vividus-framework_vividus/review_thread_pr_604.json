{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDA3MDE4", "number": 604, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMDoxMTo1OFrOD_H7EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMDoyNDo0MVrOD_H9Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTE2Njg5OnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMDoxMTo1OFrOGZoo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjowMjo0NlrOGZpCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMzQxMw==", "bodyText": "why not ExamplesTableProcessor.buildExamplesTable(filteredColumns, result, properties, true, true); ?", "url": "https://github.com/vividus-framework/vividus/pull/604#discussion_r429533413", "createdAt": "2020-05-23T10:11:58Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java", "diffHunk": "@@ -57,18 +52,13 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         isTrue(!(byMaxColumns != null && byColumnNames != null),\n                 \"Conflicting properties declaration found: '%s' and '%s'\",\n                 BY_MAX_COLUMNS_PROPERTY, BY_COLUMNS_NAMES_PROPERTY);\n-        ExamplesTable examplesTable = examplesTableFactory.get().createExamplesTable(tableAsString);\n-\n-        List<String> filteredColumns = getFilteredHeaders(byMaxColumns, byColumnNames, examplesTable.getHeaders());\n-        List<Map<String, String>> result = filterByHeaders(filteredColumns, getFilteredRows(byMaxRows, examplesTable));\n+        TableRows tableRows = tableParsers.parseRows(tableAsString, properties);\n \n-        List<List<String>> resultRows = result.stream()\n-                .map(LinkedHashMap::new)\n-                .map(Map::values)\n-                .map(ArrayList::new)\n-                .collect(Collectors.toList());\n+        List<String> filteredColumns = getFilteredHeaders(byMaxColumns, byColumnNames, tableRows.getHeaders());\n+        List<Map<String, String>> result = filterByHeaders(filteredColumns,\n+                getFilteredRows(byMaxRows, tableRows.getRows()));\n \n-        return ExamplesTableProcessor.buildExamplesTable(filteredColumns, resultRows, properties, true, true);\n+        return ExamplesTableProcessor.buildExamplesTable(filteredColumns, result, properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53ae5db968b43631f19c6471c079b6c0c4e0029"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzOTk3MA==", "bodyText": "are you suggesting to refactor all the existing classes that rely on List List String?", "url": "https://github.com/vividus-framework/vividus/pull/604#discussion_r429539970", "createdAt": "2020-05-23T12:02:46Z", "author": {"login": "uarlouski"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/FilteringTableTransformer.java", "diffHunk": "@@ -57,18 +52,13 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         isTrue(!(byMaxColumns != null && byColumnNames != null),\n                 \"Conflicting properties declaration found: '%s' and '%s'\",\n                 BY_MAX_COLUMNS_PROPERTY, BY_COLUMNS_NAMES_PROPERTY);\n-        ExamplesTable examplesTable = examplesTableFactory.get().createExamplesTable(tableAsString);\n-\n-        List<String> filteredColumns = getFilteredHeaders(byMaxColumns, byColumnNames, examplesTable.getHeaders());\n-        List<Map<String, String>> result = filterByHeaders(filteredColumns, getFilteredRows(byMaxRows, examplesTable));\n+        TableRows tableRows = tableParsers.parseRows(tableAsString, properties);\n \n-        List<List<String>> resultRows = result.stream()\n-                .map(LinkedHashMap::new)\n-                .map(Map::values)\n-                .map(ArrayList::new)\n-                .collect(Collectors.toList());\n+        List<String> filteredColumns = getFilteredHeaders(byMaxColumns, byColumnNames, tableRows.getHeaders());\n+        List<Map<String, String>> result = filterByHeaders(filteredColumns,\n+                getFilteredRows(byMaxRows, tableRows.getRows()));\n \n-        return ExamplesTableProcessor.buildExamplesTable(filteredColumns, resultRows, properties, true, true);\n+        return ExamplesTableProcessor.buildExamplesTable(filteredColumns, result, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMzQxMw=="}, "originalCommit": {"oid": "f53ae5db968b43631f19c6471c079b6c0c4e0029"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTE3MjUxOnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/SortingTableTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMDoyNDo0MVrOGZor6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMTo1NDo1NVrOGZpAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzNDE4Ng==", "bodyText": "what is the reason of this change?", "url": "https://github.com/vividus-framework/vividus/pull/604#discussion_r429534186", "createdAt": "2020-05-23T10:24:41Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/SortingTableTransformer.java", "diffHunk": "@@ -34,28 +36,28 @@\n     @Override\n     public String transform(String tableAsString, TableParsers tableParsers, TableProperties properties)\n     {\n+        TableRows tableRows = tableParsers.parseRows(tableAsString, properties);\n         String byColumns = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, \"byColumns\");\n-        List<String> rowsToSort = ExamplesTableProcessor.parseRows(tableAsString);\n-        String header = rowsToSort.get(0);\n-        List<String> headerValues = tableParsers.parseRow(header, true, properties);\n-        List<Integer> columnsToCompare = Stream.of(StringUtils.split(byColumns, '|'))\n+        List<String> headerValues = tableRows.getHeaders();\n+        List<String> columnsToCompare = Stream.of(StringUtils.split(byColumns, '|'))\n                 .map(String::trim)\n-                .map(headerValues::indexOf)\n-                .filter(i -> i > -1)\n                 .collect(Collectors.toList());\n-        List<List<String>> rows = ExamplesTableProcessor.parseDataRows(rowsToSort, tableParsers, properties).stream()\n+        List<Map<String, String>> rows = tableRows.getRows().stream()\n                 .sorted((r1, r2) ->\n                 {\n                     int result = 0;\n-                    Iterator<Integer> indexIterator = columnsToCompare.iterator();\n-                    while (result == 0 && indexIterator.hasNext())\n+                    Iterator<String> columnIterator = columnsToCompare.iterator();\n+                    while (result == 0 && columnIterator.hasNext())\n                     {\n-                        int index = indexIterator.next();\n-                        result = r1.get(index).compareTo(r2.get(index));\n+                        String column = columnIterator.next();\n+                        if (headerValues.contains(column))\n+                        {\n+                            result = r1.get(column).compareTo(r2.get(column));\n+                        }\n                     }\n                     return result;\n                 })\n                 .collect(Collectors.toList());\n-        return ExamplesTableProcessor.buildExamplesTable(headerValues, rows, properties, true);\n+        return ExamplesTableProcessor.buildExamplesTable(headerValues, rows, properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53ae5db968b43631f19c6471c079b6c0c4e0029"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzOTQwOQ==", "bodyText": "As to transformers, we know that TableProperties object contains actual separators and other table properties so there is no need in additional separator checks", "url": "https://github.com/vividus-framework/vividus/pull/604#discussion_r429539409", "createdAt": "2020-05-23T11:54:55Z", "author": {"login": "uarlouski"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/transformer/SortingTableTransformer.java", "diffHunk": "@@ -34,28 +36,28 @@\n     @Override\n     public String transform(String tableAsString, TableParsers tableParsers, TableProperties properties)\n     {\n+        TableRows tableRows = tableParsers.parseRows(tableAsString, properties);\n         String byColumns = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, \"byColumns\");\n-        List<String> rowsToSort = ExamplesTableProcessor.parseRows(tableAsString);\n-        String header = rowsToSort.get(0);\n-        List<String> headerValues = tableParsers.parseRow(header, true, properties);\n-        List<Integer> columnsToCompare = Stream.of(StringUtils.split(byColumns, '|'))\n+        List<String> headerValues = tableRows.getHeaders();\n+        List<String> columnsToCompare = Stream.of(StringUtils.split(byColumns, '|'))\n                 .map(String::trim)\n-                .map(headerValues::indexOf)\n-                .filter(i -> i > -1)\n                 .collect(Collectors.toList());\n-        List<List<String>> rows = ExamplesTableProcessor.parseDataRows(rowsToSort, tableParsers, properties).stream()\n+        List<Map<String, String>> rows = tableRows.getRows().stream()\n                 .sorted((r1, r2) ->\n                 {\n                     int result = 0;\n-                    Iterator<Integer> indexIterator = columnsToCompare.iterator();\n-                    while (result == 0 && indexIterator.hasNext())\n+                    Iterator<String> columnIterator = columnsToCompare.iterator();\n+                    while (result == 0 && columnIterator.hasNext())\n                     {\n-                        int index = indexIterator.next();\n-                        result = r1.get(index).compareTo(r2.get(index));\n+                        String column = columnIterator.next();\n+                        if (headerValues.contains(column))\n+                        {\n+                            result = r1.get(column).compareTo(r2.get(column));\n+                        }\n                     }\n                     return result;\n                 })\n                 .collect(Collectors.toList());\n-        return ExamplesTableProcessor.buildExamplesTable(headerValues, rows, properties, true);\n+        return ExamplesTableProcessor.buildExamplesTable(headerValues, rows, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzNDE4Ng=="}, "originalCommit": {"oid": "f53ae5db968b43631f19c6471c079b6c0c4e0029"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 337, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}