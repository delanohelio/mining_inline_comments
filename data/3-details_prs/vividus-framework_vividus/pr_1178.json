{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTA3NjY0", "number": 1178, "title": "[plugin-browserstack] Add BrowserStack local support", "bodyText": "", "createdAt": "2020-11-26T14:21:57Z", "url": "https://github.com/vividus-framework/vividus/pull/1178", "merged": true, "mergeCommit": {"oid": "0ec85db9f5620e238134e6c3096846e58d11a7d8"}, "closed": true, "closedAt": "2020-12-03T12:09:06Z", "author": {"login": "uarlouski"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgTyaGABqjQwNDI3NzQyNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdihuNYAFqTU0Mzg3MzcxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a532ca467d1f2a28bca41e1e46603a12ea3331fc", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a532ca467d1f2a28bca41e1e46603a12ea3331fc", "committedDate": "2020-11-26T14:21:19Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/54b6556d6c1592571b8cc5f03cdd4e034adc1799", "committedDate": "2020-11-26T14:25:57Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzU2MzE4", "url": "https://github.com/vividus-framework/vividus/pull/1178#pullrequestreview-539356318", "createdAt": "2020-11-26T14:23:01Z", "commit": {"oid": "a532ca467d1f2a28bca41e1e46603a12ea3331fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoyMzowMlrOH6dcEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDo0NjoyOVrOH6eWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MTc3OA==", "bodyText": "tunnellingEnabled", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531061778", "createdAt": "2020-11-26T14:23:02Z", "author": {"login": "valfirst"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurer.java", "diffHunk": "@@ -19,18 +19,31 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n \n+import com.google.common.eventbus.Subscribe;\n+\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.remote.CapabilityType;\n import org.openqa.selenium.remote.DesiredCapabilities;\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.bdd.model.RunningStory;\n+import org.vividus.selenium.event.WebDriverQuitEvent;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.selenium.tunnel.TunnelOptions;\n \n-public abstract class AbstractDesiredCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n+public abstract class AbstractDesiredCapabilitiesConfigurer<T extends TunnelOptions>\n+        implements DesiredCapabilitiesConfigurer\n {\n     private final IBddRunContext bddRunContext;\n+    private final TunnelManager<T> tunnelManager;\n+\n+    private boolean tunnelEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a532ca467d1f2a28bca41e1e46603a12ea3331fc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MjcwMQ==", "bodyText": "stopTunnel", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531062701", "createdAt": "2020-11-26T14:24:29Z", "author": {"login": "valfirst"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurer.java", "diffHunk": "@@ -51,4 +64,35 @@ protected void configureTestName(DesiredCapabilities desiredCapabilities, String\n                 .map(RunningStory::getName)\n                 .ifPresent(name -> putNestedCapability(desiredCapabilities, parentKey, testNameKey, name));\n     }\n+\n+    protected void configureTunnel(DesiredCapabilities desiredCapabilities, Consumer<String> tunnelIdConsumer)\n+    {\n+        Proxy proxy = (Proxy) desiredCapabilities.getCapability(CapabilityType.PROXY);\n+        if (tunnelEnabled || proxy != null)\n+        {\n+            T options = createOptions();\n+            if (proxy != null)\n+            {\n+                options.setProxy(proxy.getHttpProxy());\n+            }\n+\n+            String tunnelId = tunnelManager.start(options);\n+            desiredCapabilities.setCapability(CapabilityType.PROXY, (Object) null);\n+\n+            tunnelIdConsumer.accept(tunnelId);\n+        }\n+    }\n+\n+    protected abstract T createOptions();\n+\n+    @Subscribe\n+    public void stopSauceConnect(WebDriverQuitEvent event)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a532ca467d1f2a28bca41e1e46603a12ea3331fc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDc2NQ==", "bodyText": "Why is Selenium configurer bind to tunnelling? What about usual Selenium Grid based on Docker? it doesn't support tunnelling", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531064765", "createdAt": "2020-11-26T14:27:28Z", "author": {"login": "valfirst"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurer.java", "diffHunk": "@@ -19,18 +19,31 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n \n+import com.google.common.eventbus.Subscribe;\n+\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.remote.CapabilityType;\n import org.openqa.selenium.remote.DesiredCapabilities;\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.bdd.model.RunningStory;\n+import org.vividus.selenium.event.WebDriverQuitEvent;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.selenium.tunnel.TunnelOptions;\n \n-public abstract class AbstractDesiredCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n+public abstract class AbstractDesiredCapabilitiesConfigurer<T extends TunnelOptions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODM2MA==", "bodyText": "is it required? isn't localIdentifier  enough?", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531068360", "createdAt": "2020-11-26T14:33:13Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackCapabilitiesConfigurer.java", "diffHunk": "@@ -20,26 +20,49 @@\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.selenium.AbstractDesiredCapabilitiesConfigurer;\n \n-public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer\n+public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer<BrowserStackLocalOptions>\n {\n+    private static final String BSTACK_KEY = \"bstack:options\";\n+\n     private boolean browserStackEnabled;\n+    private String skipUrlsPattern;\n \n-    public BrowserStackCapabilitiesConfigurer(IBddRunContext bddRunContext)\n+    public BrowserStackCapabilitiesConfigurer(IBddRunContext bddRunContext,\n+            BrowserStackLocalManager browserStackLocalManager)\n     {\n-        super(bddRunContext);\n+        super(bddRunContext, browserStackLocalManager);\n     }\n \n     @Override\n     public void configure(DesiredCapabilities desiredCapabilities)\n     {\n         if (browserStackEnabled)\n         {\n-            configureTestName(desiredCapabilities, \"bstack:options\", \"sessionName\");\n+            configureTunnel(desiredCapabilities, tunnelId ->\n+            {\n+                putNestedCapability(desiredCapabilities, BSTACK_KEY, \"local\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODYyNA==", "bodyText": "BSTACK_KEY -> BSTACK_OPTIONS", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531068624", "createdAt": "2020-11-26T14:33:37Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackCapabilitiesConfigurer.java", "diffHunk": "@@ -20,26 +20,49 @@\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.selenium.AbstractDesiredCapabilitiesConfigurer;\n \n-public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer\n+public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer<BrowserStackLocalOptions>\n {\n+    private static final String BSTACK_KEY = \"bstack:options\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTI2Ng==", "bodyText": "why is RuntimeException ?", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531069266", "createdAt": "2020-11-26T14:34:32Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+public class BrowserStackLocalException extends RuntimeException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTQ5OA==", "bodyText": "it's not saucelabs", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531069498", "createdAt": "2020-11-26T14:34:53Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDc4NA==", "bodyText": "why is it outside synchronized block?", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531070784", "createdAt": "2020-11-26T14:36:56Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MTA2OQ==", "bodyText": "decrement", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531071069", "createdAt": "2020-11-26T14:37:26Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MTQxMg==", "bodyText": "increment", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531071412", "createdAt": "2020-11-26T14:37:59Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjMyNw==", "bodyText": "\"pac-browserstack-\" + localIdentifier, \".js\", ?", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531072327", "createdAt": "2020-11-26T14:39:27Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();\n+        testContext.put(KEY, connection);\n+    }\n+\n+    private class BrowserStackLocalConnection\n+    {\n+        private static final String PAC_FORMAT = \"function FindProxyForURL(url, host) \"\n+                + \"{ if (shExpMatch(url, \\\"%s\\\") || shExpMatch(host, \\\"*.browserstack.com\\\")) { return \\\"DIRECT\\\"; }\"\n+                + \"return \\\"PROXY %s\\\"; }\";\n+\n+        private final String localIdentifier;\n+        private final AtomicInteger sessionCount;\n+        private final Map<String, String> localParameters;\n+        private final Local local;\n+\n+        BrowserStackLocalConnection(BrowserStackLocalOptions options) throws IOException\n+        {\n+            this.localIdentifier = UUID.randomUUID().toString();\n+            this.sessionCount = new AtomicInteger(0);\n+\n+            Map<String, String> parameters = new HashMap<>();\n+            parameters.put(\"localIdentifier\", localIdentifier);\n+            parameters.put(\"forcelocal\", \"true\");\n+            parameters.put(\"key\", sauceLabsAccessKey);\n+\n+            if (options.getProxy() != null)\n+            {\n+                String pac = ResourceUtils.createTempFile(\"pac-\" + localIdentifier, \".js\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NDM4Ng==", "bodyText": "why not to wait for start ending here?", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531074386", "createdAt": "2020-11-26T14:42:47Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();\n+        testContext.put(KEY, connection);\n+    }\n+\n+    private class BrowserStackLocalConnection\n+    {\n+        private static final String PAC_FORMAT = \"function FindProxyForURL(url, host) \"\n+                + \"{ if (shExpMatch(url, \\\"%s\\\") || shExpMatch(host, \\\"*.browserstack.com\\\")) { return \\\"DIRECT\\\"; }\"\n+                + \"return \\\"PROXY %s\\\"; }\";\n+\n+        private final String localIdentifier;\n+        private final AtomicInteger sessionCount;\n+        private final Map<String, String> localParameters;\n+        private final Local local;\n+\n+        BrowserStackLocalConnection(BrowserStackLocalOptions options) throws IOException\n+        {\n+            this.localIdentifier = UUID.randomUUID().toString();\n+            this.sessionCount = new AtomicInteger(0);\n+\n+            Map<String, String> parameters = new HashMap<>();\n+            parameters.put(\"localIdentifier\", localIdentifier);\n+            parameters.put(\"forcelocal\", \"true\");\n+            parameters.put(\"key\", sauceLabsAccessKey);\n+\n+            if (options.getProxy() != null)\n+            {\n+                String pac = ResourceUtils.createTempFile(\"pac-\" + localIdentifier, \".js\",\n+                        String.format(PAC_FORMAT, options.getSkipUrlsPattern(), options.getProxy())).toString();\n+                parameters.put(\"-pac-file\", pac);\n+            }\n+\n+            this.localParameters = parameters;\n+            this.local = new Local();\n+        }\n+\n+        String getLocalIdentifier()\n+        {\n+            return localIdentifier;\n+        }\n+\n+        void startConnection() throws Exception\n+        {\n+            LOGGER.atInfo().addArgument(localIdentifier)\n+                           .log(\"Starting BrowserStack Local connection with {} identifier\");\n+            local.start(localParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NjY4MQ==", "bodyText": "\"pac-saucelabs-\" + tunnelIdentifier, \".js\"", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531076681", "createdAt": "2020-11-26T14:46:29Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceConnectOptions.java", "diffHunk": "@@ -105,21 +91,12 @@ public String build(String tunnelIdentifier) throws IOException\n     private Path createPacFile(String tunnelIdentifier) throws IOException\n     {\n         return createTempFile(\"pac-\" + tunnelIdentifier, \".js\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDk5Nzcz", "url": "https://github.com/vividus-framework/vividus/pull/1178#pullrequestreview-539499773", "createdAt": "2020-11-26T18:14:54Z", "commit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxNDo1NFrOH6kjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoxOTowMFrOH6knyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODI0MA==", "bodyText": "it would be better to have a single checked exception for both SL and BS, like: TunnelStartException", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531178240", "createdAt": "2020-11-26T18:14:54Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+public class BrowserStackLocalException extends RuntimeException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTI2Ng=="}, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3OTA0NQ==", "bodyText": "connection = activeConnections.get(options);\nif (connection == null)\n{\n    synchronized (activeConnections)\n    {\n        connection = activeConnections.get(options);\n        if (connection == null)\n        {\n            connection = new BrowserStackLocalConnection(options);\n            connection.startConnection();\n            connection.waitForStart();\n            activeConnections.put(options, connection);\n        }\n        putCurrentConnection(connection);\n    }\n}", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531179045", "createdAt": "2020-11-26T18:17:28Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDc4NA=="}, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3OTQ2NA==", "bodyText": "but still this connection won't be operable, and extra resources will be required to synchronize start completion", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531179464", "createdAt": "2020-11-26T18:19:00Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();\n+        testContext.put(KEY, connection);\n+    }\n+\n+    private class BrowserStackLocalConnection\n+    {\n+        private static final String PAC_FORMAT = \"function FindProxyForURL(url, host) \"\n+                + \"{ if (shExpMatch(url, \\\"%s\\\") || shExpMatch(host, \\\"*.browserstack.com\\\")) { return \\\"DIRECT\\\"; }\"\n+                + \"return \\\"PROXY %s\\\"; }\";\n+\n+        private final String localIdentifier;\n+        private final AtomicInteger sessionCount;\n+        private final Map<String, String> localParameters;\n+        private final Local local;\n+\n+        BrowserStackLocalConnection(BrowserStackLocalOptions options) throws IOException\n+        {\n+            this.localIdentifier = UUID.randomUUID().toString();\n+            this.sessionCount = new AtomicInteger(0);\n+\n+            Map<String, String> parameters = new HashMap<>();\n+            parameters.put(\"localIdentifier\", localIdentifier);\n+            parameters.put(\"forcelocal\", \"true\");\n+            parameters.put(\"key\", sauceLabsAccessKey);\n+\n+            if (options.getProxy() != null)\n+            {\n+                String pac = ResourceUtils.createTempFile(\"pac-\" + localIdentifier, \".js\",\n+                        String.format(PAC_FORMAT, options.getSkipUrlsPattern(), options.getProxy())).toString();\n+                parameters.put(\"-pac-file\", pac);\n+            }\n+\n+            this.localParameters = parameters;\n+            this.local = new Local();\n+        }\n+\n+        String getLocalIdentifier()\n+        {\n+            return localIdentifier;\n+        }\n+\n+        void startConnection() throws Exception\n+        {\n+            LOGGER.atInfo().addArgument(localIdentifier)\n+                           .log(\"Starting BrowserStack Local connection with {} identifier\");\n+            local.start(localParameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NDM4Ng=="}, "originalCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799"}, "originalPosition": 170}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/54b6556d6c1592571b8cc5f03cdd4e034adc1799", "committedDate": "2020-11-26T14:25:57Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "bd75e0c40b79acf61b5e50b67fe3e95f24d9f8ba", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/bd75e0c40b79acf61b5e50b67fe3e95f24d9f8ba", "committedDate": "2020-11-27T07:19:41Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd75e0c40b79acf61b5e50b67fe3e95f24d9f8ba", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/bd75e0c40b79acf61b5e50b67fe3e95f24d9f8ba", "committedDate": "2020-11-27T07:19:41Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "c2c2ffc46e9768135d4b83a4f19b4dc050ff0e5d", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c2c2ffc46e9768135d4b83a4f19b4dc050ff0e5d", "committedDate": "2020-11-27T07:49:44Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2c2ffc46e9768135d4b83a4f19b4dc050ff0e5d", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c2c2ffc46e9768135d4b83a4f19b4dc050ff0e5d", "committedDate": "2020-11-27T07:49:44Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "f34d42869950e8cac1228d74c2982d1cda10acbb", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/f34d42869950e8cac1228d74c2982d1cda10acbb", "committedDate": "2020-11-27T08:03:30Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f34d42869950e8cac1228d74c2982d1cda10acbb", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/f34d42869950e8cac1228d74c2982d1cda10acbb", "committedDate": "2020-11-27T08:03:30Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "bcfcf503bd0c09e63fc4a1eb7e7c4f815346a9c6", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/bcfcf503bd0c09e63fc4a1eb7e7c4f815346a9c6", "committedDate": "2020-11-27T08:04:47Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcfcf503bd0c09e63fc4a1eb7e7c4f815346a9c6", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/bcfcf503bd0c09e63fc4a1eb7e7c4f815346a9c6", "committedDate": "2020-11-27T08:04:47Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "b0266e0c209cebac64b0e814f7d068476de80d96", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b0266e0c209cebac64b0e814f7d068476de80d96", "committedDate": "2020-11-27T08:31:00Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0266e0c209cebac64b0e814f7d068476de80d96", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b0266e0c209cebac64b0e814f7d068476de80d96", "committedDate": "2020-11-27T08:31:00Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "753d878a9a6499c972b6130c847608d697d8492f", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/753d878a9a6499c972b6130c847608d697d8492f", "committedDate": "2020-11-30T15:04:13Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "753d878a9a6499c972b6130c847608d697d8492f", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/753d878a9a6499c972b6130c847608d697d8492f", "committedDate": "2020-11-30T15:04:13Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "a43407e0bcc800360cb7279fdae29b604f32843d", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a43407e0bcc800360cb7279fdae29b604f32843d", "committedDate": "2020-11-30T18:27:55Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a43407e0bcc800360cb7279fdae29b604f32843d", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a43407e0bcc800360cb7279fdae29b604f32843d", "committedDate": "2020-11-30T18:27:55Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "e867444c4c05d96a49f6b74aae54294032f6a140", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e867444c4c05d96a49f6b74aae54294032f6a140", "committedDate": "2020-11-30T20:33:00Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e867444c4c05d96a49f6b74aae54294032f6a140", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e867444c4c05d96a49f6b74aae54294032f6a140", "committedDate": "2020-11-30T20:33:00Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "bc556f8b0d1b7a26cb3e92166ce4107c3b48cfbe", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/bc556f8b0d1b7a26cb3e92166ce4107c3b48cfbe", "committedDate": "2020-12-01T09:24:09Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc556f8b0d1b7a26cb3e92166ce4107c3b48cfbe", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/bc556f8b0d1b7a26cb3e92166ce4107c3b48cfbe", "committedDate": "2020-12-01T09:24:09Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "3946e167781fb50cb802187577b589bfc9c25640", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3946e167781fb50cb802187577b589bfc9c25640", "committedDate": "2020-12-01T12:00:49Z", "message": "DRAFT Add support for bs local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3946e167781fb50cb802187577b589bfc9c25640", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3946e167781fb50cb802187577b589bfc9c25640", "committedDate": "2020-12-01T12:00:49Z", "message": "DRAFT Add support for bs local"}, "afterCommit": {"oid": "c2750554ac542befeff06e6ccadcd78590e38967", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c2750554ac542befeff06e6ccadcd78590e38967", "committedDate": "2020-12-01T14:21:39Z", "message": "[plugin-browserstack] Add BrowserStack local support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2750554ac542befeff06e6ccadcd78590e38967", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c2750554ac542befeff06e6ccadcd78590e38967", "committedDate": "2020-12-01T14:21:39Z", "message": "[plugin-browserstack] Add BrowserStack local support"}, "afterCommit": {"oid": "fc1f4b327167eedf64ebe6213b569270b08ddbb3", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/fc1f4b327167eedf64ebe6213b569270b08ddbb3", "committedDate": "2020-12-01T19:33:03Z", "message": "[plugin-browserstack] Add BrowserStack local support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc1f4b327167eedf64ebe6213b569270b08ddbb3", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/fc1f4b327167eedf64ebe6213b569270b08ddbb3", "committedDate": "2020-12-01T19:33:03Z", "message": "[plugin-browserstack] Add BrowserStack local support"}, "afterCommit": {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/2249bf44a5a8aa54de411962d38395abd9a2f374", "committedDate": "2020-12-03T09:27:39Z", "message": "[plugin-browserstack] Add BrowserStack local support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNzgxMDY4", "url": "https://github.com/vividus-framework/vividus/pull/1178#pullrequestreview-543781068", "createdAt": "2020-12-03T09:53:01Z", "commit": {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo1MzowMVrOH-Pjww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo1OTowMVrOH-P_7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyODY3NQ==", "bodyText": "noisy change", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r535028675", "createdAt": "2020-12-03T09:53:01Z", "author": {"login": "valfirst"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurerTests.java", "diffHunk": "@@ -100,7 +100,8 @@ void shouldNotConfigureTestNameIfStoryIsNull()\n         verifyNoInteractions(desiredCapabilities);\n     }\n \n-    private static final class TestAbstractDesiredCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer\n+    private static final class TestAbstractDesiredCapabilitiesConfigurer\n+            extends AbstractDesiredCapabilitiesConfigurer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzMjU4Mw==", "bodyText": "connection = activeConnections.get(options);\nif (connection == null)\n{\n    connection = new BrowserStackLocalConnection(options);\n    connection.startConnection();\n    activeConnections.put(options, connection);\n}", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r535032583", "createdAt": "2020-12-03T09:56:13Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelException;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.selenium.tunnel.TunnelOptions;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+\n+public class BrowserStackLocalManager implements TunnelManager<TunnelOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String browserStackAccessKey;\n+    private final TestContext testContext;\n+\n+    private final Map<TunnelOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    public BrowserStackLocalManager(String browserStackAccessKey, TestContext testContext)\n+    {\n+        this.browserStackAccessKey = browserStackAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    @Override\n+    public String start(TunnelOptions options) throws TunnelException\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        connection.startConnection();\n+                        activeConnections.put(options, connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzNTg4NA==", "bodyText": "browserstack.browserstack-local.enabled", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r535035884", "createdAt": "2020-12-03T09:59:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/resources/properties/profile/browserstack/profile.properties", "diffHunk": "@@ -1,3 +1,5 @@\n selenium.grid.enabled=true\n selenium.grid.host=hub-cloud.browserstack.com\n selenium.grid.url=https://${selenium.grid.username}:${selenium.grid.password}@${selenium.grid.host}/wd/hub\n+\n+browserstack.local.enabled=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "committedDate": "2020-12-03T10:13:11Z", "message": "[plugin-browserstack] Add BrowserStack local support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/2249bf44a5a8aa54de411962d38395abd9a2f374", "committedDate": "2020-12-03T09:27:39Z", "message": "[plugin-browserstack] Add BrowserStack local support"}, "afterCommit": {"oid": "0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "committedDate": "2020-12-03T10:13:11Z", "message": "[plugin-browserstack] Add BrowserStack local support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODQyNzUy", "url": "https://github.com/vividus-framework/vividus/pull/1178#pullrequestreview-543842752", "createdAt": "2020-12-03T11:06:12Z", "commit": {"oid": "0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODczNzE4", "url": "https://github.com/vividus-framework/vividus/pull/1178#pullrequestreview-543873718", "createdAt": "2020-12-03T11:48:00Z", "commit": {"oid": "0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4747, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}