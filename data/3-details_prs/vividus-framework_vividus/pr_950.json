{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTQxMTM0", "number": 950, "title": "Xray", "bodyText": "", "createdAt": "2020-09-16T12:05:26Z", "url": "https://github.com/vividus-framework/vividus/pull/950", "merged": true, "mergeCommit": {"oid": "f3fcae84ba8b72735ea6218e5a05e18582a724cf"}, "closed": true, "closedAt": "2020-09-23T09:50:47Z", "author": {"login": "uarlouski"}, "timelineItems": {"totalCount": 88, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJbP3NgBqjM3NzI4NTQwMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLpdp3AFqTQ5NDQ4NzI0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61ad2c58e6fcf831f05915afe61070672de0e0d4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/61ad2c58e6fcf831f05915afe61070672de0e0d4", "committedDate": "2020-09-16T12:04:22Z", "message": "Draft"}, "afterCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/94268dbd35fa21535017dede4c92a0323afdc685", "committedDate": "2020-09-16T12:07:11Z", "message": "Draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTcxNTc2", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-489571576", "createdAt": "2020-09-16T12:28:29Z", "commit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjoyODoyOVrOHSucAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0MDo0NlrOHSu4mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NzI1MA==", "bodyText": "move to a separate commit (maybe PR)", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489397250", "createdAt": "2020-09-16T12:28:29Z", "author": {"login": "valfirst"}, "path": "vividus-http-client/src/main/java/org/vividus/http/exception/HttpRequestBuildException.java", "diffHunk": "@@ -16,7 +16,9 @@\n \n package org.vividus.http.exception;\n \n-public class HttpRequestBuildException extends Exception\n+import java.io.IOException;\n+\n+public class HttpRequestBuildException extends IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NzU5MA==", "bodyText": "2.3.3?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489397590", "createdAt": "2020-09-16T12:29:04Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,30 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.0.RELEASE')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMDA3Mw==", "bodyText": "it should be a part of vividus-http-client and it's shouldn't use JiraConfiguration", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489400073", "createdAt": "2020-09-16T12:33:10Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/CacheableClientCredentialsHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.context;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.vividus.http.client.ClientBuilderUtils;\n+import org.vividus.jira.JiraConfiguration;\n+\n+public class CacheableClientCredentialsHttpClientContextFactory implements IHttpClientContextFactory\n+{\n+    private final CredentialsProvider credentialsProvider;\n+    private final AuthCache authCache;\n+\n+    public CacheableClientCredentialsHttpClientContextFactory(JiraConfiguration jiraConfiguration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMDQ5Mg==", "bodyText": "it should be a part of vividus-http-client", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489400492", "createdAt": "2020-09-16T12:33:53Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/DefaultHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public class DefaultHttpClientContextFactory implements IHttpClientContextFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMDYwMw==", "bodyText": "HttpClientContextFactory", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489400603", "createdAt": "2020-09-16T12:34:03Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/context/IHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public interface IHttpClientContextFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNDU2OA==", "bodyText": "I believe you should set cookie at http client level, not http request", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489404568", "createdAt": "2020-09-16T12:40:46Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/jira/request/JSessionHttpRequestBaseFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira.request;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.exception.HttpRequestBuildException;\n+import org.vividus.jira.JiraConfiguration;\n+\n+public class JSessionHttpRequestBaseFactory extends HttpRequestBaseFactory\n+{\n+    private String token;\n+\n+    public JSessionHttpRequestBaseFactory(JiraConfiguration jiraConfiguration)\n+    {\n+        super(jiraConfiguration);\n+    }\n+\n+    @Override\n+    public HttpRequestBase create(HttpMethod method, String relativeUrl, HttpEntity content)\n+            throws HttpRequestBuildException\n+    {\n+        HttpRequestBase request = super.create(method, relativeUrl, content);\n+        request.addHeader(\"Cookie\", \"JSESSIONID=\" + token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTgyNzU4", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-489582758", "createdAt": "2020-09-16T12:42:40Z", "commit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0Mjo0MFrOHSu9Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0Mjo0MFrOHSu9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNTc1OA==", "bodyText": "org.vividus.xray.exporter -> org.vividus.xray, here and for all other classes", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489405758", "createdAt": "2020-09-16T12:42:40Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTgzMzI3", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-489583327", "createdAt": "2020-09-16T12:43:22Z", "commit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0MzoyMlrOHSu-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0MzoyMlrOHSu-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNjE5MQ==", "bodyText": "Adapter -> Converter", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489406191", "createdAt": "2020-09-16T12:43:22Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/adapter/ManualStepAdapter.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.adapter;\n+\n+import static java.lang.System.lineSeparator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.RegExUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import org.vividus.xray.exporter.exception.XrayExporterException;\n+import org.vividus.xray.exporter.model.exporter.ManualTestStep;\n+import org.vividus.xray.exporter.model.jbehave.Step;\n+\n+@Component\n+public class ManualStepAdapter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTg1MDM2", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-489585036", "createdAt": "2020-09-16T12:45:01Z", "commit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NTowMVrOHSvC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NTowMVrOHSvC_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNzIyOA==", "bodyText": "why Runtime?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489407228", "createdAt": "2020-09-16T12:45:01Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/exception/XrayExporterException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.exception;\n+\n+public class XrayExporterException extends RuntimeException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTg2MTYx", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-489586161", "createdAt": "2020-09-16T12:46:27Z", "commit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NjoyN1rOHSvG0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NjoyN1rOHSvG0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODIxMQ==", "bodyText": "it should be a part of vividus-bdd-engine", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489408211", "createdAt": "2020-09-16T12:46:27Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Meta.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+public class Meta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTg2ODg4", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-489586888", "createdAt": "2020-09-16T12:47:20Z", "commit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NzoyMVrOHSvI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0OTo0OFrOHSvPGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODc0Ng==", "bodyText": "custom logic, it should be removed or be configurable", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489408746", "createdAt": "2020-09-16T12:47:21Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+    private static final String SKIP = \"skip\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTA1MQ==", "bodyText": "xray.labels", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489409051", "createdAt": "2020-09-16T12:47:50Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+    private static final String SKIP = \"skip\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"labels\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTE1Ng==", "bodyText": "xray.components", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489409156", "createdAt": "2020-09-16T12:48:00Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+    private static final String SKIP = \"skip\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"labels\");\n+    }\n+\n+    public Set<String> findComponents()\n+    {\n+        return getMetaValues(\"components\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwOTk3Ng==", "bodyText": "consider moving to JsonUtils", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489409976", "createdAt": "2020-09-16T12:49:17Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/exporter/reader/JsonResourceFinder.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter.reader;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.nio.CharBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class JsonResourceFinder\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceFinder.class);\n+\n+    private static final List<Character> CONTINUE_CHARACTERS = List.of(' ', '\\n', '\\r');\n+    private static final List<Character> BREAK_CHARACTERS = List.of('{', '[');\n+    private static final int BUFFER_SIZE = 8;\n+\n+    private JsonResourceFinder()\n+    {\n+    }\n+\n+    public static List<File> find(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .filter(JsonResourceFinder::filterJsonFile)\n+                        .collect(Collectors.toList());\n+        }\n+    }\n+\n+    private static boolean filterJsonFile(File file)\n+    {\n+        boolean json = isJsonFile(file);\n+        if (!json)\n+        {\n+            LOGGER.info(\"Content of file '{}' is not JSON\", file.getAbsolutePath());\n+        }\n+        return json;\n+    }\n+\n+    private static boolean isJsonFile(File file)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxMDMzMQ==", "bodyText": "please review if all these properties are required", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r489410331", "createdAt": "2020-09-16T12:49:48Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,26 @@\n+http.ssl.check-certificate=false\n+http.ssl.verify-hostname=true\n+http.circular-redirects-allowed=false\n+http.cookie-spec=default\n+http.socket-timeout=300000\n+http.idempotent-methods-sending-request-body=\n+\n+http.key-store.path=#{null}\n+http.key-store.password=\n+http.key-store.type=JKS\n+\n+http.connection-request-timeout=30000\n+http.connect-timeout=30000\n+http.max-total-connections=80\n+http.max-connections-per-route=60\n+\n+jira.username=#{null}\n+jira.password=#{null}\n+jira.endpoint=#{null}\n+\n+xray-exporter.source-directory=\n+xray-exporter.project-key=\n+\n+\n+databind.fields.test-case-type=\n+databind.fields.manual-steps=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94268dbd35fa21535017dede4c92a0323afdc685", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/94268dbd35fa21535017dede4c92a0323afdc685", "committedDate": "2020-09-16T12:07:11Z", "message": "Draft"}, "afterCommit": {"oid": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "committedDate": "2020-09-16T14:26:29Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/4e35844e1ac25938dd3e9dcee8c9b863b85864a4", "committedDate": "2020-09-16T14:26:29Z", "message": "Draft"}, "afterCommit": {"oid": "40abb40206173f11b08d7aca8537607881babd10", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/40abb40206173f11b08d7aca8537607881babd10", "committedDate": "2020-09-16T14:29:11Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40abb40206173f11b08d7aca8537607881babd10", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/40abb40206173f11b08d7aca8537607881babd10", "committedDate": "2020-09-16T14:29:11Z", "message": "Draft"}, "afterCommit": {"oid": "09c44ce6ad8745fd30c71fc30fa2475643ed7762", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/09c44ce6ad8745fd30c71fc30fa2475643ed7762", "committedDate": "2020-09-16T14:57:51Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09c44ce6ad8745fd30c71fc30fa2475643ed7762", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/09c44ce6ad8745fd30c71fc30fa2475643ed7762", "committedDate": "2020-09-16T14:57:51Z", "message": "Draft"}, "afterCommit": {"oid": "3acc5eb362b3c99490d0670c00f933c14b19b463", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3acc5eb362b3c99490d0670c00f933c14b19b463", "committedDate": "2020-09-16T15:00:58Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3acc5eb362b3c99490d0670c00f933c14b19b463", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3acc5eb362b3c99490d0670c00f933c14b19b463", "committedDate": "2020-09-16T15:00:58Z", "message": "Draft"}, "afterCommit": {"oid": "e2e79c3f0240201783246cf47aa9deaad925ae83", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e2e79c3f0240201783246cf47aa9deaad925ae83", "committedDate": "2020-09-16T15:02:42Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e79c3f0240201783246cf47aa9deaad925ae83", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e2e79c3f0240201783246cf47aa9deaad925ae83", "committedDate": "2020-09-16T15:02:42Z", "message": "Draft"}, "afterCommit": {"oid": "99205a319314f86498d22db1db6d567b46874bf1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/99205a319314f86498d22db1db6d567b46874bf1", "committedDate": "2020-09-16T15:12:28Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99205a319314f86498d22db1db6d567b46874bf1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/99205a319314f86498d22db1db6d567b46874bf1", "committedDate": "2020-09-16T15:12:28Z", "message": "Draft"}, "afterCommit": {"oid": "cb6fe9c3a9072fe13b465f4dfdb397653768a204", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/cb6fe9c3a9072fe13b465f4dfdb397653768a204", "committedDate": "2020-09-16T19:07:05Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb6fe9c3a9072fe13b465f4dfdb397653768a204", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/cb6fe9c3a9072fe13b465f4dfdb397653768a204", "committedDate": "2020-09-16T19:07:05Z", "message": "Draft"}, "afterCommit": {"oid": "aa6a273d772315fb97b9e656ef924ee07efce0fb", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/aa6a273d772315fb97b9e656ef924ee07efce0fb", "committedDate": "2020-09-17T07:09:00Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa6a273d772315fb97b9e656ef924ee07efce0fb", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/aa6a273d772315fb97b9e656ef924ee07efce0fb", "committedDate": "2020-09-17T07:09:00Z", "message": "Draft"}, "afterCommit": {"oid": "008d72067f286ae0fa02ba19f606b959c1c2acf9", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/008d72067f286ae0fa02ba19f606b959c1c2acf9", "committedDate": "2020-09-17T07:14:21Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "008d72067f286ae0fa02ba19f606b959c1c2acf9", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/008d72067f286ae0fa02ba19f606b959c1c2acf9", "committedDate": "2020-09-17T07:14:21Z", "message": "Draft"}, "afterCommit": {"oid": "702530341101c31d6b08e9d8cfcbfb663827c8c4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/702530341101c31d6b08e9d8cfcbfb663827c8c4", "committedDate": "2020-09-17T07:16:56Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "702530341101c31d6b08e9d8cfcbfb663827c8c4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/702530341101c31d6b08e9d8cfcbfb663827c8c4", "committedDate": "2020-09-17T07:16:56Z", "message": "Draft"}, "afterCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "committedDate": "2020-09-17T08:06:39Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/8518be1f4aea47fd87f3620a60d581ba3e6e3fc1", "committedDate": "2020-09-17T08:06:39Z", "message": "Draft"}, "afterCommit": {"oid": "e799fea247b5920ba481b2b2f08a2f0d20e9f787", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e799fea247b5920ba481b2b2f08a2f0d20e9f787", "committedDate": "2020-09-17T08:36:44Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e799fea247b5920ba481b2b2f08a2f0d20e9f787", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e799fea247b5920ba481b2b2f08a2f0d20e9f787", "committedDate": "2020-09-17T08:36:44Z", "message": "Draft"}, "afterCommit": {"oid": "528781785989ada2a3ceb412d90ffe3ac6ec30a7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/528781785989ada2a3ceb412d90ffe3ac6ec30a7", "committedDate": "2020-09-17T08:42:24Z", "message": "Draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzU4MjE5", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-490358219", "createdAt": "2020-09-17T08:25:31Z", "commit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoyNTozMVrOHTXE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODozMDozMVrOHTXRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzA3OA==", "bodyText": "vividus-to-xray-for-jira-exporter -> vividus-to-xray-exporter", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063078", "createdAt": "2020-09-17T08:25:31Z", "author": {"login": "valfirst"}, "path": "settings.gradle", "diffHunk": "@@ -30,5 +30,6 @@ include 'vividus-plugin-visual'\n include 'vividus-plugin-web-app-to-rest-api'\n include 'vividus-plugin-web-app'\n include 'vividus-plugin-xml'\n+include 'vividus-to-xray-for-jira-exporter'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzczMQ==", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063731", "createdAt": "2020-09-17T08:26:35Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzgxNg==", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063816", "createdAt": "2020-09-17T08:26:44Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MzkwMQ==", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063901", "createdAt": "2020-09-17T08:26:50Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2Mzk1MQ==", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490063951", "createdAt": "2020-09-17T08:26:54Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"xray.labels\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDAyMA==", "bodyText": "it shouldn't be a part of common module vividus-bdd-engine", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490064020", "createdAt": "2020-09-17T08:27:01Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class Scenario\n+{\n+    private static final String SEMICOLON = \";\";\n+\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public Optional<String> findTestCaseId()\n+    {\n+        return getMetaValuesStream(\"testCaseId\").findFirst();\n+    }\n+\n+    public Set<String> findRequirementIds()\n+    {\n+        return getMetaValues(\"requirementId\");\n+    }\n+\n+    public Set<String> findLabels()\n+    {\n+        return getMetaValues(\"xray.labels\");\n+    }\n+\n+    public Set<String> findComponents()\n+    {\n+        return getMetaValues(\"xray.components\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDU0Mw==", "bodyText": "how does it match to JBehave json output?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490064543", "createdAt": "2020-09-17T08:27:51Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+public class Step\n+{\n+    private String comment;\n+    private String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDk3Nw==", "bodyText": "please rebase the PR", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490064977", "createdAt": "2020-09-17T08:28:32Z", "author": {"login": "valfirst"}, "path": "vividus-http-client/src/main/java/org/vividus/http/exception/HttpRequestBuildException.java", "diffHunk": "@@ -16,7 +16,9 @@\n \n package org.vividus.http.exception;\n \n-public class HttpRequestBuildException extends Exception\n+import java.io.IOException;\n+\n+public class HttpRequestBuildException extends IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NjE5MQ==", "bodyText": "give meaningful names to properties", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490066191", "createdAt": "2020-09-17T08:30:31Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-for-jira-exporter/src/main/java/org/vividus/xray/configuration/ManualTestSerializationFields.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.configuration;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"databind.fields\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "528781785989ada2a3ceb412d90ffe3ac6ec30a7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/528781785989ada2a3ceb412d90ffe3ac6ec30a7", "committedDate": "2020-09-17T08:42:24Z", "message": "Draft"}, "afterCommit": {"oid": "289072fab0259a2746645540bb68d1e27d796590", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/289072fab0259a2746645540bb68d1e27d796590", "committedDate": "2020-09-17T11:09:50Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "289072fab0259a2746645540bb68d1e27d796590", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/289072fab0259a2746645540bb68d1e27d796590", "committedDate": "2020-09-17T11:09:50Z", "message": "Draft"}, "afterCommit": {"oid": "5e5a56fab40d13cc704661854aa0f658ce299fb4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5e5a56fab40d13cc704661854aa0f658ce299fb4", "committedDate": "2020-09-17T11:27:31Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e5a56fab40d13cc704661854aa0f658ce299fb4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5e5a56fab40d13cc704661854aa0f658ce299fb4", "committedDate": "2020-09-17T11:27:31Z", "message": "Draft"}, "afterCommit": {"oid": "feaf2cab3f5cb250139b32cbc42347ef959dfb69", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/feaf2cab3f5cb250139b32cbc42347ef959dfb69", "committedDate": "2020-09-17T11:57:51Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "feaf2cab3f5cb250139b32cbc42347ef959dfb69", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/feaf2cab3f5cb250139b32cbc42347ef959dfb69", "committedDate": "2020-09-17T11:57:51Z", "message": "Draft"}, "afterCommit": {"oid": "6363fdd11593c7e75aba843a1efe34b13ce1f9a1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/6363fdd11593c7e75aba843a1efe34b13ce1f9a1", "committedDate": "2020-09-17T12:56:31Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6363fdd11593c7e75aba843a1efe34b13ce1f9a1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/6363fdd11593c7e75aba843a1efe34b13ce1f9a1", "committedDate": "2020-09-17T12:56:31Z", "message": "Draft"}, "afterCommit": {"oid": "e938eb09fbdda6c65475f4d6e6d71142fb9c1ba2", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e938eb09fbdda6c65475f4d6e6d71142fb9c1ba2", "committedDate": "2020-09-17T15:58:15Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e938eb09fbdda6c65475f4d6e6d71142fb9c1ba2", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e938eb09fbdda6c65475f4d6e6d71142fb9c1ba2", "committedDate": "2020-09-17T15:58:15Z", "message": "Draft"}, "afterCommit": {"oid": "915a65e4bce075b0bc7ead6b5924dc0e937cc689", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/915a65e4bce075b0bc7ead6b5924dc0e937cc689", "committedDate": "2020-09-17T17:46:56Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "915a65e4bce075b0bc7ead6b5924dc0e937cc689", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/915a65e4bce075b0bc7ead6b5924dc0e937cc689", "committedDate": "2020-09-17T17:46:56Z", "message": "Draft"}, "afterCommit": {"oid": "9dfcce8eda17c753096033d2b12593bdd880cac7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9dfcce8eda17c753096033d2b12593bdd880cac7", "committedDate": "2020-09-17T18:24:27Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dfcce8eda17c753096033d2b12593bdd880cac7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9dfcce8eda17c753096033d2b12593bdd880cac7", "committedDate": "2020-09-17T18:24:27Z", "message": "Draft"}, "afterCommit": {"oid": "7675489aa3d32f941a042cd60001c307a118f874", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7675489aa3d32f941a042cd60001c307a118f874", "committedDate": "2020-09-18T06:23:01Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7675489aa3d32f941a042cd60001c307a118f874", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7675489aa3d32f941a042cd60001c307a118f874", "committedDate": "2020-09-18T06:23:01Z", "message": "Draft"}, "afterCommit": {"oid": "502bb612b55066de51932eb794790ebf57614721", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/502bb612b55066de51932eb794790ebf57614721", "committedDate": "2020-09-18T07:00:10Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "502bb612b55066de51932eb794790ebf57614721", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/502bb612b55066de51932eb794790ebf57614721", "committedDate": "2020-09-18T07:00:10Z", "message": "Draft"}, "afterCommit": {"oid": "df9fb7662cc48be7c086be0034157a13f558f042", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/df9fb7662cc48be7c086be0034157a13f558f042", "committedDate": "2020-09-18T08:00:14Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df9fb7662cc48be7c086be0034157a13f558f042", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/df9fb7662cc48be7c086be0034157a13f558f042", "committedDate": "2020-09-18T08:00:14Z", "message": "Draft"}, "afterCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/d758fe83d855fc18911039676e368550158722ce", "committedDate": "2020-09-18T10:37:38Z", "message": "Draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjQ1OTI5", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491245929", "createdAt": "2020-09-18T08:14:42Z", "commit": {"oid": "df9fb7662cc48be7c086be0034157a13f558f042"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxNDo0MlrOHUCxlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0OTozMlrOHUQa9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTAyOQ==", "bodyText": "is it used somewhere?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490779029", "createdAt": "2020-09-18T08:14:42Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Scenario\n+{\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9fb7662cc48be7c086be0034157a13f558f042"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTIwMg==", "bodyText": "collectSteps ?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r490779202", "createdAt": "2020-09-18T08:15:02Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Scenario\n+{\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;\n+\n+    public String getTitle()\n+    {\n+        return title;\n+    }\n+\n+    public void setTitle(String title)\n+    {\n+        this.title = title;\n+    }\n+\n+    public List<Meta> getMeta()\n+    {\n+        return meta;\n+    }\n+\n+    public void setMeta(List<Meta> meta)\n+    {\n+        this.meta = meta;\n+    }\n+\n+    public List<Step> getSteps()\n+    {\n+        return steps;\n+    }\n+\n+    public void setSteps(List<Step> steps)\n+    {\n+        this.steps = steps;\n+    }\n+\n+    public Examples getExamples()\n+    {\n+        return examples;\n+    }\n+\n+    public void setExamples(Examples examples)\n+    {\n+        this.examples = examples;\n+    }\n+\n+    public List<Step> findScenarioSteps()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df9fb7662cc48be7c086be0034157a13f558f042"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMTY5NA==", "bodyText": "can't it be just\nprivate List<Example> examples;\n?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491001694", "createdAt": "2020-09-18T14:48:24Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Scenario.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Scenario\n+{\n+    private String title;\n+    private List<Meta> meta;\n+    private List<Step> steps;\n+    private Examples examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMjYxMw==", "bodyText": "JBehave with fix was bumped", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491002613", "createdAt": "2020-09-18T14:49:32Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/model/jbehave/Step.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model.jbehave;\n+\n+public class Step\n+{\n+    private String comment;\n+    private String value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2NDU0Mw=="}, "originalCommit": {"oid": "8518be1f4aea47fd87f3620a60d581ba3e6e3fc1"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTc0NDQy", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491574442", "createdAt": "2020-09-18T15:34:55Z", "commit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTozNDo1NVrOHUSIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTozNDo1NVrOHUSIIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMDU2Mw==", "bodyText": "Shouldn't it be like CachINGClientCredentialsContextFactory\nI believe able for the interfaces :)", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491030563", "createdAt": "2020-09-18T15:34:55Z", "author": {"login": "ikalinin1"}, "path": "vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.vividus.http.client.ClientBuilderUtils;\n+\n+public class CacheableClientCredentialsHttpClientContextFactory implements HttpClientContextFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTM3NTcw", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491537570", "createdAt": "2020-09-18T14:50:41Z", "commit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1MDo0MVrOHUQd8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo0NzozNlrOHUSlFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwMzM3OQ==", "bodyText": "CachingCredentialsHttp...", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491003379", "createdAt": "2020-09-18T14:50:41Z", "author": {"login": "valfirst"}, "path": "vividus-http-client/src/main/java/org/vividus/http/context/CacheableClientCredentialsHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.vividus.http.client.ClientBuilderUtils;\n+\n+public class CacheableClientCredentialsHttpClientContextFactory implements HttpClientContextFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNDU4Mw==", "bodyText": "is HttpClientContext required? isn't HttpContext enough?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491004583", "createdAt": "2020-09-18T14:52:38Z", "author": {"login": "valfirst"}, "path": "vividus-http-client/src/main/java/org/vividus/http/context/HttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public interface HttpClientContextFactory\n+{\n+    HttpClientContext create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMjgyNA==", "bodyText": "Do you really need the instance of context? Apache HTTP client supports null", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491012824", "createdAt": "2020-09-18T15:05:47Z", "author": {"login": "valfirst"}, "path": "vividus-http-client/src/main/java/org/vividus/http/context/DefaultHttpClientContextFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.client.protocol.HttpClientContext;\n+\n+public class DefaultHttpClientContextFactory implements HttpClientContextFactory\n+{\n+    @Override\n+    public HttpClientContext create()\n+    {\n+        return HttpClientContext.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTgyMA==", "bodyText": "why is it needed from business point of view?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491015820", "createdAt": "2020-09-18T15:10:33Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.configuration;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"xray-exporter\")\n+public class XrayExporterOptions\n+{\n+    private Path sourceDirectory;\n+    private String projectKey;\n+    private List<String> editableStatuses;\n+    private String skipMarker;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNjE1NA==", "bodyText": "it should be more meaningful", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491016154", "createdAt": "2020-09-18T15:11:08Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/configuration/XrayExporterOptions.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.configuration;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"xray-exporter\")\n+public class XrayExporterOptions\n+{\n+    private Path sourceDirectory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNzk1NA==", "bodyText": "we already have @requirementId", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491017954", "createdAt": "2020-09-18T15:14:03Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxOTY4Mg==", "bodyText": "invalid -> non-editable ?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491019682", "createdAt": "2020-09-18T15:16:54Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in invalid '{}' status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMDU3MA==", "bodyText": "keep the same naming across the project: Folder -> The directory", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491020570", "createdAt": "2020-09-18T15:18:20Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in invalid '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(xrayExporterOptions.getSourceDirectory());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMDc3MA==", "bodyText": "Json -> JSON", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491020770", "createdAt": "2020-09-18T15:18:40Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.model.TestCaseParameters;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null && StringUtils.equalsIgnoreCase(testCaseId, xrayExporterOptions.getSkipMarker()))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.findScenarioSteps());\n+\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementIds\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in invalid '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(xrayExporterOptions.getSourceDirectory());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",\n+                xrayExporterOptions.getSourceDirectory());\n+        String jsonFilePaths = jsonFiles.stream().map(FileEntry::getPath).collect(Collectors.joining(\" ,\"));\n+        LOGGER.info(\"Json files: {}\", jsonFilePaths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNDg2Nw==", "bodyText": "why do you need all these properties?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491034867", "createdAt": "2020-09-18T15:42:27Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"cacheable-client-credentials\" class=\"org.vividus.http.context.CacheableClientCredentialsHttpClientContextFactory\" >\n+        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+    </bean>\n+\n+    <bean id=\"default\" class=\"org.vividus.http.context.DefaultHttpClientContextFactory\" />\n+\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />\n+\n+    <bean id=\"jiraClient\" class=\"org.vividus.jira.JiraClient\">\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\" />\n+        <constructor-arg index=\"1\">\n+            <bean class=\"org.vividus.http.client.HttpClient\" factory-bean=\"httpClientFactory\"\n+                  factory-method=\"buildHttpClient\">\n+                <constructor-arg>\n+                    <bean parent=\"httpClientConfig\">\n+                        <property name=\"circularRedirectsAllowed\" value=\"${http.circular-redirects-allowed}\" />\n+                        <property name=\"connectionRequestTimeout\" value=\"${http.connection-request-timeout}\" />\n+                        <property name=\"connectTimeout\" value=\"${http.connect-timeout}\" />\n+                        <property name=\"maxTotalConnections\" value=\"${http.max-total-connections}\" />\n+                        <property name=\"maxConnectionsPerRoute\" value=\"${http.max-connections-per-route}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNTE0Ng==", "bodyText": "why xray, but not jira?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491035146", "createdAt": "2020-09-18T15:42:54Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"cacheable-client-credentials\" class=\"org.vividus.http.context.CacheableClientCredentialsHttpClientContextFactory\" >\n+        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+    </bean>\n+\n+    <bean id=\"default\" class=\"org.vividus.http.context.DefaultHttpClientContextFactory\" />\n+\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />\n+\n+    <bean id=\"jiraClient\" class=\"org.vividus.jira.JiraClient\">\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\" />\n+        <constructor-arg index=\"1\">\n+            <bean class=\"org.vividus.http.client.HttpClient\" factory-bean=\"httpClientFactory\"\n+                  factory-method=\"buildHttpClient\">\n+                <constructor-arg>\n+                    <bean parent=\"httpClientConfig\">\n+                        <property name=\"circularRedirectsAllowed\" value=\"${http.circular-redirects-allowed}\" />\n+                        <property name=\"connectionRequestTimeout\" value=\"${http.connection-request-timeout}\" />\n+                        <property name=\"connectTimeout\" value=\"${http.connect-timeout}\" />\n+                        <property name=\"maxTotalConnections\" value=\"${http.max-total-connections}\" />\n+                        <property name=\"maxConnectionsPerRoute\" value=\"${http.max-connections-per-route}\" />\n+                        <property name=\"headersMap\">\n+                            <bean factory-bean=\"propertyParser\" factory-method=\"getPropertyValuesByPrefix\">\n+                                <constructor-arg value=\"xray.http.header.\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNTgyNA==", "bodyText": "why is it needed?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491035824", "createdAt": "2020-09-18T15:44:04Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .map(f -> new FileEntry(f.getAbsolutePath(), readFileQuietly(f)))\n+                        .filter(JsonResourceReader::filterJsonFile)\n+                        .collect(Collectors.toList());\n+        }\n+    }\n+\n+    private static boolean filterJsonFile(FileEntry fileEntry)\n+    {\n+        boolean json = JSON_UTILS.isJson(fileEntry.getContent());\n+        if (!json)\n+        {\n+            LOGGER.atInfo().addArgument(fileEntry::getPath).log(\"Content of file '{}' is not JSON\");\n+        }\n+        return json;\n+    }\n+\n+    private static String readFileQuietly(File file)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNjQ1Mw==", "bodyText": "java.nio.file.Files#readString(java.nio.file.Path) ?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491036453", "createdAt": "2020-09-18T15:45:06Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .map(f -> new FileEntry(f.getAbsolutePath(), readFileQuietly(f)))\n+                        .filter(JsonResourceReader::filterJsonFile)\n+                        .collect(Collectors.toList());\n+        }\n+    }\n+\n+    private static boolean filterJsonFile(FileEntry fileEntry)\n+    {\n+        boolean json = JSON_UTILS.isJson(fileEntry.getContent());\n+        if (!json)\n+        {\n+            LOGGER.atInfo().addArgument(fileEntry::getPath).log(\"Content of file '{}' is not JSON\");\n+        }\n+        return json;\n+    }\n+\n+    private static String readFileQuietly(File file)\n+    {\n+        try\n+        {\n+            return FileUtils.readFileToString(file, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNzk3Mw==", "bodyText": "this class is not a part of XRay model", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491037973", "createdAt": "2020-09-18T15:47:36Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/model/TestCaseParameters.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d758fe83d855fc18911039676e368550158722ce", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/d758fe83d855fc18911039676e368550158722ce", "committedDate": "2020-09-18T10:37:38Z", "message": "Draft"}, "afterCommit": {"oid": "7c067220a0e9826c661a6f543d9f014788c868ec", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7c067220a0e9826c661a6f543d9f014788c868ec", "committedDate": "2020-09-18T17:21:18Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c067220a0e9826c661a6f543d9f014788c868ec", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7c067220a0e9826c661a6f543d9f014788c868ec", "committedDate": "2020-09-18T17:21:18Z", "message": "Draft"}, "afterCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/8a410b2cc0d6fb4d87754b8655a986d1de38d980", "committedDate": "2020-09-18T17:48:03Z", "message": "Draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTg2NDA0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491986404", "createdAt": "2020-09-19T09:23:11Z", "commit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOToyMzoxMlrOHUle6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOToyMzoxMlrOHUle6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM0NzY5MA==", "bodyText": "Nop... -> Noop...", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491347690", "createdAt": "2020-09-19T09:23:12Z", "author": {"login": "valfirst"}, "path": "vividus-http-client/src/main/java/org/vividus/http/context/NopHttpContextFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.http.context;\n+\n+import org.apache.http.protocol.HttpContext;\n+\n+public class NopHttpContextFactory implements HttpContextFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTg2NzE0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491986714", "createdAt": "2020-09-19T09:28:56Z", "commit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOToyODo1NlrOHUlmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOToyODo1NlrOHUlmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM0OTU2Mg==", "bodyText": "issueKey -> inwardIssueKey\nrequirementKey -> outwardIssueKey", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491349562", "createdAt": "2020-09-19T09:28:56Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraFacade.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.vividus.jira.model.IssueLink;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class JiraFacade\n+{\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private static final String ISSUE_ENDPOINT = \"/rest/api/latest/issue/\";\n+\n+    private final JiraClient jiraClient;\n+\n+    public JiraFacade(JiraClient jiraClient)\n+    {\n+        this.jiraClient = jiraClient;\n+    }\n+\n+    public String createIssue(String issueBody) throws IOException\n+    {\n+        return jiraClient.executePost(ISSUE_ENDPOINT, issueBody);\n+    }\n+\n+    public String updateIssue(String issueKey, String issueBody) throws IOException\n+    {\n+        return jiraClient.executePut(ISSUE_ENDPOINT + issueKey, issueBody);\n+    }\n+\n+    public void createIssueLink(String issueKey, String requirementKey, String type) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTg2ODA0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491986804", "createdAt": "2020-09-19T09:30:26Z", "commit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozMDoyNlrOHUloaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozMDoyNlrOHUloaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MDEyMw==", "bodyText": "XrayForJira -> Xray", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491350123", "createdAt": "2020-09-19T09:30:26Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/VividusToXrayForJiraExporterApplication.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ImportResource;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MapPropertySource;\n+import org.vividus.util.property.PropertyParser;\n+import org.vividus.xray.configuration.JiraFieldsMapping;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exporter.XrayExporter;\n+\n+@SpringBootApplication\n+@ImportResource(locations = { \"org/vividus/jira/spring.xml\", \"org/vividus/http/client/spring.xml\" })\n+@EnableConfigurationProperties({ XrayExporterOptions.class, JiraFieldsMapping.class })\n+public class VividusToXrayForJiraExporterApplication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTg2OTI4", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491986928", "createdAt": "2020-09-19T09:32:29Z", "commit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozMjoyOVrOHUlrRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozMjoyOVrOHUlrRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MDg1Mw==", "bodyText": "just do not use streams", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491350853", "createdAt": "2020-09-19T09:32:29Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.info(\"Starting to import resources from filesystem by path {}\", sourceDirectory);\n+\n+        try (Stream<Path> paths = Files.walk(sourceDirectory))\n+        {\n+            return paths.map(Path::toFile)\n+                        .filter(File::isFile)\n+                        .map(f ->\n+                        {\n+                            try\n+                            {\n+                                return new FileEntry(f.getAbsolutePath(),\n+                                        FileUtils.readFileToString(f, StandardCharsets.UTF_8));\n+                            }\n+                            catch (IOException e)\n+                            {\n+                                throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTg3MDg4", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491987088", "createdAt": "2020-09-19T09:36:02Z", "commit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozNjowMlrOHUlv4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozNjowMlrOHUlv4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MjAzMw==", "bodyText": "${jira.http-context-type}", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491352033", "createdAt": "2020-09-19T09:36:02Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"caching-credentials\" class=\"org.vividus.http.context.CachingCredentialsHttpContextFactory\" >\n+        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+    </bean>\n+\n+    <bean id=\"nop\" class=\"org.vividus.http.context.NopHttpContextFactory\" />\n+\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />\n+\n+    <bean id=\"jiraClient\" class=\"org.vividus.jira.JiraClient\">\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\" />\n+        <constructor-arg index=\"1\">\n+            <bean class=\"org.vividus.http.client.HttpClient\" factory-bean=\"httpClientFactory\"\n+                  factory-method=\"buildHttpClient\">\n+                <constructor-arg>\n+                    <bean parent=\"httpClientConfig\">\n+                        <property name=\"headersMap\">\n+                            <bean factory-bean=\"propertyParser\" factory-method=\"getPropertyValuesByPrefix\">\n+                                <constructor-arg value=\"jira.http.header.\" />\n+                            </bean>\n+                        </property>\n+                    </bean>\n+                </constructor-arg>\n+            </bean>\n+        </constructor-arg>\n+        <constructor-arg index=\"2\" ref=\"${http.context}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTg3MTQ5", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-491987149", "createdAt": "2020-09-19T09:37:16Z", "commit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozNzoxNlrOHUlxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwOTozNzoxNlrOHUlxkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1MjQ2Nw==", "bodyText": "I don't think we need to initialize mandatory properties with empty value", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491352467", "createdAt": "2020-09-19T09:37:16Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,25 @@\n+http.ssl.check-certificate=false\n+http.ssl.verify-hostname=true\n+http.circular-redirects-allowed=false\n+http.cookie-spec=default\n+http.socket-timeout=300000\n+http.idempotent-methods-sending-request-body=\n+\n+http.key-store.path=#{null}\n+http.key-store.password=\n+http.key-store.type=JKS\n+\n+http.connection-request-timeout=30000\n+http.connect-timeout=30000\n+http.max-total-connections=80\n+http.max-connections-per-route=60\n+\n+jira.username=\n+jira.password=\n+jira.endpoint=\n+\n+http.context=caching-credentials\n+\n+xray-exporter.json-results-directory=\n+xray-exporter.project-key=\n+xray-exporter.editable-statuses=In Progress, Open", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a410b2cc0d6fb4d87754b8655a986d1de38d980", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/8a410b2cc0d6fb4d87754b8655a986d1de38d980", "committedDate": "2020-09-18T17:48:03Z", "message": "Draft"}, "afterCommit": {"oid": "b7572ecfca2806827525ec2956a9f82093c31f9f", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b7572ecfca2806827525ec2956a9f82093c31f9f", "committedDate": "2020-09-19T11:14:18Z", "message": "Draft"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7572ecfca2806827525ec2956a9f82093c31f9f", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b7572ecfca2806827525ec2956a9f82093c31f9f", "committedDate": "2020-09-19T11:14:18Z", "message": "Draft"}, "afterCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "committedDate": "2020-09-19T12:52:07Z", "message": "Draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzMTQw", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183140", "createdAt": "2020-09-20T09:21:00Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOToyMTowMFrOHU5SDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOToyMTowMFrOHU5SDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MjA3OQ==", "bodyText": "SQ proposes to use anyMatch", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672079", "createdAt": "2020-09-20T09:21:00Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementId\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in non-editable '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        Path jsonResiltsDirectory = xrayExporterOptions.getJsonResultsDirectory();\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(jsonResiltsDirectory);\n+\n+        notEmpty(jsonFiles, \"The directory '%s' does not contain needed json files\", jsonResiltsDirectory);\n+        String jsonFilePaths = jsonFiles.stream().map(FileEntry::getPath).collect(Collectors.joining(\" ,\"));\n+        LOGGER.atInfo().addArgument(jsonFilePaths).log(\"JSON files: {}\");\n+        return jsonFiles;\n+    }\n+\n+    private static Set<String> getMetaValues(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return getMetaValuesStream(scenarioMeta, metaName).collect(Collectors.toCollection(LinkedHashSet::new));\n+    }\n+\n+    private static Stream<String> getMetaValuesStream(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return asStream(scenarioMeta).filter(m -> metaName.equals(m.getName()) && !m.getValue().isEmpty())\n+                                     .map(Meta::getValue)\n+                                     .map(String::trim)\n+                                     .map(value -> StringUtils.splitPreserveAllTokens(value, SEMICOLON))\n+                                     .flatMap(Stream::of)\n+                                     .map(String::trim);\n+    }\n+\n+    private static boolean isSkipped(List<Meta> scenarioMeta)\n+    {\n+        return asStream(scenarioMeta).filter(m -> \"xray.skip-export\".equals(m.getName()))\n+                                     .findFirst()\n+                                     .isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzNTM0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183534", "createdAt": "2020-09-20T09:28:19Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOToyODoyMFrOHU5UrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOToyODoyMFrOHU5UrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mjc0OA==", "bodyText": "return \"Error:\" + lineSeparator() + \"Story: \" + storyTitle  + lineSeparator() + \"Scenario: \" + scenarioTitle + lineSeparator() + FORMAT_MESSAGE", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672748", "createdAt": "2020-09-20T09:28:20Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.converter;\n+\n+import static java.lang.System.lineSeparator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.RegExUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class ManualStepConverter\n+{\n+    private static final int DOTALL_MULTILINE_MODE = Pattern.DOTALL | Pattern.MULTILINE;\n+\n+    private static final String STEP_SIGN = \"Step:\";\n+    private static final String DATA_SIGN = \"Data:\";\n+    private static final String RESULT_SIGN = \"Result:\";\n+\n+    private static final String ERROR_MESSAGE = \"Error:%nStory: %s%nScenario: %s\";\n+    private static final String FORMAT_MESSAGE =  \"Manual scenario rules:\" + lineSeparator()\n+        + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n+        + \"2. '\" + STEP_SIGN + \"' designator is required to be the first one in the manual step block\" + lineSeparator()\n+        + \"3. '\" + DATA_SIGN + \"' and '\" + RESULT_SIGN + \"' designators are optional\"  + lineSeparator()\n+        + \"4. '\" + STEP_SIGN + \"' designator is mandatory\" + lineSeparator();\n+\n+    private static final Pattern STEP_BLOCK_PATTERN = Pattern.compile(String.format(\"%1$s.*?(?=^%1$s|\\\\Z)\", STEP_SIGN),\n+            DOTALL_MULTILINE_MODE);\n+\n+    private static final String REQUIRED_PART_FORMAT = \"\\\\A%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+    private static final String OPTIONAL_PARTS_FORMAT = \"^%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+\n+    private static final Pattern STEP_PATTERN = Pattern\n+            .compile(String.format(REQUIRED_PART_FORMAT, STEP_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern DATA_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, DATA_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern RESULT_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, RESULT_SIGN, RESULT_SIGN, DATA_SIGN), DOTALL_MULTILINE_MODE);\n+\n+    public List<ManualTestStep> convert(String storyTitle, String scenarioTitle, List<Step> steps)\n+    {\n+        boolean checkPrefix = steps.stream()\n+                                   .map(Step::getOutcome)\n+                                   .allMatch(\"comment\"::equals);\n+\n+        if (!checkPrefix)\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        String manualScenario = steps.stream().map(Step::getValue)\n+                .map(v -> RegExUtils.replaceAll(v, \"!--\\\\s*-?\\\\s*\", StringUtils.EMPTY))\n+                .collect(Collectors.joining(lineSeparator()));\n+\n+        if (!manualScenario.startsWith(STEP_SIGN))\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        List<ManualTestStep> manualSteps = new ArrayList<>();\n+        Matcher stepMatcher = STEP_BLOCK_PATTERN.matcher(manualScenario);\n+        while (stepMatcher.find())\n+        {\n+            String stepBlock = stepMatcher.group();\n+            String step = extractFirstByPattern(STEP_PATTERN, stepBlock, STEP_SIGN);\n+            ManualTestStep manualTestStep = new ManualTestStep(step);\n+            extractFirstByPattern(DATA_PATTERN, stepBlock, DATA_SIGN, manualTestStep::setData);\n+            extractFirstByPattern(RESULT_PATTERN, stepBlock, RESULT_SIGN, manualTestStep::setExpectedResult);\n+            manualSteps.add(manualTestStep);\n+        }\n+        return manualSteps;\n+    }\n+\n+    private static String extractFirstByPattern(Pattern pattern, String data, String target)\n+    {\n+        Matcher matcher = pattern.matcher(data);\n+        if (matcher.find())\n+        {\n+            String matched = matcher.group(1);\n+            if (matcher.find())\n+            {\n+                throw new ManualStepConversionException(\n+                        String.format(\"Only one %s is expected to be present in the data\", target));\n+            }\n+            return matched.strip();\n+        }\n+        return null;\n+    }\n+\n+    private static void extractFirstByPattern(Pattern pattern, String data, String target,\n+            Consumer<String> valueConsumer)\n+    {\n+        Optional.ofNullable(extractFirstByPattern(pattern, data, target)).ifPresent(valueConsumer);\n+    }\n+\n+    private static String getErrorMessage(String storyTitle, String scenarioTitle)\n+    {\n+        String header = String.format(ERROR_MESSAGE, storyTitle, scenarioTitle);\n+        return header + lineSeparator() + FORMAT_MESSAGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzNjM5", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183639", "createdAt": "2020-09-20T09:30:22Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMDoyM1rOHU5Vbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMDoyM1rOHU5Vbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mjk0Mg==", "bodyText": "Starting import of resources...", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672942", "createdAt": "2020-09-20T09:30:23Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Starting to import resources from filesystem by path {}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzNjY1", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183665", "createdAt": "2020-09-20T09:30:49Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMDo0OVrOHU5VnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMDo0OVrOHU5VnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mjk4OA==", "bodyText": "If start of something is logged, then we should log ending as well", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491672988", "createdAt": "2020-09-20T09:30:49Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/reader/JsonResourceReader.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.reader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.util.json.JsonUtils;\n+\n+public final class JsonResourceReader\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JsonResourceReader.class);\n+\n+    private static final JsonUtils JSON_UTILS = new JsonUtils();\n+\n+    private JsonResourceReader()\n+    {\n+    }\n+\n+    public static List<FileEntry> readFrom(Path sourceDirectory) throws IOException\n+    {\n+        LOGGER.atInfo().addArgument(sourceDirectory).log(\"Starting to import resources from filesystem by path {}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzNzU5", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183759", "createdAt": "2020-09-20T09:33:03Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMzowM1rOHU5WKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMzowM1rOHU5WKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzEzMQ==", "bodyText": "I recommend to replace the mock with actual instance of the class", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673131", "createdAt": "2020-09-20T09:33:03Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.github.valfirst.slf4jtest.TestLogger;\n+import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class XrayFacadeTests\n+{\n+    private static final String ISSUE_ID = \"issue id\";\n+    private static final String BODY = \"{}\";\n+    private static final String STORY_TITLE = \"storyTitle\";\n+    private static final String SCENARIO_TITLE = \"scenarioTitle\";\n+    private static final String PROJECT_KEY = \"project key\";\n+\n+    @Captor private ArgumentCaptor<ManualTestCase> manualTestCaseCaptor;\n+\n+    @Mock private ManualTestCaseSerializer manualTestSerializer;\n+    @Mock private XrayExporterOptions xrayExporterOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzNzcw", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183770", "createdAt": "2020-09-20T09:33:20Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMzoyMFrOHU5WMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozMzoyMFrOHU5WMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzEzOQ==", "bodyText": "I recommend to replace the mock with actual instance of the class", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673139", "createdAt": "2020-09-20T09:33:20Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/exporter/XrayExporterTests.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static com.github.valfirst.slf4jtest.LoggingEvent.error;\n+import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.github.valfirst.slf4jtest.LoggingEvent;\n+import com.github.valfirst.slf4jtest.TestLogger;\n+import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class XrayExporterTests\n+{\n+    private static final String OPEN_STATUS = \"Open\";\n+    private static final String ISSUE_ID = \"STUB-0\";\n+    private static final String SCENARIO_TITLE = \"Dummy scenario\";\n+    private static final String STORY_TITLE = \"storyPath\";\n+\n+    private static final String COMPONENTS_LABELS_TCI_JSON = \"componentslabelsupdatabletci\";\n+\n+    @Captor private ArgumentCaptor<TestCaseParameters> testCaseParametersCaptor;\n+\n+    @Mock private XrayExporterOptions xrayExporterOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTgzOTUz", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492183953", "createdAt": "2020-09-20T09:37:46Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozNzo0NlrOHU5XhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTozNzo0NlrOHU5XhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzQ3Nw==", "bodyText": "generator.writeObjectField(FIELDS, manualTestStep)?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673477", "createdAt": "2020-09-20T09:37:46Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/databind/ManualTestCaseSerializer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.databind;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.xray.configuration.JiraFieldsMapping;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class ManualTestCaseSerializer extends JsonSerializer<ManualTestCase>\n+{\n+    private static final String FIELDS = \"fields\";\n+    private static final String NAME = \"name\";\n+\n+    @Autowired private JiraFieldsMapping jiraFieldsMapping;\n+\n+    @Override\n+    public void serialize(ManualTestCase manualTest, JsonGenerator generator, SerializerProvider serializers)\n+            throws IOException\n+    {\n+        generator.writeStartObject();\n+        generator.writeObjectFieldStart(FIELDS);\n+\n+        writeObjectWithField(generator, \"project\", \"key\", manualTest.getProjectKey());\n+\n+        writeObjectWithField(generator, \"issuetype\", NAME, \"Test\");\n+\n+        writeObjectWithField(generator, jiraFieldsMapping.getTestCaseType(), \"value\", \"Manual\");\n+\n+        generator.writeStringField(\"summary\", manualTest.getSummary());\n+\n+        writeJsonArray(generator, \"labels\", manualTest.getLabels(), false);\n+\n+        writeJsonArray(generator, \"components\", manualTest.getComponents(), true);\n+\n+        List<ManualTestStep> manualTestSteps = manualTest.getManualTestSteps();\n+\n+        generator.writeObjectFieldStart(jiraFieldsMapping.getManualSteps());\n+        generator.writeArrayFieldStart(\"steps\");\n+        for (int stepIndex = 0; stepIndex < manualTestSteps.size(); stepIndex++)\n+        {\n+            ManualTestStep manualTestStep = manualTestSteps.get(stepIndex);\n+            generator.writeStartObject();\n+            generator.writeNumberField(\"index\", stepIndex + 1);\n+            generator.writeObjectFieldStart(FIELDS);\n+            generator.writeStringField(\"Action\", manualTestStep.getAction());\n+            generator.writeStringField(\"Data\", manualTestStep.getData());\n+            generator.writeStringField(\"Expected Result\", manualTestStep.getExpectedResult());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTg0MTI0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492184124", "createdAt": "2020-09-20T09:41:29Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTo0MToyOVrOHU5YnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTo0MToyOVrOHU5YnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3Mzc1Nw==", "bodyText": "testCaseId -> testCaseKey?\nI think we don't use IDs", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491673757", "createdAt": "2020-09-20T09:41:29Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private ManualStepConverter manualStepAdapter;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private ObjectMapper objectMapper;\n+\n+    @PostConstruct\n+    public void init()\n+    {\n+        objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseId, TestCaseParameters testCaseParameters) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTg0NTE0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492184514", "createdAt": "2020-09-20T09:50:48Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTo1MDo0OVrOHU5bPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTo1MDo0OVrOHU5bPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3NDQyOA==", "bodyText": "we need to be consistent in all log messages: json-> JSON", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491674428", "createdAt": "2020-09-20T09:50:49Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);\n+                if (testCaseId != null)\n+                {\n+                    updateTestCase(testCaseId, parameters);\n+                }\n+                else\n+                {\n+                    testCaseId = xrayFacade.createTestCase(parameters);\n+                }\n+\n+                for (String requirementId : getMetaValues(scenarioMeta, \"requirementId\"))\n+                {\n+                    jiraFacade.createIssueLink(testCaseId, requirementId, \"Tests\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters) throws IOException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            LOGGER.atError().addArgument(testCaseId)\n+                            .addArgument(status)\n+                            .log(\"Issue {} is in non-editable '{}' status\");\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        Path jsonResiltsDirectory = xrayExporterOptions.getJsonResultsDirectory();\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(jsonResiltsDirectory);\n+\n+        notEmpty(jsonFiles, \"The directory '%s' does not contain needed json files\", jsonResiltsDirectory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTg0NTk5", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492184599", "createdAt": "2020-09-20T09:52:45Z", "commit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTo1Mjo0NVrOHU5buA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwOTo1Mjo0NVrOHU5buA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3NDU1Mg==", "bodyText": "open question: do we need to support mapping of multiple test cases to single scenario", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491674552", "createdAt": "2020-09-20T09:52:45Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String storyTitle = story.getPath();\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .addArgument(storyTitle)\n+                          .log(\"Skip export of {} scenario in {} story\");\n+                    continue;\n+                }\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                String testCaseId = getMetaValuesStream(scenarioMeta, \"testCaseId\").findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/4e20f4063abe82c3e6f3a8be922e6b60e6a292df", "committedDate": "2020-09-19T12:52:07Z", "message": "Draft"}, "afterCommit": {"oid": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "committedDate": "2020-09-21T08:50:21Z", "message": "Draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDA0NDkx", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492404491", "createdAt": "2020-09-21T09:08:34Z", "commit": {"oid": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTowODozNFrOHVGuDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTowODozNFrOHVGuDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MjIzOA==", "bodyText": "I'm sorry for confusion, let's rename the property one more time: jira.http.context-type (it will bring consistency with other jira.http.* properties)", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r491892238", "createdAt": "2020-09-21T09:08:34Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"\n+       default-lazy-init=\"true\">\n+\n+    <bean id=\"caching-credentials\" class=\"org.vividus.http.context.CachingCredentialsHttpContextFactory\" >\n+        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+    </bean>\n+\n+    <bean id=\"noop\" class=\"org.vividus.http.context.NoopHttpContextFactory\" />\n+\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />\n+\n+    <bean id=\"jiraClient\" class=\"org.vividus.jira.JiraClient\">\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\" />\n+        <constructor-arg index=\"1\">\n+            <bean class=\"org.vividus.http.client.HttpClient\" factory-bean=\"httpClientFactory\"\n+                  factory-method=\"buildHttpClient\">\n+                <constructor-arg>\n+                    <bean parent=\"httpClientConfig\">\n+                        <property name=\"headersMap\">\n+                            <bean factory-bean=\"propertyParser\" factory-method=\"getPropertyValuesByPrefix\">\n+                                <constructor-arg value=\"jira.http.header.\" />\n+                            </bean>\n+                        </property>\n+                    </bean>\n+                </constructor-arg>\n+            </bean>\n+        </constructor-arg>\n+        <constructor-arg index=\"2\" ref=\"${jira.http-context-type}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/2ea27ddd4faac7d2b1e80ccf984b6a96fa530048", "committedDate": "2020-09-21T08:50:21Z", "message": "Draft"}, "afterCommit": {"oid": "7ed64f77abcd5d6b6f383917db84ea10f13be514", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7ed64f77abcd5d6b6f383917db84ea10f13be514", "committedDate": "2020-09-21T10:27:25Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ed64f77abcd5d6b6f383917db84ea10f13be514", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7ed64f77abcd5d6b6f383917db84ea10f13be514", "committedDate": "2020-09-21T10:27:25Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "64d9361469f9a2c4db36eb9f7edabdfc18fd84e3", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/64d9361469f9a2c4db36eb9f7edabdfc18fd84e3", "committedDate": "2020-09-21T11:51:22Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64d9361469f9a2c4db36eb9f7edabdfc18fd84e3", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/64d9361469f9a2c4db36eb9f7edabdfc18fd84e3", "committedDate": "2020-09-21T11:51:22Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "97ae7db62959d8b9d49d56fe32142087d7fa1603", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/97ae7db62959d8b9d49d56fe32142087d7fa1603", "committedDate": "2020-09-21T14:19:13Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97ae7db62959d8b9d49d56fe32142087d7fa1603", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/97ae7db62959d8b9d49d56fe32142087d7fa1603", "committedDate": "2020-09-21T14:19:13Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5cae97adad1fc93ca799c94aa2cd0d3d6af85335", "committedDate": "2020-09-21T14:28:43Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjkzNzE2", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-492693716", "createdAt": "2020-09-21T14:50:34Z", "commit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1MDozNFrOHVT98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNjo0NlrOHVVwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwOTI5Ng==", "bodyText": "I believe you should put here a description and purpose of the exporter", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492109296", "createdAt": "2020-09-21T14:50:34Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyODY4NA==", "bodyText": "please provide clear explanation what these results are and how to collect them", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492128684", "createdAt": "2020-09-21T15:08:04Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyOTEwNA==", "bodyText": "what is this key used for?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492129104", "createdAt": "2020-09-21T15:08:26Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyOTc4NQ==", "bodyText": "let's leave default statuses empty", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492129785", "createdAt": "2020-09-21T15:09:02Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update, default values are `Pending`, `Open`, `In Progress`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMDAzOA==", "bodyText": "let's leave default statuses empty", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492130038", "createdAt": "2020-09-21T15:09:15Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,22 @@\n+http.ssl.check-certificate=false\n+http.ssl.verify-hostname=true\n+http.circular-redirects-allowed=false\n+http.cookie-spec=default\n+http.socket-timeout=300000\n+http.idempotent-methods-sending-request-body=\n+\n+http.key-store.path=#{null}\n+http.key-store.password=\n+http.key-store.type=JKS\n+\n+http.connection-request-timeout=30000\n+http.connect-timeout=30000\n+http.max-total-connections=80\n+http.max-connections-per-route=60\n+\n+jira.username=\n+jira.password=\n+\n+jira.http.context-type=caching-credentials\n+\n+xray-exporter.editable-statuses=Pending, Open, In Progress", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzMTcwMQ==", "bodyText": "please provide clear description on how to find this mapping", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492131701", "createdAt": "2020-09-21T15:10:38Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update, default values are `Pending`, `Open`, `In Progress`\n+\n+|===\n+\n+== Jira Fields Mapping Properties\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Description\n+\n+|`jira.fields-mapping.test-case-type`\n+|Key of a field containing test case type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNjQyMQ==", "bodyText": "please provide clear description on how to find this mapping", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492136421", "createdAt": "2020-09-21T15:14:55Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update, default values are `Pending`, `Open`, `In Progress`\n+\n+|===\n+\n+== Jira Fields Mapping Properties\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Description\n+\n+|`jira.fields-mapping.test-case-type`\n+|Key of a field containing test case type\n+\n+|`jira.fields-mapping.manual-steps`\n+|Key of a field containing collection of manual steps", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNjY0NQ==", "bodyText": "what is used for?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492136645", "createdAt": "2020-09-21T15:15:06Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update, default values are `Pending`, `Open`, `In Progress`\n+\n+|===\n+\n+== Jira Fields Mapping Properties\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Description\n+\n+|`jira.fields-mapping.test-case-type`\n+|Key of a field containing test case type\n+\n+|`jira.fields-mapping.manual-steps`\n+|Key of a field containing collection of manual steps\n+\n+|===\n+\n+== Jira properties\n+\n+[cols=\"1,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|jira.username\n+|Only if `caching-credentials` auth is used\n+|JIRA username", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNzUwOA==", "bodyText": "what are available values?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492137508", "createdAt": "2020-09-21T15:15:51Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update, default values are `Pending`, `Open`, `In Progress`\n+\n+|===\n+\n+== Jira Fields Mapping Properties\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Description\n+\n+|`jira.fields-mapping.test-case-type`\n+|Key of a field containing test case type\n+\n+|`jira.fields-mapping.manual-steps`\n+|Key of a field containing collection of manual steps\n+\n+|===\n+\n+== Jira properties\n+\n+[cols=\"1,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|jira.username\n+|Only if `caching-credentials` auth is used\n+|JIRA username\n+\n+|jira.password\n+|Only if `caching-credentials` auth is used\n+|JIRA password\n+\n+|jira.endpoint\n+|true\n+|JIRA URL e.g. `https://jira.example.com/`\n+\n+|jira.http.context-type\n+|false\n+|defined JIRA authorization mechanism, default value is `caching-credentials`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzODU4Nw==", "bodyText": "description should go before example", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492138587", "createdAt": "2020-09-21T15:16:46Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,156 @@\n+= Xray Exporter\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+|Path to directory with test execution JSON results\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a JIRA project to work with\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update, default values are `Pending`, `Open`, `In Progress`\n+\n+|===\n+\n+== Jira Fields Mapping Properties\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Description\n+\n+|`jira.fields-mapping.test-case-type`\n+|Key of a field containing test case type\n+\n+|`jira.fields-mapping.manual-steps`\n+|Key of a field containing collection of manual steps\n+\n+|===\n+\n+== Jira properties\n+\n+[cols=\"1,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|jira.username\n+|Only if `caching-credentials` auth is used\n+|JIRA username\n+\n+|jira.password\n+|Only if `caching-credentials` auth is used\n+|JIRA password\n+\n+|jira.endpoint\n+|true\n+|JIRA URL e.g. `https://jira.example.com/`\n+\n+|jira.http.context-type\n+|false\n+|defined JIRA authorization mechanism, default value is `caching-credentials`\n+\n+|===\n+\n+== Authorization\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Name\n+|Description\n+\n+|noop\n+|Used if JIRA endpoing is hidden behind SSO and the only way to access the endpoint is to use custom authorization flows or cookies\n+\n+|caching-credentials\n+|Authorize in JIRA using client username and password\n+\n+|===\n+\n+== Manual Test Cases\n+\n+=== Example\n+\n+```gherkin\n+!-- Step: Go to the test item with the following id\n+!-- Data: 39914061\n+!-- Result: The current stock is 1\n+\n+!-- Step: Add the item to the shopping cart\n+!-- Result: Shopping cart now displays one 39914061 item and no items in stock\n+\n+!-- Step: In the backoffice app update the stock to 0 on item\n+\n+!-- Step: Back in the browser, proceed to checkout.\n+!-- Go through all the steps and confirm the payment method.\n+!-- Result: You should get an error message mentioning that there are no more items in the stock.\n+!-- The payment method was not made\n+```\n+\n+=== Rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cae97adad1fc93ca799c94aa2cd0d3d6af85335", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5cae97adad1fc93ca799c94aa2cd0d3d6af85335", "committedDate": "2020-09-21T14:28:43Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "71f642d6a532f5db4eeb48d37ee0a0fc6c746986", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/71f642d6a532f5db4eeb48d37ee0a0fc6c746986", "committedDate": "2020-09-21T16:01:07Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71f642d6a532f5db4eeb48d37ee0a0fc6c746986", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/71f642d6a532f5db4eeb48d37ee0a0fc6c746986", "committedDate": "2020-09-21T16:01:07Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "874fb4089fea4552975b51b261787427a2bc2ac8", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/874fb4089fea4552975b51b261787427a2bc2ac8", "committedDate": "2020-09-22T07:09:27Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "874fb4089fea4552975b51b261787427a2bc2ac8", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/874fb4089fea4552975b51b261787427a2bc2ac8", "committedDate": "2020-09-22T07:09:27Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "19377505e1c91b62e8d126fe2ca0da063e883bf4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/19377505e1c91b62e8d126fe2ca0da063e883bf4", "committedDate": "2020-09-22T07:10:38Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19377505e1c91b62e8d126fe2ca0da063e883bf4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/19377505e1c91b62e8d126fe2ca0da063e883bf4", "committedDate": "2020-09-22T07:10:38Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/fe60f21eb8239135eea3334f21c01dca4bd044f7", "committedDate": "2020-09-22T07:17:30Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/fe60f21eb8239135eea3334f21c01dca4bd044f7", "committedDate": "2020-09-22T07:17:30Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "a022e436de41f15e04084dccb670515a471723a4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a022e436de41f15e04084dccb670515a471723a4", "committedDate": "2020-09-22T08:16:43Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a022e436de41f15e04084dccb670515a471723a4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a022e436de41f15e04084dccb670515a471723a4", "committedDate": "2020-09-22T08:16:43Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "3d5fa48324174328ff22d2700e762301a241d091", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3d5fa48324174328ff22d2700e762301a241d091", "committedDate": "2020-09-22T08:19:01Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMjE3MTk4", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-493217198", "createdAt": "2020-09-22T08:08:49Z", "commit": {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODowODo0OVrOHVutTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMDowMVrOHVvHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0NzQwNw==", "bodyText": "why is RuntimeException?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492547407", "createdAt": "2020-09-22T08:08:49Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/converter/ManualStepConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.converter;\n+\n+import static java.lang.System.lineSeparator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.RegExUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class ManualStepConverter\n+{\n+    private static final int DOTALL_MULTILINE_MODE = Pattern.DOTALL | Pattern.MULTILINE;\n+\n+    private static final String STEP_SIGN = \"Step:\";\n+    private static final String DATA_SIGN = \"Data:\";\n+    private static final String RESULT_SIGN = \"Result:\";\n+\n+    private static final String FORMAT_MESSAGE =  \"Manual scenario rules:\" + lineSeparator()\n+        + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n+        + \"2. '\" + STEP_SIGN + \"' designator is required to be the first one in the manual step block\" + lineSeparator()\n+        + \"3. '\" + DATA_SIGN + \"' and '\" + RESULT_SIGN + \"' designators are optional\"  + lineSeparator()\n+        + \"4. '\" + STEP_SIGN + \"' designator is mandatory\" + lineSeparator();\n+\n+    private static final Pattern STEP_BLOCK_PATTERN = Pattern.compile(String.format(\"%1$s.*?(?=^%1$s|\\\\Z)\", STEP_SIGN),\n+            DOTALL_MULTILINE_MODE);\n+\n+    private static final String REQUIRED_PART_FORMAT = \"\\\\A%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+    private static final String OPTIONAL_PARTS_FORMAT = \"^%s(.*?)(?=^%s|^%s|\\\\Z)\";\n+\n+    private static final Pattern STEP_PATTERN = Pattern\n+            .compile(String.format(REQUIRED_PART_FORMAT, STEP_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern DATA_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, DATA_SIGN, DATA_SIGN, RESULT_SIGN), DOTALL_MULTILINE_MODE);\n+    private static final Pattern RESULT_PATTERN = Pattern\n+            .compile(String.format(OPTIONAL_PARTS_FORMAT, RESULT_SIGN, RESULT_SIGN, DATA_SIGN), DOTALL_MULTILINE_MODE);\n+\n+    public List<ManualTestStep> convert(String storyTitle, String scenarioTitle, List<Step> steps)\n+    {\n+        boolean checkPrefix = steps.stream()\n+                                   .map(Step::getOutcome)\n+                                   .allMatch(\"comment\"::equals);\n+\n+        if (!checkPrefix)\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        String manualScenario = steps.stream().map(Step::getValue)\n+                .map(v -> RegExUtils.replaceAll(v, \"!--\\\\s*-?\\\\s*\", StringUtils.EMPTY))\n+                .collect(Collectors.joining(lineSeparator()));\n+\n+        if (!manualScenario.startsWith(STEP_SIGN))\n+        {\n+            throw new ManualStepConversionException(getErrorMessage(storyTitle, scenarioTitle));\n+        }\n+\n+        List<ManualTestStep> manualSteps = new ArrayList<>();\n+        Matcher stepMatcher = STEP_BLOCK_PATTERN.matcher(manualScenario);\n+        while (stepMatcher.find())\n+        {\n+            String stepBlock = stepMatcher.group();\n+            String step = extractFirstByPattern(STEP_PATTERN, stepBlock, STEP_SIGN);\n+            ManualTestStep manualTestStep = new ManualTestStep(step);\n+            extractFirstByPattern(DATA_PATTERN, stepBlock, DATA_SIGN, manualTestStep::setData);\n+            extractFirstByPattern(RESULT_PATTERN, stepBlock, RESULT_SIGN, manualTestStep::setExpectedResult);\n+            manualSteps.add(manualTestStep);\n+        }\n+        return manualSteps;\n+    }\n+\n+    private static String extractFirstByPattern(Pattern pattern, String data, String target)\n+    {\n+        Matcher matcher = pattern.matcher(data);\n+        if (matcher.find())\n+        {\n+            String matched = matcher.group(1);\n+            if (matcher.find())\n+            {\n+                throw new ManualStepConversionException(\n+                        String.format(\"Only one %s is expected to be present in the data\", target));\n+            }\n+            return matched.strip();\n+        }\n+        return null;\n+    }\n+\n+    private static void extractFirstByPattern(Pattern pattern, String data, String target,\n+            Consumer<String> valueConsumer)\n+    {\n+        Optional.ofNullable(extractFirstByPattern(pattern, data, target)).ifPresent(valueConsumer);\n+    }\n+\n+    private static String getErrorMessage(String storyTitle, String scenarioTitle)\n+    {\n+        return \"Error:\" + lineSeparator() + \"Story: \" + storyTitle + lineSeparator() + \"Scenario: \" + scenarioTitle\n+                + lineSeparator() + FORMAT_MESSAGE;\n+    }\n+\n+    public static class ManualStepConversionException extends RuntimeException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0ODUxOQ==", "bodyText": "manualStepAdapter -> manualStepConverter", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492548519", "createdAt": "2020-09-22T08:10:38Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private ManualStepConverter manualStepAdapter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1MjEwNg==", "bodyText": "do you really need logging to file?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492552106", "createdAt": "2020-09-22T08:16:32Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\">\n+    <Appenders>\n+        <Console name=\"console\">\n+            <PatternLayout pattern=\"%highlight{%d [%t] %-5p %c - %m%n}\" />\n+        </Console>\n+        <RollingFile name=\"file\" fileName=\"output/logs/log4.log\" filePattern=\"output/logs/log4j.%i.log\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe60f21eb8239135eea3334f21c01dca4bd044f7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1MjY2OA==", "bodyText": "keep the same naming: XRay or Xray", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492552668", "createdAt": "2020-09-22T08:17:34Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,48 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.3.RELEASE')\n+    }\n+}\n+apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin\n+apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin\n+\n+project.description = 'Vividus to XRay exporter'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a022e436de41f15e04084dccb670515a471723a4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1MzUxOQ==", "bodyText": "add a comment:\nThe publishing is skipped due to bintray restrictions: https://stackoverflow.com/questions/60602428/unable-to-add-bintray-package-to-jcenter-and-oss-jfrog", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492553519", "createdAt": "2020-09-22T08:19:00Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,48 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.3.RELEASE')\n+    }\n+}\n+apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin\n+apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin\n+\n+project.description = 'Vividus to XRay exporter'\n+\n+configurations.testCompile {\n+    exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j18-impl'\n+}\n+\n+configurations.all {\n+    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'\n+}\n+\n+dependencies {\n+    implementation project(':vividus-http-client')\n+    implementation project(':vividus-util')\n+    implementation project(':vividus-bdd-engine')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-validation')\n+\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+    implementation platform(group: 'org.apache.logging.log4j', name: 'log4j-bom', version: '2.13.3')\n+    implementation(group: 'org.apache.logging.log4j', name: 'log4j-api')\n+    implementation(group: 'org.apache.logging.log4j', name: 'log4j-core')\n+    implementation(group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl')\n+\n+    implementation(group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3)\n+\n+    testImplementation platform(group: 'org.junit', name: 'junit-bom', version: versions.junit)\n+    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter')\n+    testImplementation(group: 'org.mockito', name: 'mockito-core', version: versions.mockito)\n+    testImplementation(group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito)\n+    testImplementation(group: 'org.hamcrest', name: 'hamcrest', version: versions.hamcrest)\n+    testImplementation(group: 'com.github.valfirst', name: 'slf4j-test', version: versions.slf4jTest)\n+}\n+\n+artifactoryPublish {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a022e436de41f15e04084dccb670515a471723a4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NDExOA==", "bodyText": "manualStepAdapter -> manualStepConverter", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492554118", "createdAt": "2020-09-22T08:20:01Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/facade/XrayFacadeTests.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import static com.github.valfirst.slf4jtest.LoggingEvent.info;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.github.valfirst.slf4jtest.TestLogger;\n+import com.github.valfirst.slf4jtest.TestLoggerFactory;\n+import com.github.valfirst.slf4jtest.TestLoggerFactoryExtension;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@ExtendWith({ MockitoExtension.class, TestLoggerFactoryExtension.class })\n+class XrayFacadeTests\n+{\n+    private static final String ISSUE_ID = \"issue id\";\n+    private static final String BODY = \"{}\";\n+    private static final String STORY_TITLE = \"storyTitle\";\n+    private static final String SCENARIO_TITLE = \"scenarioTitle\";\n+    private static final String PROJECT_KEY = \"project key\";\n+\n+    @Captor private ArgumentCaptor<ManualTestCase> manualTestCaseCaptor;\n+\n+    @Mock private ManualTestCaseSerializer manualTestSerializer;\n+    @Spy private XrayExporterOptions xrayExporterOptions;\n+    @Mock private ManualStepConverter manualStepAdapter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5fa48324174328ff22d2700e762301a241d091"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d5fa48324174328ff22d2700e762301a241d091", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3d5fa48324174328ff22d2700e762301a241d091", "committedDate": "2020-09-22T08:19:01Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "1041e5771c6c5b4133264a1a37afeecc428a2d8b", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/1041e5771c6c5b4133264a1a37afeecc428a2d8b", "committedDate": "2020-09-22T10:07:22Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1041e5771c6c5b4133264a1a37afeecc428a2d8b", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/1041e5771c6c5b4133264a1a37afeecc428a2d8b", "committedDate": "2020-09-22T10:07:22Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "523fb36e75f0ba92d9678937c3a31e12b1c2ea3e", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/523fb36e75f0ba92d9678937c3a31e12b1c2ea3e", "committedDate": "2020-09-22T10:22:02Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "523fb36e75f0ba92d9678937c3a31e12b1c2ea3e", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/523fb36e75f0ba92d9678937c3a31e12b1c2ea3e", "committedDate": "2020-09-22T10:22:02Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "9de2347fe255be1ab16ae66fa28d426fc79bf122", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9de2347fe255be1ab16ae66fa28d426fc79bf122", "committedDate": "2020-09-22T10:56:59Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9de2347fe255be1ab16ae66fa28d426fc79bf122", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9de2347fe255be1ab16ae66fa28d426fc79bf122", "committedDate": "2020-09-22T10:56:59Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5e8acc842dd806f479feb0117f0a988e6acbd174", "committedDate": "2020-09-22T11:06:08Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDkzNDY3", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-493493467", "createdAt": "2020-09-22T14:02:16Z", "commit": {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDowMjoxNlrOHV7qCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDowNjoyM1rOHV72XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1OTU2Mg==", "bodyText": "just SyntaxException ?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492759562", "createdAt": "2020-09-22T14:02:16Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exception/XrayExporterSyntaxException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exception;\n+\n+public class XrayExporterSyntaxException extends Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2MDEzOQ==", "bodyText": "either put dot . after each log statement or nowhere", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492760139", "createdAt": "2020-09-22T14:03:07Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo()\n+                  .addArgument(story::getPath)\n+                  .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo()\n+                          .addArgument(scenarioTitle)\n+                          .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo()\n+                      .addArgument(scenarioTitle)\n+                      .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null && updateTestCase(testCaseId, parameters))\n+                    {\n+                        createTestsLink(testCaseId, scenarioMeta);\n+                    }\n+                    else if (testCaseId == null)\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                        createTestsLink(testCaseId, scenarioMeta);\n+                    }\n+                }\n+                catch (IOException | XrayExporterSyntaxException e)\n+                {\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2MjcxNw==", "bodyText": "adapter -> converter", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492762717", "createdAt": "2020-09-22T14:06:23Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/test/java/org/vividus/xray/converter/ManualStepConverterTests.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.converter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.vividus.bdd.model.jbehave.Step;\n+import org.vividus.xray.exception.XrayExporterSyntaxException;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+class ManualStepConverterTests\n+{\n+    private static final String STORY_TITLE = \"story title\";\n+    private static final String SCENARIO_TITLE = \"scenario title\";\n+    private static final String ERROR_MESSAGE = \"Error:\" + lineSeparator() + \"Story: \" + STORY_TITLE + lineSeparator()\n+        + \"Scenario: \" + SCENARIO_TITLE + lineSeparator()\n+        + \"Manual scenario rules:\" + lineSeparator()\n+        + \"1. Manual scenario entries must be prepended with '!-- ' sequence\" + lineSeparator()\n+        + \"2. 'Step:' designator is required to be the first one in the manual step block\" + lineSeparator()\n+        + \"3. 'Data:' and 'Result:' designators are optional\"  + lineSeparator()\n+        + \"4. 'Step:' designator is mandatory\" + lineSeparator();\n+    private static final String DUPLICATE_ENTRY_MESSAGE = \"Only one %s is expected to be present in the data\";\n+\n+    private static final String ESCAPE = \"- \";\n+    private static final String PREFIX = \"!-- \";\n+    private static final String STEP = \"step\";\n+    private static final String DATA = \"data\";\n+    private static final String RESULT = \"result\";\n+    private static final String STEP_ENTRY = PREFIX + \"Step: \" + STEP;\n+    private static final String DATA_ENTRY = PREFIX + \"Data: \" + DATA;\n+    private static final String RESULT_ENTRY = PREFIX + \"Result: \" + RESULT;\n+    private static final String ADDITIONAL_DATA = \"additional data\";\n+\n+    private final ManualStepConverter adapter = new ManualStepConverter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e8acc842dd806f479feb0117f0a988e6acbd174", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5e8acc842dd806f479feb0117f0a988e6acbd174", "committedDate": "2020-09-22T11:06:08Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3025e22fe31924484f05d50027808b8463caa434", "committedDate": "2020-09-22T14:34:50Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTQ4NTAz", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-493548503", "createdAt": "2020-09-22T14:52:43Z", "commit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo1Mjo0M1rOHV-I5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTowNTowOFrOHV-xKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMDIzMQ==", "bodyText": "whose -> which?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492800231", "createdAt": "2020-09-22T14:52:43Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,185 @@\n+= Xray Exporter\n+\n+Xray Exporter is a tool used to export test cases into Jira Xray Plugin. \n+\n+Features:\n+\n+* Create and update https://docs.getxray.app/display/XRAY/Test#Test-ManualTests[manual test] cases\n+* Set Jira labels for test cases\n+* Set Jira components for test cases\n+* Link test cases to stories they belong to\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+a|Path to directory with test execution JSON results.\n+\n+The path is managed by the `bdd.report-directory` property whose default value is `output/reports/jbehave` relatively to the tests directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMDg0Mg==", "bodyText": "\"is set to JSON\" -> \"includes JSON\"?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492800842", "createdAt": "2020-09-22T14:53:28Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,185 @@\n+= Xray Exporter\n+\n+Xray Exporter is a tool used to export test cases into Jira Xray Plugin. \n+\n+Features:\n+\n+* Create and update https://docs.getxray.app/display/XRAY/Test#Test-ManualTests[manual test] cases\n+* Set Jira labels for test cases\n+* Set Jira components for test cases\n+* Link test cases to stories they belong to\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+a|Path to directory with test execution JSON results.\n+\n+The path is managed by the `bdd.report-directory` property whose default value is `output/reports/jbehave` relatively to the tests directory.\n+\n+Please make sure that the `bdd.configuration.formats` property is set to JSON in order to generate test execution results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMjUyMg==", "bodyText": "endpoing -> ednpoint", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492802522", "createdAt": "2020-09-22T14:55:25Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/xray-exporter.adoc", "diffHunk": "@@ -0,0 +1,185 @@\n+= Xray Exporter\n+\n+Xray Exporter is a tool used to export test cases into Jira Xray Plugin. \n+\n+Features:\n+\n+* Create and update https://docs.getxray.app/display/XRAY/Test#Test-ManualTests[manual test] cases\n+* Set Jira labels for test cases\n+* Set Jira components for test cases\n+* Link test cases to stories they belong to\n+\n+== Xray Export Properties\n+\n+[cols=\"2,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`xray-exporter.json-results-directory`\n+|true\n+a|Path to directory with test execution JSON results.\n+\n+The path is managed by the `bdd.report-directory` property whose default value is `output/reports/jbehave` relatively to the tests directory.\n+\n+Please make sure that the `bdd.configuration.formats` property is set to JSON in order to generate test execution results.\n+\n+|`xray-exporter.project-key`\n+|true\n+|Key of a Jira project where new test cases should be created\n+\n+|`xray-exporter.editable-statuses`\n+|false\n+|Statuses of test cases allowed to update\n+\n+|===\n+\n+== Jira Fields Mapping Properties\n+\n+The Xray is a Jira plugin that uses custom Jira fields for it's data, one of the ways to find out custom field names for particular field used by Xray on Jira UI (if access to Jira configuration is prohibited) is to request description of some issue like https://jira.example.com/rest/api/latest/issue/DUMMY-1.\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Property\n+|Description\n+\n+|`jira.fields-mapping.test-case-type`\n+|Key of a field containing test case type\n+\n+|`jira.fields-mapping.manual-steps`\n+|Key of a field containing collection of manual steps\n+\n+|===\n+\n+== Authorization\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Name\n+|Description\n+\n+|[#noop-link]`noop`\n+|Used if Jira endpoing is hidden behind SSO and the only way to access the endpoint is to use custom authorization flows or cookies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNTIxNw==", "bodyText": "I don't see much profit to align logging statements in list-like view if they can be placed on a single line", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492805217", "createdAt": "2020-09-22T14:58:41Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/jira/JiraClient.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.jira;\n+\n+import java.io.IOException;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.protocol.HttpContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.HttpRequestBuilder;\n+import org.vividus.http.client.HttpResponse;\n+import org.vividus.http.client.IHttpClient;\n+import org.vividus.http.context.HttpContextFactory;\n+\n+public class JiraClient\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JiraClient.class);\n+\n+    private final String endpoint;\n+    private final IHttpClient httpClient;\n+    private final HttpContextFactory httpContextFactory;\n+\n+    public JiraClient(String endpoint, IHttpClient httpClient, HttpContextFactory httpContextFactory)\n+    {\n+        this.endpoint = endpoint;\n+        this.httpClient = httpClient;\n+        this.httpContextFactory = httpContextFactory;\n+    }\n+\n+    public String executeGet(String relativeUrl) throws IOException\n+    {\n+        return execute(HttpMethod.GET, relativeUrl, (HttpEntity) null);\n+    }\n+\n+    public String executePost(String relativeUrl, String requestBody) throws IOException\n+    {\n+        return execute(HttpMethod.POST, relativeUrl, requestBody);\n+    }\n+\n+    public String executePut(String relativeUrl, String requestBody) throws IOException\n+    {\n+        return execute(HttpMethod.PUT, relativeUrl, requestBody);\n+    }\n+\n+    private String execute(HttpMethod method, String relativeUrl, String requestBody) throws IOException\n+    {\n+        return execute(method, relativeUrl, new StringEntity(requestBody, ContentType.APPLICATION_JSON));\n+    }\n+\n+    private String execute(HttpMethod method, String relativeUrl, HttpEntity content) throws IOException\n+    {\n+        HttpRequestBase httpRequest = HttpRequestBuilder.create()\n+                .withHttpMethod(method)\n+                .withEndpoint(endpoint)\n+                .withRelativeUrl(relativeUrl)\n+                .withContent(content)\n+                .build();\n+\n+        LOGGER.atInfo().addArgument(httpRequest::getRequestLine)\n+                       .log(\"Jira request: {}\");\n+\n+        HttpContext httpContext = httpContextFactory.create();\n+        HttpResponse httpResponse = httpClient.execute(httpRequest, httpContext);\n+        int status = httpResponse.getStatusCode();\n+        if (status >= HttpStatus.SC_OK && status < HttpStatus.SC_MULTIPLE_CHOICES)\n+        {\n+            return httpResponse.getResponseBodyAsString();\n+        }\n+        LOGGER.atError().addArgument(httpResponse)\n+                        .log(\"Jira response: {}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNjcwMA==", "bodyText": "split the method into several smaller ones", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492806700", "createdAt": "2020-09-22T15:00:26Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath)\n+                           .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle)\n+                                   .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle)\n+                               .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e)\n+                                    .log(\"Got an error while exporting\");\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNjkzNg==", "bodyText": "should it be public?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492806936", "createdAt": "2020-09-22T15:00:40Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath)\n+                           .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle)\n+                                   .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle)\n+                               .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e)\n+                                    .log(\"Got an error while exporting\");\n+                }\n+            }\n+        }\n+\n+        publishErrors();\n+    }\n+\n+    public void publishErrors() throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNzg0NA==", "bodyText": "I believe the errors should be printed in user-friendly format (not technical JSON)", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492807844", "createdAt": "2020-09-22T15:01:51Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath)\n+                           .log(\"Exporting scenarios from {} story\");\n+\n+            for (Scenario scenario : story.getScenarios())\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle)\n+                                   .log(\"Skip export of {} scenario\");\n+                    continue;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle)\n+                               .log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+\n+                TestCaseParameters parameters = new TestCaseParameters();\n+                parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+                parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+                parameters.setSummary(scenarioTitle);\n+                parameters.setStory(storyTitle);\n+                parameters.setSteps(scenario.collectSteps());\n+\n+                try\n+                {\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e)\n+                                    .log(\"Got an error while exporting\");\n+                }\n+            }\n+        }\n+\n+        publishErrors();\n+    }\n+\n+    public void publishErrors() throws IOException\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            String message = new ObjectMapper().setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n+                                               .writerWithDefaultPrettyPrinter()\n+                                               .writeValueAsString(errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgxMDUzNg==", "bodyText": "now I recommend to move this piece outside XrayFacade", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492810536", "createdAt": "2020-09-22T15:05:08Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.model.ManualTestCase;\n+import org.vividus.xray.model.ManualTestStep;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private ManualStepConverter manualStepConverter;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private ObjectMapper objectMapper;\n+\n+    @PostConstruct\n+    public void init()\n+    {\n+        objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException, SyntaxException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest)\n+                       .log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey)\n+                       .log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n+            throws IOException, SyntaxException\n+    {\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .log(\"Test with key {} has been updated\");\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters) throws SyntaxException\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(xrayExporterOptions.getProjectKey());\n+        String summary = testCaseParameters.getSummary();\n+        manualTest.setSummary(summary);\n+        manualTest.setLabels(testCaseParameters.getLabels());\n+        manualTest.setComponents(testCaseParameters.getComponents());\n+        List<ManualTestStep> steps = manualStepConverter.convert(testCaseParameters.getStory(), summary,\n+                testCaseParameters.getSteps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3025e22fe31924484f05d50027808b8463caa434", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3025e22fe31924484f05d50027808b8463caa434", "committedDate": "2020-09-22T14:34:50Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "b6231938980fb29f3025a80776f11dd1e73d52e2", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b6231938980fb29f3025a80776f11dd1e73d52e2", "committedDate": "2020-09-22T16:20:29Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6231938980fb29f3025a80776f11dd1e73d52e2", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b6231938980fb29f3025a80776f11dd1e73d52e2", "committedDate": "2020-09-22T16:20:29Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "94249529e56cf31795bb65362cb13b90570829f8", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/94249529e56cf31795bb65362cb13b90570829f8", "committedDate": "2020-09-22T17:37:24Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94249529e56cf31795bb65362cb13b90570829f8", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/94249529e56cf31795bb65362cb13b90570829f8", "committedDate": "2020-09-22T17:37:24Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9c57a7c4d887df371265da8a98843c712b29e29d", "committedDate": "2020-09-22T17:56:07Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzc0OTQ0", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-493774944", "createdAt": "2020-09-22T19:21:14Z", "commit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyMToxNFrOHWI-yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozOTozM1rOHWJknw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3Nzg2Nw==", "bodyText": "you don't need functional style here, it complicates the flow", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492977867", "createdAt": "2020-09-22T19:21:14Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3ODE4OQ==", "bodyText": "you don't need functional style here, it complicates the flow", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492978189", "createdAt": "2020-09-22T19:21:47Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MTkxNA==", "bodyText": "jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\")\n->\nxrayFacade.createTestsLink(testCaseId, requirementId)?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492981914", "createdAt": "2020-09-22T19:28:49Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle).log(\"Skip export of {} scenario\");\n+                    return;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle).log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+                try\n+                {\n+                    TestCaseParameters parameters = createTestCaseParameters(storyTitle, scenario);\n+\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting\");\n+                }\n+            });\n+        });\n+\n+        publishErrors();\n+    }\n+\n+    private TestCaseParameters createTestCaseParameters(String storyTitle, Scenario scenario) throws SyntaxException\n+    {\n+        String scenarioTitle = scenario.getTitle();\n+        List<Meta> scenarioMeta = scenario.getMeta();\n+\n+        TestCaseParameters parameters = new TestCaseParameters();\n+        parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+        parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+        parameters.setSummary(scenarioTitle);\n+        parameters.setSteps(ManualStepConverter.convert(storyTitle, scenarioTitle, scenario.collectSteps()));\n+        return parameters;\n+    }\n+\n+    private void performWithStories(FailableConsumer<Story, IOException> storyConsumer) throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            storyConsumer.accept(story);\n+        }\n+    }\n+\n+    private void performWithScenario(Story story, FailableConsumer<Scenario, IOException> scenarioConsumer)\n+            throws IOException\n+    {\n+        for (Scenario scenario : story.getScenarios())\n+        {\n+            scenarioConsumer.accept(scenario);\n+        }\n+    }\n+\n+    private void publishErrors()\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            LOGGER.atError().addArgument(System::lineSeparator).addArgument(() ->\n+            {\n+                StringBuilder errorBuilder = new StringBuilder();\n+                IntStream.range(0, errors.size()).forEach(index ->\n+                {\n+                    ErrorExportEntry errorEntry = errors.get(index);\n+                    errorBuilder.append(\"Error #\").append(index + 1).append(lineSeparator())\n+                                .append(\"Story: \").append(errorEntry.getStory()).append(lineSeparator())\n+                                .append(\"Scenario: \").append(errorEntry.getScenario()).append(lineSeparator())\n+                                .append(\"Error: \").append(errorEntry.getError()).append(lineSeparator());\n+                });\n+                return errorBuilder.toString();\n+            }).log(\"Errors:{}{}\");\n+        }\n+    }\n+\n+    private void createTestsLink(String inwardIssueKey, List<Meta> scenarioMeta) throws IOException, SyntaxException\n+    {\n+        String outwardIssueKey = ensureOneValueOrNull(scenarioMeta, \"requirementId\");\n+        if (outwardIssueKey != null)\n+        {\n+            jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MjYyMw==", "bodyText": "what about moving this logic to xrayFacade.updateTestCase ?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492982623", "createdAt": "2020-09-22T19:30:03Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle).log(\"Skip export of {} scenario\");\n+                    return;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle).log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+                try\n+                {\n+                    TestCaseParameters parameters = createTestCaseParameters(storyTitle, scenario);\n+\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting\");\n+                }\n+            });\n+        });\n+\n+        publishErrors();\n+    }\n+\n+    private TestCaseParameters createTestCaseParameters(String storyTitle, Scenario scenario) throws SyntaxException\n+    {\n+        String scenarioTitle = scenario.getTitle();\n+        List<Meta> scenarioMeta = scenario.getMeta();\n+\n+        TestCaseParameters parameters = new TestCaseParameters();\n+        parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+        parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+        parameters.setSummary(scenarioTitle);\n+        parameters.setSteps(ManualStepConverter.convert(storyTitle, scenarioTitle, scenario.collectSteps()));\n+        return parameters;\n+    }\n+\n+    private void performWithStories(FailableConsumer<Story, IOException> storyConsumer) throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            storyConsumer.accept(story);\n+        }\n+    }\n+\n+    private void performWithScenario(Story story, FailableConsumer<Scenario, IOException> scenarioConsumer)\n+            throws IOException\n+    {\n+        for (Scenario scenario : story.getScenarios())\n+        {\n+            scenarioConsumer.accept(scenario);\n+        }\n+    }\n+\n+    private void publishErrors()\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            LOGGER.atError().addArgument(System::lineSeparator).addArgument(() ->\n+            {\n+                StringBuilder errorBuilder = new StringBuilder();\n+                IntStream.range(0, errors.size()).forEach(index ->\n+                {\n+                    ErrorExportEntry errorEntry = errors.get(index);\n+                    errorBuilder.append(\"Error #\").append(index + 1).append(lineSeparator())\n+                                .append(\"Story: \").append(errorEntry.getStory()).append(lineSeparator())\n+                                .append(\"Scenario: \").append(errorEntry.getScenario()).append(lineSeparator())\n+                                .append(\"Error: \").append(errorEntry.getError()).append(lineSeparator());\n+                });\n+                return errorBuilder.toString();\n+            }).log(\"Errors:{}{}\");\n+        }\n+    }\n+\n+    private void createTestsLink(String inwardIssueKey, List<Meta> scenarioMeta) throws IOException, SyntaxException\n+    {\n+        String outwardIssueKey = ensureOneValueOrNull(scenarioMeta, \"requirementId\");\n+        if (outwardIssueKey != null)\n+        {\n+            jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\");\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters)\n+            throws IOException, InvalidIssueStatusException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new InvalidIssueStatusException(testCaseId, status);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4Mzk5Nw==", "bodyText": "Invalid != non-editable - either change default exception message, or pass the full message as constructor parameters, or change exception class name", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492983997", "createdAt": "2020-09-22T19:32:38Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/exporter/XrayExporter.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.exporter;\n+\n+import static java.lang.System.lineSeparator;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.function.FailableConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.bdd.model.jbehave.Meta;\n+import org.vividus.bdd.model.jbehave.Scenario;\n+import org.vividus.bdd.model.jbehave.Story;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.converter.ManualStepConverter;\n+import org.vividus.xray.exception.SyntaxException;\n+import org.vividus.xray.facade.TestCaseParameters;\n+import org.vividus.xray.facade.XrayFacade;\n+import org.vividus.xray.reader.JsonResourceReader;\n+import org.vividus.xray.reader.JsonResourceReader.FileEntry;\n+\n+@Component\n+public class XrayExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayExporter.class);\n+\n+    private static final String SEMICOLON = \";\";\n+\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private XrayFacade xrayFacade;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private final List<ErrorExportEntry> errors = new ArrayList<>();\n+\n+    public void exportResults() throws IOException\n+    {\n+        performWithStories(story ->\n+        {\n+            LOGGER.atInfo().addArgument(story::getPath).log(\"Exporting scenarios from {} story\");\n+\n+            performWithScenario(story, scenario ->\n+            {\n+                String scenarioTitle = scenario.getTitle();\n+\n+                List<Meta> scenarioMeta = scenario.getMeta();\n+                if (isSkipped(scenarioMeta))\n+                {\n+                    LOGGER.atInfo().addArgument(scenarioTitle).log(\"Skip export of {} scenario\");\n+                    return;\n+                }\n+                LOGGER.atInfo().addArgument(scenarioTitle).log(\"Exporting {} scenario\");\n+\n+                String storyTitle = story.getPath();\n+                try\n+                {\n+                    TestCaseParameters parameters = createTestCaseParameters(storyTitle, scenario);\n+\n+                    String testCaseId = ensureOneValueOrNull(scenarioMeta, \"testCaseId\");\n+                    if (testCaseId != null)\n+                    {\n+                        updateTestCase(testCaseId, parameters);\n+                    }\n+                    else\n+                    {\n+                        testCaseId = xrayFacade.createTestCase(parameters);\n+                    }\n+                    createTestsLink(testCaseId, scenarioMeta);\n+                }\n+                catch (IOException | SyntaxException | InvalidIssueStatusException e)\n+                {\n+                    errors.add(new ErrorExportEntry(storyTitle, scenarioTitle, e.getMessage()));\n+                    LOGGER.atError().setCause(e).log(\"Got an error while exporting\");\n+                }\n+            });\n+        });\n+\n+        publishErrors();\n+    }\n+\n+    private TestCaseParameters createTestCaseParameters(String storyTitle, Scenario scenario) throws SyntaxException\n+    {\n+        String scenarioTitle = scenario.getTitle();\n+        List<Meta> scenarioMeta = scenario.getMeta();\n+\n+        TestCaseParameters parameters = new TestCaseParameters();\n+        parameters.setLabels(getMetaValues(scenarioMeta, \"xray.labels\"));\n+        parameters.setComponents(getMetaValues(scenarioMeta, \"xray.components\"));\n+        parameters.setSummary(scenarioTitle);\n+        parameters.setSteps(ManualStepConverter.convert(storyTitle, scenarioTitle, scenario.collectSteps()));\n+        return parameters;\n+    }\n+\n+    private void performWithStories(FailableConsumer<Story, IOException> storyConsumer) throws IOException\n+    {\n+        for (Story story : readStories())\n+        {\n+            storyConsumer.accept(story);\n+        }\n+    }\n+\n+    private void performWithScenario(Story story, FailableConsumer<Scenario, IOException> scenarioConsumer)\n+            throws IOException\n+    {\n+        for (Scenario scenario : story.getScenarios())\n+        {\n+            scenarioConsumer.accept(scenario);\n+        }\n+    }\n+\n+    private void publishErrors()\n+    {\n+        if (!errors.isEmpty())\n+        {\n+            LOGGER.atError().addArgument(System::lineSeparator).addArgument(() ->\n+            {\n+                StringBuilder errorBuilder = new StringBuilder();\n+                IntStream.range(0, errors.size()).forEach(index ->\n+                {\n+                    ErrorExportEntry errorEntry = errors.get(index);\n+                    errorBuilder.append(\"Error #\").append(index + 1).append(lineSeparator())\n+                                .append(\"Story: \").append(errorEntry.getStory()).append(lineSeparator())\n+                                .append(\"Scenario: \").append(errorEntry.getScenario()).append(lineSeparator())\n+                                .append(\"Error: \").append(errorEntry.getError()).append(lineSeparator());\n+                });\n+                return errorBuilder.toString();\n+            }).log(\"Errors:{}{}\");\n+        }\n+    }\n+\n+    private void createTestsLink(String inwardIssueKey, List<Meta> scenarioMeta) throws IOException, SyntaxException\n+    {\n+        String outwardIssueKey = ensureOneValueOrNull(scenarioMeta, \"requirementId\");\n+        if (outwardIssueKey != null)\n+        {\n+            jiraFacade.createIssueLink(inwardIssueKey, outwardIssueKey, \"Tests\");\n+        }\n+    }\n+\n+    private void updateTestCase(String testCaseId, TestCaseParameters parameters)\n+            throws IOException, InvalidIssueStatusException\n+    {\n+        String status = jiraFacade.getIssueStatus(testCaseId);\n+\n+        if (xrayExporterOptions.getEditableStatuses().stream()\n+                .noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new InvalidIssueStatusException(testCaseId, status);\n+        }\n+        else\n+        {\n+            xrayFacade.updateTestCase(testCaseId, parameters);\n+        }\n+    }\n+\n+    private List<Story> readStories() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                false);\n+\n+        List<Story> stories = new ArrayList<>();\n+        for (FileEntry jsonResult : getJsonResultsFiles())\n+        {\n+            LOGGER.atInfo().addArgument(jsonResult::getPath).log(\"Parsing {}\");\n+            stories.add(objectMapper.readValue(jsonResult.getContent(), Story.class));\n+        }\n+        return stories;\n+    }\n+\n+    private List<FileEntry> getJsonResultsFiles() throws IOException\n+    {\n+        Path jsonResiltsDirectory = xrayExporterOptions.getJsonResultsDirectory();\n+        List<FileEntry> jsonFiles = JsonResourceReader.readFrom(jsonResiltsDirectory);\n+\n+        notEmpty(jsonFiles, \"The directory '%s' does not contain needed JSON files\", jsonResiltsDirectory);\n+        String jsonFilePaths = jsonFiles.stream().map(FileEntry::getPath)\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), XrayExporter::join));\n+        LOGGER.atInfo().addArgument(jsonFilePaths).log(\"JSON files: {}\");\n+        return jsonFiles;\n+    }\n+\n+    private static Set<String> getMetaValues(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return getMetaValuesStream(scenarioMeta, metaName).collect(Collectors.toCollection(LinkedHashSet::new));\n+    }\n+\n+    private static String ensureOneValueOrNull(List<Meta> scenarioMeta, String metaName) throws SyntaxException\n+    {\n+        List<String> values = getMetaValuesStream(scenarioMeta, metaName).collect(Collectors.toList());\n+        if (values.size() > 1)\n+        {\n+            throw new SyntaxException(String.format(\"Only one '%s' can be specified for a test case, but got: %s\",\n+                    metaName, join(values)));\n+        }\n+        return values.isEmpty() ? null : values.iterator().next();\n+    }\n+\n+    private static String join(Iterable<String> iterable)\n+    {\n+        return StringUtils.join(iterable, \", \");\n+    }\n+\n+    private static Stream<String> getMetaValuesStream(List<Meta> scenarioMeta, String metaName)\n+    {\n+        return asStream(scenarioMeta).filter(m -> metaName.equals(m.getName()) && !m.getValue().isEmpty())\n+                                     .map(Meta::getValue)\n+                                     .map(String::trim)\n+                                     .map(value -> StringUtils.splitPreserveAllTokens(value, SEMICOLON))\n+                                     .flatMap(Stream::of)\n+                                     .map(String::trim);\n+    }\n+\n+    private static boolean isSkipped(List<Meta> scenarioMeta)\n+    {\n+        return asStream(scenarioMeta).anyMatch(m -> \"xray.skip-export\".equals(m.getName()));\n+    }\n+\n+    private static Stream<Meta> asStream(List<Meta> scenarioMeta)\n+    {\n+        return Optional.ofNullable(scenarioMeta)\n+                       .map(List::stream)\n+                       .orElseGet(Stream::empty);\n+    }\n+\n+    private static final class ErrorExportEntry\n+    {\n+        private final String story;\n+        private final String scenario;\n+        private final String error;\n+\n+        private ErrorExportEntry(String story, String scenario, String error)\n+        {\n+            this.story = story;\n+            this.scenario = scenario;\n+            this.error = error;\n+        }\n+\n+        public String getStory()\n+        {\n+            return story;\n+        }\n+\n+        public String getScenario()\n+        {\n+            return scenario;\n+        }\n+\n+        public String getError()\n+        {\n+            return error;\n+        }\n+    }\n+\n+    private static final class InvalidIssueStatusException extends Exception\n+    {\n+        private static final long serialVersionUID = -5547086076322794984L;\n+\n+        private InvalidIssueStatusException(String testCaseId, String status)\n+        {\n+            super(\"Issue \" + testCaseId + \" is in non-editable '\" + status + \"' status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4NzU1MQ==", "bodyText": "will we ever have the necessity to create test cases in different projects?", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r492987551", "createdAt": "2020-09-22T19:39:33Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.configuration.XrayExporterOptions;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+\n+@Component\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    @Autowired private ManualTestCaseSerializer manualTestSerializer;\n+    @Autowired private XrayExporterOptions xrayExporterOptions;\n+    @Autowired private JiraFacade jiraFacade;\n+\n+    private ObjectMapper objectMapper;\n+\n+    @PostConstruct\n+    public void init()\n+    {\n+        objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(xrayExporterOptions.getProjectKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c57a7c4d887df371265da8a98843c712b29e29d", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9c57a7c4d887df371265da8a98843c712b29e29d", "committedDate": "2020-09-22T17:56:07Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/ab08cda9eb1d46b21afcda4f413643946a8e127e", "committedDate": "2020-09-22T20:34:05Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab08cda9eb1d46b21afcda4f413643946a8e127e", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/ab08cda9eb1d46b21afcda4f413643946a8e127e", "committedDate": "2020-09-22T20:34:05Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "290c7fd6cd15406e17f1c742d67e30b85a5efcba", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/290c7fd6cd15406e17f1c742d67e30b85a5efcba", "committedDate": "2020-09-22T20:43:22Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "290c7fd6cd15406e17f1c742d67e30b85a5efcba", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/290c7fd6cd15406e17f1c742d67e30b85a5efcba", "committedDate": "2020-09-22T20:43:22Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "b0ca5de97355d4839f875bffed631327a27bad4c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b0ca5de97355d4839f875bffed631327a27bad4c", "committedDate": "2020-09-23T07:19:49Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MzQ2MTQx", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-494346141", "createdAt": "2020-09-23T07:27:04Z", "commit": {"oid": "b0ca5de97355d4839f875bffed631327a27bad4c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyNzowNFrOHWZ9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyNzoyNlrOHWZ-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NjA4NA==", "bodyText": "I think it can be inlined", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493256084", "createdAt": "2020-09-23T07:27:04Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    private final String projectKey;\n+    private final List<String> editableStatuses;\n+    private final JiraFacade jiraFacade;\n+    private final ObjectMapper objectMapper;\n+\n+    public XrayFacade(String projectKey, List<String> editableStatuses, JiraFacade jiraFacade,\n+            ManualTestCaseSerializer manualTestSerializer)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.projectKey = projectKey;\n+        this.editableStatuses = editableStatuses;\n+        this.objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n+            throws IOException, NonEditableIssueStateException\n+    {\n+        checkIfIssueEditable(testCaseKey);\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n+    }\n+\n+    private void checkIfIssueEditable(String issueKey) throws IOException, NonEditableIssueStateException\n+    {\n+        String status = jiraFacade.getIssueStatus(issueKey);\n+\n+        if (editableStatuses.stream().noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new NonEditableIssueStateException(issueKey, status);\n+        }\n+    }\n+\n+    public void createTestsLink(String testCaseId, String requirementId) throws IOException\n+    {\n+        String linkType = \"Tests\";\n+        LOGGER.atInfo().addArgument(linkType)\n+                       .addArgument(testCaseId)\n+                       .addArgument(requirementId)\n+                       .log(\"Create '{}' link from {} to {}\");\n+        jiraFacade.createIssueLink(testCaseId, requirementId, linkType);\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(projectKey);\n+        String summary = testCaseParameters.getSummary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ca5de97355d4839f875bffed631327a27bad4c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NjMzNQ==", "bodyText": "State -> Status", "url": "https://github.com/vividus-framework/vividus/pull/950#discussion_r493256335", "createdAt": "2020-09-23T07:27:26Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/src/main/java/org/vividus/xray/facade/XrayFacade.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.xray.facade;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.xray.databind.ManualTestCaseSerializer;\n+import org.vividus.xray.model.ManualTestCase;\n+\n+public class XrayFacade\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XrayFacade.class);\n+\n+    private final String projectKey;\n+    private final List<String> editableStatuses;\n+    private final JiraFacade jiraFacade;\n+    private final ObjectMapper objectMapper;\n+\n+    public XrayFacade(String projectKey, List<String> editableStatuses, JiraFacade jiraFacade,\n+            ManualTestCaseSerializer manualTestSerializer)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.projectKey = projectKey;\n+        this.editableStatuses = editableStatuses;\n+        this.objectMapper = new ObjectMapper()\n+                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+                .registerModule(new SimpleModule().addSerializer(ManualTestCase.class, manualTestSerializer));\n+    }\n+\n+    public String createTestCase(TestCaseParameters testCaseParameters) throws IOException\n+    {\n+        String createTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(createTestRequest).log(\"Creating Test Case: {}\");\n+        String response = jiraFacade.createIssue(createTestRequest);\n+        String issueKey = JsonPathUtils.getData(response, \"$.key\");\n+        LOGGER.atInfo().addArgument(issueKey).log(\"Test with key {} has been created\");\n+        return issueKey;\n+    }\n+\n+    public void updateTestCase(String testCaseKey, TestCaseParameters testCaseParameters)\n+            throws IOException, NonEditableIssueStateException\n+    {\n+        checkIfIssueEditable(testCaseKey);\n+        String updateTestRequest = objectMapper.writeValueAsString(createManualTest(testCaseParameters));\n+        LOGGER.atInfo().addArgument(testCaseKey)\n+                       .addArgument(updateTestRequest)\n+                       .log(\"Updating Test Case with ID {}: {}\");\n+        jiraFacade.updateIssue(testCaseKey, updateTestRequest);\n+        LOGGER.atInfo().addArgument(testCaseKey).log(\"Test with key {} has been updated\");\n+    }\n+\n+    private void checkIfIssueEditable(String issueKey) throws IOException, NonEditableIssueStateException\n+    {\n+        String status = jiraFacade.getIssueStatus(issueKey);\n+\n+        if (editableStatuses.stream().noneMatch(s -> StringUtils.equalsIgnoreCase(s, status)))\n+        {\n+            throw new NonEditableIssueStateException(issueKey, status);\n+        }\n+    }\n+\n+    public void createTestsLink(String testCaseId, String requirementId) throws IOException\n+    {\n+        String linkType = \"Tests\";\n+        LOGGER.atInfo().addArgument(linkType)\n+                       .addArgument(testCaseId)\n+                       .addArgument(requirementId)\n+                       .log(\"Create '{}' link from {} to {}\");\n+        jiraFacade.createIssueLink(testCaseId, requirementId, linkType);\n+    }\n+\n+    private ManualTestCase createManualTest(TestCaseParameters testCaseParameters)\n+    {\n+        ManualTestCase manualTest = new ManualTestCase();\n+        manualTest.setProjectKey(projectKey);\n+        String summary = testCaseParameters.getSummary();\n+        manualTest.setSummary(summary);\n+        manualTest.setLabels(testCaseParameters.getLabels());\n+        manualTest.setComponents(testCaseParameters.getComponents());\n+        manualTest.setManualTestSteps(testCaseParameters.getSteps());\n+        return manualTest;\n+    }\n+\n+    public static final class NonEditableIssueStateException extends Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ca5de97355d4839f875bffed631327a27bad4c"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be11cc14acb702d1ed50cf393252e32a410da176", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/be11cc14acb702d1ed50cf393252e32a410da176", "committedDate": "2020-09-23T07:32:59Z", "message": "Add Jira Xray integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0ca5de97355d4839f875bffed631327a27bad4c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/b0ca5de97355d4839f875bffed631327a27bad4c", "committedDate": "2020-09-23T07:19:49Z", "message": "Add Jira Xray integration"}, "afterCommit": {"oid": "be11cc14acb702d1ed50cf393252e32a410da176", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/be11cc14acb702d1ed50cf393252e32a410da176", "committedDate": "2020-09-23T07:32:59Z", "message": "Add Jira Xray integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Mzg0MzAz", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-494384303", "createdAt": "2020-09-23T07:48:34Z", "commit": {"oid": "be11cc14acb702d1ed50cf393252e32a410da176"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDg3MjQ4", "url": "https://github.com/vividus-framework/vividus/pull/950#pullrequestreview-494487248", "createdAt": "2020-09-23T09:48:54Z", "commit": {"oid": "be11cc14acb702d1ed50cf393252e32a410da176"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}