{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzY3Mjk3", "number": 354, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTozNjo1OFrODkEmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0ODo1N1rODl2BuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTUwNzExOnYy", "diffSide": "RIGHT", "path": ".github/workflows/gradle.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTozNjo1OFrOFwNNqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOTozNjo1OFrOFwNNqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjQ1OA==", "bodyText": "to make it more concise I would recommend to use [[ cond && cond ... ]] or [ cond -a cond ... ]", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r386092458", "createdAt": "2020-03-01T09:36:58Z", "author": {"login": "uarlouski"}, "path": ".github/workflows/gradle.yml", "diffHunk": "@@ -74,9 +74,11 @@ jobs:\n       env:\n         BROWSERSTACK_USER: ${{ secrets.BROWSERSTACK_USER }}\n         BROWSERSTACK_KEY: ${{ secrets.BROWSERSTACK_KEY }}\n+        APPLITOOLS_EXECUTE_KEY: ${{ secrets.APPLITOOLS_EXECUTE_KEY }}\n+        APPLITOOLS_READ_KEY: ${{ secrets.APPLITOOLS_READ_KEY }}\n       run: |\n-        if [ -n $BROWSERSTACK_USER ] && [ -n $BROWSERSTACK_KEY ]; then\n-            ./gradlew :vividus-tests:runStories -Pvividus.configuration.environments=system -Pvividus.configuration.suite=system -Pvividus.configuration.profile=web/desktop/chrome\n+        if [ -n $BROWSERSTACK_USER ] && [ -n $BROWSERSTACK_KEY ] && [ -n $APPLITOOLS_READ_KEY ] && [ -n $APPLITOOLS_READ_KEY ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0c8b0c5bea7c788abc1ed60ded041eed80b9b2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU5MDEyOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozNzozMVrOFximqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozNzozMVrOFximqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MTQ5Nw==", "bodyText": "move versions to properties only if it's used more than one time, otherwise place it to the corresponding module dependencies (dependabot can't update shared versions)", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r387491497", "createdAt": "2020-03-04T07:37:31Z", "author": {"login": "valfirst"}, "path": "build.gradle", "diffHunk": "@@ -72,6 +72,7 @@ ext {\n         commonsIo:              '2.6',\n         commonsLang3:           '3.9',\n         commonsText:            '1.8',\n+        eyes:                   '3.160.0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3119a6e0a133e22ed75b3a5f8bd0387f5020e36"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU5MzgwOnYy", "diffSide": "RIGHT", "path": "vividus-extension-visual-testing/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozOToxNFrOFxio6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxNzowOFrOFyNvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MjA3NA==", "bodyText": "why is bdd-engine required in. this extension?", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r387492074", "createdAt": "2020-03-04T07:39:14Z", "author": {"login": "valfirst"}, "path": "vividus-extension-visual-testing/build.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+project.description = 'Vividus extension for Visual Testing'\n+\n+dependencies {\n+    implementation project(':vividus-bdd-engine')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3119a6e0a133e22ed75b3a5f8bd0387f5020e36"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5ODIxNg==", "bodyText": "vividus/vividus-extension-visual-testing/src/main/java/org/vividus/visual/screenshot/ScenarioBasedIndexer.java\n    \n    \n         Line 34\n      in\n      f3119a6\n    \n    \n    \n    \n\n        \n          \n           @AfterScenario(uponType = ScenarioType.ANY)", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r388198216", "createdAt": "2020-03-05T10:17:08Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-visual-testing/build.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+project.description = 'Vividus extension for Visual Testing'\n+\n+dependencies {\n+    implementation project(':vividus-bdd-engine')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MjA3NA=="}, "originalCommit": {"oid": "f3119a6e0a133e22ed75b3a5f8bd0387f5020e36"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU5NzIzOnYy", "diffSide": "RIGHT", "path": "vividus-extension-visual-testing/src/main/java/org/vividus/visual/model/VisualCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0MDo1MlrOFxirFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0MDo1MlrOFxirFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MjYyOA==", "bodyText": "please format comment properly", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r387492628", "createdAt": "2020-03-04T07:40:52Z", "author": {"login": "valfirst"}, "path": "vividus-extension-visual-testing/src/main/java/org/vividus/visual/model/VisualCheck.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.visual.model;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.SearchContext;\n+import org.vividus.selenium.screenshot.ScreenshotConfiguration;\n+import org.vividus.visual.screenshot.IgnoreStrategy;\n+\n+public class VisualCheck\n+{\n+    private String baselineName;\n+    private VisualActionType action;\n+    private Map<IgnoreStrategy, Set<By>> elementsToIgnore = Map.of();\n+    private Optional<ScreenshotConfiguration> screenshotConfiguration = Optional.empty();\n+    private SearchContext searchContext;\n+\n+    public VisualCheck()\n+    {\n+      //Necessary for JBehave object instantiation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3119a6e0a133e22ed75b3a5f8bd0387f5020e36"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDY4OTcwOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-applitools/src/main/java/org/vividus/eyes/model/ApplitoolsVisualCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoxODowMlrOFxji-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoxODowMlrOFxji-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNjkzNw==", "bodyText": "please format comment properly", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r387506937", "createdAt": "2020-03-04T08:18:02Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-applitools/src/main/java/org/vividus/eyes/model/ApplitoolsVisualCheck.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.eyes.model;\n+\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.applitools.eyes.MatchLevel;\n+\n+import org.openqa.selenium.By;\n+import org.vividus.visual.model.VisualActionType;\n+import org.vividus.visual.model.VisualCheck;\n+import org.vividus.visual.screenshot.IgnoreStrategy;\n+\n+public class ApplitoolsVisualCheck extends VisualCheck\n+{\n+    private String executeApiKey;\n+    private String readApiKey;\n+    private String hostApp;\n+    private String hostOS;\n+    private String viewportSize;\n+    private MatchLevel matchLevel;\n+    private URI serverUri;\n+    private String appName;\n+    private String batchName;\n+    private String baselineEnvName;\n+    private Set<By> elementsToIgnore = Set.of();\n+    private Set<By> areasToIgnore = Set.of();\n+\n+    public ApplitoolsVisualCheck()\n+    {\n+        //Necessary for JBehave object instantiation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3119a6e0a133e22ed75b3a5f8bd0387f5020e36"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDY5NTEzOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-applitools/src/main/resources/applitools-visual-comparison.ftl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoxOTo0OVrOFxjmEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoxOTo0OVrOFxjmEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNzczMA==", "bodyText": "please fix indents", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r387507730", "createdAt": "2020-03-04T08:19:49Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-applitools/src/main/resources/applitools-visual-comparison.ftl", "diffHunk": "@@ -0,0 +1,21 @@\n+<#include \"base-report.ftl\">\n+<#macro custom_css>\n+.applitools {\n+      background-color: #1DA69B;\n+      box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n+    }\n+</#macro>\n+<#macro custom_controls>\n+<#if result.stepUrl?hasContent>\n+             <a href=\"${result.stepUrl}\" target=\"_blank\" class=\"btn btn-info applitools\" role=\"button\">Step editor\n+                 <span class=\"glyphicon glyphicon-wrench\"></span>\n+             </a>\n+         </#if>\n+         <#if result.batchUrl?hasContent>\n+             <a href=\"${result.batchUrl}\" target=\"_blank\" class=\"btn btn-info applitools\" role=\"button\">Batch\n+                 <span class=\"glyphicon glyphicon-eye-open\"></span>\n+             </a>\n+         </#if>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3119a6e0a133e22ed75b3a5f8bd0387f5020e36"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM0NjU3OnYy", "diffSide": "RIGHT", "path": "vividus-extension-visual-testing/src/main/java/org/vividus/visual/VisualCheckFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0NDoyOVrOFyQcjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0NDoyOVrOFyQcjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0MjU3NA==", "bodyText": "use method ref", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r388242574", "createdAt": "2020-03-05T11:44:29Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-visual-testing/src/main/java/org/vividus/visual/VisualCheckFactory.java", "diffHunk": "@@ -42,6 +42,16 @@ public VisualCheck create(String baselineName, VisualActionType actionType)\n         return new VisualCheck(indexedBaselineName, actionType);\n     }\n \n+    @Override\n+    public <T extends VisualCheck> T create(String baselineName, VisualActionType actionType,\n+            BiFunction<String, VisualActionType, T> checkFactory)\n+    {\n+        String indexedBaselineName = screenshotIndexer.map(in -> indexers.get(in))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e2a02178a5f6488a54a0d15066c5512e677e37"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM3NDc3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/VisualTestingSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NDoxNlrOFyQtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NDoxNlrOFyQtnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Njk0Mw==", "bodyText": "actually testers do not know what means eyes here, does it make sense to rename it to applitools?", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r388246943", "createdAt": "2020-03-05T11:54:16Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/VisualTestingSteps.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.visual.eyes;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jbehave.core.annotations.When;\n+import org.vividus.reporter.event.IAttachmentPublisher;\n+import org.vividus.selenium.screenshot.ScreenshotConfiguration;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.ui.web.context.IWebUiContext;\n+import org.vividus.visual.bdd.AbstractVisualSteps;\n+import org.vividus.visual.eyes.factory.ApplitoolsVisualCheckFactory;\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheck;\n+import org.vividus.visual.eyes.service.VisualTestingService;\n+import org.vividus.visual.model.VisualActionType;\n+import org.vividus.visual.model.VisualCheckResult;\n+\n+public class VisualTestingSteps extends AbstractVisualSteps\n+{\n+    @Inject private VisualTestingService visualTestingService;\n+    @Inject private ISoftAssert softAssert;\n+    @Inject private ApplitoolsVisualCheckFactory applitoolsVisualCheckFactory;\n+\n+    public VisualTestingSteps(IWebUiContext webUiContext, IAttachmentPublisher attachmentPublisher)\n+    {\n+        super(webUiContext, attachmentPublisher);\n+    }\n+\n+    /**\n+     * Performs visual check on the Applitools service;\n+     * @param actionType ESTABLISH or COMPARE_AGAINST\n+     * @param testName name of the test.\n+     * @param batchName name of the batch. Batch acts as group of tests.\n+     */\n+    @When(\"I $action eyes baseline `$testName` in batch `$batchName`\")\n+    public void performCheck(VisualActionType actionType, String testName, String batchName)\n+    {\n+        ApplitoolsVisualCheck visualCheck = applitoolsVisualCheckFactory.create(batchName, testName, actionType);\n+        runApplitoolsTest(visualCheck);\n+    }\n+\n+    /**\n+     * Perform visual check on the Applitools service and provides possibility to use custom configuration eyes;<br>\n+     * <table border=\"1\">\n+     *    <caption>Example of eyes configuration:</caption>\n+     *    <thead>\n+     *      <tr>\n+     *        <th>readApiKey</th>\n+     *        <th>hostApp</th>\n+     *        <th>hostOS</th>\n+     *        <th>viewportSize</th>\n+     *        <th>matchLevel</th>\n+     *        <th>serverUri</th>\n+     *        <th>appName</th>\n+     *        <th>batchName</th>\n+     *        <th>baselineEnvName</th>\n+     *        <th>baselineName</th>\n+     *        <th>action</th>\n+     *      </tr>\n+     *    </thead>\n+     *    <tbody>\n+     *      <tr>\n+     *        <td>key</td>\n+     *        <td>Chrome</td>\n+     *        <td>Windows 95</td>\n+     *        <td>1x1</td>\n+     *        <td>EXACT</td>\n+     *        <td>https://eyesapi.applitools.com</td>\n+     *        <td>AUT</td>\n+     *        <td>UAT</td>\n+     *        <td>PREDEV</td>\n+     *        <td>someName</td>\n+     *        <td>ESTABLISH</td>\n+     *      </tr>\n+     *    </tbody>\n+     *  </table>\n+     *  <br> Mind that: batchName, baselineName, action are mandatory parameters;\n+     * @param applitoolsVisualChecks custom eyes configuration\n+     */\n+    @When(\"I run eyes test using:$eyesConfiguration\")\n+    public void performCheck(List<ApplitoolsVisualCheck> applitoolsVisualChecks)\n+    {\n+        applitoolsVisualChecks.forEach(this::runApplitoolsTest);\n+    }\n+\n+    /**\n+     * Perform visual check on the Applitools service and provides possibility to use custom configurations for\n+     * the checks and screenshot strategy;<br>\n+     * <table border=\"1\">\n+     *    <caption>Example of eyes configuration:</caption>\n+     *    <thead>\n+     *      <tr>\n+     *        <th>readApiKey</th>\n+     *        <th>hostApp</th>\n+     *        <th>hostOS</th>\n+     *        <th>viewportSize</th>\n+     *        <th>matchLevel</th>\n+     *        <th>serverUri</th>\n+     *        <th>appName</th>\n+     *        <th>batchName</th>\n+     *        <th>baselineEnvName</th>\n+     *        <th>baselineName</th>\n+     *        <th>action</th>\n+     *      </tr>\n+     *    </thead>\n+     *    <tbody>\n+     *      <tr>\n+     *        <td>key</td>\n+     *        <td>Chrome</td>\n+     *        <td>Windows 95</td>\n+     *        <td>1x1</td>\n+     *        <td>EXACT</td>\n+     *        <td>https://eyesapi.applitools.com</td>\n+     *        <td>AUT</td>\n+     *        <td>UAT</td>\n+     *        <td>PREDEV</td>\n+     *        <td>someName</td>\n+     *        <td>ESTABLISH</td>\n+     *      </tr>\n+     *    </tbody>\n+     *  </table>\n+     *  <br> Mind that: batchName, baselineName, action are mandatory parameters;<br>\n+     * <table border=\"1\">\n+     *    <caption>Example of screenshot configuration:</caption>\n+     *    <thead>\n+     *      <tr>\n+     *        <th>webHeaderToCut</th>\n+     *        <th>webFooterToCut</th>\n+     *        <th>nativeHeaderToCut</th>\n+     *        <th>nativeFooterToCut</th>\n+     *        <th>scrollableElement</th>\n+     *        <th>coordsProvider</th>\n+     *        <th>scrollTimeout</th>\n+     *        <th>screenshotShootingStrategy</th>\n+     *      </tr>\n+     *    </thead>\n+     *    <tbody>\n+     *      <tr>\n+     *        <td>100</td>\n+     *        <td>10</td>\n+     *        <td>20</td>\n+     *        <td>20</td>\n+     *        <td>By.id(scrollable)</td>\n+     *        <td>WEB_DRIVER</td>\n+     *        <td>500</td>\n+     *        <td>SIMPLE</td>\n+     *      </tr>\n+     *    </tbody>\n+     *  </table>\n+     * @param applitoolsVisualChecks custom eyes configuration\n+     * @param screenshotConfiguration custom shooting strategy configuration\n+     */\n+    @When(value = \"I run eyes test using:$eyesConfiguration and screenshot config:$screenshotConfiguration\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e2a02178a5f6488a54a0d15066c5512e677e37"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM3NDk5OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/VisualTestingSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NDoyMFrOFyQtwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NDoyMFrOFyQtwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Njk3Ng==", "bodyText": "actually testers do not know what means eyes here, does it make sense to rename it to applitools?", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r388246976", "createdAt": "2020-03-05T11:54:20Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/VisualTestingSteps.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.visual.eyes;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jbehave.core.annotations.When;\n+import org.vividus.reporter.event.IAttachmentPublisher;\n+import org.vividus.selenium.screenshot.ScreenshotConfiguration;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.ui.web.context.IWebUiContext;\n+import org.vividus.visual.bdd.AbstractVisualSteps;\n+import org.vividus.visual.eyes.factory.ApplitoolsVisualCheckFactory;\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheck;\n+import org.vividus.visual.eyes.service.VisualTestingService;\n+import org.vividus.visual.model.VisualActionType;\n+import org.vividus.visual.model.VisualCheckResult;\n+\n+public class VisualTestingSteps extends AbstractVisualSteps\n+{\n+    @Inject private VisualTestingService visualTestingService;\n+    @Inject private ISoftAssert softAssert;\n+    @Inject private ApplitoolsVisualCheckFactory applitoolsVisualCheckFactory;\n+\n+    public VisualTestingSteps(IWebUiContext webUiContext, IAttachmentPublisher attachmentPublisher)\n+    {\n+        super(webUiContext, attachmentPublisher);\n+    }\n+\n+    /**\n+     * Performs visual check on the Applitools service;\n+     * @param actionType ESTABLISH or COMPARE_AGAINST\n+     * @param testName name of the test.\n+     * @param batchName name of the batch. Batch acts as group of tests.\n+     */\n+    @When(\"I $action eyes baseline `$testName` in batch `$batchName`\")\n+    public void performCheck(VisualActionType actionType, String testName, String batchName)\n+    {\n+        ApplitoolsVisualCheck visualCheck = applitoolsVisualCheckFactory.create(batchName, testName, actionType);\n+        runApplitoolsTest(visualCheck);\n+    }\n+\n+    /**\n+     * Perform visual check on the Applitools service and provides possibility to use custom configuration eyes;<br>\n+     * <table border=\"1\">\n+     *    <caption>Example of eyes configuration:</caption>\n+     *    <thead>\n+     *      <tr>\n+     *        <th>readApiKey</th>\n+     *        <th>hostApp</th>\n+     *        <th>hostOS</th>\n+     *        <th>viewportSize</th>\n+     *        <th>matchLevel</th>\n+     *        <th>serverUri</th>\n+     *        <th>appName</th>\n+     *        <th>batchName</th>\n+     *        <th>baselineEnvName</th>\n+     *        <th>baselineName</th>\n+     *        <th>action</th>\n+     *      </tr>\n+     *    </thead>\n+     *    <tbody>\n+     *      <tr>\n+     *        <td>key</td>\n+     *        <td>Chrome</td>\n+     *        <td>Windows 95</td>\n+     *        <td>1x1</td>\n+     *        <td>EXACT</td>\n+     *        <td>https://eyesapi.applitools.com</td>\n+     *        <td>AUT</td>\n+     *        <td>UAT</td>\n+     *        <td>PREDEV</td>\n+     *        <td>someName</td>\n+     *        <td>ESTABLISH</td>\n+     *      </tr>\n+     *    </tbody>\n+     *  </table>\n+     *  <br> Mind that: batchName, baselineName, action are mandatory parameters;\n+     * @param applitoolsVisualChecks custom eyes configuration\n+     */\n+    @When(\"I run eyes test using:$eyesConfiguration\")\n+    public void performCheck(List<ApplitoolsVisualCheck> applitoolsVisualChecks)\n+    {\n+        applitoolsVisualChecks.forEach(this::runApplitoolsTest);\n+    }\n+\n+    /**\n+     * Perform visual check on the Applitools service and provides possibility to use custom configurations for\n+     * the checks and screenshot strategy;<br>\n+     * <table border=\"1\">\n+     *    <caption>Example of eyes configuration:</caption>\n+     *    <thead>\n+     *      <tr>\n+     *        <th>readApiKey</th>\n+     *        <th>hostApp</th>\n+     *        <th>hostOS</th>\n+     *        <th>viewportSize</th>\n+     *        <th>matchLevel</th>\n+     *        <th>serverUri</th>\n+     *        <th>appName</th>\n+     *        <th>batchName</th>\n+     *        <th>baselineEnvName</th>\n+     *        <th>baselineName</th>\n+     *        <th>action</th>\n+     *      </tr>\n+     *    </thead>\n+     *    <tbody>\n+     *      <tr>\n+     *        <td>key</td>\n+     *        <td>Chrome</td>\n+     *        <td>Windows 95</td>\n+     *        <td>1x1</td>\n+     *        <td>EXACT</td>\n+     *        <td>https://eyesapi.applitools.com</td>\n+     *        <td>AUT</td>\n+     *        <td>UAT</td>\n+     *        <td>PREDEV</td>\n+     *        <td>someName</td>\n+     *        <td>ESTABLISH</td>\n+     *      </tr>\n+     *    </tbody>\n+     *  </table>\n+     *  <br> Mind that: batchName, baselineName, action are mandatory parameters;<br>\n+     * <table border=\"1\">\n+     *    <caption>Example of screenshot configuration:</caption>\n+     *    <thead>\n+     *      <tr>\n+     *        <th>webHeaderToCut</th>\n+     *        <th>webFooterToCut</th>\n+     *        <th>nativeHeaderToCut</th>\n+     *        <th>nativeFooterToCut</th>\n+     *        <th>scrollableElement</th>\n+     *        <th>coordsProvider</th>\n+     *        <th>scrollTimeout</th>\n+     *        <th>screenshotShootingStrategy</th>\n+     *      </tr>\n+     *    </thead>\n+     *    <tbody>\n+     *      <tr>\n+     *        <td>100</td>\n+     *        <td>10</td>\n+     *        <td>20</td>\n+     *        <td>20</td>\n+     *        <td>By.id(scrollable)</td>\n+     *        <td>WEB_DRIVER</td>\n+     *        <td>500</td>\n+     *        <td>SIMPLE</td>\n+     *      </tr>\n+     *    </tbody>\n+     *  </table>\n+     * @param applitoolsVisualChecks custom eyes configuration\n+     * @param screenshotConfiguration custom shooting strategy configuration\n+     */\n+    @When(value = \"I run eyes test using:$eyesConfiguration and screenshot config:$screenshotConfiguration\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e2a02178a5f6488a54a0d15066c5512e677e37"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM4MTA0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/factory/ImageEyesFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NjoyNlrOFyQxhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NjoyNlrOFyQxhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Nzk0MQ==", "bodyText": "boolean saveTests = applitoolsVisualCheck.getAction() == VisualActionType.ESTABLISH;\neyes.setSaveFailedTests(saveTests);\n eyes.setSaveNewTests(saveTests);\n\nmaybe", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r388247941", "createdAt": "2020-03-05T11:56:26Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/factory/ImageEyesFactory.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.visual.eyes.factory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.inject.Named;\n+\n+import com.applitools.eyes.BatchInfo;\n+import com.applitools.eyes.LogHandler;\n+import com.applitools.eyes.RectangleSize;\n+import com.applitools.eyes.images.Eyes;\n+\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheck;\n+import org.vividus.visual.model.VisualActionType;\n+\n+@Named\n+public class ImageEyesFactory\n+{\n+    private final LogHandler logHandler;\n+    private final Map<String, BatchInfo> batchStorage = new ConcurrentHashMap<>();\n+\n+    public ImageEyesFactory(LogHandler logHandler)\n+    {\n+        this.logHandler = logHandler;\n+    }\n+\n+    public Eyes createEyes(ApplitoolsVisualCheck applitoolsVisualCheck)\n+    {\n+        Eyes eyes = new Eyes();\n+        eyes.setApiKey(applitoolsVisualCheck.getExecuteApiKey());\n+        String viewporSize = applitoolsVisualCheck.getViewportSize();\n+        //Environment\n+        eyes.setExplicitViewportSize(viewporSize == null ? null : RectangleSize.parse(viewporSize));\n+        eyes.setHostApp(applitoolsVisualCheck.getHostApp());\n+        eyes.setHostOS(applitoolsVisualCheck.getHostOS());\n+        eyes.setBaselineEnvName(applitoolsVisualCheck.getBaselineEnvName());\n+\n+        eyes.setMatchLevel(applitoolsVisualCheck.getMatchLevel());\n+        eyes.setServerUrl(applitoolsVisualCheck.getServerUri());\n+        eyes.setLogHandler(logHandler);\n+        if (applitoolsVisualCheck.getAction() == VisualActionType.ESTABLISH)\n+        {\n+            eyes.setSaveFailedTests(true);\n+            eyes.setSaveNewTests(true);\n+        }\n+        else\n+        {\n+            eyes.setSaveFailedTests(false);\n+            eyes.setSaveNewTests(false);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e2a02178a5f6488a54a0d15066c5512e677e37"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDA5MDgwOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/service/ImageVisualTestingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0ODo1N1rOFy9gTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo1OTo0M1rOFzFujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MDgxMw==", "bodyText": "this interaction should be excluded from the Allure report, we don't need Eyes API HTTP request/response -s", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r388980813", "createdAt": "2020-03-06T15:48:57Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/service/ImageVisualTestingService.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.visual.eyes.service;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Base64;\n+\n+import javax.inject.Named;\n+\n+import com.applitools.eyes.StepInfo;\n+import com.applitools.eyes.StepInfo.ApiUrls;\n+import com.applitools.eyes.TestResults;\n+import com.applitools.eyes.images.Eyes;\n+\n+import org.apache.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.http.client.HttpResponse;\n+import org.vividus.http.client.IHttpClient;\n+import org.vividus.visual.eyes.factory.ImageEyesFactory;\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheck;\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheckResult;\n+import org.vividus.visual.screenshot.ScreenshotProvider;\n+\n+@Named\n+public class ImageVisualTestingService implements VisualTestingService\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImageVisualTestingService.class);\n+\n+    private final ImageEyesFactory eyesFactory;\n+    private final ScreenshotProvider screenshotProvider;\n+    private final IHttpClient httpClient;\n+\n+    public ImageVisualTestingService(ImageEyesFactory eyesFactory, ScreenshotProvider screenshotProvider,\n+            IHttpClient httpClient)\n+    {\n+        this.eyesFactory = eyesFactory;\n+        this.screenshotProvider = screenshotProvider;\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public ApplitoolsVisualCheckResult run(ApplitoolsVisualCheck applitoolsVisualCheck)\n+    {\n+        Eyes eyes = eyesFactory.createEyes(applitoolsVisualCheck);\n+        TestResults testResults = null;\n+        try\n+        {\n+            eyes.open(applitoolsVisualCheck.getAppName(), applitoolsVisualCheck.getBaselineName());\n+            eyes.checkImage(screenshotProvider.take(applitoolsVisualCheck).getImage());\n+        }\n+        finally\n+        {\n+            testResults = eyes.close(false);\n+        }\n+        return createVisualCheckResult(testResults, applitoolsVisualCheck);\n+    }\n+\n+    private ApplitoolsVisualCheckResult createVisualCheckResult(TestResults testResults,\n+            ApplitoolsVisualCheck applitoolsVisualCheck)\n+    {\n+        ApplitoolsVisualCheckResult visualCheckResult = new ApplitoolsVisualCheckResult(applitoolsVisualCheck);\n+        visualCheckResult.setBatchUrl(testResults.getUrl());\n+        visualCheckResult.setPassed(testResults.isPassed());\n+        StepInfo stepInfo = testResults.getStepsInfo()[0];\n+        visualCheckResult.setStepUrl(stepInfo.getAppUrls().getStepEditor());\n+        setImages(applitoolsVisualCheck.getReadApiKey(), visualCheckResult, stepInfo);\n+        return visualCheckResult;\n+    }\n+\n+    private void setImages(String readKey, ApplitoolsVisualCheckResult visualCheckResult, StepInfo stepInfo)\n+    {\n+        ApiUrls apiUrls = stepInfo.getApiUrls();\n+        visualCheckResult.setBaseline(getImageAsBase64(apiUrls.getBaselineImage(), readKey));\n+        visualCheckResult.setCheckpoint(getImageAsBase64(apiUrls.getCheckpointImage(), readKey));\n+        visualCheckResult.setDiff(getImageAsBase64(apiUrls.getDiffImage(), readKey));\n+    }\n+\n+    private String getImageAsBase64(String url, String readKey)\n+    {\n+        if (url != null)\n+        {\n+            URI imageUrl = URI.create(addKeyToUrl(url, readKey));\n+            try\n+            {\n+                HttpResponse response = httpClient.doHttpGet(imageUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f281c1eac669fe9d8876f0bdc5875d3e36e3f6c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNTUzNA==", "bodyText": "Since it requires some refactoring -> change aspect based solution to the interceptors based, can we introduce it as a separate PR? I believe this case also not covered in resource checking steps; So it might require even more changes", "url": "https://github.com/vividus-framework/vividus/pull/354#discussion_r389115534", "createdAt": "2020-03-06T19:59:43Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-applitools/src/main/java/org/vividus/visual/eyes/service/ImageVisualTestingService.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.visual.eyes.service;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Base64;\n+\n+import javax.inject.Named;\n+\n+import com.applitools.eyes.StepInfo;\n+import com.applitools.eyes.StepInfo.ApiUrls;\n+import com.applitools.eyes.TestResults;\n+import com.applitools.eyes.images.Eyes;\n+\n+import org.apache.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.http.client.HttpResponse;\n+import org.vividus.http.client.IHttpClient;\n+import org.vividus.visual.eyes.factory.ImageEyesFactory;\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheck;\n+import org.vividus.visual.eyes.model.ApplitoolsVisualCheckResult;\n+import org.vividus.visual.screenshot.ScreenshotProvider;\n+\n+@Named\n+public class ImageVisualTestingService implements VisualTestingService\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImageVisualTestingService.class);\n+\n+    private final ImageEyesFactory eyesFactory;\n+    private final ScreenshotProvider screenshotProvider;\n+    private final IHttpClient httpClient;\n+\n+    public ImageVisualTestingService(ImageEyesFactory eyesFactory, ScreenshotProvider screenshotProvider,\n+            IHttpClient httpClient)\n+    {\n+        this.eyesFactory = eyesFactory;\n+        this.screenshotProvider = screenshotProvider;\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public ApplitoolsVisualCheckResult run(ApplitoolsVisualCheck applitoolsVisualCheck)\n+    {\n+        Eyes eyes = eyesFactory.createEyes(applitoolsVisualCheck);\n+        TestResults testResults = null;\n+        try\n+        {\n+            eyes.open(applitoolsVisualCheck.getAppName(), applitoolsVisualCheck.getBaselineName());\n+            eyes.checkImage(screenshotProvider.take(applitoolsVisualCheck).getImage());\n+        }\n+        finally\n+        {\n+            testResults = eyes.close(false);\n+        }\n+        return createVisualCheckResult(testResults, applitoolsVisualCheck);\n+    }\n+\n+    private ApplitoolsVisualCheckResult createVisualCheckResult(TestResults testResults,\n+            ApplitoolsVisualCheck applitoolsVisualCheck)\n+    {\n+        ApplitoolsVisualCheckResult visualCheckResult = new ApplitoolsVisualCheckResult(applitoolsVisualCheck);\n+        visualCheckResult.setBatchUrl(testResults.getUrl());\n+        visualCheckResult.setPassed(testResults.isPassed());\n+        StepInfo stepInfo = testResults.getStepsInfo()[0];\n+        visualCheckResult.setStepUrl(stepInfo.getAppUrls().getStepEditor());\n+        setImages(applitoolsVisualCheck.getReadApiKey(), visualCheckResult, stepInfo);\n+        return visualCheckResult;\n+    }\n+\n+    private void setImages(String readKey, ApplitoolsVisualCheckResult visualCheckResult, StepInfo stepInfo)\n+    {\n+        ApiUrls apiUrls = stepInfo.getApiUrls();\n+        visualCheckResult.setBaseline(getImageAsBase64(apiUrls.getBaselineImage(), readKey));\n+        visualCheckResult.setCheckpoint(getImageAsBase64(apiUrls.getCheckpointImage(), readKey));\n+        visualCheckResult.setDiff(getImageAsBase64(apiUrls.getDiffImage(), readKey));\n+    }\n+\n+    private String getImageAsBase64(String url, String readKey)\n+    {\n+        if (url != null)\n+        {\n+            URI imageUrl = URI.create(addKeyToUrl(url, readKey));\n+            try\n+            {\n+                HttpResponse response = httpClient.doHttpGet(imageUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MDgxMw=="}, "originalCommit": {"oid": "8f281c1eac669fe9d8876f0bdc5875d3e36e3f6c"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 443, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}