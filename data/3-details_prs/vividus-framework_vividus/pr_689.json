{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTQxMzYz", "number": 689, "title": "Add module to work with email servers", "bodyText": "Closes #621", "createdAt": "2020-06-22T19:44:44Z", "url": "https://github.com/vividus-framework/vividus/pull/689", "merged": true, "mergeCommit": {"oid": "481ecf1e8bfa8d9ebd8ef68e8c8f2aa2a658ba81"}, "closed": true, "closedAt": "2020-07-20T07:14:22Z", "author": {"login": "uarlouski"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct2RLvgBqjM0Njk5MDQ0Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc037iMgFqTQ0ODIyODM2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c251a983b4074212bc0af39fb6322dfa23ef6518", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c251a983b4074212bc0af39fb6322dfa23ef6518", "committedDate": "2020-06-22T19:22:36Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "9c70eae0901f8b7a4fd9e2e27034b30ef9f099f4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9c70eae0901f8b7a4fd9e2e27034b30ef9f099f4", "committedDate": "2020-06-22T19:46:08Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c70eae0901f8b7a4fd9e2e27034b30ef9f099f4", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9c70eae0901f8b7a4fd9e2e27034b30ef9f099f4", "committedDate": "2020-06-22T19:46:08Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "5ff1c68ef8698cc0009d0718d31bba1335a1c51c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5ff1c68ef8698cc0009d0718d31bba1335a1c51c", "committedDate": "2020-06-22T19:50:40Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ff1c68ef8698cc0009d0718d31bba1335a1c51c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5ff1c68ef8698cc0009d0718d31bba1335a1c51c", "committedDate": "2020-06-22T19:50:40Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "cc34d1bf106232b819b87267fe7d637f0097b4cd", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/cc34d1bf106232b819b87267fe7d637f0097b4cd", "committedDate": "2020-06-22T19:52:08Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc34d1bf106232b819b87267fe7d637f0097b4cd", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/cc34d1bf106232b819b87267fe7d637f0097b4cd", "committedDate": "2020-06-22T19:52:08Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "2e416a38b3c5d4a7da65bee7c20659de87514cd7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/2e416a38b3c5d4a7da65bee7c20659de87514cd7", "committedDate": "2020-06-24T15:05:10Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e416a38b3c5d4a7da65bee7c20659de87514cd7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/2e416a38b3c5d4a7da65bee7c20659de87514cd7", "committedDate": "2020-06-24T15:05:10Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "140c09fe58fedb721f4fab0e1f8278fb2c2a8758", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/140c09fe58fedb721f4fab0e1f8278fb2c2a8758", "committedDate": "2020-06-24T15:43:07Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "140c09fe58fedb721f4fab0e1f8278fb2c2a8758", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/140c09fe58fedb721f4fab0e1f8278fb2c2a8758", "committedDate": "2020-06-24T15:43:07Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "da08d7d21d7fcd792c1977799f488aaa9b7f6521", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/da08d7d21d7fcd792c1977799f488aaa9b7f6521", "committedDate": "2020-06-24T16:05:02Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5412c76729262836b2c1a2f2c81453bee6a7d1c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/d5412c76729262836b2c1a2f2c81453bee6a7d1c", "committedDate": "2020-06-24T16:39:54Z", "message": "increase timeout"}, "afterCommit": {"oid": "4a8113e5ab7f170abf874d8eaa2a643a2d597f76", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/4a8113e5ab7f170abf874d8eaa2a643a2d597f76", "committedDate": "2020-06-25T16:14:39Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a8113e5ab7f170abf874d8eaa2a643a2d597f76", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/4a8113e5ab7f170abf874d8eaa2a643a2d597f76", "committedDate": "2020-06-25T16:14:39Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "15751e58b231628b713f68ad8c4a706e519468c1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/15751e58b231628b713f68ad8c4a706e519468c1", "committedDate": "2020-06-25T16:38:02Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15751e58b231628b713f68ad8c4a706e519468c1", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/15751e58b231628b713f68ad8c4a706e519468c1", "committedDate": "2020-06-25T16:38:02Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/8333c365ae187ef336fd44fd4b97ea994356a684", "committedDate": "2020-06-25T17:53:23Z", "message": "Add module to work with email servers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODM5OTEy", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-437839912", "createdAt": "2020-06-25T20:37:02Z", "commit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNzowMlrOGpK6Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo1MjozNVrOGpLZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzU2Mw==", "bodyText": "please update the description", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445823563", "createdAt": "2020-06-25T20:37:02Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/build.gradle", "diffHunk": "@@ -0,0 +1,30 @@\n+project.description = 'Vividus plugin for Mongo DB testing'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDI1Mg==", "bodyText": "I think we have chains of predicates and here should be String value -> ExamplesTable value", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445824252", "createdAt": "2020-06-25T20:38:21Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/converter/StringToListOfMessagePredicatesConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Named;\n+import javax.mail.Message;\n+\n+import org.jbehave.core.model.ExamplesTable;\n+import org.jbehave.core.steps.ParameterConverters.AbstractParameterConverter;\n+import org.jbehave.core.steps.Parameters;\n+import org.vividus.bdd.factory.MailParameterFilterFactory;\n+\n+@Named\n+public class StringToListOfMessagePredicatesConverter extends AbstractParameterConverter<List<Predicate<Message>>>\n+{\n+    @Override\n+    public List<Predicate<Message>> convertValue(String value, Type type)\n+    {\n+        return new ExamplesTable(value).getRowsAsParameters()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNDg1OA==", "bodyText": "do you really need it?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445824858", "createdAt": "2020-06-25T20:39:37Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+\n+import org.vividus.bdd.model.EmailMessage;\n+\n+public interface IEmailMessageFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNTU4Mw==", "bodyText": "why do you hide IOException, but throw MessagingException?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445825583", "createdAt": "2020-06-25T20:41:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.model.EmailMessage;\n+import org.vividus.bdd.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory implements IEmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    @Override\n+    public EmailMessage create(Message message) throws MessagingException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNjY3Ng==", "bodyText": "what about lazy logging parameter extraction?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445826676", "createdAt": "2020-06-25T20:43:12Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.model.EmailMessage;\n+import org.vividus.bdd.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory implements IEmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    @Override\n+    public EmailMessage create(Message message) throws MessagingException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (IOException e)\n+        {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.info(\"Skip saving of attachment with the name '{}'\", part.getFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTkzNg==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445829936", "createdAt": "2020-06-25T20:49:46Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDA2Nw==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830067", "createdAt": "2020-06-25T20:50:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/IEmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDE4OA==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830188", "createdAt": "2020-06-25T20:50:13Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.factory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDI4Nw==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830287", "createdAt": "2020-06-25T20:50:24Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessage.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDM2Ng==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830366", "createdAt": "2020-06-25T20:50:33Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/model/EmailMessageTextContent.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDQ0MQ==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830441", "createdAt": "2020-06-25T20:50:41Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/model/MailServerConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDUxMA==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830510", "createdAt": "2020-06-25T20:50:49Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/service/IMessageFetchService.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDYwNQ==", "bodyText": "too generic package", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445830605", "createdAt": "2020-06-25T20:51:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMTQ0MA==", "bodyText": "add default properties", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r445831440", "createdAt": "2020-06-25T20:52:35Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/resources/spring.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:context=\"http://www.springframework.org/schema/context\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+        default-lazy-init=\"true\" >\n+\n+\n+    <context:component-scan base-package=\"org.vividus.jackson.databind.mail\"/>\n+    <context:component-scan base-package=\"org.vividus.bdd.service\"/>\n+    <context:component-scan base-package=\"org.vividus.bdd.factory\"/>\n+\n+    <bean id=\"mailSteps\" class=\"org.vividus.bdd.steps.mail.MailSteps\">\n+        <constructor-arg index=\"0\">\n+            <bean factory-bean=\"propertyMapper\" factory-method=\"readValues\">\n+                <constructor-arg value=\"mail.server.\" />\n+                <constructor-arg value=\"org.vividus.bdd.model.MailServerConfiguration\" />\n+            </bean>\n+        </constructor-arg>\n+    </bean>\n+\n+    <bean class=\"org.vividus.bdd.service.ImapMessageFetchService\">\n+        <constructor-arg index=\"0\" value=\"${mail.service.polling.duration}\"/>\n+        <constructor-arg index=\"1\" value=\"${mail.service.polling.retry-times}\"/>\n+        <constructor-arg index=\"2\" value=\"${mail.service.polling.wait-message-event-duration}\"/>\n+        <constructor-arg index=\"3\" value=\"${mail.service.folder}\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333c365ae187ef336fd44fd4b97ea994356a684"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa4cc792c8cb8d376f7450b3679ecae6d074cb0c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/aa4cc792c8cb8d376f7450b3679ecae6d074cb0c", "committedDate": "2020-06-26T18:00:13Z", "message": "comment fixes 1 [TO SQUASH]"}, "afterCommit": {"oid": "c36e669ede444546054e5db10639096945118193", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c36e669ede444546054e5db10639096945118193", "committedDate": "2020-06-27T07:53:55Z", "message": "comment fixes 1 [TO SQUASH]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTg3Njgw", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-442987680", "createdAt": "2020-07-06T11:19:32Z", "commit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToxOTozMlrOGtTNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjowNDo1NFrOGtUd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1Mzc5Ng==", "bodyText": "these lines repeated 3 times, it's recommended to move them to a new parameterized method", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450153796", "createdAt": "2020-07-06T11:19:32Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NDgwNw==", "bodyText": "this line is similar to FROM item", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450154807", "createdAt": "2020-07-06T11:21:54Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NTM5Mg==", "bodyText": "I believe we shouldn't hide exception at this level, MessagingException should be thrown and top-level handlers should process it", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450155392", "createdAt": "2020-07-06T11:23:11Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));\n+        }\n+    };\n+\n+    public abstract Predicate<Message> createFilter(String rule, String variable);\n+\n+    private static <T> T getValueSafely(Message message, MessagingExceptionFunction<Message, T> getter)\n+    {\n+        try\n+        {\n+            return getter.apply(message);\n+        }\n+        catch (MessagingException e)\n+        {\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NTgxMA==", "bodyText": "it's better to use datetime format string, instead of example", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450155810", "createdAt": "2020-07-06T11:24:13Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));\n+        }\n+    };\n+\n+    public abstract Predicate<Message> createFilter(String rule, String variable);\n+\n+    private static <T> T getValueSafely(Message message, MessagingExceptionFunction<Message, T> getter)\n+    {\n+        try\n+        {\n+            return getter.apply(message);\n+        }\n+        catch (MessagingException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static List<String> split(String value)\n+    {\n+        return Stream.of(value.split(\",\")).map(String::strip).collect(Collectors.toList());\n+    }\n+\n+    boolean checkDates(Date messageDate, String rule, String inputDate)\n+    {\n+        return apply(messageDate.toInstant(), rule, asISODateTime(inputDate));\n+    }\n+\n+    boolean checkAddressees(String rule, List<String> addresses, Address... actualAddresses)\n+    {\n+        int size = actualAddresses.length;\n+        return addresses.size() == size && IntStream.range(0, size)\n+                .allMatch(idx -> apply(actualAddresses[idx].toString(), rule, addresses.get(idx)));\n+    }\n+\n+    <T extends Comparable<T>> boolean apply(Object messageData, String rule, T input)\n+    {\n+        if (input == null)\n+        {\n+            return false;\n+        }\n+        IComparisonRule comparableRule = EnumUtils.getEnumIgnoreCase(ComparisonRule.class, rule);\n+        if (comparableRule != null)\n+        {\n+            return comparableRule.getComparisonRule(input).matches(messageData);\n+        }\n+        StringComparisonRule stringRule = EnumUtils.getEnumIgnoreCase(StringComparisonRule.class, rule);\n+        if (stringRule != null)\n+        {\n+            Validate.isTrue(input instanceof String, \"%s filter is not applicable for %s parameter\", stringRule,\n+                    this.name());\n+            return stringRule.createMatcher((String) input).matches(messageData);\n+        }\n+        throw new IllegalArgumentException(getUnknownRuleMessage(rule));\n+    }\n+\n+    private static String getUnknownRuleMessage(String unknown)\n+    {\n+        Set<String> rules = Stream.concat(Stream.of(ComparisonRule.values()), Stream.of(StringComparisonRule.values()))\n+                                  .map(Enum::name)\n+                                  .collect(Collectors.toSet());\n+\n+        return String.format(\"Unknown rule %s, please choose among the following rules: %s\", unknown, rules);\n+    }\n+\n+    private static Instant asISODateTime(String date)\n+    {\n+        try\n+        {\n+            return Instant.parse(date);\n+        }\n+        catch (DateTimeParseException e)\n+        {\n+            throw new IllegalArgumentException(\n+                    \"Please use ISO 8601 zone date time format like '2011-11-11T22:10:38.521Z'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NjQ2Mw==", "bodyText": "please add org.vividus.util.function.CheckedFunction to vividus-util", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450156463", "createdAt": "2020-07-06T11:25:29Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/MailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+\n+public enum MailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m ->\n+            {\n+                String subject = getValueSafely(m, Message::getSubject);\n+                return apply(subject, rule, variable);\n+            };\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getSentDate), rule, variable);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkDates(getValueSafely(m, Message::getReceivedDate), rule, variable);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getFrom));\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.CC)));\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.BCC)));\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable),\n+                    getValueSafely(m, msg -> msg.getRecipients(RecipientType.TO)));\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public Predicate<Message> createFilter(String rule, String variable)\n+        {\n+            return m -> checkAddressees(rule, split(variable), getValueSafely(m, Message::getReplyTo));\n+        }\n+    };\n+\n+    public abstract Predicate<Message> createFilter(String rule, String variable);\n+\n+    private static <T> T getValueSafely(Message message, MessagingExceptionFunction<Message, T> getter)\n+    {\n+        try\n+        {\n+            return getter.apply(message);\n+        }\n+        catch (MessagingException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static List<String> split(String value)\n+    {\n+        return Stream.of(value.split(\",\")).map(String::strip).collect(Collectors.toList());\n+    }\n+\n+    boolean checkDates(Date messageDate, String rule, String inputDate)\n+    {\n+        return apply(messageDate.toInstant(), rule, asISODateTime(inputDate));\n+    }\n+\n+    boolean checkAddressees(String rule, List<String> addresses, Address... actualAddresses)\n+    {\n+        int size = actualAddresses.length;\n+        return addresses.size() == size && IntStream.range(0, size)\n+                .allMatch(idx -> apply(actualAddresses[idx].toString(), rule, addresses.get(idx)));\n+    }\n+\n+    <T extends Comparable<T>> boolean apply(Object messageData, String rule, T input)\n+    {\n+        if (input == null)\n+        {\n+            return false;\n+        }\n+        IComparisonRule comparableRule = EnumUtils.getEnumIgnoreCase(ComparisonRule.class, rule);\n+        if (comparableRule != null)\n+        {\n+            return comparableRule.getComparisonRule(input).matches(messageData);\n+        }\n+        StringComparisonRule stringRule = EnumUtils.getEnumIgnoreCase(StringComparisonRule.class, rule);\n+        if (stringRule != null)\n+        {\n+            Validate.isTrue(input instanceof String, \"%s filter is not applicable for %s parameter\", stringRule,\n+                    this.name());\n+            return stringRule.createMatcher((String) input).matches(messageData);\n+        }\n+        throw new IllegalArgumentException(getUnknownRuleMessage(rule));\n+    }\n+\n+    private static String getUnknownRuleMessage(String unknown)\n+    {\n+        Set<String> rules = Stream.concat(Stream.of(ComparisonRule.values()), Stream.of(StringComparisonRule.values()))\n+                                  .map(Enum::name)\n+                                  .collect(Collectors.toSet());\n+\n+        return String.format(\"Unknown rule %s, please choose among the following rules: %s\", unknown, rules);\n+    }\n+\n+    private static Instant asISODateTime(String date)\n+    {\n+        try\n+        {\n+            return Instant.parse(date);\n+        }\n+        catch (DateTimeParseException e)\n+        {\n+            throw new IllegalArgumentException(\n+                    \"Please use ISO 8601 zone date time format like '2011-11-11T22:10:38.521Z'\",\n+                    e);\n+        }\n+    }\n+\n+    private interface MessagingExceptionFunction<T, R>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NzgwNg==", "bodyText": "IMessageFetchService-> MailFetchService", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450157806", "createdAt": "2020-07-06T11:28:29Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/IMessageFetchService.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import javax.mail.Message;\n+\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+\n+public interface IMessageFetchService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1ODAxMw==", "bodyText": "ImapMessageFetchService -> ImapFetchService", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450158013", "createdAt": "2020-07-06T11:28:56Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.mail.factory.EmailMessageFactory;\n+import org.vividus.bdd.mail.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapMessageFetchService implements IMessageFetchService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MTUwMA==", "bodyText": "org.vividus.util.function.CheckedSupplier", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450161500", "createdAt": "2020-07-06T11:36:39Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.mail.factory.EmailMessageFactory;\n+import org.vividus.bdd.mail.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapMessageFetchService implements IMessageFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private final WaitMode waitMode;\n+    private final Duration messageEventWaitDuration;\n+    private final String folder;\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapMessageFetchService(Duration duration, int retryTimes, Duration messageEventWaitDuration,\n+            String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        this.messageEventWaitDuration = messageEventWaitDuration;\n+        this.folder = folder;\n+        this.emailMessageFactory = emailMessageFactory;\n+    }\n+\n+    @Override\n+    public List<EmailMessage> fetch(List<Predicate<Message>> messageFilters, MailServerConfiguration configuration)\n+            throws MessageFetchServiceException\n+    {\n+        Authenticator authenticator = new PasswordAuthenticator(configuration.getUsername(),\n+                configuration.getPassword());\n+\n+        Properties properties = new Properties();\n+        properties.putAll(asImapsProperties(configuration.getProperties()));\n+\n+        Session session = Session.getInstance(properties, authenticator);\n+\n+        try (Store store = session.getStore(PROTOCOL); Folder mailFolder = getFolder(store))\n+        {\n+            SearchTerm searchTerm = new PredicateSearchTerm(messageFilters);\n+            PollingMessageListener listener = new PollingMessageListener(mailFolder::isOpen, searchTerm);\n+\n+            mailFolder.addMessageCountListener(listener);\n+            mailFolder.open(Folder.READ_ONLY);\n+\n+            Message[] messages = fetchMessages(mailFolder, Set.of(Item.ENVELOPE));\n+            Message[] filtered = mailFolder.search(searchTerm, messages);\n+\n+            if (filtered.length > 0)\n+            {\n+                fetchMessages(mailFolder, filtered, Set.of(Item.CONTENT_INFO));\n+                return asMailMessages(List.of(filtered));\n+            }\n+            else\n+            {\n+                Waiter waiter = new Waiter(waitMode);\n+                List<Message> output = interruptible(() -> waiter.wait(listener::getMessages, msgs -> !msgs.isEmpty()));\n+                return asMailMessages(output);\n+            }\n+        }\n+        catch (MessagingException | EmailMessageCreationException e)\n+        {\n+            throw new MessageFetchServiceException(e);\n+        }\n+    }\n+\n+    private List<EmailMessage> asMailMessages(List<Message> messages) throws EmailMessageCreationException\n+    {\n+        List<EmailMessage> emailMessages = new ArrayList<>(messages.size());\n+        for (Message message : messages)\n+        {\n+            emailMessages.add(emailMessageFactory.create(message));\n+        }\n+        return emailMessages;\n+    }\n+\n+    private Folder getFolder(Store store) throws MessagingException\n+    {\n+        store.connect();\n+        return store.getFolder(this.folder);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Set<Item> fetchSettings) throws MessagingException\n+    {\n+        return fetchMessages(folder, folder.getMessages(), fetchSettings);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Message[] messages, Set<Item> fetchSettings)\n+            throws MessagingException\n+    {\n+        FetchProfile profile = new FetchProfile();\n+        fetchSettings.forEach(profile::add);\n+        folder.fetch(messages, profile);\n+        return messages;\n+    }\n+\n+    private Map<String, String> asImapsProperties(Map<String, String> properties)\n+    {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> \"mail.\" + PROTOCOL + \".\" + e.getKey(), Map.Entry::getValue));\n+    }\n+\n+    private <T> T interruptible(InterruptedSupplier<T> supplier)\n+    {\n+        try\n+        {\n+            return supplier.get();\n+        }\n+        catch (InterruptedException e)\n+        {\n+            Thread.currentThread().interrupt();\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private interface InterruptedSupplier<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MzIwMw==", "bodyText": "assertion message is not clear", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450163203", "createdAt": "2020-07-06T11:40:29Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.EmailMessageTextContent;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.IMessageFetchService;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class MailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MailSteps.class);\n+\n+    private final Map<String, MailServerConfiguration> serverConfigurations;\n+    private final IMessageFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public MailSteps(Map<String, MailServerConfiguration> serverConfigurations,\n+            IMessageFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[1]</b> and the second under\n+     * <b>variableName[2]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws MessageFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<Predicate<Message>> messageFilters, Set<VariableScope> scopes,\n+            String variableName) throws MessageFetchServiceException, MessagingException\n+    {\n+        MailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Text content entries\", contents, hasSize(greaterThan(0))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2NDA3Nw==", "bodyText": "why not create the list and put it to variable context?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450164077", "createdAt": "2020-07-06T11:42:20Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/steps/MailSteps.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.EmailMessageTextContent;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.bdd.mail.service.IMessageFetchService;\n+import org.vividus.bdd.mail.service.ImapMessageFetchService.MessageFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class MailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MailSteps.class);\n+\n+    private final Map<String, MailServerConfiguration> serverConfigurations;\n+    private final IMessageFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public MailSteps(Map<String, MailServerConfiguration> serverConfigurations,\n+            IMessageFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[1]</b> and the second under\n+     * <b>variableName[2]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws MessageFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<Predicate<Message>> messageFilters, Set<VariableScope> scopes,\n+            String variableName) throws MessageFetchServiceException, MessagingException\n+    {\n+        MailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Text content entries\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);\n+                String key = String.format(\"%s[%d]\", variableName, index);\n+                bddVariableContext.putVariable(scopes, key, content.getContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDA5MQ==", "bodyText": "I believe it should be calculated automatically and be based on waitMode", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450174091", "createdAt": "2020-07-06T12:04:00Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/service/ImapMessageFetchService.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.mail.factory.EmailMessageFactory;\n+import org.vividus.bdd.mail.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.MailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapMessageFetchService implements IMessageFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private final WaitMode waitMode;\n+    private final Duration messageEventWaitDuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDQ1Mg==", "bodyText": "word service doesn't bring much sense, I think it should be replaced with imap", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r450174452", "createdAt": "2020-07-06T12:04:54Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-mail/src/main/resources/properties/defaults/defaults.properties", "diffHunk": "@@ -0,0 +1,4 @@\n+mail.service.polling.duration=PT30S\n+mail.service.polling.retry-times=5\n+mail.service.polling.wait-message-event-duration=PT5S\n+mail.service.folder=Inbox", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c36e669ede444546054e5db10639096945118193", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/c36e669ede444546054e5db10639096945118193", "committedDate": "2020-06-27T07:53:55Z", "message": "comment fixes 1 [TO SQUASH]"}, "afterCommit": {"oid": "3f91a6fa847a6446386244b8e88300b661b07e95", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3f91a6fa847a6446386244b8e88300b661b07e95", "committedDate": "2020-07-09T16:10:23Z", "message": "comment fixes 2 [TO SQUASH]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f91a6fa847a6446386244b8e88300b661b07e95", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/3f91a6fa847a6446386244b8e88300b661b07e95", "committedDate": "2020-07-09T16:10:23Z", "message": "comment fixes 2 [TO SQUASH]"}, "afterCommit": {"oid": "fc0fabb5e0dfd104b99570c913a82e828012c2b8", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/fc0fabb5e0dfd104b99570c913a82e828012c2b8", "committedDate": "2020-07-09T16:13:27Z", "message": "comment fixes 2 [TO SQUASH]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc0fabb5e0dfd104b99570c913a82e828012c2b8", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/fc0fabb5e0dfd104b99570c913a82e828012c2b8", "committedDate": "2020-07-09T16:13:27Z", "message": "comment fixes 2 [TO SQUASH]"}, "afterCommit": {"oid": "d15b88118e02fc73404a41bf7a66cf61ed0ed3e7", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/d15b88118e02fc73404a41bf7a66cf61ed0ed3e7", "committedDate": "2020-07-09T16:18:29Z", "message": "comment fixes 2 [TO SQUASH]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7d9f5c762f971283a55b9b04f00a4fd72488c19", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/e7d9f5c762f971283a55b9b04f00a4fd72488c19", "committedDate": "2020-07-09T16:50:55Z", "message": "minor fixes 3 [TO SQUASH]"}, "afterCommit": {"oid": "490cdcffbdd4cf98aa55e00b9b9bfaa11c04028a", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/490cdcffbdd4cf98aa55e00b9b9bfaa11c04028a", "committedDate": "2020-07-10T06:53:32Z", "message": "minor fixes 4 [TO SQUASH]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82eca81d86035e8ee50b278774c36a73ea292d21", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/82eca81d86035e8ee50b278774c36a73ea292d21", "committedDate": "2020-07-10T08:48:55Z", "message": "add docs 5 [TO SQUASH]"}, "afterCommit": {"oid": "cc8417e2a37219f8e0024426efecc6a0378f414c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/cc8417e2a37219f8e0024426efecc6a0378f414c", "committedDate": "2020-07-10T09:01:35Z", "message": "add docs 5 [TO SQUASH]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc8417e2a37219f8e0024426efecc6a0378f414c", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/cc8417e2a37219f8e0024426efecc6a0378f414c", "committedDate": "2020-07-10T09:01:35Z", "message": "add docs 5 [TO SQUASH]"}, "afterCommit": {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/95f37f502d47294afb1ddc3ce50e6d80a88e4741", "committedDate": "2020-07-10T09:06:26Z", "message": "add docs 5 [TO SQUASH]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjU0ODg5", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-446254889", "createdAt": "2020-07-10T09:22:53Z", "commit": {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToyMjo1M1rOGvwZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToyNDo0N1rOGvwc-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyOTIxMg==", "bodyText": "logging is not a crucial operation so no reason to re-throw exception, just log the error, e.g.:\ntry\n{\n    return part.getFileName();\n}\ncatch (MessagingException e)\n{\n    return e.toString();\n}", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452729212", "createdAt": "2020-07-10T09:22:53Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.factory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    public EmailMessage create(Message message) throws EmailMessageCreationException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (MessagingException | IOException | InternalEmailMessageCreationException e)\n+        {\n+            throw new EmailMessageCreationException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.atInfo().addArgument(() ->\n+                {\n+                    try\n+                    {\n+                        return part.getFileName();\n+                    }\n+                    catch (MessagingException e)\n+                    {\n+                        throw new InternalEmailMessageCreationException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyOTM4Mg==", "bodyText": "or you can even improve logging and build full message as an argument", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452729382", "createdAt": "2020-07-10T09:23:16Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.factory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    public EmailMessage create(Message message) throws EmailMessageCreationException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (MessagingException | IOException | InternalEmailMessageCreationException e)\n+        {\n+            throw new EmailMessageCreationException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.atInfo().addArgument(() ->\n+                {\n+                    try\n+                    {\n+                        return part.getFileName();\n+                    }\n+                    catch (MessagingException e)\n+                    {\n+                        throw new InternalEmailMessageCreationException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyOTIxMg=="}, "originalCommit": {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczMDEwNQ==", "bodyText": "I believe it can be inlined, it will still be very clear", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r452730105", "createdAt": "2020-07-10T09:24:47Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/factory/EmailParameterFilterFactory.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.factory;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.vividus.bdd.steps.ComparisonRule;\n+import org.vividus.bdd.steps.IComparisonRule;\n+import org.vividus.bdd.steps.StringComparisonRule;\n+import org.vividus.util.function.CheckedFunction;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public enum EmailParameterFilterFactory\n+{\n+    SUBJECT\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return m -> apply(m.getSubject(), rule, variable);\n+        }\n+    },\n+    SENT_DATE\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkDates(rule, variable, Message::getSentDate);\n+        }\n+    },\n+    RECEIVED_DATE\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkDates(rule, variable, Message::getReceivedDate);\n+        }\n+    },\n+    FROM\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkAddressees(rule, variable, Message::getFrom);\n+        }\n+    },\n+    CC_RECIPIENTS\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkRecipients(rule, variable, RecipientType.CC);\n+        }\n+    },\n+    BCC_RECIPIENTS\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkRecipients(rule, variable, RecipientType.BCC);\n+        }\n+    },\n+    TO_RECIPIENTS\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkRecipients(rule, variable, RecipientType.TO);\n+        }\n+    },\n+    REPLY_TO\n+    {\n+        @Override\n+        public CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable)\n+        {\n+            return checkAddressees(rule, variable, Message::getReplyTo);\n+        }\n+    };\n+\n+    public abstract CheckedPredicate<Message, MessagingException> createFilter(String rule, String variable);\n+\n+    CheckedPredicate<Message, MessagingException> checkDates(String rule, String inputDate,\n+            CheckedFunction<Message, Date, MessagingException> getter)\n+    {\n+        return m ->\n+        {\n+            Date messageDate = getter.apply(m);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95f37f502d47294afb1ddc3ce50e6d80a88e4741", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/95f37f502d47294afb1ddc3ce50e6d80a88e4741", "committedDate": "2020-07-10T09:06:26Z", "message": "add docs 5 [TO SQUASH]"}, "afterCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a2ede531bb40aba6b942502268f18a18d4c80fa2", "committedDate": "2020-07-10T11:04:47Z", "message": "Add module to work with email servers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTQ5Mzk5", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-439149399", "createdAt": "2020-06-29T13:35:51Z", "commit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzozNTo1MVrOGqRQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyMDoxN1rOGwkRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3NjE3Mw==", "bodyText": "Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()) - you don't want it but you will get InternalEmailMessageCreationException in case of error receiving optional info to the log? From my point of view, you should ignore exception in this case or log it.", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r446976173", "createdAt": "2020-06-29T13:35:51Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/factory/EmailMessageFactory.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.factory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Named;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Multipart;\n+import javax.mail.Part;\n+\n+import org.apache.tika.mime.MediaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.mail.model.EmailMessage;\n+import org.vividus.bdd.mail.model.EmailMessageTextContent;\n+\n+@Named\n+public class EmailMessageFactory\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailMessageFactory.class);\n+\n+    public EmailMessage create(Message message) throws EmailMessageCreationException\n+    {\n+        try\n+        {\n+            List<EmailMessageTextContent> contents = new ArrayList<>();\n+            Object content = message.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, contents);\n+            }\n+            else\n+            {\n+                contents.add(new EmailMessageTextContent(message.getContentType(), (String) content));\n+            }\n+            return new EmailMessage(message, contents);\n+        }\n+        catch (MessagingException | IOException | InternalEmailMessageCreationException e)\n+        {\n+            throw new EmailMessageCreationException(e);\n+        }\n+    }\n+\n+    private void unwrapMultipart(Multipart multipart, List<EmailMessageTextContent> container)\n+            throws MessagingException, IOException\n+    {\n+        for (int partIndex = 0; partIndex < multipart.getCount(); partIndex++)\n+        {\n+            BodyPart part = multipart.getBodyPart(partIndex);\n+            Object content = part.getContent();\n+            if (isMultipart(content))\n+            {\n+                unwrapMultipart((Multipart) content, container);\n+                continue;\n+            }\n+            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()))\n+            {\n+                LOGGER.atInfo().addArgument(() ->\n+                {\n+                    try\n+                    {\n+                        return part.getFileName();\n+                    }\n+                    catch (MessagingException e)\n+                    {\n+                        throw new InternalEmailMessageCreationException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3OTk5Nw==", "bodyText": "why not email?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r446979997", "createdAt": "2020-06-29T13:41:20Z", "author": {"login": "ikalinin1"}, "path": "settings.gradle", "diffHunk": "@@ -19,6 +19,7 @@ include 'vividus-plugin-db'\n include 'vividus-plugin-excel'\n include 'vividus-plugin-electron'\n include 'vividus-plugin-html'\n+include 'vividus-plugin-mail'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTQ4Nw==", "bodyText": "It won't be able to convert in the list in case of ExamplesTable -> Predicate converter?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r446981487", "createdAt": "2020-06-29T13:43:21Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-mail/src/main/java/org/vividus/bdd/mail/converter/StringToListOfMessagePredicatesConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.mail.converter;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Named;\n+import javax.mail.Message;\n+\n+import org.jbehave.core.model.ExamplesTable;\n+import org.jbehave.core.steps.ParameterConverters.AbstractChainableParameterConverter;\n+import org.jbehave.core.steps.Parameters;\n+import org.vividus.bdd.mail.factory.MailParameterFilterFactory;\n+\n+@Named\n+public class StringToListOfMessagePredicatesConverter\n+        extends AbstractChainableParameterConverter<ExamplesTable, List<Predicate<Message>>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36e669ede444546054e5db10639096945118193"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1ODkxNA==", "bodyText": "add a wiki link to a protocol description or RFC ?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453558914", "createdAt": "2020-07-13T10:40:17Z", "author": {"login": "ikalinin1"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTYwMw==", "bodyText": "https://github.com/vividus-framework/vividus/blob/master/docs/antora.yml#L11\nThere is a global attribute to a date format", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453561603", "createdAt": "2020-07-13T10:45:17Z", "author": {"login": "ikalinin1"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.\n+\n+For available IMAP properties see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html[IMAP docs] `Properties` section.\n+To use IMAP properties the `mail.imap.` prefix must be replaced with `mail.server.<configuration>.` e.g. `mail.imap.timeout` will become `mail.server.<configuration>.timeout`.\n+The `<configuration>` is a key for grouping server configuration and then to refer the configuration in steps.\n+\n+See <<_configuration_example>>\n+\n+== Steps\n+\n+=== Fetch message from an email server\n+\n+==== *_Info_*\n+\n+Fetches an email message from a server filtered by user-defined filters. If the message is found it's text content parts are saved into indexed variables prefixed `variableName` parameter and part index, e.g. if the message contains two text parts, the first part will be saved under `variableName[0]` and the second under `variableName[1]`\n+\n+==== *_Wording_*\n+\n+[source, gherkin]\n+----\n+When I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes variable `$variableName`\n+----\n+\n+==== *_Parameters_*\n+\n+. `$serverKey` - server `configuration` to identify a server to fetch a message from\n+. `$filters` - <<_message_filters>>\n+. `$scopes` - xref:parameters:variable-scope.adoc[Variable Scopes]\n+. `$variableName` - name to prefix text content references\n+\n+==== *_Usage_*\n+\n+.Sample.story\n+[source, gherkin]\n+----\n+Scenario: Fetch mail message\n+When I fetch mail message from `gmail` server filtered by\n+|parameter     |rule            |value                                       |\n+|SUBJECT       |EQUAL_TO        |Registration code                           |\n+|SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                    |\n+|RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                    |\n+|FROM          |IS_EQUAL_TO     |service <regservice@company.com>            |\n+|CC_RECIPIENTS |CONTAINS        |admin                                       |\n+|BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                   |\n+|TO_RECIPIENTS |EQUAL_TO        |me <me@company.com>, boss <boss@company.com>|\n+|REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                |\n+ and save message content to SCENARIO variable `textContent`\n+Then `textContent[1]` matches `.*Registration code.*`\n+----\n+\n+== Appendix\n+\n+=== Message filters\n+\n+==== *_parameter_*\n+\n+[cols=\"1,3\", options=\"header\"]\n+|===\n+|Name\n+|Description\n+\n+|SUBJECT\n+|Subject text\n+\n+|SENT_DATE\n+|Date in <<_iso_8061>> format\n+\n+|RECEIVED_DATE\n+|Date in <<_iso_8061>> format\n+\n+|FROM\n+|<<_address>>\n+\n+|CC_RECIPIENTS\n+|<<_address>>\n+\n+|BCC_RECIPIENTS\n+|<<_address>>\n+\n+|TO_RECIPIENTS\n+|<<_address>>\n+\n+|REPLY_TO\n+|<<_address>>\n+\n+|===\n+\n+==== *_rule_*\n+\n+* xref:parameters:comparison-rule.adoc[Comparison Rules] are allowed to be used with any kind of <<_parameter>>\n+* xref:parameters:string-comparison-rule.adoc[String Comparison Rules] are allowed to be used with any kind of <<_parameter>> besides `SENT_DATE` and `RECEIVED_DATE`\n+\n+=== ISO 8061\n+\n+Date argument must be presented in zoned ISO 8061 format e.g. `1970-01-01T00:00:00.000Z`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NDUxMg==", "bodyText": "{code}\nOptional.ofNullable(addresses).map(Stream.of(....)).orElse(\"\")?\n{code}", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453564512", "createdAt": "2020-07-13T10:50:45Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n+    {\n+        EmailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Email text content to save\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);\n+                String key = String.format(\"%s[%d]\", variableName, index);\n+                bddVariableContext.putVariable(scopes, key, content.getContent());\n+            });\n+        }\n+    }\n+\n+    private static String formatMessages(List<EmailMessage> messages) throws MessagingException\n+    {\n+        String messageFormat = \"Message #%d%n\"\n+                + \"Subject:\\t%s%n\"\n+                + \"Sent date:\\t%s%n\"\n+                + \"Received date:\\t%s%n\"\n+                + \"From:\\t\\t%s%n\"\n+                + \"CC Recipients:\\t%s%n\"\n+                + \"BCC Recipients:\\t%s%n\"\n+                + \"TO Recipients:\\t%s%n\"\n+                + \"Reply to:\\t%s%n\";\n+\n+        StringBuilder builder = new StringBuilder();\n+        for (int index = 0; index < messages.size(); index++)\n+        {\n+            EmailMessage message = messages.get(index);\n+            String messageAsString = String.format(messageFormat, index + 1, message.getSubject(),\n+                    dateAsIsoString(message.getSentDate()), dateAsIsoString(message.getReceivedDate()),\n+                    join(message.getFrom()), join(message.getRecipients(RecipientType.CC)),\n+                    join(message.getRecipients(RecipientType.BCC)), join(message.getRecipients(RecipientType.TO)),\n+                    join(message.getReplyTo()));\n+            builder.append(messageAsString);\n+        }\n+\n+        return builder.toString();\n+    }\n+\n+    private static String join(Address[] addresses)\n+    {\n+        return Stream.of(Optional.ofNullable(addresses).orElse(new Address[] {}))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NDY2OQ==", "bodyText": "https://openjdk.java.net/jeps/280", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453564669", "createdAt": "2020-07-13T10:51:04Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n+    {\n+        EmailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Email text content to save\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);\n+                String key = String.format(\"%s[%d]\", variableName, index);\n+                bddVariableContext.putVariable(scopes, key, content.getContent());\n+            });\n+        }\n+    }\n+\n+    private static String formatMessages(List<EmailMessage> messages) throws MessagingException\n+    {\n+        String messageFormat = \"Message #%d%n\"\n+                + \"Subject:\\t%s%n\"\n+                + \"Sent date:\\t%s%n\"\n+                + \"Received date:\\t%s%n\"\n+                + \"From:\\t\\t%s%n\"\n+                + \"CC Recipients:\\t%s%n\"\n+                + \"BCC Recipients:\\t%s%n\"\n+                + \"TO Recipients:\\t%s%n\"\n+                + \"Reply to:\\t%s%n\";\n+\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQzOA==", "bodyText": "Here you are testing the message, and what if the message is not the one you're waiting but one of the search criteria leads to an exception.\nDoes it mean inability to interact with the server and process other messages?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453577438", "createdAt": "2020-07-13T11:16:54Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n+        if (pollingTimeout < POLL_LOWER_BOUND)\n+        {\n+            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",\n+                    POLL_LOWER_BOUND, pollingTimeout));\n+        }\n+        this.messageEventWaitInMillis = (long) (waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)\n+                * EVENT_ARRIVAL_FACTOR);\n+        this.folder = folder;\n+        this.emailMessageFactory = emailMessageFactory;\n+    }\n+\n+    @Override\n+    public List<EmailMessage> fetch(List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            EmailServerConfiguration configuration) throws EmailFetchServiceException\n+    {\n+        Authenticator authenticator = new PasswordAuthenticator(configuration.getUsername(),\n+                configuration.getPassword());\n+\n+        Properties properties = new Properties();\n+        properties.putAll(asImapsProperties(configuration.getProperties()));\n+\n+        Session session = Session.getInstance(properties, authenticator);\n+\n+        try (Store store = session.getStore(PROTOCOL); Folder mailFolder = getFolder(store))\n+        {\n+            SearchTerm searchTerm = new PredicateSearchTerm(messageFilters);\n+            PollingMessageListener listener = new PollingMessageListener(mailFolder::isOpen, searchTerm);\n+\n+            mailFolder.addMessageCountListener(listener);\n+            mailFolder.open(Folder.READ_ONLY);\n+\n+            Message[] messages = fetchMessages(mailFolder, Set.of(Item.ENVELOPE));\n+            Message[] filtered = mailFolder.search(searchTerm, messages);\n+\n+            if (filtered.length > 0)\n+            {\n+                fetchMessages(mailFolder, filtered, Set.of(Item.CONTENT_INFO));\n+                return asMailMessages(List.of(filtered));\n+            }\n+            else\n+            {\n+                Waiter waiter = new Waiter(waitMode);\n+                List<Message> output = interruptible(() -> waiter.wait(listener::getMessages, msgs -> !msgs.isEmpty()));\n+                return asMailMessages(output);\n+            }\n+        }\n+        catch (MessagingException | EmailMessageCreationException | InternalEmailFetchServiceException e)\n+        {\n+            throw new EmailFetchServiceException(e);\n+        }\n+    }\n+\n+    private List<EmailMessage> asMailMessages(List<Message> messages) throws EmailMessageCreationException\n+    {\n+        List<EmailMessage> emailMessages = new ArrayList<>(messages.size());\n+        for (Message message : messages)\n+        {\n+            emailMessages.add(emailMessageFactory.create(message));\n+        }\n+        return emailMessages;\n+    }\n+\n+    private Folder getFolder(Store store) throws MessagingException\n+    {\n+        store.connect();\n+        return store.getFolder(this.folder);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Set<Item> fetchSettings) throws MessagingException\n+    {\n+        return fetchMessages(folder, folder.getMessages(), fetchSettings);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Message[] messages, Set<Item> fetchSettings)\n+            throws MessagingException\n+    {\n+        FetchProfile profile = new FetchProfile();\n+        fetchSettings.forEach(profile::add);\n+        folder.fetch(messages, profile);\n+        return messages;\n+    }\n+\n+    private Map<String, String> asImapsProperties(Map<String, String> properties)\n+    {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> \"mail.\" + PROTOCOL + \".\" + e.getKey(), Map.Entry::getValue));\n+    }\n+\n+    private <T> T interruptible(CheckedSupplier<T, InterruptedException> supplier)\n+    {\n+        try\n+        {\n+            return supplier.get();\n+        }\n+        catch (InterruptedException e)\n+        {\n+            Thread.currentThread().interrupt();\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static final class PredicateSearchTerm extends SearchTerm\n+    {\n+        private static final long serialVersionUID = 1163386376061414046L;\n+\n+        @SuppressFBWarnings(\"SE_TRANSIENT_FIELD_NOT_RESTORED\")\n+        private final transient List<CheckedPredicate<Message, MessagingException>> messageFilters;\n+\n+        private PredicateSearchTerm(List<CheckedPredicate<Message, MessagingException>> messageFilters)\n+        {\n+            this.messageFilters = messageFilters;\n+        }\n+\n+        @Override\n+        public boolean match(Message msg)\n+        {\n+            for (CheckedPredicate<Message, MessagingException> filter : messageFilters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3OTIwMA==", "bodyText": "new ArrayLst<>(this.messages) ?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453579200", "createdAt": "2020-07-13T11:20:17Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n+        if (pollingTimeout < POLL_LOWER_BOUND)\n+        {\n+            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",\n+                    POLL_LOWER_BOUND, pollingTimeout));\n+        }\n+        this.messageEventWaitInMillis = (long) (waitMode.calculatePollingTimeout(TimeUnit.MILLISECONDS)\n+                * EVENT_ARRIVAL_FACTOR);\n+        this.folder = folder;\n+        this.emailMessageFactory = emailMessageFactory;\n+    }\n+\n+    @Override\n+    public List<EmailMessage> fetch(List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            EmailServerConfiguration configuration) throws EmailFetchServiceException\n+    {\n+        Authenticator authenticator = new PasswordAuthenticator(configuration.getUsername(),\n+                configuration.getPassword());\n+\n+        Properties properties = new Properties();\n+        properties.putAll(asImapsProperties(configuration.getProperties()));\n+\n+        Session session = Session.getInstance(properties, authenticator);\n+\n+        try (Store store = session.getStore(PROTOCOL); Folder mailFolder = getFolder(store))\n+        {\n+            SearchTerm searchTerm = new PredicateSearchTerm(messageFilters);\n+            PollingMessageListener listener = new PollingMessageListener(mailFolder::isOpen, searchTerm);\n+\n+            mailFolder.addMessageCountListener(listener);\n+            mailFolder.open(Folder.READ_ONLY);\n+\n+            Message[] messages = fetchMessages(mailFolder, Set.of(Item.ENVELOPE));\n+            Message[] filtered = mailFolder.search(searchTerm, messages);\n+\n+            if (filtered.length > 0)\n+            {\n+                fetchMessages(mailFolder, filtered, Set.of(Item.CONTENT_INFO));\n+                return asMailMessages(List.of(filtered));\n+            }\n+            else\n+            {\n+                Waiter waiter = new Waiter(waitMode);\n+                List<Message> output = interruptible(() -> waiter.wait(listener::getMessages, msgs -> !msgs.isEmpty()));\n+                return asMailMessages(output);\n+            }\n+        }\n+        catch (MessagingException | EmailMessageCreationException | InternalEmailFetchServiceException e)\n+        {\n+            throw new EmailFetchServiceException(e);\n+        }\n+    }\n+\n+    private List<EmailMessage> asMailMessages(List<Message> messages) throws EmailMessageCreationException\n+    {\n+        List<EmailMessage> emailMessages = new ArrayList<>(messages.size());\n+        for (Message message : messages)\n+        {\n+            emailMessages.add(emailMessageFactory.create(message));\n+        }\n+        return emailMessages;\n+    }\n+\n+    private Folder getFolder(Store store) throws MessagingException\n+    {\n+        store.connect();\n+        return store.getFolder(this.folder);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Set<Item> fetchSettings) throws MessagingException\n+    {\n+        return fetchMessages(folder, folder.getMessages(), fetchSettings);\n+    }\n+\n+    private Message[] fetchMessages(Folder folder, Message[] messages, Set<Item> fetchSettings)\n+            throws MessagingException\n+    {\n+        FetchProfile profile = new FetchProfile();\n+        fetchSettings.forEach(profile::add);\n+        folder.fetch(messages, profile);\n+        return messages;\n+    }\n+\n+    private Map<String, String> asImapsProperties(Map<String, String> properties)\n+    {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> \"mail.\" + PROTOCOL + \".\" + e.getKey(), Map.Entry::getValue));\n+    }\n+\n+    private <T> T interruptible(CheckedSupplier<T, InterruptedException> supplier)\n+    {\n+        try\n+        {\n+            return supplier.get();\n+        }\n+        catch (InterruptedException e)\n+        {\n+            Thread.currentThread().interrupt();\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static final class PredicateSearchTerm extends SearchTerm\n+    {\n+        private static final long serialVersionUID = 1163386376061414046L;\n+\n+        @SuppressFBWarnings(\"SE_TRANSIENT_FIELD_NOT_RESTORED\")\n+        private final transient List<CheckedPredicate<Message, MessagingException>> messageFilters;\n+\n+        private PredicateSearchTerm(List<CheckedPredicate<Message, MessagingException>> messageFilters)\n+        {\n+            this.messageFilters = messageFilters;\n+        }\n+\n+        @Override\n+        public boolean match(Message msg)\n+        {\n+            for (CheckedPredicate<Message, MessagingException> filter : messageFilters)\n+            {\n+                try\n+                {\n+                    if (!filter.test(msg))\n+                    {\n+                        return false;\n+                    }\n+                }\n+                catch (MessagingException e)\n+                {\n+                    throw new InternalEmailFetchServiceException(e);\n+                }\n+            }\n+            return true;\n+        }\n+    }\n+\n+    private static final class PasswordAuthenticator extends Authenticator\n+    {\n+        private final String username;\n+        private final String password;\n+\n+        private PasswordAuthenticator(String username, String password)\n+        {\n+            this.username = username;\n+            this.password = password;\n+        }\n+\n+        @Override\n+        protected PasswordAuthentication getPasswordAuthentication()\n+        {\n+            return new PasswordAuthentication(username, password);\n+        }\n+    }\n+\n+    private final class PollingMessageListener implements MessageCountListener\n+    {\n+        private final Runnable refresh;\n+        private final SearchTerm searchTerm;\n+        private final List<Message> messages;\n+\n+        private final ReentrantLock lock = new ReentrantLock();\n+        private final Condition messageArrivedCondition = lock.newCondition();\n+        private final Condition messageHandleCondition = lock.newCondition();\n+        private final AtomicBoolean handleFlag = new AtomicBoolean(true);\n+\n+        private PollingMessageListener(Runnable refresh, SearchTerm searchTerm)\n+        {\n+            this.refresh = refresh;\n+            this.searchTerm = searchTerm;\n+            this.messages = new CopyOnWriteArrayList<>();\n+        }\n+\n+        @Override\n+        public void messagesAdded(MessageCountEvent event)\n+        {\n+            try\n+            {\n+                lock.lock();\n+                messageArrivedCondition.signal();\n+                interruptible(() ->\n+                {\n+                    while (handleFlag.get())\n+                    {\n+                        messageHandleCondition.await();\n+                    }\n+                    return null;\n+                });\n+                for (Message message : event.getMessages())\n+                {\n+                    if (searchTerm.match(message))\n+                    {\n+                        messages.add(message);\n+                    }\n+                }\n+            }\n+            finally\n+            {\n+                try\n+                {\n+                    handleFlag.set(true);\n+                    messageHandleCondition.signal();\n+                }\n+                finally\n+                {\n+                    lock.unlock();\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void messagesRemoved(MessageCountEvent event)\n+        {\n+            // empty\n+        }\n+\n+        public List<Message> getMessages() throws InterruptedException\n+        {\n+            while (lock.isLocked())\n+            {\n+                Sleeper.sleep(Duration.ofSeconds(1));\n+            }\n+            try\n+            {\n+                lock.lock();\n+                refresh.run();\n+                boolean arrived = false;\n+                while (true)\n+                {\n+                    arrived = messageArrivedCondition.await(messageEventWaitInMillis, TimeUnit.MILLISECONDS);\n+                    break;\n+                }\n+\n+                if (arrived)\n+                {\n+                    handleFlag.set(false);\n+                    messageHandleCondition.signal();\n+                    while (!handleFlag.get())\n+                    {\n+                        messageHandleCondition.await();\n+                    }\n+                }\n+                return StreamSupport.stream(this.messages.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 314}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjMwMzMw", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-447230330", "createdAt": "2020-07-13T13:04:50Z", "commit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzowNDo1MFrOGwnncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNDoxNVrOGwn9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzMzkwNQ==", "bodyText": "<configuration> -> <server-key>", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453633905", "createdAt": "2020-07-13T13:04:50Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNDQ2MA==", "bodyText": "is it really important here?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453634460", "createdAt": "2020-07-13T13:05:45Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNTQwMw==", "bodyText": "For IMAP configuration details see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html#properties[IMAP Properties].", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453635403", "createdAt": "2020-07-13T13:07:28Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.\n+\n+For available IMAP properties see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html[IMAP docs] `Properties` section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNTc3Nw==", "bodyText": "mail.server.<configuration>. -> email.server.<server-key>.", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453635777", "createdAt": "2020-07-13T13:08:08Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.\n+\n+For available IMAP properties see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html[IMAP docs] `Properties` section.\n+To use IMAP properties the `mail.imap.` prefix must be replaced with `mail.server.<configuration>.` e.g. `mail.imap.timeout` will become `mail.server.<configuration>.timeout`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNTk0Mw==", "bodyText": "mail.server.<configuration>.timeout -> email.server.<server-key>.timeout", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453635943", "createdAt": "2020-07-13T13:08:28Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.\n+\n+For available IMAP properties see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html[IMAP docs] `Properties` section.\n+To use IMAP properties the `mail.imap.` prefix must be replaced with `mail.server.<configuration>.` e.g. `mail.imap.timeout` will become `mail.server.<configuration>.timeout`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNjg5OQ==", "bodyText": "The `<server-key>` is a logical name defining single server configuration and referred in steps.", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453636899", "createdAt": "2020-07-13T13:10:05Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.\n+\n+For available IMAP properties see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html[IMAP docs] `Properties` section.\n+To use IMAP properties the `mail.imap.` prefix must be replaced with `mail.server.<configuration>.` e.g. `mail.imap.timeout` will become `mail.server.<configuration>.timeout`.\n+The `<configuration>` is a key for grouping server configuration and then to refer the configuration in steps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNzEzOQ==", "bodyText": "it's -> its", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453637139", "createdAt": "2020-07-13T13:10:29Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.\n+\n+For available IMAP properties see https://javaee.github.io/javamail/docs/api/com/sun/mail/imap/package-summary.html[IMAP docs] `Properties` section.\n+To use IMAP properties the `mail.imap.` prefix must be replaced with `mail.server.<configuration>.` e.g. `mail.imap.timeout` will become `mail.server.<configuration>.timeout`.\n+The `<configuration>` is a key for grouping server configuration and then to refer the configuration in steps.\n+\n+See <<_configuration_example>>\n+\n+== Steps\n+\n+=== Fetch message from an email server\n+\n+==== *_Info_*\n+\n+Fetches an email message from a server filtered by user-defined filters. If the message is found it's text content parts are saved into indexed variables prefixed `variableName` parameter and part index, e.g. if the message contains two text parts, the first part will be saved under `variableName[0]` and the second under `variableName[1]`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzOTU3Mg==", "bodyText": "mail -> email", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r453639572", "createdAt": "2020-07-13T13:14:15Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch mail message from `$serverKey` server filtered by $filters and save message content to $scopes \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 136}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/a2ede531bb40aba6b942502268f18a18d4c80fa2", "committedDate": "2020-07-10T11:04:47Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/34ba5796429b9029e7453e3c4db9b13ecfca3f24", "committedDate": "2020-07-14T08:30:57Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34ba5796429b9029e7453e3c4db9b13ecfca3f24", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/34ba5796429b9029e7453e3c4db9b13ecfca3f24", "committedDate": "2020-07-14T08:30:57Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "committedDate": "2020-07-14T09:30:49Z", "message": "Add module to work with email servers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTU3MTk1", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-447957195", "createdAt": "2020-07-14T09:49:34Z", "commit": {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0OTozNFrOGxMfkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo1NDozNlrOGxMqfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzODA5OA==", "bodyText": "exceed -> be not less than", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454238098", "createdAt": "2020-07-14T09:49:34Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessageRemovedException;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);\n+        if (pollingTimeout < POLL_LOWER_BOUND)\n+        {\n+            throw new IllegalArgumentException(String.format(\"Polling timeout must exceed %d seconds, but got %d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzODU0OQ==", "bodyText": "use milliseconds to show precise error message in case of invalid configuration", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454238549", "createdAt": "2020-07-14T09:50:21Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/service/ImapFetchService.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import javax.mail.Authenticator;\n+import javax.mail.FetchProfile;\n+import javax.mail.FetchProfile.Item;\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessageRemovedException;\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+import javax.mail.event.MessageCountEvent;\n+import javax.mail.event.MessageCountListener;\n+import javax.mail.search.SearchTerm;\n+\n+import org.vividus.bdd.email.factory.EmailMessageFactory;\n+import org.vividus.bdd.email.factory.EmailMessageFactory.EmailMessageCreationException;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.util.Sleeper;\n+import org.vividus.util.function.CheckedPredicate;\n+import org.vividus.util.function.CheckedSupplier;\n+import org.vividus.util.wait.WaitMode;\n+import org.vividus.util.wait.Waiter;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+public class ImapFetchService implements EmailFetchService\n+{\n+    private static final String PROTOCOL = \"imaps\";\n+\n+    private static final float EVENT_ARRIVAL_FACTOR = 0.8f;\n+    private static final long POLL_LOWER_BOUND = 5;\n+\n+    private final WaitMode waitMode;\n+    private final String folder;\n+    private final long messageEventWaitInMillis;\n+\n+    private final EmailMessageFactory emailMessageFactory;\n+\n+    public ImapFetchService(Duration duration, int retryTimes, String folder, EmailMessageFactory emailMessageFactory)\n+    {\n+        this.waitMode = new WaitMode(duration, retryTimes);\n+        long pollingTimeout = waitMode.calculatePollingTimeout(TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzOTE1MQ==", "bodyText": "interact -> to interact", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454239151", "createdAt": "2020-07-14T09:51:25Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol[IMAPS protocol].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0MDg5NA==", "bodyText": "be equal to or exceed -> be not less than", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454240894", "createdAt": "2020-07-14T09:54:36Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-email.adoc", "diffHunk": "@@ -0,0 +1,148 @@\n+= Plugin Email\n+\n+== General Info\n+\n+The plugin provides functionality interact with email servers over IMAPS protocol.\n+\n+== Installation\n+\n+.build.gradle\n+[source, gradle]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-email', version: '<vividusVersion>')\n+----\n+\n+== Properties\n+\n+=== Required\n+\n+* `email.server.<configuration>.username` - defines email server username\n+* `email.server.<configuration>.password` - defines email server password\n+* `email.server.<configuration>.properties.host` - defines email server host, e.g. `imap.gmail.com`\n+* `email.server.<configuration>.properties.port` - defines email server port, e.g. `993`\n+\n+=== Optional\n+\n+* `email.imap.wait.duration` - defines message polling duration from the email server, default value is `PT30S`\n+* `email.imap.wait.retry-times` - defines a number of retries will be performed during polling duration, default value is `5`\n+* `email.imap.folder` - defines folder name to work with, default value is `Inbox`\n+\n+Polling timeout that can be calculated by `email.imap.wait.duration / email.imap.wait.retry-times` must be equal to or exceed `5` seconds.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNDQ2MA=="}, "originalCommit": {"oid": "a2ede531bb40aba6b942502268f18a18d4c80fa2"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/9e7f7a0c953ad2da2dfaa15b8be2243702a8ac73", "committedDate": "2020-07-14T09:30:49Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "7930969597587ffd3469d4dd1df4aab8bf713f03", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7930969597587ffd3469d4dd1df4aab8bf713f03", "committedDate": "2020-07-14T10:12:31Z", "message": "Add module to work with email servers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTg0NjUw", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-447984650", "createdAt": "2020-07-14T10:30:00Z", "commit": {"oid": "7930969597587ffd3469d4dd1df4aab8bf713f03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDE0NzIx", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-448014721", "createdAt": "2020-07-14T11:19:10Z", "commit": {"oid": "7930969597587ffd3469d4dd1df4aab8bf713f03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMToxOToxMFrOGxPSiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMToxOToxMFrOGxPSiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4MzkxMw==", "bodyText": "atInfo?", "url": "https://github.com/vividus-framework/vividus/pull/689#discussion_r454283913", "createdAt": "2020-07-14T11:19:10Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-email/src/main/java/org/vividus/bdd/email/steps/EmailSteps.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.email.steps;\n+\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.Message.RecipientType;\n+import javax.mail.MessagingException;\n+\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.email.model.EmailMessage;\n+import org.vividus.bdd.email.model.EmailMessageTextContent;\n+import org.vividus.bdd.email.model.EmailServerConfiguration;\n+import org.vividus.bdd.email.service.EmailFetchService;\n+import org.vividus.bdd.email.service.ImapFetchService.EmailFetchServiceException;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.softassert.ISoftAssert;\n+import org.vividus.util.function.CheckedPredicate;\n+\n+public class EmailSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmailSteps.class);\n+\n+    private final Map<String, EmailServerConfiguration> serverConfigurations;\n+    private final EmailFetchService messageFetchService;\n+    private final IBddVariableContext bddVariableContext;\n+    private final ISoftAssert softAssert;\n+\n+    public EmailSteps(Map<String, EmailServerConfiguration> serverConfigurations,\n+            EmailFetchService messageFetchService, IBddVariableContext bddVariableContext, ISoftAssert softAssert)\n+    {\n+        this.messageFetchService = messageFetchService;\n+        this.bddVariableContext = bddVariableContext;\n+        this.serverConfigurations = serverConfigurations;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Step fetches a mail message from a server specified by the <b>serverKey</b> and if message is found saves\n+     * its <i>text</i> content parts into indexed variables with the prefix <b>variableName</b> i.e. if the message\n+     * contains two text parts, the first part will be saved under <b>variableName[0]</b> and the second under\n+     * <b>variableName[1]</b>\n+     * <div><b>Example:</b></div>\n+     * <pre>\n+     * <code>\n+     * When I fetch mail message from `gmail` server filtered by\n+     * <br> |parameter     |rule            |value                                                   |\n+     * <br> |SUBJECT       |EQUAL_TO        |Registration code                                       |\n+     * <br> |SENT_DATE     |GREATER_THAN    |1970-01-01T00:00:00.000Z                                |\n+     * <br> |RECEIVED_DATE |LESS_THAN       |2020-06-14T11:47:11.521Z                                |\n+     * <br> |FROM          |IS_EQUAL_TO     |service &lt;regservice@company.com&gt;                  |\n+     * <br> |CC_RECIPIENTS |CONTAINS        |admin                                                   |\n+     * <br> |BCC_RECIPIENTS|DOES_NOT_CONTAIN|gmail.com                                               |\n+     * <br> |TO_RECIPIENTS |EQUAL_TO        |me &lt;me@company.com&gt;, boss &lt;boss@company.com&gt;|\n+     * <br> |REPLY_TO      |MATCHES         |(?i)[0-9]@.*                                            |\n+     * <br>  and save message content to SCENARIO variable `textContent`\n+     * </code>\n+     * </pre>\n+     * Filtering <b>rule</b>s:\n+     * <ul>\n+     * <li>EQUAL_TO</li>\n+     * <li>GREATER_THAN_OR_EQUAL_TO</li>\n+     * <li>GREATER_THAN</li>\n+     * <li>LESS_THAN_OR_EQUAL_TO</li>\n+     * <li>LESS_THAN</li>\n+     * <li>NOT_EQUAL_TO</li>\n+     * <li>IS_EQUAL_TO</li>\n+     * <li>CONTAINS</li>\n+     * <li>DOES_NOT_CONTAIN</li>\n+     * <li>MATCHES</li>\n+     * </ul>\n+     * <b>Parameter</b>s:\n+     * <ul>\n+     * <li>SUBJECT</li>\n+     * <li>SENT_DATE</li>\n+     * <li>RECEIVED_DATE</li>\n+     * <li>FROM</li>\n+     * <li>CC_RECIPIENTS</li>\n+     * <li>BCC_RECIPIENTS</li>\n+     * <li>TO_RECIPIENTS</li>\n+     * <li>REPLY_TO</li>\n+     * </ul>\n+     * Notes:\n+     * <ul>\n+     * <li>CONTAINS, MATCHES, IS_EQUAL_TO, DOES_NOT_CONTAIN are not allowed to be used with <i>date</i>\n+     * parameters</li>\n+     * <li><b>rule</b> names are case insensitive</li>\n+     * <li>multiple <i>address</i> parameters can be checked by separating expected value by commas</li>\n+     * <li><i>date</i> parameters must have zoned ISO 8061 format i.e. 1970-01-01T00:00:00.000Z</li>\n+     * </ul>\n+     * @param serverKey key of a server to fetch a message from\n+     * @param messageFilters message filters\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @throws MessagingException signals that an exception of some sort has occurred while communicating with\n+     * message service\n+     * @throws EmailFetchServiceException signals that an exception of some sort has occurred while fetching\n+     * message from email server\n+     */\n+    @When(\"I fetch email message from `$serverKey` server filtered by $filters and save message content to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void saveMessageContent(String serverKey, List<CheckedPredicate<Message, MessagingException>> messageFilters,\n+            Set<VariableScope> scopes, String variableName) throws EmailFetchServiceException, MessagingException\n+    {\n+        EmailServerConfiguration config = serverConfigurations.get(serverKey);\n+        List<EmailMessage> messages = messageFetchService.fetch(messageFilters, config);\n+\n+        int size = messages.size();\n+        if (messages.size() != 1)\n+        {\n+            if (size == 0)\n+            {\n+                softAssert.recordFailedAssertion(\"No messages were found by the specified filters\");\n+                return;\n+            }\n+            softAssert.recordFailedAssertion(\n+                    String.format(\"Expected one message, but found %d:%n%s\", size, formatMessages(messages)));\n+            return;\n+        }\n+\n+        EmailMessage message = messages.get(0);\n+        List<EmailMessageTextContent> contents = message.getContents();\n+        if (softAssert.assertThat(\"Email text content to save\", contents, hasSize(greaterThan(0))))\n+        {\n+            IntStream.range(0, contents.size()).forEach(index ->\n+            {\n+                EmailMessageTextContent content = contents.get(index);\n+                LOGGER.info(\"Content {} by index '{}'\", content.getContentType(), index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7930969597587ffd3469d4dd1df4aab8bf713f03"}, "originalPosition": 164}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7930969597587ffd3469d4dd1df4aab8bf713f03", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/7930969597587ffd3469d4dd1df4aab8bf713f03", "committedDate": "2020-07-14T10:12:31Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "committedDate": "2020-07-14T11:48:04Z", "message": "Add module to work with email servers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "committedDate": "2020-07-14T12:09:15Z", "message": "Add module to work with email servers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/f1b38b5d3187d5d60e06a1ac2540e54e16dccb69", "committedDate": "2020-07-14T11:48:04Z", "message": "Add module to work with email servers"}, "afterCommit": {"oid": "5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "author": {"user": {"login": "uarlouski", "name": "Uladzislau Arlouski"}}, "url": "https://github.com/vividus-framework/vividus/commit/5f1b46375d9656f03255a76f06bfcfe0b5eac52e", "committedDate": "2020-07-14T12:09:15Z", "message": "Add module to work with email servers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjI4MzY5", "url": "https://github.com/vividus-framework/vividus/pull/689#pullrequestreview-448228369", "createdAt": "2020-07-14T15:39:57Z", "commit": {"oid": "5f1b46375d9656f03255a76f06bfcfe0b5eac52e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 113, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}