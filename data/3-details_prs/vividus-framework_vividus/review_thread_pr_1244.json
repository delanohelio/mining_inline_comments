{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwOTk2OTU0", "number": 1244, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo1NjoxOVrOFGFAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNDoyMlrOFGG7XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTE3ODIzOnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo1NjoxOVrOIG6hAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo0NTozOVrOIG_DVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA==", "bodyText": "List.of(KEY_1, KEY_2, KEY_3, KEY_4).sort(sortingOrder.getSortingType()) ?", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544121088", "createdAt": "2020-12-16T08:56:19Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyOTUyNQ==", "bodyText": "it will fail because List.of is immutable", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544129525", "createdAt": "2020-12-16T09:09:06Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MDM5OQ==", "bodyText": "Arrays.asList(...) then? :)", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544160399", "createdAt": "2020-12-16T09:53:25Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MDg0Nw==", "bodyText": "sorterd -> sorted", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544160847", "createdAt": "2020-12-16T09:54:05Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NjUxMQ==", "bodyText": "sort returns void, so imho sort via stream looks good", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544166511", "createdAt": "2020-12-16T10:02:05Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4OTExOA==", "bodyText": "JMH time :)", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544189118", "createdAt": "2020-12-16T10:35:48Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5MTA0OQ==", "bodyText": "https://stackoverflow.com/questions/49798129/what-is-more-efficient-sorted-stream-or-sorting-a-list", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544191049", "createdAt": "2020-12-16T10:38:51Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NTQxMg==", "bodyText": "okay, but\n\nthis is just a unit test\nlets stop using streams where we don't need parallel computations?", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544195412", "createdAt": "2020-12-16T10:45:39Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/test/java/org/vividus/bdd/steps/ui/model/StringSortingOrderTests.java", "diffHunk": "@@ -27,18 +28,28 @@\n \n class StringSortingOrderTests\n {\n+    private static final String KEY_1 = \"Cry Over Spilt Milk\";\n+    private static final String KEY_2 = \"an Arm and a Leg\";\n+    private static final String KEY_3 = \"A Piece of Cake\";\n+    private static final String KEY_4 = \"Beating Around the Bush\";\n+\n     private static Stream<Arguments> dataProvider()\n     {\n         return Stream.of(\n-            Arguments.of(StringSortingOrder.ASCENDING, Comparator.naturalOrder()),\n-            Arguments.of(StringSortingOrder.DESCENDING, Comparator.reverseOrder())\n+            Arguments.of(StringSortingOrder.ASCENDING, List.of(KEY_3, KEY_4, KEY_1, KEY_2)),\n+            Arguments.of(StringSortingOrder.DESCENDING, List.of(KEY_2, KEY_1, KEY_4, KEY_3)),\n+            Arguments.of(StringSortingOrder.ASCENDING_IGNORE_CASE, List.of(KEY_3, KEY_2, KEY_4, KEY_1)),\n+            Arguments.of(StringSortingOrder.DESCENDING_IGNORE_CASE, List.of(KEY_1, KEY_4, KEY_2, KEY_3))\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"dataProvider\")\n-    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, Comparator<? extends Comparable> comparator)\n+    void shouldReturnSortingComparator(StringSortingOrder sortingOrder, List<String> expected)\n     {\n-        assertEquals(sortingOrder.getSortingType(), comparator);\n+        List<String> sorterd = List.of(KEY_1, KEY_2, KEY_3, KEY_4).stream()\n+                                                                  .sorted(sortingOrder.getSortingType())\n+                                                                  .collect(Collectors.toList());\n+        assertEquals(expected, sorterd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTA4OA=="}, "originalCommit": {"oid": "f56201e72ef387ebb503dfee237287651196318f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQ5Mjc2OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/partials/generic-ui-steps.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNDoyMlrOIG9Yhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNDoyMlrOIG9Yhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2ODA3MQ==", "bodyText": "please format the possible values in list-like view\nalso please provide possble user-friendly values like case-insensitive ascending", "url": "https://github.com/vividus-framework/vividus/pull/1244#discussion_r544168071", "createdAt": "2020-12-16T10:04:22Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/partials/generic-ui-steps.adoc", "diffHunk": "@@ -360,7 +360,7 @@ Then elements located `$locator` are sorted by text in $sortingOrder order\n ==== *_Parameters_*\n \n . `$locator` - <<_locator>>\n-. `$sortingOrder` - either https://www.computerhope.com/jargon/a/ascendin.htm[ASCENDING] or https://www.computerhope.com/jargon/d/descorde.htm[DESCENDING] order\n+. `$sortingOrder` - either https://www.computerhope.com/jargon/a/ascendin.htm[ASCENDING] or https://www.computerhope.com/jargon/d/descorde.htm[DESCENDING] or CASE_INSENSITIVE_ASCENDING or CASE_INSENSITIVE_DESCENDING order", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f485529af6df46667e58364acaf577d0e90ed85a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4996, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}