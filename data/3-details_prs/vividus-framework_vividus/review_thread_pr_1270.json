{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0ODczNTA4", "number": 1270, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo1ODowM1rOFImkzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo1ODowM1rOFImkzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTY0OTQyOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo1ODowM1rOIKnLWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo1ODowM1rOIKnLWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5ODU1NQ==", "bodyText": "Unable to get an URL for BrowserStack session with the ID {}", "url": "https://github.com/vividus-framework/vividus/pull/1270#discussion_r547998555", "createdAt": "2020-12-23T14:58:03Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-browserstack/src/main/java/org/vividus/bdd/browserstack/steps/BrowserStackSteps.java", "diffHunk": "@@ -80,10 +85,27 @@ private SessionLinkPublishState getPublishState()\n         return testContext.get(KEY, SessionLinkPublishState.class);\n     }\n \n-    private void publishSessionLink(String sessionId) throws BrowserStackException\n+    private void publishSessionLink(String sessionId)\n+    {\n+        getSessionLink(sessionId)\n+                .ifPresent(link -> eventBus.post(new LinkPublishEvent(\"BrowserStack Session URL\", link)));\n+    }\n+\n+    @SuppressWarnings({\"IllegalCatchExtended\", \"squid:S1166\"})\n+    private Optional<String> getSessionLink(String sessionId)\n     {\n-        Session session = appAutomateClient.getSession(sessionId);\n-        eventBus.post(new LinkPublishEvent(\"BrowserStack Session URL\", session.getPublicUrl()));\n+        try\n+        {\n+            Session session = appAutomateClient.getSession(sessionId);\n+            return Optional.of(session.getPublicUrl());\n+        }\n+        catch (Exception exception)\n+        {\n+            LOGGER.atError().addArgument(sessionId)\n+                            .setCause(exception)\n+                            .log(\"Unable to get a link for a session with the id {}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b40f184765ebb16f95669882ec9ab1ba5a3e0f"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4920, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}