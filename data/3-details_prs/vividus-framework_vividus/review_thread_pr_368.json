{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjU1MDY2", "number": 368, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0NToyN1rODlvF1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0NToyN1rODlvF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk1NDQ3OnYy", "diffSide": "RIGHT", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/context/BddVariableContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0NToyN1rOFyyvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0NToyN1rOFyyvFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNDM3NA==", "bodyText": "v -> variable", "url": "https://github.com/vividus-framework/vividus/pull/368#discussion_r388804374", "createdAt": "2020-03-06T09:45:27Z", "author": {"login": "valfirst"}, "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/context/BddVariableContext.java", "diffHunk": "@@ -109,34 +109,49 @@ public void clearVariables()\n         testContext.remove(VARIABLES_KEY);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     private Object getVariable(Map<String, Object> variables, String key)\n     {\n-        Matcher variableMatcher = VARIABLE_PATTERN.matcher(key);\n+        return Optional.ofNullable(variables.get(key))\n+                       .or(() -> resolveAsComplexType(variables, key))\n+                       .orElse(null);\n+    }\n+\n+    private Optional<Object> resolveAsComplexType(Map<String, Object> variables, String key)\n+    {\n+        Matcher variableMatcher = COMPLEX_VARIABLE_PATTERN.matcher(key);\n         if (!variableMatcher.find())\n         {\n-            return variables.get(key);\n+            return Optional.empty();\n         }\n         String variableKey = variableMatcher.group(VARIABLE_NAME_GROUP);\n-        Object variable = variables.get(variableKey);\n-        if (variable != null)\n+        return Optional.ofNullable(variables.get(variableKey))\n+                       .map(v -> resolveAsListItem(variableMatcher, v))\n+                       .map(v -> resolveAsMapItem(variableMatcher, v));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Object resolveAsMapItem(Matcher variableMatcher, Object variable)\n+    {\n+        String mapKey = variableMatcher.group(MAP_KEY_GROUP);\n+        if (mapKey != null && variable instanceof Map)\n         {\n-            String listIndex = variableMatcher.group(LIST_INDEX_GROUP);\n-            if (listIndex != null)\n-            {\n-                List<?> listVariable = (List<?>) variable;\n-                int elementIndex = Integer.parseInt(listIndex);\n-                variable = elementIndex < listVariable.size() ? listVariable.get(elementIndex) : null;\n-            }\n-            String mapKey = variableMatcher.group(MAP_KEY_GROUP);\n-            if (mapKey != null && variable instanceof Map)\n-            {\n-                variable = ((Map<String, ?>) variable).get(mapKey);\n-            }\n+            return ((Map<String, ?>) variable).get(mapKey);\n         }\n         return variable;\n     }\n \n+    private Object resolveAsListItem(Matcher variableMatcher, Object v)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883271ee38552fb337c0bc5e8c9ee71d3259e293"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 450, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}