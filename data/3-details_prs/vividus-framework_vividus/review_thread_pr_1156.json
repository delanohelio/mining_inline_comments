{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzQ5OTM0", "number": 1156, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzoyNTozNFrOE8F_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzoyOTowM1rOE8GCtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDQ4MTQ2OnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzoyNTozNFrOH4BhpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjowMjowM1rOH4KeSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ==", "bodyText": "Maybe Lambda -> AWS \u03bb", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528507301", "createdAt": "2020-11-23T07:25:34Z", "author": {"login": "ikalinin1"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5MTI4Mw==", "bodyText": "\u03bb will be painful for users", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528591283", "createdAt": "2020-11-23T10:09:34Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5MTU5OQ==", "bodyText": "I would even say, not everyone knows what is the name of this letter", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528591599", "createdAt": "2020-11-23T10:10:05Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0MzQzOQ==", "bodyText": "So, maybe AWS Lambda then ?", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528643439", "createdAt": "2020-11-23T11:42:40Z", "author": {"login": "ikalinin1"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0NDQ0Nw==", "bodyText": "for S3 we use just S3, also there is no any Lambda which is not AWS", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528644447", "createdAt": "2020-11-23T11:44:37Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0NjAzMA==", "bodyText": "BTW, the same for: Kafka vs Apache Kafka", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528646030", "createdAt": "2020-11-23T11:47:38Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY1Mzg5Ng==", "bodyText": "https://www.lambdatest.com/", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528653896", "createdAt": "2020-11-23T12:02:03Z", "author": {"login": "ikalinin1"}, "path": "docs/modules/plugins/pages/plugin-aws-lambda.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= AWS Lambda Plugin\n+\n+The plugin provides functionality to interact with https://aws.amazon.com/lambda/[AWS Lambda].\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-aws-lambda', version: '{current-version}')\n+----\n+\n+include::partial$aws.adoc[]\n+\n+== Steps\n+\n+=== Invoke a Lambda function\n+\n+Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+\n+[source,gherkin]\n+----\n+When I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable `$variableName`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwNzMwMQ=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDQ5MDE0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-aws-lambda/src/main/java/org/vividus/aws/lambda/steps/LambdaSteps.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzoyOTowM1rOH4BmWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTozNDozNlrOH4Jkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODUwNw==", "bodyText": "considering the case when the user will expect an empty function error, wouldn't it be easier to verify an empty string instead of a missing variable?", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528508507", "createdAt": "2020-11-23T07:29:03Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-aws-lambda/src/main/java/org/vividus/aws/lambda/steps/LambdaSteps.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.aws.lambda.steps;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.amazonaws.services.lambda.AWSLambda;\n+import com.amazonaws.services.lambda.AWSLambdaClientBuilder;\n+import com.amazonaws.services.lambda.model.InvokeRequest;\n+import com.amazonaws.services.lambda.model.InvokeResult;\n+\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+\n+public class LambdaSteps\n+{\n+    private final AWSLambda awsLambdaClient;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public LambdaSteps(IBddVariableContext bddVariableContext)\n+    {\n+        this.awsLambdaClient = AWSLambdaClientBuilder.defaultClient();\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+     *\n+     * @param functionName the name of the Lambda function, version, or alias. The value can be retrieved by looking\n+     *                     at the function in the AWS Console. Supported name formats:\n+     *                     <ul>\n+     *                     <li>Function name: my-function (name-only), my-function:v1 (with alias).</li>\n+     *                     <li>Function ARN: arn:aws:lambda:us-west-2:123456789012:function:my-function.</li>\n+     *                     <li>Partial ARN: 123456789012:function:my-function.</li>\n+     *                     </ul>\n+     *                     It\u2019s allowed to append a version number or alias to any of the formats. The length\n+     *                     constraint applies only to the full ARN. If only the function name is specified, it is\n+     *                     limited to 64 characters in length.\n+     * @param payload      the JSON that to provide to the Lambda function as input. Vividus performs a Base64\n+     *                     encoding on\n+     *                     this field before sending this request to the AWS service. Users should not perform Base64\n+     *                     encoding on this field.\n+     * @param scopes       The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variables scopes<br>\n+     *                     <i>Available scopes:</i>\n+     *                     <ul>\n+     *                     <li><b>STEP</b> - the variable will be available only within the step,\n+     *                     <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     *                     <li><b>STORY</b> - the variable will be available within the whole story,\n+     *                     <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     *                     </ul>scopes\n+     * @param variableName The variable name to store results. If the variable name is my-var, the following\n+     *                     variables will be created:\n+     *                     <ul>\n+     *                     <li>${my-var.payload} - the response from the function, or an error object</li>\n+     *                     <li>${my-var.status-code} - the HTTP status code is in the 200 range for a successful\n+     *                     request</li>\n+     *                     <li>${my-var.log-result} - the last 4 KB of the execution log</li>\n+     *                     <li>${my-var.executed-version} - the version of the function that executed, when it\u2019s invoked\n+     *                     a function with an\n+     *                     alias, this indicates which version the alias resolved to</li>\n+     *                     <li>${my-var.function-error} - if present, indicates that an error occurred during function\n+     *                     execution, details about the error are included in the response payload</li>\n+     *                     </ul>\n+     */\n+    @When(\"I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable \"\n+            + \"`$variableName`\")\n+    public void invokeLambda(String functionName, String payload, Set<VariableScope> scopes, String variableName)\n+    {\n+        InvokeRequest invokeRequest = new InvokeRequest().withFunctionName(functionName).withPayload(payload);\n+        InvokeResult invokeResult = awsLambdaClient.invoke(invokeRequest);\n+\n+        Map<String, String> result = new HashMap<>();\n+        result.put(\"payload\", new String(invokeResult.getPayload().array(), StandardCharsets.UTF_8));\n+        result.put(\"status-code\", invokeResult.getStatusCode().toString());\n+        result.put(\"log-result\",\n+                new String(Base64.getDecoder().decode(invokeResult.getLogResult()), StandardCharsets.UTF_8));\n+        result.put(\"executed-version\", invokeResult.getExecutedVersion());\n+        String functionError = invokeResult.getFunctionError();\n+        if (functionError != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODY4Ng==", "bodyText": "Analog of the SSH steps' empty error output stream", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528508686", "createdAt": "2020-11-23T07:29:35Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-aws-lambda/src/main/java/org/vividus/aws/lambda/steps/LambdaSteps.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.aws.lambda.steps;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.amazonaws.services.lambda.AWSLambda;\n+import com.amazonaws.services.lambda.AWSLambdaClientBuilder;\n+import com.amazonaws.services.lambda.model.InvokeRequest;\n+import com.amazonaws.services.lambda.model.InvokeResult;\n+\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+\n+public class LambdaSteps\n+{\n+    private final AWSLambda awsLambdaClient;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public LambdaSteps(IBddVariableContext bddVariableContext)\n+    {\n+        this.awsLambdaClient = AWSLambdaClientBuilder.defaultClient();\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+     *\n+     * @param functionName the name of the Lambda function, version, or alias. The value can be retrieved by looking\n+     *                     at the function in the AWS Console. Supported name formats:\n+     *                     <ul>\n+     *                     <li>Function name: my-function (name-only), my-function:v1 (with alias).</li>\n+     *                     <li>Function ARN: arn:aws:lambda:us-west-2:123456789012:function:my-function.</li>\n+     *                     <li>Partial ARN: 123456789012:function:my-function.</li>\n+     *                     </ul>\n+     *                     It\u2019s allowed to append a version number or alias to any of the formats. The length\n+     *                     constraint applies only to the full ARN. If only the function name is specified, it is\n+     *                     limited to 64 characters in length.\n+     * @param payload      the JSON that to provide to the Lambda function as input. Vividus performs a Base64\n+     *                     encoding on\n+     *                     this field before sending this request to the AWS service. Users should not perform Base64\n+     *                     encoding on this field.\n+     * @param scopes       The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variables scopes<br>\n+     *                     <i>Available scopes:</i>\n+     *                     <ul>\n+     *                     <li><b>STEP</b> - the variable will be available only within the step,\n+     *                     <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     *                     <li><b>STORY</b> - the variable will be available within the whole story,\n+     *                     <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     *                     </ul>scopes\n+     * @param variableName The variable name to store results. If the variable name is my-var, the following\n+     *                     variables will be created:\n+     *                     <ul>\n+     *                     <li>${my-var.payload} - the response from the function, or an error object</li>\n+     *                     <li>${my-var.status-code} - the HTTP status code is in the 200 range for a successful\n+     *                     request</li>\n+     *                     <li>${my-var.log-result} - the last 4 KB of the execution log</li>\n+     *                     <li>${my-var.executed-version} - the version of the function that executed, when it\u2019s invoked\n+     *                     a function with an\n+     *                     alias, this indicates which version the alias resolved to</li>\n+     *                     <li>${my-var.function-error} - if present, indicates that an error occurred during function\n+     *                     execution, details about the error are included in the response payload</li>\n+     *                     </ul>\n+     */\n+    @When(\"I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable \"\n+            + \"`$variableName`\")\n+    public void invokeLambda(String functionName, String payload, Set<VariableScope> scopes, String variableName)\n+    {\n+        InvokeRequest invokeRequest = new InvokeRequest().withFunctionName(functionName).withPayload(payload);\n+        InvokeResult invokeResult = awsLambdaClient.invoke(invokeRequest);\n+\n+        Map<String, String> result = new HashMap<>();\n+        result.put(\"payload\", new String(invokeResult.getPayload().array(), StandardCharsets.UTF_8));\n+        result.put(\"status-code\", invokeResult.getStatusCode().toString());\n+        result.put(\"log-result\",\n+                new String(Base64.getDecoder().decode(invokeResult.getLogResult()), StandardCharsets.UTF_8));\n+        result.put(\"executed-version\", invokeResult.getExecutedVersion());\n+        String functionError = invokeResult.getFunctionError();\n+        if (functionError != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODUwNw=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzOTExNA==", "bodyText": "I've tested this functionality, functionError is some error type (https://docs.aws.amazon.com/lambda/latest/dg/invocation-retries.html), I have not found any enumeration of possible values here, I always see 'Unhandled' (in my case and in the examples), so I would prefer to rely on current default mechanism: missing value - missing variable (since there is no statement saying it couldn't be empty)\n\n\nAs for error check the users should rely on statusCode", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528639114", "createdAt": "2020-11-23T11:34:36Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-aws-lambda/src/main/java/org/vividus/aws/lambda/steps/LambdaSteps.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.aws.lambda.steps;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.amazonaws.services.lambda.AWSLambda;\n+import com.amazonaws.services.lambda.AWSLambdaClientBuilder;\n+import com.amazonaws.services.lambda.model.InvokeRequest;\n+import com.amazonaws.services.lambda.model.InvokeResult;\n+\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+\n+public class LambdaSteps\n+{\n+    private final AWSLambda awsLambdaClient;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public LambdaSteps(IBddVariableContext bddVariableContext)\n+    {\n+        this.awsLambdaClient = AWSLambdaClientBuilder.defaultClient();\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+     *\n+     * @param functionName the name of the Lambda function, version, or alias. The value can be retrieved by looking\n+     *                     at the function in the AWS Console. Supported name formats:\n+     *                     <ul>\n+     *                     <li>Function name: my-function (name-only), my-function:v1 (with alias).</li>\n+     *                     <li>Function ARN: arn:aws:lambda:us-west-2:123456789012:function:my-function.</li>\n+     *                     <li>Partial ARN: 123456789012:function:my-function.</li>\n+     *                     </ul>\n+     *                     It\u2019s allowed to append a version number or alias to any of the formats. The length\n+     *                     constraint applies only to the full ARN. If only the function name is specified, it is\n+     *                     limited to 64 characters in length.\n+     * @param payload      the JSON that to provide to the Lambda function as input. Vividus performs a Base64\n+     *                     encoding on\n+     *                     this field before sending this request to the AWS service. Users should not perform Base64\n+     *                     encoding on this field.\n+     * @param scopes       The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variables scopes<br>\n+     *                     <i>Available scopes:</i>\n+     *                     <ul>\n+     *                     <li><b>STEP</b> - the variable will be available only within the step,\n+     *                     <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     *                     <li><b>STORY</b> - the variable will be available within the whole story,\n+     *                     <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     *                     </ul>scopes\n+     * @param variableName The variable name to store results. If the variable name is my-var, the following\n+     *                     variables will be created:\n+     *                     <ul>\n+     *                     <li>${my-var.payload} - the response from the function, or an error object</li>\n+     *                     <li>${my-var.status-code} - the HTTP status code is in the 200 range for a successful\n+     *                     request</li>\n+     *                     <li>${my-var.log-result} - the last 4 KB of the execution log</li>\n+     *                     <li>${my-var.executed-version} - the version of the function that executed, when it\u2019s invoked\n+     *                     a function with an\n+     *                     alias, this indicates which version the alias resolved to</li>\n+     *                     <li>${my-var.function-error} - if present, indicates that an error occurred during function\n+     *                     execution, details about the error are included in the response payload</li>\n+     *                     </ul>\n+     */\n+    @When(\"I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable \"\n+            + \"`$variableName`\")\n+    public void invokeLambda(String functionName, String payload, Set<VariableScope> scopes, String variableName)\n+    {\n+        InvokeRequest invokeRequest = new InvokeRequest().withFunctionName(functionName).withPayload(payload);\n+        InvokeResult invokeResult = awsLambdaClient.invoke(invokeRequest);\n+\n+        Map<String, String> result = new HashMap<>();\n+        result.put(\"payload\", new String(invokeResult.getPayload().array(), StandardCharsets.UTF_8));\n+        result.put(\"status-code\", invokeResult.getStatusCode().toString());\n+        result.put(\"log-result\",\n+                new String(Base64.getDecoder().decode(invokeResult.getLogResult()), StandardCharsets.UTF_8));\n+        result.put(\"executed-version\", invokeResult.getExecutedVersion());\n+        String functionError = invokeResult.getFunctionError();\n+        if (functionError != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODUwNw=="}, "originalCommit": {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4949, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}