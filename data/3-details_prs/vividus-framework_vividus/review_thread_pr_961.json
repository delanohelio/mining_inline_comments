{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODkzODEz", "number": 961, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMTo1Nzo1OVrOElazDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxMzozNlrOElcx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NjcxODIwOnYy", "diffSide": "RIGHT", "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMTo1Nzo1OVrOHU6COg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMjoxNDoxOVrOHU6HGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NDQxMA==", "bodyText": "what about just getMethods?", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491684410", "createdAt": "2020-09-20T11:57:59Z", "author": {"login": "valfirst"}, "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "diffHunk": "@@ -29,13 +29,16 @@\n {\n     @Inject private EventBus eventBus;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n-        if (Stream.of(bean.getClass().getDeclaredMethods()).anyMatch(m -> m.isAnnotationPresent(Subscribe.class)))\n-        {\n-            eventBus.register(bean);\n-        }\n+        Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)\n+              .map(Class::getDeclaredMethods)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de23edcf71a9fc5a790b10790e5bd8b1158042b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NTY1OQ==", "bodyText": "sure, I don't know why it was getDeclaredMethods previously, but from docs event bus works with public handler methods", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491685659", "createdAt": "2020-09-20T12:14:19Z", "author": {"login": "uarlouski"}, "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "diffHunk": "@@ -29,13 +29,16 @@\n {\n     @Inject private EventBus eventBus;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n-        if (Stream.of(bean.getClass().getDeclaredMethods()).anyMatch(m -> m.isAnnotationPresent(Subscribe.class)))\n-        {\n-            eventBus.register(bean);\n-        }\n+        Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)\n+              .map(Class::getDeclaredMethods)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NDQxMA=="}, "originalCommit": {"oid": "de23edcf71a9fc5a790b10790e5bd8b1158042b6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NjczMjExOnYy", "diffSide": "RIGHT", "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMjoxOTo0MVrOHU6Iww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMjoxOTo0MVrOHU6Iww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NjA4Mw==", "bodyText": "if you use getMethods, you don't need to extract superclass explicitly", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491686083", "createdAt": "2020-09-20T12:19:41Z", "author": {"login": "valfirst"}, "path": "vividus/src/main/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessor.java", "diffHunk": "@@ -18,24 +18,30 @@\n \n import java.util.stream.Stream;\n \n-import javax.inject.Inject;\n-\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n \n import org.springframework.beans.factory.config.BeanPostProcessor;\n \n public class SubscriberRegisteringBeanPostProcessor implements BeanPostProcessor\n {\n-    @Inject private EventBus eventBus;\n+    private final EventBus eventBus;\n+\n+    public SubscriberRegisteringBeanPostProcessor(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object postProcessAfterInitialization(Object bean, String beanName)\n     {\n-        if (Stream.of(bean.getClass().getDeclaredMethods()).anyMatch(m -> m.isAnnotationPresent(Subscribe.class)))\n-        {\n-            eventBus.register(bean);\n-        }\n+        Stream.iterate((Class<Object>) bean.getClass(), c -> c.getSuperclass() != null, Class::getSuperclass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e420a6f78add20e54698a2475e3807157dfbe9af"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA0MzA3OnYy", "diffSide": "RIGHT", "path": "vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxMzozNlrOHU8cFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxMzozNlrOHU8cFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMzc5Nw==", "bodyText": "just objects as test arguments", "url": "https://github.com/vividus-framework/vividus/pull/961#discussion_r491723797", "createdAt": "2020-09-20T19:13:36Z", "author": {"login": "valfirst"}, "path": "vividus/src/test/java/org/vividus/spring/SubscriberRegisteringBeanPostProcessorTests.java", "diffHunk": "@@ -37,12 +40,13 @@\n     @InjectMocks\n     private SubscriberRegisteringBeanPostProcessor beanPostProcessor;\n \n-    @Test\n-    void testProcessingSubscriberObject()\n+    @ValueSource(classes = { Subscriber.class, InheritedSubscriber.class })\n+    @ParameterizedTest\n+    void testProcessingSubscriberObject(Class<?> type)\n     {\n-        Subscriber subscriber = new Subscriber();\n-        beanPostProcessor.postProcessAfterInitialization(subscriber, null);\n-        verify(eventBus).register(subscriber);\n+        Object bean = ReflectionUtils.newInstance(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fd55465212f24368e0bdd541966d9bdaad9853"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}