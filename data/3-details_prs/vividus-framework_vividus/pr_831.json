{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTYzMjk0", "number": 831, "title": "[plugin-web-app] Use locators for checkbox steps", "bodyText": "closes #804", "createdAt": "2020-08-18T15:11:49Z", "url": "https://github.com/vividus-framework/vividus/pull/831", "merged": true, "mergeCommit": {"oid": "6b61390ac919a6c3f33075837e805981e6086f91"}, "closed": true, "closedAt": "2020-08-23T17:19:17Z", "author": {"login": "ikalinin1"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdALr9CAFqTQ2OTcyODI0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBxUdHgFqTQ3MzAyODI3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzI4MjQz", "url": "https://github.com/vividus-framework/vividus/pull/831#pullrequestreview-469728243", "createdAt": "2020-08-18T18:43:44Z", "commit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo0Mzo0NFrOHChXDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1Mzo1MVrOHChs7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNTc3Mw==", "bodyText": "public?", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472405773", "createdAt": "2020-08-18T18:43:44Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNjI5NA==", "bodyText": "$checkboxState -> $checkboxAction (to keep naming consistency)", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472406294", "createdAt": "2020-08-18T18:44:42Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNjc3NA==", "bodyText": "what about converting the step to composite one?", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472406774", "createdAt": "2020-08-18T18:45:32Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNzMzOQ==", "bodyText": "checkBox -> checkbox", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472407339", "createdAt": "2020-08-18T18:46:34Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n+        Checkbox checkBox = ifCheckboxExists(checkboxLocator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNzU1MQ==", "bodyText": "is priority still required?", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472407551", "createdAt": "2020-08-18T18:46:54Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNzk2Nw==", "bodyText": "ifCheckboxExists -> doesCheckboxExist or assertCheckboxExists", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472407967", "createdAt": "2020-08-18T18:47:44Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n+        Checkbox checkBox = ifCheckboxExists(checkboxLocator);\n+        changeCheckboxState(checkBox, checkBoxAction);\n     }\n \n     /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n+     * Verifies that checkbox by locator exists\n+     * @param checkboxLocator Locator to locate checkboxes\n+     * @return Found checkbox\n      */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n+    @Then(\"checkbox located by `$searchAttributes` exists\")\n+    public Checkbox ifCheckboxExists(SearchAttributes checkboxLocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwODQ2NA==", "bodyText": "@Then(\"$state checkbox located by `$checkboxLocator` exists\")", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472408464", "createdAt": "2020-08-18T18:48:43Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n+        Checkbox checkBox = ifCheckboxExists(checkboxLocator);\n+        changeCheckboxState(checkBox, checkBoxAction);\n     }\n \n     /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n+     * Verifies that checkbox by locator exists\n+     * @param checkboxLocator Locator to locate checkboxes\n+     * @return Found checkbox\n      */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n+    @Then(\"checkbox located by `$searchAttributes` exists\")\n+    public Checkbox ifCheckboxExists(SearchAttributes checkboxLocator)\n     {\n-        changeCheckboxState(attributeType, attributeValue, false);\n+        return searchForCheckbox(checkboxLocator);\n     }\n \n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     * @return <b>WebElement</b> An element (checkbox) matching the requirements,\n-     * <b> null</b> - if there are no desired elements\n-     */\n-    @Then(\"a checkbox with the name '$checkboxName' exists\")\n-    public Checkbox ifCheckboxExists(String checkboxName)\n+    private Checkbox searchForCheckbox(SearchAttributes checkboxLocator)\n     {\n-        return (Checkbox) baseValidations.assertIfElementExists(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, checkboxName));\n+        WebElement checkbox = baseValidations.assertIfElementExists(CHECKBOX, checkboxLocator);\n+        return createCheckbox(checkbox);\n     }\n \n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified <b>name</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE</b>)\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     */\n-    @Then(\"a [$state] checkbox with the name '$checkboxName' exists\")\n-    public void ifCheckboxExists(State state, String checkboxName)\n+    private Checkbox createCheckbox(WebElement checkbox)\n     {\n-        WebElement checkbox = ifCheckboxExists(checkboxName);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, checkbox);\n+        return (checkbox == null || checkbox instanceof Checkbox) ? (Checkbox) checkbox : new Checkbox(checkbox);\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * </ul>\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n+     * Verifies that checkbox located by locator is in an expected state.\n+     * @param state State to check\n+     * @param checkboxLocator Locator to locate checkbox\n      */\n-    @Then(\"a checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public Checkbox ifCheckboxWithAttributeExists(String attributeType, String attributeValue)\n+    @Then(\"[$state] checkbox located by `$checkboxLocator` exists\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwODg2Ng==", "bodyText": "checkboxInStateExists -> doesCheckboxExist or assertCheckboxExists", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472408866", "createdAt": "2020-08-18T18:49:29Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n+        Checkbox checkBox = ifCheckboxExists(checkboxLocator);\n+        changeCheckboxState(checkBox, checkBoxAction);\n     }\n \n     /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n+     * Verifies that checkbox by locator exists\n+     * @param checkboxLocator Locator to locate checkboxes\n+     * @return Found checkbox\n      */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n+    @Then(\"checkbox located by `$searchAttributes` exists\")\n+    public Checkbox ifCheckboxExists(SearchAttributes checkboxLocator)\n     {\n-        changeCheckboxState(attributeType, attributeValue, false);\n+        return searchForCheckbox(checkboxLocator);\n     }\n \n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     * @return <b>WebElement</b> An element (checkbox) matching the requirements,\n-     * <b> null</b> - if there are no desired elements\n-     */\n-    @Then(\"a checkbox with the name '$checkboxName' exists\")\n-    public Checkbox ifCheckboxExists(String checkboxName)\n+    private Checkbox searchForCheckbox(SearchAttributes checkboxLocator)\n     {\n-        return (Checkbox) baseValidations.assertIfElementExists(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, checkboxName));\n+        WebElement checkbox = baseValidations.assertIfElementExists(CHECKBOX, checkboxLocator);\n+        return createCheckbox(checkbox);\n     }\n \n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified <b>name</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE</b>)\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     */\n-    @Then(\"a [$state] checkbox with the name '$checkboxName' exists\")\n-    public void ifCheckboxExists(State state, String checkboxName)\n+    private Checkbox createCheckbox(WebElement checkbox)\n     {\n-        WebElement checkbox = ifCheckboxExists(checkboxName);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, checkbox);\n+        return (checkbox == null || checkbox instanceof Checkbox) ? (Checkbox) checkbox : new Checkbox(checkbox);\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * </ul>\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n+     * Verifies that checkbox located by locator is in an expected state.\n+     * @param state State to check\n+     * @param checkboxLocator Locator to locate checkbox\n      */\n-    @Then(\"a checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public Checkbox ifCheckboxWithAttributeExists(String attributeType, String attributeValue)\n+    @Then(\"[$state] checkbox located by `$checkboxLocator` exists\")\n+    public void checkboxInStateExists(State state, SearchAttributes checkboxLocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMDI4MA==", "bodyText": "I propose to replace such steps with already existing one:\nThen number of elements found by `$locator` is $comparisonRule `$quantity`", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472410280", "createdAt": "2020-08-18T18:51:55Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n+        Checkbox checkBox = ifCheckboxExists(checkboxLocator);\n+        changeCheckboxState(checkBox, checkBoxAction);\n     }\n \n     /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n+     * Verifies that checkbox by locator exists\n+     * @param checkboxLocator Locator to locate checkboxes\n+     * @return Found checkbox\n      */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n+    @Then(\"checkbox located by `$searchAttributes` exists\")\n+    public Checkbox ifCheckboxExists(SearchAttributes checkboxLocator)\n     {\n-        changeCheckboxState(attributeType, attributeValue, false);\n+        return searchForCheckbox(checkboxLocator);\n     }\n \n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     * @return <b>WebElement</b> An element (checkbox) matching the requirements,\n-     * <b> null</b> - if there are no desired elements\n-     */\n-    @Then(\"a checkbox with the name '$checkboxName' exists\")\n-    public Checkbox ifCheckboxExists(String checkboxName)\n+    private Checkbox searchForCheckbox(SearchAttributes checkboxLocator)\n     {\n-        return (Checkbox) baseValidations.assertIfElementExists(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, checkboxName));\n+        WebElement checkbox = baseValidations.assertIfElementExists(CHECKBOX, checkboxLocator);\n+        return createCheckbox(checkbox);\n     }\n \n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified <b>name</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE</b>)\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     */\n-    @Then(\"a [$state] checkbox with the name '$checkboxName' exists\")\n-    public void ifCheckboxExists(State state, String checkboxName)\n+    private Checkbox createCheckbox(WebElement checkbox)\n     {\n-        WebElement checkbox = ifCheckboxExists(checkboxName);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, checkbox);\n+        return (checkbox == null || checkbox instanceof Checkbox) ? (Checkbox) checkbox : new Checkbox(checkbox);\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * </ul>\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n+     * Verifies that checkbox located by locator is in an expected state.\n+     * @param state State to check\n+     * @param checkboxLocator Locator to locate checkbox\n      */\n-    @Then(\"a checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public Checkbox ifCheckboxWithAttributeExists(String attributeType, String attributeValue)\n+    @Then(\"[$state] checkbox located by `$checkboxLocator` exists\")\n+    public void checkboxInStateExists(State state, SearchAttributes checkboxLocator)\n     {\n-        WebElement checkbox = baseValidations.assertIfElementExists(\n-                String.format(CHECKBOX_WITH_ATTRIBUTE, attributeType, attributeValue), new SearchAttributes(\n-                        ActionAttributeType.XPATH, getCheckboxXpathByAttributeAndValue(attributeType, attributeValue)));\n-        return new Checkbox(checkbox);\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element (<i>Possible values:</i>\n-     * <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE,\n-     * NOT_VISIBLE</b>)\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n-     */\n-    @Then(\"a [$state] checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public WebElement ifCheckboxWithAttributeExists(State state, String attributeType, String attributeValue)\n-    {\n-        Checkbox checkbox = ifCheckboxWithAttributeExists(attributeType, attributeValue);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, (WrapsElement) checkbox);\n-        return checkbox;\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> does not exist in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-    */\n-    @Then(\"a checkbox with the name '$checkBox' does not exist\")\n-    public void doesNotCheckboxExist(String checkboxName)\n-    {\n-        SearchParameters parameters = new SearchParameters(checkboxName).setWaitForElement(false);\n-        baseValidations.assertIfElementDoesNotExist(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, parameters));\n-    }\n-\n-    /**\n-     * Check (uncheck) a checkbox by the xpath\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox by <b>xpath</b>;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param xpath Xpath to the checkbox element\n-     */\n-    @When(\"I $checkBoxAction a checkbox by the xpath '$xpath'\")\n-    public void processCheckboxByXpath(CheckboxAction checkBoxAction, String xpath)\n-    {\n-        changeCheckboxState(LocatorUtil.getXPath(xpath), checkBoxAction.isSelected());\n+        WebElement checkbox = ifCheckboxExists(checkboxLocator);\n+        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, checkbox);\n     }\n \n     /**\n-     * Checks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\">\n-     * }</pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n+     * Verifies that checkbox located by locator does not exist\n+     * @param checkboxLocator Locator to locate checkbox\n      */\n-    @When(\"I check a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void checkCheckboxItem(String attributeType, String attributeValue)\n-    {\n-        changeCheckboxState(attributeType, attributeValue, true);\n-    }\n-\n-    private void changeCheckboxState(String attributeType, String attributeValue, boolean selected)\n-    {\n-        changeCheckboxState(getCheckboxXpathByAttributeAndValue(attributeType, attributeValue), selected);\n-    }\n-\n-    private void changeCheckboxState(String xpath, boolean isSelected)\n+    @Then(\"checkbox locted by `$checkboxLocator` does not exist\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMDc4NQ==", "bodyText": "I propose to replace such steps with already existing one:\nThen number of elements found by `$locator` is $comparisonRule `$quantity`\n``", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472410785", "createdAt": "2020-08-18T18:52:48Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,113 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n-public class CheckboxSteps\n+public final class CheckboxSteps\n {\n     private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n \n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n+    private CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n+    @When(\"I $checkboxState all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n+        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkBoxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\", priority = 1)\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n+        Checkbox checkBox = ifCheckboxExists(checkboxLocator);\n+        changeCheckboxState(checkBox, checkBoxAction);\n     }\n \n     /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n+     * Verifies that checkbox by locator exists\n+     * @param checkboxLocator Locator to locate checkboxes\n+     * @return Found checkbox\n      */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n+    @Then(\"checkbox located by `$searchAttributes` exists\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMTM3NA==", "bodyText": "I think it should go as a separate commit/PR", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r472411374", "createdAt": "2020-08-18T18:53:51Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/test/java/org/vividus/ui/web/action/SearchActionsTests.java", "diffHunk": "@@ -70,7 +70,7 @@\n     private DefaultSearch defaultSearch;\n \n     @Mock\n-    private CaseSensitiveTextSearch caseSensitivetextSearch;\n+    private CaseSensitiveTextSearch caseSensitiveTextSearch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4150ce7dad47440a08909c96ee3355aa58ec44f1", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/4150ce7dad47440a08909c96ee3355aa58ec44f1", "committedDate": "2020-08-18T15:10:28Z", "message": "[plugin-web-app] Use locators for checkbox steps"}, "afterCommit": {"oid": "8ec5857b349f335e97a3a3ac3c59f95c26b0f207", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/8ec5857b349f335e97a3a3ac3c59f95c26b0f207", "committedDate": "2020-08-19T11:58:54Z", "message": "[plugin-web-app] Use locators for checkbox steps"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ec5857b349f335e97a3a3ac3c59f95c26b0f207", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/8ec5857b349f335e97a3a3ac3c59f95c26b0f207", "committedDate": "2020-08-19T11:58:54Z", "message": "[plugin-web-app] Use locators for checkbox steps"}, "afterCommit": {"oid": "6b81ad0fdc0780bf929b703efb95a85de2182cd2", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/6b81ad0fdc0780bf929b703efb95a85de2182cd2", "committedDate": "2020-08-19T12:32:29Z", "message": "[plugin-web-app] Use locators for checkbox steps"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b81ad0fdc0780bf929b703efb95a85de2182cd2", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/6b81ad0fdc0780bf929b703efb95a85de2182cd2", "committedDate": "2020-08-19T12:32:29Z", "message": "[plugin-web-app] Use locators for checkbox steps"}, "afterCommit": {"oid": "4620d941898403b4a5151f23fa70d2da28664c77", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/4620d941898403b4a5151f23fa70d2da28664c77", "committedDate": "2020-08-19T12:39:34Z", "message": "[plugin-web-app] Use locators for checkbox steps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTAwNzY3", "url": "https://github.com/vividus-framework/vividus/pull/831#pullrequestreview-470500767", "createdAt": "2020-08-19T14:14:01Z", "commit": {"oid": "4620d941898403b4a5151f23fa70d2da28664c77"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxNDowMVrOHDJZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxODowMVrOHDJkzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2MTc1Ng==", "bodyText": "located by -> located", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r473061756", "createdAt": "2020-08-19T14:14:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,71 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n-import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n-import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n public class CheckboxSteps\n {\n-    private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n-\n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n-\n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n-    {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n-    }\n \n-    /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n-    {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n-    }\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n-    {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n-    }\n-\n-    /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n-     */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n-    {\n-        changeCheckboxState(attributeType, attributeValue, false);\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     * @return <b>WebElement</b> An element (checkbox) matching the requirements,\n-     * <b> null</b> - if there are no desired elements\n-     */\n-    @Then(\"a checkbox with the name '$checkboxName' exists\")\n-    public Checkbox ifCheckboxExists(String checkboxName)\n+    public CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        return (Checkbox) baseValidations.assertIfElementExists(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, checkboxName));\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified <b>name</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE</b>)\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @Then(\"a [$state] checkbox with the name '$checkboxName' exists\")\n-    public void ifCheckboxExists(State state, String checkboxName)\n+    @When(\"I $checkboxAction all checkboxes located by `$checkboxesLocator`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4620d941898403b4a5151f23fa70d2da28664c77"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2MzY0NA==", "bodyText": "located by -> located", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r473063644", "createdAt": "2020-08-19T14:16:39Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,71 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n-import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n-import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n public class CheckboxSteps\n {\n-    private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n-\n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n-\n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n-    {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n-    }\n \n-    /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n-    {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n-    }\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n-    {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n-    }\n-\n-    /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n-     */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n-    {\n-        changeCheckboxState(attributeType, attributeValue, false);\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     * @return <b>WebElement</b> An element (checkbox) matching the requirements,\n-     * <b> null</b> - if there are no desired elements\n-     */\n-    @Then(\"a checkbox with the name '$checkboxName' exists\")\n-    public Checkbox ifCheckboxExists(String checkboxName)\n+    public CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        return (Checkbox) baseValidations.assertIfElementExists(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, checkboxName));\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified <b>name</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE</b>)\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @Then(\"a [$state] checkbox with the name '$checkboxName' exists\")\n-    public void ifCheckboxExists(State state, String checkboxName)\n+    @When(\"I $checkboxAction all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        WebElement checkbox = ifCheckboxExists(checkboxName);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, checkbox);\n+        List<WebElement> checkboxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkboxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * </ul>\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @Then(\"a checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public Checkbox ifCheckboxWithAttributeExists(String attributeType, String attributeValue)\n-    {\n-        WebElement checkbox = baseValidations.assertIfElementExists(\n-                String.format(CHECKBOX_WITH_ATTRIBUTE, attributeType, attributeValue), new SearchAttributes(\n-                        ActionAttributeType.XPATH, getCheckboxXpathByAttributeAndValue(attributeType, attributeValue)));\n-        return new Checkbox(checkbox);\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element (<i>Possible values:</i>\n-     * <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE,\n-     * NOT_VISIBLE</b>)\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n-     */\n-    @Then(\"a [$state] checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public WebElement ifCheckboxWithAttributeExists(State state, String attributeType, String attributeValue)\n-    {\n-        Checkbox checkbox = ifCheckboxWithAttributeExists(attributeType, attributeValue);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, (WrapsElement) checkbox);\n-        return checkbox;\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> does not exist in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-    */\n-    @Then(\"a checkbox with the name '$checkBox' does not exist\")\n-    public void doesNotCheckboxExist(String checkboxName)\n-    {\n-        SearchParameters parameters = new SearchParameters(checkboxName).setWaitForElement(false);\n-        baseValidations.assertIfElementDoesNotExist(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, parameters));\n-    }\n-\n-    /**\n-     * Check (uncheck) a checkbox by the xpath\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox by <b>xpath</b>;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param xpath Xpath to the checkbox element\n-     */\n-    @When(\"I $checkBoxAction a checkbox by the xpath '$xpath'\")\n-    public void processCheckboxByXpath(CheckboxAction checkBoxAction, String xpath)\n-    {\n-        changeCheckboxState(LocatorUtil.getXPath(xpath), checkBoxAction.isSelected());\n-    }\n-\n-    /**\n-     * Checks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\">\n-     * }</pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n-     */\n-    @When(\"I check a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void checkCheckboxItem(String attributeType, String attributeValue)\n-    {\n-        changeCheckboxState(attributeType, attributeValue, true);\n-    }\n-\n-    private void changeCheckboxState(String attributeType, String attributeValue, boolean selected)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4620d941898403b4a5151f23fa70d2da28664c77"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NDY1NA==", "bodyText": "checkbox1 -> checkboxElement", "url": "https://github.com/vividus-framework/vividus/pull/831#discussion_r473064654", "createdAt": "2020-08-19T14:18:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/CheckboxSteps.java", "diffHunk": "@@ -18,274 +18,71 @@\n \n import java.util.List;\n \n-import javax.inject.Inject;\n-\n-import org.jbehave.core.annotations.Then;\n import org.jbehave.core.annotations.When;\n import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.WrapsElement;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.web.validation.IBaseValidations;\n import org.vividus.selenium.element.Checkbox;\n-import org.vividus.ui.web.State;\n import org.vividus.ui.web.action.CheckboxAction;\n import org.vividus.ui.web.action.IMouseActions;\n-import org.vividus.ui.web.action.search.ActionAttributeType;\n import org.vividus.ui.web.action.search.SearchAttributes;\n-import org.vividus.ui.web.action.search.SearchParameters;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n public class CheckboxSteps\n {\n-    private static final String THE_FOUND_CHECKBOX_IS = \"The found checkbox is \";\n-    private static final String CHECKBOX_WITH_NAME = \"Checkbox with name '%s'\";\n     private static final String CHECKBOX = \"Checkbox\";\n-    private static final String CHECKBOX_LOCATOR = LocatorUtil.getXPath(\"input[@type='checkbox']\");\n-    private static final String CHECKBOX_WITH_ATTRIBUTE = \"Checkbox with the attribute '%1$s'='%2$s'\";\n-\n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IMouseActions mouseActions;\n-\n-    /**\n-     * Checks checkbox within the context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox within the context;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check a checkbox\")\n-    public void checkCheckBox()\n-    {\n-        WebElement checkBox = baseValidations.assertIfElementExists(CHECKBOX, new SearchAttributes(\n-                ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        changeCheckboxState(new Checkbox(checkBox), true);\n-    }\n \n-    /**\n-     * Checks all enabled checkboxes within the set context\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li> Verifies that at least 1 checkbox is found within the search context;</li>\n-     * <li> Checks the state of each checkbox found on the page, if it's <b><i>not selected</i></b>\n-     * then change it to <b><i>selected</i></b>;</li>\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     */\n-    @When(\"I check all the checkboxes\")\n-    public void checkAllCheckboxes()\n-    {\n-        List<WebElement> checkBoxes = baseValidations.assertIfElementsExist(\"Checkboxes number\",\n-                new SearchAttributes(ActionAttributeType.XPATH, CHECKBOX_LOCATOR));\n-        checkBoxes.stream().map(Checkbox::new).forEach(checkbox -> changeCheckboxState(checkbox, true));\n-    }\n+    private final IBaseValidations baseValidations;\n+    private final IMouseActions mouseActions;\n \n-    /**\n-     * Check (uncheck) a checkbox with the specified text\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified text on the page;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param checkBoxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     */\n-    @When(value = \"I $checkBoxAction a checkbox with the name '$checkBoxName'\", priority = 1)\n-    public void processCheckboxItem(CheckboxAction checkBoxAction, String checkBoxName)\n-    {\n-        Checkbox checkBox = ifCheckboxExists(checkBoxName);\n-        changeCheckboxState(checkBox, checkBoxAction.isSelected());\n-    }\n-\n-    /**\n-     * Unchecks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>\n-     * A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a <b>checkbox</b> specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>.\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\" />\n-     * }\n-     * </pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n-     */\n-    @When(\"I uncheck a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void uncheckCheckboxItem(String attributeType, String attributeValue)\n-    {\n-        changeCheckboxState(attributeType, attributeValue, false);\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-     * @return <b>WebElement</b> An element (checkbox) matching the requirements,\n-     * <b> null</b> - if there are no desired elements\n-     */\n-    @Then(\"a checkbox with the name '$checkboxName' exists\")\n-    public Checkbox ifCheckboxExists(String checkboxName)\n+    public CheckboxSteps(IBaseValidations baseValidations, IMouseActions mouseActions)\n     {\n-        return (Checkbox) baseValidations.assertIfElementExists(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, checkboxName));\n+        this.baseValidations = baseValidations;\n+        this.mouseActions = mouseActions;\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>name</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox with the specified <b>name</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE</b>)\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n+     * Performs action on all the checkboxes found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxesLocator Locator to locate checkboxes\n      */\n-    @Then(\"a [$state] checkbox with the name '$checkboxName' exists\")\n-    public void ifCheckboxExists(State state, String checkboxName)\n+    @When(\"I $checkboxAction all checkboxes located by `$checkboxesLocator`\")\n+    public void changeStateOfAllCheckboxes(CheckboxAction checkBoxAction, SearchAttributes checkboxesLocator)\n     {\n-        WebElement checkbox = ifCheckboxExists(checkboxName);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, checkbox);\n+        List<WebElement> checkboxes = baseValidations.assertIfElementsExist(\"Checkboxes\", checkboxesLocator);\n+        checkboxes.stream().map(this::createCheckbox).forEach(checkbox -> changeCheckboxState(checkbox,\n+                checkBoxAction));\n     }\n \n     /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * </ul>\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n+     * Performs action on checkbox found by locator\n+     * @param checkBoxAction Actions to be performed (CHECK, UNCHECK)\n+     * @param checkboxLocator Locator to locate checkboxes\n      */\n-    @Then(\"a checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public Checkbox ifCheckboxWithAttributeExists(String attributeType, String attributeValue)\n-    {\n-        WebElement checkbox = baseValidations.assertIfElementExists(\n-                String.format(CHECKBOX_WITH_ATTRIBUTE, attributeType, attributeValue), new SearchAttributes(\n-                        ActionAttributeType.XPATH, getCheckboxXpathByAttributeAndValue(attributeType, attributeValue)));\n-        return new Checkbox(checkbox);\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>attribute</b> exists in context and it has expected state\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Compares an actual checkbox 'state' with expected;</li>\n-     * </ul>\n-     * @param state A state value of the element (<i>Possible values:</i>\n-     * <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE,\n-     * NOT_VISIBLE</b>)\n-     * @param attributeType A type of the attribute (for ex. <i>'name', 'id', 'title'</i>)\n-     * @param attributeValue A value of the attribute\n-     * @return Web element - a <b>checkbox</b> that meets the requirements,\n-     * <b> null</b> - if there are no expected elements.\n-     */\n-    @Then(\"a [$state] checkbox with the attribute '$attributeType'='$attributeValue' exists\")\n-    public WebElement ifCheckboxWithAttributeExists(State state, String attributeType, String attributeValue)\n-    {\n-        Checkbox checkbox = ifCheckboxWithAttributeExists(attributeType, attributeValue);\n-        baseValidations.assertElementState(THE_FOUND_CHECKBOX_IS + state, state, (WrapsElement) checkbox);\n-        return checkbox;\n-    }\n-\n-    /**\n-     * Checks if a checkbox with the specified <b>name</b> does not exist in context\n-     * @param checkboxName Checkbox text (the text in the (<i><code>&lt;label&gt;</code></i>) tag\n-    */\n-    @Then(\"a checkbox with the name '$checkBox' does not exist\")\n-    public void doesNotCheckboxExist(String checkboxName)\n-    {\n-        SearchParameters parameters = new SearchParameters(checkboxName).setWaitForElement(false);\n-        baseValidations.assertIfElementDoesNotExist(String.format(CHECKBOX_WITH_NAME, checkboxName),\n-                new SearchAttributes(ActionAttributeType.CHECKBOX_NAME, parameters));\n-    }\n-\n-    /**\n-     * Check (uncheck) a checkbox by the xpath\n-     * <p>\n-     * Actions performed at this step:\n-     * </p>\n-     * <ul>\n-     * <li>Finds a checkbox by <b>xpath</b>;</li>\n-     * <li><b><i>Checks(unchecks)</i></b> a checkbox, if it's <b><i>not selected(selected)</i></b>. Do nothing if a\n-     * checkbox is already <i>checked(unchecked)</i>;\n-     * <li>Waits for the page to load;</li>\n-     * </ul>\n-     * @param checkBoxAction <b>CHECK</b> or <b>UNCHECK</b>\n-     * @param xpath Xpath to the checkbox element\n-     */\n-    @When(\"I $checkBoxAction a checkbox by the xpath '$xpath'\")\n-    public void processCheckboxByXpath(CheckboxAction checkBoxAction, String xpath)\n-    {\n-        changeCheckboxState(LocatorUtil.getXPath(xpath), checkBoxAction.isSelected());\n-    }\n-\n-    /**\n-     * Checks a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>\n-     * <p>A <b>checkbox</b> is an <i><code>&lt;input&gt;</code></i> element with an attribute 'type' = 'checkbox'.\n-     * </p>\n-     * <p>Actions performed at this step:</p>\n-     * <ul>\n-     * <li>Finds a checkbox specified by an <b>attribute type</b> with an <b>attribute value</b>;</li>\n-     * <li>Checks its state, if it's <b><i>not selected</i></b> then changes its state\n-     * <li>Waits for page to load;</li>\n-     * </ul>\n-     * @param attributeType An attribute type of the <b>checkbox</b>\n-     * @param attributeValue An attribute value of the <b>checkbox</b>\n-     * <b>Example:</b>\n-     * <pre>\n-     * {@code <input }<b>'attributeType'</b>=<b>'attributeValue'</b> {@code type=\"checkbox\">\n-     * }</pre>\n-     * @see <a href=\"https://www.w3schools.com/tags/att_input_checked.asp\"><i>HTML </i>&lt;input&gt;<i> checked\n-     * Attribute</i></a>\n-     * @see <a href=\"https://www.w3schools.com/tags/default.asp\"><i>HTML Element Reference</i></a>\n-     */\n-    @When(\"I check a checkbox with the attribute '$attributeType'='$attributeValue'\")\n-    public void checkCheckboxItem(String attributeType, String attributeValue)\n-    {\n-        changeCheckboxState(attributeType, attributeValue, true);\n-    }\n-\n-    private void changeCheckboxState(String attributeType, String attributeValue, boolean selected)\n+    @When(value = \"I $checkBoxAction checkbox located by `$checkboxLocator`\")\n+    public void changeStateOfCheckbox(CheckboxAction checkBoxAction, SearchAttributes checkboxLocator)\n     {\n-        changeCheckboxState(getCheckboxXpathByAttributeAndValue(attributeType, attributeValue), selected);\n+        WebElement checkbox1 = baseValidations.assertIfElementExists(CHECKBOX, checkboxLocator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4620d941898403b4a5151f23fa70d2da28664c77"}, "originalPosition": 270}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1129e51f693599341041df94dafbe075b1f9545b", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/1129e51f693599341041df94dafbe075b1f9545b", "committedDate": "2020-08-20T20:26:37Z", "message": "[plugin-web-app] Use locators for checkbox steps"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4620d941898403b4a5151f23fa70d2da28664c77", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/4620d941898403b4a5151f23fa70d2da28664c77", "committedDate": "2020-08-19T12:39:34Z", "message": "[plugin-web-app] Use locators for checkbox steps"}, "afterCommit": {"oid": "1129e51f693599341041df94dafbe075b1f9545b", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/1129e51f693599341041df94dafbe075b1f9545b", "committedDate": "2020-08-20T20:26:37Z", "message": "[plugin-web-app] Use locators for checkbox steps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDI4Mjc1", "url": "https://github.com/vividus-framework/vividus/pull/831#pullrequestreview-473028275", "createdAt": "2020-08-23T17:18:51Z", "commit": {"oid": "1129e51f693599341041df94dafbe075b1f9545b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 41, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}