{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjQ1MDYy", "number": 1110, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MzozM1rOE2tWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MzozM1rOE2tWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODAxNTg0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/model/RequestPartType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MzozM1rOHvpGgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MzozM1rOHvpGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxODUyOQ==", "bodyText": "createPart(value, contentType, FilenameUtils.getName(value)) maybe", "url": "https://github.com/vividus-framework/vividus/pull/1110#discussion_r519718529", "createdAt": "2020-11-09T10:53:33Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/model/RequestPartType.java", "diffHunk": "@@ -16,37 +16,87 @@\n \n package org.vividus.bdd.model;\n \n-import java.util.Optional;\n+import java.nio.charset.StandardCharsets;\n \n import org.apache.commons.io.FilenameUtils;\n import org.apache.http.entity.ContentType;\n-import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ByteArrayBody;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.StringBody;\n import org.vividus.util.ResourceUtils;\n \n public enum RequestPartType\n {\n     STRING\n     {\n         @Override\n-        public void addPart(MultipartEntityBuilder builder, String name, String value, Optional<String> contentType)\n+        public ContentType getDefaultContentType()\n         {\n-            contentType.ifPresentOrElse(type -> builder.addTextBody(name, value, ContentType.parse(type)),\n-                () -> builder.addTextBody(name, value));\n+            return ContentType.DEFAULT_TEXT;\n+        }\n+\n+        @Override\n+        public ContentBody createPart(String value, ContentType contentType)\n+        {\n+            return new StringBody(value, contentType);\n+        }\n+\n+        @Override\n+        public ContentBody createPart(String value, ContentType contentType, String fileName)\n+        {\n+            throw new IllegalArgumentException(\n+                    String.format(\"'fileName' parameter is not allowed for %s request part type\", name()));\n         }\n     },\n     FILE\n     {\n         @Override\n-        public void addPart(MultipartEntityBuilder builder, String name, String value, Optional<String> contentType)\n+        public ContentType getDefaultContentType()\n+        {\n+            return ContentType.DEFAULT_BINARY;\n+        }\n+\n+        @Override\n+        public ContentBody createPart(String value, ContentType contentType)\n         {\n             byte[] byteArray = ResourceUtils.loadResourceAsByteArray(getClass(), value);\n             String fileName = FilenameUtils.getName(value);\n-            builder.addBinaryBody(name, byteArray,\n-                    contentType.map(ContentType::parse).orElse(ContentType.DEFAULT_BINARY),\n-                    fileName);\n+            return new ByteArrayBody(byteArray, contentType, fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a16331e7562cbea8f705116b237ade5eb77adc"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 59, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}