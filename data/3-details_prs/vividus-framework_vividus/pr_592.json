{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzg2NzI2", "number": 592, "title": "[analytics] Introduce Vividus insight", "bodyText": "closes #88", "createdAt": "2020-05-19T21:56:58Z", "url": "https://github.com/vividus-framework/vividus/pull/592", "merged": true, "mergeCommit": {"oid": "715edc07326e7fbe310fdfa71b5c17812994d6b3"}, "closed": true, "closedAt": "2020-05-22T09:23:54Z", "author": {"login": "ikalinin1"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci71TwABqjMzNTM4ODM3MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjtKkNABqjMzNjM1OTcxODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e2fdbcbc2cec1c6fbcaa26bfcd59fe0cb76d667", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/2e2fdbcbc2cec1c6fbcaa26bfcd59fe0cb76d667", "committedDate": "2020-05-19T21:31:08Z", "message": "[analytics] Introduce Vivivdus insight"}, "afterCommit": {"oid": "26a9123dbf321ef4b06c8f9ff34deb664522e2c1", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/26a9123dbf321ef4b06c8f9ff34deb664522e2c1", "committedDate": "2020-05-19T22:02:00Z", "message": "[analytics] Introduce Vivivdus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26a9123dbf321ef4b06c8f9ff34deb664522e2c1", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/26a9123dbf321ef4b06c8f9ff34deb664522e2c1", "committedDate": "2020-05-19T22:02:00Z", "message": "[analytics] Introduce Vivivdus insight"}, "afterCommit": {"oid": "2a4d409153303acf5bd18035aa2833f5e6fedfcf", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/2a4d409153303acf5bd18035aa2833f5e6fedfcf", "committedDate": "2020-05-19T22:36:12Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a4d409153303acf5bd18035aa2833f5e6fedfcf", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/2a4d409153303acf5bd18035aa2833f5e6fedfcf", "committedDate": "2020-05-19T22:36:12Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/55682abde25b8b77c8d75fa7cab067c3df9bd04a", "committedDate": "2020-05-20T07:01:25Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDU4MDg5", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-415058089", "createdAt": "2020-05-20T07:24:02Z", "commit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNDowMlrOGX-ftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNDowMlrOGX-ftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NDM1Nw==", "bodyText": "double space 91 99", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427794357", "createdAt": "2020-05-20T07:24:02Z", "author": {"login": "uarlouski"}, "path": "vividus-allure-adaptor/src/main/java/org/vividus/bdd/report/allure/plugin/VividusAnalyticsPlugin.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.report.allure.plugin;\n+\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import com.google.common.eventbus.EventBus;\n+\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+\n+import io.qameta.allure.Aggregator;\n+import io.qameta.allure.core.Configuration;\n+import io.qameta.allure.core.LaunchResults;\n+import io.qameta.allure.entity.StageResult;\n+import io.qameta.allure.entity.Step;\n+import io.qameta.allure.entity.TestResult;\n+import io.qameta.allure.entity.Time;\n+\n+public class VividusAnalyticsPlugin implements Aggregator\n+{\n+    private final EventBus eventBus;\n+\n+    public VividusAnalyticsPlugin(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void aggregate(final Configuration configuration, final List<LaunchResults> launchesResults,\n+            final Path outputDirectory)\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        CustomFields.STORIES.add(payload, Long.toString(countStories(launchesResults)));\n+        CustomFields.STEPS.add(payload, Long.toString(countSteps(launchesResults)));\n+        CustomFields.DURATION.add(payload, Long.toString(coundDuration(launchesResults)));\n+        payload.put(\"sc\", \"end\");\n+        AnalyticsEvent testFinishEvent = new AnalyticsEvent(\"finishTests\", payload);\n+        eventBus.post(testFinishEvent);\n+    }\n+\n+    private static long countStories(final List<LaunchResults> launchesResults)\n+    {\n+        return launchesResults.stream()\n+                .map(LaunchResults::getResults)\n+                .mapToLong(Collection::size)\n+                .sum();\n+    }\n+\n+    private static long countSteps(final List<LaunchResults> launchesResults)\n+    {\n+        return toSteps(launchesResults).map(Step::getName)\n+                                       .filter(filterSystemSteps())\n+                                       .count();\n+    }\n+\n+    private static Stream<Step> toSteps(final List<LaunchResults> launchesResults)\n+    {\n+        return launchesResults.stream()\n+                .map(LaunchResults::getResults)\n+                .flatMap(Set::stream)\n+                .map(TestResult::getTestStage)\n+                .map(StageResult::getSteps)\n+                .flatMap(Collection::stream);\n+    }\n+\n+    private static long coundDuration(final List<LaunchResults> launchesResults)\n+    {\n+        long millis =  toSteps(launchesResults).map(Step::getTime)\n+                                               .mapToLong(Time::getDuration)\n+                                               .sum();\n+        return TimeUnit.MILLISECONDS.toSeconds(millis);\n+    }\n+\n+    private static Predicate<String> filterSystemSteps()\n+    {\n+        return step ->  !step.startsWith(\"@Before\") && !step.startsWith(\"@After\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDYwNjQ5", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-415060649", "createdAt": "2020-05-20T07:27:51Z", "commit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzo1MVrOGX-nkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzo1MVrOGX-nkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjM3MQ==", "bodyText": "does it make sense to introduce it through interface in case if we want to add adobe analytics or smith else?", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427796371", "createdAt": "2020-05-20T07:27:51Z", "author": {"login": "uarlouski"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDYxNjMw", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-415061630", "createdAt": "2020-05-20T07:29:19Z", "commit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyOToxOVrOGX-qRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyOToxOVrOGX-qRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzA2MA==", "bodyText": "afaik we are moving in direction of replacing setter injection with constructor injection", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427797060", "createdAt": "2020-05-20T07:29:19Z", "author": {"login": "uarlouski"}, "path": "vividus-analytics/src/main/resources/spring.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+    default-lazy-init=\"true\">\n+\n+    <bean id=\"analyticsFacade\" init-method=\"init\" class=\"org.vividus.analytics.GoogleAnalyticsFacade\">\n+        <property name=\"trackingId\" value=\"${analytics.tracking-id}\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTMzODUx", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-415133851", "createdAt": "2020-05-20T09:03:20Z", "commit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTowMzoyMFrOGYCJQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToxMjoxN1rOGYCe3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1NDE0NQ==", "bodyText": "analyticsService depends on analyticsFacade, so service bean will be created at the context start (not lazily), the creation of service bean will trigger creation of facade bean\nhaving all this said:\n\ndefault-lazy-init=\"true\" can be removed from root\nlazy-init=\"false\" can be removed from this service bean", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427854145", "createdAt": "2020-05-20T09:03:20Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/resources/spring.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+    default-lazy-init=\"true\">\n+\n+    <bean id=\"analyticsFacade\" init-method=\"init\" class=\"org.vividus.analytics.GoogleAnalyticsFacade\">\n+        <property name=\"trackingId\" value=\"${analytics.tracking-id}\" />\n+        <property name=\"analyticsUri\" value=\"${analytics.uri}\" />\n+    </bean>\n+\n+    <bean id=\"analyticsService\" class=\"org.vividus.analytics.AnalyticsService\" lazy-init=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1NTUxNg==", "bodyText": "move all strings like \"v\" to readable constants: String VERSION = \"v\" ?", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427855516", "createdAt": "2020-05-20T09:05:42Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(\"v\", \"1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1OTY3Nw==", "bodyText": "I recommend to use org.apache.http.client.utils.URLEncodedUtils", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r427859677", "createdAt": "2020-05-20T09:12:17Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(\"v\", \"1\"));\n+        defaultParameters.add(pairOf(\"t\", \"event\"));\n+        defaultParameters.add(pairOf(\"tid\", trackingId));\n+        defaultParameters.add(pairOf(\"cid\", cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        String params = Stream.concat(defaultParameters.stream(), convertToNameValuePairs(analyticsEvent))\n+                              .map(p -> p.getName() + \"=\" + p.getValue())\n+                              .collect(Collectors.joining(\"&\"));\n+        StringEntity entity = new StringEntity(params, StandardCharsets.UTF_8);\n+        post(entity);\n+    }\n+\n+    private Stream<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), URLEncoder.encode(e.getValue(), StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/55682abde25b8b77c8d75fa7cab067c3df9bd04a", "committedDate": "2020-05-20T07:01:25Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "committedDate": "2020-05-20T11:15:39Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/a6e40a6d2cb8a1a03557621d3562a6f3f8dcddf1", "committedDate": "2020-05-20T11:15:39Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "5a7d250c05afb6a26c7bd61a3ac2fdc7e2f8e0b9", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/5a7d250c05afb6a26c7bd61a3ac2fdc7e2f8e0b9", "committedDate": "2020-05-20T11:50:03Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a7d250c05afb6a26c7bd61a3ac2fdc7e2f8e0b9", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/5a7d250c05afb6a26c7bd61a3ac2fdc7e2f8e0b9", "committedDate": "2020-05-20T11:50:03Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "026996b14093aea3d3e1d5ebf4f357d92005d73a", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/026996b14093aea3d3e1d5ebf4f357d92005d73a", "committedDate": "2020-05-20T13:26:27Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "026996b14093aea3d3e1d5ebf4f357d92005d73a", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/026996b14093aea3d3e1d5ebf4f357d92005d73a", "committedDate": "2020-05-20T13:26:27Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "committedDate": "2020-05-20T15:24:16Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDk0NzA2", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-415494706", "createdAt": "2020-05-20T16:09:51Z", "commit": {"oid": "fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjowOTo1MVrOGYTQxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjowOTo1MVrOGYTQxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNDU5Nw==", "bodyText": "I think it makes sense to start in the very end of this method", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428134597", "createdAt": "2020-05-20T16:09:51Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/bdd/AnalyticsSteps.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics.bdd;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.annotations.AfterStories;\n+import org.jbehave.core.annotations.BeforeStories;\n+import org.vividus.analytics.AnalyticsStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsSteps\n+{\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+    private final AnalyticsStoryReporter analyticsStoryReporter;\n+\n+    public AnalyticsSteps(EventBus eventBus, AnalyticsStoryReporter analyticsStoryReporter)\n+    {\n+        this.eventBus = eventBus;\n+        this.analyticsStoryReporter = analyticsStoryReporter;\n+    }\n+\n+    @BeforeStories\n+    public void beforeStories()\n+    {\n+        stopwatch = Stopwatch.createStarted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/fbcbe05e04b06b714a0fa0f48aedf68afc2dc57b", "committedDate": "2020-05-20T15:24:16Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "86b2ffc562814c791eec9b920fe93f2ded371103", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/86b2ffc562814c791eec9b920fe93f2ded371103", "committedDate": "2020-05-20T20:29:49Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86b2ffc562814c791eec9b920fe93f2ded371103", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/86b2ffc562814c791eec9b920fe93f2ded371103", "committedDate": "2020-05-20T20:29:49Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/90459bfab4960ea3664b20461b8e1182e7ce2d3c", "committedDate": "2020-05-21T08:13:33Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDcyNjQ2", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-416072646", "createdAt": "2020-05-21T11:29:40Z", "commit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMToyOTo0MVrOGYvd_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMTo0NjoyNFrOGYv4xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NjczMw==", "bodyText": "isSystem -> processSystemStory - to show that method also do processing", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428596733", "createdAt": "2020-05-21T11:29:41Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.model.Scenario;\n+import org.jbehave.core.model.Story;\n+import org.jbehave.core.reporters.NullStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsStoryReporter extends NullStoryReporter\n+{\n+    private static final AtomicLong STORIES = new AtomicLong();\n+    private static final AtomicLong SCENARIOS = new AtomicLong();\n+    private static final AtomicLong STEPS = new AtomicLong();\n+\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+\n+    public AnalyticsStoryReporter(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void beforeStory(Story story, boolean givenStory)\n+    {\n+        if (isSystem(story.getPath()))\n+        {\n+            return;\n+        }\n+        STORIES.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeScenario(Scenario scenario)\n+    {\n+        SCENARIOS.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeStep(String step)\n+    {\n+        STEPS.incrementAndGet();\n+    }\n+\n+    private void beforeStories()\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n+        Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n+\n+        CustomFields.PROFILE.add(payload, configuration.get(\"Profiles\"));\n+        CustomFields.JAVA.add(payload, Runtime.version().toString());\n+        CustomFields.VIVIDUS.add(payload, modules.getOrDefault(\"vividus\", \"0.0.0-SNAPSHOT\"));\n+        CustomFields.REMOTE.add(payload, getEnvironmentProperties(PropertyCategory.PROFILE).get(\"Remote Execution\"));\n+        payload.put(SESSION_CONTROL, \"start\");\n+        eventBus.post(new AnalyticsEvent(\"startTests\", payload));\n+\n+        postPluginsAnalytic(modules);\n+        stopwatch = Stopwatch.createStarted();\n+    }\n+\n+    private void postPluginsAnalytic(Map<String, String> modules)\n+    {\n+        modules.forEach((k, v) -> {\n+            if (k.startsWith(\"vividus-plugin-\"))\n+            {\n+                Map<String, String> payload = new HashMap<>();\n+                CustomFields.PLUGIN_VERSION.add(payload, v);\n+                eventBus.post(new AnalyticsEvent(k, \"use\", payload));\n+            }\n+        });\n+    }\n+\n+    public void afterStories()\n+    {\n+        long duration = stopwatch.elapsed().toSeconds();\n+        Map<String, String> payload = new HashMap<>();\n+        CustomFields.STORIES.add(payload, stringify(STORIES.get()));\n+        CustomFields.SCENARIOS.add(payload, stringify(SCENARIOS.get()));\n+        CustomFields.STEPS.add(payload, stringify(STEPS.get()));\n+        CustomFields.DURATION.add(payload, stringify(duration));\n+        payload.put(SESSION_CONTROL, \"end\");\n+        AnalyticsEvent testFinishEvent = new AnalyticsEvent(\"finishTests\", payload);\n+        eventBus.post(testFinishEvent);\n+    }\n+\n+    private String stringify(long toConvert)\n+    {\n+        return Long.toString(toConvert);\n+    }\n+\n+    private Map<String, String> getEnvironmentProperties(PropertyCategory propertyCategory)\n+    {\n+        return EnvironmentConfigurer.ENVIRONMENT_CONFIGURATION.get(propertyCategory);\n+    }\n+\n+    private boolean isSystem(String story)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5ODc4OA==", "bodyText": "add exception message to log", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428598788", "createdAt": "2020-05-21T11:34:37Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(MEASUREMENT_API_VERSION, \"1\"));\n+        defaultParameters.add(pairOf(HIT_TYPE, \"event\"));\n+        defaultParameters.add(pairOf(TRACKING_ID, trackingId));\n+        defaultParameters.add(pairOf(CLIENT_ID, cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        String params = Stream.concat(defaultParameters.stream(), convertToNameValuePairs(analyticsEvent))\n+                              .map(p -> p.getName() + \"=\" + p.getValue())\n+                              .collect(Collectors.joining(\"&\"));\n+        StringEntity entity = new StringEntity(params, StandardCharsets.UTF_8);\n+        post(entity);\n+    }\n+\n+    private Stream<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), URLEncoder.encode(e.getValue(), StandardCharsets.UTF_8)));\n+    }\n+\n+    private BasicNameValuePair pairOf(String key, String value)\n+    {\n+        return new BasicNameValuePair(key, value);\n+    }\n+\n+    private void post(HttpEntity entity)\n+    {\n+        try\n+        {\n+            HttpEntityEnclosingRequestBase createEntityEnclosingRequest = HttpMethod.POST\n+                    .createEntityEnclosingRequest(analyticsUri, entity);\n+            createEntityEnclosingRequest.setHeader(\"User-Agent\", \"\");\n+            httpClient.execute(createEntityEnclosingRequest);\n+        }\n+        catch (IOException e)\n+        {\n+            LOGGER.info(\"Unable to send analytics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5OTA1Ng==", "bodyText": "PROFILES - as we allow to set several profiles", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428599056", "createdAt": "2020-05-21T11:35:17Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/model/CustomFields.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics.model;\n+\n+import java.util.Map;\n+\n+public enum CustomFields\n+{\n+    PROFILE(\"cd1\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5OTU4Nw==", "bodyText": "\"0.0.0-SNAPSHOT\" -> \"not detected\"?", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428599587", "createdAt": "2020-05-21T11:36:30Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.model.Scenario;\n+import org.jbehave.core.model.Story;\n+import org.jbehave.core.reporters.NullStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomFields;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsStoryReporter extends NullStoryReporter\n+{\n+    private static final AtomicLong STORIES = new AtomicLong();\n+    private static final AtomicLong SCENARIOS = new AtomicLong();\n+    private static final AtomicLong STEPS = new AtomicLong();\n+\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+\n+    public AnalyticsStoryReporter(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void beforeStory(Story story, boolean givenStory)\n+    {\n+        if (isSystem(story.getPath()))\n+        {\n+            return;\n+        }\n+        STORIES.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeScenario(Scenario scenario)\n+    {\n+        SCENARIOS.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeStep(String step)\n+    {\n+        STEPS.incrementAndGet();\n+    }\n+\n+    private void beforeStories()\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n+        Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n+\n+        CustomFields.PROFILE.add(payload, configuration.get(\"Profiles\"));\n+        CustomFields.JAVA.add(payload, Runtime.version().toString());\n+        CustomFields.VIVIDUS.add(payload, modules.getOrDefault(\"vividus\", \"0.0.0-SNAPSHOT\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMzU4OQ==", "bodyText": "Have you considered: org.apache.http.client.utils.URLEncodedUtils#format(java.util.List<? extends org.apache.http.NameValuePair>, char, java.lang.String) ?", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428603589", "createdAt": "2020-05-21T11:46:24Z", "author": {"login": "valfirst"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(\"v\", \"1\"));\n+        defaultParameters.add(pairOf(\"t\", \"event\"));\n+        defaultParameters.add(pairOf(\"tid\", trackingId));\n+        defaultParameters.add(pairOf(\"cid\", cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        String params = Stream.concat(defaultParameters.stream(), convertToNameValuePairs(analyticsEvent))\n+                              .map(p -> p.getName() + \"=\" + p.getValue())\n+                              .collect(Collectors.joining(\"&\"));\n+        StringEntity entity = new StringEntity(params, StandardCharsets.UTF_8);\n+        post(entity);\n+    }\n+\n+    private Stream<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), URLEncoder.encode(e.getValue(), StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1OTY3Nw=="}, "originalCommit": {"oid": "55682abde25b8b77c8d75fa7cab067c3df9bd04a"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90459bfab4960ea3664b20461b8e1182e7ce2d3c", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/90459bfab4960ea3664b20461b8e1182e7ce2d3c", "committedDate": "2020-05-21T08:13:33Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/b551cd36da1b609eec63e041bb26f8a25034efda", "committedDate": "2020-05-21T12:15:09Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTA5ODU5", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-416109859", "createdAt": "2020-05-21T12:38:22Z", "commit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTQ4NjEw", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-416148610", "createdAt": "2020-05-21T13:34:27Z", "commit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozNDoyN1rOGYy-Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzozNDoyN1rOGYy-Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NDA5OA==", "bodyText": "why not Atomic Long instance.toString()?", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428654098", "createdAt": "2020-05-21T13:34:27Z", "author": {"login": "uarlouski"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/AnalyticsStoryReporter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.eventbus.EventBus;\n+\n+import org.jbehave.core.model.Scenario;\n+import org.jbehave.core.model.Story;\n+import org.jbehave.core.reporters.NullStoryReporter;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.analytics.model.CustomDefinitions;\n+import org.vividus.reporter.environment.EnvironmentConfigurer;\n+import org.vividus.reporter.environment.PropertyCategory;\n+\n+public class AnalyticsStoryReporter extends NullStoryReporter\n+{\n+    private static final AtomicLong STORIES = new AtomicLong();\n+    private static final AtomicLong SCENARIOS = new AtomicLong();\n+    private static final AtomicLong STEPS = new AtomicLong();\n+\n+    private static final String SESSION_CONTROL = \"sc\";\n+\n+    private Stopwatch stopwatch;\n+\n+    private final EventBus eventBus;\n+\n+    public AnalyticsStoryReporter(EventBus eventBus)\n+    {\n+        this.eventBus = eventBus;\n+    }\n+\n+    @Override\n+    public void beforeStory(Story story, boolean givenStory)\n+    {\n+        if (processSystemStory(story.getPath()))\n+        {\n+            return;\n+        }\n+        STORIES.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeScenario(Scenario scenario)\n+    {\n+        SCENARIOS.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void beforeStep(String step)\n+    {\n+        STEPS.incrementAndGet();\n+    }\n+\n+    private void beforeStories()\n+    {\n+        Map<String, String> payload = new HashMap<>();\n+        Map<String, String> configuration = getEnvironmentProperties(PropertyCategory.CONFIGURATION);\n+        Map<String, String> modules = getEnvironmentProperties(PropertyCategory.VIVIDUS);\n+\n+        CustomDefinitions.PROFILES.add(payload, configuration.get(\"Profiles\"));\n+        CustomDefinitions.JAVA.add(payload, Runtime.version().toString());\n+        CustomDefinitions.VIVIDUS.add(payload, modules.getOrDefault(\"vividus\", \"not detected\"));\n+        CustomDefinitions.REMOTE.add(payload,\n+                getEnvironmentProperties(PropertyCategory.PROFILE).get(\"Remote Execution\"));\n+        payload.put(SESSION_CONTROL, \"start\");\n+        eventBus.post(new AnalyticsEvent(\"startTests\", payload));\n+\n+        postPluginsAnalytic(modules);\n+        stopwatch = Stopwatch.createStarted();\n+    }\n+\n+    private void postPluginsAnalytic(Map<String, String> modules)\n+    {\n+        modules.forEach((k, v) -> {\n+            if (k.startsWith(\"vividus-plugin-\"))\n+            {\n+                Map<String, String> payload = new HashMap<>();\n+                CustomDefinitions.PLUGIN_VERSION.add(payload, v);\n+                eventBus.post(new AnalyticsEvent(k, \"use\", payload));\n+            }\n+        });\n+    }\n+\n+    public void afterStories()\n+    {\n+        long duration = stopwatch.elapsed().toSeconds();\n+        Map<String, String> payload = new HashMap<>();\n+        CustomDefinitions.STORIES.add(payload, stringify(STORIES.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTUzNDY4", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-416153468", "createdAt": "2020-05-21T13:40:58Z", "commit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0MDo1OFrOGYzMpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0MDo1OFrOGYzMpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzgzMA==", "bodyText": "just interesting why is it needed?", "url": "https://github.com/vividus-framework/vividus/pull/592#discussion_r428657830", "createdAt": "2020-05-21T13:40:58Z", "author": {"login": "uarlouski"}, "path": "vividus-analytics/src/main/java/org/vividus/analytics/GoogleAnalyticsFacade.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.analytics;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.analytics.model.AnalyticsEvent;\n+import org.vividus.http.HttpMethod;\n+import org.vividus.http.client.IHttpClient;\n+\n+public class GoogleAnalyticsFacade\n+{\n+    private static final String CLIENT_ID = \"cid\";\n+\n+    private static final String TRACKING_ID = \"tid\";\n+\n+    private static final String HIT_TYPE = \"t\";\n+\n+    private static final String MEASUREMENT_API_VERSION = \"v\";\n+\n+    private static final Pattern PROJECT_NAME_PATTERN = Pattern.compile(\"(.+)(-\\\\d.+)?(\\\\\\\\|/)?\");\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleAnalyticsFacade.class);\n+\n+    private URI analyticsUri;\n+    private String trackingId;\n+    private List<NameValuePair> defaultParameters;\n+    private final IHttpClient httpClient;\n+\n+    public GoogleAnalyticsFacade(IHttpClient httpClient)\n+    {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public void init()\n+    {\n+        defaultParameters = new ArrayList<>();\n+        defaultParameters.add(pairOf(MEASUREMENT_API_VERSION, \"1\"));\n+        defaultParameters.add(pairOf(HIT_TYPE, \"event\"));\n+        defaultParameters.add(pairOf(TRACKING_ID, trackingId));\n+        defaultParameters.add(pairOf(CLIENT_ID, cid()));\n+    }\n+\n+    private static String cid()\n+    {\n+        String[] pathParts = System.getProperty(\"user.dir\").split(\"\\\\\\\\|/\");\n+        String projectName = pathParts[pathParts.length - 1];\n+        if (\"scripts\".equals(projectName))\n+        {\n+            projectName = PROJECT_NAME_PATTERN.matcher(pathParts[pathParts.length - 2]).replaceFirst(\"$1\");\n+        }\n+        return UUID.nameUUIDFromBytes(DigestUtils.sha512Hex(projectName).getBytes(StandardCharsets.UTF_8)).toString();\n+    }\n+\n+    public void postEvent(AnalyticsEvent analyticsEvent)\n+    {\n+        List<NameValuePair> params = new ArrayList<>();\n+        params.addAll(defaultParameters);\n+        params.addAll(convertToNameValuePairs(analyticsEvent));\n+        StringEntity entity = new StringEntity(URLEncodedUtils.format(params, UTF_8),\n+                UTF_8);\n+        post(entity);\n+    }\n+\n+    private List<BasicNameValuePair> convertToNameValuePairs(AnalyticsEvent analyticsEvent)\n+    {\n+        return analyticsEvent.getPayload()\n+                             .entrySet()\n+                             .stream()\n+                             .map(e -> pairOf(e.getKey(), e.getValue()))\n+                             .collect(Collectors.toList());\n+    }\n+\n+    private BasicNameValuePair pairOf(String key, String value)\n+    {\n+        return new BasicNameValuePair(key, value);\n+    }\n+\n+    private void post(HttpEntity entity)\n+    {\n+        try\n+        {\n+            HttpEntityEnclosingRequestBase createEntityEnclosingRequest = HttpMethod.POST\n+                    .createEntityEnclosingRequest(analyticsUri, entity);\n+            createEntityEnclosingRequest.setHeader(\"User-Agent\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda"}, "originalPosition": 117}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b551cd36da1b609eec63e041bb26f8a25034efda", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/b551cd36da1b609eec63e041bb26f8a25034efda", "committedDate": "2020-05-21T12:15:09Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "committedDate": "2020-05-21T14:05:05Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTg1NzAw", "url": "https://github.com/vividus-framework/vividus/pull/592#pullrequestreview-416185700", "createdAt": "2020-05-21T14:20:27Z", "commit": {"oid": "c53605881d558b55d0e4b3ea25de44f4bb6a0e81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50296edc725c877ad4234242613240e009b60b16", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/50296edc725c877ad4234242613240e009b60b16", "committedDate": "2020-05-22T07:30:26Z", "message": "[analytics] Introduce Vividus insight"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/c53605881d558b55d0e4b3ea25de44f4bb6a0e81", "committedDate": "2020-05-21T14:05:05Z", "message": "[analytics] Introduce Vividus insight"}, "afterCommit": {"oid": "50296edc725c877ad4234242613240e009b60b16", "author": {"user": {"login": "ikalinin1", "name": "Ivan Kalinin"}}, "url": "https://github.com/vividus-framework/vividus/commit/50296edc725c877ad4234242613240e009b60b16", "committedDate": "2020-05-22T07:30:26Z", "message": "[analytics] Introduce Vividus insight"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 203, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}