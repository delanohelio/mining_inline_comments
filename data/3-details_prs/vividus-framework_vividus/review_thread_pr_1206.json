{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MjM1NzYz", "number": 1206, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODozNzo0OFrOFCMdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNTozNlrOFCU8hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODQ1NTE4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODozNzo0OFrOIBNc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODozNzo0OFrOIBNc4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzOTg3Mg==", "bodyText": "move configuration of ObjectMapper to constructor to avoid possible duplicate re-configuration", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538139872", "createdAt": "2020-12-08T08:37:48Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -40,18 +41,21 @@\n     private final JiraFacade jiraFacade;\n     private IZephyrFacade zephyrFacade;\n     private TestCaseParser testCaseParser;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n \n-    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser)\n-            throws IOException\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n     {\n         this.jiraFacade = jiraFacade;\n         this.zephyrFacade = zephyrFacade;\n         this.testCaseParser = testCaseParser;\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n     }\n \n     public void exportResults() throws IOException\n     {\n-        ObjectMapper objectMapper = new ObjectMapper();\n         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n         objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n         objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0468d7480c8a78d6be4357d1f4ff034a36e5b558"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODQ2NTMyOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODo0MDowM1rOIBNi3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDowMzozMVrOIBRMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MTQwNw==", "bodyText": "shouldn't the export fail if test execution is not found?", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538141407", "createdAt": "2020-12-08T08:40:03Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -60,20 +64,30 @@ public void exportResults() throws IOException\n         ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n         for (TestCase testCase : testCasesForImporting)\n         {\n-            createNewTestExecution(testCase, configuration, objectMapper);\n+            exportTestExecution(testCase, configuration);\n         }\n     }\n \n-    private void createNewTestExecution(TestCase testCase, ZephyrConfiguration configuration, ObjectMapper objectMapper)\n-            throws IOException\n+    private void exportTestExecution(TestCase testCase, ZephyrConfiguration configuration) throws IOException\n     {\n         JiraEntity issue = jiraFacade.getIssue(testCase.getKey());\n         ZephyrExecution execution = new ZephyrExecution(configuration, issue.getId(), testCase.getStatus());\n-        String createExecution = objectMapper.writeValueAsString(execution);\n-        int executionId = zephyrFacade.createExecution(createExecution);\n+        int executionId;\n \n-        String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n+        if (zephyrExporterProperties.getUpdateExecutionStatusesOnly())\n+        {\n+            executionId = zephyrFacade.findExecutionId(issue.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0468d7480c8a78d6be4357d1f4ff034a36e5b558"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MDE1Nw==", "bodyText": "No, because it made for setup statuses for only created executions (in allure them can be more than created in jira)", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538190157", "createdAt": "2020-12-08T09:48:34Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -60,20 +64,30 @@ public void exportResults() throws IOException\n         ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n         for (TestCase testCase : testCasesForImporting)\n         {\n-            createNewTestExecution(testCase, configuration, objectMapper);\n+            exportTestExecution(testCase, configuration);\n         }\n     }\n \n-    private void createNewTestExecution(TestCase testCase, ZephyrConfiguration configuration, ObjectMapper objectMapper)\n-            throws IOException\n+    private void exportTestExecution(TestCase testCase, ZephyrConfiguration configuration) throws IOException\n     {\n         JiraEntity issue = jiraFacade.getIssue(testCase.getKey());\n         ZephyrExecution execution = new ZephyrExecution(configuration, issue.getId(), testCase.getStatus());\n-        String createExecution = objectMapper.writeValueAsString(execution);\n-        int executionId = zephyrFacade.createExecution(createExecution);\n+        int executionId;\n \n-        String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n+        if (zephyrExporterProperties.getUpdateExecutionStatusesOnly())\n+        {\n+            executionId = zephyrFacade.findExecutionId(issue.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MTQwNw=="}, "originalCommit": {"oid": "0468d7480c8a78d6be4357d1f4ff034a36e5b558"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMTI1OQ==", "bodyText": "ok, then maybe some logging makes sense?", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538201259", "createdAt": "2020-12-08T10:03:31Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -60,20 +64,30 @@ public void exportResults() throws IOException\n         ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n         for (TestCase testCase : testCasesForImporting)\n         {\n-            createNewTestExecution(testCase, configuration, objectMapper);\n+            exportTestExecution(testCase, configuration);\n         }\n     }\n \n-    private void createNewTestExecution(TestCase testCase, ZephyrConfiguration configuration, ObjectMapper objectMapper)\n-            throws IOException\n+    private void exportTestExecution(TestCase testCase, ZephyrConfiguration configuration) throws IOException\n     {\n         JiraEntity issue = jiraFacade.getIssue(testCase.getKey());\n         ZephyrExecution execution = new ZephyrExecution(configuration, issue.getId(), testCase.getStatus());\n-        String createExecution = objectMapper.writeValueAsString(execution);\n-        int executionId = zephyrFacade.createExecution(createExecution);\n+        int executionId;\n \n-        String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n+        if (zephyrExporterProperties.getUpdateExecutionStatusesOnly())\n+        {\n+            executionId = zephyrFacade.findExecutionId(issue.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MTQwNw=="}, "originalCommit": {"oid": "0468d7480c8a78d6be4357d1f4ff034a36e5b558"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODQ2NzY1OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODo0MDo0MFrOIBNkUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODo0MDo0MFrOIBNkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0MTc3Ng==", "bodyText": "it's better to return OptionalInt instead of using -1 as missing value flag", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538141776", "createdAt": "2020-12-08T08:40:40Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -142,4 +142,14 @@ private String findFolderId(String cycleId, String projectAndVersionUrlQuery) th\n         });\n         return testStatusPerZephyrIdMapping;\n     }\n+\n+    @Override\n+    public Integer findExecutionId(String issueId) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"execution?issueId=\" + issueId);\n+        List<Integer> executionId = JsonPathUtils.getData(json, String.format(\"$..[?(@.versionName=='%s' &&\"\n+                + \" @.cycleName=='%s' && @.folderName=='%s')].id\", zephyrExporterConfiguration.getVersionName(),\n+                zephyrExporterConfiguration.getCycleName(), zephyrExporterConfiguration.getFolderName()));\n+        return executionId.size() != 0 ? executionId.get(0) : -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0468d7480c8a78d6be4357d1f4ff034a36e5b558"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTY4MDM2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0NzoyNVrOIBY7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0NzoyNVrOIBY7Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyNzgzMA==", "bodyText": "maybe\nnew ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)..configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true).registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538327830", "createdAt": "2020-12-08T12:47:25Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -37,43 +41,63 @@\n \n public class ZephyrExporter\n {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n     private final JiraFacade jiraFacade;\n     private IZephyrFacade zephyrFacade;\n     private TestCaseParser testCaseParser;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n \n-    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser)\n-            throws IOException\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n     {\n         this.jiraFacade = jiraFacade;\n         this.zephyrFacade = zephyrFacade;\n         this.testCaseParser = testCaseParser;\n-    }\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n \n-    public void exportResults() throws IOException\n-    {\n-        ObjectMapper objectMapper = new ObjectMapper();\n         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n         objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n         objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70e17eca6a669b09cbf47009d83e6904c0a0413"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTY5MDI1OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0OToxM1rOIBZBZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0OToxM1rOIBZBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyOTQ0Ng==", "bodyText": "use {} for parameters in loggers", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538329446", "createdAt": "2020-12-08T12:49:13Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -37,43 +41,63 @@\n \n public class ZephyrExporter\n {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n     private final JiraFacade jiraFacade;\n     private IZephyrFacade zephyrFacade;\n     private TestCaseParser testCaseParser;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n \n-    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser)\n-            throws IOException\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n     {\n         this.jiraFacade = jiraFacade;\n         this.zephyrFacade = zephyrFacade;\n         this.testCaseParser = testCaseParser;\n-    }\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n \n-    public void exportResults() throws IOException\n-    {\n-        ObjectMapper objectMapper = new ObjectMapper();\n         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n         objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n         objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+    }\n \n+    public void exportResults() throws IOException\n+    {\n         List<TestCase> testCasesForImporting = testCaseParser.createTestCases(objectMapper);\n         ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n         for (TestCase testCase : testCasesForImporting)\n         {\n-            createNewTestExecution(testCase, configuration, objectMapper);\n+            exportTestExecution(testCase, configuration);\n         }\n     }\n \n-    private void createNewTestExecution(TestCase testCase, ZephyrConfiguration configuration, ObjectMapper objectMapper)\n-            throws IOException\n+    private void exportTestExecution(TestCase testCase, ZephyrConfiguration configuration) throws IOException\n     {\n         JiraEntity issue = jiraFacade.getIssue(testCase.getKey());\n         ZephyrExecution execution = new ZephyrExecution(configuration, issue.getId(), testCase.getStatus());\n-        String createExecution = objectMapper.writeValueAsString(execution);\n-        int executionId = zephyrFacade.createExecution(createExecution);\n+        OptionalInt executionId;\n \n-        String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n+        if (zephyrExporterProperties.getUpdateExecutionStatusesOnly())\n+        {\n+            executionId = zephyrFacade.findExecutionId(issue.getId());\n+        }\n+        else\n+        {\n+            String createExecution = objectMapper.writeValueAsString(execution);\n+            executionId = OptionalInt.of(zephyrFacade.createExecution(createExecution));\n+        }\n+        if (executionId.isPresent())\n+        {\n+            String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n                 String.valueOf(configuration.getTestStatusPerZephyrIdMapping().get(execution.getTestCaseStatus()))));\n-        zephyrFacade.updateExecutionStatus(executionId, executionBody);\n+            zephyrFacade.updateExecutionStatus(executionId.getAsInt(), executionBody);\n+        }\n+        else\n+        {\n+            LOGGER.info(\"Test case result for \" + testCase.getKey() + \" was not exported, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70e17eca6a669b09cbf47009d83e6904c0a0413"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTY5NDU3OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0OTo1NVrOIBZEHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo0OTo1NVrOIBZEHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDE0Mw==", "bodyText": "imho not readable", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538330143", "createdAt": "2020-12-08T12:49:55Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -142,4 +143,14 @@ private String findFolderId(String cycleId, String projectAndVersionUrlQuery) th\n         });\n         return testStatusPerZephyrIdMapping;\n     }\n+\n+    @Override\n+    public OptionalInt findExecutionId(String issueId) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"execution?issueId=\" + issueId);\n+        List<Integer> executionId = JsonPathUtils.getData(json, String.format(\"$..[?(@.versionName=='%s' &&\"\n+                + \" @.cycleName=='%s' && @.folderName=='%s')].id\", zephyrExporterConfiguration.getVersionName(),\n+                zephyrExporterConfiguration.getCycleName(), zephyrExporterConfiguration.getFolderName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70e17eca6a669b09cbf47009d83e6904c0a0413"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTg0Mjg4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNDo1NFrOIBajDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNDo1NFrOIBajDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NDQ0NA==", "bodyText": "testCase  is not used in the log message", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538354444", "createdAt": "2020-12-08T13:14:54Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -37,43 +41,62 @@\n \n public class ZephyrExporter\n {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n     private final JiraFacade jiraFacade;\n     private IZephyrFacade zephyrFacade;\n     private TestCaseParser testCaseParser;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n \n-    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser)\n-            throws IOException\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade, TestCaseParser testCaseParser,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n     {\n         this.jiraFacade = jiraFacade;\n         this.zephyrFacade = zephyrFacade;\n         this.testCaseParser = testCaseParser;\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n+\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n+            .registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n     }\n \n     public void exportResults() throws IOException\n     {\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n-        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n-\n         List<TestCase> testCasesForImporting = testCaseParser.createTestCases(objectMapper);\n         ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n         for (TestCase testCase : testCasesForImporting)\n         {\n-            createNewTestExecution(testCase, configuration, objectMapper);\n+            exportTestExecution(testCase, configuration);\n         }\n     }\n \n-    private void createNewTestExecution(TestCase testCase, ZephyrConfiguration configuration, ObjectMapper objectMapper)\n-            throws IOException\n+    private void exportTestExecution(TestCase testCase, ZephyrConfiguration configuration) throws IOException\n     {\n         JiraEntity issue = jiraFacade.getIssue(testCase.getKey());\n         ZephyrExecution execution = new ZephyrExecution(configuration, issue.getId(), testCase.getStatus());\n-        String createExecution = objectMapper.writeValueAsString(execution);\n-        int executionId = zephyrFacade.createExecution(createExecution);\n+        OptionalInt executionId;\n \n-        String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n+        if (zephyrExporterProperties.getUpdateExecutionStatusesOnly())\n+        {\n+            executionId = zephyrFacade.findExecutionId(issue.getId());\n+        }\n+        else\n+        {\n+            String createExecution = objectMapper.writeValueAsString(execution);\n+            executionId = OptionalInt.of(zephyrFacade.createExecution(createExecution));\n+        }\n+        if (executionId.isPresent())\n+        {\n+            String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n                 String.valueOf(configuration.getTestStatusPerZephyrIdMapping().get(execution.getTestCaseStatus()))));\n-        zephyrFacade.updateExecutionStatus(executionId, executionBody);\n+            zephyrFacade.updateExecutionStatus(executionId.getAsInt(), executionBody);\n+        }\n+        else\n+        {\n+            LOGGER.info(\"Test case result was not exported, because execution does not exist\", testCase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "325e635058dc71bbae32adada0ae52938ecb66fe"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTg0NjQ0OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/test/java/org/vividus/zephyr/exporter/ZephyrExporterTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNTozNlrOIBalcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNTozNlrOIBalcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NTA1Ng==", "bodyText": "please add an empty line after the field", "url": "https://github.com/vividus-framework/vividus/pull/1206#discussion_r538355056", "createdAt": "2020-12-08T13:15:36Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/test/java/org/vividus/zephyr/exporter/ZephyrExporterTests.java", "diffHunk": "@@ -34,14 +43,22 @@\n import org.vividus.jira.JiraFacade;\n import org.vividus.jira.model.JiraEntity;\n import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterProperties;\n import org.vividus.zephyr.facade.ZephyrFacade;\n import org.vividus.zephyr.model.TestCase;\n import org.vividus.zephyr.model.TestCaseStatus;\n import org.vividus.zephyr.parser.TestCaseParser;\n \n-@ExtendWith(MockitoExtension.class)\n+@ExtendWith({MockitoExtension.class, TestLoggerFactoryExtension.class})\n class ZephyrExporterTests\n {\n+    private static final String TEST_CASE_KEY1 = \"TEST-1\";\n+    private static final String TEST_CASE_KEY2 = \"TEST-2\";\n+    private static final String ISSUE_ID1 = \"1\";\n+    private static final String ISSUE_ID2 = \"2\";\n+    private static final String STATUS_UPDATE_JSON = \"{\\\"status\\\":\\\"-1\\\"}\";\n+\n+    private final TestLogger testLogger = TestLoggerFactory.getTestLogger(ZephyrExporter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "325e635058dc71bbae32adada0ae52938ecb66fe"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4969, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}