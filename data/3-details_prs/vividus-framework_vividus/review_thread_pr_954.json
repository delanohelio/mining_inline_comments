{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODA2MTEz", "number": 954, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowMjoxNVrOEpsx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0MjozOFrOEpuCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTYwNzQ1OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowMjoxNVrOHbh8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowMjoxNVrOHbh8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyOTc5NQ==", "bodyText": "Does it make sense to refactor this complex condition to something like:\nif (!configuration.dryRun() && !givenStory && notPrecodition(name) && proxyEnabled())", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498629795", "createdAt": "2020-10-02T06:02:15Z", "author": {"login": "ikalinin1"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/bdd/proxy/ProxyAgentStoryReporter.java", "diffHunk": "@@ -39,15 +40,10 @@\n     public void beforeStory(Story story, boolean givenStory)\n     {\n         String name = bddRunContext.getRunningStory().getName();\n-        if (!configuration.dryRun())\n+        if (!configuration.dryRun() && !givenStory && !\"BeforeStories\".equals(name) && !\"AfterStories\".equals(name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTYxNTE3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowODowMlrOHbiBew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowODowMlrOHbiBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzMTAzNQ==", "bodyText": "options1 -> options", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498631035", "createdAt": "2020-10-02T06:08:02Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-saucelabs/src/test/java/org/vividus/selenium/sauce/SauceConnectOptionsTests.java", "diffHunk": "@@ -0,0 +1,400 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.sauce;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@RunWith(PowerMockRunner.class)\n+public class SauceConnectOptionsTests\n+{\n+    private static final String SPACE = \" \";\n+    private static final String PAC_FILE = \"--pac file://\";\n+    private static final String DOT_JS = \".js\";\n+    private static final String PAC_TEST_TUNNEL = \"pac-test-tunnel\";\n+    private static final String PROXY = \"test\";\n+    private static final String TUNNEL_IDENTIFIER = \"test-tunnel\";\n+    private static final String PID_FILE_NAME = \"sc_client-\" + TUNNEL_IDENTIFIER + \"-\";\n+    private static final String TUNNEL_IDENTIFIER_OPTION = \"--tunnel-identifier\" + SPACE + TUNNEL_IDENTIFIER;\n+    private static final String HOST = \"host\";\n+    private static final String USER = \"user:pass\";\n+    private static final int PORT = 9999;\n+    private static final int DEFAULT_HOST_PORT = 80;\n+    private static final String AUTH_FORMAT = \"--auth %s:%d:%s\";\n+    private static final String PID_EXTENSION = \".pid\";\n+    private static final String NO_REMOVE_COLLIDING_TUNNELS = \"--no-remove-colliding-tunnels\";\n+    private static final String NO_PROXY_CACHING = \"--no-proxy-caching\";\n+    private static final String SAUCE_LABS_REST_URL = \"https://saucelabs.com/rest/v1/\";\n+\n+    private static final String PID_FILE = \"--pidfile\";\n+\n+    private final SauceConnectOptions sauceConnectOptions = new SauceConnectOptions();\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxy() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWindowsPathDelimeters() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        when(pacPath.toString()).thenReturn(\"c:\\\\user\\\\temp.js\");\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE\n+                        + \"c:/user/temp.js\" + SPACE + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuth() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        sauceConnectOptions.setPort(PORT);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + String\n+                        .format(AUTH_FORMAT, HOST, PORT, USER) + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuthNoPort() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + String\n+                        .format(AUTH_FORMAT, HOST, DEFAULT_HOST_PORT, USER) + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuthNoHost() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithAuthNoUser() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setHost(HOST);\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWithProxyWithSkipHostsPattern() throws Exception\n+    {\n+        sauceConnectOptions.setProxy(PROXY);\n+        sauceConnectOptions.setSkipProxyHostsPattern(\"example.com\");\n+        File file = mock(File.class);\n+        Path pacPath = mock(Path.class);\n+        PowerMockito.mockStatic(Files.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(Files.createTempFile(PAC_TEST_TUNNEL, DOT_JS)).thenReturn(pacPath);\n+        when(pacPath.toFile()).thenReturn(file);\n+        Path pidPath = mock(Path.class);\n+        when(Files.createTempFile(PID_FILE_NAME, PID_EXTENSION)).thenReturn(pidPath);\n+        File pidFile = mock(File.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + PAC_FILE + pacPath + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        PowerMockito.verifyStatic(FileUtils.class);\n+        FileUtils.writeLines(file, StandardCharsets.UTF_8.toString(), List.of(\"function \"\n+                + \"FindProxyForURL(url, host) { if (shExpMatch(host, \\\"*.miso.saucelabs.com\\\")\"\n+                + \"|| shExpMatch(host, \\\"saucelabs.com\\\")|| shExpMatch(host, \\\"example.com\\\")) \"\n+                + \"{return \\\"DIRECT\\\";}return \\\"PROXY test\\\";}\"));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWOProxy() throws IOException\n+    {\n+        Path pidPath = mockPidPath();\n+        File pidFile = mock(File.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + NO_REMOVE_COLLIDING_TUNNELS\n+                        + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWOProxyWithNoSslBumpDomains() throws IOException\n+    {\n+        String noSslValue = \"all\";\n+        String noSslOption = \"--no-ssl-bump-domains\" + SPACE + noSslValue;\n+        Path pidPath = mockPidPath();\n+        File pidFile = mock(File.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        sauceConnectOptions.setNoSslBumpDomains(noSslValue);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + noSslOption + SPACE\n+                        + NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    @PrepareForTest({ SauceConnectOptions.class, Files.class, FileUtils.class })\n+    public void testBuildWOProxyWithAuth() throws IOException\n+    {\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        Path pidPath = mockPidPath();\n+        File pidFile = mock(File.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+        when(pidPath.toFile()).thenReturn(pidFile);\n+        assertEquals(TUNNEL_IDENTIFIER_OPTION + SPACE + PID_FILE + SPACE + pidPath + SPACE + String\n+                        .format(AUTH_FORMAT, HOST, DEFAULT_HOST_PORT, USER) + SPACE + NO_REMOVE_COLLIDING_TUNNELS\n+                        + SPACE + NO_PROXY_CACHING,\n+                sauceConnectOptions.build(TUNNEL_IDENTIFIER));\n+        verify(pidFile).deleteOnExit();\n+    }\n+\n+    @Test\n+    public void testBuildWOProxyNullOption() throws IOException\n+    {\n+        assertEquals(NO_REMOVE_COLLIDING_TUNNELS + SPACE + NO_PROXY_CACHING, sauceConnectOptions.build(null));\n+    }\n+\n+    @Test\n+    public void testBuildWOProxyNullOptionWithAuth() throws IOException\n+    {\n+        sauceConnectOptions.setHost(HOST);\n+        sauceConnectOptions.setBasicAuthUser(USER);\n+        assertEquals(String.format(AUTH_FORMAT, HOST, DEFAULT_HOST_PORT, USER) + SPACE + NO_REMOVE_COLLIDING_TUNNELS\n+                + SPACE + NO_PROXY_CACHING, sauceConnectOptions.build(null));\n+    }\n+\n+    @Test\n+    public void testBuildWithRestUrl() throws IOException\n+    {\n+        sauceConnectOptions.setRestUrl(SAUCE_LABS_REST_URL);\n+        assertEquals(\"--rest-url\" + SPACE + SAUCE_LABS_REST_URL + SPACE + NO_REMOVE_COLLIDING_TUNNELS + SPACE\n+                + NO_PROXY_CACHING, sauceConnectOptions.build(null));\n+    }\n+\n+    @Test\n+    public void testHashCode()\n+    {\n+        assertEquals(createDefaultOptions().hashCode(), createDefaultOptions().hashCode());\n+    }\n+\n+    @Test\n+    public void testEqualsDifferentObjects()\n+    {\n+        assertEquals(createDefaultOptions(), createDefaultOptions());\n+    }\n+\n+    @Test\n+    public void testEqualsSameObjects()\n+    {\n+        SauceConnectOptions options = createDefaultOptions();\n+        assertEquals(options, options);\n+    }\n+\n+    @Test\n+    public void testNotEqualsToNull()\n+    {\n+        assertFalse(createDefaultOptions().equals(null));\n+    }\n+\n+    @Test\n+    public void testNotEqualsProxy()\n+    {\n+        SauceConnectOptions options1 = createDefaultOptions();\n+        options1.setProxy(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTYxNzYxOnYy", "diffSide": "LEFT", "path": "vividus-plugin-web-app/src/main/resources/spring.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjowOTo1N1rOHbiDIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzowODozOVrOHbjHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzMTQ1Nw==", "bodyText": "Does it make sense to move proxy steps to an extension?", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498631457", "createdAt": "2020-10-02T06:09:57Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-web-app/src/main/resources/spring.xml", "diffHunk": "@@ -283,22 +248,12 @@\n     </bean>\n \n     <bean id=\"vividusWebDriverFactory\" class=\"org.vividus.selenium.VividusWebDriverFactory\">\n-        <property name=\"remoteExecution\" value=\"${selenium.grid.enabled}\" />\n-        <property name=\"webDriverEventListeners\" ref=\"webDriverEventListener-EventHandlers\" />\n+        <constructor-arg index=\"0\" value=\"${selenium.grid.enabled}\"/>\n+        <property name=\"webDriverEventListeners\" ref=\"webDriverEventListener-EventHandlers\"/>\n     </bean>\n \n     <bean id=\"webDriverManagerContext\" class=\"org.vividus.selenium.WebDriverManagerContext\" />\n \n-    <bean id=\"storyReporter\" class=\"org.vividus.bdd.RunContextStoryReporter\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0ODkwNA==", "bodyText": "not for now, too many changes to address and to test", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498648904", "createdAt": "2020-10-02T07:08:39Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-web-app/src/main/resources/spring.xml", "diffHunk": "@@ -283,22 +248,12 @@\n     </bean>\n \n     <bean id=\"vividusWebDriverFactory\" class=\"org.vividus.selenium.VividusWebDriverFactory\">\n-        <property name=\"remoteExecution\" value=\"${selenium.grid.enabled}\" />\n-        <property name=\"webDriverEventListeners\" ref=\"webDriverEventListener-EventHandlers\" />\n+        <constructor-arg index=\"0\" value=\"${selenium.grid.enabled}\"/>\n+        <property name=\"webDriverEventListeners\" ref=\"webDriverEventListener-EventHandlers\"/>\n     </bean>\n \n     <bean id=\"webDriverManagerContext\" class=\"org.vividus.selenium.WebDriverManagerContext\" />\n \n-    <bean id=\"storyReporter\" class=\"org.vividus.bdd.RunContextStoryReporter\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzMTQ1Nw=="}, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTYyMTM3OnYy", "diffSide": "RIGHT", "path": "vividus-tests/src/main/resources/story/integration/ProxyStepsTests.story", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjoxMjoyM1rOHbiFXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoxMTozN1rOHbjLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzMjAzMQ==", "bodyText": "I propose to switch the whole story to HTTPS", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498632031", "createdAt": "2020-10-02T06:12:23Z", "author": {"login": "ikalinin1"}, "path": "vividus-tests/src/main/resources/story/integration/ProxyStepsTests.story", "diffHunk": "@@ -4,8 +4,8 @@ Meta:\n     @proxy\n \n Scenario: Verify step Then number of HTTP $httpMethod requests with URL pattern `$urlPattern` is $comparisonRule `$number`\n-Given I am on a page with the URL 'http://httpbin.org/get'\n-Then number of HTTP GET requests with URL pattern `http://httpbin.org/get` is EQUAL TO `1`\n+Given I am on a page with the URL 'https://httpbin.org/get'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1MDAyOA==", "bodyText": "we need to have both HTTP and HTTPS to easily debug issues if any", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498650028", "createdAt": "2020-10-02T07:11:37Z", "author": {"login": "valfirst"}, "path": "vividus-tests/src/main/resources/story/integration/ProxyStepsTests.story", "diffHunk": "@@ -4,8 +4,8 @@ Meta:\n     @proxy\n \n Scenario: Verify step Then number of HTTP $httpMethod requests with URL pattern `$urlPattern` is $comparisonRule `$number`\n-Given I am on a page with the URL 'http://httpbin.org/get'\n-Then number of HTTP GET requests with URL pattern `http://httpbin.org/get` is EQUAL TO `1`\n+Given I am on a page with the URL 'https://httpbin.org/get'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzMjAzMQ=="}, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTcyNTc2OnYy", "diffSide": "RIGHT", "path": ".github/workflows/gradle.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzowODowN1rOHbjGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo0MzoxOVrOHblutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0ODY4Nw==", "bodyText": "shouldn't we use the same approach for BrowserStack?", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498648687", "createdAt": "2020-10-02T07:08:07Z", "author": {"login": "uarlouski"}, "path": ".github/workflows/gradle.yml", "diffHunk": "@@ -168,7 +168,7 @@ jobs:\n             ./gradlew :vividus-tests:runStories -x testVividusInitialization \\\n                                                 -Pvividus.configuration.environments=system/mobile_app/saucelabs/ios \\\n                                                 -Pvividus.configuration.suite=system/mobile_app \\\n-                                                -Pvividus.configuration.profiles=mobile_app/ios,saucelabs/mobile_app \\\n+                                                -Pvividus.configuration.profiles=saucelabs/mobile_app,mobile_app/ios \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5MTc2NQ==", "bodyText": "for BS the order doesn't matter", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498691765", "createdAt": "2020-10-02T08:43:19Z", "author": {"login": "valfirst"}, "path": ".github/workflows/gradle.yml", "diffHunk": "@@ -168,7 +168,7 @@ jobs:\n             ./gradlew :vividus-tests:runStories -x testVividusInitialization \\\n                                                 -Pvividus.configuration.environments=system/mobile_app/saucelabs/ios \\\n                                                 -Pvividus.configuration.suite=system/mobile_app \\\n-                                                -Pvividus.configuration.profiles=mobile_app/ios,saucelabs/mobile_app \\\n+                                                -Pvividus.configuration.profiles=saucelabs/mobile_app,mobile_app/ios \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0ODY4Nw=="}, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTcyOTkxOnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzowOTo1N1rOHbjJGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzowOTo1N1rOHbjJGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0OTM2OQ==", "bodyText": "why is it shifted in right direction?", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498649369", "createdAt": "2020-10-02T07:09:57Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/beans/IntegerRangePropertyEditor.java", "diffHunk": "@@ -64,7 +64,8 @@ public IntegerRange convert(String source)\n             throw new IllegalArgumentException(\n                     \"Expected integers in format 'number' or 'number..number' but got: \" + value);\n         })\n-        .flatMap(List::stream)\n-        .collect(Collectors.collectingAndThen(Collectors.toCollection(LinkedHashSet::new), IntegerRange::new));\n+            .flatMap(List::stream)\n+            .collect(Collectors.collectingAndThen(Collectors.toCollection(LinkedHashSet::new), IntegerRange::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTc3NjI0OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoyOToxNFrOHbjl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoyOToxNFrOHbjl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NjczNw==", "bodyText": "addCapabilities is a bit misleading from my pov :) maybe configureCapabilities?", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498656737", "createdAt": "2020-10-02T07:29:14Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractVividusWebDriverFactory.java", "diffHunk": "@@ -31,58 +31,53 @@\n \n public abstract class AbstractVividusWebDriverFactory implements IVividusWebDriverFactory\n {\n-    private final IBddRunContext bddRunContext;\n+    private final boolean remoteExecution;\n     private final IWebDriverManagerContext webDriverManagerContext;\n+    private final IBddRunContext bddRunContext;\n+    private final  Optional<Set<DesiredCapabilitiesConfigurer>> desiredCapabilitiesConfigurers;\n \n-    public AbstractVividusWebDriverFactory(IBddRunContext bddRunContext,\n-            IWebDriverManagerContext webDriverManagerContext)\n+    public AbstractVividusWebDriverFactory(boolean remoteExecution, IWebDriverManagerContext webDriverManagerContext,\n+            IBddRunContext bddRunContext, Optional<Set<DesiredCapabilitiesConfigurer>> desiredCapabilitiesConfigurers)\n     {\n-        this.bddRunContext = bddRunContext;\n+        this.remoteExecution = remoteExecution;\n         this.webDriverManagerContext = webDriverManagerContext;\n+        this.bddRunContext = bddRunContext;\n+        this.desiredCapabilitiesConfigurers = desiredCapabilitiesConfigurers;\n     }\n \n     @Override\n     public VividusWebDriver create()\n-    {\n-        VividusWebDriver vividusWebDriver = createVividusWebDriver(bddRunContext.getRunningStory());\n-        configureVividusWebDriver(vividusWebDriver);\n-        return vividusWebDriver;\n-    }\n-\n-    protected abstract void configureVividusWebDriver(VividusWebDriver vividusWebDriver);\n-\n-    private VividusWebDriver createVividusWebDriver(RunningStory runningStory)\n     {\n         VividusWebDriver vividusWebDriver = new VividusWebDriver();\n-        setBaseDesiredCapabilities(vividusWebDriver, runningStory);\n-\n+        setDesiredCapabilities(vividusWebDriver.getDesiredCapabilities());\n+        vividusWebDriver.setWebDriver(createWebDriver(vividusWebDriver.getDesiredCapabilities()));\n+        vividusWebDriver.setRemote(remoteExecution);\n         return vividusWebDriver;\n     }\n \n-    private void setBaseDesiredCapabilities(VividusWebDriver vividusWebDriver, RunningStory runningStory)\n+    protected void setDesiredCapabilities(DesiredCapabilities desiredCapabilities)\n     {\n-        DesiredCapabilities desiredCapabilities = vividusWebDriver.getDesiredCapabilities();\n-        desiredCapabilities.merge(webDriverManagerContext.getParameter(\n-                WebDriverManagerParameter.DESIRED_CAPABILITIES));\n+        desiredCapabilitiesConfigurers.ifPresent(\n+            configurers -> configurers.forEach(configurer -> configurer.addCapabilities(desiredCapabilities)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTc4MjE2OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceConnectManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMTozM1rOHbjplw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMTozM1rOHbjplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NzY4Nw==", "bodyText": "should we really wrap IOE here?", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498657687", "createdAt": "2020-10-02T07:31:33Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceConnectManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.sauce;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import com.saucelabs.ci.sauceconnect.SauceTunnelManager;\n+\n+import org.vividus.testcontext.TestContext;\n+\n+public class SauceConnectManager implements ISauceConnectManager\n+{\n+    private static final Object KEY = SauceConnectDescriptor.class;\n+\n+    private SauceTunnelManager sauceTunnelManager;\n+    private String sauceLabsUsername;\n+    private String sauceLabsAccessKey;\n+\n+    private final Map<SauceConnectOptions, SauceConnectDescriptor> activeConnections = new HashMap<>();\n+    private TestContext testContext;\n+\n+    @Override\n+    public void start(SauceConnectOptions sauceConnectOptions)\n+    {\n+        SauceConnectDescriptor sauceConnectDescriptor = activeConnections.get(sauceConnectOptions);\n+        SauceConnectDescriptor currentConnectionDescriptor = getSauceConnectDescriptor();\n+        if (currentConnectionDescriptor == null)\n+        {\n+            try\n+            {\n+                if (sauceConnectDescriptor == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        sauceConnectDescriptor = activeConnections.get(sauceConnectOptions);\n+                        if (sauceConnectDescriptor == null)\n+                        {\n+                            sauceConnectDescriptor = new SauceConnectDescriptor(sauceConnectOptions);\n+                            activeConnections.put(sauceConnectOptions, sauceConnectDescriptor);\n+                        }\n+                    }\n+                }\n+                synchronized (sauceTunnelManager)\n+                {\n+                    sauceTunnelManager.openConnection(sauceLabsUsername, sauceLabsAccessKey,\n+                            sauceConnectDescriptor.getPort(), null, sauceConnectDescriptor.getOptions(), null,\n+                            Boolean.TRUE, null);\n+                }\n+            }\n+            catch (IOException e)\n+            {\n+                throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTgwMTExOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozODo0NFrOHbj1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozODo0NFrOHbj1Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2MDY1NQ==", "bodyText": "can't we get rid of http and use https only since many modern web sites refuse usage of not secure protorol?", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498660655", "createdAt": "2020-10-02T07:38:44Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceLabsCapabilitiesConfigurer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.sauce;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.eventbus.Subscribe;\n+\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+import org.vividus.bdd.context.IBddRunContext;\n+import org.vividus.bdd.model.RunningStory;\n+import org.vividus.selenium.DesiredCapabilitiesConfigurer;\n+import org.vividus.selenium.event.WebDriverQuitEvent;\n+import org.vividus.ui.web.configuration.WebApplicationConfiguration;\n+\n+public class SauceLabsCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n+{\n+    private static final String SAUCE_OPTIONS = \"sauce:options\";\n+    private static final int DEFAULT_HTTPS_PORT = 443;\n+\n+    private final WebApplicationConfiguration webApplicationConfiguration;\n+    private final IBddRunContext bddRunContext;\n+    private final SauceConnectManager sauceConnectManager;\n+    private boolean sauceLabsEnabled;\n+    private boolean sauceConnectEnabled;\n+    private String restUrl;\n+\n+    public SauceLabsCapabilitiesConfigurer(WebApplicationConfiguration webApplicationConfiguration,\n+            IBddRunContext bddRunContext, SauceConnectManager sauceConnectManager)\n+    {\n+        this.webApplicationConfiguration = webApplicationConfiguration;\n+        this.bddRunContext = bddRunContext;\n+        this.sauceConnectManager = sauceConnectManager;\n+    }\n+\n+    @Subscribe\n+    public void stopSauceConnect(WebDriverQuitEvent event)\n+    {\n+        sauceConnectManager.stop();\n+    }\n+\n+    @Override\n+    public void addCapabilities(DesiredCapabilities desiredCapabilities)\n+    {\n+        if (sauceLabsEnabled)\n+        {\n+            Proxy proxy = (Proxy) desiredCapabilities.getCapability(CapabilityType.PROXY);\n+            if (sauceConnectEnabled || proxy != null)\n+            {\n+                SauceConnectOptions options = createSauceConnectOptions(proxy);\n+                sauceConnectManager.start(options);\n+                addSauceOption(desiredCapabilities, \"tunnelIdentifier\", sauceConnectManager.getTunnelId());\n+                desiredCapabilities.setCapability(CapabilityType.PROXY, (Object) null);\n+            }\n+            RunningStory runningStory = bddRunContext.getRunningStory();\n+            if (runningStory != null)\n+            {\n+                addSauceOption(desiredCapabilities, \"name\", runningStory.getName());\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void addSauceOption(DesiredCapabilities desiredCapabilities, String capabilityName, Object value)\n+    {\n+        Map<String, Object> sauceOptions = (Map<String, Object>) desiredCapabilities.getCapability(SAUCE_OPTIONS);\n+        if (sauceOptions == null)\n+        {\n+            sauceOptions = new HashMap<>();\n+            desiredCapabilities.setCapability(SAUCE_OPTIONS, sauceOptions);\n+        }\n+        sauceOptions.put(capabilityName, value);\n+    }\n+\n+    private SauceConnectOptions createSauceConnectOptions(Proxy proxy)\n+    {\n+        SauceConnectOptions sauceConnectOptions = new SauceConnectOptions();\n+        sauceConnectOptions.setHost(webApplicationConfiguration.getHost());\n+        if (\"https\".equals(webApplicationConfiguration.getMainApplicationPageUrl().getScheme()))\n+        {\n+            sauceConnectOptions.setPort(DEFAULT_HTTPS_PORT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTgxMDU2OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/main/resources/spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0MjowMVrOHbj7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0MjowMVrOHbj7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2MjE2Nw==", "bodyText": "looks like this bean is not referred anywhere by its id (+ line 58)", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498662167", "createdAt": "2020-10-02T07:42:01Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/main/resources/spring.xml", "diffHunk": "@@ -47,6 +47,51 @@\n         <property name=\"waitActions\" ref=\"waitActions\" />\n     </bean>\n \n+    <bean id=\"proxy\" class=\"org.vividus.proxy.ThreadedProxy\" >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTgxMjg2OnYy", "diffSide": "RIGHT", "path": "vividus-extension-selenium/src/main/resources/spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0MjozOFrOHbj8bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzo0MjozOFrOHbj8bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2MjUxMA==", "bodyText": "key=", "url": "https://github.com/vividus-framework/vividus/pull/954#discussion_r498662510", "createdAt": "2020-10-02T07:42:38Z", "author": {"login": "uarlouski"}, "path": "vividus-extension-selenium/src/main/resources/spring.xml", "diffHunk": "@@ -80,5 +125,8 @@\n                 <constructor-arg value=\"org.vividus.bdd.steps.WebDriverSessionScope\" />\n             </bean>\n         </entry>\n+        <entry key =\"org.vividus.model.IntegerRange\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570cf41fc5fb5102698bf0056b550445333a515d"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 125, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}