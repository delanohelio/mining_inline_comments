{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDg5NzY0", "number": 683, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNTo1NFrOEGyxhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNzozN1rOEL_yIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU4NzkxOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNTo1NFrOGlztuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNTo1NFrOGlztuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5Nzc4Nw==", "bodyText": "Please add integration test", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r442297787", "createdAt": "2020-06-18T15:05:54Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -145,6 +148,62 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c696aefa88223738130d1b6c60131e0653b6741"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU5MzI0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNzoxOFrOGlzxLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNzoxOFrOGlzxLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5ODY3MQ==", "bodyText": "harEntry.getRequest() cache it please", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r442298671", "createdAt": "2020-06-18T15:07:18Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -145,6 +148,62 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarPostData postData = harEntry.getRequest().getPostData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c696aefa88223738130d1b6c60131e0653b6741"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYwOTQ3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMTowNFrOGlz7JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMTowNFrOGlz7JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMTIyMQ==", "bodyText": "don't you mind to refactor the method into something like this:\n            requestDataMap.put(\"queryMap\", queryMap(..));\n            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(..));\n            requestDataMap.put(\"requestBodyMap\", requestBodyMap(..));\n            requestDataMap.put(\"responseStatusMap\", responseStatusMap(..));", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r442301221", "createdAt": "2020-06-18T15:11:04Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -145,6 +148,62 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c696aefa88223738130d1b6c60131e0653b6741"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYxNTk1OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/test/java/org/vividus/proxy/steps/ProxyStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMjozOFrOGlz_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMjozOFrOGlz_QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjI3Mw==", "bodyText": "use Assertions.assertAll(...)\nIn the current implementation, I have to debug and compare manually to understand what is not matching", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r442302273", "createdAt": "2020-06-18T15:12:38Z", "author": {"login": "ikalinin1"}, "path": "vividus-plugin-web-app/src/test/java/org/vividus/proxy/steps/ProxyStepsTests.java", "diffHunk": "@@ -137,35 +144,96 @@ void checkHarEntryExistenceWithHttpMethodAndUrlPatternNoCalls() throws IOExcepti\n     @Test\n     void checkCaptureQueryStringFromHarEntry() throws IOException\n     {\n-        HttpMethod httpMethod = HttpMethod.POST;\n         ProxySteps spy = spy(proxySteps);\n         HarEntry harEntry = mock(HarEntry.class);\n-        doReturn(List.of(harEntry)).when(spy).checkNumberOfRequests(httpMethod, URL_PATTERN,\n+        doReturn(List.of(harEntry)).when(spy).checkNumberOfRequests(HTTP_METHOD, URL_PATTERN,\n                 ComparisonRule.EQUAL_TO, 1);\n         HarRequest harRequest = mock(HarRequest.class);\n         when(harEntry.getRequest()).thenReturn(harRequest);\n-        String key1 = \"key1\";\n-        String value1 = \"value1\";\n-        String key2 = \"key2\";\n-        String value2 = \"value2\";\n         HarQueryParam firstPair = new HarQueryParam();\n-        firstPair.setName(key1);\n-        firstPair.setValue(value1);\n+        firstPair.setName(KEY1);\n+        firstPair.setValue(VALUE1);\n         HarQueryParam secondPair = new HarQueryParam();\n-        secondPair.setName(key2);\n-        secondPair.setValue(value2);\n+        secondPair.setName(KEY2);\n+        secondPair.setValue(VALUE2);\n         when(harRequest.getQueryString())\n                 .thenReturn(List.of(firstPair, secondPair));\n         Set<VariableScope> variableScopes = Set.of(VariableScope.SCENARIO);\n-        spy.captureRequestAndSaveURLQuery(httpMethod, URL_PATTERN, variableScopes, VARIABLE_NAME);\n+        spy.captureRequestAndSaveURLQuery(HTTP_METHOD, URL_PATTERN, variableScopes, VARIABLE_NAME);\n         verify(bddVariableContext).putVariable(eq(variableScopes), eq(VARIABLE_NAME), argThat(value ->\n         {\n             Map<String, String> map = (Map<String, String>) value;\n             return map.size() == 2\n-                    && map.containsKey(key1)\n-                    && value1.equals(map.get(key1))\n-                    && map.containsKey(key2)\n-                    && value2.equals(map.get(key2));\n+                    && map.containsKey(KEY1)\n+                    && VALUE1.equals(map.get(KEY1))\n+                    && map.containsKey(KEY2)\n+                    && VALUE2.equals(map.get(KEY2));\n+        }));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    void checkCaptureRequestDataFromHarEntry() throws IOException\n+    {\n+        ProxySteps spy = spy(proxySteps);\n+        HarEntry harEntry = mock(HarEntry.class);\n+        doReturn(List.of(harEntry)).when(spy).checkNumberOfRequests(HTTP_METHOD, URL_PATTERN,\n+                ComparisonRule.EQUAL_TO, 1);\n+        HarResponse harResponse = mock(HarResponse.class);\n+        when(harEntry.getResponse()).thenReturn(harResponse);\n+        HarRequest harRequest = mock(HarRequest.class);\n+        when(harEntry.getRequest()).thenReturn(harRequest);\n+        HarQueryParam firstPair = new HarQueryParam();\n+        firstPair.setName(KEY1);\n+        firstPair.setValue(VALUE1);\n+        HarQueryParam secondPair = new HarQueryParam();\n+        secondPair.setName(KEY2);\n+        secondPair.setValue(VALUE2);\n+        when(harRequest.getQueryString())\n+                .thenReturn(List.of(firstPair, secondPair));\n+        String mimeType = \"mimeType\";\n+        String text = \"text\";\n+        String comment = \"comment\";\n+        HarPostData postData = new HarPostData();\n+        postData.setMimeType(mimeType);\n+        postData.setText(text);\n+        postData.setComment(comment);\n+        HarPostDataParam postDataParam1 = new HarPostDataParam();\n+        HarPostDataParam postDataParam2 = new HarPostDataParam();\n+        postData.setParams(List.of(postDataParam1, postDataParam2));\n+        postDataParam1.setName(KEY1);\n+        postDataParam1.setValue(VALUE1);\n+        postDataParam2.setName(KEY2);\n+        postDataParam2.setValue(VALUE2);\n+        when(harRequest.getPostData()).thenReturn(postData);\n+        when(harResponse.getStatus()).thenReturn(200);\n+        Set<VariableScope> variableScopes = Set.of(VariableScope.SCENARIO);\n+        spy.captureRequestAndSaveRequestData(HTTP_METHOD, URL_PATTERN, variableScopes, VARIABLE_NAME);\n+        verify(bddVariableContext).putVariable(eq(variableScopes), eq(VARIABLE_NAME), argThat(value ->\n+        {\n+            Map<String, Map<String, String>> map = (Map<String, Map<String, String>>) value;\n+            Map<String, String> queryMap = map.get(\"queryMap\");\n+            Map<String, String> requestBodyMap = map.get(\"requestBodyMap\");\n+            Map<String, String> requestBodyParamsMap = map.get(\"requestBodyParamsMap\");\n+            Map<String, String> responseStatusMap = map.get(\"responseStatusMap\");\n+            String status = \"status\";\n+            return map.size() == 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c696aefa88223738130d1b6c60131e0653b6741"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDEyNTQ5OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyMTozOFrOGt2NAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyMTozOFrOGt2NAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyNzE3MQ==", "bodyText": "construct Map using Map.of(...) method\ndo not use collection name as part of variable name", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450727171", "createdAt": "2020-07-07T09:21:38Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDEzMDk1OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyMzowNFrOGt2QeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyMzowNFrOGt2QeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyODA1Nw==", "bodyText": "queryMap - not clear, consider something like getQueryParameters, the same for all the methods below", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450728057", "createdAt": "2020-07-07T09:23:04Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDEzMjc5OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyMzozNVrOGt2Rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyMzozNVrOGt2Rqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyODM2Mg==", "bodyText": "variable names for end users should be simplified and made clearer", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450728362", "createdAt": "2020-07-07T09:23:35Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDEzNjA3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNDozMVrOGt2TuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0Njo1OVrOGt5F4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyODg4OA==", "bodyText": "why not to put status as plain value? we can not get more than one status so there is no reason to put it as a map", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450728888", "createdAt": "2020-07-07T09:24:31Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));\n+            bddVariableContext.putVariable(scopes, variableName, requestDataMap);\n+        }\n+    }\n+\n+    private Map<String, String> responseStatusMap(HarEntry harEntry)\n+    {\n+        int statusCode = harEntry.getResponse().getStatus();\n+        return Map.of(\"status\", String.valueOf(statusCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0MzYyOQ==", "bodyText": "We use Map<String, Map<String, String>> to save all needed information to variable, so we can't put status as plain value into this object", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450743629", "createdAt": "2020-07-07T09:48:45Z", "author": {"login": "ngrudnitsky"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));\n+            bddVariableContext.putVariable(scopes, variableName, requestDataMap);\n+        }\n+    }\n+\n+    private Map<String, String> responseStatusMap(HarEntry harEntry)\n+    {\n+        int statusCode = harEntry.getResponse().getStatus();\n+        return Map.of(\"status\", String.valueOf(statusCode));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyODg4OA=="}, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NDQ5OA==", "bodyText": "Map<String, Object> ?", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450774498", "createdAt": "2020-07-07T10:46:59Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));\n+            bddVariableContext.putVariable(scopes, variableName, requestDataMap);\n+        }\n+    }\n+\n+    private Map<String, String> responseStatusMap(HarEntry harEntry)\n+    {\n+        int statusCode = harEntry.getResponse().getStatus();\n+        return Map.of(\"status\", String.valueOf(statusCode));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyODg4OA=="}, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDEzNzkyOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNTowMFrOGt2U6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNTowMFrOGt2U6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyOTE5Mw==", "bodyText": "use map.of(...)", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450729193", "createdAt": "2020-07-07T09:25:00Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));\n+            bddVariableContext.putVariable(scopes, variableName, requestDataMap);\n+        }\n+    }\n+\n+    private Map<String, String> responseStatusMap(HarEntry harEntry)\n+    {\n+        int statusCode = harEntry.getResponse().getStatus();\n+        return Map.of(\"status\", String.valueOf(statusCode));\n+    }\n+\n+    private Map<String, String> requestBodyMap(HarPostData postData)\n+    {\n+        Map<String, String> requestBodyMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDEzOTk5OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNTozMVrOGt2WKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNTozMVrOGt2WKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyOTUxNA==", "bodyText": "not aligned", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450729514", "createdAt": "2020-07-07T09:25:31Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));\n+            bddVariableContext.putVariable(scopes, variableName, requestDataMap);\n+        }\n+    }\n+\n+    private Map<String, String> responseStatusMap(HarEntry harEntry)\n+    {\n+        int statusCode = harEntry.getResponse().getStatus();\n+        return Map.of(\"status\", String.valueOf(statusCode));\n+    }\n+\n+    private Map<String, String> requestBodyMap(HarPostData postData)\n+    {\n+        Map<String, String> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(\"mimeType\", postData.getMimeType());\n+        requestBodyMap.put(\"text\", postData.getText());\n+        requestBodyMap.put(\"comment\", postData.getComment());\n+        return requestBodyMap;\n+    }\n+\n+    private Map<String, String> requestBodyParamsMap(HarPostData postData)\n+    {\n+        return postData.getParams()\n+                        .stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDE0MDc3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNTo0MVrOGt2Wow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNTo0MVrOGt2Wow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyOTYzNQ==", "bodyText": "not aligned", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450729635", "createdAt": "2020-07-07T09:25:41Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/main/java/org/vividus/proxy/steps/ProxySteps.java", "diffHunk": "@@ -138,13 +142,84 @@ public void captureRequestAndSaveURLQuery(HttpMethod httpMethod, String urlPatte\n         if (harEntries.size() == 1)\n         {\n             HarEntry harEntry = harEntries.get(0);\n-            Map<String, String> queryMap = harEntry.getRequest().getQueryString()\n-                    .stream()\n-                    .collect(Collectors.toMap(HarQueryParam::getName, HarQueryParam::getValue));\n-            bddVariableContext.putVariable(scopes, variableName, queryMap);\n+            bddVariableContext.putVariable(scopes, variableName, queryMap(harEntry.getRequest()));\n         }\n     }\n \n+    /**\n+     * Saves the query string, body from request with given URL-pattern and response status from response\n+     * into the variable with specified name and scopes.\n+     * <p>\n+     * This step requires proxy to be turned on.\n+     * It can be done via setting properties or switching on <b>@proxy</b> metatag inside the story file.\n+     * Step gets proxies log, extract from contained requests URLs and match them with URL-pattern\n+     * If there is one entry, it saves the query string from request as Map of keys and values\n+     * into the variable with specified name and scopes.\n+     * If there weren't any calls or more than one matching requirements, HAR file with all\n+     * calls will be attached to report.\n+     * </p>\n+     * @param httpMethod HTTP method to filter by\n+     * @param urlPattern The string value of URL-pattern to filter by\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A variable name\n+     * @throws IOException If any error happens during operation\n+     */\n+    @When(\"I capture HTTP $httpMethod request with URL pattern `$urlPattern` and save request data to $scopes \"\n+            + \"variable `$variableName`\")\n+    public void captureRequestAndSaveRequestData(HttpMethod httpMethod, String urlPattern, Set<VariableScope> scopes,\n+            String variableName) throws IOException\n+    {\n+        List<HarEntry> harEntries = checkNumberOfRequests(httpMethod, urlPattern, ComparisonRule.EQUAL_TO, 1);\n+        if (harEntries.size() == 1)\n+        {\n+            HarEntry harEntry = harEntries.get(0);\n+            HarRequest request = harEntry.getRequest();\n+            HarPostData postData = request.getPostData();\n+            Map<String, Map<String, String>> requestDataMap = new HashMap<>();\n+            requestDataMap.put(\"queryMap\", queryMap(request));\n+            requestDataMap.put(\"requestBodyParamsMap\", requestBodyParamsMap(postData));\n+            requestDataMap.put(\"requestBodyMap\", requestBodyMap(postData));\n+            requestDataMap.put(\"responseStatusMap\", responseStatusMap(harEntry));\n+            bddVariableContext.putVariable(scopes, variableName, requestDataMap);\n+        }\n+    }\n+\n+    private Map<String, String> responseStatusMap(HarEntry harEntry)\n+    {\n+        int statusCode = harEntry.getResponse().getStatus();\n+        return Map.of(\"status\", String.valueOf(statusCode));\n+    }\n+\n+    private Map<String, String> requestBodyMap(HarPostData postData)\n+    {\n+        Map<String, String> requestBodyMap = new HashMap<>();\n+        requestBodyMap.put(\"mimeType\", postData.getMimeType());\n+        requestBodyMap.put(\"text\", postData.getText());\n+        requestBodyMap.put(\"comment\", postData.getComment());\n+        return requestBodyMap;\n+    }\n+\n+    private Map<String, String> requestBodyParamsMap(HarPostData postData)\n+    {\n+        return postData.getParams()\n+                        .stream()\n+                        .collect(Collectors.toMap(HarPostDataParam::getName, HarPostDataParam::getValue));\n+    }\n+\n+    private Map<String, String> queryMap(HarRequest request)\n+    {\n+        return request.getQueryString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDE0ODE4OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-web-app/src/test/java/org/vividus/proxy/steps/ProxyStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNzozN1rOGt2bYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToyNzozN1rOGt2bYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczMDg1MQ==", "bodyText": "constructions of HarPostDataParam, HarQueryParam objects can be moved into separate method, please reuse similar logic", "url": "https://github.com/vividus-framework/vividus/pull/683#discussion_r450730851", "createdAt": "2020-07-07T09:27:37Z", "author": {"login": "uarlouski"}, "path": "vividus-plugin-web-app/src/test/java/org/vividus/proxy/steps/ProxyStepsTests.java", "diffHunk": "@@ -137,35 +145,89 @@ void checkHarEntryExistenceWithHttpMethodAndUrlPatternNoCalls() throws IOExcepti\n     @Test\n     void checkCaptureQueryStringFromHarEntry() throws IOException\n     {\n-        HttpMethod httpMethod = HttpMethod.POST;\n         ProxySteps spy = spy(proxySteps);\n         HarEntry harEntry = mock(HarEntry.class);\n-        doReturn(List.of(harEntry)).when(spy).checkNumberOfRequests(httpMethod, URL_PATTERN,\n+        doReturn(List.of(harEntry)).when(spy).checkNumberOfRequests(HTTP_METHOD, URL_PATTERN,\n                 ComparisonRule.EQUAL_TO, 1);\n         HarRequest harRequest = mock(HarRequest.class);\n         when(harEntry.getRequest()).thenReturn(harRequest);\n-        String key1 = \"key1\";\n-        String value1 = \"value1\";\n-        String key2 = \"key2\";\n-        String value2 = \"value2\";\n         HarQueryParam firstPair = new HarQueryParam();\n-        firstPair.setName(key1);\n-        firstPair.setValue(value1);\n+        firstPair.setName(KEY1);\n+        firstPair.setValue(VALUE1);\n         HarQueryParam secondPair = new HarQueryParam();\n-        secondPair.setName(key2);\n-        secondPair.setValue(value2);\n+        secondPair.setName(KEY2);\n+        secondPair.setValue(VALUE2);\n         when(harRequest.getQueryString())\n                 .thenReturn(List.of(firstPair, secondPair));\n         Set<VariableScope> variableScopes = Set.of(VariableScope.SCENARIO);\n-        spy.captureRequestAndSaveURLQuery(httpMethod, URL_PATTERN, variableScopes, VARIABLE_NAME);\n+        spy.captureRequestAndSaveURLQuery(HTTP_METHOD, URL_PATTERN, variableScopes, VARIABLE_NAME);\n         verify(bddVariableContext).putVariable(eq(variableScopes), eq(VARIABLE_NAME), argThat(value ->\n         {\n             Map<String, String> map = (Map<String, String>) value;\n             return map.size() == 2\n-                    && map.containsKey(key1)\n-                    && value1.equals(map.get(key1))\n-                    && map.containsKey(key2)\n-                    && value2.equals(map.get(key2));\n+                    && map.containsKey(KEY1)\n+                    && VALUE1.equals(map.get(KEY1))\n+                    && map.containsKey(KEY2)\n+                    && VALUE2.equals(map.get(KEY2));\n+        }));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    void checkCaptureRequestDataFromHarEntry() throws IOException\n+    {\n+        ProxySteps spy = spy(proxySteps);\n+        HarEntry harEntry = mock(HarEntry.class);\n+        doReturn(List.of(harEntry)).when(spy).checkNumberOfRequests(HTTP_METHOD, URL_PATTERN,\n+                ComparisonRule.EQUAL_TO, 1);\n+        HarResponse harResponse = mock(HarResponse.class);\n+        when(harEntry.getResponse()).thenReturn(harResponse);\n+        HarRequest harRequest = mock(HarRequest.class);\n+        when(harEntry.getRequest()).thenReturn(harRequest);\n+        HarQueryParam firstPair = new HarQueryParam();\n+        firstPair.setName(KEY1);\n+        firstPair.setValue(VALUE1);\n+        HarQueryParam secondPair = new HarQueryParam();\n+        secondPair.setName(KEY2);\n+        secondPair.setValue(VALUE2);\n+        when(harRequest.getQueryString())\n+                .thenReturn(List.of(firstPair, secondPair));\n+        String mimeType = \"mimeType\";\n+        String text = \"text\";\n+        String comment = \"comment\";\n+        HarPostData postData = new HarPostData();\n+        postData.setMimeType(mimeType);\n+        postData.setText(text);\n+        postData.setComment(comment);\n+        HarPostDataParam postDataParam1 = new HarPostDataParam();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d62818d41482839b953b765626d51d4ec00214a"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 370, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}