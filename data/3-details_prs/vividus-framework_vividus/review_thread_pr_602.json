{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTUyNjY1", "number": 602, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MDoxMFrOD-4H_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjozNToxM1rOD_9BDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjU3ODUyOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MDoxMFrOGZPoVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MDoxMFrOGZPoVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzY2OA==", "bodyText": "do not use any to verify expected successful invocations, use eq, argThat and etc.", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429123668", "createdAt": "2020-05-22T08:50:10Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +156,14 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponse() throws IOException\n+    {\n+        httpRequestSteps.waitForResponse(RESPONSE_CODE, HttpMethod.GET, URL, DURATION, RETRY_TIMES);\n+        verify(httpRequestExecutor).executeHttpRequest(eq(HttpMethod.GET), eq(URL), eq(Optional.empty()),\n+                any(), any(WaitMode.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjU4MTY4OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MToxNVrOGZPqaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MToxNVrOGZPqaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNDIwMw==", "bodyText": "constants used once could be inlined", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429124203", "createdAt": "2020-05-22T08:51:15Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -47,6 +51,9 @@\n     private static final String RELATIVE_URL = \"/relativeUrl\";\n     private static final String CONTENT = \"content\";\n     private static final String CR_LF = \"\\r\\n\";\n+    private static final Duration DURATION = Duration.ofSeconds(10);\n+    private static final int RESPONSE_CODE = 200;\n+    private static final int RETRY_TIMES = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjU4MzE4OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MTo0OVrOGZPrbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MTo0OVrOGZPrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNDQ2Mg==", "bodyText": "waitForResponse -> waitForResponseCode", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429124462", "createdAt": "2020-05-22T08:51:49Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n+     * This step can use the request body that was set before.\n+     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n+     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n+     *                     <ul>\n+     *                     <li>GET</li>\n+     *                     <li>HEAD</li>\n+     *                     <li>POST</li>\n+     *                     <li>PUT</li>\n+     *                     <li>OPTIONS</li>\n+     *                     <li>DELETE</li>\n+     *                     <li>TRACE</li>\n+     *                     <li>PATCH</li>\n+     *                     </ul>\n+     * @param url          for example https://www.vividus.org/sitemap.xml\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n+            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")\n+    public void waitForResponse(int responseCode, HttpMethod httpMethod, String url, Duration duration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjU5MDQ2OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1NDozMlrOGZPwFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1NDozMlrOGZPwFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY1NQ==", "bodyText": "and stores HTTP response into Scenario-level variable", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429125655", "createdAt": "2020-05-22T08:54:32Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYxNTM0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowMjo1NlrOGZP_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowNToyMFrOGZQD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTYyNA==", "bodyText": "@When(\"I wait for `$responseCode` response code for HTTP $httpMethod request to resource \"\n           + \"`$resourceUrl` for `$duration` duration retrying $retryTimes times\")", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429129624", "createdAt": "2020-05-22T09:02:56Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n+     * This step can use the request body that was set before.\n+     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n+     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n+     *                     <ul>\n+     *                     <li>GET</li>\n+     *                     <li>HEAD</li>\n+     *                     <li>POST</li>\n+     *                     <li>PUT</li>\n+     *                     <li>OPTIONS</li>\n+     *                     <li>DELETE</li>\n+     *                     <li>TRACE</li>\n+     *                     <li>PATCH</li>\n+     *                     </ul>\n+     * @param url          for example https://www.vividus.org/sitemap.xml\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n+            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMDczOQ==", "bodyText": "Also what about making this step a bit more universal:\n@When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n        + \"$stepsToExecute\")\n\n?", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429130739", "createdAt": "2020-05-22T09:05:20Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +204,39 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Step sends HTTP request for the given <b>url</b> and waits for a specified amount of time\n+     * until HTTP response code is equal to what is expected and stores HTTP response into Scenario-level variable.<br>\n+     * This step can use the request body that was set before.\n+     * Request body shouldn't be set for methods that can't contain body (GET, HEAD, OPTIONS, TRACE),\n+     * and should be set for methods that must contain body (PATCH, POST, PUT).\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param httpMethod   HTTP method type. Parameter accepts the following HTTP methods:\n+     *                     <ul>\n+     *                     <li>GET</li>\n+     *                     <li>HEAD</li>\n+     *                     <li>POST</li>\n+     *                     <li>PUT</li>\n+     *                     <li>OPTIONS</li>\n+     *                     <li>DELETE</li>\n+     *                     <li>TRACE</li>\n+     *                     <li>PATCH</li>\n+     *                     </ul>\n+     * @param url          for example https://www.vividus.org/sitemap.xml\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @When(\"When I wait for '$responseCode' response code for HTTP $httpMethod request for a resource \"\n+            + \"with the URL '$url' for '$duration' duration retrying $retryTimes times\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTYyNA=="}, "originalCommit": {"oid": "6f657f4c29bd69f4b9a06fee2b97158fbafb3ca9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjczODE2OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyNTo1MFrOGZ18FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyNTo1MFrOGZ18FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MTMxNw==", "bodyText": "the variable can be inlined", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429751317", "createdAt": "2020-05-25T06:25:50Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +207,42 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @param stepsToExecute Steps to execute at each wait iteration\n+     */\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n+    {\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc0MDExOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyNjo1MlrOGZ19Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyNjo1MlrOGZ19Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MTYxNQ==", "bodyText": "in general the full method can be like:\nreturn response != null && response.getStatusCode() == expectedResponseCode;", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429751615", "createdAt": "2020-05-25T06:26:52Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpRequestSteps.java", "diffHunk": "@@ -202,6 +207,42 @@ public void setCustomRequestConfig(ExamplesTable configItems) throws ReflectiveO\n         httpTestContext.putRequestConfig(requestConfigBuilder.build());\n     }\n \n+    /**\n+     * Waits for a specified amount of time until HTTP response code is equal to what is expected.\n+     * <p>\n+     * <b>Actions performed:</b>\n+     * </p>\n+     * <ul>\n+     * <li>Execute sub-steps</li>\n+     * <li>Check if HTTP response code is equal to what is expected</li>\n+     * </ul>\n+     *\n+     * @param responseCode for example 200, 404\n+     * @param duration     Time duration to wait\n+     * @param retryTimes   How many times request will be retried; duration/retryTimes=timeout between requests\n+     * @param stepsToExecute Steps to execute at each wait iteration\n+     */\n+    @When(\"I wait for response code `$responseCode` for `$duration` duration retrying $retryTimes times\"\n+            + \"$stepsToExecute\")\n+    public void waitForResponseCode(int responseCode, Duration duration, int retryTimes,\n+            SubSteps stepsToExecute)\n+    {\n+        new Waiter(new WaitMode(duration, retryTimes)).wait(\n+                () -> stepsToExecute.execute(Optional.empty()),\n+                () -> isResponseCodeIsEqualToExpected(httpTestContext.getResponse(), responseCode)\n+        );\n+    }\n+\n+    private boolean isResponseCodeIsEqualToExpected(HttpResponse response, int expectedResponseCode)\n+    {\n+        if (response == null)\n+        {\n+            return false;\n+        }\n+        int statusCode = response.getStatusCode();\n+        return statusCode == expectedResponseCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc0MTc3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyNzozOVrOGZ1-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoyNzozOVrOGZ1-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MTg1Ng==", "bodyText": "this peace of code can be put on the previous line", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429751856", "createdAt": "2020-05-25T06:27:39Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +155,18 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        int retryTimes = 5;\n+        int responseCode = 200;\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse())\n+                .thenReturn(new HttpResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc3MTI3OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MjowMVrOGZ2P_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MjowMVrOGZ2P_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NjQxNQ==", "bodyText": "missing tests for cases:\n\nresponse == null\nresponse.code == expected response code", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429756415", "createdAt": "2020-05-25T06:42:01Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +155,18 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        int retryTimes = 5;\n+        int responseCode = 200;\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse())\n+                .thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(responseCode, Duration.ofSeconds(10), retryTimes, stepsToExecute);\n+        verify(stepsToExecute, times(retryTimes)).execute(Optional.empty());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62e2033f7ffa8480d4f6a8b26b74cc1d3e89d81"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMxMDQ0OnYy", "diffSide": "RIGHT", "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0NTo0MFrOGZ7e6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0NTo0MFrOGZ7e6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MjE1Mw==", "bodyText": "Please add an assertion Then the response code is equal to '200'", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429842153", "createdAt": "2020-05-25T09:45:40Z", "author": {"login": "Yauhenda"}, "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "diffHunk": "@@ -25,3 +25,8 @@ Then a JSON element by the JSON path '$.cookies' is equal to '{\"vividus-cookie\":\n Scenario: Verify HTTP cookies are cleared\n When I send HTTP GET to the relative URL '/cookies'\n Then a JSON element by the JSON path '$.cookies' is equal to '{}'\n+\n+Scenario: I wait for response code $responseCode for $duration duration retrying $retryTimes times $stepsToExecute\n+When I wait for response code 200 for PT10S duration retrying 10 times\n+|step                                                                                           |\n+|When I issue a HTTP GET request for a resource with the URL '${vividus-test-site-url}/api/delayed-response'|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMyODI1OnYy", "diffSide": "RIGHT", "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo1MToyNVrOGZ7p0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo1MToyNVrOGZ7p0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0NDk0NQ==", "bodyText": "Please align the |  sign to the same indent  as next line to make code more beautiful", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429844945", "createdAt": "2020-05-25T09:51:25Z", "author": {"login": "Yauhenda"}, "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "diffHunk": "@@ -25,3 +25,8 @@ Then a JSON element by the JSON path '$.cookies' is equal to '{\"vividus-cookie\":\n Scenario: Verify HTTP cookies are cleared\n When I send HTTP GET to the relative URL '/cookies'\n Then a JSON element by the JSON path '$.cookies' is equal to '{}'\n+\n+Scenario: I wait for response code $responseCode for $duration duration retrying $retryTimes times $stepsToExecute\n+When I wait for response code 200 for PT10S duration retrying 10 times\n+|step                                                                                           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde250444f6aa30dc016427dfd3921bcc3fdd0b0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzU1NDkyOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyMDowMlrOGZ92qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyMDowMlrOGZ92qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTAwMA==", "bodyText": "this test and the previous one can be combined and data-driven approach can be applied: https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-MethodSource", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429881000", "createdAt": "2020-05-25T11:20:02Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +157,35 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseIsNull()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(null);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db78ae6904f263ef330ea60183962cfb1ce722b0"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzU1OTM0OnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyMTo0MFrOGZ95KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyMTo0MFrOGZ95KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MTY0MQ==", "bodyText": "decrease duration and number of retries to some minimal value (10 seconds - too much for unit test)", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429881641", "createdAt": "2020-05-25T11:21:40Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +157,35 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db78ae6904f263ef330ea60183962cfb1ce722b0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzU2NzQxOnYy", "diffSide": "RIGHT", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyNDo1OFrOGZ9-IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyNDo1OFrOGZ9-IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MjkxMg==", "bodyText": "what about emulation of real behavior:\n\n1 attempt - return http response with any code, but not 200\n2 attempt - return http response with code 200\n?", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r429882912", "createdAt": "2020-05-25T11:24:58Z", "author": {"login": "valfirst"}, "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpRequestStepsTests.java", "diffHunk": "@@ -149,6 +157,35 @@ void testSetCustomRequestConfigNoField()\n         assertEquals(\"nonExistentField\", exception.getMessage());\n     }\n \n+    @Test\n+    void testWaitForResponseCode()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(new HttpResponse());\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseIsNull()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        when(httpTestContext.getResponse()).thenReturn(null);\n+        httpRequestSteps.waitForResponseCode(RESPONSE_CODE, Duration.ofSeconds(10), RETRY_TIMES, stepsToExecute);\n+        verify(stepsToExecute, times(RETRY_TIMES)).execute(Optional.empty());\n+    }\n+\n+    @Test\n+    void testWaitForResponseCodeWhenResponseCodeIsEqualToExpected()\n+    {\n+        SubSteps stepsToExecute = mock(SubSteps.class);\n+        HttpResponse httpResponse = new HttpResponse();\n+        httpResponse.setStatusCode(200);\n+        when(httpTestContext.getResponse()).thenReturn(httpResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db78ae6904f263ef330ea60183962cfb1ce722b0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjI0MDQzOnYy", "diffSide": "RIGHT", "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozNDo0MlrOGarNaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozNDo0MlrOGarNaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNDEwNA==", "bodyText": "this test fails", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r430624104", "createdAt": "2020-05-26T18:34:42Z", "author": {"login": "valfirst"}, "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "diffHunk": "@@ -25,3 +25,9 @@ Then a JSON element by the JSON path '$.cookies' is equal to '{\"vividus-cookie\":\n Scenario: Verify HTTP cookies are cleared\n When I send HTTP GET to the relative URL '/cookies'\n Then a JSON element by the JSON path '$.cookies' is equal to '{}'\n+\n+Scenario: I wait for response code $responseCode for $duration duration retrying $retryTimes times $stepsToExecute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b078c1f7a7e22297856fd0df1bb480b8dd8469e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzg2NTczOnYy", "diffSide": "RIGHT", "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjozNToxM1rOGa7Q0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjozNToxM1rOGa7Q0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4NzEyMA==", "bodyText": "UUID should be generated at runtime, if hardcoded one is used and tests are triggered from several branches, there is a risk of collision\nVividus expression will help to generate the value: #{generate(Internet.uuid)}", "url": "https://github.com/vividus-framework/vividus/pull/602#discussion_r430887120", "createdAt": "2020-05-27T06:35:13Z", "author": {"login": "valfirst"}, "path": "vividus-tests/src/main/resources/story/integration/HttpRequest.story", "diffHunk": "@@ -25,3 +25,9 @@ Then a JSON element by the JSON path '$.cookies' is equal to '{\"vividus-cookie\":\n Scenario: Verify HTTP cookies are cleared\n When I send HTTP GET to the relative URL '/cookies'\n Then a JSON element by the JSON path '$.cookies' is equal to '{}'\n+\n+Scenario: I wait for response code $responseCode for $duration duration retrying $retryTimes times $stepsToExecute\n+When I wait for response code `200` for `PT10S` duration retrying 10 times\n+|step                                                                                                                                                     |\n+|When I issue a HTTP GET request for a resource with the URL '${vividus-test-site-url}/api/delayed-response?clientId=de2f4058-1a72-40dc-a6c7-ad37c6c07249'|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4fc10ff6133b038f52ac3af232d80f957598a"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 334, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}