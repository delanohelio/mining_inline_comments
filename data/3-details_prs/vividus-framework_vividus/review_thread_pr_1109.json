{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NTgzNzU0", "number": 1109, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzowNVrOE3WDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozNjozOVrOFAOHvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4Mzk3OnYy", "diffSide": "RIGHT", "path": "vividus-facade-jira/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzowNVrOHwoqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzowNVrOHwoqUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTg4OA==", "bodyText": "Vividus facade jira -> Vividus facade for Jira", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520759888", "createdAt": "2020-11-10T17:57:05Z", "author": {"login": "valfirst"}, "path": "vividus-facade-jira/build.gradle", "diffHunk": "@@ -0,0 +1,14 @@\n+project.description = 'Vividus facade jira'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY4NTMzOnYy", "diffSide": "RIGHT", "path": "vividus-facade-jira/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzoyNVrOHworIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1NzoyNVrOHworIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDA5Ng==", "bodyText": "I think it can be removed", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520760096", "createdAt": "2020-11-10T17:57:25Z", "author": {"login": "valfirst"}, "path": "vividus-facade-jira/build.gradle", "diffHunk": "@@ -0,0 +1,14 @@\n+project.description = 'Vividus facade jira'\n+\n+dependencies {\n+    implementation project(':vividus-http-client')\n+    implementation project(':vividus-util')\n+\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+\n+    testImplementation platform(group: 'org.junit', name: 'junit-bom', version: versions.junit)\n+    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter')\n+    testImplementation(group: 'org.mockito', name: 'mockito-core', version: versions.mockito)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcwODc1OnYy", "diffSide": "RIGHT", "path": "vividus-facade-jira/src/main/resources/org/vividus/jira/spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowMzoyM1rOHwo54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowMzoyM1rOHwo54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2Mzg3NQ==", "bodyText": "you can use constructor-based dependency injection, and this id won't be needed", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520763875", "createdAt": "2020-11-10T18:03:23Z", "author": {"login": "valfirst"}, "path": "vividus-facade-jira/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -6,16 +6,16 @@\n        default-lazy-init=\"true\">\n \n     <bean id=\"caching-credentials\" class=\"org.vividus.http.context.CachingCredentialsHttpContextFactory\" >\n-        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n-        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n-        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.password}\"/>\n     </bean>\n \n     <bean id=\"noop\" class=\"org.vividus.http.context.NoopHttpContextFactory\" />\n \n-    <bean class=\"org.vividus.jira.JiraFacade\" />\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcwOTA3OnYy", "diffSide": "RIGHT", "path": "vividus-facade-jira/src/main/resources/org/vividus/jira/spring.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowMzoyOFrOHwo6IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTowMjoxNlrOHx-6Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MzkzNw==", "bodyText": "you can use constructor-based dependency injection, and this id won't be needed", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520763937", "createdAt": "2020-11-10T18:03:28Z", "author": {"login": "valfirst"}, "path": "vividus-facade-jira/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -6,16 +6,16 @@\n        default-lazy-init=\"true\">\n \n     <bean id=\"caching-credentials\" class=\"org.vividus.http.context.CachingCredentialsHttpContextFactory\" >\n-        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n-        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n-        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.password}\"/>\n     </bean>\n \n     <bean id=\"noop\" class=\"org.vividus.http.context.NoopHttpContextFactory\" />\n \n-    <bean class=\"org.vividus.jira.JiraFacade\" />\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />\n \n-    <bean class=\"org.vividus.jira.JiraClient\">\n+    <bean id=\"jiraClient\" class=\"org.vividus.jira.JiraClient\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3Mjk2Ng==", "bodyText": "not fixed?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522172966", "createdAt": "2020-11-12T15:02:16Z", "author": {"login": "valfirst"}, "path": "vividus-facade-jira/src/main/resources/org/vividus/jira/spring.xml", "diffHunk": "@@ -6,16 +6,16 @@\n        default-lazy-init=\"true\">\n \n     <bean id=\"caching-credentials\" class=\"org.vividus.http.context.CachingCredentialsHttpContextFactory\" >\n-        <constructor-arg index=\"0\" value=\"${jira.username}\"/>\n-        <constructor-arg index=\"1\" value=\"${jira.password}\"/>\n-        <constructor-arg index=\"2\" value=\"${jira.endpoint}\"/>\n+        <constructor-arg index=\"0\" value=\"${jira.endpoint}\"/>\n+        <constructor-arg index=\"1\" value=\"${jira.username}\"/>\n+        <constructor-arg index=\"2\" value=\"${jira.password}\"/>\n     </bean>\n \n     <bean id=\"noop\" class=\"org.vividus.http.context.NoopHttpContextFactory\" />\n \n-    <bean class=\"org.vividus.jira.JiraFacade\" />\n+    <bean id=\"jiraFacade\" class=\"org.vividus.jira.JiraFacade\" />\n \n-    <bean class=\"org.vividus.jira.JiraClient\">\n+    <bean id=\"jiraClient\" class=\"org.vividus.jira.JiraClient\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MzkzNw=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcxMzU3OnYy", "diffSide": "RIGHT", "path": "vividus-facade-jira/src/test/java/org/vividus/jira/JiraFacadeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNDozOFrOHwo9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNDozOFrOHwo9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NDY3Mw==", "bodyText": "what about testing versions field of Project?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520764673", "createdAt": "2020-11-10T18:04:38Z", "author": {"login": "valfirst"}, "path": "vividus-facade-jira/src/test/java/org/vividus/jira/JiraFacadeTests.java", "diffHunk": "@@ -79,4 +81,20 @@ void shouldReturnIssueStatue() throws IOException\n                 .thenReturn(\"{\\\"fields\\\":{\\\"status\\\": {\\\"name\\\" : \\\"Open\\\"}}}\");\n         assertEquals(\"Open\", jiraFacade.getIssueStatus(ISSUE_ID));\n     }\n+\n+    @Test\n+    void shouldGetIssue() throws IOException\n+    {\n+        when(jiraClient.executeGet(ISSUE_ENDPOINT + ISSUE_ID)).thenReturn(\"{\\\"id\\\":\\\"001\\\"}\");\n+        JiraEntity issue = jiraFacade.getIssue(ISSUE_ID);\n+        assertEquals(\"001\", issue.getId());\n+    }\n+\n+    @Test\n+    void shouldGetProject() throws IOException\n+    {\n+        when(jiraClient.executeGet(\"/rest/api/latest/project/TEST\")).thenReturn(\"{\\\"id\\\":\\\"002\\\"}\");\n+        Project project = jiraFacade.getProject(\"TEST\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcxNzI0OnYy", "diffSide": "LEFT", "path": "vividus-to-xray-exporter/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNTozNlrOHwo_Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNTozNlrOHwo_Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NTI1OA==", "bodyText": "why is Log4J removed?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520765258", "createdAt": "2020-11-10T18:05:36Z", "author": {"login": "valfirst"}, "path": "vividus-to-xray-exporter/build.gradle", "diffHunk": "@@ -20,25 +20,20 @@ configurations.all {\n }\n \n dependencies {\n-    implementation project(':vividus-http-client')\n     implementation project(':vividus-util')\n     implementation project(':vividus-bdd-engine')\n+    implementation project(':vividus-facade-jira')\n     implementation(group: 'org.springframework.boot', name: 'spring-boot-starter')\n     implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-validation')\n \n     implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n-    implementation platform(group: 'org.apache.logging.log4j', name: 'log4j-bom', version: '2.13.3')\n-    implementation(group: 'org.apache.logging.log4j', name: 'log4j-api')\n-    implementation(group: 'org.apache.logging.log4j', name: 'log4j-core')\n-    implementation(group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyMDg4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNjozOVrOHwpBlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNjozOVrOHwpBlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NTg0NA==", "bodyText": "2.3.5.RELEASE", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520765844", "createdAt": "2020-11-10T18:06:39Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.3.RELEASE')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyMTY0OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNjo1M1rOHwpCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNjo1M1rOHwpCEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NTk2OA==", "bodyText": "duplicate entry", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520765968", "createdAt": "2020-11-10T18:06:53Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.3.RELEASE')\n+    }\n+}\n+apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin\n+apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin\n+\n+project.description = 'Vividus to Zephyr exporter'\n+\n+dependencies {\n+    implementation project(':vividus-util')\n+    implementation project(':vividus-facade-jira')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-validation')\n+\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDcyMjU0OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzowOFrOHwpCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNzowOFrOHwpCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NjExNQ==", "bodyText": "I think it can be removed", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520766115", "createdAt": "2020-11-10T18:07:08Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.3.RELEASE')\n+    }\n+}\n+apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin\n+apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin\n+\n+project.description = 'Vividus to Zephyr exporter'\n+\n+dependencies {\n+    implementation project(':vividus-util')\n+    implementation project(':vividus-facade-jira')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-validation')\n+\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+    implementation(group: 'com.google.guava', name: 'guava', version: versions.guava)\n+    implementation(group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3)\n+\n+    testImplementation platform(group: 'org.junit', name: 'junit-bom', version: versions.junit)\n+    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter')\n+    testImplementation(group: 'org.hamcrest', name: 'hamcrest', version: versions.hamcrest)\n+    testImplementation(group: 'org.mockito', name: 'mockito-core', version: versions.mockito)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDczNTgzOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDozNFrOHwpKlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDozNFrOHwpKlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODE1MQ==", "bodyText": "used once? can be inlined", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520768151", "createdAt": "2020-11-10T18:10:34Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+    private static final String CREATE_EXECUTION_ENDPOINT = ZAPI_ENDPOINT + \"execution/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDczNjA3OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDo0MFrOHwpKwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMDo0MFrOHwpKwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODE5Mg==", "bodyText": "used once? can be inlined", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520768192", "createdAt": "2020-11-10T18:10:40Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+    private static final String CREATE_EXECUTION_ENDPOINT = ZAPI_ENDPOINT + \"execution/\";\n+    private static final String UPDATE_EXECUTION_STATUS_ENDPOINT = ZAPI_ENDPOINT + \"execution/%s/execute\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc0MzQ4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMjo0NFrOHwpPaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0MDo0MlrOHyAutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTM4NQ==", "bodyText": "do you really need a loop here? can't you use json path to find the needed value?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520769385", "createdAt": "2020-11-10T18:12:44Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+    private static final String CREATE_EXECUTION_ENDPOINT = ZAPI_ENDPOINT + \"execution/\";\n+    private static final String UPDATE_EXECUTION_STATUS_ENDPOINT = ZAPI_ENDPOINT + \"execution/%s/execute\";\n+\n+    private static final String FOLDER_ID_JSON_PATH = \"$.[?(@.folderName=='%s')].folderId\";\n+    private static final String EXECUTION_ID_JSON_PATH = \"$..id\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrConfiguration zephyrConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient client, ZephyrConfiguration zephyrConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = client;\n+        this.zephyrConfiguration = zephyrConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(CREATE_EXECUTION_ENDPOINT, execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, EXECUTION_ID_JSON_PATH);\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(UPDATE_EXECUTION_STATUS_ENDPOINT, executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        notBlank(zephyrConfiguration.getProjectKey(), \"Property 'zephyr.project-key=' should not be empty\");\n+        notBlank(zephyrConfiguration.getVersionName(), \"Property 'zephyr.version-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getCycleName(), \"Property 'zephyr.cycle-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getFolderName(), \"Property 'zephyr.folder-name=' should not be empty\");\n+\n+        Project project = jiraFacade.getProject(zephyrConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(\n+            v -> zephyrConfiguration.getVersionName().equals(v.getName())).findFirst();\n+        isTrue(version.isPresent(), \"Version with name '%s' does not exist\", zephyrConfiguration.getVersionName());\n+        return version.get().getId();\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMzExNw==", "bodyText": "I didn't find ability to write json path which extract parent node by condition for child.\nFor example: by name need to get id.\n{ \"7502\":{ \"versionName\":\"Release 1\", \"projectKey\":\"TEST\", \"name\":\"Sprint 1\" }, \"7592\":{ \"versionName\":\"Release 2\", \"projectKey\":\"TEST\", \"name\":\"Sprint 2\" }, \"recordsCount\":2 }", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r521923117", "createdAt": "2020-11-12T08:29:37Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+    private static final String CREATE_EXECUTION_ENDPOINT = ZAPI_ENDPOINT + \"execution/\";\n+    private static final String UPDATE_EXECUTION_STATUS_ENDPOINT = ZAPI_ENDPOINT + \"execution/%s/execute\";\n+\n+    private static final String FOLDER_ID_JSON_PATH = \"$.[?(@.folderName=='%s')].folderId\";\n+    private static final String EXECUTION_ID_JSON_PATH = \"$..id\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrConfiguration zephyrConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient client, ZephyrConfiguration zephyrConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = client;\n+        this.zephyrConfiguration = zephyrConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(CREATE_EXECUTION_ENDPOINT, execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, EXECUTION_ID_JSON_PATH);\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(UPDATE_EXECUTION_STATUS_ENDPOINT, executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        notBlank(zephyrConfiguration.getProjectKey(), \"Property 'zephyr.project-key=' should not be empty\");\n+        notBlank(zephyrConfiguration.getVersionName(), \"Property 'zephyr.version-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getCycleName(), \"Property 'zephyr.cycle-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getFolderName(), \"Property 'zephyr.folder-name=' should not be empty\");\n+\n+        Project project = jiraFacade.getProject(zephyrConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(\n+            v -> zephyrConfiguration.getVersionName().equals(v.getName())).findFirst();\n+        isTrue(version.isPresent(), \"Version with name '%s' does not exist\", zephyrConfiguration.getVersionName());\n+        return version.get().getId();\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTM4NQ=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMjgwNg==", "bodyText": "that's tru, there is no way to get keys using only JSON path", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522202806", "createdAt": "2020-11-12T15:40:42Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+    private static final String CREATE_EXECUTION_ENDPOINT = ZAPI_ENDPOINT + \"execution/\";\n+    private static final String UPDATE_EXECUTION_STATUS_ENDPOINT = ZAPI_ENDPOINT + \"execution/%s/execute\";\n+\n+    private static final String FOLDER_ID_JSON_PATH = \"$.[?(@.folderName=='%s')].folderId\";\n+    private static final String EXECUTION_ID_JSON_PATH = \"$..id\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrConfiguration zephyrConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient client, ZephyrConfiguration zephyrConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = client;\n+        this.zephyrConfiguration = zephyrConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(CREATE_EXECUTION_ENDPOINT, execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, EXECUTION_ID_JSON_PATH);\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(UPDATE_EXECUTION_STATUS_ENDPOINT, executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        notBlank(zephyrConfiguration.getProjectKey(), \"Property 'zephyr.project-key=' should not be empty\");\n+        notBlank(zephyrConfiguration.getVersionName(), \"Property 'zephyr.version-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getCycleName(), \"Property 'zephyr.cycle-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getFolderName(), \"Property 'zephyr.folder-name=' should not be empty\");\n+\n+        Project project = jiraFacade.getProject(zephyrConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(\n+            v -> zephyrConfiguration.getVersionName().equals(v.getName())).findFirst();\n+        isTrue(version.isPresent(), \"Version with name '%s' does not exist\", zephyrConfiguration.getVersionName());\n+        return version.get().getId();\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTM4NQ=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc0Nzg2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDowMVrOHwpSDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNDowMVrOHwpSDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MDA2MQ==", "bodyText": "at some point it would be needed to split ZephyrConfiguration  into 2 classes: one should be immutable and should provide the user properties, another one will collect dynamic configuration", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520770061", "createdAt": "2020-11-10T18:14:01Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+    private static final String CREATE_EXECUTION_ENDPOINT = ZAPI_ENDPOINT + \"execution/\";\n+    private static final String UPDATE_EXECUTION_STATUS_ENDPOINT = ZAPI_ENDPOINT + \"execution/%s/execute\";\n+\n+    private static final String FOLDER_ID_JSON_PATH = \"$.[?(@.folderName=='%s')].folderId\";\n+    private static final String EXECUTION_ID_JSON_PATH = \"$..id\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrConfiguration zephyrConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient client, ZephyrConfiguration zephyrConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = client;\n+        this.zephyrConfiguration = zephyrConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(CREATE_EXECUTION_ENDPOINT, execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, EXECUTION_ID_JSON_PATH);\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(UPDATE_EXECUTION_STATUS_ENDPOINT, executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        notBlank(zephyrConfiguration.getProjectKey(), \"Property 'zephyr.project-key=' should not be empty\");\n+        notBlank(zephyrConfiguration.getVersionName(), \"Property 'zephyr.version-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getCycleName(), \"Property 'zephyr.cycle-name=' should not be empty\");\n+        notBlank(zephyrConfiguration.getFolderName(), \"Property 'zephyr.folder-name=' should not be empty\");\n+\n+        Project project = jiraFacade.getProject(zephyrConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc1NDc2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/databind/TestCaseDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNTo0OVrOHwpWTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNTo0OVrOHwpWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MTE0OQ==", "bodyText": "else is redundant", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520771149", "createdAt": "2020-11-10T18:15:49Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/databind/TestCaseDeserializer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.databind;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+\n+import org.vividus.zephyr.model.TestCase;\n+\n+public class TestCaseDeserializer extends StdDeserializer<TestCase>\n+{\n+    private static final long serialVersionUID = 7820826665413256040L;\n+\n+    public TestCaseDeserializer()\n+    {\n+        super(TestCase.class);\n+    }\n+\n+    @Override\n+    public TestCase deserialize(JsonParser parser, DeserializationContext deserializer) throws IOException\n+    {\n+        JsonNode node = parser.getCodec().readTree(parser);\n+\n+        String status = node.get(\"status\").asText();\n+        JsonNode labelsNode = node.get(\"labels\");\n+        int issueLabelIndex = labelsNode.findValues(\"name\").indexOf(new TextNode(\"testCaseId\"));\n+        if (issueLabelIndex == -1)\n+        {\n+            return new TestCase(null, status);\n+        }\n+        else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc2MzM4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNzo1MVrOHwpbUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxNzo1MVrOHwpbUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjQzNQ==", "bodyText": "do you really need to catch it?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520772435", "createdAt": "2020-11-10T18:17:51Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.IZephyrFacade;\n+import org.vividus.zephyr.ZephyrConfiguration;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+\n+        List<TestCase> testCases = parseJsonResultsFile(getJsonResultsFiles(), objectMapper);\n+        LOGGER.info(\"Test cases: {}\", testCases);\n+        Map<String, Set<TestCaseStatus>> testCasesMap = testCases.stream()\n+                .collect(Collectors.groupingBy(TestCase::getKey,\n+                        Collectors.mapping(TestCase::getStatus, Collectors.toSet())));\n+\n+        List<TestCase> testCasesForImporting = new ArrayList<>();\n+        for (Map.Entry<String, Set<TestCaseStatus>> entry : testCasesMap.entrySet())\n+        {\n+            TreeSet<TestCaseStatus> statuses = new TreeSet<>(entry.getValue());\n+            testCasesForImporting.add(new TestCase(entry.getKey(), statuses.first()));\n+        }\n+        LOGGER.info(\"Test cases for exporting to JIRA: {}\", testCasesForImporting);\n+        ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n+        for (TestCase testCase : testCasesForImporting)\n+        {\n+            createNewTestExecution(testCase, configuration, objectMapper);\n+        }\n+    }\n+\n+    private List<File> getJsonResultsFiles() throws IOException\n+    {\n+        List<File> jsonFiles = Files.walk(zephyrExporterProperties.getSourceDirectory())\n+                .map(Path::toFile)\n+                .filter(File::isFile)\n+                .filter(f -> f.getPath().contains(\"test-cases\"))\n+                .collect(Collectors.toList());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",\n+                zephyrExporterProperties.getSourceDirectory());\n+        LOGGER.info(\"Json files: {}\", jsonFiles);\n+        return jsonFiles;\n+    }\n+\n+    private List<TestCase> parseJsonResultsFile(List<File> jsonFiles, ObjectMapper objectMapper)\n+    {\n+        List<TestCase> testCases = new ArrayList<>();\n+        for (File jsonFile : jsonFiles)\n+        {\n+            try\n+            {\n+                TestCase testCase = objectMapper.readValue(jsonFile, TestCase.class);\n+                if (testCase.getKey() == null)\n+                {\n+                    continue;\n+                }\n+                if (testCase.getKey().contains(\" \"))\n+                {\n+                    String[] keys = testCase.getKey().split(\"\\\\s+\");\n+                    for (String key : keys)\n+                    {\n+                        TestCase additionalTestCase = new TestCase(key, testCase.getStatus());\n+                        testCases.add(additionalTestCase);\n+                    }\n+                }\n+                else\n+                {\n+                    testCases.add(testCase);\n+                }\n+            }\n+            catch (IOException e)\n+            {\n+                throw new IllegalArgumentException(\"Problem with reading values from json file \" + jsonFile, e);\n+            }\n+        }\n+        return testCases;\n+    }\n+\n+    private void createNewTestExecution(TestCase testCase, ZephyrConfiguration configuration, ObjectMapper objectMapper)\n+            throws IOException\n+    {\n+        JiraEntity issue = jiraFacade.getIssue(testCase.getKey());\n+        ZephyrExecution execution = new ZephyrExecution(configuration, issue.getId(), testCase.getStatus());\n+        try\n+        {\n+            String createExecution = objectMapper.writeValueAsString(execution);\n+            int executionId = zephyrFacade.createExecution(createExecution);\n+\n+            String executionBody = objectMapper.writeValueAsString(new ExecutionStatus(\n+                String.valueOf(execution.getTestCaseStatus().getStatusId())));\n+            zephyrFacade.updateExecutionStatus(executionId, executionBody);\n+        }\n+        catch (JsonProcessingException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc2NDYzOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxODoxN1rOHwpcKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjozNTo0M1rOHxLUeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjY0OQ==", "bodyText": "where is it used?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520772649", "createdAt": "2020-11-10T18:18:17Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public class TestCase\n+{\n+    private String key;\n+    private TestCaseStatus status;\n+\n+    public TestCase(String key, String status)\n+    {\n+        this.key = key;\n+        this.status = TestCaseStatus.valueOf(status.toUpperCase());\n+    }\n+\n+    public TestCase(String key, TestCaseStatus status)\n+    {\n+        this.key = key;\n+        this.status = status;\n+    }\n+\n+    public String getKey()\n+    {\n+        return key;\n+    }\n+\n+    public void setKey(String key)\n+    {\n+        this.key = key;\n+    }\n+\n+    public TestCaseStatus getStatus()\n+    {\n+        return status;\n+    }\n+\n+    public void setStatus(TestCaseStatus status)\n+    {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public String toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNzczOA==", "bodyText": "I used it for debug \n  \n    \n      vividus/vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java\n    \n    \n         Line 66\n      in\n      15cfe4b\n    \n    \n    \n    \n\n        \n          \n           LOGGER.info(\"Test cases: {}\", testCases); \n        \n    \n  \n\n and \n  \n    \n      vividus/vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java\n    \n    \n         Line 77\n      in\n      15cfe4b\n    \n    \n    \n    \n\n        \n          \n           LOGGER.info(\"Test cases for exporting to JIRA: {}\", testCasesForImporting);", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r521327738", "createdAt": "2020-11-11T12:35:43Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public class TestCase\n+{\n+    private String key;\n+    private TestCaseStatus status;\n+\n+    public TestCase(String key, String status)\n+    {\n+        this.key = key;\n+        this.status = TestCaseStatus.valueOf(status.toUpperCase());\n+    }\n+\n+    public TestCase(String key, TestCaseStatus status)\n+    {\n+        this.key = key;\n+        this.status = status;\n+    }\n+\n+    public String getKey()\n+    {\n+        return key;\n+    }\n+\n+    public void setKey(String key)\n+    {\n+        this.key = key;\n+    }\n+\n+    public TestCaseStatus getStatus()\n+    {\n+        return status;\n+    }\n+\n+    public void setStatus(TestCaseStatus status)\n+    {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public String toString()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MjY0OQ=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc2NzI0OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxODo1N1rOHwpduA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NToxNFrOHyA89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzA0OA==", "bodyText": "are ID-s static and applicable for any Zephyr instance? or are they dynamic?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520773048", "createdAt": "2020-11-10T18:18:57Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus\n+{\n+    FAILED(2),\n+    BROKEN(12),\n+    PENDING(12),\n+    UNKNOWN(10),\n+    SKIPPED(-1),\n+    PASSED(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzMzEyMA==", "bodyText": "I think dynamic https://getzephyr.docs.apiary.io/#reference/utilresource/get-execution-statuses-priorities-components-labels/get-execution-statuses,-priorities,-components,-labels", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r521333120", "createdAt": "2020-11-11T12:45:36Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus\n+{\n+    FAILED(2),\n+    BROKEN(12),\n+    PENDING(12),\n+    UNKNOWN(10),\n+    SKIPPED(-1),\n+    PASSED(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzA0OA=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjQ1Mw==", "bodyText": "I think we need to collect ID-s at runtime using the mentioned endpoint", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522206453", "createdAt": "2020-11-12T15:45:14Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus\n+{\n+    FAILED(2),\n+    BROKEN(12),\n+    PENDING(12),\n+    UNKNOWN(10),\n+    SKIPPED(-1),\n+    PASSED(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzA0OA=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc3NDA5OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyMDo1MFrOHwph9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NTo0OVrOHyA-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NDEzMw==", "bodyText": "I think mandatory properties shouldn't be initialized with empty values", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520774133", "createdAt": "2020-11-10T18:20:50Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+http.ssl.check-certificate=false\n+http.ssl.verify-hostname=true\n+http.circular-redirects-allowed=false\n+http.cookie-spec=default\n+http.socket-timeout=300000\n+http.idempotent-methods-sending-request-body=\n+\n+http.key-store.path=#{null}\n+http.key-store.password=\n+http.key-store.type=JKS\n+\n+http.connection-request-timeout=30000\n+http.connect-timeout=30000\n+http.max-total-connections=80\n+http.max-connections-per-route=60\n+\n+jira.endpoint=\n+jira.username=\n+jira.password=\n+\n+jira.http.context-type=caching-credentials\n+\n+zephyr.project-key=\n+zephyr.version-name=\n+zephyr.cycle-name=\n+zephyr.folder-name=\n+\n+zephyr.exporter.source-directory=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjkzMg==", "bodyText": "not fixed?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522206932", "createdAt": "2020-11-12T15:45:49Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+http.ssl.check-certificate=false\n+http.ssl.verify-hostname=true\n+http.circular-redirects-allowed=false\n+http.cookie-spec=default\n+http.socket-timeout=300000\n+http.idempotent-methods-sending-request-body=\n+\n+http.key-store.path=#{null}\n+http.key-store.password=\n+http.key-store.type=JKS\n+\n+http.connection-request-timeout=30000\n+http.connect-timeout=30000\n+http.max-total-connections=80\n+http.max-connections-per-route=60\n+\n+jira.endpoint=\n+jira.username=\n+jira.password=\n+\n+jira.http.context-type=caching-credentials\n+\n+zephyr.project-key=\n+zephyr.version-name=\n+zephyr.cycle-name=\n+zephyr.folder-name=\n+\n+zephyr.exporter.source-directory=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NDEzMw=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc4NDYzOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyNDowMFrOHwposQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0MzowNlrOHyA2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NTg1Nw==", "bodyText": "we use semicolon as separator by default", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r520775857", "createdAt": "2020-11-10T18:24:00Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.IZephyrFacade;\n+import org.vividus.zephyr.ZephyrConfiguration;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+\n+        List<TestCase> testCases = parseJsonResultsFile(getJsonResultsFiles(), objectMapper);\n+        LOGGER.info(\"Test cases: {}\", testCases);\n+        Map<String, Set<TestCaseStatus>> testCasesMap = testCases.stream()\n+                .collect(Collectors.groupingBy(TestCase::getKey,\n+                        Collectors.mapping(TestCase::getStatus, Collectors.toSet())));\n+\n+        List<TestCase> testCasesForImporting = new ArrayList<>();\n+        for (Map.Entry<String, Set<TestCaseStatus>> entry : testCasesMap.entrySet())\n+        {\n+            TreeSet<TestCaseStatus> statuses = new TreeSet<>(entry.getValue());\n+            testCasesForImporting.add(new TestCase(entry.getKey(), statuses.first()));\n+        }\n+        LOGGER.info(\"Test cases for exporting to JIRA: {}\", testCasesForImporting);\n+        ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n+        for (TestCase testCase : testCasesForImporting)\n+        {\n+            createNewTestExecution(testCase, configuration, objectMapper);\n+        }\n+    }\n+\n+    private List<File> getJsonResultsFiles() throws IOException\n+    {\n+        List<File> jsonFiles = Files.walk(zephyrExporterProperties.getSourceDirectory())\n+                .map(Path::toFile)\n+                .filter(File::isFile)\n+                .filter(f -> f.getPath().contains(\"test-cases\"))\n+                .collect(Collectors.toList());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",\n+                zephyrExporterProperties.getSourceDirectory());\n+        LOGGER.info(\"Json files: {}\", jsonFiles);\n+        return jsonFiles;\n+    }\n+\n+    private List<TestCase> parseJsonResultsFile(List<File> jsonFiles, ObjectMapper objectMapper)\n+    {\n+        List<TestCase> testCases = new ArrayList<>();\n+        for (File jsonFile : jsonFiles)\n+        {\n+            try\n+            {\n+                TestCase testCase = objectMapper.readValue(jsonFile, TestCase.class);\n+                if (testCase.getKey() == null)\n+                {\n+                    continue;\n+                }\n+                if (testCase.getKey().contains(\" \"))\n+                {\n+                    String[] keys = testCase.getKey().split(\"\\\\s+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzNjYwMA==", "bodyText": "for meta also ?\nI thought it should be looks like @testCaseId test-1 test-2", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r521336600", "createdAt": "2020-11-11T12:51:42Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.IZephyrFacade;\n+import org.vividus.zephyr.ZephyrConfiguration;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+\n+        List<TestCase> testCases = parseJsonResultsFile(getJsonResultsFiles(), objectMapper);\n+        LOGGER.info(\"Test cases: {}\", testCases);\n+        Map<String, Set<TestCaseStatus>> testCasesMap = testCases.stream()\n+                .collect(Collectors.groupingBy(TestCase::getKey,\n+                        Collectors.mapping(TestCase::getStatus, Collectors.toSet())));\n+\n+        List<TestCase> testCasesForImporting = new ArrayList<>();\n+        for (Map.Entry<String, Set<TestCaseStatus>> entry : testCasesMap.entrySet())\n+        {\n+            TreeSet<TestCaseStatus> statuses = new TreeSet<>(entry.getValue());\n+            testCasesForImporting.add(new TestCase(entry.getKey(), statuses.first()));\n+        }\n+        LOGGER.info(\"Test cases for exporting to JIRA: {}\", testCasesForImporting);\n+        ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n+        for (TestCase testCase : testCasesForImporting)\n+        {\n+            createNewTestExecution(testCase, configuration, objectMapper);\n+        }\n+    }\n+\n+    private List<File> getJsonResultsFiles() throws IOException\n+    {\n+        List<File> jsonFiles = Files.walk(zephyrExporterProperties.getSourceDirectory())\n+                .map(Path::toFile)\n+                .filter(File::isFile)\n+                .filter(f -> f.getPath().contains(\"test-cases\"))\n+                .collect(Collectors.toList());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",\n+                zephyrExporterProperties.getSourceDirectory());\n+        LOGGER.info(\"Json files: {}\", jsonFiles);\n+        return jsonFiles;\n+    }\n+\n+    private List<TestCase> parseJsonResultsFile(List<File> jsonFiles, ObjectMapper objectMapper)\n+    {\n+        List<TestCase> testCases = new ArrayList<>();\n+        for (File jsonFile : jsonFiles)\n+        {\n+            try\n+            {\n+                TestCase testCase = objectMapper.readValue(jsonFile, TestCase.class);\n+                if (testCase.getKey() == null)\n+                {\n+                    continue;\n+                }\n+                if (testCase.getKey().contains(\" \"))\n+                {\n+                    String[] keys = testCase.getKey().split(\"\\\\s+\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NTg1Nw=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNDc1Mg==", "bodyText": "yep, for meta: https://github.com/vividus-framework/vividus/blob/master/vividus-bdd-engine/src/main/java/org/vividus/bdd/model/MetaWrapper.java#L35", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522204752", "createdAt": "2020-11-12T15:43:06Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.IZephyrFacade;\n+import org.vividus.zephyr.ZephyrConfiguration;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+\n+        List<TestCase> testCases = parseJsonResultsFile(getJsonResultsFiles(), objectMapper);\n+        LOGGER.info(\"Test cases: {}\", testCases);\n+        Map<String, Set<TestCaseStatus>> testCasesMap = testCases.stream()\n+                .collect(Collectors.groupingBy(TestCase::getKey,\n+                        Collectors.mapping(TestCase::getStatus, Collectors.toSet())));\n+\n+        List<TestCase> testCasesForImporting = new ArrayList<>();\n+        for (Map.Entry<String, Set<TestCaseStatus>> entry : testCasesMap.entrySet())\n+        {\n+            TreeSet<TestCaseStatus> statuses = new TreeSet<>(entry.getValue());\n+            testCasesForImporting.add(new TestCase(entry.getKey(), statuses.first()));\n+        }\n+        LOGGER.info(\"Test cases for exporting to JIRA: {}\", testCasesForImporting);\n+        ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n+        for (TestCase testCase : testCasesForImporting)\n+        {\n+            createNewTestExecution(testCase, configuration, objectMapper);\n+        }\n+    }\n+\n+    private List<File> getJsonResultsFiles() throws IOException\n+    {\n+        List<File> jsonFiles = Files.walk(zephyrExporterProperties.getSourceDirectory())\n+                .map(Path::toFile)\n+                .filter(File::isFile)\n+                .filter(f -> f.getPath().contains(\"test-cases\"))\n+                .collect(Collectors.toList());\n+\n+        notEmpty(jsonFiles, \"Folder '%s' does not contain needed json files\",\n+                zephyrExporterProperties.getSourceDirectory());\n+        LOGGER.info(\"Json files: {}\", jsonFiles);\n+        return jsonFiles;\n+    }\n+\n+    private List<TestCase> parseJsonResultsFile(List<File> jsonFiles, ObjectMapper objectMapper)\n+    {\n+        List<TestCase> testCases = new ArrayList<>();\n+        for (File jsonFile : jsonFiles)\n+        {\n+            try\n+            {\n+                TestCase testCase = objectMapper.readValue(jsonFile, TestCase.class);\n+                if (testCase.getKey() == null)\n+                {\n+                    continue;\n+                }\n+                if (testCase.getKey().contains(\" \"))\n+                {\n+                    String[] keys = testCase.getKey().split(\"\\\\s+\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NTg1Nw=="}, "originalCommit": {"oid": "15cfe4b3e2dfe25b03c5b162fe710ae51ec22e27"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mzg3NTM3OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/ExecutionStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0Mzo0M1rOHyA4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0Mzo0M1rOHyA4Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNTIxMQ==", "bodyText": "is it used?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522205211", "createdAt": "2020-11-12T15:43:43Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/ExecutionStatus.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public class ExecutionStatus\n+{\n+    private String status;\n+\n+    public ExecutionStatus(String status)\n+    {\n+        this.status = status;\n+    }\n+\n+    public String getStatus()\n+    {\n+        return status;\n+    }\n+\n+    public void setStatus(String status)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d01c1f6f99c677e84902dbb714554dde9fb9c88"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mzg5NDQyOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/resources/org/vividus/zephyr/spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NzoyN1rOHyBEMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NzoyN1rOHyBEMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwODMwNA==", "bodyText": "why do you need one more bean? such bean is already declared in jira-facade module", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522208304", "createdAt": "2020-11-12T15:47:27Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/resources/org/vividus/zephyr/spring.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+    <bean id=\"zephyrExporterConfiguration\" class=\"org.vividus.zephyr.exporter.ZephyrExporterConfiguration\">\n+        <constructor-arg index=\"0\" value=\"${zephyr.project-key}\"/>\n+        <constructor-arg index=\"1\" value=\"${zephyr.version-name}\"/>\n+        <constructor-arg index=\"2\" value=\"${zephyr.cycle-name}\"/>\n+        <constructor-arg index=\"3\" value=\"${zephyr.folder-name}\"/>\n+    </bean>\n+\n+    <bean class=\"org.vividus.zephyr.ZephyrFacade\">\n+        <constructor-arg index=\"0\">\n+            <bean class=\"org.vividus.jira.JiraFacade\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d01c1f6f99c677e84902dbb714554dde9fb9c88"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mzg5ODQyOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/resources/org/vividus/zephyr/spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0ODoxNFrOHyBGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0ODoxNFrOHyBGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwODkyMw==", "bodyText": "see above comment, this applicable for all similar cases", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522208923", "createdAt": "2020-11-12T15:48:14Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/resources/org/vividus/zephyr/spring.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"\n+       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+    <bean id=\"zephyrExporterConfiguration\" class=\"org.vividus.zephyr.exporter.ZephyrExporterConfiguration\">\n+        <constructor-arg index=\"0\" value=\"${zephyr.project-key}\"/>\n+        <constructor-arg index=\"1\" value=\"${zephyr.version-name}\"/>\n+        <constructor-arg index=\"2\" value=\"${zephyr.cycle-name}\"/>\n+        <constructor-arg index=\"3\" value=\"${zephyr.folder-name}\"/>\n+    </bean>\n+\n+    <bean class=\"org.vividus.zephyr.ZephyrFacade\">\n+        <constructor-arg index=\"0\">\n+            <bean class=\"org.vividus.jira.JiraFacade\" />\n+        </constructor-arg>\n+        <constructor-arg index=\"1\" ref=\"jiraClient\" />\n+        <constructor-arg index=\"2\" ref=\"zephyrExporterConfiguration\" />\n+    </bean>\n+\n+    <bean class=\"org.vividus.zephyr.exporter.ZephyrExporter\">\n+        <constructor-arg index=\"0\">\n+            <bean class=\"org.vividus.jira.JiraFacade\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d01c1f6f99c677e84902dbb714554dde9fb9c88"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzkyMDgyOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo1MjozMVrOHyBUPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo1MjozMVrOHyBUPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIxMjQxMw==", "bodyText": "is it used?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522212413", "createdAt": "2020-11-12T15:52:31Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public class TestCase\n+{\n+    private String key;\n+    private TestCaseStatus status;\n+\n+    public TestCase(String key, String status)\n+    {\n+        this.key = key;\n+        this.status = TestCaseStatus.valueOf(status.toUpperCase());\n+    }\n+\n+    public TestCase(String key, TestCaseStatus status)\n+    {\n+        this.key = key;\n+        this.status = status;\n+    }\n+\n+    public String getKey()\n+    {\n+        return key;\n+    }\n+\n+    public void setKey(String key)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d01c1f6f99c677e84902dbb714554dde9fb9c88"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzkyMTU5OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo1MjozOVrOHyBUsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo1MjozOVrOHyBUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIxMjUzMQ==", "bodyText": "is it used?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r522212531", "createdAt": "2020-11-12T15:52:39Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCase.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public class TestCase\n+{\n+    private String key;\n+    private TestCaseStatus status;\n+\n+    public TestCase(String key, String status)\n+    {\n+        this.key = key;\n+        this.status = TestCaseStatus.valueOf(status.toUpperCase());\n+    }\n+\n+    public TestCase(String key, TestCaseStatus status)\n+    {\n+        this.key = key;\n+        this.status = status;\n+    }\n+\n+    public String getKey()\n+    {\n+        return key;\n+    }\n+\n+    public void setKey(String key)\n+    {\n+        this.key = key;\n+    }\n+\n+    public TestCaseStatus getStatus()\n+    {\n+        return status;\n+    }\n+\n+    public void setStatus(TestCaseStatus status)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d01c1f6f99c677e84902dbb714554dde9fb9c88"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE2ODAzOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxMToyMFrOH1q2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxMToyMFrOH1q2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzODc4MQ==", "bodyText": "2.4.0 now: https://github.com/vividus-framework/vividus/blob/master/vividus-to-xray-exporter/build.gradle#L6", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526038781", "createdAt": "2020-11-18T12:11:20Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,33 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.5.RELEASE')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE3NDUwOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxMzowOVrOH1q65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxMzowOVrOH1q65g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzOTc4Mg==", "bodyText": "statusIdMap  -> testStatusPerZephyrIdMapping ?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526039782", "createdAt": "2020-11-18T12:13:09Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrConfiguration.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.configuration;\n+\n+import java.util.Map;\n+\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrConfiguration\n+{\n+    private String projectId;\n+    private String versionId;\n+    private String cycleId;\n+    private String folderId;\n+    private Map<TestCaseStatus, Integer> statusIdMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE4NjA5OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/databind/TestCaseDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxNjoxNVrOH1rB6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxNjoxNVrOH1rB6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MTU3OA==", "bodyText": "testCaseIds\n(it's recommended to avoid using collections names in variables names: if the collection type is changed in future (e.g. List > Set), most likely nobody will update variable name)", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526041578", "createdAt": "2020-11-18T12:16:15Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/databind/TestCaseDeserializer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.databind;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.model.TestCase;\n+\n+public class TestCaseDeserializer extends StdDeserializer<TestCase>\n+{\n+    private static final long serialVersionUID = 7820826665413256040L;\n+\n+    public TestCaseDeserializer()\n+    {\n+        super(TestCase.class);\n+    }\n+\n+    @Override\n+    public TestCase deserialize(JsonParser parser, DeserializationContext deserializer) throws IOException\n+    {\n+        String node = parser.getCodec().readTree(parser).toString();\n+        String status = JsonPathUtils.getData(node, \"$.status\");\n+        List<String> testCaseIdList = JsonPathUtils.getData(node, \"$..[?(@.name=='testCaseId')].value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIwNTYxOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMTo0OFrOH1rNvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMTo0OFrOH1rNvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDYwNg==", "bodyText": "please make sure you use max line length = 120 (it's seems some lines in different code parts have unnecessary line breaks)", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526044606", "createdAt": "2020-11-18T12:21:48Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setStatusIdMap(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(\n+            v -> zephyrExporterConfiguration.getVersionName().equals(v.getName())).findFirst();\n+        isTrue(version.isPresent(), \"Version with name '%s' does not exist\",\n+                zephyrExporterConfiguration.getVersionName());\n+        return version.get().getId();\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())\n+        {\n+            Map.Entry<String, Map<String, String>> map = itr.next();\n+            if (map.getValue().get(\"name\").equals(zephyrExporterConfiguration.getCycleName()))\n+            {\n+                cycleId = map.getKey();\n+                break;\n+            }\n+        }\n+        notBlank(cycleId, \"Cycle with name '%s' does not exist\", zephyrExporterConfiguration.getCycleName());\n+        return cycleId;\n+    }\n+\n+    private String findFolderId(String cycleId, String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle/\" + cycleId + \"/folders?\" + projectAndVersionUrlQuery);\n+        List<Integer> folderId = JsonPathUtils.getData(json, String.format(\"$.[?(@.folderName=='%s')].folderId\",\n+                zephyrExporterConfiguration.getFolderName()));\n+        notEmpty(folderId, \"Folder with name '%s' does not exist\",\n+                zephyrExporterConfiguration.getFolderName());\n+        return folderId.get(0).toString();\n+    }\n+\n+    private Map<TestCaseStatus, Integer> getExecutionStatuses() throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"util/testExecutionStatus\");\n+        Map<TestCaseStatus, Integer> statusIdMap = new EnumMap<>(TestCaseStatus.class);\n+        zephyrExporterConfiguration.getStatuses().entrySet().forEach(s ->\n+        {\n+            List<Integer> statusId = JsonPathUtils.getData(json, String.format(\"$.[?(@.name=='%s')].id\",\n+                    s.getValue()));\n+            notEmpty(statusId, \"Status '%s' does not exist\",\n+                    zephyrExporterConfiguration.getFolderName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIxMjY4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMzo1MlrOH1rSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMzo1MlrOH1rSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NTczMQ==", "bodyText": "``statusIdMap ->testStatusPerZephyrIdMapping` ?`", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526045731", "createdAt": "2020-11-18T12:23:52Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setStatusIdMap(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(\n+            v -> zephyrExporterConfiguration.getVersionName().equals(v.getName())).findFirst();\n+        isTrue(version.isPresent(), \"Version with name '%s' does not exist\",\n+                zephyrExporterConfiguration.getVersionName());\n+        return version.get().getId();\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())\n+        {\n+            Map.Entry<String, Map<String, String>> map = itr.next();\n+            if (map.getValue().get(\"name\").equals(zephyrExporterConfiguration.getCycleName()))\n+            {\n+                cycleId = map.getKey();\n+                break;\n+            }\n+        }\n+        notBlank(cycleId, \"Cycle with name '%s' does not exist\", zephyrExporterConfiguration.getCycleName());\n+        return cycleId;\n+    }\n+\n+    private String findFolderId(String cycleId, String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle/\" + cycleId + \"/folders?\" + projectAndVersionUrlQuery);\n+        List<Integer> folderId = JsonPathUtils.getData(json, String.format(\"$.[?(@.folderName=='%s')].folderId\",\n+                zephyrExporterConfiguration.getFolderName()));\n+        notEmpty(folderId, \"Folder with name '%s' does not exist\",\n+                zephyrExporterConfiguration.getFolderName());\n+        return folderId.get(0).toString();\n+    }\n+\n+    private Map<TestCaseStatus, Integer> getExecutionStatuses() throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"util/testExecutionStatus\");\n+        Map<TestCaseStatus, Integer> statusIdMap = new EnumMap<>(TestCaseStatus.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIxNDM5OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNDoyMFrOH1rTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNDoyMFrOH1rTPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NjAxMg==", "bodyText": "zephyrExporterConfiguration.getFolderName() -> s.getValue()?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526046012", "createdAt": "2020-11-18T12:24:20Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setStatusIdMap(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(\n+            v -> zephyrExporterConfiguration.getVersionName().equals(v.getName())).findFirst();\n+        isTrue(version.isPresent(), \"Version with name '%s' does not exist\",\n+                zephyrExporterConfiguration.getVersionName());\n+        return version.get().getId();\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())\n+        {\n+            Map.Entry<String, Map<String, String>> map = itr.next();\n+            if (map.getValue().get(\"name\").equals(zephyrExporterConfiguration.getCycleName()))\n+            {\n+                cycleId = map.getKey();\n+                break;\n+            }\n+        }\n+        notBlank(cycleId, \"Cycle with name '%s' does not exist\", zephyrExporterConfiguration.getCycleName());\n+        return cycleId;\n+    }\n+\n+    private String findFolderId(String cycleId, String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle/\" + cycleId + \"/folders?\" + projectAndVersionUrlQuery);\n+        List<Integer> folderId = JsonPathUtils.getData(json, String.format(\"$.[?(@.folderName=='%s')].folderId\",\n+                zephyrExporterConfiguration.getFolderName()));\n+        notEmpty(folderId, \"Folder with name '%s' does not exist\",\n+                zephyrExporterConfiguration.getFolderName());\n+        return folderId.get(0).toString();\n+    }\n+\n+    private Map<TestCaseStatus, Integer> getExecutionStatuses() throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"util/testExecutionStatus\");\n+        Map<TestCaseStatus, Integer> statusIdMap = new EnumMap<>(TestCaseStatus.class);\n+        zephyrExporterConfiguration.getStatuses().entrySet().forEach(s ->\n+        {\n+            List<Integer> statusId = JsonPathUtils.getData(json, String.format(\"$.[?(@.name=='%s')].id\",\n+                    s.getValue()));\n+            notEmpty(statusId, \"Status '%s' does not exist\",\n+                    zephyrExporterConfiguration.getFolderName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIyMzIzOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNjozOVrOH1rYpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNzoxMFrOH1rZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NzM5OA==", "bodyText": "KNOWN_ISSUES_ONLY ?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526047398", "createdAt": "2020-11-18T12:26:39Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus\n+{\n+    FAILED,\n+    BROKEN,\n+    PENDING,\n+    UNKNOWN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0Nzc0MQ==", "bodyText": "https://github.com/vividus-framework/vividus/blob/master/vividus/src/main/java/org/vividus/bdd/Status.java#L21-L27", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r526047741", "createdAt": "2020-11-18T12:27:10Z", "author": {"login": "valfirst"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus\n+{\n+    FAILED,\n+    BROKEN,\n+    PENDING,\n+    UNKNOWN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NzM5OA=="}, "originalCommit": {"oid": "1866d2f3a5a81fa9032087b0b42b6966043a44f7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODQ1NDI0OnYy", "diffSide": "RIGHT", "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyMToyOFrOH3Nieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyMToyOFrOH3Nieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1NTU0Ng==", "bodyText": "For getting detailed information about them can be used request like https://jira.example.com/rest/zapi/latest/util/testExecutionStatus ->\ntestExecutionStatus endpoint is used to get the detailed information about the statuses, like: https://jira.example.com/rest/zapi/latest/util/testExecutionStatus", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527655546", "createdAt": "2020-11-20T12:21:28Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "diffHunk": "@@ -0,0 +1,160 @@\n+= Zephyr Exporter\n+\n+Zephyr Exporter is a tool used for exporting test execution results into Jira Zephyr Plugin.\n+\n+Features:\n+\n+* Create test executions\n+* Set test execution statuses\n+\n+== Zephyr Export Properties\n+\n+[cols=\"1,2,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`zephyr.exporter.source-directory`\n+|true\n+|Path to directory with test execution JSON results.\n+\n+|`zephyr.project-key`\n+|true\n+|Key of a Jira project where new test executions should be created\n+\n+|`zephyr.version-name`\n+|true\n+|Version/release name where new test executions should be created\n+\n+|`zephyr.cycle-name`\n+|true\n+|Cycle/sprint name where new test executions should be created\n+\n+|`zephyr.folder-name`\n+|true\n+|Folder name where new test executions should be created\n+\n+|===\n+\n+== Zephyr Execution Status Mapping\n+\n+The Zephyr plugin for Jira has own configurable execution statuses. For getting detailed information about them can be used request like https://jira.example.com/rest/zapi/latest/util/testExecutionStatus. These properties are used to establish a correspondence between Vividus and Zephyr execution statuses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62abe00d7c85cb6ede8faa4a1384314b647f70eb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODQ1Njc5OnYy", "diffSide": "RIGHT", "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyMjoxMlrOH3Nj7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyMjoxMlrOH3Nj7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1NTkxNw==", "bodyText": "These properties are used to establish a correspondence between Vividus and Zephyr execution statuses. ->\nThe following properties are used to setup a mapping between Vividus and Zephyr execution statuses.", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527655917", "createdAt": "2020-11-20T12:22:12Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "diffHunk": "@@ -0,0 +1,160 @@\n+= Zephyr Exporter\n+\n+Zephyr Exporter is a tool used for exporting test execution results into Jira Zephyr Plugin.\n+\n+Features:\n+\n+* Create test executions\n+* Set test execution statuses\n+\n+== Zephyr Export Properties\n+\n+[cols=\"1,2,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`zephyr.exporter.source-directory`\n+|true\n+|Path to directory with test execution JSON results.\n+\n+|`zephyr.project-key`\n+|true\n+|Key of a Jira project where new test executions should be created\n+\n+|`zephyr.version-name`\n+|true\n+|Version/release name where new test executions should be created\n+\n+|`zephyr.cycle-name`\n+|true\n+|Cycle/sprint name where new test executions should be created\n+\n+|`zephyr.folder-name`\n+|true\n+|Folder name where new test executions should be created\n+\n+|===\n+\n+== Zephyr Execution Status Mapping\n+\n+The Zephyr plugin for Jira has own configurable execution statuses. For getting detailed information about them can be used request like https://jira.example.com/rest/zapi/latest/util/testExecutionStatus. These properties are used to establish a correspondence between Vividus and Zephyr execution statuses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62abe00d7c85cb6ede8faa4a1384314b647f70eb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODQ2MDU3OnYy", "diffSide": "RIGHT", "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyMzoyNVrOH3NmLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyMzoyNVrOH3NmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1NjQ5Mw==", "bodyText": "the common with Xray part can be moved to partials (you can find examples in the plugins docs)", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527656493", "createdAt": "2020-11-20T12:23:25Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "diffHunk": "@@ -0,0 +1,160 @@\n+= Zephyr Exporter\n+\n+Zephyr Exporter is a tool used for exporting test execution results into Jira Zephyr Plugin.\n+\n+Features:\n+\n+* Create test executions\n+* Set test execution statuses\n+\n+== Zephyr Export Properties\n+\n+[cols=\"1,2,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`zephyr.exporter.source-directory`\n+|true\n+|Path to directory with test execution JSON results.\n+\n+|`zephyr.project-key`\n+|true\n+|Key of a Jira project where new test executions should be created\n+\n+|`zephyr.version-name`\n+|true\n+|Version/release name where new test executions should be created\n+\n+|`zephyr.cycle-name`\n+|true\n+|Cycle/sprint name where new test executions should be created\n+\n+|`zephyr.folder-name`\n+|true\n+|Folder name where new test executions should be created\n+\n+|===\n+\n+== Zephyr Execution Status Mapping\n+\n+The Zephyr plugin for Jira has own configurable execution statuses. For getting detailed information about them can be used request like https://jira.example.com/rest/zapi/latest/util/testExecutionStatus. These properties are used to establish a correspondence between Vividus and Zephyr execution statuses.\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Vividus execution status property name\n+|Zephyr execution status value (by default)\n+\n+|`zephyr.statuses.FAILED`\n+|FAILED\n+\n+|`zephyr.statuses.BROKEN`\n+|TEST NEEDS REWORK\n+\n+|`zephyr.statuses.PENDING`\n+|TEST NEEDS REWORK\n+\n+|`zephyr.statuses.UNKNOWN`\n+|PASSED WITH REMARKS\n+\n+|`zephyr.statuses.SKIPPED`\n+|SCHEDULED\n+\n+|`zephyr.statuses.PASSED`\n+|PASSED\n+\n+|===\n+\n+== Authorization\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Name\n+|Description\n+\n+|[#noop-link]`noop`\n+|Used if Jira endpoint is hidden behind SSO and the only way to access the endpoint is to use custom authorization flows or cookies\n+\n+|[#caching-credentials-link]`caching-credentials`\n+|Authorize in Jira using client username and password\n+\n+|===\n+\n+== Jira properties\n+\n+[cols=\"1,1,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Acceptable values\n+|Description\n+\n+|jira.username\n+|Required for `caching-credentials` auth\n+|`string`\n+|Jira username used for exporting test execution results\n+\n+|jira.password\n+|Required for `caching-credentials` auth\n+|`string`\n+|Jira password used used for exporting test execution results\n+\n+|jira.endpoint\n+|true\n+|https://en.wikipedia.org/wiki/URL[URL]\n+|Jira URL e.g. `https://jira.example.com`\n+\n+|jira.http.context-type\n+|false\n+a|<<caching-credentials-link, caching-credentials>>\n+\n+<<noop-link, noop>>\n+\n+|defined Jira <<_authorization>> mechanism, default value is <<caching-credentials-link, caching-credentials>>\n+\n+|===", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62abe00d7c85cb6ede8faa4a1384314b647f70eb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODQ2MjQ4OnYy", "diffSide": "RIGHT", "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyNDowNlrOH3NnZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoyNDowNlrOH3NnZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1NjgwNQ==", "bodyText": "called -> named", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527656805", "createdAt": "2020-11-20T12:24:06Z", "author": {"login": "valfirst"}, "path": "docs/modules/integrations/pages/zephyr-exporter.adoc", "diffHunk": "@@ -0,0 +1,160 @@\n+= Zephyr Exporter\n+\n+Zephyr Exporter is a tool used for exporting test execution results into Jira Zephyr Plugin.\n+\n+Features:\n+\n+* Create test executions\n+* Set test execution statuses\n+\n+== Zephyr Export Properties\n+\n+[cols=\"1,2,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Description\n+\n+|`zephyr.exporter.source-directory`\n+|true\n+|Path to directory with test execution JSON results.\n+\n+|`zephyr.project-key`\n+|true\n+|Key of a Jira project where new test executions should be created\n+\n+|`zephyr.version-name`\n+|true\n+|Version/release name where new test executions should be created\n+\n+|`zephyr.cycle-name`\n+|true\n+|Cycle/sprint name where new test executions should be created\n+\n+|`zephyr.folder-name`\n+|true\n+|Folder name where new test executions should be created\n+\n+|===\n+\n+== Zephyr Execution Status Mapping\n+\n+The Zephyr plugin for Jira has own configurable execution statuses. For getting detailed information about them can be used request like https://jira.example.com/rest/zapi/latest/util/testExecutionStatus. These properties are used to establish a correspondence between Vividus and Zephyr execution statuses.\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Vividus execution status property name\n+|Zephyr execution status value (by default)\n+\n+|`zephyr.statuses.FAILED`\n+|FAILED\n+\n+|`zephyr.statuses.BROKEN`\n+|TEST NEEDS REWORK\n+\n+|`zephyr.statuses.PENDING`\n+|TEST NEEDS REWORK\n+\n+|`zephyr.statuses.UNKNOWN`\n+|PASSED WITH REMARKS\n+\n+|`zephyr.statuses.SKIPPED`\n+|SCHEDULED\n+\n+|`zephyr.statuses.PASSED`\n+|PASSED\n+\n+|===\n+\n+== Authorization\n+\n+[cols=\"1,2\", options=\"header\"]\n+|===\n+\n+|Name\n+|Description\n+\n+|[#noop-link]`noop`\n+|Used if Jira endpoint is hidden behind SSO and the only way to access the endpoint is to use custom authorization flows or cookies\n+\n+|[#caching-credentials-link]`caching-credentials`\n+|Authorize in Jira using client username and password\n+\n+|===\n+\n+== Jira properties\n+\n+[cols=\"1,1,1,3\", options=\"header\"]\n+|===\n+\n+|Property\n+|Required\n+|Acceptable values\n+|Description\n+\n+|jira.username\n+|Required for `caching-credentials` auth\n+|`string`\n+|Jira username used for exporting test execution results\n+\n+|jira.password\n+|Required for `caching-credentials` auth\n+|`string`\n+|Jira password used used for exporting test execution results\n+\n+|jira.endpoint\n+|true\n+|https://en.wikipedia.org/wiki/URL[URL]\n+|Jira URL e.g. `https://jira.example.com`\n+\n+|jira.http.context-type\n+|false\n+a|<<caching-credentials-link, caching-credentials>>\n+\n+<<noop-link, noop>>\n+\n+|defined Jira <<_authorization>> mechanism, default value is <<caching-credentials-link, caching-credentials>>\n+\n+|===\n+\n+== Scenario Meta Attributes\n+\n+[cols=\"2,2,3\", options=\"header\"]\n+|===\n+\n+|Name\n+|Example\n+|Description\n+\n+|`testCaseId`\n+|`@testCaseId TEST-1`\n+|Add test execution to Jira test case\n+\n+|===\n+\n+== Example of scenario for export\n+\n+.Test.story\n+[source,gherkin]\n+----\n+Scenario: Buy an item\n+Meta:\n+    @layout desktop chrome_phone\n+    @testCaseId TEST-1; TEST-2; TEST-3\n+\n+Given I am on a page with the URL '${vividus-test-site-url}/delayedScroll.html'\n+When I click on element located `By.id(anchor)`\n+When I wait until scroll is finished\n+Then page is scrolled to element located `id(toClick)`\n+----\n+\n+== Export\n+\n+* Download Zephyr Exporter JAR\n+* Create a file called `application.properties` and put there all necessary properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62abe00d7c85cb6ede8faa4a1384314b647f70eb"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODQ5MTEyOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjozMjo0NlrOH3N4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjozMjo0NlrOH3N4VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2MTE0MQ==", "bodyText": "final?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527661141", "createdAt": "2020-11-20T12:32:46Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterProperties;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.facade.IZephyrFacade;\n+import org.vividus.zephyr.facade.ZephyrFacade;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private JiraFacade jiraFacade;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62abe00d7c85cb6ede8faa4a1384314b647f70eb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODU4NjA1OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowMDo1MVrOH3OwfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowMDo1MVrOH3OwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTUxNw==", "bodyText": "Could it be\nproject.getVersions()\n            .stream()\n            .filter(v -> zephyrExporterConfiguration.getVersionName().equals(v.getName()))\n            .findFirst()\n            .map(Version::getId)\n            .orElseThrow(() -> new IllegalStateException(String.format(\"Version with name '%s' does not exist\", versionName)))", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527675517", "createdAt": "2020-11-20T13:00:51Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.isTrue;\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setTestStatusPerZephyrIdMapping(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        Optional<Version> version = project.getVersions().stream().filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2299ec61245b622d838642ea8052910ec1470a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODYwNDY2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowNjozMlrOH3O7uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowNjozMlrOH3O7uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODM5NQ==", "bodyText": "Could it be toCollection(TreeSet::new) at line 80 instead?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527678395", "createdAt": "2020-11-20T13:06:32Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterProperties;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.facade.IZephyrFacade;\n+import org.vividus.zephyr.facade.ZephyrFacade;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.zephyrFacade = zephyrFacade;\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n+    }\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+\n+        List<TestCase> testCases = parseJsonResultsFile(getJsonResultsFiles(), objectMapper);\n+        notEmpty(testCases, \"There are not any test cases for exporting\",\n+                zephyrExporterProperties.getSourceDirectory());\n+        LOGGER.info(\"Test cases: {}\", testCases);\n+        Map<String, Set<TestCaseStatus>> testCasesMap = testCases.stream()\n+                .collect(Collectors.groupingBy(TestCase::getKey,\n+                        Collectors.mapping(TestCase::getStatus, Collectors.toSet())));\n+\n+        List<TestCase> testCasesForImporting = new ArrayList<>();\n+        for (Map.Entry<String, Set<TestCaseStatus>> entry : testCasesMap.entrySet())\n+        {\n+            TreeSet<TestCaseStatus> statuses = new TreeSet<>(entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2299ec61245b622d838642ea8052910ec1470a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODc3NTU2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo1NDowOFrOH3QjJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxMjo1NVrOH3RQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNDg2OA==", "bodyText": "is there some kind of agreement on it?\nVividus itself follow this order:\nFAILED(1),\n    BROKEN(2),\n    PASSED(3),\n    FILTERED(4),\n    SKIPPED(5);", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527704868", "createdAt": "2020-11-20T13:54:08Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832ee5d40ae6314b437416ab7188fba196cbb7de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxNjM1OQ==", "bodyText": "This order (priority) was discussed.", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527716359", "createdAt": "2020-11-20T14:12:55Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/model/TestCaseStatus.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.model;\n+\n+public enum TestCaseStatus", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNDg2OA=="}, "originalCommit": {"oid": "832ee5d40ae6314b437416ab7188fba196cbb7de"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODc4ODk0OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/test/java/org/vividus/zephyr/databind/TestCaseDeserializerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo1NzoyNVrOH3QrKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzo1NzoyNVrOH3QrKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNjkyMw==", "bodyText": "@valfirst  since we're running on 15, could we use it for the tests, and the baseline for the rest? In this case, we could start to use text blocks for cases like this", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527706923", "createdAt": "2020-11-20T13:57:25Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/test/java/org/vividus/zephyr/databind/TestCaseDeserializerTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.databind;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TestCaseDeserializerTests\n+{\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @Mock\n+    private JsonParser parser;\n+\n+    @Mock\n+    private ObjectCodec objectCodec;\n+\n+    private final TestCaseDeserializer deserializer = new TestCaseDeserializer();\n+\n+    @BeforeEach\n+    void init()\n+    {\n+        when(parser.getCodec()).thenReturn(objectCodec);\n+    }\n+\n+    @Test\n+    void testDeserialize() throws IOException\n+    {\n+        JsonNode root = MAPPER.readTree(\"{\\\"status\\\" : \\\"failed\\\", \\\"labels\\\" : [{\\\"name\\\" : \\\"testCaseId\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832ee5d40ae6314b437416ab7188fba196cbb7de"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODgwOTgxOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowMjo0NlrOH3Q3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowMjo0NlrOH3Q3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxMDEzOA==", "bodyText": "Looks like a place for custom FileVisitor to me :)", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527710138", "createdAt": "2020-11-20T14:02:46Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterProperties;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.facade.IZephyrFacade;\n+import org.vividus.zephyr.facade.ZephyrFacade;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private final JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.zephyrFacade = zephyrFacade;\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n+    }\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        objectMapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        objectMapper.registerModule(new SimpleModule().addDeserializer(TestCase.class, new TestCaseDeserializer()));\n+\n+        List<TestCase> testCases = parseJsonResultsFile(getJsonResultsFiles(), objectMapper);\n+        notEmpty(testCases, \"There are not any test cases for exporting\",\n+                zephyrExporterProperties.getSourceDirectory());\n+        LOGGER.info(\"Test cases: {}\", testCases);\n+        Map<String, TreeSet<TestCaseStatus>> testCasesMap = testCases.stream()\n+                .collect(Collectors.groupingBy(TestCase::getKey,\n+                        Collectors.mapping(TestCase::getStatus, Collectors.toCollection(TreeSet::new))));\n+\n+        List<TestCase> testCasesForImporting = new ArrayList<>();\n+        for (Map.Entry<String, TreeSet<TestCaseStatus>> entry : testCasesMap.entrySet())\n+        {\n+            testCasesForImporting.add(new TestCase(entry.getKey(), entry.getValue().first()));\n+        }\n+        LOGGER.info(\"Test cases for exporting to JIRA: {}\", testCasesForImporting);\n+        ZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\n+        for (TestCase testCase : testCasesForImporting)\n+        {\n+            createNewTestExecution(testCase, configuration, objectMapper);\n+        }\n+    }\n+\n+    private List<File> getJsonResultsFiles() throws IOException\n+    {\n+        List<File> jsonFiles = Files.walk(zephyrExporterProperties.getSourceDirectory())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832ee5d40ae6314b437416ab7188fba196cbb7de"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODgyNjczOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowNzoxMFrOH3RB8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDowOTozNFrOH3RHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxMjc1Mg==", "bodyText": "It is doable via jsonpath?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527712752", "createdAt": "2020-11-20T14:07:10Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setTestStatusPerZephyrIdMapping(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        return project.getVersions()\n+                .stream()\n+                .filter(v -> zephyrExporterConfiguration.getVersionName().equals(v.getName()))\n+                .findFirst()\n+                .map(Version::getId)\n+                .orElseThrow(() -> new IllegalArgumentException(String.format(\n+                        \"Version with name '%s' does not exist\", zephyrExporterConfiguration.getVersionName())));\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832ee5d40ae6314b437416ab7188fba196cbb7de"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxNDE4Mg==", "bodyText": "I can't do it with json path :(\n#1109 (comment)", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r527714182", "createdAt": "2020-11-20T14:09:34Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setTestStatusPerZephyrIdMapping(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        return project.getVersions()\n+                .stream()\n+                .filter(v -> zephyrExporterConfiguration.getVersionName().equals(v.getName()))\n+                .findFirst()\n+                .map(Version::getId)\n+                .orElseThrow(() -> new IllegalArgumentException(String.format(\n+                        \"Version with name '%s' does not exist\", zephyrExporterConfiguration.getVersionName())));\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxMjc1Mg=="}, "originalCommit": {"oid": "832ee5d40ae6314b437416ab7188fba196cbb7de"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTY0MTAyOnYy", "diffSide": "RIGHT", "path": "docs/modules/plugins/pages/table-transformers.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoyMTowMFrOH6kqYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoyMTowMFrOH6kqYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MDEyOA==", "bodyText": "I think this file was committed accidentally", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r531180128", "createdAt": "2020-11-26T18:21:00Z", "author": {"login": "valfirst"}, "path": "docs/modules/plugins/pages/table-transformers.html", "diffHunk": "@@ -0,0 +1,984 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dba412fb063aaae6ffbdd14ced05c412a948cf7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDg4MzI2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrExporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODowNjoyOVrOH8cRNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODowNjoyOVrOH8cRNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzOTc2Nw==", "bodyText": "why do you need = in all above messages?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r533139767", "createdAt": "2020-12-01T08:06:29Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.configuration;\n+\n+import java.util.Map;\n+\n+import javax.validation.constraints.NotBlank;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.ConstructorBinding;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+@ConstructorBinding\n+@ConfigurationProperties(\"zephyr\")\n+public class ZephyrExporterConfiguration\n+{\n+    @NotBlank(message = \"Property 'zephyr.project-key=' should not be empty\")\n+    private final String projectKey;\n+\n+    @NotBlank(message = \"Property 'zephyr.version-name=' should not be empty\")\n+    private final String versionName;\n+\n+    @NotBlank(message = \"Property 'zephyr.cycle-name=' should not be empty\")\n+    private final String cycleName;\n+\n+    @NotBlank(message = \"Property 'zephyr.folder-name=' should not be empty\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781f1320ccb31b7cc6ae1e160d8557b952de7faf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTAyMTY5OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODo0Mzo1OFrOH8dkKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTowMTo0MFrOH8ewXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MTAwMQ==", "bodyText": "map.getKey() - can produce empty result?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r533161001", "createdAt": "2020-12-01T08:43:58Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setTestStatusPerZephyrIdMapping(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        return project.getVersions()\n+                .stream()\n+                .filter(v -> zephyrExporterConfiguration.getVersionName().equals(v.getName()))\n+                .findFirst()\n+                .map(Version::getId)\n+                .orElseThrow(() -> new IllegalArgumentException(String.format(\n+                        \"Version with name '%s' does not exist\", zephyrExporterConfiguration.getVersionName())));\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())\n+        {\n+            Map.Entry<String, Map<String, String>> map = itr.next();\n+            if (map.getValue().get(\"name\").equals(zephyrExporterConfiguration.getCycleName()))\n+            {\n+                cycleId = map.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781f1320ccb31b7cc6ae1e160d8557b952de7faf"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4MDUwOQ==", "bodyText": "I think no", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r533180509", "createdAt": "2020-12-01T09:01:40Z", "author": {"login": "abudevich"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/facade/ZephyrFacade.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.facade;\n+\n+import static org.apache.commons.lang3.Validate.notBlank;\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.IOException;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.vividus.jira.JiraClient;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.Project;\n+import org.vividus.jira.model.Version;\n+import org.vividus.util.json.JsonPathUtils;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterConfiguration;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+\n+public class ZephyrFacade implements IZephyrFacade\n+{\n+    private static final String ZAPI_ENDPOINT = \"/rest/zapi/latest/\";\n+\n+    private final JiraFacade jiraFacade;\n+    private final JiraClient client;\n+    private final ZephyrExporterConfiguration zephyrExporterConfiguration;\n+\n+    public ZephyrFacade(JiraFacade jiraFacade, JiraClient jiraClient,\n+            ZephyrExporterConfiguration zephyrExporterConfiguration)\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.client = jiraClient;\n+        this.zephyrExporterConfiguration = zephyrExporterConfiguration;\n+    }\n+\n+    @Override\n+    public Integer createExecution(String execution) throws IOException\n+    {\n+        String responseBody = client.executePost(ZAPI_ENDPOINT + \"execution/\", execution);\n+        List<Integer> executionId = JsonPathUtils.getData(responseBody, \"$..id\");\n+        return executionId.get(0);\n+    }\n+\n+    @Override\n+    public void updateExecutionStatus(int executionId, String executionBody) throws IOException\n+    {\n+        client.executePut(String.format(ZAPI_ENDPOINT + \"execution/%s/execute\", executionId), executionBody);\n+    }\n+\n+    @Override\n+    public ZephyrConfiguration prepareConfiguration() throws IOException\n+    {\n+        ZephyrConfiguration zephyrConfiguration = new ZephyrConfiguration();\n+\n+        Project project = jiraFacade.getProject(zephyrExporterConfiguration.getProjectKey());\n+        String projectId = project.getId();\n+        zephyrConfiguration.setProjectId(projectId);\n+\n+        String versionId = findVersionId(project);\n+        zephyrConfiguration.setVersionId(versionId);\n+\n+        String projectAndVersionUrlQuery = String.format(\"projectId=%s&versionId=%s\", projectId, versionId);\n+\n+        String cycleId = findCycleId(projectAndVersionUrlQuery);\n+        zephyrConfiguration.setCycleId(cycleId);\n+\n+        String folderId = findFolderId(cycleId, projectAndVersionUrlQuery);\n+        zephyrConfiguration.setFolderId(folderId);\n+\n+        Map<TestCaseStatus, Integer> statusIdMap = getExecutionStatuses();\n+        zephyrConfiguration.setTestStatusPerZephyrIdMapping(statusIdMap);\n+\n+        return zephyrConfiguration;\n+    }\n+\n+    private String findVersionId(Project project)\n+    {\n+        return project.getVersions()\n+                .stream()\n+                .filter(v -> zephyrExporterConfiguration.getVersionName().equals(v.getName()))\n+                .findFirst()\n+                .map(Version::getId)\n+                .orElseThrow(() -> new IllegalArgumentException(String.format(\n+                        \"Version with name '%s' does not exist\", zephyrExporterConfiguration.getVersionName())));\n+    }\n+\n+    private String findCycleId(String projectAndVersionUrlQuery) throws IOException\n+    {\n+        String json = client.executeGet(ZAPI_ENDPOINT + \"cycle?\" + projectAndVersionUrlQuery);\n+        Map<String, Map<String, String>> cycles = JsonPathUtils.getData(json, \"$\");\n+        cycles.remove(\"recordsCount\");\n+        Iterator<Map.Entry<String, Map<String, String>>> itr = cycles.entrySet().iterator();\n+        String cycleId = \"\";\n+        while (itr.hasNext())\n+        {\n+            Map.Entry<String, Map<String, String>> map = itr.next();\n+            if (map.getValue().get(\"name\").equals(zephyrExporterConfiguration.getCycleName()))\n+            {\n+                cycleId = map.getKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MTAwMQ=="}, "originalCommit": {"oid": "781f1320ccb31b7cc6ae1e160d8557b952de7faf"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzUxNzU4OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrFileVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTo0OTozNFrOH-XONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTo0OTozNFrOH-XONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE1NDIyOA==", "bodyText": "file.toFile()?", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r535154228", "createdAt": "2020-12-03T11:49:34Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrFileVisitor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.configuration;\n+\n+import static java.nio.file.FileVisitResult.CONTINUE;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ZephyrFileVisitor extends SimpleFileVisitor<Path>\n+{\n+    private static final String JSON_FILE_SUFFIX = \".json\";\n+    private static final String TEST_CASES_DIRECTORY = \"test-cases\";\n+\n+    private List<File> files = new ArrayList<>();\n+\n+    @Override\n+    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException\n+    {\n+        String path = file.toString();\n+        if (file.getFileName().toString().endsWith(JSON_FILE_SUFFIX) && path.contains(TEST_CASES_DIRECTORY))\n+        {\n+            files.add(new File(path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1673d310a30fd2e7ea3b1c25b5e5f0849a197c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzU5OTA3OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjowNDoyOFrOH-YB-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjowNzo0NlrOH-YOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE2NzQ4MQ==", "bodyText": "I propose to move this parsing logic into a separate class, this will make code cleaner and simpler", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r535167481", "createdAt": "2020-12-03T12:04:28Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterProperties;\n+import org.vividus.zephyr.configuration.ZephyrFileVisitor;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.facade.IZephyrFacade;\n+import org.vividus.zephyr.facade.ZephyrFacade;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private final JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.zephyrFacade = zephyrFacade;\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n+    }\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1673d310a30fd2e7ea3b1c25b5e5f0849a197c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MDU3OQ==", "bodyText": "public void exportResults()\n{\nList<TestCase> testCasesForImporting = someParser.createTestCases(...);\nZephyrConfiguration configuration = zephyrFacade.prepareConfiguration();\nfor (TestCase testCase : testCasesForImporting)\n        {\n            createNewTestExecution(testCase, configuration, objectMapper);\n        }\n}", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r535170579", "createdAt": "2020-12-03T12:07:46Z", "author": {"login": "ikalinin1"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/exporter/ZephyrExporter.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.exporter;\n+\n+import static org.apache.commons.lang3.Validate.notEmpty;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.jira.JiraFacade;\n+import org.vividus.jira.model.JiraEntity;\n+import org.vividus.zephyr.configuration.ZephyrConfiguration;\n+import org.vividus.zephyr.configuration.ZephyrExporterProperties;\n+import org.vividus.zephyr.configuration.ZephyrFileVisitor;\n+import org.vividus.zephyr.databind.TestCaseDeserializer;\n+import org.vividus.zephyr.facade.IZephyrFacade;\n+import org.vividus.zephyr.facade.ZephyrFacade;\n+import org.vividus.zephyr.model.ExecutionStatus;\n+import org.vividus.zephyr.model.TestCase;\n+import org.vividus.zephyr.model.TestCaseStatus;\n+import org.vividus.zephyr.model.ZephyrExecution;\n+\n+public class ZephyrExporter\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZephyrExporter.class);\n+\n+    private final JiraFacade jiraFacade;\n+    private IZephyrFacade zephyrFacade;\n+    private ZephyrExporterProperties zephyrExporterProperties;\n+\n+    public ZephyrExporter(JiraFacade jiraFacade, ZephyrFacade zephyrFacade,\n+            ZephyrExporterProperties zephyrExporterProperties) throws IOException\n+    {\n+        this.jiraFacade = jiraFacade;\n+        this.zephyrFacade = zephyrFacade;\n+        this.zephyrExporterProperties = zephyrExporterProperties;\n+    }\n+\n+    public void exportResults() throws IOException\n+    {\n+        ObjectMapper objectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE2NzQ4MQ=="}, "originalCommit": {"oid": "4e1673d310a30fd2e7ea3b1c25b5e5f0849a197c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Nzc1MDkzOnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozNToxOVrOH-ZgMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozNToxOVrOH-ZgMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5MTYwMg==", "bodyText": "'2.8.0' -> versions.commonsIo", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r535191602", "createdAt": "2020-12-03T12:35:19Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/build.gradle", "diffHunk": "@@ -0,0 +1,33 @@\n+buildscript {\n+    repositories {\n+        gradlePluginPortal()\n+    }\n+    dependencies {\n+        classpath(group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.4.0')\n+    }\n+}\n+apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin\n+apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin\n+\n+project.description = 'Vividus to Zephyr exporter'\n+\n+dependencies {\n+    implementation project(':vividus-util')\n+    implementation project(':vividus-facade-jira')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter')\n+    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-validation')\n+\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+    implementation(group: 'com.google.guava', name: 'guava', version: versions.guava)\n+    implementation(group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3)\n+\n+    testImplementation platform(group: 'org.junit', name: 'junit-bom', version: versions.junit)\n+    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter')\n+    testImplementation(group: 'org.hamcrest', name: 'hamcrest', version: versions.hamcrest)\n+    testImplementation(group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito)\n+    testImplementation(group: 'commons-io', name: 'commons-io', version: '2.8.0')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1673d310a30fd2e7ea3b1c25b5e5f0849a197c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Nzc1Njc2OnYy", "diffSide": "RIGHT", "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrFileVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozNjozOVrOH-Zjjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozNjozOVrOH-Zjjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5MjQ2Mg==", "bodyText": "final", "url": "https://github.com/vividus-framework/vividus/pull/1109#discussion_r535192462", "createdAt": "2020-12-03T12:36:39Z", "author": {"login": "uarlouski"}, "path": "vividus-to-zephyr-exporter/src/main/java/org/vividus/zephyr/configuration/ZephyrFileVisitor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.zephyr.configuration;\n+\n+import static java.nio.file.FileVisitResult.CONTINUE;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ZephyrFileVisitor extends SimpleFileVisitor<Path>\n+{\n+    private static final String JSON_FILE_SUFFIX = \".json\";\n+    private static final String TEST_CASES_DIRECTORY = \"test-cases\";\n+\n+    private List<File> files = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1673d310a30fd2e7ea3b1c25b5e5f0849a197c"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 58, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}