{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjA4NjM5", "number": 4340, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozMTowN1rOEnxB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozMjo0NVrOEnxCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTMzMjExOnYy", "diffSide": "RIGHT", "path": "src/com/palmergames/bukkit/towny/tasks/DailyTimerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozMTowN1rOHYh4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozMTowN1rOHYh4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4Mjk0Mw==", "bodyText": "This conditional can be reduced to if (!TownySettings.isTownBankruptcyEnabled() || !TownySettings.doBankruptTownsPayNationTax()) Since you check first if bankruptcy is not enabled, then the only time doBankruptTownsPayNationTax will be checked is if that first conditional is false, and that means bankruptcy has to be enabled.", "url": "https://github.com/TownyAdvanced/Towny/pull/4340#discussion_r495482943", "createdAt": "2020-09-26T18:31:07Z", "author": {"login": "silverwolfg11"}, "path": "src/com/palmergames/bukkit/towny/tasks/DailyTimerTask.java", "diffHunk": "@@ -206,23 +201,69 @@ protected void collectNationTaxes(Nation nation) throws EconomyException {\n \t\t\t\t * exists.\r\n \t\t\t\t * We are running in an Async thread so MUST verify all objects.\r\n \t\t\t\t */\r\n-\t\t\t\tif (townyUniverse.getDataSource().hasTown(town.getName())) {\r\n+\t\t\t\tif (universe.getDataSource().hasTown(town.getName())) {\r\n \t\t\t\t\tif (town.isCapital() || !town.hasUpkeep())\r\n \t\t\t\t\t\tcontinue;\r\n-\t\t\t\t\tif (!town.getAccount().payTo(nation.getTaxes(), nation, \"Nation Tax\")) {\r\n-\t\t\t\t\t\tlocalRemovedTowns.add(town.getName());\t\t\r\n-\t\t\t\t\t\ttown.removeNation();\r\n+\t\t\t\t\tif (town.getAccount().canPayFromHoldings(taxAmount)) {\r\n+\t\t\t\t\t// Town is able to pay the nation's tax.\r\n+\t\t\t\t\t\ttown.getAccount().payTo(taxAmount, nation, \"Nation Tax to \" + nation.getName());\r\n+\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, Translation.of(\"msg_payed_nation_tax\", TownyEconomyHandler.getFormattedBalance(taxAmount)));\r\n \t\t\t\t\t} else {\r\n-\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, TownySettings.getPayedTownTaxMsg() + nation.getTaxes());\r\n+\t\t\t\t\t// Town is unable to pay the nation's tax.\r\n+\t\t\t\t\t\tif (!TownySettings.isTownBankruptcyEnabled() || (TownySettings.isTownBankruptcyEnabled() && !TownySettings.doBankruptTownsPayNationTax())) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a30f9b4066c3800ea6948b66c7f38b3037cae77"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTMzMjk5OnYy", "diffSide": "RIGHT", "path": "src/com/palmergames/bukkit/towny/tasks/DailyTimerTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozMjo0NVrOHYh4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODo0Nzo1MlrOHYh9bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MzA0OA==", "bodyText": "I would put this line after the if-statement below since it's not used in that statement below.", "url": "https://github.com/TownyAdvanced/Towny/pull/4340#discussion_r495483048", "createdAt": "2020-09-26T18:32:45Z", "author": {"login": "silverwolfg11"}, "path": "src/com/palmergames/bukkit/towny/tasks/DailyTimerTask.java", "diffHunk": "@@ -206,23 +201,69 @@ protected void collectNationTaxes(Nation nation) throws EconomyException {\n \t\t\t\t * exists.\r\n \t\t\t\t * We are running in an Async thread so MUST verify all objects.\r\n \t\t\t\t */\r\n-\t\t\t\tif (townyUniverse.getDataSource().hasTown(town.getName())) {\r\n+\t\t\t\tif (universe.getDataSource().hasTown(town.getName())) {\r\n \t\t\t\t\tif (town.isCapital() || !town.hasUpkeep())\r\n \t\t\t\t\t\tcontinue;\r\n-\t\t\t\t\tif (!town.getAccount().payTo(nation.getTaxes(), nation, \"Nation Tax\")) {\r\n-\t\t\t\t\t\tlocalRemovedTowns.add(town.getName());\t\t\r\n-\t\t\t\t\t\ttown.removeNation();\r\n+\t\t\t\t\tif (town.getAccount().canPayFromHoldings(taxAmount)) {\r\n+\t\t\t\t\t// Town is able to pay the nation's tax.\r\n+\t\t\t\t\t\ttown.getAccount().payTo(taxAmount, nation, \"Nation Tax to \" + nation.getName());\r\n+\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, Translation.of(\"msg_payed_nation_tax\", TownyEconomyHandler.getFormattedBalance(taxAmount)));\r\n \t\t\t\t\t} else {\r\n-\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, TownySettings.getPayedTownTaxMsg() + nation.getTaxes());\r\n+\t\t\t\t\t// Town is unable to pay the nation's tax.\r\n+\t\t\t\t\t\tif (!TownySettings.isTownBankruptcyEnabled() || (TownySettings.isTownBankruptcyEnabled() && !TownySettings.doBankruptTownsPayNationTax())) {\r\n+\t\t\t\t\t\t// Bankruptcy disabled, remove town for not paying nation tax, \r\n+\t\t\t\t\t\t// OR Bankruptcy enabled but towns aren't allowed to use debt to pay nation tax. \r\n+\t\t\t\t\t\t\tlocalNewlyDelinquentTowns.add(town.getName());\t\t\r\n+\t\t\t\t\t\t\ttown.removeNation();\r\n+\t\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, Translation.of(\"msg_your_town_couldnt_pay_the_nation_tax_of\", TownyEconomyHandler.getFormattedBalance(taxAmount)));\r\n+\t\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t\t// Bankruptcy enabled and towns are allowed to use debt to pay nation tax.\r\n+\t\t\t\t\t\tboolean townWasBankrupt = town.isBankrupt();\r\n+\t\t\t\t\t\ttown.getAccount().setDebtCap(MoneyUtil.getEstimatedValueOfTown(town));\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tif (town.getAccount().getHoldingBalance() - taxAmount < town.getAccount().getDebtCap() * -1) {\r\n+\t\t\t\t\t\t// Towns that would go over their debtcap to pay nation tax, need the amount they pay reduced to what their debt cap can cover.\r\n+\t\t\t\t\t\t// This will result in towns that become fully indebted paying 0 nation tax eventually.\r\n+\t\t\t\t\t\t\ttaxAmount = town.getAccount().getDebtCap() - Math.abs(town.getAccount().getHoldingBalance());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a30f9b4066c3800ea6948b66c7f38b3037cae77"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4NDI3MA==", "bodyText": "Doing the same to the CollectTownCosts saves creating the trueUpkeep variable as well.", "url": "https://github.com/TownyAdvanced/Towny/pull/4340#discussion_r495484270", "createdAt": "2020-09-26T18:47:52Z", "author": {"login": "LlmDl"}, "path": "src/com/palmergames/bukkit/towny/tasks/DailyTimerTask.java", "diffHunk": "@@ -206,23 +201,69 @@ protected void collectNationTaxes(Nation nation) throws EconomyException {\n \t\t\t\t * exists.\r\n \t\t\t\t * We are running in an Async thread so MUST verify all objects.\r\n \t\t\t\t */\r\n-\t\t\t\tif (townyUniverse.getDataSource().hasTown(town.getName())) {\r\n+\t\t\t\tif (universe.getDataSource().hasTown(town.getName())) {\r\n \t\t\t\t\tif (town.isCapital() || !town.hasUpkeep())\r\n \t\t\t\t\t\tcontinue;\r\n-\t\t\t\t\tif (!town.getAccount().payTo(nation.getTaxes(), nation, \"Nation Tax\")) {\r\n-\t\t\t\t\t\tlocalRemovedTowns.add(town.getName());\t\t\r\n-\t\t\t\t\t\ttown.removeNation();\r\n+\t\t\t\t\tif (town.getAccount().canPayFromHoldings(taxAmount)) {\r\n+\t\t\t\t\t// Town is able to pay the nation's tax.\r\n+\t\t\t\t\t\ttown.getAccount().payTo(taxAmount, nation, \"Nation Tax to \" + nation.getName());\r\n+\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, Translation.of(\"msg_payed_nation_tax\", TownyEconomyHandler.getFormattedBalance(taxAmount)));\r\n \t\t\t\t\t} else {\r\n-\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, TownySettings.getPayedTownTaxMsg() + nation.getTaxes());\r\n+\t\t\t\t\t// Town is unable to pay the nation's tax.\r\n+\t\t\t\t\t\tif (!TownySettings.isTownBankruptcyEnabled() || (TownySettings.isTownBankruptcyEnabled() && !TownySettings.doBankruptTownsPayNationTax())) {\r\n+\t\t\t\t\t\t// Bankruptcy disabled, remove town for not paying nation tax, \r\n+\t\t\t\t\t\t// OR Bankruptcy enabled but towns aren't allowed to use debt to pay nation tax. \r\n+\t\t\t\t\t\t\tlocalNewlyDelinquentTowns.add(town.getName());\t\t\r\n+\t\t\t\t\t\t\ttown.removeNation();\r\n+\t\t\t\t\t\t\tTownyMessaging.sendPrefixedTownMessage(town, Translation.of(\"msg_your_town_couldnt_pay_the_nation_tax_of\", TownyEconomyHandler.getFormattedBalance(taxAmount)));\r\n+\t\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t\t// Bankruptcy enabled and towns are allowed to use debt to pay nation tax.\r\n+\t\t\t\t\t\tboolean townWasBankrupt = town.isBankrupt();\r\n+\t\t\t\t\t\ttown.getAccount().setDebtCap(MoneyUtil.getEstimatedValueOfTown(town));\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tif (town.getAccount().getHoldingBalance() - taxAmount < town.getAccount().getDebtCap() * -1) {\r\n+\t\t\t\t\t\t// Towns that would go over their debtcap to pay nation tax, need the amount they pay reduced to what their debt cap can cover.\r\n+\t\t\t\t\t\t// This will result in towns that become fully indebted paying 0 nation tax eventually.\r\n+\t\t\t\t\t\t\ttaxAmount = town.getAccount().getDebtCap() - Math.abs(town.getAccount().getHoldingBalance());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MzA0OA=="}, "originalCommit": {"oid": "7a30f9b4066c3800ea6948b66c7f38b3037cae77"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1221, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}