{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTQxMjAy", "number": 4537, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzo1NToyOFrOFByl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMToyMVrOFDcQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDIxNzgxOnYy", "diffSide": "RIGHT", "path": "src/com/palmergames/bukkit/towny/war/flagwar/listeners/TownyCommonListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzo1NToyOVrOIAn1tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODo1MjowOVrOIA1amg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUyMzYzNw==", "bodyText": "On a previous change (maybe neutrality toggling) I put in returns after the event.setCancelled(true), just in case this first statement and the following statement were both true, the 2nd cancellation message would override the first.", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r537523637", "createdAt": "2020-12-07T13:55:29Z", "author": {"login": "LlmDl"}, "path": "src/com/palmergames/bukkit/towny/war/flagwar/listeners/TownyCommonListener.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.palmergames.bukkit.towny.war.flagwar.listeners;\r\n+\r\n+import com.palmergames.bukkit.towny.TownySettings;\r\n+import com.palmergames.bukkit.towny.object.Translation;\r\n+import com.palmergames.bukkit.towny.war.common.events.WarPreUnclaimEvent;\r\n+import com.palmergames.bukkit.towny.war.flagwar.FlagWar;\r\n+import org.bukkit.event.EventHandler;\r\n+import org.bukkit.event.EventPriority;\r\n+import org.bukkit.event.Listener;\r\n+\r\n+/**\r\n+ * Listener for processing events from Towny's Common War Events.\r\n+ */\r\n+public class TownyCommonListener implements Listener {\r\n+\r\n+  @EventHandler (priority= EventPriority.HIGH)\r\n+  private void onWarPreUnclaim(WarPreUnclaimEvent event) {\r\n+    if (FlagWar.isUnderAttack(event.getTown()) && TownySettings.isFlaggedInteractionTown()) {\r\n+      event.setCancelMessage(Translation.of(\"msg_war_flag_deny_town_under_attack\"));\r\n+      event.setCancelled(true);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f0c93c3e8afd4c92a18e10a213b7e431b2eebf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0NjA3NA==", "bodyText": "I don't think it was the Neutrality toggles, but I see what you're saying there.", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r537746074", "createdAt": "2020-12-07T18:52:09Z", "author": {"login": "TheFlagCourier"}, "path": "src/com/palmergames/bukkit/towny/war/flagwar/listeners/TownyCommonListener.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.palmergames.bukkit.towny.war.flagwar.listeners;\r\n+\r\n+import com.palmergames.bukkit.towny.TownySettings;\r\n+import com.palmergames.bukkit.towny.object.Translation;\r\n+import com.palmergames.bukkit.towny.war.common.events.WarPreUnclaimEvent;\r\n+import com.palmergames.bukkit.towny.war.flagwar.FlagWar;\r\n+import org.bukkit.event.EventHandler;\r\n+import org.bukkit.event.EventPriority;\r\n+import org.bukkit.event.Listener;\r\n+\r\n+/**\r\n+ * Listener for processing events from Towny's Common War Events.\r\n+ */\r\n+public class TownyCommonListener implements Listener {\r\n+\r\n+  @EventHandler (priority= EventPriority.HIGH)\r\n+  private void onWarPreUnclaim(WarPreUnclaimEvent event) {\r\n+    if (FlagWar.isUnderAttack(event.getTown()) && TownySettings.isFlaggedInteractionTown()) {\r\n+      event.setCancelMessage(Translation.of(\"msg_war_flag_deny_town_under_attack\"));\r\n+      event.setCancelled(true);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUyMzYzNw=="}, "originalCommit": {"oid": "39f0c93c3e8afd4c92a18e10a213b7e431b2eebf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mzc2MDg4OnYy", "diffSide": "RIGHT", "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjo0NzoyNlrOIB_vaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowNDoyNlrOIC0i_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2MzgxNg==", "bodyText": "Complete TODO.", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r538963816", "createdAt": "2020-12-09T02:47:26Z", "author": {"login": "LlmDl"}, "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "diffHunk": "@@ -626,32 +626,25 @@ public void removeResident(Resident resident) {\n \n \t@Override\n \tpublic void removeTownBlock(TownBlock townBlock) {\n+\t\tTown town = null;\n+\t\ttry {\n+\t\t\ttown = townBlock.getTown();\n+\t\t} catch (NotRegisteredException e) {\n+\t\t\t// TODO: Log why a TownBlock would not have a town.\n+\t\t\t// If there is not an associated town, it's probably not a valid TownBlock. Should we return?\n+\t\t}\n \n-\t\tTownPreUnclaimEvent event = new TownPreUnclaimEvent(townBlock);\n+\t\tTownPreUnclaimEvent event = new TownPreUnclaimEvent(town, townBlock);\n \t\tBukkitTools.getPluginManager().callEvent(event);\n \t\t\n-\t\tif (event.isCancelled())\n+\t\tif (event.isCancelled() || town == null) {\n+\t\t\tSystem.out.println(event.getCancelMessage()); //TODO: Replace with a Log4J logger.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7ab9bac430b6489dc9b1bb19622220a1bb8242"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyODk4OA==", "bodyText": "Should be resolved as of 3c64903 (#4537)", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r539828988", "createdAt": "2020-12-10T04:04:26Z", "author": {"login": "TheFlagCourier"}, "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "diffHunk": "@@ -626,32 +626,25 @@ public void removeResident(Resident resident) {\n \n \t@Override\n \tpublic void removeTownBlock(TownBlock townBlock) {\n+\t\tTown town = null;\n+\t\ttry {\n+\t\t\ttown = townBlock.getTown();\n+\t\t} catch (NotRegisteredException e) {\n+\t\t\t// TODO: Log why a TownBlock would not have a town.\n+\t\t\t// If there is not an associated town, it's probably not a valid TownBlock. Should we return?\n+\t\t}\n \n-\t\tTownPreUnclaimEvent event = new TownPreUnclaimEvent(townBlock);\n+\t\tTownPreUnclaimEvent event = new TownPreUnclaimEvent(town, townBlock);\n \t\tBukkitTools.getPluginManager().callEvent(event);\n \t\t\n-\t\tif (event.isCancelled())\n+\t\tif (event.isCancelled() || town == null) {\n+\t\t\tSystem.out.println(event.getCancelMessage()); //TODO: Replace with a Log4J logger.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2MzgxNg=="}, "originalCommit": {"oid": "bb7ab9bac430b6489dc9b1bb19622220a1bb8242"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODIzOTgyOnYy", "diffSide": "RIGHT", "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDozOTo0OVrOICoeyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTo1Nzo1MlrOIDFuMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMTMwNA==", "bodyText": "if it has no valid town it should be nuked still (I don't think townless townblocks are possible anyways nowadays.)", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r539631304", "createdAt": "2020-12-09T20:39:49Z", "author": {"login": "LlmDl"}, "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "diffHunk": "@@ -626,32 +626,25 @@ public void removeResident(Resident resident) {\n \n \t@Override\n \tpublic void removeTownBlock(TownBlock townBlock) {\n+\t\tTown town = null;\n+\t\ttry {\n+\t\t\ttown = townBlock.getTown();\n+\t\t} catch (NotRegisteredException e) {\n+\t\t\t// TODO: Log why a TownBlock would not have a town.\n+\t\t\t// If there is not an associated town, it's probably not a valid TownBlock. Should we return?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7ab9bac430b6489dc9b1bb19622220a1bb8242"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTI5NQ==", "bodyText": "Should now log as an error, with an early return.", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r539829295", "createdAt": "2020-12-10T04:05:34Z", "author": {"login": "TheFlagCourier"}, "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "diffHunk": "@@ -626,32 +626,25 @@ public void removeResident(Resident resident) {\n \n \t@Override\n \tpublic void removeTownBlock(TownBlock townBlock) {\n+\t\tTown town = null;\n+\t\ttry {\n+\t\t\ttown = townBlock.getTown();\n+\t\t} catch (NotRegisteredException e) {\n+\t\t\t// TODO: Log why a TownBlock would not have a town.\n+\t\t\t// If there is not an associated town, it's probably not a valid TownBlock. Should we return?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMTMwNA=="}, "originalCommit": {"oid": "bb7ab9bac430b6489dc9b1bb19622220a1bb8242"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMDM4Ng==", "bodyText": "By nuking, I meant it should be removed. Any townblock missing a town has to get removed otherwise we end up with ghost-townblocks. The return can be removed from here, I've made a separate comment about the TownPreUnclaimEvent having the town annotated as well.", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r540110386", "createdAt": "2020-12-10T11:57:52Z", "author": {"login": "LlmDl"}, "path": "src/com/palmergames/bukkit/towny/db/TownyDatabaseHandler.java", "diffHunk": "@@ -626,32 +626,25 @@ public void removeResident(Resident resident) {\n \n \t@Override\n \tpublic void removeTownBlock(TownBlock townBlock) {\n+\t\tTown town = null;\n+\t\ttry {\n+\t\t\ttown = townBlock.getTown();\n+\t\t} catch (NotRegisteredException e) {\n+\t\t\t// TODO: Log why a TownBlock would not have a town.\n+\t\t\t// If there is not an associated town, it's probably not a valid TownBlock. Should we return?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMTMwNA=="}, "originalCommit": {"oid": "bb7ab9bac430b6489dc9b1bb19622220a1bb8242"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTUyOTY5OnYy", "diffSide": "RIGHT", "path": "src/com/palmergames/bukkit/towny/event/town/TownPreUnclaimEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMToyMVrOIDF2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNDo0M1rOIDfXfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMjUyOA==", "bodyText": "This should get an @nullable annotation on it to handle the cases where townless-townblocks are being removed, or alternatively, no event should be fired if the removeTownBlock() method has a null town.", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r540112528", "createdAt": "2020-12-10T12:01:21Z", "author": {"login": "LlmDl"}, "path": "src/com/palmergames/bukkit/towny/event/town/TownPreUnclaimEvent.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.palmergames.bukkit.towny.event.town;\r\n+\r\n+import com.palmergames.bukkit.towny.object.Town;\r\n+import com.palmergames.bukkit.towny.object.TownBlock;\r\n+import com.palmergames.bukkit.towny.object.Translation;\r\n+import org.bukkit.Bukkit;\r\n+import org.bukkit.event.Cancellable;\r\n+import org.bukkit.event.Event;\r\n+import org.bukkit.event.HandlerList;\r\n+import org.jetbrains.annotations.NotNull;\r\n+\r\n+\r\n+public class TownPreUnclaimEvent extends Event implements Cancellable {\r\n+\r\n+    private static final HandlerList handlers = new HandlerList();\r\n+    private final TownBlock townBlock;\r\n+    private final Town town;\r\n+    private boolean isCancelled = false;\r\n+    private String cancelMessage = Translation.of(\"msg_err_town_unclaim_canceled\");\r\n+\r\n+    @NotNull\r\n+    @Override\r\n+    public HandlerList getHandlers() {\r\n+        return getHandlerList();\r\n+    }\r\n+    \r\n+    public static HandlerList getHandlerList() {\r\n+\t\treturn handlers;\r\n+\t}\r\n+\r\n+    /**\r\n+     * Event thrown prior to a {@link TownBlock} being unclaimed by a {@link Town}.\r\n+     * <p>\r\n+     * This is cancellable but it is probably not a good idea to do\r\n+     * so without testing.\r\n+     *\r\n+     * @param town The Town unclaiming the TownBlock.\r\n+     * @param townBlock The TownBlock that will be unclaimed.\r\n+     */\r\n+    public TownPreUnclaimEvent(Town town, TownBlock townBlock) {\r\n+        super(!Bukkit.getServer().isPrimaryThread());\r\n+        this.town = town;\r\n+        this.townBlock = townBlock;\r\n+\r\n+        // Don't even bother with things if town is null.\r\n+        if (this.town == null){\r\n+            this.cancelMessage = Translation.of(\"msg_area_not_recog\");\r\n+            setCancelled(true);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @return Check if the event is cancelled or not, yet.\r\n+     */\r\n+    @Override\r\n+    public boolean isCancelled() {\r\n+        return isCancelled;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param cancelled The incoming boolean that sets if the event is to be cancelled.\r\n+     */\r\n+    @Override\r\n+    public void setCancelled(boolean cancelled) {\r\n+        isCancelled = cancelled;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the {@link Town}.\r\n+     */\r\n+    public Town getTown() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c649034d2f98f28eb0fce1a38c4437d5b265505"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDU1Nw==", "bodyText": "Given that there's 28 instances of removeTownBlock() being declared or called (not counting instances in comments and the changelog), I've opted for the shorter route. I'm a tired dunce right now, forgot that's the method I'm working with in TDH...", "url": "https://github.com/TownyAdvanced/Towny/pull/4537#discussion_r540530557", "createdAt": "2020-12-10T22:04:43Z", "author": {"login": "TheFlagCourier"}, "path": "src/com/palmergames/bukkit/towny/event/town/TownPreUnclaimEvent.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.palmergames.bukkit.towny.event.town;\r\n+\r\n+import com.palmergames.bukkit.towny.object.Town;\r\n+import com.palmergames.bukkit.towny.object.TownBlock;\r\n+import com.palmergames.bukkit.towny.object.Translation;\r\n+import org.bukkit.Bukkit;\r\n+import org.bukkit.event.Cancellable;\r\n+import org.bukkit.event.Event;\r\n+import org.bukkit.event.HandlerList;\r\n+import org.jetbrains.annotations.NotNull;\r\n+\r\n+\r\n+public class TownPreUnclaimEvent extends Event implements Cancellable {\r\n+\r\n+    private static final HandlerList handlers = new HandlerList();\r\n+    private final TownBlock townBlock;\r\n+    private final Town town;\r\n+    private boolean isCancelled = false;\r\n+    private String cancelMessage = Translation.of(\"msg_err_town_unclaim_canceled\");\r\n+\r\n+    @NotNull\r\n+    @Override\r\n+    public HandlerList getHandlers() {\r\n+        return getHandlerList();\r\n+    }\r\n+    \r\n+    public static HandlerList getHandlerList() {\r\n+\t\treturn handlers;\r\n+\t}\r\n+\r\n+    /**\r\n+     * Event thrown prior to a {@link TownBlock} being unclaimed by a {@link Town}.\r\n+     * <p>\r\n+     * This is cancellable but it is probably not a good idea to do\r\n+     * so without testing.\r\n+     *\r\n+     * @param town The Town unclaiming the TownBlock.\r\n+     * @param townBlock The TownBlock that will be unclaimed.\r\n+     */\r\n+    public TownPreUnclaimEvent(Town town, TownBlock townBlock) {\r\n+        super(!Bukkit.getServer().isPrimaryThread());\r\n+        this.town = town;\r\n+        this.townBlock = townBlock;\r\n+\r\n+        // Don't even bother with things if town is null.\r\n+        if (this.town == null){\r\n+            this.cancelMessage = Translation.of(\"msg_area_not_recog\");\r\n+            setCancelled(true);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @return Check if the event is cancelled or not, yet.\r\n+     */\r\n+    @Override\r\n+    public boolean isCancelled() {\r\n+        return isCancelled;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param cancelled The incoming boolean that sets if the event is to be cancelled.\r\n+     */\r\n+    @Override\r\n+    public void setCancelled(boolean cancelled) {\r\n+        isCancelled = cancelled;\r\n+    }\r\n+    \r\n+    /**\r\n+     * @return the {@link Town}.\r\n+     */\r\n+    public Town getTown() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMjUyOA=="}, "originalCommit": {"oid": "3c649034d2f98f28eb0fce1a38c4437d5b265505"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1203, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}