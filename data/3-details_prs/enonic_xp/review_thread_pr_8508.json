{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MjI0NzU2", "number": 8508, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToxNjowN1rOE96pnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToxNjowN1rOE96pnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzU5NTE2OnYy", "diffSide": "RIGHT", "path": "modules/core/core-app/src/main/java/com/enonic/xp/core/impl/app/ApplicationLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToxNjowN1rOH62i8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToxNjowN1rOH62i8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MzEzOQ==", "bodyText": "can be replaced by UncheckedIOException", "url": "https://github.com/enonic/xp/pull/8508#discussion_r531473139", "createdAt": "2020-11-27T09:16:07Z", "author": {"login": "anatol-sialitski"}, "path": "modules/core/core-app/src/main/java/com/enonic/xp/core/impl/app/ApplicationLoader.java", "diffHunk": "@@ -21,51 +24,84 @@ public ApplicationLoader( final Consumer<Event> eventConsumer )\n         this.eventConsumer = eventConsumer;\n     }\n \n-    public ByteSource load( URL url )\n+    public ByteSource load( final URL url, final byte[] messageDigest )\n     {\n         try\n         {\n-            URLConnection connection = url.openConnection();\n+            final URLConnection connection = url.openConnection();\n \n-            ByteArrayOutputStream os = null;\n-\n-            try (final InputStream is = connection.getInputStream())\n+            final InputStream inputStream = connection.getInputStream();\n+            final DigestInputStream digestInputStream = new DigestInputStream( inputStream, MessageDigests.sha512() );\n+            final ProgressInputStream progressInputStream =\n+                new ProgressInputStream( digestInputStream, connection.getContentLengthLong(), url.toString() );\n+            try (inputStream; digestInputStream; progressInputStream)\n             {\n-                int totalLength = connection.getContentLength();\n-                int bytesRead;\n-                int totalRead = 0;\n-                int lastPct = 0;\n-                byte[] buffer = new byte[8192];\n-                os = new ByteArrayOutputStream();\n-\n-                while ( ( bytesRead = is.read( buffer ) ) != -1 )\n-                {\n-                    os.write( buffer, 0, bytesRead );\n-                    totalRead += bytesRead;\n-\n-                    int currentPct = (int) Math.min( 100, Math.round( totalRead * 100. / totalLength ) );\n-\n-                    if ( lastPct != currentPct )\n-                    {\n-                        eventConsumer.accept( ApplicationEvents.progress( url.toString(), currentPct ) );\n-                        lastPct = currentPct;\n-                    }\n-                }\n-                os.flush();\n+                final byte[] bytes = progressInputStream.readAllBytes();\n \n-                return ByteSource.wrap( os.toByteArray() );\n-            }\n-            finally\n-            {\n-                if ( os != null )\n+                if ( messageDigest != null && !MessageDigest.isEqual( messageDigest, digestInputStream.getMessageDigest().digest() ) )\n                 {\n-                    os.close();\n+                    throw new IllegalArgumentException( \"MessageDigest does not match\" );\n                 }\n+                return ByteSource.wrap( bytes );\n             }\n         }\n         catch ( IOException e )\n         {\n             throw new RuntimeException( \"Failed to load application from \" + url );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d91ca7a83bd6f5e84c58a4bc32572c04fbf357d"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 970, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}