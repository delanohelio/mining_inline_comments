{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzMyNDIz", "number": 8089, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNTozNVrOD8-Rmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoxNjoxNFrOD9VMTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjYxNDY3OnYy", "diffSide": "RIGHT", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/vacuum/versiontable/VersionTableCleanupTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNTozNVrOGWPb4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNTozNVrOGWPb4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3NDc1Mg==", "bodyText": "For simplicity it can be just boolean", "url": "https://github.com/enonic/xp/pull/8089#discussion_r425974752", "createdAt": "2020-05-15T18:25:35Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/vacuum/versiontable/VersionTableCleanupTask.java", "diffHunk": "@@ -222,4 +208,9 @@ public void setVersionService( final VersionService versionService )\n     {\n         this.versionService = versionService;\n     }\n+\n+    private enum Status\n+    {\n+        NOT_STARTED, IN_PROGRESS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c1b217b2181fba709b10682f48dc4e161a7f28"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjYxNzc0OnYy", "diffSide": "RIGHT", "path": "modules/core/core-api/src/main/java/com/enonic/xp/node/AbstractQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNjozNFrOGWPd0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNzoyOFrOGWp-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3NTI1MA==", "bodyText": "generify Object", "url": "https://github.com/enonic/xp/pull/8089#discussion_r425975250", "createdAt": "2020-05-15T18:26:34Z", "author": {"login": "rymsha"}, "path": "modules/core/core-api/src/main/java/com/enonic/xp/node/AbstractQuery.java", "diffHunk": "@@ -44,6 +45,8 @@\n \n     private final boolean explain;\n \n+    private final Consumer<Object> batchCallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c1b217b2181fba709b10682f48dc4e161a7f28"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwOTY1Ng==", "bodyText": "Or, for now remove generic <Object>", "url": "https://github.com/enonic/xp/pull/8089#discussion_r426409656", "createdAt": "2020-05-18T07:07:28Z", "author": {"login": "rymsha"}, "path": "modules/core/core-api/src/main/java/com/enonic/xp/node/AbstractQuery.java", "diffHunk": "@@ -44,6 +45,8 @@\n \n     private final boolean explain;\n \n+    private final Consumer<Object> batchCallback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3NTI1MA=="}, "originalCommit": {"oid": "e1c1b217b2181fba709b10682f48dc4e161a7f28"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTY3NDAxOnYy", "diffSide": "RIGHT", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNjo1OFrOGWp9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNjo1OFrOGWp9ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwOTQxMQ==", "bodyText": "should not be here", "url": "https://github.com/enonic/xp/pull/8089#discussion_r426409411", "createdAt": "2020-05-18T07:06:58Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java", "diffHunk": "@@ -2,13 +2,15 @@\n \n import java.time.Duration;\n import java.time.Instant;\n+import java.util.HashSet;\n import java.util.Set;\n+import java.util.function.Consumer;\n import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Sets;\n+import jdk.net.SocketFlow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9cb8ff02850348ffde6ea3fbd39da7aa80cbbdc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjM2OTQzOnYy", "diffSide": "RIGHT", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/vacuum/versiontable/VersionTableCleanupTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoxNjoxNFrOGWwtMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDoxNjoxNFrOGWwtMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxOTg1OA==", "bodyText": "will be better to use isEmpty", "url": "https://github.com/enonic/xp/pull/8089#discussion_r426519858", "createdAt": "2020-05-18T10:16:14Z", "author": {"login": "anatol-sialitski"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/vacuum/versiontable/VersionTableCleanupTask.java", "diffHunk": "@@ -181,28 +147,56 @@ private boolean versionUsedInAnyBranch( final Repository repository, final NodeV\n         return false;\n     }\n \n-    private NodeVersionQuery createQuery( final NodeVersionId lastVersionId )\n+    private NodeVersionQuery createQuery( final Repository repository )\n     {\n         final NodeVersionQuery.Builder builder = NodeVersionQuery.create();\n \n-        if ( lastVersionId != null )\n+        builder.addQueryFilter( RangeFilter.create().\n+            fieldName( VersionIndexPath.TIMESTAMP.getPath() ).\n+            to( ValueFactory.newDateTime( this.until ) ).\n+            build() );\n+\n+        builder.size( -1 ).\n+            batchSize( 100 ).\n+            batchCallback( result -> this.handleBatchCallback( (SearchResult) result, repository, builder.build() ) );\n+\n+        return builder.build();\n+    }\n+\n+    private void handleBatchCallback( final SearchResult searchResult, final Repository repository,\n+                                      final NodeVersionQuery nodeVersionQuery )\n+    {\n+        final List<NodeVersionDocumentId> toBeDeleted = Lists.newArrayList();\n+\n+        final long versionTotal = searchResult.getTotalHits();\n+        if ( !this.repositoryCleanStarted )\n         {\n-            final RangeFilter versionIdFilter = RangeFilter.create().\n-                fieldName( VersionIndexPath.VERSION_ID.getPath() ).\n-                from( ValueFactory.newString( lastVersionId.toString() ) ).\n-                build();\n-            builder.addQueryFilter( versionIdFilter );\n+            if ( listener != null )\n+            {\n+                listener.vacuumingVersionRepository( repository.getId(), versionTotal );\n+\n+            }\n+            this.repositoryCleanStarted = true;\n         }\n \n-        final RangeFilter mustBeOlderThanFilter = RangeFilter.create().\n-            fieldName( VersionIndexPath.TIMESTAMP.getPath() ).\n-            to( ValueFactory.newDateTime( this.until ) ).\n-            build();\n+        if ( searchResult.getHits().getSize() == 0 )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063581d7b46b4a231c5f3bd1aa588f21a046fea4"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1064, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}