{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDAwNTg5", "number": 8081, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozNTo0M1rOD8VANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozNTo0M1rOD8VANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg1MjY5OnYy", "diffSide": "RIGHT", "path": "modules/admin/admin-impl/src/test/java/com/enonic/xp/admin/impl/rest/resource/content/ComponentNameResolverImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozNTo0M1rOGVMqyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTowNjo0MlrOGVTAfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MDg0Mw==", "bodyText": "Missing test annotation", "url": "https://github.com/enonic/xp/pull/8081#discussion_r424880843", "createdAt": "2020-05-14T05:35:43Z", "author": {"login": "rymsha"}, "path": "modules/admin/admin-impl/src/test/java/com/enonic/xp/admin/impl/rest/resource/content/ComponentNameResolverImplTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.enonic.xp.admin.impl.rest.resource.content;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.content.Content;\n+import com.enonic.xp.content.ContentId;\n+import com.enonic.xp.content.ContentNotFoundException;\n+import com.enonic.xp.content.ContentPath;\n+import com.enonic.xp.content.ContentService;\n+import com.enonic.xp.region.ComponentName;\n+import com.enonic.xp.region.FragmentComponent;\n+import com.enonic.xp.region.ImageComponent;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ComponentNameResolverImplTest\n+{\n+    private ComponentNameResolverImpl componentNameResolver;\n+\n+    private ContentService contentService;\n+\n+    @BeforeEach\n+    public void init()\n+    {\n+        componentNameResolver = new ComponentNameResolverImpl();\n+        contentService = Mockito.mock( ContentService.class );\n+\n+        componentNameResolver.setContentService( contentService );\n+    }\n+\n+    @Test\n+    public void testResolveEmptyImageComponent()\n+        throws Exception\n+    {\n+        final ImageComponent imageComponent = ImageComponent.create().build();\n+\n+        final ComponentName result = componentNameResolver.resolve( imageComponent );\n+\n+        assertEquals( imageComponent.getName(), result );\n+    }\n+\n+    @Test\n+    public void testResolveImageComponent()\n+        throws Exception\n+    {\n+        final Content imageContent = createContent();\n+        final ImageComponent imageComponent = ImageComponent.create().image( ContentId.from( \"id\" ) ).build();\n+\n+        Mockito.when( contentService.getById( imageComponent.getImage() ) ).thenReturn( imageContent );\n+\n+        final ComponentName result = componentNameResolver.resolve( imageComponent );\n+\n+        assertEquals( imageContent.getDisplayName(), result.toString() );\n+    }\n+\n+    @Test\n+    public void testResolveMissingImageComponent()\n+        throws Exception\n+    {\n+        final ContentId imageComponentId = ContentId.from( \"imageCompId\" );\n+        final ImageComponent imageComponent = ImageComponent.create().image( imageComponentId ).build();\n+\n+        Mockito.when( contentService.getById( imageComponent.getImage() ) ).thenThrow(\n+            new ContentNotFoundException( imageComponentId, null ) );\n+\n+        final ComponentName result = componentNameResolver.resolve( imageComponent );\n+\n+        assertEquals( imageComponent.getName(), result );\n+    }\n+\n+    public void testResolveEmptyFragmentComponent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48e4b5c4f577553aaacecf8b17f0c710033d379"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDcwMA==", "bodyText": "Updated", "url": "https://github.com/enonic/xp/pull/8081#discussion_r424984700", "createdAt": "2020-05-14T09:06:42Z", "author": {"login": "ashklianko"}, "path": "modules/admin/admin-impl/src/test/java/com/enonic/xp/admin/impl/rest/resource/content/ComponentNameResolverImplTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.enonic.xp.admin.impl.rest.resource.content;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.content.Content;\n+import com.enonic.xp.content.ContentId;\n+import com.enonic.xp.content.ContentNotFoundException;\n+import com.enonic.xp.content.ContentPath;\n+import com.enonic.xp.content.ContentService;\n+import com.enonic.xp.region.ComponentName;\n+import com.enonic.xp.region.FragmentComponent;\n+import com.enonic.xp.region.ImageComponent;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ComponentNameResolverImplTest\n+{\n+    private ComponentNameResolverImpl componentNameResolver;\n+\n+    private ContentService contentService;\n+\n+    @BeforeEach\n+    public void init()\n+    {\n+        componentNameResolver = new ComponentNameResolverImpl();\n+        contentService = Mockito.mock( ContentService.class );\n+\n+        componentNameResolver.setContentService( contentService );\n+    }\n+\n+    @Test\n+    public void testResolveEmptyImageComponent()\n+        throws Exception\n+    {\n+        final ImageComponent imageComponent = ImageComponent.create().build();\n+\n+        final ComponentName result = componentNameResolver.resolve( imageComponent );\n+\n+        assertEquals( imageComponent.getName(), result );\n+    }\n+\n+    @Test\n+    public void testResolveImageComponent()\n+        throws Exception\n+    {\n+        final Content imageContent = createContent();\n+        final ImageComponent imageComponent = ImageComponent.create().image( ContentId.from( \"id\" ) ).build();\n+\n+        Mockito.when( contentService.getById( imageComponent.getImage() ) ).thenReturn( imageContent );\n+\n+        final ComponentName result = componentNameResolver.resolve( imageComponent );\n+\n+        assertEquals( imageContent.getDisplayName(), result.toString() );\n+    }\n+\n+    @Test\n+    public void testResolveMissingImageComponent()\n+        throws Exception\n+    {\n+        final ContentId imageComponentId = ContentId.from( \"imageCompId\" );\n+        final ImageComponent imageComponent = ImageComponent.create().image( imageComponentId ).build();\n+\n+        Mockito.when( contentService.getById( imageComponent.getImage() ) ).thenThrow(\n+            new ContentNotFoundException( imageComponentId, null ) );\n+\n+        final ComponentName result = componentNameResolver.resolve( imageComponent );\n+\n+        assertEquals( imageComponent.getName(), result );\n+    }\n+\n+    public void testResolveEmptyFragmentComponent()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MDg0Mw=="}, "originalCommit": {"oid": "b48e4b5c4f577553aaacecf8b17f0c710033d379"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1059, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}