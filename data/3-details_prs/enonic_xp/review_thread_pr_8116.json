{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTQwMTM1", "number": 8116, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxMDo1N1rOD_t99w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToyMjo0M1rOD_uT0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTQwMDIzOnYy", "diffSide": "RIGHT", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxMDo1N1rOGai5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxMDo1N1rOGai5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4NzkwMA==", "bodyText": "You may simplify code a bit and return ZipDumpReader right here", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430487900", "createdAt": "2020-05-26T15:10:57Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -39,14 +46,56 @@ public static ZipDumpReader create( SystemLoadListener listener, final Path base\n             final SeekableByteChannel seekableByteChannel =\n                 Files.newByteChannel( basePath.resolve( dumpName + \".zip\" ), EnumSet.of( StandardOpenOption.READ ) );\n             final ZipFile zipFile = new ZipFile( seekableByteChannel );\n-            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+\n+            return create( listener, dumpName, zipFile );\n         }\n         catch ( IOException e )\n         {\n             throw new UncheckedIOException( e );\n         }\n     }\n \n+    private static ZipDumpReader create( final SystemLoadListener listener, final String dumpName, final ZipFile zipFile )\n+    {\n+        if ( zipFile.getEntry( \"dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of(), zipFile );\n+        }\n+        else if ( zipFile.getEntry( dumpName + \"/dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+        }\n+        else\n+        {\n+            String rootDumpDir = null;\n+\n+            final Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();\n+\n+            while ( entries.hasMoreElements() )\n+            {\n+                final ZipArchiveEntry entry = entries.nextElement();\n+\n+                final Matcher matcher = ROOT_DUMP_DIR_PATTERN.matcher( entry.getName() );\n+\n+                if ( matcher.find() )\n+                {\n+                    rootDumpDir = matcher.group( 1 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTQzNDI5OnYy", "diffSide": "RIGHT", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxODo0OVrOGajPbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMjoxNVrOGatKSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MzU1MQ==", "bodyText": "Missing $ at the and. Without it a/dump.jsons would match, for ex. (this is why it is also better to use matches\nAlso . must be escaped", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430493551", "createdAt": "2020-05-26T15:18:49Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -19,11 +22,15 @@\n import com.enonic.xp.dump.SystemLoadListener;\n import com.enonic.xp.repo.impl.dump.DefaultFilePaths;\n import com.enonic.xp.repo.impl.dump.PathRef;\n+import com.enonic.xp.repo.impl.dump.RepoLoadException;\n import com.enonic.xp.repo.impl.dump.blobstore.ZipDumpReadBlobStore;\n \n public class ZipDumpReader\n     extends AbstractDumpReader\n {\n+\n+    private static final Pattern ROOT_DUMP_DIR_PATTERN = Pattern.compile( \"^([^/]+)\\\\/dump.json\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMzk0OQ==", "bodyText": "The symbol $ was added. I did not catch about .. What you mean?", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430633949", "createdAt": "2020-05-26T18:52:07Z", "author": {"login": "anatol-sialitski"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -19,11 +22,15 @@\n import com.enonic.xp.dump.SystemLoadListener;\n import com.enonic.xp.repo.impl.dump.DefaultFilePaths;\n import com.enonic.xp.repo.impl.dump.PathRef;\n+import com.enonic.xp.repo.impl.dump.RepoLoadException;\n import com.enonic.xp.repo.impl.dump.blobstore.ZipDumpReadBlobStore;\n \n public class ZipDumpReader\n     extends AbstractDumpReader\n {\n+\n+    private static final Pattern ROOT_DUMP_DIR_PATTERN = Pattern.compile( \"^([^/]+)\\\\/dump.json\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MzU1MQ=="}, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MDc0NQ==", "bodyText": "dump.json matches dump?json because . is any symbol.", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430650745", "createdAt": "2020-05-26T19:22:09Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -19,11 +22,15 @@\n import com.enonic.xp.dump.SystemLoadListener;\n import com.enonic.xp.repo.impl.dump.DefaultFilePaths;\n import com.enonic.xp.repo.impl.dump.PathRef;\n+import com.enonic.xp.repo.impl.dump.RepoLoadException;\n import com.enonic.xp.repo.impl.dump.blobstore.ZipDumpReadBlobStore;\n \n public class ZipDumpReader\n     extends AbstractDumpReader\n {\n+\n+    private static final Pattern ROOT_DUMP_DIR_PATTERN = Pattern.compile( \"^([^/]+)\\\\/dump.json\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MzU1MQ=="}, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NjA3Mw==", "bodyText": "Got it.", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430656073", "createdAt": "2020-05-26T19:32:15Z", "author": {"login": "anatol-sialitski"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -19,11 +22,15 @@\n import com.enonic.xp.dump.SystemLoadListener;\n import com.enonic.xp.repo.impl.dump.DefaultFilePaths;\n import com.enonic.xp.repo.impl.dump.PathRef;\n+import com.enonic.xp.repo.impl.dump.RepoLoadException;\n import com.enonic.xp.repo.impl.dump.blobstore.ZipDumpReadBlobStore;\n \n public class ZipDumpReader\n     extends AbstractDumpReader\n {\n+\n+    private static final Pattern ROOT_DUMP_DIR_PATTERN = Pattern.compile( \"^([^/]+)\\\\/dump.json\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5MzU1MQ=="}, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTQ1NjE2OnYy", "diffSide": "RIGHT", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToyMjo0M1rOGajc8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNDozNlrOGatQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NzAwOA==", "bodyText": "I would prefer matches() for clarity.", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430497008", "createdAt": "2020-05-26T15:22:43Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -39,14 +46,56 @@ public static ZipDumpReader create( SystemLoadListener listener, final Path base\n             final SeekableByteChannel seekableByteChannel =\n                 Files.newByteChannel( basePath.resolve( dumpName + \".zip\" ), EnumSet.of( StandardOpenOption.READ ) );\n             final ZipFile zipFile = new ZipFile( seekableByteChannel );\n-            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+\n+            return create( listener, dumpName, zipFile );\n         }\n         catch ( IOException e )\n         {\n             throw new UncheckedIOException( e );\n         }\n     }\n \n+    private static ZipDumpReader create( final SystemLoadListener listener, final String dumpName, final ZipFile zipFile )\n+    {\n+        if ( zipFile.getEntry( \"dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of(), zipFile );\n+        }\n+        else if ( zipFile.getEntry( dumpName + \"/dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+        }\n+        else\n+        {\n+            String rootDumpDir = null;\n+\n+            final Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();\n+\n+            while ( entries.hasMoreElements() )\n+            {\n+                final ZipArchiveEntry entry = entries.nextElement();\n+\n+                final Matcher matcher = ROOT_DUMP_DIR_PATTERN.matcher( entry.getName() );\n+\n+                if ( matcher.find() )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjg0OA==", "bodyText": "@rymsha In this case I prefer matcher, because pattern already compiled and in order to get a name of rootDir will be enough to call matcher.group( 1 )", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430632848", "createdAt": "2020-05-26T18:50:07Z", "author": {"login": "anatol-sialitski"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -39,14 +46,56 @@ public static ZipDumpReader create( SystemLoadListener listener, final Path base\n             final SeekableByteChannel seekableByteChannel =\n                 Files.newByteChannel( basePath.resolve( dumpName + \".zip\" ), EnumSet.of( StandardOpenOption.READ ) );\n             final ZipFile zipFile = new ZipFile( seekableByteChannel );\n-            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+\n+            return create( listener, dumpName, zipFile );\n         }\n         catch ( IOException e )\n         {\n             throw new UncheckedIOException( e );\n         }\n     }\n \n+    private static ZipDumpReader create( final SystemLoadListener listener, final String dumpName, final ZipFile zipFile )\n+    {\n+        if ( zipFile.getEntry( \"dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of(), zipFile );\n+        }\n+        else if ( zipFile.getEntry( dumpName + \"/dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+        }\n+        else\n+        {\n+            String rootDumpDir = null;\n+\n+            final Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();\n+\n+            while ( entries.hasMoreElements() )\n+            {\n+                final ZipArchiveEntry entry = entries.nextElement();\n+\n+                final Matcher matcher = ROOT_DUMP_DIR_PATTERN.matcher( entry.getName() );\n+\n+                if ( matcher.find() )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NzAwOA=="}, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0OTY1Mw==", "bodyText": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Matcher.html#matches()", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430649653", "createdAt": "2020-05-26T19:20:03Z", "author": {"login": "rymsha"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -39,14 +46,56 @@ public static ZipDumpReader create( SystemLoadListener listener, final Path base\n             final SeekableByteChannel seekableByteChannel =\n                 Files.newByteChannel( basePath.resolve( dumpName + \".zip\" ), EnumSet.of( StandardOpenOption.READ ) );\n             final ZipFile zipFile = new ZipFile( seekableByteChannel );\n-            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+\n+            return create( listener, dumpName, zipFile );\n         }\n         catch ( IOException e )\n         {\n             throw new UncheckedIOException( e );\n         }\n     }\n \n+    private static ZipDumpReader create( final SystemLoadListener listener, final String dumpName, final ZipFile zipFile )\n+    {\n+        if ( zipFile.getEntry( \"dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of(), zipFile );\n+        }\n+        else if ( zipFile.getEntry( dumpName + \"/dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+        }\n+        else\n+        {\n+            String rootDumpDir = null;\n+\n+            final Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();\n+\n+            while ( entries.hasMoreElements() )\n+            {\n+                final ZipArchiveEntry entry = entries.nextElement();\n+\n+                final Matcher matcher = ROOT_DUMP_DIR_PATTERN.matcher( entry.getName() );\n+\n+                if ( matcher.find() )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NzAwOA=="}, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NzY3Nw==", "bodyText": "Ah, I thought you meant https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#matches(java.lang.String)", "url": "https://github.com/enonic/xp/pull/8116#discussion_r430657677", "createdAt": "2020-05-26T19:34:36Z", "author": {"login": "anatol-sialitski"}, "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/reader/ZipDumpReader.java", "diffHunk": "@@ -39,14 +46,56 @@ public static ZipDumpReader create( SystemLoadListener listener, final Path base\n             final SeekableByteChannel seekableByteChannel =\n                 Files.newByteChannel( basePath.resolve( dumpName + \".zip\" ), EnumSet.of( StandardOpenOption.READ ) );\n             final ZipFile zipFile = new ZipFile( seekableByteChannel );\n-            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+\n+            return create( listener, dumpName, zipFile );\n         }\n         catch ( IOException e )\n         {\n             throw new UncheckedIOException( e );\n         }\n     }\n \n+    private static ZipDumpReader create( final SystemLoadListener listener, final String dumpName, final ZipFile zipFile )\n+    {\n+        if ( zipFile.getEntry( \"dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of(), zipFile );\n+        }\n+        else if ( zipFile.getEntry( dumpName + \"/dump.json\" ) != null )\n+        {\n+            return new ZipDumpReader( listener, PathRef.of( dumpName ), zipFile );\n+        }\n+        else\n+        {\n+            String rootDumpDir = null;\n+\n+            final Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();\n+\n+            while ( entries.hasMoreElements() )\n+            {\n+                final ZipArchiveEntry entry = entries.nextElement();\n+\n+                final Matcher matcher = ROOT_DUMP_DIR_PATTERN.matcher( entry.getName() );\n+\n+                if ( matcher.find() )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NzAwOA=="}, "originalCommit": {"oid": "7242f06574984b1dbb2a572897a22a95074e961e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 973, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}