{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzI0OTk0", "number": 2219, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo0MzozNlrOEgRx3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo0MzozNlrOEgRx3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjgxMTgyOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/DeadlinesNotificationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo0MzozNlrOHNDLQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjo1NDozMFrOHNMZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0NTU2OQ==", "bodyText": "Cannot never be null", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2219#discussion_r483445569", "createdAt": "2020-09-04T07:43:36Z", "author": {"login": "elguardian"}, "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/DeadlinesNotificationTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.File;\n+import org.appformer.maven.integration.MavenRepository;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchNotificationListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import static org.appformer.maven.integration.MavenRepository.getMavenRepository;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class DeadlinesNotificationTest {\n+\n+    static final String ARTIFACT_ID = \"notification\";\n+    static final String GROUP_ID = \"org.jbpm\";\n+    static final String VERSION = \"1.0\";\n+\n+    private KModuleDeploymentUnit unit = null;\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+\n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    private CountDownLatchNotificationListener countDownListener;\n+\n+    @BeforeClass\n+    public static void generalSetup() {\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        File kjar = new File(\"../kjars/notification/notification.jar\");\n+        File pom = new File(\"../kjars/notification/pom.xml\");\n+        MavenRepository repository = getMavenRepository();\n+        repository.installArtifact(releaseId, kjar, pom);\n+\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+\n+    @Before\n+    public void setup() {\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        deploymentService.deploy(unit);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        deploymentService.undeploy(unit);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testSaveContentAfterDeadlines() throws Exception {\n+        countDownListener.configure(1);\n+        countDownListener.setSaveContent(true);\n+\n+        assertNotNull(unit);\n+\n+        long processInstanceId = processService.startProcess(unit.getIdentifier(), \"notification\");\n+\n+        assertNotNull(processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6595075f45bd6e542b858e4b7903c34dbde9e2"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5NjY4NQ==", "bodyText": "OK, fixed, thanks for the review!", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2219#discussion_r483596685", "createdAt": "2020-09-04T12:54:30Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/DeadlinesNotificationTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.File;\n+import org.appformer.maven.integration.MavenRepository;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchNotificationListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import static org.appformer.maven.integration.MavenRepository.getMavenRepository;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class DeadlinesNotificationTest {\n+\n+    static final String ARTIFACT_ID = \"notification\";\n+    static final String GROUP_ID = \"org.jbpm\";\n+    static final String VERSION = \"1.0\";\n+\n+    private KModuleDeploymentUnit unit = null;\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+\n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    private CountDownLatchNotificationListener countDownListener;\n+\n+    @BeforeClass\n+    public static void generalSetup() {\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        File kjar = new File(\"../kjars/notification/notification.jar\");\n+        File pom = new File(\"../kjars/notification/pom.xml\");\n+        MavenRepository repository = getMavenRepository();\n+        repository.installArtifact(releaseId, kjar, pom);\n+\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+\n+    @Before\n+    public void setup() {\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        deploymentService.deploy(unit);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        deploymentService.undeploy(unit);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testSaveContentAfterDeadlines() throws Exception {\n+        countDownListener.configure(1);\n+        countDownListener.setSaveContent(true);\n+\n+        assertNotNull(unit);\n+\n+        long processInstanceId = processService.startProcess(unit.getIdentifier(), \"notification\");\n+\n+        assertNotNull(processInstanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0NTU2OQ=="}, "originalCommit": {"oid": "ed6595075f45bd6e542b858e4b7903c34dbde9e2"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1901, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}