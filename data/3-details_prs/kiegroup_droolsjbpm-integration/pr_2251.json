{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMTEwNzQw", "number": 2251, "title": "[DROOLS-5375] Implement GeneratePMMLModelMojo inside kie-maven-plugin", "bodyText": "@danielezonca @mariofusco @jiripetrlik\nSee https://issues.redhat.com/browse/DROOLS-5375\nThis PR add GeneratePMMLModelMojo.\nIt needs kiegroup/drools#3117 to be merged in master.", "createdAt": "2020-09-25T14:21:45Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251", "merged": true, "mergeCommit": {"oid": "4d85f1fa6ebaf688f3183f095d06adcc1459fe61"}, "closed": true, "closedAt": "2020-10-08T16:42:45Z", "author": {"login": "gitgabrio"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciynbzAH2gAyNDkzMTEwNzQwOjAyMzJlYzEwZGZhOGJkZWIwZGU3MTA4YzQ5ODA3Y2I5YTQzYWQwYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQdvY_AFqTUwNDU3MDA5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0232ec10dfa8bdeb0de7108c49807cb9a43ad0c4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0232ec10dfa8bdeb0de7108c49807cb9a43ad0c4", "committedDate": "2020-05-19T11:17:50Z", "message": "[DROOLS-5258] Implemented GenerateModelMojo. Fixed other mojos to avoid multiple invocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0668d253c812b7c8547427e700b853a309ee95b8", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0668d253c812b7c8547427e700b853a309ee95b8", "committedDate": "2020-05-22T07:31:41Z", "message": "[DROOLS-5258] Fixed GenerateModelMojo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "772193c814eca92c334f2cc16c81adaae4918fe5", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/772193c814eca92c334f2cc16c81adaae4918fe5", "committedDate": "2020-05-22T07:39:56Z", "message": "[DROOLS-5258] Fixed testing project (kie-maven-plugin-test-kjar-12) structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe09b40d73efd7772270a0812991b823dc00215", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cbe09b40d73efd7772270a0812991b823dc00215", "committedDate": "2020-06-04T09:45:13Z", "message": "[DROOLS-5375] Begin refactoring. Broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8604ce2954108aa7f358a5bc21fcce5bd6698dad", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/8604ce2954108aa7f358a5bc21fcce5bd6698dad", "committedDate": "2020-06-22T13:22:58Z", "message": "Merge branch 'master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44c96ad31e3717ef04d52f3cb16d558c78aece24", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/44c96ad31e3717ef04d52f3cb16d558c78aece24", "committedDate": "2020-08-11T14:24:49Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375\n\n# Conflicts:\n#\tprocess-migration-service/frontend/package-lock.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c1224e69d8cf7110c337a8ab766c918536def4", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/d1c1224e69d8cf7110c337a8ab766c918536def4", "committedDate": "2020-08-27T09:32:03Z", "message": "[DROOLS-5375] Add pmml for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6040181b78f3ccbcf37e28d1a2999446331ebb84", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6040181b78f3ccbcf37e28d1a2999446331ebb84", "committedDate": "2020-08-27T09:32:34Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ccb86286b4c4aad329cac9857462b878391250", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f9ccb86286b4c4aad329cac9857462b878391250", "committedDate": "2020-09-08T12:14:57Z", "message": "[DROOLS-5375] Fixing kmodules for nested drools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b322a31ce98c932124505beeb3594ada542b7f", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c8b322a31ce98c932124505beeb3594ada542b7f", "committedDate": "2020-09-08T12:15:24Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b54d278a4a1fc8b17295e55bf3bbdd0e83a9422", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/5b54d278a4a1fc8b17295e55bf3bbdd0e83a9422", "committedDate": "2020-09-18T08:43:02Z", "message": "[DROOLS-5375] Add pmml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f832467b168b204eddbe9445c1c6f3e91f636cf", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6f832467b168b204eddbe9445c1c6f3e91f636cf", "committedDate": "2020-09-18T08:43:37Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "335475eb4c2320433c54175039f80f64a21f8696", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/335475eb4c2320433c54175039f80f64a21f8696", "committedDate": "2020-09-24T13:32:21Z", "message": "[DROOLS-5375] Updated for new PMMLRuntimeFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "831831edb63582dcbda256336645501f8c681bfe", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/831831edb63582dcbda256336645501f8c681bfe", "committedDate": "2020-09-25T14:13:46Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a87c9a7400a950d3450224f0e02d2a890c571aaa", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/a87c9a7400a950d3450224f0e02d2a890c571aaa", "committedDate": "2020-09-28T10:57:48Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MjkzMzcy", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#pullrequestreview-497293372", "createdAt": "2020-09-28T08:30:17Z", "commit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDoxN1rOHYziwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozMToxOVrOHbIHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjM1NA==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495772354", "createdAt": "2020-09-28T08:30:17Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/pom.xml", "diffHunk": "@@ -27,6 +27,19 @@\n     </plugins>\n   </build>\n \n+  <!-- TODO REMOVE -->\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-pmml-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzIxMg==", "bodyText": "Can you please use kie-pmml-dependencies instead?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495787212", "createdAt": "2020-09-28T08:55:59Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/pom.xml", "diffHunk": "@@ -181,10 +194,27 @@\n       <scope>runtime</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.drools</groupId>\n-      <artifactId>kie-pmml</artifactId>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-commons</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-models-drools-common</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-api</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-core</artifactId>\n       <scope>runtime</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-evaluator-assembler</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzM2OQ==", "bodyText": "Are you sure to remove kie-pmml dep?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495787369", "createdAt": "2020-09-28T08:56:15Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/pom.xml", "diffHunk": "@@ -181,10 +194,27 @@\n       <scope>runtime</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.drools</groupId>\n-      <artifactId>kie-pmml</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4Nzk1MA==", "bodyText": "To be removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495787950", "createdAt": "2020-09-28T08:57:12Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GenerateDMNModelMojo.java", "diffHunk": "@@ -147,10 +147,12 @@ private void createDMNFile(List<String> compiledClassNames) {\n     }\n \n     private List<String> getDMNFIles(InternalKieModule kieModule) {\n-        return kieModule.getFileNames()\n-                        .stream()\n-                        .filter(f -> f.endsWith(\"dmn\"))\n-                        .collect(Collectors.toList());\n+        return getFilesByType(kieModule, \"dmn\");\n+//\n+//        return kieModule.getFileNames()\n+//                        .stream()\n+//                        .filter(f -> f.endsWith(\"dmn\"))\n+//                        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4ODU0OA==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495788548", "createdAt": "2020-09-28T08:58:13Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/pom.xml", "diffHunk": "@@ -35,6 +35,19 @@\n     </plugins>\n   </build>\n \n+  <!-- TODO REMOVE -->\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-pmml-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4ODc5Ng==", "bodyText": "Are you sure to remove kie-pmml dep?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495788796", "createdAt": "2020-09-28T08:58:35Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/pom.xml", "diffHunk": "@@ -171,9 +184,29 @@\n       <artifactId>drools-scorecards</artifactId>\n       <scope>runtime</scope>\n     </dependency>\n+<!--    <dependency>-->\n+<!--      <groupId>org.drools</groupId>-->\n+<!--      <artifactId>kie-pmml</artifactId>-->\n+<!--      <scope>runtime</scope>-->\n+<!--    </dependency>-->\n     <dependency>\n-      <groupId>org.drools</groupId>\n-      <artifactId>kie-pmml</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4ODk1Mg==", "bodyText": "Can you please use kie-pmml-dependencies?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495788952", "createdAt": "2020-09-28T08:58:51Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/pom.xml", "diffHunk": "@@ -171,9 +184,29 @@\n       <artifactId>drools-scorecards</artifactId>\n       <scope>runtime</scope>\n     </dependency>\n+<!--    <dependency>-->\n+<!--      <groupId>org.drools</groupId>-->\n+<!--      <artifactId>kie-pmml</artifactId>-->\n+<!--      <scope>runtime</scope>-->\n+<!--    </dependency>-->\n     <dependency>\n-      <groupId>org.drools</groupId>\n-      <artifactId>kie-pmml</artifactId>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-commons</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-api</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-compiler-core</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-evaluator-assembler</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MDM3Mg==", "bodyText": "Are you sure about this property override? The other test modules of this repo are configured in a different way", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495790372", "createdAt": "2020-09-28T09:01:07Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/src/test/projects/kjar-12-with-pmml-trusty/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.kie</groupId>\n+  <artifactId>kie-maven-plugin-test-kjar-12</artifactId>\n+  <version>1.0.0.Final</version>\n+\n+  <packaging>kjar</packaging>\n+\n+  <properties>\n+    <org.kie.version>7.44.0-SNAPSHOT</org.kie.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MDczNQ==", "bodyText": "Why do you need this property?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r495790735", "createdAt": "2020-09-28T09:01:49Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/src/test/projects/kjar-12-with-pmml-trusty/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.kie</groupId>\n+  <artifactId>kie-maven-plugin-test-kjar-12</artifactId>\n+  <version>1.0.0.Final</version>\n+\n+  <packaging>kjar</packaging>\n+\n+  <properties>\n+    <org.kie.version>7.44.0-SNAPSHOT</org.kie.version>\n+    <generateModel>NO</generateModel>\n+    <generateDMNModel>NO</generateDMNModel>\n+    <generatePMMLModel>YES</generatePMMLModel>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.drools</groupId>\n+      <artifactId>drools-model-compiler</artifactId>\n+      <version>${org.kie.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-api</artifactId>\n+      <version>${org.kie.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-pmml-dependencies</artifactId>\n+      <version>${org.kie.version}</version>\n+      <type>pom</type>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.kie</groupId>\n+        <artifactId>kie-maven-plugin</artifactId>\n+        <version>${org.kie.version}</version>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <properties>\n+            <drools.dialect.java.compiler.lnglevel>1.8</drools.dialect.java.compiler.lnglevel>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5MDExNQ==", "bodyText": "Not used?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498190115", "createdAt": "2020-10-01T12:02:37Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5NDkxMg==", "bodyText": "I think this can be removed after kiegroup/drools#3117", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498194912", "createdAt": "2020-10-01T12:11:24Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDA1OA==", "bodyText": "Not sure if File.separator can be used here, probably is better to use /.\nAs far as I remember KieFileSystem only supports / so this code could fail on Windows where File.separator is usually \\.\n@mariofusco Wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498200058", "createdAt": "2020-10-01T12:20:34Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        KieServices ks = KieServices.Factory.get();\n+        try {\n+            // FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+            properties.put(\"kie-maven-plugin-launcher\", \"true\");\n+            setSystemProperties(properties);\n+\n+            final KieBuilderImpl kieBuilder = (KieBuilderImpl) ks.newKieBuilder(projectDir);\n+            kieBuilder.setPomModel(new ProjectPomModel(mavenSession));\n+            String testPath = \"src\" + File.separator + \"test\" + File.separator + \"java\";\n+            String pmmlResourcePath = \"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + PMMLRESOURCES;\n+            kieBuilder.buildAll(ExecutableModelMavenProject.SUPPLIER,\n+                                s -> !s.contains(testPath) && !s.contains(pmmlResourcePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDgzNA==", "bodyText": "I think you can use getFilesByType method you created in AbstractKieMojo", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498200834", "createdAt": "2020-10-01T12:21:51Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        KieServices ks = KieServices.Factory.get();\n+        try {\n+            // FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+            properties.put(\"kie-maven-plugin-launcher\", \"true\");\n+            setSystemProperties(properties);\n+\n+            final KieBuilderImpl kieBuilder = (KieBuilderImpl) ks.newKieBuilder(projectDir);\n+            kieBuilder.setPomModel(new ProjectPomModel(mavenSession));\n+            String testPath = \"src\" + File.separator + \"test\" + File.separator + \"java\";\n+            String pmmlResourcePath = \"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + PMMLRESOURCES;\n+            kieBuilder.buildAll(ExecutableModelMavenProject.SUPPLIER,\n+                                s -> !s.contains(testPath) && !s.contains(pmmlResourcePath));\n+            InternalKieModule kieModule = (InternalKieModule) kieBuilder.getKieModule();\n+            List<String> generatedFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"java\"))\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMTI3NQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498201275", "createdAt": "2020-10-01T12:22:36Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        KieServices ks = KieServices.Factory.get();\n+        try {\n+            // FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+            properties.put(\"kie-maven-plugin-launcher\", \"true\");\n+            setSystemProperties(properties);\n+\n+            final KieBuilderImpl kieBuilder = (KieBuilderImpl) ks.newKieBuilder(projectDir);\n+            kieBuilder.setPomModel(new ProjectPomModel(mavenSession));\n+            String testPath = \"src\" + File.separator + \"test\" + File.separator + \"java\";\n+            String pmmlResourcePath = \"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + PMMLRESOURCES;\n+            kieBuilder.buildAll(ExecutableModelMavenProject.SUPPLIER,\n+                                s -> !s.contains(testPath) && !s.contains(pmmlResourcePath));\n+            InternalKieModule kieModule = (InternalKieModule) kieBuilder.getKieModule();\n+            List<String> generatedFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"java\"))\n+                    .collect(Collectors.toList());\n+\n+            Set<String> drlFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"drl\"))\n+                    .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMTU5Nw==", "bodyText": "Please move it to constant", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498201597", "createdAt": "2020-10-01T12:23:08Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        KieServices ks = KieServices.Factory.get();\n+        try {\n+            // FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+            properties.put(\"kie-maven-plugin-launcher\", \"true\");\n+            setSystemProperties(properties);\n+\n+            final KieBuilderImpl kieBuilder = (KieBuilderImpl) ks.newKieBuilder(projectDir);\n+            kieBuilder.setPomModel(new ProjectPomModel(mavenSession));\n+            String testPath = \"src\" + File.separator + \"test\" + File.separator + \"java\";\n+            String pmmlResourcePath = \"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + PMMLRESOURCES;\n+            kieBuilder.buildAll(ExecutableModelMavenProject.SUPPLIER,\n+                                s -> !s.contains(testPath) && !s.contains(pmmlResourcePath));\n+            InternalKieModule kieModule = (InternalKieModule) kieBuilder.getKieModule();\n+            List<String> generatedFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"java\"))\n+                    .collect(Collectors.toList());\n+\n+            Set<String> drlFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"drl\"))\n+                    .collect(Collectors.toSet());\n+\n+            getLog().info(String.format(\"Found %d generated files in Canonical Model\", generatedFiles.size()));\n+\n+            MemoryFileSystem mfs = kieModule instanceof CanonicalKieModule ?\n+                    ((MemoryKieModule) ((CanonicalKieModule) kieModule).getInternalKieModule()).getMemoryFileSystem() :\n+                    ((MemoryKieModule) kieModule).getMemoryFileSystem();\n+\n+            final String droolsModelCompilerPath = \"/generated-sources/drools-model-compiler/main/java\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMTk3NQ==", "bodyText": "What if this path doesn't exist? Is it created on the fly or it fail?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498201975", "createdAt": "2020-10-01T12:23:50Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        KieServices ks = KieServices.Factory.get();\n+        try {\n+            // FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+            properties.put(\"kie-maven-plugin-launcher\", \"true\");\n+            setSystemProperties(properties);\n+\n+            final KieBuilderImpl kieBuilder = (KieBuilderImpl) ks.newKieBuilder(projectDir);\n+            kieBuilder.setPomModel(new ProjectPomModel(mavenSession));\n+            String testPath = \"src\" + File.separator + \"test\" + File.separator + \"java\";\n+            String pmmlResourcePath = \"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + PMMLRESOURCES;\n+            kieBuilder.buildAll(ExecutableModelMavenProject.SUPPLIER,\n+                                s -> !s.contains(testPath) && !s.contains(pmmlResourcePath));\n+            InternalKieModule kieModule = (InternalKieModule) kieBuilder.getKieModule();\n+            List<String> generatedFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"java\"))\n+                    .collect(Collectors.toList());\n+\n+            Set<String> drlFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"drl\"))\n+                    .collect(Collectors.toSet());\n+\n+            getLog().info(String.format(\"Found %d generated files in Canonical Model\", generatedFiles.size()));\n+\n+            MemoryFileSystem mfs = kieModule instanceof CanonicalKieModule ?\n+                    ((MemoryKieModule) ((CanonicalKieModule) kieModule).getInternalKieModule()).getMemoryFileSystem() :\n+                    ((MemoryKieModule) kieModule).getMemoryFileSystem();\n+\n+            final String droolsModelCompilerPath = \"/generated-sources/drools-model-compiler/main/java\";\n+            final String newCompileSourceRoot = targetDirectory.getPath() + droolsModelCompilerPath;\n+            project.addCompileSourceRoot(newCompileSourceRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMzc5Ng==", "bodyText": "What about move this line inside finally block?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498203796", "createdAt": "2020-10-01T12:26:52Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        KieServices ks = KieServices.Factory.get();\n+        try {\n+            // FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+            properties.put(\"kie-maven-plugin-launcher\", \"true\");\n+            setSystemProperties(properties);\n+\n+            final KieBuilderImpl kieBuilder = (KieBuilderImpl) ks.newKieBuilder(projectDir);\n+            kieBuilder.setPomModel(new ProjectPomModel(mavenSession));\n+            String testPath = \"src\" + File.separator + \"test\" + File.separator + \"java\";\n+            String pmmlResourcePath = \"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + PMMLRESOURCES;\n+            kieBuilder.buildAll(ExecutableModelMavenProject.SUPPLIER,\n+                                s -> !s.contains(testPath) && !s.contains(pmmlResourcePath));\n+            InternalKieModule kieModule = (InternalKieModule) kieBuilder.getKieModule();\n+            List<String> generatedFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"java\"))\n+                    .collect(Collectors.toList());\n+\n+            Set<String> drlFiles = kieModule.getFileNames()\n+                    .stream()\n+                    .filter(f -> f.endsWith(\"drl\"))\n+                    .collect(Collectors.toSet());\n+\n+            getLog().info(String.format(\"Found %d generated files in Canonical Model\", generatedFiles.size()));\n+\n+            MemoryFileSystem mfs = kieModule instanceof CanonicalKieModule ?\n+                    ((MemoryKieModule) ((CanonicalKieModule) kieModule).getInternalKieModule()).getMemoryFileSystem() :\n+                    ((MemoryKieModule) kieModule).getMemoryFileSystem();\n+\n+            final String droolsModelCompilerPath = \"/generated-sources/drools-model-compiler/main/java\";\n+            final String newCompileSourceRoot = targetDirectory.getPath() + droolsModelCompilerPath;\n+            project.addCompileSourceRoot(newCompileSourceRoot);\n+\n+            for (String generatedFile : generatedFiles) {\n+                final MemoryFile f = (MemoryFile) mfs.getFile(generatedFile);\n+                final Path newFile = Paths.get(targetDirectory.getPath(),\n+                                               droolsModelCompilerPath,\n+                                               f.getPath().toPortableString());\n+\n+                try {\n+                    Files.deleteIfExists(newFile);\n+                    Files.createDirectories(newFile.getParent());\n+                    Files.copy(f.getContents(), newFile, StandardCopyOption.REPLACE_EXISTING);\n+\n+                    getLog().info(\"Generating \" + newFile);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    throw new MojoExecutionException(\"Unable to write file\", e);\n+                }\n+            }\n+\n+            // copy the META-INF packages file\n+            final String path = CanonicalKieModule.getModelFileWithGAV(kieModule.getReleaseId());\n+            final MemoryFile packagesMemoryFile = (MemoryFile) mfs.getFile(path);\n+            final String packagesMemoryFilePath = packagesMemoryFile.getFolder().getPath().toPortableString();\n+            final Path packagesDestinationPath = Paths.get(targetDirectory.getPath(), CLASSES, packagesMemoryFilePath, packagesMemoryFile.getName());\n+\n+            try {\n+                if (!Files.exists(packagesDestinationPath)) {\n+                    Files.createDirectories(packagesDestinationPath.getParent());\n+                }\n+                Files.copy(packagesMemoryFile.getContents(), packagesDestinationPath, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                throw new MojoExecutionException(\"Unable to write file\", e);\n+            }\n+\n+            if (ExecModelMode.shouldDeleteFile(generatePMMLModel)) {\n+                deleteDrlFiles(drlFiles);\n+            }\n+\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(contextClassLoader);\n+        }\n+        // REMOVING FLAG TO KNOW THAT BUILD HAS BEEN LAUNCHED BY MAVEN\n+        properties.remove(\"kie-maven-plugin-launcher\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwNjQ2Ng==", "bodyText": "What about add a finally block to restore contextClassLoader?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498206466", "createdAt": "2020-10-01T12:31:19Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (modelParameterEnabled && modelCompilerInClassPath) {\n+            generateModel();\n+        } else if (modelParameterEnabled) { // !modelCompilerInClassPath\n+            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+\n+            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+                                                                        getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTkxNzE2", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#pullrequestreview-500991716", "createdAt": "2020-10-02T09:34:05Z", "commit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTozNDowNVrOHbnRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTozNjozNFrOHbnVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxNzAzNQ==", "bodyText": "Can you please review this boolean? I think it could be reverted", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498717035", "createdAt": "2020-10-02T09:34:05Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/BuildMojo.java", "diffHunk": "@@ -104,9 +104,14 @@\n     @Parameter(property = \"generateModel\", defaultValue = \"no\")\n     private String generateModel;\n \n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n     public void execute() throws MojoExecutionException, MojoFailureException {\n-        // BuildMojo is executed when GenerateModelMojo isn't and vice-versa\n+        // BuildMojo is executed when GenerateModelMojo and GeneratePMMLModelMojo aren't and vice-versa\n         boolean modelParameterEnabled = modelParameterEnabled(generateModel);\n+        modelParameterEnabled = modelParameterEnabled || PMMLModelMode.modelParameterEnabled(generatePMMLModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxNzEzMQ==", "bodyText": "Can you please review this boolean? I think it could be reverted", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498717131", "createdAt": "2020-10-02T09:34:15Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -97,10 +97,14 @@\n     @Parameter(property = \"generateModel\", defaultValue = \"YES_WITHDRL\")\n     private String generateModel;\n \n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n     @Override\n     public void execute() throws MojoExecutionException, MojoFailureException {\n-        // GenerateModelMojo is executed when BuildMojo isn't and vice-versa\n+        // GenerateModelMojo is executed when BuildMojo and GeneratePMMLModelMojo aren't and vice-versa\n         boolean modelParameterEnabled = modelParameterEnabled(generateModel);\n+        modelParameterEnabled = modelParameterEnabled && !PMMLModelMode.modelParameterEnabled(generatePMMLModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxODE1MA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r498718150", "createdAt": "2020-10-02T09:36:34Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.compiler.io.Folder;\n+import org.drools.compiler.compiler.io.memory.MemoryFile;\n+import org.drools.compiler.compiler.io.memory.MemoryFileSystem;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kie.builder.impl.KieModuleKieProject;\n+import org.drools.compiler.kie.builder.impl.MemoryKieModule;\n+import org.drools.compiler.kie.builder.impl.ResultsImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.drools.modelcompiler.builder.CanonicalModelKieProject;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.ModelWriter;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.internal.io.ResourceTypePackage;\n+import org.kie.api.io.ResourceType;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLFactoryModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final String KMODULE_XML_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" +\n+            \"<kmodule xmlns=\\\"http://jboss.org/kie/6.0.0/kmodule\\\">\\r\\n\" +\n+            \"\\r\\n%s\\r\\n\" +\n+            \"</kmodule>\";\n+    private static final String KBASE_TAG_TEMPLATE = \"\\t<kbase name=\\\"%s\\\" packages=\\\"%s\\\">\\r\\n\" + // defaulting that all pmml files have to be put inside PMMLResources folder\n+            \"\\t\\t<ksession name=\\\"%sSession\\\" type=\\\"stateless\\\" />\\r\\n\" +\n+            \"\\t</kbase>\\r\\n\";\n+    private static final String CLASSES = \"classes\";\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generatePMMLModel\", defaultValue = \"no\")\n+    private String generatePMMLModel;\n+\n+    private List<Path> createdPaths = new ArrayList<>();\n+    private List<Path> movedPmmlFiles = new ArrayList<>();\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        // GeneratePMMLModelMojo is executed when BuildMojo and GenerateModelMojo aren't and vice-versa\n+        boolean modelParameterEnabled = PMMLModelMode.modelParameterEnabled(generatePMMLModel);\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831831edb63582dcbda256336645501f8c681bfe"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a696de759d210c1c072e3583de7c481939a709d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/9a696de759d210c1c072e3583de7c481939a709d", "committedDate": "2020-10-02T10:48:56Z", "message": "[DROOLS-5375] Fixing as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3174a0223ef1089f6b1e4f7d00f3210deaf2f72", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f3174a0223ef1089f6b1e4f7d00f3210deaf2f72", "committedDate": "2020-10-02T10:49:12Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77336884d08e263f2f8d21334c0e99902a1c4b72", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/77336884d08e263f2f8d21334c0e99902a1c4b72", "committedDate": "2020-10-02T11:00:55Z", "message": "[DROOLS-5375] Fixing as per PR suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93f4579ff3f895a35dd01e0bc2184e99d4fb270", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e93f4579ff3f895a35dd01e0bc2184e99d4fb270", "committedDate": "2020-10-06T08:06:12Z", "message": "[DROOLS-5375] Clean up details from previous implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7164eac758bdccaea2e45f793d6a2bc477dcaf51", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/7164eac758bdccaea2e45f793d6a2bc477dcaf51", "committedDate": "2020-10-06T08:06:29Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "355db707b01d973058b3232c4a5030eaa0020cae", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/355db707b01d973058b3232c4a5030eaa0020cae", "committedDate": "2020-10-06T08:34:59Z", "message": "[DROOLS-5375] Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODYyMjA0", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#pullrequestreview-502862204", "createdAt": "2020-10-06T11:59:51Z", "commit": {"oid": "355db707b01d973058b3232c4a5030eaa0020cae"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo1OTo1MVrOHdC3qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo1OTo1MVrOHdC3qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNzc2OA==", "bodyText": "Please remove this or add comment with description.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r500217768", "createdAt": "2020-10-06T11:59:51Z", "author": {"login": "jiripetrlik"}, "path": "kie-plugins-testing/pom.xml", "diffHunk": "@@ -171,9 +184,29 @@\n       <artifactId>drools-scorecards</artifactId>\n       <scope>runtime</scope>\n     </dependency>\n+<!--    <dependency>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355db707b01d973058b3232c4a5030eaa0020cae"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8e13dcff72b36db77afea0d8d652886b5076aae", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e8e13dcff72b36db77afea0d8d652886b5076aae", "committedDate": "2020-10-06T12:41:05Z", "message": "[DROOLS-5375] Refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTE5MTA0", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#pullrequestreview-503119104", "createdAt": "2020-10-06T15:55:05Z", "commit": {"oid": "e8e13dcff72b36db77afea0d8d652886b5076aae"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NTowNVrOHdOwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowMjo1MVrOHdPF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMjUwOQ==", "bodyText": "Minor comment, it should be possible avoid to iterate multiple times on the resources:\n\npreserve here Stream<PMMLResource>\nmake generateFile returns a Stream<GeneratedFile>\nfinally apply a foreach(...) to write them (line 171)\n\nMaybe the last step is not doable because of checked exception", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r500412509", "createdAt": "2020-10-06T15:55:05Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.modelcompiler.builder.GeneratedFile;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.PackageSources;\n+import org.kie.api.KieServices;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.pmml.commons.model.HasNestedModels;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GeneratePMMLModelMojo.class);\n+\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    private static final PMMLAssemblerService PMML_ASSEMBLER_SERVICE = new PMMLAssemblerService();\n+    private static final String generatedSourcesPath = \"/generated-sources/\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+    @Parameter\n+    private Map<String, String> properties;\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+    @Parameter(defaultValue = \"${project.resources}\", required = true, readonly = true)\n+    private List<org.apache.maven.model.Resource> resourcesDirectories;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (!modelCompilerInClassPath) {\n+            getLog().warn(\"Skipping `generatePMMLModel` because you did\" +\n+                                  \" not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable it for your project, add the `drools-model-compiler`\" +\n+                                  \" dependency in the `pom.xml` file of your project.\\n\");\n+        } else {\n+            generateModel();\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        URLClassLoader projectClassLoader = null;\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+            projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]), getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+            generateFiles();\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new MojoExecutionException(e.getMessage(), e);\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(contextClassLoader);\n+            if (projectClassLoader != null) {\n+                try {\n+                    projectClassLoader.close();\n+                } catch (IOException e) {\n+                    getLog().warn(e);\n+                }\n+            }\n+        }\n+        getLog().info(\"PMML model successfully generated\");\n+    }\n+\n+    private void generateFiles() throws MojoExecutionException {\n+        final List<Resource> resources = getPMMLResources();\n+        final List<PMMLResource> pmmlResources = resources.stream()\n+                .map(this::parseResource)\n+                .collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e13dcff72b36db77afea0d8d652886b5076aae"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMzE2OQ==", "bodyText": "I would prefer for simplicity to make generateFile return the list instead of populate generatedFiles as parameter. Wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r500413169", "createdAt": "2020-10-06T15:55:59Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.modelcompiler.builder.GeneratedFile;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.PackageSources;\n+import org.kie.api.KieServices;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.pmml.commons.model.HasNestedModels;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GeneratePMMLModelMojo.class);\n+\n+    private static final String PMMLRESOURCES = \"PMMLResources\";\n+    private static final String PMML = \"pmml\";\n+    private static final PMMLAssemblerService PMML_ASSEMBLER_SERVICE = new PMMLAssemblerService();\n+    private static final String generatedSourcesPath = \"/generated-sources/\";\n+    public static PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+    @Parameter\n+    private Map<String, String> properties;\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+    @Parameter(defaultValue = \"${project.resources}\", required = true, readonly = true)\n+    private List<org.apache.maven.model.Resource> resourcesDirectories;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n+        if (!modelCompilerInClassPath) {\n+            getLog().warn(\"Skipping `generatePMMLModel` because you did\" +\n+                                  \" not provide the required dependency on the project classpath.\\n\" +\n+                                  \"To enable it for your project, add the `drools-model-compiler`\" +\n+                                  \" dependency in the `pom.xml` file of your project.\\n\");\n+        } else {\n+            generateModel();\n+        }\n+    }\n+\n+    private void generateModel() throws MojoExecutionException {\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        URLClassLoader projectClassLoader = null;\n+        try {\n+            Set<URL> urls = new HashSet<>();\n+            for (String element : project.getCompileClasspathElements()) {\n+                urls.add(new File(element).toURI().toURL());\n+            }\n+\n+            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n+                                                                                      \"runtime\")));\n+            for (Artifact artifact : project.getArtifacts()) {\n+                File file = artifact.getFile();\n+                if (file != null) {\n+                    urls.add(file.toURI().toURL());\n+                }\n+            }\n+            urls.add(outputDirectory.toURI().toURL());\n+            projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]), getClass().getClassLoader());\n+            Thread.currentThread().setContextClassLoader(projectClassLoader);\n+            generateFiles();\n+        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n+            throw new MojoExecutionException(e.getMessage(), e);\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(contextClassLoader);\n+            if (projectClassLoader != null) {\n+                try {\n+                    projectClassLoader.close();\n+                } catch (IOException e) {\n+                    getLog().warn(e);\n+                }\n+            }\n+        }\n+        getLog().info(\"PMML model successfully generated\");\n+    }\n+\n+    private void generateFiles() throws MojoExecutionException {\n+        final List<Resource> resources = getPMMLResources();\n+        final List<PMMLResource> pmmlResources = resources.stream()\n+                .map(this::parseResource)\n+                .collect(toList());\n+        final List<GeneratedFile> generatedFiles = new ArrayList<>();\n+        generateFile(pmmlResources, generatedFiles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e13dcff72b36db77afea0d8d652886b5076aae"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxODA0MQ==", "bodyText": "Most of the code in this class is sort of copied in kogito-runtimes ( https://github.com/kiegroup/kogito-runtimes/blob/master/kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java ).\nDo you think it is possible to refactor it in a common class inside drools repo. Fine for me to consider a new ticket for that of course.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r500418041", "createdAt": "2020-10-06T16:02:51Z", "author": {"login": "danielezonca"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GeneratePMMLModelMojo.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.drools.compiler.compiler.DroolsError;\n+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.io.impl.DescrResource;\n+import org.drools.core.io.impl.FileSystemResource;\n+import org.drools.modelcompiler.builder.GeneratedFile;\n+import org.drools.modelcompiler.builder.ModelBuilderImpl;\n+import org.drools.modelcompiler.builder.PackageSources;\n+import org.kie.api.KieServices;\n+import org.kie.api.io.Resource;\n+import org.kie.api.io.ResourceType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.pmml.commons.model.HasNestedModels;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.assembler.service.PMMLAssemblerService;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModelWithSources;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+import static org.kie.pmml.evaluator.assembler.service.PMMLCompilerService.getKiePMMLModelsFromResourceFromPlugin;\n+\n+@Mojo(name = \"generatePMMLModel\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        requiresProject = true,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GeneratePMMLModelMojo extends AbstractKieMojo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e13dcff72b36db77afea0d8d652886b5076aae"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2d1a1303a70b998d9221ba0c69db8d23137d3a", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0c2d1a1303a70b998d9221ba0c69db8d23137d3a", "committedDate": "2020-10-07T07:48:05Z", "message": "[DROOLS-5375] Refactored as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dba746da8ce02e335c4b0d174ae899c056dc647", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/7dba746da8ce02e335c4b0d174ae899c056dc647", "committedDate": "2020-10-07T11:13:48Z", "message": "[DROOLS-5375] Refactored as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dda073bf8c44cf94a80b2e8ab58a161c90c6d90", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6dda073bf8c44cf94a80b2e8ab58a161c90c6d90", "committedDate": "2020-10-07T11:16:15Z", "message": "[DROOLS-5375] Refactored as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77244e6467fb69d5d9cf104f1ed22afcc55074ef", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/77244e6467fb69d5d9cf104f1ed22afcc55074ef", "committedDate": "2020-10-07T12:05:09Z", "message": "[DROOLS-5375] Refactored as per PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2504dd0c990cf82990807553cea6f03555ebcd1d", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/2504dd0c990cf82990807553cea6f03555ebcd1d", "committedDate": "2020-10-07T16:30:54Z", "message": "[DROOLS-5375] Fixed IT tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NTI1MzUz", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#pullrequestreview-504525353", "createdAt": "2020-10-08T08:06:51Z", "commit": {"oid": "2504dd0c990cf82990807553cea6f03555ebcd1d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODowNjo1MlrOHeSsqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoxNTowNVrOHeS_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNTY3Mw==", "bodyText": "Is it possible to replace these lines with a computeIfAbsent?\nUsing ConcurrentHashMap the whole method is performed atomically to be thread safe", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r501525673", "createdAt": "2020-10-08T08:06:52Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/src/test/java/org/kie/maven/plugin/KieMavenPluginBaseIntegrationTest.java", "diffHunk": "@@ -54,20 +59,39 @@ protected void restoreKiePom(String projectName) throws Exception {\n     }\n \n     protected MavenExecutionResult buildKJarProject(String kjarName, String[] options, String... mavenGoals) throws Exception {\n+        logger.info(\"buildKJarProject {} {} {}\", kjarName, options, mavenGoals);\n         final MavenRuntime mavenRuntime = mavenRuntimeBuilder\n                 .forkedBuilder()\n                 // To enable logging using slf4j-simple on the internal classes of the plug-in:\n                 //.withCliOptions(\"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\")\n                 .withEnvironment(System.getenv())\n                 .withCliOptions(options)\n                 .build();\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(kjarName).append(\"_\");\n+        builder.append(mavenRuntime.getMavenVersion()).append(\"_\");\n+        for (String option : options) {\n+            builder.append(option).append(\"_\");\n+        }\n+        for (String mavenGoal : mavenGoals) {\n+            builder.append(mavenGoal).append(\"_\");\n+        }\n+        final String key = builder.toString();\n+        if (!BUILT_MAP.containsKey(key)) {\n+            BUILT_MAP.put(key, getMavenExecutionResult(kjarName, mavenRuntime, mavenGoals));\n+        }\n+        return BUILT_MAP.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2504dd0c990cf82990807553cea6f03555ebcd1d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzk5OQ==", "bodyText": "Is it possible to move this code inside the if block to avoid to initialize the runtime if the value is already available?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r501527999", "createdAt": "2020-10-08T08:10:44Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/src/test/java/org/kie/maven/plugin/KieMavenPluginBaseIntegrationTest.java", "diffHunk": "@@ -54,20 +59,39 @@ protected void restoreKiePom(String projectName) throws Exception {\n     }\n \n     protected MavenExecutionResult buildKJarProject(String kjarName, String[] options, String... mavenGoals) throws Exception {\n+        logger.info(\"buildKJarProject {} {} {}\", kjarName, options, mavenGoals);\n         final MavenRuntime mavenRuntime = mavenRuntimeBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2504dd0c990cf82990807553cea6f03555ebcd1d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzMDYxOQ==", "bodyText": "Can you add a log line here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#discussion_r501530619", "createdAt": "2020-10-08T08:15:05Z", "author": {"login": "danielezonca"}, "path": "kie-plugins-testing/src/test/java/org/kie/maven/plugin/KieMavenPluginBaseIntegrationTest.java", "diffHunk": "@@ -54,20 +59,39 @@ protected void restoreKiePom(String projectName) throws Exception {\n     }\n \n     protected MavenExecutionResult buildKJarProject(String kjarName, String[] options, String... mavenGoals) throws Exception {\n+        logger.info(\"buildKJarProject {} {} {}\", kjarName, options, mavenGoals);\n         final MavenRuntime mavenRuntime = mavenRuntimeBuilder\n                 .forkedBuilder()\n                 // To enable logging using slf4j-simple on the internal classes of the plug-in:\n                 //.withCliOptions(\"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\")\n                 .withEnvironment(System.getenv())\n                 .withCliOptions(options)\n                 .build();\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(kjarName).append(\"_\");\n+        builder.append(mavenRuntime.getMavenVersion()).append(\"_\");\n+        for (String option : options) {\n+            builder.append(option).append(\"_\");\n+        }\n+        for (String mavenGoal : mavenGoals) {\n+            builder.append(mavenGoal).append(\"_\");\n+        }\n+        final String key = builder.toString();\n+        if (!BUILT_MAP.containsKey(key)) {\n+            BUILT_MAP.put(key, getMavenExecutionResult(kjarName, mavenRuntime, mavenGoals));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2504dd0c990cf82990807553cea6f03555ebcd1d"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1575a23c954f799f69cfdf1bb0b7e2a7daa19500", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1575a23c954f799f69cfdf1bb0b7e2a7daa19500", "committedDate": "2020-10-08T08:18:21Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5375"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69efc5bf7131e31fdfe9e92c932131f753b930e", "author": {"user": {"login": "gitgabrio", "name": "Gabriele Cardosi"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b69efc5bf7131e31fdfe9e92c932131f753b930e", "committedDate": "2020-10-08T08:46:23Z", "message": "[DROOLS-5375] Fixed as per PR suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NTcwMDkz", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2251#pullrequestreview-504570093", "createdAt": "2020-10-08T08:59:02Z", "commit": {"oid": "b69efc5bf7131e31fdfe9e92c932131f753b930e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1190, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}