{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNTIxMTE3", "number": 2181, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowNjozMFrOEWHvOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDo0MDoxMVrOEWKo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjMwOTA2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningPlanningKieServerExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowNjozMFrOG9Ql7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoxODo0N1rOG9XrUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4ODE3Mg==", "bodyText": "Could you please explain why the pool has exactly 4 threads?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466888172", "createdAt": "2020-08-07T08:06:30Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningPlanningKieServerExtension.java", "diffHunk": "@@ -154,7 +154,7 @@ public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n             throw new KieServicesException(String.format(USER_SYSTEM_CONFIGURATION_ERROR, e.getMessage()), e);\n         }\n \n-        this.executorService = Executors.newFixedThreadPool(3);\n+        this.executorService = Executors.newScheduledThreadPool(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwNDI0MQ==", "bodyText": "The solverExecutor, solutionProcessor and solutionSynchronizer are threads running at the same time. This last added thread is for being able to have a fourth slot to be scheduled for the firstLevelLocalSearch time.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467004241", "createdAt": "2020-08-07T12:18:47Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningPlanningKieServerExtension.java", "diffHunk": "@@ -154,7 +154,7 @@ public void init(KieServerImpl kieServer, KieServerRegistry registry) {\n             throw new KieServicesException(String.format(USER_SYSTEM_CONFIGURATION_ERROR, e.getMessage()), e);\n         }\n \n-        this.executorService = Executors.newFixedThreadPool(3);\n+        this.executorService = Executors.newScheduledThreadPool(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4ODE3Mg=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQxODQ2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MTozNlrOG9Ro6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoyMDozOFrOG9XunA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTMyMw==", "bodyText": "Why not failing fast in the constructor if the usersSyncInterval is < 0 ?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466905323", "createdAt": "2020-08-07T08:41:36Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -263,11 +324,29 @@ Action doSynchronizeSolution() {\n     }\n \n     protected boolean isUsersSyncTime() {\n-        return System.currentTimeMillis() > nextUsersSyncTime;\n+        return nextUsersSyncTime > 0 && getSystemTime() > nextUsersSyncTime;\n     }\n \n     protected long calculateNextUsersSyncTime() {\n-        return System.currentTimeMillis() + usersSyncInterval.toMillis();\n+        if (usersSyncInterval.toMillis() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwNTA4NA==", "bodyText": "could be an option, I personally prefer this.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467005084", "createdAt": "2020-08-07T12:20:38Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -263,11 +324,29 @@ Action doSynchronizeSolution() {\n     }\n \n     protected boolean isUsersSyncTime() {\n-        return System.currentTimeMillis() > nextUsersSyncTime;\n+        return nextUsersSyncTime > 0 && getSystemTime() > nextUsersSyncTime;\n     }\n \n     protected long calculateNextUsersSyncTime() {\n-        return System.currentTimeMillis() + usersSyncInterval.toMillis();\n+        if (usersSyncInterval.toMillis() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTMyMw=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQyNjQ4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0NDowOVrOG9Rtzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMDoyN1rOG_Jpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNjU3NQ==", "bodyText": "Is it really necessary to accept negative or zero periods if we ignore them later? Why not failing fast?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466906575", "createdAt": "2020-08-07T08:44:09Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -119,12 +148,32 @@ public void initSolverExecutor() {\n         startPermit.release();\n     }\n \n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     */\n     public void synchronizeSolution(TaskAssigningSolution solution, LocalDateTime fromLastModificationDate) {\n+        synchronizeSolution(solution, fromLastModificationDate, Duration.ofMillis(0));\n+    }\n+\n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     * @param unchangedPeriodTimeout a non null period of time for returning from the synchronization if no changes were\n+     * produced during that period. A negative or zero period is ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwNjM0NQ==", "bodyText": "same as above, nobody will configure things like \"wait -10 seconds\". I think it's ok.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467006345", "createdAt": "2020-08-07T12:23:15Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -119,12 +148,32 @@ public void initSolverExecutor() {\n         startPermit.release();\n     }\n \n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     */\n     public void synchronizeSolution(TaskAssigningSolution solution, LocalDateTime fromLastModificationDate) {\n+        synchronizeSolution(solution, fromLastModificationDate, Duration.ofMillis(0));\n+    }\n+\n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     * @param unchangedPeriodTimeout a non null period of time for returning from the synchronization if no changes were\n+     * produced during that period. A negative or zero period is ignored.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNjU3NQ=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMDk3MA==", "bodyText": "Most often no, but when somebody does, it's better to give him a nudge instead of silently ignoring wrong input.\nAccepting unsanitized inputs leads to unnecessary complexity of the code doing calculations based on it, like here:\nhttps://github.com/kiegroup/droolsjbpm-integration/pull/2181/files/8744ee8013894c78258d26726e3da7de98aaeb95#diff-286401b0213653b16fad9e16daab206cR341-R345", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467030970", "createdAt": "2020-08-07T13:12:21Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -119,12 +148,32 @@ public void initSolverExecutor() {\n         startPermit.release();\n     }\n \n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     */\n     public void synchronizeSolution(TaskAssigningSolution solution, LocalDateTime fromLastModificationDate) {\n+        synchronizeSolution(solution, fromLastModificationDate, Duration.ofMillis(0));\n+    }\n+\n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     * @param unchangedPeriodTimeout a non null period of time for returning from the synchronization if no changes were\n+     * produced during that period. A negative or zero period is ignored.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNjU3NQ=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTU2Mw==", "bodyText": "was applied", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r468871563", "createdAt": "2020-08-11T21:20:27Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -119,12 +148,32 @@ public void initSolverExecutor() {\n         startPermit.release();\n     }\n \n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     */\n     public void synchronizeSolution(TaskAssigningSolution solution, LocalDateTime fromLastModificationDate) {\n+        synchronizeSolution(solution, fromLastModificationDate, Duration.ofMillis(0));\n+    }\n+\n+    /**\n+     * Starts the synchronization of the solution from the indicated last modification date.\n+     * @param solution a non null solution instance to synchronize.\n+     * @param fromLastModificationDate filtering parameter for reading the modifications.\n+     * @param unchangedPeriodTimeout a non null period of time for returning from the synchronization if no changes were\n+     * produced during that period. A negative or zero period is ignored.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNjU3NQ=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQ4OTA4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowMjo1NlrOG9STxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoyNzoyMlrOG9X7Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNjI5NQ==", "bodyText": "Suggestion: if the Result had nextAction field, we wouldn't need to use the generic Pair.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466916295", "createdAt": "2020-08-07T09:02:56Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -143,23 +192,18 @@ public void destroy() {\n     @Override\n     public void run() {\n         LOGGER.debug(\"Solution Synchronizer Started\");\n-        Action nextAction;\n+        Pair<Action, Result> nextActionOrResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwODMwNg==", "bodyText": "yes, but the Result is what is exposed to the configured \"consumer\", e.g. for passing the produced changes, and the nextAction is internal to the SolutionSynchronizer and there's no need to expose it to the outside.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467008306", "createdAt": "2020-08-07T12:27:22Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -143,23 +192,18 @@ public void destroy() {\n     @Override\n     public void run() {\n         LOGGER.debug(\"Solution Synchronizer Started\");\n-        Action nextAction;\n+        Pair<Action, Result> nextActionOrResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNjI5NQ=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU2Mjk4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningConstants.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyNjoxMlrOG9TBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozNjozMFrOG9cXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyODAwNw==", "bodyText": "Thinking aloud:\nDoes the firstLevelLocalSearchTime and secondLevelLocalSearchTime set expectations regarding which one blocks?\nHow about:\nwaitForImprovedSolutionDuration vs. improveSolutionOnBackgroundDuration", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466928007", "createdAt": "2020-08-07T09:26:12Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningConstants.java", "diffHunk": "@@ -91,6 +91,32 @@ private TaskAssigningConstants() {\n      */\n     public static final String TASK_ASSIGNING_USERS_SYNC_INTERVAL = \"org.kie.server.taskAssigning.usersSyncInterval\";\n \n+    /**\n+     * Property for configuring the amount of time to execute LS phase before sending any plan to the kie-server with\n+     * the jBPM runtime. Allows an early improvement of the solution. This value should typically be low, e.g. 500\n+     * milliseconds, etc.\n+     *\n+     * The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days considered to\n+     * be exactly 24 hours.\n+     * <p>\n+     * e.g.\n+     * \"PT0.500S\"  configures 500 milliseconds.\n+     */\n+    public static final String TASK_ASSIGNING_FIRST_LEVEL_LOCAL_SEARCH_TIME = \"org.kie.server.taskAssigning.firstLevelLocalSearchTime\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMjYzNQ==", "bodyText": "yes..., was not direct to find a good name for this configuration parameters (an explanation will go in the documentation in all cases) , good thing about this current names is that the term \"LocalSearch\", that in the end is what the configuration is about, somehow links to the OptaPlanner LS. Will think a bit", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467032635", "createdAt": "2020-08-07T13:15:22Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningConstants.java", "diffHunk": "@@ -91,6 +91,32 @@ private TaskAssigningConstants() {\n      */\n     public static final String TASK_ASSIGNING_USERS_SYNC_INTERVAL = \"org.kie.server.taskAssigning.usersSyncInterval\";\n \n+    /**\n+     * Property for configuring the amount of time to execute LS phase before sending any plan to the kie-server with\n+     * the jBPM runtime. Allows an early improvement of the solution. This value should typically be low, e.g. 500\n+     * milliseconds, etc.\n+     *\n+     * The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days considered to\n+     * be exactly 24 hours.\n+     * <p>\n+     * e.g.\n+     * \"PT0.500S\"  configures 500 milliseconds.\n+     */\n+    public static final String TASK_ASSIGNING_FIRST_LEVEL_LOCAL_SEARCH_TIME = \"org.kie.server.taskAssigning.firstLevelLocalSearchTime\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyODAwNw=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTg1MA==", "bodyText": "That's a question: does the user, in this case probably a system administrator, who is configuring the task assigning, need to understand it runs some local search under the hood?\nShould the name of the parameter reflect its observable effect or internal implementation? I would argue rather the former, wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467035850", "createdAt": "2020-08-07T13:21:14Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningConstants.java", "diffHunk": "@@ -91,6 +91,32 @@ private TaskAssigningConstants() {\n      */\n     public static final String TASK_ASSIGNING_USERS_SYNC_INTERVAL = \"org.kie.server.taskAssigning.usersSyncInterval\";\n \n+    /**\n+     * Property for configuring the amount of time to execute LS phase before sending any plan to the kie-server with\n+     * the jBPM runtime. Allows an early improvement of the solution. This value should typically be low, e.g. 500\n+     * milliseconds, etc.\n+     *\n+     * The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days considered to\n+     * be exactly 24 hours.\n+     * <p>\n+     * e.g.\n+     * \"PT0.500S\"  configures 500 milliseconds.\n+     */\n+    public static final String TASK_ASSIGNING_FIRST_LEVEL_LOCAL_SEARCH_TIME = \"org.kie.server.taskAssigning.firstLevelLocalSearchTime\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyODAwNw=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MTE2Mw==", "bodyText": "well, in some way, yes, but unfortunately the configuration of all the task assigning integration has many aspects that are very closely to OptaPlanner, and it's not neccesary a bad thing. e.g.\nwe could eventually configure things like\norg.kie.server.taskAssigning.solver.configResource\norg.kie.server.taskAssigning.solver.moveThreadCount\norg.kie.server.taskAssigning.solver.moveThreadBufferSize\norg.kie.server.taskAssigning.solver.threadFactoryClass\nand I think it's a good thing, since it's links you to OptaPlanner that is the in the end what we'll always have behind the scene. Additionally it helps to have a quick link with OptaPlanner documentation, etc.\nThis two new parametes are a kind of \"in the middle\"", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467081163", "createdAt": "2020-08-07T14:36:30Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/TaskAssigningConstants.java", "diffHunk": "@@ -91,6 +91,32 @@ private TaskAssigningConstants() {\n      */\n     public static final String TASK_ASSIGNING_USERS_SYNC_INTERVAL = \"org.kie.server.taskAssigning.usersSyncInterval\";\n \n+    /**\n+     * Property for configuring the amount of time to execute LS phase before sending any plan to the kie-server with\n+     * the jBPM runtime. Allows an early improvement of the solution. This value should typically be low, e.g. 500\n+     * milliseconds, etc.\n+     *\n+     * The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days considered to\n+     * be exactly 24 hours.\n+     * <p>\n+     * e.g.\n+     * \"PT0.500S\"  configures 500 milliseconds.\n+     */\n+    public static final String TASK_ASSIGNING_FIRST_LEVEL_LOCAL_SEARCH_TIME = \"org.kie.server.taskAssigning.firstLevelLocalSearchTime\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyODAwNw=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU4NzQ5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMzozOVrOG9TQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMzozOVrOG9TQNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {\n          \n          \n            \n                private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {\n          \n          \n            \n                private void scheduleOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466931766", "createdAt": "2020-08-07T09:33:39Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "diffHunk": "@@ -164,24 +177,84 @@ private void addProblemFactChanges(List<ProblemFactChange<TaskAssigningSolution>\n      * @param event event produced by the solver.\n      */\n     private void onBestSolutionChange(BestSolutionChangedEvent<TaskAssigningSolution> event) {\n-        LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {}, isCurrentChangeSetProcessed: {}\",\n-                     event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(), context.isProcessedChangeSet(context.getCurrentChangeSetId()));\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {},\" +\n+                                 \" isCurrentChangeSetProcessed: {}, newBestSolution: {}\",\n+                         event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(),\n+                         context.isProcessedChangeSet(context.getCurrentChangeSetId()), event.getNewBestSolution());\n+        }\n+\n+        TaskAssigningSolution newBestSolution = event.getNewBestSolution();\n+        if (event.isEveryProblemFactChangeProcessed() && newBestSolution.getScore().isSolutionInitialized()) {\n+            lastBestSolution.set(newBestSolution);\n+            if (hasFirstLevelLocalSearchTime()) {\n+                scheduledOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());\n+            } else {\n+                onBestSolutionChange(newBestSolution);\n+            }\n+        }\n+    }\n \n-        if (event.isEveryProblemFactChangeProcessed() &&\n-                event.getNewBestSolution().getScore().isSolutionInitialized() &&\n-                !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n+    private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU5MDA0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDoyOVrOG9TRug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDoyOVrOG9TRug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            scheduledOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());\n          \n          \n            \n                            scheduleOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466932154", "createdAt": "2020-08-07T09:34:29Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "diffHunk": "@@ -164,24 +177,84 @@ private void addProblemFactChanges(List<ProblemFactChange<TaskAssigningSolution>\n      * @param event event produced by the solver.\n      */\n     private void onBestSolutionChange(BestSolutionChangedEvent<TaskAssigningSolution> event) {\n-        LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {}, isCurrentChangeSetProcessed: {}\",\n-                     event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(), context.isProcessedChangeSet(context.getCurrentChangeSetId()));\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {},\" +\n+                                 \" isCurrentChangeSetProcessed: {}, newBestSolution: {}\",\n+                         event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(),\n+                         context.isProcessedChangeSet(context.getCurrentChangeSetId()), event.getNewBestSolution());\n+        }\n+\n+        TaskAssigningSolution newBestSolution = event.getNewBestSolution();\n+        if (event.isEveryProblemFactChangeProcessed() && newBestSolution.getScore().isSolutionInitialized()) {\n+            lastBestSolution.set(newBestSolution);\n+            if (hasFirstLevelLocalSearchTime()) {\n+                scheduledOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjYwMTcyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozODoxOVrOG9TYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozODoxOVrOG9TYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzk2Ng==", "bodyText": "The SolverHandlerContext already knows everything to be able to provide \"isProcessedCurrentChangeSet\". No need to ask it for the current changeset ID only to pass it back.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466933966", "createdAt": "2020-08-07T09:38:19Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "diffHunk": "@@ -164,24 +177,84 @@ private void addProblemFactChanges(List<ProblemFactChange<TaskAssigningSolution>\n      * @param event event produced by the solver.\n      */\n     private void onBestSolutionChange(BestSolutionChangedEvent<TaskAssigningSolution> event) {\n-        LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {}, isCurrentChangeSetProcessed: {}\",\n-                     event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(), context.isProcessedChangeSet(context.getCurrentChangeSetId()));\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {},\" +\n+                                 \" isCurrentChangeSetProcessed: {}, newBestSolution: {}\",\n+                         event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(),\n+                         context.isProcessedChangeSet(context.getCurrentChangeSetId()), event.getNewBestSolution());\n+        }\n+\n+        TaskAssigningSolution newBestSolution = event.getNewBestSolution();\n+        if (event.isEveryProblemFactChangeProcessed() && newBestSolution.getScore().isSolutionInitialized()) {\n+            lastBestSolution.set(newBestSolution);\n+            if (hasFirstLevelLocalSearchTime()) {\n+                scheduledOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());\n+            } else {\n+                onBestSolutionChange(newBestSolution);\n+            }\n+        }\n+    }\n \n-        if (event.isEveryProblemFactChangeProcessed() &&\n-                event.getNewBestSolution().getScore().isSolutionInitialized() &&\n-                !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n+    private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {\n+        if (scheduledFuture.get() == null && !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjYxNDk5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTo0MjoyM1rOG9Tgug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDo0NFrOG9YUCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNTk5NA==", "bodyText": "Is the check for the same instance of a solution intended?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466935994", "createdAt": "2020-08-07T09:42:23Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "diffHunk": "@@ -164,24 +177,84 @@ private void addProblemFactChanges(List<ProblemFactChange<TaskAssigningSolution>\n      * @param event event produced by the solver.\n      */\n     private void onBestSolutionChange(BestSolutionChangedEvent<TaskAssigningSolution> event) {\n-        LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {}, isCurrentChangeSetProcessed: {}\",\n-                     event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(), context.isProcessedChangeSet(context.getCurrentChangeSetId()));\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {},\" +\n+                                 \" isCurrentChangeSetProcessed: {}, newBestSolution: {}\",\n+                         event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(),\n+                         context.isProcessedChangeSet(context.getCurrentChangeSetId()), event.getNewBestSolution());\n+        }\n+\n+        TaskAssigningSolution newBestSolution = event.getNewBestSolution();\n+        if (event.isEveryProblemFactChangeProcessed() && newBestSolution.getScore().isSolutionInitialized()) {\n+            lastBestSolution.set(newBestSolution);\n+            if (hasFirstLevelLocalSearchTime()) {\n+                scheduledOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());\n+            } else {\n+                onBestSolutionChange(newBestSolution);\n+            }\n+        }\n+    }\n \n-        if (event.isEveryProblemFactChangeProcessed() &&\n-                event.getNewBestSolution().getScore().isSolutionInitialized() &&\n-                !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n+    private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {\n+        if (scheduledFuture.get() == null && !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n             lock.lock();\n+            LOGGER.debug(\"Schedule execute solution change with previous chBestSolution: {}\", chBestSolution);\n             try {\n-                LOGGER.debug(\"A new solution has been produced for changeSetId: {}\", context.getCurrentChangeSetId());\n-                currentSolution = event.getNewBestSolution();\n-                context.setProcessedChangeSet(context.getCurrentChangeSetId());\n-                solutionProcessor.process(currentSolution);\n+                Supplier<TaskAssigningSolution> solutionSupplier = () -> lastBestSolution.get();\n+                ScheduledFuture<?> future = executorService.schedule(() -> executeSolutionChange(chBestSolution, solutionSupplier),\n+                                                                     delay,\n+                                                                     TimeUnit.MILLISECONDS);\n+                scheduledFuture.set(future);\n             } finally {\n                 lock.unlock();\n             }\n         }\n     }\n \n+    private void onBestSolutionChange(TaskAssigningSolution newBestSolution) {\n+        if (!context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n+            executeSolutionChange(newBestSolution);\n+        }\n+    }\n+\n+    private void executeSolutionChange(TaskAssigningSolution chBestSolution, Supplier<TaskAssigningSolution> solutionSupplier) {\n+        lock.lock();\n+        try {\n+            TaskAssigningSolution currentLastBestSolution = solutionSupplier.get();\n+            LOGGER.debug(\"Executing delayed solution change for currentChangeSetId: {}, lastBestSolution: {}, lastBestSolution: {}\",\n+                         context.getCurrentChangeSetId(), currentLastBestSolution.getScore(), currentLastBestSolution);\n+\n+            if (chBestSolution == currentLastBestSolution) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDY2NQ==", "bodyText": "yes.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467014665", "createdAt": "2020-08-07T12:40:44Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "diffHunk": "@@ -164,24 +177,84 @@ private void addProblemFactChanges(List<ProblemFactChange<TaskAssigningSolution>\n      * @param event event produced by the solver.\n      */\n     private void onBestSolutionChange(BestSolutionChangedEvent<TaskAssigningSolution> event) {\n-        LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {}, isCurrentChangeSetProcessed: {}\",\n-                     event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(), context.isProcessedChangeSet(context.getCurrentChangeSetId()));\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"onBestSolutionChange: isEveryProblemFactChangeProcessed: {}, currentChangeSetId: {},\" +\n+                                 \" isCurrentChangeSetProcessed: {}, newBestSolution: {}\",\n+                         event.isEveryProblemFactChangeProcessed(), context.getCurrentChangeSetId(),\n+                         context.isProcessedChangeSet(context.getCurrentChangeSetId()), event.getNewBestSolution());\n+        }\n+\n+        TaskAssigningSolution newBestSolution = event.getNewBestSolution();\n+        if (event.isEveryProblemFactChangeProcessed() && newBestSolution.getScore().isSolutionInitialized()) {\n+            lastBestSolution.set(newBestSolution);\n+            if (hasFirstLevelLocalSearchTime()) {\n+                scheduledOnBestSolutionChange(newBestSolution, getFirstLevelLocalSearchTime().toMillis());\n+            } else {\n+                onBestSolutionChange(newBestSolution);\n+            }\n+        }\n+    }\n \n-        if (event.isEveryProblemFactChangeProcessed() &&\n-                event.getNewBestSolution().getScore().isSolutionInitialized() &&\n-                !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n+    private void scheduledOnBestSolutionChange(TaskAssigningSolution chBestSolution, long delay) {\n+        if (scheduledFuture.get() == null && !context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n             lock.lock();\n+            LOGGER.debug(\"Schedule execute solution change with previous chBestSolution: {}\", chBestSolution);\n             try {\n-                LOGGER.debug(\"A new solution has been produced for changeSetId: {}\", context.getCurrentChangeSetId());\n-                currentSolution = event.getNewBestSolution();\n-                context.setProcessedChangeSet(context.getCurrentChangeSetId());\n-                solutionProcessor.process(currentSolution);\n+                Supplier<TaskAssigningSolution> solutionSupplier = () -> lastBestSolution.get();\n+                ScheduledFuture<?> future = executorService.schedule(() -> executeSolutionChange(chBestSolution, solutionSupplier),\n+                                                                     delay,\n+                                                                     TimeUnit.MILLISECONDS);\n+                scheduledFuture.set(future);\n             } finally {\n                 lock.unlock();\n             }\n         }\n     }\n \n+    private void onBestSolutionChange(TaskAssigningSolution newBestSolution) {\n+        if (!context.isProcessedChangeSet(context.getCurrentChangeSetId())) {\n+            executeSolutionChange(newBestSolution);\n+        }\n+    }\n+\n+    private void executeSolutionChange(TaskAssigningSolution chBestSolution, Supplier<TaskAssigningSolution> solutionSupplier) {\n+        lock.lock();\n+        try {\n+            TaskAssigningSolution currentLastBestSolution = solutionSupplier.get();\n+            LOGGER.debug(\"Executing delayed solution change for currentChangeSetId: {}, lastBestSolution: {}, lastBestSolution: {}\",\n+                         context.getCurrentChangeSetId(), currentLastBestSolution.getScore(), currentLastBestSolution);\n+\n+            if (chBestSolution == currentLastBestSolution) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNTk5NA=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjc1MzU4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDoyODo1OFrOG9U0HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDoyODo1OFrOG9U0HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1NzM0MA==", "bodyText": "Do we need the compound condition? Maybe we should send the new best solution if its score is better than the score of the current solution.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466957340", "createdAt": "2020-08-07T10:28:58Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolverHandler.java", "diffHunk": "@@ -215,13 +295,32 @@ private void onSolutionProcessed(SolutionProcessor.Result result) {\n \n     /**\n      * Invoked every time the SolutionSynchronizer gets updated information from the jBPM runtime and there are changes\n-     * to apply.\n+     * to apply, or when the configurable amount of time with no changes has elapsed.\n      * @param result Contains the list of changes to apply.\n      */\n-    private void onUpdateSolution(SolutionSynchronizer.Result result) {\n+    private void onSolutionSynchronized(SolutionSynchronizer.Result result) {\n         lock.lock();\n         try {\n-            addProblemFactChanges(result.getChanges());\n+            if (result.hasChanges()) {\n+                addProblemFactChanges(result.getChanges());\n+            } else {\n+                LOGGER.debug(\"Processing synchronization unchanged period timeout. Checking if there is a\" +\n+                                     \" lastBestSolution with an improved score to send\");\n+                TaskAssigningSolution bestSolution = lastBestSolution.get();\n+                secondLevelSolutionSent.set(true);\n+                if (currentSolution.get() != bestSolution && !currentSolution.get().getScore().equals(bestSolution.getScore())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjc2MzY1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDozMjozMFrOG9U6AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDozMjozMFrOG9U6AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1ODg0OQ==", "bodyText": "Why not start at 0?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466958849", "createdAt": "2020-08-07T10:32:30Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizerTest.java", "diffHunk": "@@ -57,6 +62,7 @@\n     private static final Duration SYNCH_INTERVAL = Duration.ofMillis(2);\n     private static final Duration USERS_SYNCH_INTERVAL = Duration.ofMillis(4000);\n     private static final Duration QUERY_SHIFT = Duration.parse(\"PT2S\");\n+    private static final long SYSTEM_TIME = 123;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjc4NDUwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/SolverHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDo0MDoxMVrOG9VGpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowMTowNlrOG9Y89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2MjA4Ng==", "bodyText": "If the goal is to test the propagation of the parameters to the SolverHandler, the assertion should be the other way around:\nassertThat(handler.getTargetUserId()).isEqualTo(TARGET_USER);\nPlease see the other tests too.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r466962086", "createdAt": "2020-08-07T10:40:11Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/SolverHandlerTest.java", "diffHunk": "@@ -125,6 +149,62 @@ public void setUp() {\n         doReturn(solutionProcessor).when(handler).createSolutionProcessor(eq(delegate), any(), eq(TARGET_USER), anyInt());\n     }\n \n+    @After\n+    public void cleanUp() {\n+        System.clearProperty(TASK_ASSIGNING_PROCESS_RUNTIME_TARGET_USER);\n+        System.clearProperty(TASK_ASSIGNING_PUBLISH_WINDOW_SIZE);\n+        System.clearProperty(TASK_ASSIGNING_SYNC_INTERVAL);\n+        System.clearProperty(TASK_ASSIGNING_SYNC_QUERIES_SHIFT);\n+        System.clearProperty(TASK_ASSIGNING_USERS_SYNC_INTERVAL);\n+        System.clearProperty(TASK_ASSIGNING_FIRST_LEVEL_LOCAL_SEARCH_TIME);\n+        System.clearProperty(TASK_ASSIGNING_SECOND_LEVEL_LOCAL_SEARCH_TIME);\n+    }\n+\n+    @Test\n+    public void getTargetUserId() {\n+        assertThat(TARGET_USER).isEqualTo(handler.getTargetUserId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNTE0MQ==", "bodyText": "damn, good catch.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2181#discussion_r467025141", "createdAt": "2020-08-07T13:01:06Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/SolverHandlerTest.java", "diffHunk": "@@ -125,6 +149,62 @@ public void setUp() {\n         doReturn(solutionProcessor).when(handler).createSolutionProcessor(eq(delegate), any(), eq(TARGET_USER), anyInt());\n     }\n \n+    @After\n+    public void cleanUp() {\n+        System.clearProperty(TASK_ASSIGNING_PROCESS_RUNTIME_TARGET_USER);\n+        System.clearProperty(TASK_ASSIGNING_PUBLISH_WINDOW_SIZE);\n+        System.clearProperty(TASK_ASSIGNING_SYNC_INTERVAL);\n+        System.clearProperty(TASK_ASSIGNING_SYNC_QUERIES_SHIFT);\n+        System.clearProperty(TASK_ASSIGNING_USERS_SYNC_INTERVAL);\n+        System.clearProperty(TASK_ASSIGNING_FIRST_LEVEL_LOCAL_SEARCH_TIME);\n+        System.clearProperty(TASK_ASSIGNING_SECOND_LEVEL_LOCAL_SEARCH_TIME);\n+    }\n+\n+    @Test\n+    public void getTargetUserId() {\n+        assertThat(TARGET_USER).isEqualTo(handler.getTargetUserId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2MjA4Ng=="}, "originalCommit": {"oid": "8744ee8013894c78258d26726e3da7de98aaeb95"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2057, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}