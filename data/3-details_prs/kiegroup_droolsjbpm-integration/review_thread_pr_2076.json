{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDQ0OTQ4", "number": 2076, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxODo1N1rOD2jQ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxODo1N1rOD2jQ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTI3NDY2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoxODo1N1rOGMWsug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjo1OToxMVrOGMh1gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwNzk5NA==", "bodyText": "The message is missing a time unit of the period (seconds, milliseconds?).", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2076#discussion_r415607994", "createdAt": "2020-04-27T08:18:57Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -178,7 +178,7 @@ Action doInitSolverExecutor() {\n             LOGGER.debug(\"Solution Synchronizer will recover the solution from the jBPM runtime for starting the solver.\");\n             if (!solverExecutor.isStopped()) {\n                 LOGGER.debug(\"Previous solver instance has not yet finished, let's wait for it to stop.\" +\n-                                     \" Next attempt will be in {} milliseconds.\", syncInterval.toMillis());\n+                                     \" Next attempt will be in a period of {}.\", syncInterval);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2078d5df1eba11394f9c889d11a52bcda012591c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjQ0Mw==", "bodyText": "This was left this way by intention since the sync interval is now a period and not milliseconds nor seconds any more. Instead now the toString of the period will be printed and the log will print \"Next attempt will be in a period of PT2S\" depending on the configured value. I think this is much better.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2076#discussion_r415756443", "createdAt": "2020-04-27T12:07:55Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -178,7 +178,7 @@ Action doInitSolverExecutor() {\n             LOGGER.debug(\"Solution Synchronizer will recover the solution from the jBPM runtime for starting the solver.\");\n             if (!solverExecutor.isStopped()) {\n                 LOGGER.debug(\"Previous solver instance has not yet finished, let's wait for it to stop.\" +\n-                                     \" Next attempt will be in {} milliseconds.\", syncInterval.toMillis());\n+                                     \" Next attempt will be in a period of {}.\", syncInterval);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwNzk5NA=="}, "originalCommit": {"oid": "2078d5df1eba11394f9c889d11a52bcda012591c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NzA0Nw==", "bodyText": "I see. On the other hand, should we rely on users having to understand the ISO_8601 format?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2076#discussion_r415777047", "createdAt": "2020-04-27T12:40:03Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -178,7 +178,7 @@ Action doInitSolverExecutor() {\n             LOGGER.debug(\"Solution Synchronizer will recover the solution from the jBPM runtime for starting the solver.\");\n             if (!solverExecutor.isStopped()) {\n                 LOGGER.debug(\"Previous solver instance has not yet finished, let's wait for it to stop.\" +\n-                                     \" Next attempt will be in {} milliseconds.\", syncInterval.toMillis());\n+                                     \" Next attempt will be in a period of {}.\", syncInterval);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwNzk5NA=="}, "originalCommit": {"oid": "2078d5df1eba11394f9c889d11a52bcda012591c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MDQ2Nw==", "bodyText": "Well, potential users interested on scanning the server log normally are system administrators, developers or integrators, etc., looking for issues. I believe this audience can understand it. Note that it could be the same people that previously has setup/configured the installation, etc., where this value is configured via the task assigning properties exactly with the value that is printed in the log. From my point of view it's ok. In the end, you see in the log what you previously has configured.\nI think it's ok, thanks.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2076#discussion_r415790467", "createdAt": "2020-04-27T12:59:11Z", "author": {"login": "wmedvede"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionSynchronizer.java", "diffHunk": "@@ -178,7 +178,7 @@ Action doInitSolverExecutor() {\n             LOGGER.debug(\"Solution Synchronizer will recover the solution from the jBPM runtime for starting the solver.\");\n             if (!solverExecutor.isStopped()) {\n                 LOGGER.debug(\"Previous solver instance has not yet finished, let's wait for it to stop.\" +\n-                                     \" Next attempt will be in {} milliseconds.\", syncInterval.toMillis());\n+                                     \" Next attempt will be in a period of {}.\", syncInterval);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwNzk5NA=="}, "originalCommit": {"oid": "2078d5df1eba11394f9c889d11a52bcda012591c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2141, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}