{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODYwODUy", "number": 2050, "title": "PLANNER-1773: [Tasks Assignment] Skills and affinities management", "bodyText": "", "createdAt": "2020-03-21T13:48:57Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050", "merged": true, "mergeCommit": {"oid": "df3913b348ecf54f15ca362974144975b26ab70d"}, "closed": true, "closedAt": "2020-03-25T11:39:53Z", "author": {"login": "wmedvede"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcP6KZoAH2gAyMzkxODYwODUyOmMwYWY3ODNlOTVkYWE1MzE5NzRkMDkwM2VmYmRmOWMwMTAyZWFlZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ2CWvgFqTM4MDUyMDQxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c0af783e95daa531974d0903efbdf9c0102eaee3", "committedDate": "2020-03-21T19:20:48Z", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76560170b5dc18896d26ca0b3da8a9d67f391ed2", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/76560170b5dc18896d26ca0b3da8a9d67f391ed2", "committedDate": "2020-03-21T11:54:46Z", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management"}, "afterCommit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c0af783e95daa531974d0903efbdf9c0102eaee3", "committedDate": "2020-03-21T19:20:48Z", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzYxMjE2", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#pullrequestreview-379361216", "createdAt": "2020-03-23T11:57:29Z", "commit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTo1NzozMFrOF6CMhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo0MDoyMVrOF6DknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM5NzcwMQ==", "bodyText": "A typo", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396397701", "createdAt": "2020-03-23T11:57:30Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractLabelValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(Parameterized.class)\n+public abstract class AbstractLabelValueExtractorTest<T, E extends AbstractLabelValueExtractor<T>> {\n+\n+    public static final String CUSTOM_NAME = \"CUSTPM_NAME\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwODgxOA==", "bodyText": "soft suggestion: this first check for nullity is unnecessary as it can be handled by the if-else statement on the next line.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396408818", "createdAt": "2020-03-23T12:19:17Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class AbstractStringListValueAttributeMapValueExtractor<M extends Map<String, ?>, T> extends AbstractAttributeMapValueLabelValueExtractor<M, T> {\n+\n+    public static final String COMMA_SEPARATOR = \",\";\n+\n+    protected final String separator;\n+\n+    protected AbstractStringListValueAttributeMapValueExtractor(String attributeName, String separator, Class<T> type, String labelName, int priority) {\n+        super(attributeName, type, labelName, priority);\n+        this.separator = separator;\n+    }\n+\n+    @Override\n+    protected Set<Object> extractFromAttribute(Object attributeValue) {\n+        final String value = attributeValue != null ? attributeValue.toString() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMjkyMw==", "bodyText": "Consider splitting the class declaration into more lines - it's way beyond the recommended 120 characters.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396412923", "createdAt": "2020-03-23T12:26:50Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractAttributeMapValueLabelValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public abstract class AbstractAttributeMapValueLabelValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>> extends AbstractLabelValueExtractorTest<T, E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzIyNQ==", "bodyText": "Too long line", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396413225", "createdAt": "2020-03-23T12:27:25Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.kie.server.api.model.taskassigning.TaskData;\n+import org.kie.server.services.taskassigning.user.system.api.User;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class AbstractStringListValueAttributeMapValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>> extends AbstractAttributeMapValueLabelValueExtractorTest<M, T, E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDI1Mw==", "bodyText": "I wonder if this code can throw ConcurrentModificationException:\nIn the loop, another thread calls registerExtractors. As a result, some extractors may be removed.\nSafe approach could be e.g. making getLabelValueExtractors return a defensive copy of the original Set.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396420253", "createdAt": "2020-03-23T12:40:21Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/LabelValueExtractorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import org.kie.server.api.model.taskassigning.data.LabelValueExtractor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LabelValueExtractorRegistry {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LabelValueExtractorRegistry.class);\n+\n+    private static final LabelValueExtractorRegistry INSTANCE = new LabelValueExtractorRegistry();\n+\n+    private Map<Class<?>, Set<LabelValueExtractor<?>>> extractorsBySourceType = new HashMap<>();\n+\n+    private LabelValueExtractorRegistry() {\n+        registerExtractors(getClass().getClassLoader());\n+    }\n+\n+    public static LabelValueExtractorRegistry getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    public synchronized void registerExtractors(ClassLoader classLoader) {\n+        final ServiceLoader<LabelValueExtractor> availableExtractors = ServiceLoader.load(LabelValueExtractor.class, classLoader);\n+        for (LabelValueExtractor extractor : availableExtractors) {\n+            final Set<LabelValueExtractor<?>> typeExtractors = extractorsBySourceType.computeIfAbsent(extractor.getType(), key -> new HashSet<>());\n+            final LabelValueExtractor previousExtractor = typeExtractors.stream()\n+                    .filter(previous -> previous.getLabelName().equals(extractor.getLabelName()))\n+                    .findFirst().orElse(null);\n+            if (previousExtractor != null) {\n+                if (previousExtractor.getPriority() < extractor.getPriority()) {\n+                    LOGGER.info(\"LabelValueExtractor with [previousType: {}, previousLabelName:{}, previousPriority: {}], will be replaced with -> [type:{}, labelName:{}, priority: {}]\",\n+                                previousExtractor.getType(), previousExtractor.getLabelName(), previousExtractor.getPriority(),\n+                                extractor.getType(), extractor.getLabelName(), extractor.getPriority());\n+                    typeExtractors.remove(previousExtractor);\n+                    typeExtractors.add(extractor);\n+                }\n+            } else {\n+                typeExtractors.add(extractor);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<Set<LabelValueExtractor<T>>> getLabelValueExtractors(Class<T> sourceType) {\n+        return (Optional<Set<LabelValueExtractor<T>>>) Optional.ofNullable((T) extractorsBySourceType.get(sourceType));\n+    }\n+\n+    public <T> void applyLabelValueExtractors(Class<T> sourceType, T source, BiConsumer<String, Set<Object>> extractedValuesConsumer) {\n+        final Optional<Set<LabelValueExtractor<T>>> extractorsSet = getLabelValueExtractors(sourceType);\n+        extractorsSet.ifPresent(extractors -> extractors.forEach(valueExtractor -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/5cc71dd0d8a14e502785c77926604b23fd41c70d", "committedDate": "2020-03-24T09:03:02Z", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management\n    - Review sugesstions I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTY2ODM3", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#pullrequestreview-380166837", "createdAt": "2020-03-24T10:14:36Z", "commit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNDozN1rOF6pX1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNDozN1rOF6pX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTU3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * declaring to which label the extracted Set must be associated to.\n          \n          \n            \n             * declaring to which label the extracted Set must be associated.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397039572", "createdAt": "2020-03-24T10:14:37Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/taskassigning/data/LabelValueExtractor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.taskassigning.data;\n+\n+import java.util.Set;\n+\n+/**\n+ * Defines the contract for being able to extract a Set of values from an Object instance of T at processing time and\n+ * declaring to which label the extracted Set must be associated to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTY4MDYx", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#pullrequestreview-380168061", "createdAt": "2020-03-24T10:16:20Z", "commit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNjoyMFrOF6pbzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMjoxOFrOF6qBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDU5MA==", "bodyText": "Collections.emptyMap() will do the same thing, and will save a lot of memory in the process.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397040590", "createdAt": "2020-03-24T10:16:20Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java", "diffHunk": "@@ -57,7 +57,7 @@ private ModelConstants() {\n                                                             Collections.unmodifiableMap(new HashMap<>()),\n                                                             false,\n                                                             Collections.unmodifiableSet(new HashSet<>(Collections.singletonList(PLANNING_USER))),\n-                                                            Collections.unmodifiableSet(new HashSet<>()));\n+                                                            Collections.unmodifiableMap(new HashMap<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDg4MQ==", "bodyText": "Dtto. There's more occurences in this file, incl.Collections.emptySet().", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397040881", "createdAt": "2020-03-24T10:16:49Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java", "diffHunk": "@@ -72,7 +72,7 @@ private ModelConstants() {\n                                                                         Collections.unmodifiableMap(new HashMap<>()),\n                                                                         false,\n                                                                         Collections.unmodifiableSet(new HashSet<>(Collections.singletonList(PLANNING_USER))),\n-                                                                        Collections.unmodifiableSet(new HashSet<>()));\n+                                                                        Collections.unmodifiableMap(new HashMap<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MjI1Ng==", "bodyText": "Personally, I would keep only setLabelValues(labelName, values). If you have to keep this method as well, consider at least defensively copying the Map.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397042256", "createdAt": "2020-03-24T10:19:11Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/User.java", "diffHunk": "@@ -53,12 +55,20 @@ public void setGroups(Set<Group> groups) {\n         this.groups = groups;\n     }\n \n-    public Set<TypedLabel> getTypedLabels() {\n-        return typedLabels;\n+    public Map<String, Set<Object>> getLabelValues() {\n+        return labelValues;\n     }\n \n-    public void setTypedLabels(Set<TypedLabel> typedLabels) {\n-        this.typedLabels = typedLabels;\n+    public void setLabelValues(Map<String, Set<Object>> labelValues) {\n+        this.labelValues = labelValues;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MzMzMg==", "bodyText": "Consider renaming to countMatchingLabels, which makes it obvious at first glance, what this method does.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397043332", "createdAt": "2020-03-24T10:21:05Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java", "diffHunk": "@@ -53,6 +53,49 @@ public static boolean isPotentialOwner(Task task, User user) {\n                 .anyMatch(group -> acceptedGroupIds.contains(group.getEntityId()));\n     }\n \n+    /**\n+     * Calculates if a given user has all the label values that are declared for the task in the label with name labelName.\n+     * @param task a task instance for the evaluation.\n+     * @param user a user instance for the evaluation.\n+     * @param labelName name of the label for the calculation.\n+     * @return true if the user.getLabelValues(\"labelName\") set \"contains\" the task.getLabelValues(\"labelName\") set,\n+     * false in any other case.\n+     */\n+    public static boolean hasAllLabels(Task task, User user, String labelName) {\n+        final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n+        if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n+            return true;\n+        }\n+\n+        final Set<Object> userLabelValues = user.getLabelValues(labelName);\n+        return userLabelValues != null && userLabelValues.containsAll(taskLabelValues);\n+    }\n+\n+    /**\n+     * Calculates the number labels in the user label value set that are contained in the task label value set for the\n+     * label labelName.\n+     * @param task a task instance for the calculation.\n+     * @param user a task instance for the calculation.\n+     * @param labelName name of the label for the calculation.\n+     * @return the number of elements in the intersection between the task.getLabelValues(\"labelName\") and the\n+     * user.getLabelValues(\"labelName\") sets.\n+     */\n+    public static int matchingLabels(Task task, User user, String labelName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0Mzk4MA==", "bodyText": "In my opinion, this would read better:\n`.stream().filter(taskLabelValues::contains).count()`", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397043980", "createdAt": "2020-03-24T10:22:11Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java", "diffHunk": "@@ -53,6 +53,49 @@ public static boolean isPotentialOwner(Task task, User user) {\n                 .anyMatch(group -> acceptedGroupIds.contains(group.getEntityId()));\n     }\n \n+    /**\n+     * Calculates if a given user has all the label values that are declared for the task in the label with name labelName.\n+     * @param task a task instance for the evaluation.\n+     * @param user a user instance for the evaluation.\n+     * @param labelName name of the label for the calculation.\n+     * @return true if the user.getLabelValues(\"labelName\") set \"contains\" the task.getLabelValues(\"labelName\") set,\n+     * false in any other case.\n+     */\n+    public static boolean hasAllLabels(Task task, User user, String labelName) {\n+        final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n+        if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n+            return true;\n+        }\n+\n+        final Set<Object> userLabelValues = user.getLabelValues(labelName);\n+        return userLabelValues != null && userLabelValues.containsAll(taskLabelValues);\n+    }\n+\n+    /**\n+     * Calculates the number labels in the user label value set that are contained in the task label value set for the\n+     * label labelName.\n+     * @param task a task instance for the calculation.\n+     * @param user a task instance for the calculation.\n+     * @param labelName name of the label for the calculation.\n+     * @return the number of elements in the intersection between the task.getLabelValues(\"labelName\") and the\n+     * user.getLabelValues(\"labelName\") sets.\n+     */\n+    public static int matchingLabels(Task task, User user, String labelName) {\n+        final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n+        if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n+            return 0;\n+        }\n+        final Set<Object> userLabelValues = user.getLabelValues(labelName);\n+        if (userLabelValues == null) {\n+            return 0;\n+        }\n+        return userLabelValues.stream().mapToInt(labelValue -> taskLabelValues.contains(labelValue) ? 1 : 0).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NDYxNw==", "bodyText": "How did you come up with this particular limit? Is there any rationale?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397044617", "createdAt": "2020-03-24T10:23:16Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/resources/org/kie/server/services/taskassigning/solver/taskAssigningDefaultSolverConfig.xml", "diffHunk": "@@ -11,4 +11,8 @@\n     <scoreDrl>org/kie/server/services/taskassigning/solver/taskAssigningScoreRules.drl</scoreDrl>\n   </scoreDirectorFactory>\n \n+  <termination>\n+    <unimprovedSpentLimit>PT2M</unimprovedSpentLimit>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NjEyNw==", "bodyText": "Collections.emptySet(), unless you intend to modify the collection later.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397046127", "createdAt": "2020-03-24T10:25:44Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class AbstractStringListValueAttributeMapValueExtractor<M extends Map<String, ?>, T>\n+        extends AbstractAttributeMapValueLabelValueExtractor<M, T> {\n+\n+    public static final String COMMA_SEPARATOR = \",\";\n+\n+    protected final String separator;\n+\n+    protected AbstractStringListValueAttributeMapValueExtractor(String attributeName, String separator, Class<T> type, String labelName, int priority) {\n+        super(attributeName, type, labelName, priority);\n+        this.separator = separator;\n+    }\n+\n+    @Override\n+    protected Set<Object> extractFromAttribute(Object attributeValue) {\n+        if (attributeValue == null) {\n+            return new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0ODMzOA==", "bodyText": "Personally, I prefer not marking classes with numbers. Is there a functional difference between Extractor1 and Extractor2, that we could put in the class name?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397048338", "createdAt": "2020-03-24T10:29:15Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractor2.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.kie.server.api.model.taskassigning.TaskData;\n+\n+/**\n+ * Example value extractor for the LabelValueExtractorRegistryTest.\n+ */\n+public class TestTaskDataLabelValueExtractor2 extends AbstractLabelValueExtractor<TaskData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MDE4OA==", "bodyText": "Isn't this a normal property file? If so, you can read it using Properties class from the JDK.\nWhen you have the Properties, you can further parse them yourself - but the Properties class will do the underlying I/O and syntax checking for you.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397050188", "createdAt": "2020-03-24T10:32:18Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-user-system/kie-server-services-task-assigning-user-system-simple/src/main/java/org/kie/server/services/taskassigning/user/system/simple/SimpleUserSystemServiceHelper.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.user.system.simple;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.kie.server.services.taskassigning.user.system.api.Group;\n+import org.kie.server.services.taskassigning.user.system.api.User;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+/**\n+ * Utility class for loading users definition from a file using the Wildfly roles.properties definition file format.\n+ * i.e.\n+ * user1=group1,group2\n+ * user1=group2,group3\n+ * <p>\n+ * and additionally facilitates the reading of user attributes like skills and affinities in a similar format.\n+ * e.g.\n+ * skills.properties:\n+ * user1=skill1,skill2\n+ * user2=skill3\n+ * <p>\n+ * e.g.\n+ * affinities.properties\n+ * user1=affinity1,affinity2\n+ * <p>\n+ * When configured, the users skills will be loaded in the SKILLS_ATTRIBUTE_NAME. Following the example above\n+ * user.getAttributes().get(SKILLS_ATTRIBUTE_NAME) will return the String \"skill1,skill2\");\n+ * <p>\n+ * When configured, the users affinities will be loaded in the AFFINITIES_ATTRIBUTE_NAME. Following the example above\n+ * user1.getAttributes().get(AFFINITIES_ATTRIBUTE_NAME) will return the String \"affinity1,affinity2\");\n+ * and\n+ * user2.getAttributes().get(AFFINITIES_ATTRIBUTE_NAME) will return null.\n+ */\n+public class SimpleUserSystemServiceHelper {\n+\n+    public static final String SKILLS_ATTRIBUTE_NAME = \"skills\";\n+    public static final String AFFINITIES_ATTRIBUTE_NAME = \"affinities\";\n+\n+    private SimpleUserSystemServiceHelper() {\n+    }\n+\n+    /**\n+     * Reads the users definitions from a file using the Wildfly roles.properties definition file format. See class comments.\n+     * Additionally loads the users skills and affinities if present.\n+     * @param users a path to the user + roles file in the WF format.\n+     * @param skills an optional path to the users skills file.\n+     * @param affinities an optional path to the users affinities file.\n+     * @return a UserGroupInfo instance with the Users and Groups loaded.\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static UserGroupInfo buildInfo(Path users, Path skills, Path affinities) throws IOException {\n+        try (InputStream usersIn = Files.newInputStream(users);\n+             InputStream skillsIn = skills != null ? Files.newInputStream(skills) : null;\n+             InputStream affinitiesIn = affinities != null ? Files.newInputStream(affinities) : null) {\n+            return buildInfo(usersIn, skillsIn, affinitiesIn);\n+        }\n+    }\n+\n+    /**\n+     * Reads the users definitions for a file in the Wildfly roles.properties definition file format. See class comments.\n+     * Additionally loads the users skills and affinities if present.\n+     * @param usersIn InputStream with the user + roles file in the WF format.\n+     * @param skillsIn InputStream with the users skills.\n+     * @param affinitiesIn InputStream with the users affinities.\n+     * @return a UserGroupInfo instance with the Users and Groups loaded.\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static UserGroupInfo buildInfo(InputStream usersIn, InputStream skillsIn, InputStream affinitiesIn) throws IOException {\n+\n+        final Map<String, User> usersMap = new HashMap<>();\n+        final Map<String, Group> groupMap = new HashMap<>();\n+        final List<ElementLine> lines = readLines(usersIn);\n+        final List<ElementLine> skillLines = skillsIn != null ? readLines(skillsIn) : Collections.emptyList();\n+        final List<ElementLine> affinityLines = affinitiesIn != null ? readLines(affinitiesIn) : Collections.emptyList();\n+\n+        for (ElementLine line : lines) {\n+            Set<Group> userGroups = new HashSet<>();\n+            User user = new UserImpl(line.elementId, userGroups, new HashMap<>());\n+            line.values.forEach(groupName -> {\n+                Group group = groupMap.computeIfAbsent(groupName, GroupImpl::new);\n+                userGroups.add(group);\n+            });\n+            usersMap.put(user.getId(), user);\n+        }\n+        populateAttribute(usersMap, SKILLS_ATTRIBUTE_NAME, skillLines);\n+        populateAttribute(usersMap, AFFINITIES_ATTRIBUTE_NAME, affinityLines);\n+        return new UserGroupInfo(new ArrayList<>(usersMap.values()), new ArrayList<>(groupMap.values()));\n+    }\n+\n+    public static class UserGroupInfo {\n+\n+        private List<User> users;\n+        private List<Group> groups;\n+\n+        UserGroupInfo(List<User> users, List<Group> groups) {\n+            this.users = users;\n+            this.groups = groups;\n+        }\n+\n+        public List<User> getUsers() {\n+            return users;\n+        }\n+\n+        public List<Group> getGroups() {\n+            return groups;\n+        }\n+    }\n+\n+    private static class ElementLine {\n+\n+        private String elementId;\n+        private List<String> values = new ArrayList<>();\n+\n+        public ElementLine(String elementId) {\n+            this.elementId = elementId;\n+        }\n+\n+        public String getElementId() {\n+            return elementId;\n+        }\n+\n+        public void addValue(String value) {\n+            values.add(value);\n+        }\n+\n+        public List<String> getValues() {\n+            return values;\n+        }\n+    }\n+\n+    private static void populateAttribute(Map<String, User> usersMap, String attributeName, List<ElementLine> attributeLines) {\n+        for (ElementLine attributeLine : attributeLines) {\n+            User user = usersMap.get(attributeLine.getElementId());\n+            if (user != null) {\n+                final String value = String.join(\",\", attributeLine.getValues());\n+                if (value.length() > 1) {\n+                    user.getAttributes().put(attributeName, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static List<ElementLine> readLines(InputStream input) throws IOException {\n+        final List<String> rawLines = IOUtils.readLines(input, StandardCharsets.UTF_8).stream()\n+                .map(String::trim)\n+                .filter(StringUtils::isNotEmpty)\n+                .filter(line -> !line.startsWith(\"#\"))\n+                .collect(Collectors.toList());\n+        final List<ElementLine> lines = new ArrayList<>();\n+        for (String rawLine : rawLines) {\n+            final String[] rawLineSplit = rawLine.split(\"=\");\n+            ElementLine line = readLine(rawLineSplit);\n+            if (line != null) {\n+                lines.add(line);\n+            }\n+        }\n+        return lines;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4fd17cfc4dc50d75c6648be81699453b8c7da933", "committedDate": "2020-03-24T16:40:36Z", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management\n    - Reviewer's suggestions II"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTA2MDE0", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#pullrequestreview-380506014", "createdAt": "2020-03-24T16:50:47Z", "commit": {"oid": "4fd17cfc4dc50d75c6648be81699453b8c7da933"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTIwNDE5", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#pullrequestreview-380520419", "createdAt": "2020-03-24T17:06:19Z", "commit": {"oid": "4fd17cfc4dc50d75c6648be81699453b8c7da933"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}