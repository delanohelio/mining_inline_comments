{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjYyNTQy", "number": 2313, "title": "[JBPM-9457] Springboot tests for Kafka Emitter", "bodyText": "JIRA: JBPM-9457\nAdded springboot integration tests for Kafka emitter.\nreferenced Pull Requests:\n\nkiegroup/jbpm#1803", "createdAt": "2020-11-13T15:52:31Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313", "merged": true, "mergeCommit": {"oid": "ff4242023a4661a5cd554449d1a704d650e267d0"}, "closed": true, "closedAt": "2020-12-05T16:02:25Z", "author": {"login": "gmunozfe"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcKmQUgFqTUzMDI2NDY3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi1o0kgBqjQwNzIxNjI2MDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjY0Njcx", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#pullrequestreview-530264671", "createdAt": "2020-11-13T17:27:57Z", "commit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMzIwNzcy", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#pullrequestreview-532320772", "createdAt": "2020-11-17T12:40:42Z", "commit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0MDo0MlrOH0y_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyMDoxN1rOH1kPLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMzUzNw==", "bodyText": "Maybe we don't need all server capabilities to test kafka integration. We could also mention something related to kafka tests though, it's not really needed, just a suggestion.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525123537", "createdAt": "2020-11-17T12:40:42Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/README.md", "diffHunk": "@@ -0,0 +1,35 @@\n+KIE Server with all capabilities", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNjM0NQ==", "bodyText": "Maybe some references to kafka? just a small suggestion", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525126345", "createdAt": "2020-11-17T12:45:35Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/resources/swagger.properties", "diffHunk": "@@ -0,0 +1,4 @@\n+title = Spring Boot KIE Server Application\n+description = This sample project demonstrates how to use KIE Server services in SpringBoot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0MDY2MQ==", "bodyText": "small typo (missing a n)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Map<String, OrganizationalEntity> roleAssigments() {\n          \n          \n            \n                protected Map<String, OrganizationalEntity> roleAssignments() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525140661", "createdAt": "2020-11-17T13:10:10Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.counting;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.StreamSupport.stream;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.ByteArrayDeserializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.event.emitters.kafka.KafkaEventEmitter;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.springboot.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final int LARGE_SIZE = 50000;\n+    protected static final int TOO_LARGE_SIZE = 500000;\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0\";\n+    \n+    protected static final String PROCESSES_TOPIC = \"jbpm-processes-events\";\n+    protected static final String TASKS_TOPIC = \"jbpm-tasks-events\";\n+    protected static final String CASES_TOPIC = \"jbpm-cases-events\";\n+    protected static final String CUSTOM_PROCESSES_TOPIC = \"custom-processes\";\n+    \n+    protected static final String PROCESS_TYPE = \"process\";\n+    protected static final String CASE_TYPE = \"case\";\n+\n+    protected static final String EVALUATION_PROCESS_ID = \"evaluation\";\n+    protected static final String EVALUATION_DESC = \"Evaluation\";\n+    \n+    protected static final String JOHN = \"john\";\n+    protected static final String YODA = \"yoda\";\n+    \n+    protected static final String CONTACT = \"contact\";\n+    protected static final String OWNER = \"owner\";\n+\n+    protected static final String VAR_KEY = \"s\";\n+    protected static final String VAR_VALUE= \"first case started\";\n+    protected static final String CHINESE_INITIATOR = \"\u53d1\u8d77\u8005\";\n+    protected static final String LARGE_VAR = \"large_var\";\n+    protected static final String NULL_VAR = \"null_var\";\n+    protected static final String INITIATOR = \"initiator\";\n+    protected static final String CASE_VARIABLES = \"caseVariables\";\n+    protected static final String VARIABLES = \"variables\";\n+    protected static final String USER_TASK_CASE = \"UserTaskCase\";\n+    \n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup(boolean configure) {\n+        EntityManagerFactoryManager.get().clear();\n+        \n+        if (!configure) {\n+            return;\n+        }\n+        \n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\", bootstrapServers);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\", \"test_jbpm\");\n+        \n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        Properties props = new Properties();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(PROCESSES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(TASKS_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CASES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CUSTOM_PROCESSES_TOPIC, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH+artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected Map<String, Object> initParameters() {\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(INITIATOR, CHINESE_INITIATOR);\n+        parameters.put(NULL_VAR, null);\n+        return parameters;\n+    }\n+    \n+    protected ListAppender<ILoggingEvent> addLogAppender() {\n+        Logger logger = (Logger) LoggerFactory.getLogger(KafkaEventEmitter.class);\n+        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();\n+        listAppender.start();\n+        logger.addAppender(listAppender);\n+        return listAppender;\n+    }\n+    \n+    protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {\n+        Optional<ILoggingEvent> logEvent = listAppender.list.stream().filter(log -> log.getLevel() == Level.ERROR)\n+                .findAny();\n+        assertTrue(\"no trace printed when failed\", logEvent.isPresent());\n+        return logEvent;\n+    }\n+    \n+    protected CaseFile caseFile(int valueSize) {\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(VAR_KEY, VAR_VALUE);\n+        data.put(LARGE_VAR, RandomStringUtils.random(valueSize));\n+        return CaseFile.builder().data(data).build();\n+    }\n+    \n+    protected Map<String, OrganizationalEntity> roleAssigments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MDU5Nw==", "bodyText": "You can also use below (tho not mandatory, just a suggestion)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(!variables.isEmpty());\n          \n          \n            \n                    assertFalse(variables.isEmpty());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525240597", "createdAt": "2020-11-17T15:22:40Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.counting;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.StreamSupport.stream;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.ByteArrayDeserializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.event.emitters.kafka.KafkaEventEmitter;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.springboot.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final int LARGE_SIZE = 50000;\n+    protected static final int TOO_LARGE_SIZE = 500000;\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0\";\n+    \n+    protected static final String PROCESSES_TOPIC = \"jbpm-processes-events\";\n+    protected static final String TASKS_TOPIC = \"jbpm-tasks-events\";\n+    protected static final String CASES_TOPIC = \"jbpm-cases-events\";\n+    protected static final String CUSTOM_PROCESSES_TOPIC = \"custom-processes\";\n+    \n+    protected static final String PROCESS_TYPE = \"process\";\n+    protected static final String CASE_TYPE = \"case\";\n+\n+    protected static final String EVALUATION_PROCESS_ID = \"evaluation\";\n+    protected static final String EVALUATION_DESC = \"Evaluation\";\n+    \n+    protected static final String JOHN = \"john\";\n+    protected static final String YODA = \"yoda\";\n+    \n+    protected static final String CONTACT = \"contact\";\n+    protected static final String OWNER = \"owner\";\n+\n+    protected static final String VAR_KEY = \"s\";\n+    protected static final String VAR_VALUE= \"first case started\";\n+    protected static final String CHINESE_INITIATOR = \"\u53d1\u8d77\u8005\";\n+    protected static final String LARGE_VAR = \"large_var\";\n+    protected static final String NULL_VAR = \"null_var\";\n+    protected static final String INITIATOR = \"initiator\";\n+    protected static final String CASE_VARIABLES = \"caseVariables\";\n+    protected static final String VARIABLES = \"variables\";\n+    protected static final String USER_TASK_CASE = \"UserTaskCase\";\n+    \n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup(boolean configure) {\n+        EntityManagerFactoryManager.get().clear();\n+        \n+        if (!configure) {\n+            return;\n+        }\n+        \n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\", bootstrapServers);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\", \"test_jbpm\");\n+        \n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        Properties props = new Properties();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(PROCESSES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(TASKS_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CASES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CUSTOM_PROCESSES_TOPIC, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH+artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected Map<String, Object> initParameters() {\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(INITIATOR, CHINESE_INITIATOR);\n+        parameters.put(NULL_VAR, null);\n+        return parameters;\n+    }\n+    \n+    protected ListAppender<ILoggingEvent> addLogAppender() {\n+        Logger logger = (Logger) LoggerFactory.getLogger(KafkaEventEmitter.class);\n+        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();\n+        listAppender.start();\n+        logger.addAppender(listAppender);\n+        return listAppender;\n+    }\n+    \n+    protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {\n+        Optional<ILoggingEvent> logEvent = listAppender.list.stream().filter(log -> log.getLevel() == Level.ERROR)\n+                .findAny();\n+        assertTrue(\"no trace printed when failed\", logEvent.isPresent());\n+        return logEvent;\n+    }\n+    \n+    protected CaseFile caseFile(int valueSize) {\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(VAR_KEY, VAR_VALUE);\n+        data.put(LARGE_VAR, RandomStringUtils.random(valueSize));\n+        return CaseFile.builder().data(data).build();\n+    }\n+    \n+    protected Map<String, OrganizationalEntity> roleAssigments() {\n+        Map<String, OrganizationalEntity> roleAssignments = new HashMap<>();\n+        roleAssignments.put(OWNER, new UserImpl(YODA));\n+        roleAssignments.put(CONTACT, new UserImpl(JOHN));\n+        return roleAssignments;\n+    }\n+    \n+    protected void consumeAndAssertRecords(String topic, String type, int state, int expectedProcesses) {\n+        ConsumerRecords<String, byte[]>  records = consumeMessages(topic);\n+        assertEquals(expectedProcesses, records.count());\n+        if (records.iterator().hasNext()) {\n+            assertRecord(records.iterator().next(), topic, type, state);\n+        }\n+    }\n+\n+    protected <T> ConsumerRecords<String, T> consumeMessages(String topic) {\n+        try (KafkaConsumer<String, T> consumer = createConsumer(topic)) {\n+            ConsumerRecords<String, T> records = consumer.poll(Duration.ofSeconds(10));\n+            consumer.commitSync();\n+            return records;\n+        }\n+    }\n+\n+    protected <T> KafkaConsumer<String, T> createConsumer(String topic) {\n+        KafkaConsumer<String, T> consumer = new KafkaConsumer<>(consumerProperties());\n+        consumer.subscribe(singletonList(topic));\n+        return consumer;\n+    }\n+\n+    protected Properties consumerProperties() {\n+        Properties props = new Properties();\n+        props.setProperty(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        props.setProperty(GROUP_ID_CONFIG, \"jbpm_group\");\n+        props.setProperty(KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        props.setProperty(VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());\n+        props.setProperty(AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        return props;\n+    }\n+\n+    protected void assertRecord(ConsumerRecord<String, byte[]> record, String topic, String type, int status) {\n+        String artifactId = (PROCESS_TYPE.equals(type))? EVALUATION_PROCESS_ID: USER_TASK_CASE;\n+        Map<String, Object> event = getJsonObject(record);\n+        \n+        assertNull(record.key());\n+        assertEquals(topic, record.topic());\n+        \n+        assertEquals(type, event.get(\"type\"));\n+        assertTrue(event.get(\"source\").toString().contains(\"/process/\"+artifactId));\n+        assertTrue(event.get(\"data\") instanceof Map);\n+        Map<String, Object> data = (Map<String, Object>) event.get(\"data\");\n+        assertTrue(data.get(\"compositeId\").toString().contains(\"SpringBoot_\"));\n+        assertEquals(\"org.kie.server.testing:\"+artifactId+\":1.0.0\", data.get(\"containerId\"));\n+        assertNotNull(data.get(\"id\"));\n+        assertEquals(-1, data.get(\"parentId\"));\n+        assertTrue(data.get(VARIABLES) instanceof Map);\n+        Map<String,Object> variables = (Map<String,Object>) data.get(VARIABLES);\n+        assertTrue(!variables.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2MjU3OA==", "bodyText": "just for naming convention, shouldn't we use lower case for both maven artifacts and package folder?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525262578", "createdAt": "2020-11-17T15:41:27Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/resources/kjars/UserTaskCase/pom.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.server.testing</groupId>\n+    <artifactId>common-parent</artifactId>\n+    <version>1.0.0.Final</version>\n+  </parent>\n+\n+  <artifactId>UserTaskCase</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjgwOA==", "bodyText": "Not throwing any checked exception\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n          \n          \n            \n                public void testKafkaEmitterProcessStartAndAbort() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525276808", "createdAt": "2020-11-17T15:58:39Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3NTAwMw==", "bodyText": "redundant since null-check of primitive types long is never null. Maybe changing it to use wrapper class Long\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n          \n          \n            \n                    assertNotNull(processInstanceId);\n          \n          \n            \n                    Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n          \n          \n            \n                    assertNotNull(processInstanceId);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525875003", "createdAt": "2020-11-18T07:51:33Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTM4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));\n          \n          \n            \n                    tasks.forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525881383", "createdAt": "2020-11-18T08:04:10Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        \n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), JOHN, new HashMap<>());\n+        \n+        tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(2, tasks.size());\n+        \n+        tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n          \n          \n            \n                public void testKafkaEmitterProcessStartAndWorkOnUserTasks() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525881856", "createdAt": "2020-11-18T08:05:03Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjAxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testKafkaEmitterCaseStartAndAbort() throws Exception {\n          \n          \n            \n                public void testKafkaEmitterCaseStartAndAbort() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525882010", "createdAt": "2020-11-18T08:05:20Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        \n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), JOHN, new HashMap<>());\n+        \n+        tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(2, tasks.size());\n+        \n+        tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+        \n+        ConsumerRecords<String, byte[]>  records = consumeMessages(TASKS_TOPIC);\n+        assertEquals(11, records.count());\n+        Map<String, Long> taskRecordsByStatus = groupRecordsByField(records, \"status\");\n+        \n+        assertEquals(2, taskRecordsByStatus.get(Ready.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Reserved.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(InProgress.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Completed.name()).intValue());\n+        \n+        records = consumeMessages(PROCESSES_TOPIC);\n+        assertEquals(4, records.count());\n+        Map<String, Long> processRecordsByStatus =  groupRecordsByField(records, \"state\");\n+        \n+        assertEquals(3, processRecordsByStatus.get(\"1\").intValue()); //Active\n+        assertEquals(1, processRecordsByStatus.get(\"2\").intValue()); //Completed\n+        \n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterCaseStartAndAbort() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmitterRecordTooLargeException() throws Exception {\n          \n          \n            \n                public void testEmitterRecordTooLargeException() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525882127", "createdAt": "2020-11-18T08:05:33Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        \n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), JOHN, new HashMap<>());\n+        \n+        tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(2, tasks.size());\n+        \n+        tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+        \n+        ConsumerRecords<String, byte[]>  records = consumeMessages(TASKS_TOPIC);\n+        assertEquals(11, records.count());\n+        Map<String, Long> taskRecordsByStatus = groupRecordsByField(records, \"status\");\n+        \n+        assertEquals(2, taskRecordsByStatus.get(Ready.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Reserved.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(InProgress.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Completed.name()).intValue());\n+        \n+        records = consumeMessages(PROCESSES_TOPIC);\n+        assertEquals(4, records.count());\n+        Map<String, Long> processRecordsByStatus =  groupRecordsByField(records, \"state\");\n+        \n+        assertEquals(3, processRecordsByStatus.get(\"1\").intValue()); //Active\n+        assertEquals(1, processRecordsByStatus.get(\"2\").intValue()); //Completed\n+        \n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterCaseStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, USER_TASK_CASE);\n+        \n+        CaseFileInstance caseFileInstance = caseService.newCaseFileInstance(deploymentId, \n+                                                                            USER_TASK_CASE, \n+                                                                            caseFile(LARGE_SIZE).getData(),\n+                                                                            roleAssigments());\n+        \n+        String caseId = caseService.startCase(deploymentId, USER_TASK_CASE, caseFileInstance);\n+        assertNotNull(caseId);\n+        \n+        consumeAndAssertRecords(CASES_TOPIC, CASE_TYPE, STATE_ACTIVE, 1);\n+        caseService.cancelCase(caseId);\n+        \n+        consumeAndAssertRecords(CASES_TOPIC, CASE_TYPE, STATE_ABORTED, 1);\n+        \n+        ConsumerRecords<String, byte[]>  records = consumeMessages(TASKS_TOPIC);\n+        assertEquals(2, records.count());\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testEmitterRecordTooLargeException() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMjM5OQ==", "bodyText": "do we really want to keep them as public?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525902399", "createdAt": "2020-11-18T08:36:57Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaEmitterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.BEFORE_CLASS)\n+public class ProxyAwareKafkaEmitterTest extends KafkaFixture{\n+\n+    protected static final int TOXY_PROXY_PORT = Integer.parseInt(System.getProperty(\"toxiproxy.port\"));\n+\n+    public static Network network = Network.newNetwork();\n+    \n+    public static ProxyAwareKafkaContainer kafka = (ProxyAwareKafkaContainer) new ProxyAwareKafkaContainer()\n+                                                     .withExposedPorts(TOXY_PROXY_PORT)\n+                                                     .withNetwork(network);\n+\n+    public static ToxiproxyContainer toxiproxy  = new ToxiproxyContainer().withNetwork(network);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNTc1Mw==", "bodyText": "I think it should be marked with the override annotation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getBootstrapServers() {\n          \n          \n            \n                @Override\n          \n          \n            \n                public String getBootstrapServers() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525905753", "createdAt": "2020-11-18T08:42:30Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaContainer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import org.testcontainers.containers.KafkaContainer;\n+\n+public class ProxyAwareKafkaContainer extends KafkaContainer {\n+\n+    private String host;\n+    \n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+    \n+    public String getBootstrapServers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxOTkwMg==", "bodyText": "not used in the test\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected CaseService caseService;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525919902", "createdAt": "2020-11-18T09:04:32Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.kafka.common.errors.TimeoutException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyMDY4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmitterNoKafkaBrokerTimeoutException() throws Exception {\n          \n          \n            \n                public void testEmitterNoKafkaBrokerTimeoutException() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525920686", "createdAt": "2020-11-18T09:05:39Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.kafka.common.errors.TimeoutException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        generalSetup(false);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\", \"500\");\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\");\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testEmitterNoKafkaBrokerTimeoutException() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzMDI4NQ==", "bodyText": "wouldn't it be worth checking that KafkaEmitter is able to send messages to the topic once the timeout is removed (or increased)? - wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525930285", "createdAt": "2020-11-18T09:20:17Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.kafka.common.errors.TimeoutException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        generalSetup(false);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\", \"500\");\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\");\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testEmitterNoKafkaBrokerTimeoutException() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        ListAppender<ILoggingEvent> listAppender = addLogAppender();\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, singletonMap(\"initiator\", YODA));\n+\n+        Optional<ILoggingEvent> logEvent = getLog(listAppender);\n+        assertEquals(TimeoutException.class.getCanonicalName(), logEvent.get().getThrowableProxy().getClassName());\n+        \n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Mjg0Mzk3", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#pullrequestreview-538284397", "createdAt": "2020-11-25T09:07:10Z", "commit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "committedDate": "2020-11-13T15:48:04Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}, "afterCommit": {"oid": "3701c69738742a0f373d0842fed28c4b9b686001", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3701c69738742a0f373d0842fed28c4b9b686001", "committedDate": "2020-11-25T09:29:23Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3701c69738742a0f373d0842fed28c4b9b686001", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3701c69738742a0f373d0842fed28c4b9b686001", "committedDate": "2020-11-25T09:29:23Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}, "afterCommit": {"oid": "15fb87525ee6df2dd4197d3898a00655798a5548", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/15fb87525ee6df2dd4197d3898a00655798a5548", "committedDate": "2020-12-02T09:02:16Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15fb87525ee6df2dd4197d3898a00655798a5548", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/15fb87525ee6df2dd4197d3898a00655798a5548", "committedDate": "2020-12-02T09:02:16Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}, "afterCommit": {"oid": "670d74a380e5d606da25b370169f98649c2339ff", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/670d74a380e5d606da25b370169f98649c2339ff", "committedDate": "2020-12-03T09:21:53Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg1MjEy", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#pullrequestreview-544685212", "createdAt": "2020-12-04T06:24:18Z", "commit": {"oid": "670d74a380e5d606da25b370169f98649c2339ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyNDoxOFrOH_ClxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyNDoxOFrOH_ClxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NDc3Mw==", "bodyText": "is this good to show not recommended CSRF disabling? see sonar complaining about it", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r535864773", "createdAt": "2020-12-04T06:24:18Z", "author": {"login": "mareknovotny"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/java/org/kie/server/springboot/samples/kafka/WebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples.kafka;\n+\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.factory.PasswordEncoderFactories;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+\n+@Configuration(\"kieServerSecurity\")\n+@EnableWebSecurity\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        http\n+        .csrf().disable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670d74a380e5d606da25b370169f98649c2339ff"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "670d74a380e5d606da25b370169f98649c2339ff", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/670d74a380e5d606da25b370169f98649c2339ff", "committedDate": "2020-12-03T09:21:53Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}, "afterCommit": {"oid": "fec7406fa15ce2f325805d98819e9983108a15aa", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/fec7406fa15ce2f325805d98819e9983108a15aa", "committedDate": "2020-12-04T07:22:59Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0c13b99246dea02d0c2e6d544bd74581384dc1", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/bd0c13b99246dea02d0c2e6d544bd74581384dc1", "committedDate": "2020-12-04T10:59:55Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fec7406fa15ce2f325805d98819e9983108a15aa", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/fec7406fa15ce2f325805d98819e9983108a15aa", "committedDate": "2020-12-04T07:22:59Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}, "afterCommit": {"oid": "bd0c13b99246dea02d0c2e6d544bd74581384dc1", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/bd0c13b99246dea02d0c2e6d544bd74581384dc1", "committedDate": "2020-12-04T10:59:55Z", "message": "[JBPM-9457] Springboot tests for Kafka Emitter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1247, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}