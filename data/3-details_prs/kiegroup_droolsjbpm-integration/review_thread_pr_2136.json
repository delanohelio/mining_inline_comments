{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTU0MTcy", "number": 2136, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0MzoyOVrOEH5PPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1MTowMlrOEH5aKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEzMjc2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseSLAComplianceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0MzoyOVrOGnhmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTowNjoxMVrOGoJiYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5ODA1OA==", "bodyText": "what about correlation key ?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2136#discussion_r444098058", "createdAt": "2020-06-23T09:43:29Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseSLAComplianceIntegrationTest.java", "diffHunk": "@@ -89,6 +90,7 @@ public void testStartCaseWithSLAEscalation() throws Exception{\n         TaskSummary johnTask = johnTasks.get(0);\n         assertThat(johnTasks).hasSize(1);\n         assertThat(johnTask.getName()).isEqualTo(\"Hello1\");\n+        assertThat(johnTask.getProcessType()).isEqualTo(WorkflowProcess.CASE_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08e540ea3bc27614662cee35a363f3273d80747"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MjQ4MA==", "bodyText": "Now is testing that is not null not empty (so the conversion from TaskSummary model to TaskSummary service, that is what we are testing here, is properly perfomed)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2136#discussion_r444752480", "createdAt": "2020-06-24T09:06:11Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseSLAComplianceIntegrationTest.java", "diffHunk": "@@ -89,6 +90,7 @@ public void testStartCaseWithSLAEscalation() throws Exception{\n         TaskSummary johnTask = johnTasks.get(0);\n         assertThat(johnTasks).hasSize(1);\n         assertThat(johnTask.getName()).isEqualTo(\"Hello1\");\n+        assertThat(johnTask.getProcessType()).isEqualTo(WorkflowProcess.CASE_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5ODA1OA=="}, "originalCommit": {"oid": "b08e540ea3bc27614662cee35a363f3273d80747"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzE2MDczOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1MTowMlrOGnh3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo0NDozNFrOGnnbzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMjQ5MQ==", "bodyText": "promote to api.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2136#discussion_r444102491", "createdAt": "2020-06-23T09:51:02Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -513,9 +516,15 @@ public static TaskSummaryList convertToTaskSummaryList(Collection<TaskSummary> t\n                 .processInstanceId(taskSummary.getProcessInstanceId())\n                 .status(taskSummary.getStatusId())\n                 .skipable(taskSummary.isSkipable())\n-                .subject(taskSummary.getSubject())\n-                .build();\n-        return task;\n+                .subject(taskSummary.getSubject());\n+         // alternative to that instanceof is to use default interface methods in task summary, but this requires java8 >\n+         // in all implementors\n+         if (taskSummary instanceof TaskSummaryImpl)   \n+         {\n+             builder.correlationKey(((TaskSummaryImpl)taskSummary).getCorrelationKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08e540ea3bc27614662cee35a363f3273d80747"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5MDcyNw==", "bodyText": "if we promote to API, we are breaking backward compatibility, I do not think that will be wise, taking into account the API is defined in a separate repository, which potentially have different implementations in other repositories different than JBPM", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2136#discussion_r444190727", "createdAt": "2020-06-23T12:39:43Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -513,9 +516,15 @@ public static TaskSummaryList convertToTaskSummaryList(Collection<TaskSummary> t\n                 .processInstanceId(taskSummary.getProcessInstanceId())\n                 .status(taskSummary.getStatusId())\n                 .skipable(taskSummary.isSkipable())\n-                .subject(taskSummary.getSubject())\n-                .build();\n-        return task;\n+                .subject(taskSummary.getSubject());\n+         // alternative to that instanceof is to use default interface methods in task summary, but this requires java8 >\n+         // in all implementors\n+         if (taskSummary instanceof TaskSummaryImpl)   \n+         {\n+             builder.correlationKey(((TaskSummaryImpl)taskSummary).getCorrelationKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMjQ5MQ=="}, "originalCommit": {"oid": "b08e540ea3bc27614662cee35a363f3273d80747"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5Mzc0Mg==", "bodyText": "There is no other implementation rather than JBPM one, so the interface can be changed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2136#discussion_r444193742", "createdAt": "2020-06-23T12:44:34Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -513,9 +516,15 @@ public static TaskSummaryList convertToTaskSummaryList(Collection<TaskSummary> t\n                 .processInstanceId(taskSummary.getProcessInstanceId())\n                 .status(taskSummary.getStatusId())\n                 .skipable(taskSummary.isSkipable())\n-                .subject(taskSummary.getSubject())\n-                .build();\n-        return task;\n+                .subject(taskSummary.getSubject());\n+         // alternative to that instanceof is to use default interface methods in task summary, but this requires java8 >\n+         // in all implementors\n+         if (taskSummary instanceof TaskSummaryImpl)   \n+         {\n+             builder.correlationKey(((TaskSummaryImpl)taskSummary).getCorrelationKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMjQ5MQ=="}, "originalCommit": {"oid": "b08e540ea3bc27614662cee35a363f3273d80747"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2013, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}