{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjk5ODA2", "number": 2060, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo0Njo1NVrODv9Kbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMzo1OVrODwBXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjExNzU5OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo0Njo1NVrOGCreVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo0Njo1NVrOGCreVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2MjYxNQ==", "bodyText": "I think we should reuse an existing instance (constructor parameter?)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405462615", "createdAt": "2020-04-08T11:46:55Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "diffHunk": "@@ -93,13 +95,28 @@ public DefaultKafkaConsumer(EnvConfig config, Producer producer) {\n         }\n         this.producer = producer;\n         this.consumerUtilsCore = new ConsumerUtilsCoreImpl();\n+        this.snapshotOnDemandUtils = new SnapshotOnDemandUtilsImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE0NzY3OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1NToyN1rOGCrwlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1NToyN1rOGCrwlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2NzI4Ng==", "bodyText": "Reformat code", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405467286", "createdAt": "2020-04-08T11:55:27Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "diffHunk": "@@ -130,28 +147,43 @@ public void stop() {\n     }\n \n     @Override\n-    public void updateStatus(State state) {\n+    public InfraCallbackStatus updateStatus(State state) {\n+        State previousState = currentState;\n         boolean changedState = !state.equals(currentState);\n+        boolean completedSnapshotOnDemand = false;\n+        boolean updateOnRunningConsumer = false;\n+        boolean enableConsumerAndStartLoop = false;\n         if (currentState == null || changedState) {\n             currentState = state;\n         }\n         if (started && changedState && !currentState.equals(State.BECOMING_LEADER)) {\n+            updateOnRunningConsumer = true;\n             updateOnRunningConsumer(state);\n-        } else if (!started && state.equals(State.REPLICA) && !envConfig.isSkipOnDemandSnapshot() && !askedSnapshotOnDemand) {\n-            boolean completed = askAndProcessSnapshotOnDemand(SnapshotOnDemandUtilsImpl.askASnapshotOnDemand(envConfig, snapShooter, producer));\n-            if (logger.isInfoEnabled()) {\n-                logger.info(\"askAndProcessSnapshotOnDemand completed:{}\", completed);\n+        } else if(!started) {\n+            if (state.equals(State.REPLICA) && !envConfig.isSkipOnDemandSnapshot() && !askedSnapshotOnDemand) {\n+                    //ask and wait a snapshot before start\n+                    if (logger.isInfoEnabled()) {\n+                        logger.info(\"askAndProcessSnapshotOnDemand:\");\n+                    }\n+                completedSnapshotOnDemand = askAndProcessSnapshotOnDemand(snapshotOnDemandUtils.askASnapshotOnDemand(envConfig, snapShooter, producer));\n+                    if (logger.isInfoEnabled()) {\n+                        logger.info(\"askAndProcessSnapshotOnDemand completed:{}\", completedSnapshotOnDemand);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE1NDMwOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1NzoyM1rOGCr0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1NzoyM1rOGCr0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2ODI5NA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405468294", "createdAt": "2020-04-08T11:57:23Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "diffHunk": "@@ -286,7 +318,9 @@ protected void enableConsumeAndStartLoop(State state) {\n             DroolsExecutor.setAsLeader();\n         } else if (state.equals(State.REPLICA)) {\n             currentState = State.REPLICA;\n-            kafkaSecondaryConsumer = new KafkaConsumer<>(Config.getConsumerConfig(SECONDARY_CONSUMER));\n+            if(kafkaSecondaryConsumer == null) {\n+                kafkaSecondaryConsumer = new KafkaConsumer<>(Config.getConsumerConfig(SECONDARY_CONSUMER));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE1NzU1OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/SnapshotOnDemandUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1ODoxOFrOGCr2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo1ODoxOFrOGCr2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ2ODc5OA==", "bodyText": "You can create a field for this variable (and instantiate it a @Before method`)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405468798", "createdAt": "2020-04-08T11:58:18Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/SnapshotOnDemandUtilsTest.java", "diffHunk": "@@ -28,21 +29,23 @@\n \n     @Test(expected = org.apache.kafka.common.KafkaException.class)\n     public void askAKafkaConsumerWithoutServerUpTest(){\n+        SnapshotOnDemandUtils snapshotOnDemandUtils = new SnapshotOnDemandUtilsImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE5MDYzOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core/src/main/java/org/kie/hacep/core/infra/consumer/InfraCallbackStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowNzo0OFrOGCsLDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowNzo0OFrOGCsLDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDA2Mg==", "bodyText": "To be removed as agreed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405474062", "createdAt": "2020-04-08T12:07:48Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core/src/main/java/org/kie/hacep/core/infra/consumer/InfraCallbackStatus.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE5MTYwOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowODowOVrOGCsLrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowODowOVrOGCsLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDIyMA==", "bodyText": "Use spy(...)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405474220", "createdAt": "2020-04-08T12:08:09Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.hacep.core.infra.consumer;\n+\n+import java.time.LocalDateTime;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.hacep.EnvConfig;\n+import org.kie.hacep.consumer.DroolsConsumerHandler;\n+import org.kie.hacep.core.infra.DefaultSessionSnapShooter;\n+import org.kie.hacep.core.infra.SnapshotInfos;\n+import org.kie.hacep.core.infra.election.State;\n+import org.kie.hacep.core.infra.utils.SnapshotOnDemandUtils;\n+import org.kie.hacep.util.ConsumerUtilsCore;\n+import org.kie.remote.impl.producer.Producer;\n+import org.kie.remote.message.ControlMessage;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultKafkaConsumerTest {\n+\n+  @Mock\n+  protected Producer producer;\n+  @Mock\n+  protected DroolsConsumerHandler handler;\n+  @Mock\n+  protected KafkaConsumer primaryConsumer;\n+  @Mock\n+  protected KafkaConsumer secondaryConsumer;\n+  @Mock\n+  protected ConsumerUtilsCore consumerUtilsCore;\n+  @Mock\n+  protected DefaultSessionSnapShooter defaultSessionSnapShooter;\n+  @Mock\n+  protected SnapshotOnDemandUtils snapshotOnDemandUtils;\n+\n+  private DefaultKafkaConsumer consumer;\n+\n+  @Before\n+  public void initTest() {\n+    EnvConfig envConfig = EnvConfig.getDefaultEnvConfig();\n+    ControlMessage lastControlMessage = new ControlMessage();\n+    lastControlMessage.setId(\"1\");\n+    lastControlMessage.setOffset(1l);\n+    when(consumerUtilsCore.getLastEvent(envConfig.getControlTopicName(), envConfig.getPollTimeout())).thenReturn(lastControlMessage);\n+    when(defaultSessionSnapShooter.getLastSnapshotTime()).thenReturn(LocalDateTime.now());\n+    when(handler.initializeKieSessionFromSnapshotOnDemand(any(EnvConfig.class), any(SnapshotInfos.class))).thenReturn(Boolean.TRUE);\n+    consumer = new DefaultKafkaConsumer(EnvConfig.getDefaultEnvConfig(), producer, primaryConsumer, secondaryConsumer, consumerUtilsCore, defaultSessionSnapShooter, snapshotOnDemandUtils, handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjIwOTU0OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxMzowMVrOGCsWmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxMzowMVrOGCsWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NzAxOQ==", "bodyText": "Change to\nverify(consumer, never()).enableConsumeAndStartLoop(any());\nor\nverify(consumer, times(1)).enableConsumeAndStartLoop(eq(State.BECOMING_LEADER));\nbased on the logic you want to test", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405477019", "createdAt": "2020-04-08T12:13:01Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.hacep.core.infra.consumer;\n+\n+import java.time.LocalDateTime;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.hacep.EnvConfig;\n+import org.kie.hacep.consumer.DroolsConsumerHandler;\n+import org.kie.hacep.core.infra.DefaultSessionSnapShooter;\n+import org.kie.hacep.core.infra.SnapshotInfos;\n+import org.kie.hacep.core.infra.election.State;\n+import org.kie.hacep.core.infra.utils.SnapshotOnDemandUtils;\n+import org.kie.hacep.util.ConsumerUtilsCore;\n+import org.kie.remote.impl.producer.Producer;\n+import org.kie.remote.message.ControlMessage;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultKafkaConsumerTest {\n+\n+  @Mock\n+  protected Producer producer;\n+  @Mock\n+  protected DroolsConsumerHandler handler;\n+  @Mock\n+  protected KafkaConsumer primaryConsumer;\n+  @Mock\n+  protected KafkaConsumer secondaryConsumer;\n+  @Mock\n+  protected ConsumerUtilsCore consumerUtilsCore;\n+  @Mock\n+  protected DefaultSessionSnapShooter defaultSessionSnapShooter;\n+  @Mock\n+  protected SnapshotOnDemandUtils snapshotOnDemandUtils;\n+\n+  private DefaultKafkaConsumer consumer;\n+\n+  @Before\n+  public void initTest() {\n+    EnvConfig envConfig = EnvConfig.getDefaultEnvConfig();\n+    ControlMessage lastControlMessage = new ControlMessage();\n+    lastControlMessage.setId(\"1\");\n+    lastControlMessage.setOffset(1l);\n+    when(consumerUtilsCore.getLastEvent(envConfig.getControlTopicName(), envConfig.getPollTimeout())).thenReturn(lastControlMessage);\n+    when(defaultSessionSnapShooter.getLastSnapshotTime()).thenReturn(LocalDateTime.now());\n+    when(handler.initializeKieSessionFromSnapshotOnDemand(any(EnvConfig.class), any(SnapshotInfos.class))).thenReturn(Boolean.TRUE);\n+    consumer = new DefaultKafkaConsumer(EnvConfig.getDefaultEnvConfig(), producer, primaryConsumer, secondaryConsumer, consumerUtilsCore, defaultSessionSnapShooter, snapshotOnDemandUtils, handler);\n+  }\n+\n+  @Test\n+  public void UpdateStatusBecomingLeaderAtStartupTest(){\n+    InfraCallbackStatus status = consumer.updateStatus(State.BECOMING_LEADER);\n+    assertFalse(status.isEnableConsumerAndStartLoop());// nothing happens\n+    assertFalse(status.isUpdateOnRunningConsumer());// isn't on running consumer\n+    assertFalse(status.isAskAndProcessSnapshotOnDemandResult()); // no snapshot enabled\n+    assertEquals(status.getPreviousState(), State.REPLICA); // every instance starts as a replica", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51340b0d2b84d15e0300ee26dd988f0c05e1ebf"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcxNTY5OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMzo1OVrOGCxQ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMzo1OVrOGCxQ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NzQ5NQ==", "bodyText": "You should use eq(State.LEADER) instead of the direct value", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405557495", "createdAt": "2020-04-08T14:13:59Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.hacep.core.infra.consumer;\n+\n+import java.time.LocalDateTime;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.hacep.EnvConfig;\n+import org.kie.hacep.consumer.DroolsConsumerHandler;\n+import org.kie.hacep.core.infra.DefaultSessionSnapShooter;\n+import org.kie.hacep.core.infra.SnapshotInfos;\n+import org.kie.hacep.core.infra.election.State;\n+import org.kie.hacep.core.infra.utils.SnapshotOnDemandUtils;\n+import org.kie.hacep.util.ConsumerUtilsCore;\n+import org.kie.remote.impl.producer.Producer;\n+import org.kie.remote.message.ControlMessage;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultKafkaConsumerTest {\n+\n+  @Mock\n+  protected Producer producer;\n+  @Mock\n+  protected DroolsConsumerHandler handler;\n+  @Mock\n+  protected KafkaConsumer primaryConsumer;\n+  @Mock\n+  protected KafkaConsumer secondaryConsumer;\n+  @Mock\n+  protected ConsumerUtilsCore consumerUtilsCore;\n+  @Mock\n+  protected DefaultSessionSnapShooter defaultSessionSnapShooter;\n+  @Mock\n+  protected SnapshotOnDemandUtils snapshotOnDemandUtils;\n+\n+  private DefaultKafkaConsumer spy;\n+\n+  @Before\n+  public void initTest() {\n+    EnvConfig envConfig = EnvConfig.getDefaultEnvConfig();\n+    ControlMessage lastControlMessage = new ControlMessage();\n+    lastControlMessage.setId(\"1\");\n+    lastControlMessage.setOffset(1l);\n+    when(consumerUtilsCore.getLastEvent(envConfig.getControlTopicName(), envConfig.getPollTimeout())).thenReturn(lastControlMessage);\n+    when(defaultSessionSnapShooter.getLastSnapshotTime()).thenReturn(LocalDateTime.now());\n+    when(handler.initializeKieSessionFromSnapshotOnDemand(any(EnvConfig.class), any(SnapshotInfos.class))).thenReturn(Boolean.TRUE);\n+\n+    spy = Mockito.spy(new DefaultKafkaConsumer(){\n+      @Override\n+      public void getOrCreateKafkaConsumer() {\n+        this.kafkaConsumer = primaryConsumer;\n+      }\n+\n+      @Override\n+      public void getOrCreateKafkaSecondaryConsumer() {\n+        this.kafkaSecondaryConsumer = secondaryConsumer;\n+      }\n+    });\n+    spy.setupForTest(envConfig, producer, consumerUtilsCore, defaultSessionSnapShooter, snapshotOnDemandUtils, handler);\n+  }\n+\n+  @Test\n+  public void updateStatusBecomingLeaderAtStartupTest(){\n+    spy.updateStatus(State.BECOMING_LEADER);\n+    verify(spy).updateStatus(State.BECOMING_LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.BECOMING_LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, never()).enableConsumeAndStartLoop(State.BECOMING_LEADER);\n+   }\n+\n+  @Test\n+  public void updateStatusLeaderAtStartupTest(){\n+    spy.updateStatus(State.LEADER);\n+    verify(spy).updateStatus(State.LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, times(1)).enableConsumeAndStartLoop(State.LEADER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcxODEyOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNDoyOVrOGCxSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNDoyOVrOGCxSdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1Nzg3Ng==", "bodyText": "Please use any(State.class) with never() to be more reliable", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405557876", "createdAt": "2020-04-08T14:14:29Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.hacep.core.infra.consumer;\n+\n+import java.time.LocalDateTime;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.hacep.EnvConfig;\n+import org.kie.hacep.consumer.DroolsConsumerHandler;\n+import org.kie.hacep.core.infra.DefaultSessionSnapShooter;\n+import org.kie.hacep.core.infra.SnapshotInfos;\n+import org.kie.hacep.core.infra.election.State;\n+import org.kie.hacep.core.infra.utils.SnapshotOnDemandUtils;\n+import org.kie.hacep.util.ConsumerUtilsCore;\n+import org.kie.remote.impl.producer.Producer;\n+import org.kie.remote.message.ControlMessage;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultKafkaConsumerTest {\n+\n+  @Mock\n+  protected Producer producer;\n+  @Mock\n+  protected DroolsConsumerHandler handler;\n+  @Mock\n+  protected KafkaConsumer primaryConsumer;\n+  @Mock\n+  protected KafkaConsumer secondaryConsumer;\n+  @Mock\n+  protected ConsumerUtilsCore consumerUtilsCore;\n+  @Mock\n+  protected DefaultSessionSnapShooter defaultSessionSnapShooter;\n+  @Mock\n+  protected SnapshotOnDemandUtils snapshotOnDemandUtils;\n+\n+  private DefaultKafkaConsumer spy;\n+\n+  @Before\n+  public void initTest() {\n+    EnvConfig envConfig = EnvConfig.getDefaultEnvConfig();\n+    ControlMessage lastControlMessage = new ControlMessage();\n+    lastControlMessage.setId(\"1\");\n+    lastControlMessage.setOffset(1l);\n+    when(consumerUtilsCore.getLastEvent(envConfig.getControlTopicName(), envConfig.getPollTimeout())).thenReturn(lastControlMessage);\n+    when(defaultSessionSnapShooter.getLastSnapshotTime()).thenReturn(LocalDateTime.now());\n+    when(handler.initializeKieSessionFromSnapshotOnDemand(any(EnvConfig.class), any(SnapshotInfos.class))).thenReturn(Boolean.TRUE);\n+\n+    spy = Mockito.spy(new DefaultKafkaConsumer(){\n+      @Override\n+      public void getOrCreateKafkaConsumer() {\n+        this.kafkaConsumer = primaryConsumer;\n+      }\n+\n+      @Override\n+      public void getOrCreateKafkaSecondaryConsumer() {\n+        this.kafkaSecondaryConsumer = secondaryConsumer;\n+      }\n+    });\n+    spy.setupForTest(envConfig, producer, consumerUtilsCore, defaultSessionSnapShooter, snapshotOnDemandUtils, handler);\n+  }\n+\n+  @Test\n+  public void updateStatusBecomingLeaderAtStartupTest(){\n+    spy.updateStatus(State.BECOMING_LEADER);\n+    verify(spy).updateStatus(State.BECOMING_LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.BECOMING_LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, never()).enableConsumeAndStartLoop(State.BECOMING_LEADER);\n+   }\n+\n+  @Test\n+  public void updateStatusLeaderAtStartupTest(){\n+    spy.updateStatus(State.LEADER);\n+    verify(spy).updateStatus(State.LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.LEADER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcyMDIzOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNDo1NlrOGCxTzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNDo1NlrOGCxTzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1ODIyMw==", "bodyText": "Please use any(State.class) with never() to be more reliable", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405558223", "createdAt": "2020-04-08T14:14:56Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.hacep.core.infra.consumer;\n+\n+import java.time.LocalDateTime;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.hacep.EnvConfig;\n+import org.kie.hacep.consumer.DroolsConsumerHandler;\n+import org.kie.hacep.core.infra.DefaultSessionSnapShooter;\n+import org.kie.hacep.core.infra.SnapshotInfos;\n+import org.kie.hacep.core.infra.election.State;\n+import org.kie.hacep.core.infra.utils.SnapshotOnDemandUtils;\n+import org.kie.hacep.util.ConsumerUtilsCore;\n+import org.kie.remote.impl.producer.Producer;\n+import org.kie.remote.message.ControlMessage;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultKafkaConsumerTest {\n+\n+  @Mock\n+  protected Producer producer;\n+  @Mock\n+  protected DroolsConsumerHandler handler;\n+  @Mock\n+  protected KafkaConsumer primaryConsumer;\n+  @Mock\n+  protected KafkaConsumer secondaryConsumer;\n+  @Mock\n+  protected ConsumerUtilsCore consumerUtilsCore;\n+  @Mock\n+  protected DefaultSessionSnapShooter defaultSessionSnapShooter;\n+  @Mock\n+  protected SnapshotOnDemandUtils snapshotOnDemandUtils;\n+\n+  private DefaultKafkaConsumer spy;\n+\n+  @Before\n+  public void initTest() {\n+    EnvConfig envConfig = EnvConfig.getDefaultEnvConfig();\n+    ControlMessage lastControlMessage = new ControlMessage();\n+    lastControlMessage.setId(\"1\");\n+    lastControlMessage.setOffset(1l);\n+    when(consumerUtilsCore.getLastEvent(envConfig.getControlTopicName(), envConfig.getPollTimeout())).thenReturn(lastControlMessage);\n+    when(defaultSessionSnapShooter.getLastSnapshotTime()).thenReturn(LocalDateTime.now());\n+    when(handler.initializeKieSessionFromSnapshotOnDemand(any(EnvConfig.class), any(SnapshotInfos.class))).thenReturn(Boolean.TRUE);\n+\n+    spy = Mockito.spy(new DefaultKafkaConsumer(){\n+      @Override\n+      public void getOrCreateKafkaConsumer() {\n+        this.kafkaConsumer = primaryConsumer;\n+      }\n+\n+      @Override\n+      public void getOrCreateKafkaSecondaryConsumer() {\n+        this.kafkaSecondaryConsumer = secondaryConsumer;\n+      }\n+    });\n+    spy.setupForTest(envConfig, producer, consumerUtilsCore, defaultSessionSnapShooter, snapshotOnDemandUtils, handler);\n+  }\n+\n+  @Test\n+  public void updateStatusBecomingLeaderAtStartupTest(){\n+    spy.updateStatus(State.BECOMING_LEADER);\n+    verify(spy).updateStatus(State.BECOMING_LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.BECOMING_LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, never()).enableConsumeAndStartLoop(State.BECOMING_LEADER);\n+   }\n+\n+  @Test\n+  public void updateStatusLeaderAtStartupTest(){\n+    spy.updateStatus(State.LEADER);\n+    verify(spy).updateStatus(State.LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, times(1)).enableConsumeAndStartLoop(State.LEADER);\n+    verify(spy, times(1)).setLastProcessedKey();\n+    verify(spy, times(1)).assignAndStartConsume();\n+  }\n+\n+  @Test\n+  public void updateStatusReplicaAtStartupTest(){\n+    spy.updateStatus(State.REPLICA);\n+    verify(spy).updateStatus(State.REPLICA);\n+    verify(spy, never()).updateOnRunningConsumer(State.REPLICA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcyMjQ5OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNToyOFrOGCxVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNToyOFrOGCxVOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1ODU4NA==", "bodyText": "Please use eq(State.REPLICA)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405558584", "createdAt": "2020-04-08T14:15:28Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/test/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumerTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.hacep.core.infra.consumer;\n+\n+import java.time.LocalDateTime;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.hacep.EnvConfig;\n+import org.kie.hacep.consumer.DroolsConsumerHandler;\n+import org.kie.hacep.core.infra.DefaultSessionSnapShooter;\n+import org.kie.hacep.core.infra.SnapshotInfos;\n+import org.kie.hacep.core.infra.election.State;\n+import org.kie.hacep.core.infra.utils.SnapshotOnDemandUtils;\n+import org.kie.hacep.util.ConsumerUtilsCore;\n+import org.kie.remote.impl.producer.Producer;\n+import org.kie.remote.message.ControlMessage;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultKafkaConsumerTest {\n+\n+  @Mock\n+  protected Producer producer;\n+  @Mock\n+  protected DroolsConsumerHandler handler;\n+  @Mock\n+  protected KafkaConsumer primaryConsumer;\n+  @Mock\n+  protected KafkaConsumer secondaryConsumer;\n+  @Mock\n+  protected ConsumerUtilsCore consumerUtilsCore;\n+  @Mock\n+  protected DefaultSessionSnapShooter defaultSessionSnapShooter;\n+  @Mock\n+  protected SnapshotOnDemandUtils snapshotOnDemandUtils;\n+\n+  private DefaultKafkaConsumer spy;\n+\n+  @Before\n+  public void initTest() {\n+    EnvConfig envConfig = EnvConfig.getDefaultEnvConfig();\n+    ControlMessage lastControlMessage = new ControlMessage();\n+    lastControlMessage.setId(\"1\");\n+    lastControlMessage.setOffset(1l);\n+    when(consumerUtilsCore.getLastEvent(envConfig.getControlTopicName(), envConfig.getPollTimeout())).thenReturn(lastControlMessage);\n+    when(defaultSessionSnapShooter.getLastSnapshotTime()).thenReturn(LocalDateTime.now());\n+    when(handler.initializeKieSessionFromSnapshotOnDemand(any(EnvConfig.class), any(SnapshotInfos.class))).thenReturn(Boolean.TRUE);\n+\n+    spy = Mockito.spy(new DefaultKafkaConsumer(){\n+      @Override\n+      public void getOrCreateKafkaConsumer() {\n+        this.kafkaConsumer = primaryConsumer;\n+      }\n+\n+      @Override\n+      public void getOrCreateKafkaSecondaryConsumer() {\n+        this.kafkaSecondaryConsumer = secondaryConsumer;\n+      }\n+    });\n+    spy.setupForTest(envConfig, producer, consumerUtilsCore, defaultSessionSnapShooter, snapshotOnDemandUtils, handler);\n+  }\n+\n+  @Test\n+  public void updateStatusBecomingLeaderAtStartupTest(){\n+    spy.updateStatus(State.BECOMING_LEADER);\n+    verify(spy).updateStatus(State.BECOMING_LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.BECOMING_LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, never()).enableConsumeAndStartLoop(State.BECOMING_LEADER);\n+   }\n+\n+  @Test\n+  public void updateStatusLeaderAtStartupTest(){\n+    spy.updateStatus(State.LEADER);\n+    verify(spy).updateStatus(State.LEADER);\n+    verify(spy, never()).updateOnRunningConsumer(State.LEADER);\n+    verify(spy, never()).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, times(1)).enableConsumeAndStartLoop(State.LEADER);\n+    verify(spy, times(1)).setLastProcessedKey();\n+    verify(spy, times(1)).assignAndStartConsume();\n+  }\n+\n+  @Test\n+  public void updateStatusReplicaAtStartupTest(){\n+    spy.updateStatus(State.REPLICA);\n+    verify(spy).updateStatus(State.REPLICA);\n+    verify(spy, never()).updateOnRunningConsumer(State.REPLICA);\n+    verify(spy, times(1)).askAndProcessSnapshotOnDemand(any(SnapshotInfos.class));\n+    verify(spy, times(1)).enableConsumeAndStartLoop(State.REPLICA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjczMzgzOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNzo1NFrOGCxciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNzo1NFrOGCxciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MDQ1OQ==", "bodyText": "A method like getOrCreate should:\n\nprevent multiple initialization\nreturn the value\n\nPlease rename it to initKafkaConsumer if there is no check nor value to return :)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405560459", "createdAt": "2020-04-08T14:17:54Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "diffHunk": "@@ -93,28 +96,50 @@ public DefaultKafkaConsumer(EnvConfig config, Producer producer) {\n         }\n         this.producer = producer;\n         this.consumerUtilsCore = new ConsumerUtilsCoreImpl();\n+        this.snapshotOnDemandUtils = snapshotOnDemandUtils;\n     }\n \n-    public void initConsumer(ConsumerHandler consumerHandler) {\n-        this.consumerHandler = (DroolsConsumerHandler) consumerHandler;\n-        this.snapShooter = (DefaultSessionSnapShooter) InfraFactory.getSnapshooter(envConfig);\n+    //For test\n+    void setupForTest(EnvConfig config, Producer producer,\n+                      ConsumerUtilsCore consumerUtilsCore,\n+                      DefaultSessionSnapShooter defaultSessionSnapShooter,\n+                      SnapshotOnDemandUtils snapshotOnDemandUtils, DroolsConsumerHandler consumerHandler){\n+        this.envConfig = config;\n+        this.producer = producer;\n+        this.consumerUtilsCore = consumerUtilsCore;\n+        this.snapShooter = defaultSessionSnapShooter;\n+        this.snapshotOnDemandUtils = snapshotOnDemandUtils;\n+        this.consumerHandler = consumerHandler;\n+        getOrCreateKafkaConsumer();\n+        getOrCreateKafkaSecondaryConsumer();\n+    }\n+\n+    public void getOrCreateKafkaConsumer(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc0MzIzOnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyMDowMFrOGCxijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyMDowMFrOGCxijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MTk5Ng==", "bodyText": "Are you sure it is not possible to subclass/set directly some fields and avoid to have a test specific method?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405561996", "createdAt": "2020-04-08T14:20:00Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "diffHunk": "@@ -93,28 +96,50 @@ public DefaultKafkaConsumer(EnvConfig config, Producer producer) {\n         }\n         this.producer = producer;\n         this.consumerUtilsCore = new ConsumerUtilsCoreImpl();\n+        this.snapshotOnDemandUtils = snapshotOnDemandUtils;\n     }\n \n-    public void initConsumer(ConsumerHandler consumerHandler) {\n-        this.consumerHandler = (DroolsConsumerHandler) consumerHandler;\n-        this.snapShooter = (DefaultSessionSnapShooter) InfraFactory.getSnapshooter(envConfig);\n+    //For test\n+    void setupForTest(EnvConfig config, Producer producer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjgwNzE1OnYy", "diffSide": "RIGHT", "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMzo1OVrOGCyKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMzo1OVrOGCyKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MjEyNw==", "bodyText": "Please rename to updateKafkaSecondaryConsumer", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2060#discussion_r405572127", "createdAt": "2020-04-08T14:33:59Z", "author": {"login": "danielezonca"}, "path": "drools-ha/ha-core-infra/src/main/java/org/kie/hacep/core/infra/consumer/DefaultKafkaConsumer.java", "diffHunk": "@@ -93,28 +96,50 @@ public DefaultKafkaConsumer(EnvConfig config, Producer producer) {\n         }\n         this.producer = producer;\n         this.consumerUtilsCore = new ConsumerUtilsCoreImpl();\n+        this.snapshotOnDemandUtils = snapshotOnDemandUtils;\n     }\n \n-    public void initConsumer(ConsumerHandler consumerHandler) {\n-        this.consumerHandler = (DroolsConsumerHandler) consumerHandler;\n-        this.snapShooter = (DefaultSessionSnapShooter) InfraFactory.getSnapshooter(envConfig);\n+    //For test\n+    void setupForTest(EnvConfig config, Producer producer,\n+                      ConsumerUtilsCore consumerUtilsCore,\n+                      DefaultSessionSnapShooter defaultSessionSnapShooter,\n+                      SnapshotOnDemandUtils snapshotOnDemandUtils, DroolsConsumerHandler consumerHandler){\n+        this.envConfig = config;\n+        this.producer = producer;\n+        this.consumerUtilsCore = consumerUtilsCore;\n+        this.snapShooter = defaultSessionSnapShooter;\n+        this.snapshotOnDemandUtils = snapshotOnDemandUtils;\n+        this.consumerHandler = consumerHandler;\n+        getOrCreateKafkaConsumer();\n+        getOrCreateKafkaSecondaryConsumer();\n+    }\n+\n+    public void getOrCreateKafkaConsumer(){\n         this.kafkaConsumer = new KafkaConsumer<>(Config.getConsumerConfig(PRIMARY_CONSUMER));\n+    }\n+\n+    public void getOrCreateKafkaSecondaryConsumer(){\n         if (currentState.equals(State.REPLICA)) {\n             this.kafkaSecondaryConsumer = new KafkaConsumer<>(Config.getConsumerConfig(SECONDARY_CONSUMER));\n+        } else {\n+            this.kafkaSecondaryConsumer = null;\n         }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3757d373bbb89854ba0ffc475ba17c8444cbd2"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2124, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}