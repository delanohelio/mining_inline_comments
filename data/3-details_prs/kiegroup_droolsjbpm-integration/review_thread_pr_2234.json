{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzQyMTk5", "number": 2234, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0OTo1NlrOEjOnVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo1OToxN1rOEjeGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzc1MDYyOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0OTo1NlrOHReAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0OTo1NlrOHReAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3OTUyMQ==", "bodyText": "Shouldn't it be useful to log something in case abort process operation fails?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2234#discussion_r488079521", "createdAt": "2020-09-14T16:49:56Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "diffHunk": "@@ -142,22 +142,25 @@ public void testProcessStartAndAbort() {\n         assertEquals(containerId, processInstance.getContainerId());\n         \n         try {\n-            \n             MigrationReportInstance report = processAdminClient.migrateProcessInstance(containerId, processInstanceId, containerId2, processId);\n             assertTrue(report.isSuccessful());\n-            \n             processInstance = queryClient.findProcessInstanceById(processInstanceId);\n             assertNotNull(processInstance);\n             assertEquals(1, processInstance.getState().intValue());\n             assertEquals(containerId2, processInstance.getContainerId());\n-        } finally {\n-            // at the end abort process instance\n-            processClient.abortProcessInstance(containerId2, processInstanceId);\n-    \n-            processInstance = queryClient.findProcessInstanceById(processInstanceId);\n-            assertNotNull(processInstance);\n-            assertEquals(3, processInstance.getState().intValue());\n         }\n+        catch (Exception ex ) {\n+            // clean up if failure\n+            try {\n+                processClient.abortProcessInstance(containerId, processInstanceId);\n+            } catch (Exception ex2) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d89b05c73221c9d3cf8d5f8e9b8a195db68221"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjIyODI2OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo0MzoxOVrOHR08YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo0MzoxOVrOHR08YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1NTI2NQ==", "bodyText": "might be worth failing the test as well?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw ex;\n          \n          \n            \n                        fail(\"Something went wrong: \" + ex.getMessage());\n          \n          \n            \n                        throw ex;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2234#discussion_r488455265", "createdAt": "2020-09-15T07:43:19Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "diffHunk": "@@ -142,22 +142,25 @@ public void testProcessStartAndAbort() {\n         assertEquals(containerId, processInstance.getContainerId());\n         \n         try {\n-            \n             MigrationReportInstance report = processAdminClient.migrateProcessInstance(containerId, processInstanceId, containerId2, processId);\n             assertTrue(report.isSuccessful());\n-            \n             processInstance = queryClient.findProcessInstanceById(processInstanceId);\n             assertNotNull(processInstance);\n             assertEquals(1, processInstance.getState().intValue());\n             assertEquals(containerId2, processInstance.getContainerId());\n-        } finally {\n-            // at the end abort process instance\n-            processClient.abortProcessInstance(containerId2, processInstanceId);\n-    \n-            processInstance = queryClient.findProcessInstanceById(processInstanceId);\n-            assertNotNull(processInstance);\n-            assertEquals(3, processInstance.getState().intValue());\n         }\n+        catch (Exception ex ) {\n+            // clean up if failure\n+            try {\n+                processClient.abortProcessInstance(containerId, processInstanceId);\n+            } catch (Exception ex2) {}\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d89b05c73221c9d3cf8d5f8e9b8a195db68221"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjIzODc0OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo0NjowM1rOHR1C2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTo0NDowOFrOHR5sow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1NjkyMQ==", "bodyText": "Shouldn't we try to abort process instance even if above exception is raised? like using this in a finally block? Otherwise this process instance won't be aborted in case of an exception.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2234#discussion_r488456921", "createdAt": "2020-09-15T07:46:03Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "diffHunk": "@@ -142,22 +142,25 @@ public void testProcessStartAndAbort() {\n         assertEquals(containerId, processInstance.getContainerId());\n         \n         try {\n-            \n             MigrationReportInstance report = processAdminClient.migrateProcessInstance(containerId, processInstanceId, containerId2, processId);\n             assertTrue(report.isSuccessful());\n-            \n             processInstance = queryClient.findProcessInstanceById(processInstanceId);\n             assertNotNull(processInstance);\n             assertEquals(1, processInstance.getState().intValue());\n             assertEquals(containerId2, processInstance.getContainerId());\n-        } finally {\n-            // at the end abort process instance\n-            processClient.abortProcessInstance(containerId2, processInstanceId);\n-    \n-            processInstance = queryClient.findProcessInstanceById(processInstanceId);\n-            assertNotNull(processInstance);\n-            assertEquals(3, processInstance.getState().intValue());\n         }\n+        catch (Exception ex ) {\n+            // clean up if failure\n+            try {\n+                processClient.abortProcessInstance(containerId, processInstanceId);\n+            } catch (Exception ex2) {}\n+            throw ex;\n+        }\n+        //abort process instance (outside try/cath), to not hide exception that will certainly occurs if  migration failed \n+        processClient.abortProcessInstance(containerId2, processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d89b05c73221c9d3cf8d5f8e9b8a195db68221"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDYwOQ==", "bodyText": "If the migration has failed, that code is not reached and it should not be (abort over the former container is performed). This code only makes sense in a sunny day scensario (aborting the migrated instance). If that abort failed, there is nothing else to do, since the instance is not any longer in the former container (has been properly migrated)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2234#discussion_r488524609", "createdAt": "2020-09-15T09:33:30Z", "author": {"login": "fjtirado"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "diffHunk": "@@ -142,22 +142,25 @@ public void testProcessStartAndAbort() {\n         assertEquals(containerId, processInstance.getContainerId());\n         \n         try {\n-            \n             MigrationReportInstance report = processAdminClient.migrateProcessInstance(containerId, processInstanceId, containerId2, processId);\n             assertTrue(report.isSuccessful());\n-            \n             processInstance = queryClient.findProcessInstanceById(processInstanceId);\n             assertNotNull(processInstance);\n             assertEquals(1, processInstance.getState().intValue());\n             assertEquals(containerId2, processInstance.getContainerId());\n-        } finally {\n-            // at the end abort process instance\n-            processClient.abortProcessInstance(containerId2, processInstanceId);\n-    \n-            processInstance = queryClient.findProcessInstanceById(processInstanceId);\n-            assertNotNull(processInstance);\n-            assertEquals(3, processInstance.getState().intValue());\n         }\n+        catch (Exception ex ) {\n+            // clean up if failure\n+            try {\n+                processClient.abortProcessInstance(containerId, processInstanceId);\n+            } catch (Exception ex2) {}\n+            throw ex;\n+        }\n+        //abort process instance (outside try/cath), to not hide exception that will certainly occurs if  migration failed \n+        processClient.abortProcessInstance(containerId2, processInstanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1NjkyMQ=="}, "originalCommit": {"oid": "19d89b05c73221c9d3cf8d5f8e9b8a195db68221"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzMzE1NQ==", "bodyText": "got it now - thanks!", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2234#discussion_r488533155", "createdAt": "2020-09-15T09:44:08Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "diffHunk": "@@ -142,22 +142,25 @@ public void testProcessStartAndAbort() {\n         assertEquals(containerId, processInstance.getContainerId());\n         \n         try {\n-            \n             MigrationReportInstance report = processAdminClient.migrateProcessInstance(containerId, processInstanceId, containerId2, processId);\n             assertTrue(report.isSuccessful());\n-            \n             processInstance = queryClient.findProcessInstanceById(processInstanceId);\n             assertNotNull(processInstance);\n             assertEquals(1, processInstance.getState().intValue());\n             assertEquals(containerId2, processInstance.getContainerId());\n-        } finally {\n-            // at the end abort process instance\n-            processClient.abortProcessInstance(containerId2, processInstanceId);\n-    \n-            processInstance = queryClient.findProcessInstanceById(processInstanceId);\n-            assertNotNull(processInstance);\n-            assertEquals(3, processInstance.getState().intValue());\n         }\n+        catch (Exception ex ) {\n+            // clean up if failure\n+            try {\n+                processClient.abortProcessInstance(containerId, processInstanceId);\n+            } catch (Exception ex2) {}\n+            throw ex;\n+        }\n+        //abort process instance (outside try/cath), to not hide exception that will certainly occurs if  migration failed \n+        processClient.abortProcessInstance(containerId2, processInstanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1NjkyMQ=="}, "originalCommit": {"oid": "19d89b05c73221c9d3cf8d5f8e9b8a195db68221"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjI4NzgzOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo1OToxN1rOHR1hhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzo1OToxN1rOHR1hhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NDc3NQ==", "bodyText": "typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //abort process instance (outside try/cath), to not hide exception that will certainly occurs if  migration failed \n          \n          \n            \n                    //abort process instance (outside try/catch), to not hide exception that will certainly occur if migration fails", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2234#discussion_r488464775", "createdAt": "2020-09-15T07:59:17Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KieServerMigrationTest.java", "diffHunk": "@@ -142,22 +142,25 @@ public void testProcessStartAndAbort() {\n         assertEquals(containerId, processInstance.getContainerId());\n         \n         try {\n-            \n             MigrationReportInstance report = processAdminClient.migrateProcessInstance(containerId, processInstanceId, containerId2, processId);\n             assertTrue(report.isSuccessful());\n-            \n             processInstance = queryClient.findProcessInstanceById(processInstanceId);\n             assertNotNull(processInstance);\n             assertEquals(1, processInstance.getState().intValue());\n             assertEquals(containerId2, processInstance.getContainerId());\n-        } finally {\n-            // at the end abort process instance\n-            processClient.abortProcessInstance(containerId2, processInstanceId);\n-    \n-            processInstance = queryClient.findProcessInstanceById(processInstanceId);\n-            assertNotNull(processInstance);\n-            assertEquals(3, processInstance.getState().intValue());\n         }\n+        catch (Exception ex ) {\n+            // clean up if failure\n+            try {\n+                processClient.abortProcessInstance(containerId, processInstanceId);\n+            } catch (Exception ex2) {}\n+            throw ex;\n+        }\n+        //abort process instance (outside try/cath), to not hide exception that will certainly occurs if  migration failed ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d89b05c73221c9d3cf8d5f8e9b8a195db68221"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1929, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}