{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTYyMzUz", "number": 2229, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjozOTowMVrOEhhw7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozNDozOVrOEhi0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTkxNjYwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/security/JACCIdentityProviderWildFlyTomcatTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjozOTowMVrOHO4wcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNToxN1rOHO8rMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MjAxNw==", "bodyText": "There's no checked exceptions thrown in this method\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testContextUsers() throws Exception {\n          \n          \n            \n                public void testContextUsers() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485372017", "createdAt": "2020-09-09T06:39:01Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/security/JACCIdentityProviderWildFlyTomcatTest.java", "diffHunk": "@@ -107,6 +108,19 @@ public void testGetRoles() throws Exception {\n         assertFalse(jaccIdentityProvider.hasRole(\"non_existing_role\"));\n         assertFalse(jaccIdentityProvider.hasRole(null));\n     }\n+    \n+    @Test\n+    public void testContextUsers() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjIwOQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485436209", "createdAt": "2020-09-09T08:35:17Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/security/JACCIdentityProviderWildFlyTomcatTest.java", "diffHunk": "@@ -107,6 +108,19 @@ public void testGetRoles() throws Exception {\n         assertFalse(jaccIdentityProvider.hasRole(\"non_existing_role\"));\n         assertFalse(jaccIdentityProvider.hasRole(null));\n     }\n+    \n+    @Test\n+    public void testContextUsers() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MjAxNw=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTk1OTUzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1Mjo1OVrOHO5Keg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNTozN1rOHO8sJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3ODY4Mg==", "bodyText": "Just a question, why ee7 and not ee8?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485378682", "createdAt": "2020-09-09T06:52:59Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "diffHunk": "@@ -144,6 +148,26 @@\n   <build>\n     <pluginManagement>\n       <plugins>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-antrun-plugin</artifactId>\n+          <executions>\n+            <execution>\n+              <id>prepare-kie-server</id>\n+              <phase>pre-integration-test</phase>\n+              <configuration>\n+                <target>\n+                  <unzip src=\"${maven.dependency.org.kie.server.kie-server.ee7.war.path}\" dest=\"${project.build.directory}/unzipped-kie-server\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjQ1Mg==", "bodyText": "you're right, switched to ee8", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485436452", "createdAt": "2020-09-09T08:35:37Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "diffHunk": "@@ -144,6 +148,26 @@\n   <build>\n     <pluginManagement>\n       <plugins>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-antrun-plugin</artifactId>\n+          <executions>\n+            <execution>\n+              <id>prepare-kie-server</id>\n+              <phase>pre-integration-test</phase>\n+              <configuration>\n+                <target>\n+                  <unzip src=\"${maven.dependency.org.kie.server.kie-server.ee7.war.path}\" dest=\"${project.build.directory}/unzipped-kie-server\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3ODY4Mg=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTk5ODQzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowNjoxOFrOHO5ipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNTo1MlrOHO8s0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NDg2OQ==", "bodyText": "Seems right package structure folder has not been created properly.\nIt should be org/jbpm/notification/listeners/ but the actual folder is just org.jbpm.notification.listeners", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485384869", "createdAt": "2020-09-09T07:06:18Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjYyNA==", "bodyText": "my bad, fixed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485436624", "createdAt": "2020-09-09T08:35:52Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NDg2OQ=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjAwMDg2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowNzowOVrOHO5kLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNDo1OFrOHO8qZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTI2MA==", "bodyText": "Please remove all these imports - not used\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.util.ArrayList;\n          \n          \n            \n            import java.util.Collections;\n          \n          \n            \n            import java.util.HashMap;\n          \n          \n            \n            import java.util.List;\n          \n          \n            \n            import java.util.Map;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485385260", "createdAt": "2020-09-09T07:07:09Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjAwNg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485436006", "createdAt": "2020-09-09T08:34:58Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTI2MA=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjAwMjM3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowNzozOFrOHO5lDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNjowNlrOHO8tiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTQ4Nw==", "bodyText": "this should be final\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);\n          \n          \n            \n                protected static final Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485385487", "createdAt": "2020-09-09T07:07:38Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNjgxMQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485436811", "createdAt": "2020-09-09T08:36:06Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTQ4Nw=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjAwODA0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowOTozNVrOHO5oiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1MDoyMlrOHO9Uiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NjM3OQ==", "bodyText": "logger expects 3 placeholders but only 2 are provided, also I think there is no harm in using info so we can always see the output when running tests", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485386379", "createdAt": "2020-09-09T07:09:35Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);\n+    \n+    private UserTaskService userTaskService = (UserTaskService) ServiceRegistry.get().service(ServiceRegistry.USER_TASK_SERVICE);\n+\n+    @Override\n+    public void onNotification(NotificationEvent event, UserInfo userInfo) {\n+        logger.debug(\"onNotification with event content {}, task {} , userInfo {}\", ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0Njc5NQ==", "bodyText": "just kept content, as it's the only one meaningful, right", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485446795", "createdAt": "2020-09-09T08:50:22Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);\n+    \n+    private UserTaskService userTaskService = (UserTaskService) ServiceRegistry.get().service(ServiceRegistry.USER_TASK_SERVICE);\n+\n+    @Override\n+    public void onNotification(NotificationEvent event, UserInfo userInfo) {\n+        logger.debug(\"onNotification with event content {}, task {} , userInfo {}\", ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NjM3OQ=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjAyMDQ2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxMzoyN1rOHO5wBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxMzoyN1rOHO5wBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4ODI5Mw==", "bodyText": "using userInfo will only display a memory address - maybe it's worth to display something more meaningful from userInfo object", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485388293", "createdAt": "2020-09-09T07:13:27Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);\n+    \n+    private UserTaskService userTaskService = (UserTaskService) ServiceRegistry.get().service(ServiceRegistry.USER_TASK_SERVICE);\n+\n+    @Override\n+    public void onNotification(NotificationEvent event, UserInfo userInfo) {\n+        logger.debug(\"onNotification with event content {}, task {} , userInfo {}\", \n+                event.getContent(), userInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjAyNTU1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxNToxNFrOHO5zRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1MTowMFrOHO9WFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4OTEyNw==", "bodyText": "contentId is not used\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Long contentId = userTaskService.saveContent(event.getTask().getId(), singletonMap(\"grade\", \"E\"));\n          \n          \n            \n                            userTaskService.saveContent(event.getTask().getId(), singletonMap(\"grade\", \"E\"));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485389127", "createdAt": "2020-09-09T07:15:14Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);\n+    \n+    private UserTaskService userTaskService = (UserTaskService) ServiceRegistry.get().service(ServiceRegistry.USER_TASK_SERVICE);\n+\n+    @Override\n+    public void onNotification(NotificationEvent event, UserInfo userInfo) {\n+        logger.debug(\"onNotification with event content {}, task {} , userInfo {}\", \n+                event.getContent(), userInfo);\n+        try {\n+            if (\"TaskSaveContent\".equals(event.getTask().getName())) {\n+                Long contentId = userTaskService.saveContent(event.getTask().getId(), singletonMap(\"grade\", \"E\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0NzE5MA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485447190", "createdAt": "2020-09-09T08:51:00Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/main/java/org.jbpm.notification.listeners/CustomNotificationListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.jbpm.notification.listeners;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.service.ServiceRegistry;\n+import org.jbpm.services.task.deadlines.NotificationListener;\n+import org.kie.internal.task.api.UserInfo;\n+import org.kie.internal.task.api.model.NotificationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class CustomNotificationListener implements NotificationListener {\n+\n+    protected static Logger logger = LoggerFactory.getLogger(CustomNotificationListener.class);\n+    \n+    private UserTaskService userTaskService = (UserTaskService) ServiceRegistry.get().service(ServiceRegistry.USER_TASK_SERVICE);\n+\n+    @Override\n+    public void onNotification(NotificationEvent event, UserInfo userInfo) {\n+        logger.debug(\"onNotification with event content {}, task {} , userInfo {}\", \n+                event.getContent(), userInfo);\n+        try {\n+            if (\"TaskSaveContent\".equals(event.getTask().getName())) {\n+                Long contentId = userTaskService.saveContent(event.getTask().getId(), singletonMap(\"grade\", \"E\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4OTEyNw=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjA4MTUzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/NotificationSaveContentIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozMTo1M1rOHO6WFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1MToxMFrOHO9Wig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5ODAzOQ==", "bodyText": "Unnecessary unboxing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                    assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485398039", "createdAt": "2020-09-09T07:31:53Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/NotificationSaveContentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerSynchronization;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NotificationSaveContentIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", CONTAINER_ID_NOTIFICATION,\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/\"+CONTAINER_ID_NOTIFICATION);\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_NOTIFICATION, releaseId);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testSaveContentOnNotification() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_NOTIFICATION, PROCESS_ID_NOTIFICATION);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0NzMwNg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485447306", "createdAt": "2020-09-09T08:51:10Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/NotificationSaveContentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerSynchronization;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NotificationSaveContentIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", CONTAINER_ID_NOTIFICATION,\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/\"+CONTAINER_ID_NOTIFICATION);\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_NOTIFICATION, releaseId);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testSaveContentOnNotification() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_NOTIFICATION, PROCESS_ID_NOTIFICATION);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5ODAzOQ=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjA5MDMyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/NotificationSaveContentIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozNDozOVrOHO6bnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1MToyMFrOHO9W3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5OTQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        tasks=taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, Arrays.asList(\"Reserved\"), 0, 10);\n          \n          \n            \n                        tasks=taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, Collections.singletonList(\"Reserved\"), 0, 10);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485399455", "createdAt": "2020-09-09T07:34:39Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/NotificationSaveContentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerSynchronization;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NotificationSaveContentIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", CONTAINER_ID_NOTIFICATION,\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/\"+CONTAINER_ID_NOTIFICATION);\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_NOTIFICATION, releaseId);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testSaveContentOnNotification() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_NOTIFICATION, PROCESS_ID_NOTIFICATION);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+\n+        try {\n+            List<TaskSummary> tasks=taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertEquals(1, tasks.size());\n+            \n+            //Task is claimed during onNotification, as well as saving output content\n+            KieServerSynchronization.waitForTaskStatus(taskClient, tasks.get(0).getId(), \"Reserved\");\n+            \n+            tasks=taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, Arrays.asList(\"Reserved\"), 0, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0NzM5MA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2229#discussion_r485447390", "createdAt": "2020-09-09T08:51:20Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/NotificationSaveContentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerSynchronization;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NotificationSaveContentIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", CONTAINER_ID_NOTIFICATION,\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/\"+CONTAINER_ID_NOTIFICATION);\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_NOTIFICATION, releaseId);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testSaveContentOnNotification() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_NOTIFICATION, PROCESS_ID_NOTIFICATION);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+\n+        try {\n+            List<TaskSummary> tasks=taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertEquals(1, tasks.size());\n+            \n+            //Task is claimed during onNotification, as well as saving output content\n+            KieServerSynchronization.waitForTaskStatus(taskClient, tasks.get(0).getId(), \"Reserved\");\n+            \n+            tasks=taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, Arrays.asList(\"Reserved\"), 0, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5OTQ1NQ=="}, "originalCommit": {"oid": "cab4830034ebcd261b69742aa68f405849445d16"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1921, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}