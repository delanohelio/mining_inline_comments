{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjA1Nzc3", "number": 2119, "title": "[JBPM-9178] Immutable SpringBoot Deployment", "bodyText": "", "createdAt": "2020-06-04T05:53:49Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119", "merged": true, "mergeCommit": {"oid": "245ded596e4e90ff9713da990ed64d1de7121ac1"}, "closed": true, "closedAt": "2020-08-12T06:32:25Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpfYTngBqjM0MjMzMDI3MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc950SnABqjM2NDQxMzUwOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb848cd1217301312f0c89d832f0d69bade41df5", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/fb848cd1217301312f0c89d832f0d69bade41df5", "committedDate": "2020-06-04T05:51:59Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "cc31ed51ce85bb30aeb49ac84f047cf522a687bd", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cc31ed51ce85bb30aeb49ac84f047cf522a687bd", "committedDate": "2020-06-09T06:35:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc31ed51ce85bb30aeb49ac84f047cf522a687bd", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cc31ed51ce85bb30aeb49ac84f047cf522a687bd", "committedDate": "2020-06-09T06:35:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "071128e0146812b350f1f3f8b130294bfd5e7cb8", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/071128e0146812b350f1f3f8b130294bfd5e7cb8", "committedDate": "2020-06-11T10:01:50Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "071128e0146812b350f1f3f8b130294bfd5e7cb8", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/071128e0146812b350f1f3f8b130294bfd5e7cb8", "committedDate": "2020-06-11T10:01:50Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "43bbc6c0b6269a54fe00e76227747dfc46d76251", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/43bbc6c0b6269a54fe00e76227747dfc46d76251", "committedDate": "2020-06-11T13:30:10Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43bbc6c0b6269a54fe00e76227747dfc46d76251", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/43bbc6c0b6269a54fe00e76227747dfc46d76251", "committedDate": "2020-06-11T13:30:10Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "bb6b1dec1dfa0f62ad8287bc6eb77f980bceea1d", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/bb6b1dec1dfa0f62ad8287bc6eb77f980bceea1d", "committedDate": "2020-06-16T10:18:59Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb6b1dec1dfa0f62ad8287bc6eb77f980bceea1d", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/bb6b1dec1dfa0f62ad8287bc6eb77f980bceea1d", "committedDate": "2020-06-16T10:18:59Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "18976f9d1152ec2bea94da1b83eb63631c34238b", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/18976f9d1152ec2bea94da1b83eb63631c34238b", "committedDate": "2020-06-16T13:37:38Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a08ff3ca14b2d7cddf68c5ea1a9f5879258ffb2", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3a08ff3ca14b2d7cddf68c5ea1a9f5879258ffb2", "committedDate": "2020-06-18T08:12:44Z", "message": "[JBPM-9178] Plugin for copying dependencies in the right directory"}, "afterCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4", "committedDate": "2020-06-18T14:40:38Z", "message": "[JBPM-9178] Plugin for copying dependencies in the right directory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzM0NTcz", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#pullrequestreview-434734573", "createdAt": "2020-06-22T09:02:41Z", "commit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMjo0MVrOGm3_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyNTo1N1rOGnFv9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNjUxMw==", "bodyText": "Copyright header is missing", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443416513", "createdAt": "2020-06-22T09:02:41Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ArtifactItem.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.kie.maven.plugin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyOTY5Mw==", "bodyText": "Do you really wanna keep it with default access modifier? shouldn't be private?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443429693", "createdAt": "2020-06-22T09:25:44Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");\n+            if (!outputFolder.exists()) {\n+                outputFolder.mkdirs();\n+            }\n+            getLog().info(\"Create directory: \" + outputFolder);\n+\n+            for (ArtifactItem artifactItem : artifactItems) {\n+                DefaultDependableCoordinate coordinate = new DefaultDependableCoordinate();\n+                coordinate.setArtifactId(artifactItem.getArtifactId());\n+                coordinate.setGroupId(artifactItem.getGroupId());\n+                coordinate.setVersion(artifactItem.getVersion());\n+                coordinate.setClassifier(artifactItem.getClassifier());\n+                coordinate.setType(artifactItem.getType());\n+\n+                getLog().info(\"Resolving \" + coordinate + \" with transitive dependencies\");\n+\n+                ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n+                Settings settings = session.getSettings();\n+                repositorySystem.injectMirror(repoList, settings.getMirrors());\n+                repositorySystem.injectProxy(repoList, settings.getProxies());\n+                repositorySystem.injectAuthentication(repoList, settings.getServers());\n+                buildingRequest.setRemoteRepositories(repoList);\n+\n+                Iterable<ArtifactResult> results = dependencyResolver.resolveDependencies(buildingRequest, coordinate, null);\n+                for (ArtifactResult artifact : results) {\n+                    getLog().info(\"Copying dependencies: \" + artifact.getArtifact());\n+                    ArtifactResult artifactResolverResult = artifactResolver.resolveArtifact(buildingRequest, toArtifactCoordinate(artifact.getArtifact()));\n+                    Artifact artifactResolved = artifactResolverResult.getArtifact();\n+                    File local = artifactResolved.getFile();\n+                    Files.copy(local, new File(outputFolder, local.getName()));\n+                }\n+ \n+            }\n+        } catch (IOException | ArtifactResolverException | DependencyResolverException e) {\n+            throw new MojoExecutionException(\"Couldn't download artifact: \" + e.getMessage(), e);\n+        }\n+\n+    }\n+\n+    private ArtifactCoordinate toArtifactCoordinate(Artifact dependableCoordinate) {\n+        ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler(dependableCoordinate.getType());\n+        DefaultArtifactCoordinate artifactCoordinate = new DefaultArtifactCoordinate();\n+        artifactCoordinate.setGroupId(dependableCoordinate.getGroupId());\n+        artifactCoordinate.setArtifactId(dependableCoordinate.getArtifactId());\n+        artifactCoordinate.setVersion(dependableCoordinate.getVersion());\n+        artifactCoordinate.setClassifier(dependableCoordinate.getClassifier());\n+        artifactCoordinate.setExtension(artifactHandler.getExtension());\n+        return artifactCoordinate;\n+    }\n+\n+    ArtifactRepository parseRepository(String repo, ArtifactRepositoryPolicy policy) throws MojoFailureException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMDgxMQ==", "bodyText": "Wouldn't make more sense to rename this class to more specific name such as PackageKjarDependenciesMojo or PackageDependenciesMojo?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443430811", "createdAt": "2020-06-22T09:27:42Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageMojo extends AbstractKieMojo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNDI1Mg==", "bodyText": "Maybe default access modifier is more suitable here, instead of public as this method is only used within all classes in this package?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443504252", "createdAt": "2020-06-22T11:52:58Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -223,7 +224,7 @@ public void destroy() {\n         return this.context.getServerExtensions();\n     }\n \n-    protected KieServerInfo getInfoInternal() {\n+    public KieServerInfo getInfoInternal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNzgwMQ==", "bodyText": "Please remove metadata parameter as it's not used.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443507801", "createdAt": "2020-06-22T12:00:06Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -360,6 +362,14 @@ protected KieServerInfo getInfoInternal() {\n         }\n     }\n \n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new KieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMjY4NA==", "bodyText": "Shouldn't we pass metadata to the getReleaseUpdateParameters call? Otherwise, metadata param won't be used and should be removed from here.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443512684", "createdAt": "2020-06-22T12:10:10Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -974,8 +989,8 @@ private Message updateKieContainerToVersion(KieContainerInstanceImpl kci, Releas\n         return response;\n     }\n \n-    private void prepareUpdateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n-        Map<String, Object> parameters = getReleaseUpdateParameters(releaseId, messages, resetBeforeUpdate);\n+    private void prepareUpdateExtensions(KieModuleMetaData metadata, KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n+        Map<String, Object> parameters = getReleaseUpdateParameters(null, releaseId, kci.getKieContainer(), messages, resetBeforeUpdate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNDA4Nw==", "bodyText": "It's only use within classes in the same package, so maybe it's better to use default access modifier instead.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443514087", "createdAt": "2020-06-22T12:13:04Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -1029,7 +1052,7 @@ private void updateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId,\n         return parameters;\n     }\n \n-    protected KieServerController getController() {\n+    public KieServerController getController() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODYzNg==", "bodyText": "Can be replaced with method reference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));\n          \n          \n            \n                    String str = containers.stream().map(KieContainerResource::toString).collect(Collectors.joining(\"\\n\\t\"));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443518636", "createdAt": "2020-06-22T12:21:45Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/ContainerManager.java", "diffHunk": "@@ -34,11 +35,14 @@ public void installContainers(KieServerImpl kieServer, Set<KieContainerResource>\n     }\n \n     public void installContainersSync(KieServerImpl kieServer, Set<KieContainerResource> containers, KieServerState currentState, KieServerSetup kieServerSetup) {\n-        logger.info(\"About to install containers '{}' on kie server '{}'\", containers, kieServer);\n         if (containers == null) {\n             kieServer.markAsReady();\n             return;\n         }\n+\n+        String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU2OTU3MA==", "bodyText": "installContainersSync and installContainers methods are doing the same, with same parameters. I know it's already doing this way in some other classes, but just out of curiosity - this is only in case we wanted to separate some logic methods for doing it async/sync way? such as:\nhttps://github.com/kiegroup/droolsjbpm-integration/blob/master/kie-server-parent/kie-server-remote/kie-server-jms/src/main/java/org/kie/server/jms/ContainerManagerEJB.java#L38\n(though it will call the installContainersSync method at the end)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443569570", "createdAt": "2020-06-22T13:46:43Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.impl;\n+\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.storage.KieServerState;\n+\n+\n+public class InmutableContainerStartupStrategy implements StartupStrategy {\n+\n+    @Override\n+    public void startup(KieServerImpl kieServer, ContainerManager containerManager, KieServerState currentState, AtomicBoolean kieServerActive) {\n+        KieServerInfo kieServerInfo = kieServer.getInfoInternal();\n+        KieServerSetup kieServerSetup = kieServer.getController().connect(kieServerInfo);\n+\n+        Set<KieContainerResource> containers = kieServerSetup.getContainers();\n+\n+        kieServer.addServerStatusMessage(kieServerInfo);\n+        if (Boolean.parseBoolean(currentState.getConfiguration().getConfigItemValue(KieServerConstants.CFG_SYNC_DEPLOYMENT, \"false\"))) {\n+            containerManager.installContainersSync(kieServer, containers, currentState, kieServerSetup);\n+        } else {\n+            containerManager.installContainers(kieServer, containers, currentState, kieServerSetup);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODAxNQ==", "bodyText": "Why skipping this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443588015", "createdAt": "2020-06-22T14:13:15Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-drools/src/main/java/org/kie/server/services/drools/DroolsKieServerExtension.java", "diffHunk": "@@ -89,12 +89,16 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+\n         // do any other bootstrapping rule service requires\n         Set<Class<?>> extraClasses = new HashSet<Class<?>>();\n \n         // create kbases so declared types can be created\n         Collection<String> kbases = kieContainerInstance.getKieContainer().getKieBaseNames();\n         for (String kbase : kbases) {\n+            if (kbase.startsWith(\"KiePMML\")) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTI0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (ksession != null) {\n          \n          \n            \n                        if (ksession != null && !ksession.isEmpty()) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443609241", "createdAt": "2020-06-22T14:40:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTcwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (kbase != null) {\n          \n          \n            \n                        if (kbase != null && !kbase.isEmpty()) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443609701", "createdAt": "2020-06-22T14:41:08Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {\n+                unit.setKsessionName(ksession);\n+            }\n             String kbase = config.getConfigItemValue(KieServerConstants.PCFG_KIE_BASE);\n-            unit.setKbaseName(kbase);\n+            if (kbase != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMzI2MA==", "bodyText": "why false?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443633260", "createdAt": "2020-06-22T15:13:27Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieContainerInstanceImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.KieServerImpl;\n+\n+\n+public class InmutableSpringBootKieContainerInstanceImpl extends KieContainerInstanceImpl {\n+\n+    public InmutableSpringBootKieContainerInstanceImpl(String containerId, KieContainerStatus status, InternalKieContainer kieContainer, ReleaseId releaseId, KieServerImpl kieServer) {\n+        super(containerId, status, kieContainer, releaseId, kieServer);\n+    }\n+\n+    @Override\n+    protected boolean updateReleaseId() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNTcxNQ==", "bodyText": "Lambda can be replaced with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        serverSetup.setContainers(containers.stream().collect(Collectors.toSet()));\n          \n          \n            \n                        serverSetup.setContainers(new HashSet<>(containers));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443635715", "createdAt": "2020-06-22T15:17:08Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {\n+\n+        @Override\n+        public void disconnect(KieServerInfo serverInfo) {}\n+\n+        @Override\n+        public KieServerSetup connect(KieServerInfo serverInfo) {\n+            KieServerSetup serverSetup = new KieServerSetup();\n+            serverSetup.setContainers(containers.stream().collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzODQ1NA==", "bodyText": "Shouldn't we restrict access to this inner class? maybe private instead?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443638454", "createdAt": "2020-06-22T15:21:06Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MTg0Nw==", "bodyText": "Just add a small comment stating why this method body is empty.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443641847", "createdAt": "2020-06-22T15:25:57Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {\n+\n+        @Override\n+        public void disconnect(KieServerInfo serverInfo) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4", "committedDate": "2020-06-18T14:40:38Z", "message": "[JBPM-9178] Plugin for copying dependencies in the right directory"}, "afterCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/968e8d0e6183e2119d2ca5743c3ac942cd96e83b", "committedDate": "2020-06-23T10:27:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDQ5ODAx", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#pullrequestreview-436449801", "createdAt": "2020-06-24T08:50:57Z", "commit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo1MDo1OFrOGoI_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyMToyNVrOGoXK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MzUwOQ==", "bodyText": "outputDirectory should be readonly otherwise, if this is modified, dependencies might not necessarily be packaged in the generated jar file afterwards in line:\n\n  \n    \n      droolsjbpm-integration/kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java\n    \n    \n         Line 168\n      in\n      968e8d0\n    \n    \n    \n    \n\n        \n          \n           Files.copy(local, new File(outputFolder, local.getName()));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444743509", "createdAt": "2020-06-24T08:50:58Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzU5NQ==", "bodyText": "maven build is packaging deps in BOOT-INF/classes/KIE-INF/lib/, having following folder structure inside the jar:\n\nBOO-INF\n- classes/KIE-INF/lib\nMETA-INF\n\nwould it make more sense to have a folder structure like instead:\n\nBOO-INF\nKIE-INF\nMETA-INF\n\nOr why not just moving deps to the BOOT-INF/lib folder instead of creating a new folder structure? any potential issue with the classloader?\nwdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444757595", "createdAt": "2020-06-24T09:14:48Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzIzNw==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444923237", "createdAt": "2020-06-24T14:11:55Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzUyNw==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444923527", "createdAt": "2020-06-24T14:12:21Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDMyMA==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444924320", "createdAt": "2020-06-24T14:13:25Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDgzNA==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444924834", "createdAt": "2020-06-24T14:14:08Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjIyOQ==", "bodyText": "member not used in the code.\nIf removed, we should remove dep from pom.xml:\n\n  \n    \n      droolsjbpm-integration/kie-maven-plugin/pom.xml\n    \n    \n        Lines 35 to 38\n      in\n      968e8d0\n    \n    \n    \n    \n\n        \n          \n           <dependency> \n        \n\n        \n          \n             <groupId>org.apache.maven</groupId> \n        \n\n        \n          \n             <artifactId>maven-archiver</artifactId> \n        \n\n        \n          \n           </dependency> \n        \n    \n  \n\n\nand from pom.xml:\nhttps://github.com/kiegroup/droolsjbpm-build-bootstrap/blob/f3a7669517d9ae0f0b3b3ace5983662c87f9982e/pom.xml#L3200-L3204", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444926229", "createdAt": "2020-06-24T14:16:01Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2ODA4Nw==", "bodyText": "any update here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444968087", "createdAt": "2020-06-24T15:10:34Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -974,8 +989,8 @@ private Message updateKieContainerToVersion(KieContainerInstanceImpl kci, Releas\n         return response;\n     }\n \n-    private void prepareUpdateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n-        Map<String, Object> parameters = getReleaseUpdateParameters(releaseId, messages, resetBeforeUpdate);\n+    private void prepareUpdateExtensions(KieModuleMetaData metadata, KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n+        Map<String, Object> parameters = getReleaseUpdateParameters(null, releaseId, kci.getKieContainer(), messages, resetBeforeUpdate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMjY4NA=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2OTA1MQ==", "bodyText": "any update here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444969051", "createdAt": "2020-06-24T15:11:53Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -1029,7 +1052,7 @@ private void updateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId,\n         return parameters;\n     }\n \n-    protected KieServerController getController() {\n+    public KieServerController getController() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNDA4Nw=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MDA4NA==", "bodyText": "any update here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444970084", "createdAt": "2020-06-24T15:13:20Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTI0MQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NDI2Ng==", "bodyText": "any update on this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444974266", "createdAt": "2020-06-24T15:19:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-drools/src/main/java/org/kie/server/services/drools/DroolsKieServerExtension.java", "diffHunk": "@@ -89,12 +89,16 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+\n         // do any other bootstrapping rule service requires\n         Set<Class<?>> extraClasses = new HashSet<Class<?>>();\n \n         // create kbases so declared types can be created\n         Collection<String> kbases = kieContainerInstance.getKieContainer().getKieBaseNames();\n         for (String kbase : kbases) {\n+            if (kbase.startsWith(\"KiePMML\")) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODAxNQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NDUwMA==", "bodyText": "any update on this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444974500", "createdAt": "2020-06-24T15:19:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/ContainerManager.java", "diffHunk": "@@ -34,11 +35,14 @@ public void installContainers(KieServerImpl kieServer, Set<KieContainerResource>\n     }\n \n     public void installContainersSync(KieServerImpl kieServer, Set<KieContainerResource> containers, KieServerState currentState, KieServerSetup kieServerSetup) {\n-        logger.info(\"About to install containers '{}' on kie server '{}'\", containers, kieServer);\n         if (containers == null) {\n             kieServer.markAsReady();\n             return;\n         }\n+\n+        String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODYzNg=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NTgyNg==", "bodyText": "Shouldn't we restrict access modifier? it's only used internally, so maybe it's better to declare as private?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444975826", "createdAt": "2020-06-24T15:21:25Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/ImmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class ImmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public ImmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public ImmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/968e8d0e6183e2119d2ca5743c3ac942cd96e83b", "committedDate": "2020-06-23T10:27:32Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "2c5bd259c0ea9891ba69e70c8a9cb12ba210dd41", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/2c5bd259c0ea9891ba69e70c8a9cb12ba210dd41", "committedDate": "2020-06-26T07:25:11Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c5bd259c0ea9891ba69e70c8a9cb12ba210dd41", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/2c5bd259c0ea9891ba69e70c8a9cb12ba210dd41", "committedDate": "2020-06-26T07:25:11Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "72c796df8a9a0b9fcfb61c5a20df6e8daa572429", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/72c796df8a9a0b9fcfb61c5a20df6e8daa572429", "committedDate": "2020-06-26T08:57:13Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72c796df8a9a0b9fcfb61c5a20df6e8daa572429", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/72c796df8a9a0b9fcfb61c5a20df6e8daa572429", "committedDate": "2020-06-26T08:57:13Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "6b48c4b350365e0bde9e6835a14bfb7f9a5cd963", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6b48c4b350365e0bde9e6835a14bfb7f9a5cd963", "committedDate": "2020-06-29T09:48:20Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b48c4b350365e0bde9e6835a14bfb7f9a5cd963", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6b48c4b350365e0bde9e6835a14bfb7f9a5cd963", "committedDate": "2020-06-29T09:48:20Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}, "afterCommit": {"oid": "b2c99f10298241c8b90e433d2947ab9a6d040a8b", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b2c99f10298241c8b90e433d2947ab9a6d040a8b", "committedDate": "2020-07-30T06:57:42Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0efe2de2ef29fcb0ce1ef409408fedd89eb004ae", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0efe2de2ef29fcb0ce1ef409408fedd89eb004ae", "committedDate": "2020-08-04T13:36:38Z", "message": "[JBPM-9178] added filter for PMML"}, "afterCommit": {"oid": "09d6b52f35dc2b1a75ed319ba03f5906307659d7", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/09d6b52f35dc2b1a75ed319ba03f5906307659d7", "committedDate": "2020-08-06T10:52:05Z", "message": "[JBPM-9178] added filter for PMML"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09d6b52f35dc2b1a75ed319ba03f5906307659d7", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/09d6b52f35dc2b1a75ed319ba03f5906307659d7", "committedDate": "2020-08-06T10:52:05Z", "message": "[JBPM-9178] added filter for PMML"}, "afterCommit": {"oid": "5bdd9cb39341afd28e69fc39cb4e41815bd6ab4e", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/5bdd9cb39341afd28e69fc39cb4e41815bd6ab4e", "committedDate": "2020-08-06T12:06:47Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment  / PMML filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b8bfb62ae4ff871c302de438d9613fd39eb4f1", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/89b8bfb62ae4ff871c302de438d9613fd39eb4f1", "committedDate": "2020-08-11T15:33:09Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c740c6f893ccc70ff475121fbfc82eef7551f3d9", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c740c6f893ccc70ff475121fbfc82eef7551f3d9", "committedDate": "2020-08-11T16:56:57Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment  / PMML filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bdd9cb39341afd28e69fc39cb4e41815bd6ab4e", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/5bdd9cb39341afd28e69fc39cb4e41815bd6ab4e", "committedDate": "2020-08-06T12:06:47Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment  / PMML filter"}, "afterCommit": {"oid": "c740c6f893ccc70ff475121fbfc82eef7551f3d9", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c740c6f893ccc70ff475121fbfc82eef7551f3d9", "committedDate": "2020-08-11T16:56:57Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment  / PMML filter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1259, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}