{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjkxMTMz", "number": 2338, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozOTowNFrOFDaFyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowNjozMVrOFGoEyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTE3NTE1OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/utils/KieJarBuildHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozOTowNFrOIDCrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozOTowNFrOIDCrLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MDQ2Mg==", "bodyText": "Maybe it's worth moving this to the import section rather than using the full qualified package name\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        fos.write(com.google.common.io.Files.toByteArray(new File(resource + \"/pom.xml\")));\n          \n          \n            \n                        fos.write(toByteArray(new File(resource + \"/pom.xml\")));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540060462", "createdAt": "2020-12-10T10:39:04Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/utils/KieJarBuildHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples.utils;\n+\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.appformer.maven.integration.MavenRepository;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.Message;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KieJarBuildHelper {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(KieJarBuildHelper.class);\n+    \n+    public static void createKieJar(String resource) {\n+        KieServices ks = KieServices.get();\n+        KieBuilder kieBuilder = ks.newKieBuilder(new File(resource));\n+        KieBuilder build = kieBuilder.buildAll();\n+        InternalKieModule kjar = (InternalKieModule) build.getKieModule();\n+\n+        List<Message> messages = kieBuilder.buildAll().getResults().getMessages();\n+        if (!messages.isEmpty()) {\n+            for (Message message : messages) {\n+                logger.error(\"Error Message: ({}) {}\", message.getPath(), message.getText());\n+            }\n+            throw new RuntimeException(\"There are errors building the package, please check your knowledge assets!\");\n+        }\n+        \n+        String pomFileName = MavenRepository.toFileName(kjar.getReleaseId(), null) + \".pom\";\n+        File pomFile = new File(System.getProperty(\"java.io.tmpdir\"), pomFileName);\n+        try (FileOutputStream fos = new FileOutputStream(pomFile)) {\n+            fos.write(com.google.common.io.Files.toByteArray(new File(resource + \"/pom.xml\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTE5MTU2OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/resources/application-kafka.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0MjozNFrOIDC0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzozMjo1MlrOIGku_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2Mjg5OQ==", "bodyText": "Maybe it's clear to leave only\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            kieserver.jbpm.enabled=true\n          \n          \n            \n            kieserver.jbpmui.enabled=true\n          \n          \n            \n            kieserver.kafka.enabled=true\n          \n          \n            \n            kieserver.drools.enabled=false\n          \n          \n            \n            kieserver.dmn.enabled=false\n          \n          \n            \n            kieserver.optaplanner.enabled=false\n          \n          \n            \n            kieserver.prometheus.enabled=false\n          \n          \n            \n            kieserver.casemgmt.enabled=false\n          \n          \n            \n            kieserver.scenariosimulation.enabled=false\n          \n          \n            \n            kieserver.jbpm.enabled=true\n          \n          \n            \n            kieserver.kafka.enabled=true\n          \n      \n    \n    \n  \n\nso we don't need the rest of the properties.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540062899", "createdAt": "2020-12-10T10:42:34Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/resources/application-kafka.properties", "diffHunk": "@@ -0,0 +1,19 @@\n+#\n+# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties\n+#\n+#server configuration\n+server.port=8090\n+\n+kieserver.jbpm.enabled=true\n+kieserver.jbpmui.enabled=true\n+kieserver.kafka.enabled=true\n+kieserver.drools.enabled=false\n+kieserver.dmn.enabled=false\n+kieserver.optaplanner.enabled=false\n+kieserver.prometheus.enabled=false\n+kieserver.casemgmt.enabled=false\n+kieserver.scenariosimulation.enabled=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2NDIyMg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543764222", "createdAt": "2020-12-15T23:32:52Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/resources/application-kafka.properties", "diffHunk": "@@ -0,0 +1,19 @@\n+#\n+# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties\n+#\n+#server configuration\n+server.port=8090\n+\n+kieserver.jbpm.enabled=true\n+kieserver.jbpmui.enabled=true\n+kieserver.kafka.enabled=true\n+kieserver.drools.enabled=false\n+kieserver.dmn.enabled=false\n+kieserver.optaplanner.enabled=false\n+kieserver.prometheus.enabled=false\n+kieserver.casemgmt.enabled=false\n+kieserver.scenariosimulation.enabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2Mjg5OQ=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI0NjQzOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NDozNVrOIDDUdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzozMzozOFrOIGkv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MTAyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        fail(\"Exception when createTopics: \" + e.getMessage());\n          \n          \n            \n                        fail(\"Exception when creating topics: \" + e.getMessage());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540071028", "createdAt": "2020-12-10T10:54:35Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2NDQ2Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543764467", "createdAt": "2020-12-15T23:33:38Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MTAyOA=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI2MDM3OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NzozMFrOIDDcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzozNjowM1rOIGkz5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MzAzMw==", "bodyText": "Maybe it's worth making this class abstract as it seems we need an actual implementation of this class as some of the config members are relaying on the extended classes. - wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540073033", "createdAt": "2020-12-10T10:57:30Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2NTQ3OQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543765479", "createdAt": "2020-12-15T23:36:03Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MzAzMw=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI4MzgzOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTowMjo0NFrOIDDpvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzozNzowMFrOIGk1tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjQ3OA==", "bodyText": "You can use method reference\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                stream().map(s -> s.groupId()).collect(Collectors.toList());\n          \n          \n            \n                                stream().map(ConsumerGroupListing::groupId).collect(toList());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540076478", "createdAt": "2020-12-10T11:02:44Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected void waitForConsumerGroupToBeReady() {\n+        await().atMost(3, SECONDS).pollDelay(1, SECONDS).until(() -> !listConsumerGroups().isEmpty());\n+    }\n+    \n+    protected List<String> listConsumerGroups() {\n+        List<String> consumerGroups = new ArrayList<>();\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            consumerGroups = adminClient.listConsumerGroups().all().get().\n+                    stream().map(s -> s.groupId()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2NTk0MA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543765940", "createdAt": "2020-12-15T23:37:00Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected void waitForConsumerGroupToBeReady() {\n+        await().atMost(3, SECONDS).pollDelay(1, SECONDS).until(() -> !listConsumerGroups().isEmpty());\n+    }\n+    \n+    protected List<String> listConsumerGroups() {\n+        List<String> consumerGroups = new ArrayList<>();\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            consumerGroups = adminClient.listConsumerGroups().all().get().\n+                    stream().map(s -> s.groupId()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjQ3OA=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTMxMDMwOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTowOTowM1rOIDD5DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzozOTozM1rOIGk5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4MDM5Nw==", "bodyText": "it might be worth clearing out the props\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    }\n          \n          \n            \n                    props.clear();\n          \n      \n    \n    \n  \n\nNot sure about the topics in case they're already created. Should we try to remove them at this point?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540080397", "createdAt": "2020-12-10T11:09:03Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2NzAzNg==", "bodyText": "topics and props are used just once (before class), and kafka testcontainer is disposed after class", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543767036", "createdAt": "2020-12-15T23:39:33Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4MDM5Nw=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTMyOTY0OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxMzoyMFrOIDED2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo0Mzo1NFrOIGlBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4MzE2MA==", "bodyText": "maybe we can take advantage of the props member of the class to add the different properties? wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540083160", "createdAt": "2020-12-10T11:13:20Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected void waitForConsumerGroupToBeReady() {\n+        await().atMost(3, SECONDS).pollDelay(1, SECONDS).until(() -> !listConsumerGroups().isEmpty());\n+    }\n+    \n+    protected List<String> listConsumerGroups() {\n+        List<String> consumerGroups = new ArrayList<>();\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            consumerGroups = adminClient.listConsumerGroups().all().get().\n+                    stream().map(s -> s.groupId()).collect(Collectors.toList());\n+        } catch (InterruptedException | ExecutionException e) {\n+            fail(\"Exception when listConsumerGroups: \" + e.getMessage());\n+        }\n+        return consumerGroups;\n+    }\n+    \n+    protected Properties producerProps(String bootstrapServer, boolean transactional) {\n+        Properties producerProperties = new Properties();\n+        producerProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2ODg0OA==", "bodyText": "not sure, attribute props is for admin tasks (like create topics) and here they're specific for the producer. I'd prefer to keep them isolated", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543768848", "createdAt": "2020-12-15T23:43:54Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected void waitForConsumerGroupToBeReady() {\n+        await().atMost(3, SECONDS).pollDelay(1, SECONDS).until(() -> !listConsumerGroups().isEmpty());\n+    }\n+    \n+    protected List<String> listConsumerGroups() {\n+        List<String> consumerGroups = new ArrayList<>();\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            consumerGroups = adminClient.listConsumerGroups().all().get().\n+                    stream().map(s -> s.groupId()).collect(Collectors.toList());\n+        } catch (InterruptedException | ExecutionException e) {\n+            fail(\"Exception when listConsumerGroups: \" + e.getMessage());\n+        }\n+        return consumerGroups;\n+    }\n+    \n+    protected Properties producerProps(String bootstrapServer, boolean transactional) {\n+        Properties producerProperties = new Properties();\n+        producerProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4MzE2MA=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTM1MDUwOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxODowNVrOIDEPow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo0MDoyOFrOIGk7oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NjE3OQ==", "bodyText": "Maybe some more meaningful name?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {\n          \n          \n            \n                protected Optional<ILoggingEvent> getErrorLog(ListAppender<ILoggingEvent> listAppender) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540086179", "createdAt": "2020-12-10T11:18:05Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected void waitForConsumerGroupToBeReady() {\n+        await().atMost(3, SECONDS).pollDelay(1, SECONDS).until(() -> !listConsumerGroups().isEmpty());\n+    }\n+    \n+    protected List<String> listConsumerGroups() {\n+        List<String> consumerGroups = new ArrayList<>();\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            consumerGroups = adminClient.listConsumerGroups().all().get().\n+                    stream().map(s -> s.groupId()).collect(Collectors.toList());\n+        } catch (InterruptedException | ExecutionException e) {\n+            fail(\"Exception when listConsumerGroups: \" + e.getMessage());\n+        }\n+        return consumerGroups;\n+    }\n+    \n+    protected Properties producerProps(String bootstrapServer, boolean transactional) {\n+        Properties producerProperties = new Properties();\n+        producerProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);\n+        producerProperties.put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        producerProperties.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n+        if (transactional) {\n+            producerProperties.put(TRANSACTIONAL_ID_CONFIG, \"my-transactional-id\");\n+        }\n+            \n+        return producerProperties;\n+    }\n+    \n+    protected ListAppender<ILoggingEvent> addLogAppender() {\n+        Logger logger = (Logger) LoggerFactory.getLogger(KafkaServerExtension.class);\n+        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();\n+        listAppender.start();\n+        logger.addAppender(listAppender);\n+        return listAppender;\n+    }\n+    \n+    protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2NzQ1Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543767457", "createdAt": "2020-12-15T23:40:28Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.kie.server.services.jbpm.kafka.KafkaServerExtension;\n+import org.kie.server.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0.Final\";\n+    \n+    protected static final String SIGNALLING_PROJECT = \"signalling-project\";\n+    protected static final String START_SIGNAL_PROCESS_ID = \"StartSignalProcess\";\n+    protected static final String START_MESSAGE_PROCESS_ID = \"StartMessageProcess\";\n+    protected static final String START_MESSAGE_POJO_PROCESS_ID = \"StartMessagePojoProcess\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO_PROCESS_ID = \"StartMessageComplexPojoProcess\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID = \"StartMessagePojoClassNotFoundProcess\";\n+    protected static final String BOUNDARY_SIGNAL_PROCESS_ID = \"BoundarySignalProcess\";\n+    protected static final String BOUNDARY_MESSAGE_PROCESS_ID = \"BoundaryMessageProcess\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID = \"IntermediateCatchEventSignal\";\n+    protected static final String INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID = \"IntermediateCatchEventMessage\";\n+    protected static final String SUBPROCESS_SIGNAL_PROCESS_ID = \"SubprocessSignalProcess\";\n+    protected static final String SUBPROCESS_MESSAGE_PROCESS_ID = \"SubprocessMessageProcess\";\n+\n+    protected static final String BOUNDARY_SIGNAL = \"boundarySignal\";\n+    protected static final String BOUNDARY_MESSAGE = \"boundaryMessage\";\n+    protected static final String START_SIGNAL = \"startSignal\";\n+    protected static final String START_MESSAGE = \"startMessage\";\n+    protected static final String START_MESSAGE_POJO = \"startMessagePojo\";\n+    protected static final String START_MESSAGE_COMPLEX_POJO = \"startMessageComplexPojo\";\n+    protected static final String START_MESSAGE_POJO_CLASS_NOT_FOUND = \"startMessagePojoClassNotFound\";\n+    \n+    protected static final String INTERMEDIATE_SIGNAL = \"intermediateSignal\";\n+    protected static final String INTERMEDIATE_MESSAGE = \"intermediateMessage\";\n+    protected static final String SUBPROCESS_SIGNAL = \"subprocessSignal\";\n+    protected static final String SUBPROCESS_MESSAGE = \"subprocessMessage\";\n+\n+    protected static final String SUBPROCESS_SCRIPT_NODE = \"sub-script\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    protected static Properties props = new Properties();\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(BOUNDARY_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(BOUNDARY_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_COMPLEX_POJO, 1, (short) 1),\n+                                                   new NewTopic(START_MESSAGE_POJO_CLASS_NOT_FOUND, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(INTERMEDIATE_MESSAGE, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_SIGNAL, 1, (short) 1),\n+                                                   new NewTopic(SUBPROCESS_MESSAGE, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH + artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        waitForConsumerGroupToBeReady();\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected void waitForConsumerGroupToBeReady() {\n+        await().atMost(3, SECONDS).pollDelay(1, SECONDS).until(() -> !listConsumerGroups().isEmpty());\n+    }\n+    \n+    protected List<String> listConsumerGroups() {\n+        List<String> consumerGroups = new ArrayList<>();\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            consumerGroups = adminClient.listConsumerGroups().all().get().\n+                    stream().map(s -> s.groupId()).collect(Collectors.toList());\n+        } catch (InterruptedException | ExecutionException e) {\n+            fail(\"Exception when listConsumerGroups: \" + e.getMessage());\n+        }\n+        return consumerGroups;\n+    }\n+    \n+    protected Properties producerProps(String bootstrapServer, boolean transactional) {\n+        Properties producerProperties = new Properties();\n+        producerProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);\n+        producerProperties.put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        producerProperties.put(VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n+        if (transactional) {\n+            producerProperties.put(TRANSACTIONAL_ID_CONFIG, \"my-transactional-id\");\n+        }\n+            \n+        return producerProperties;\n+    }\n+    \n+    protected ListAppender<ILoggingEvent> addLogAppender() {\n+        Logger logger = (Logger) LoggerFactory.getLogger(KafkaServerExtension.class);\n+        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();\n+        listAppender.start();\n+        logger.addAppender(listAppender);\n+        return listAppender;\n+    }\n+    \n+    protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NjE3OQ=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTM5MDM2OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToyNzoyNVrOIDEmqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToyNzoyNVrOIDEmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5MjA3NQ==", "bodyText": "Missing RH header/copyright", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540092075", "createdAt": "2020-12-10T11:27:25Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaExtensionTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.kie.server.springboot.samples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTQ0MDE4OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTozOTo0MFrOIDFDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo0NDoyN1rOIGlB6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5OTQ0MQ==", "bodyText": "not used - please remove", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540099441", "createdAt": "2020-12-10T11:39:40Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2OTA2Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543769066", "createdAt": "2020-12-15T23:44:27Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5OTQ0MQ=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTQ1NzQ1OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTo0NDowMlrOIDFNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo0NDo1NVrOIGlCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwMTk5MA==", "bodyText": "No checked exception is thrown\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setup() throws Exception {\n          \n          \n            \n                public void setup() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540101990", "createdAt": "2020-12-10T11:44:02Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2OTI4NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543769285", "createdAt": "2020-12-15T23:44:55Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwMTk5MA=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTU0NDYyOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowNTowMFrOIDF_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo0OTo1MFrOIGlKqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNDc0NA==", "bodyText": "maybe it's worth checking the number of ids is 1?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540114744", "createdAt": "2020-12-10T12:05:00Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTMwNg==", "bodyText": "done, changed in other places too", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543771306", "createdAt": "2020-12-15T23:49:50Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNDc0NA=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTU0OTY4OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowNjoxNVrOIDGCGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1MDozNFrOIGlLyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNTQ4MQ==", "bodyText": "should we not check that the process is actually aborted? - maybe it's not worth for the test case, just in case the instances are not getting aborted properly to avoid any potential issues afterwards", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540115481", "createdAt": "2020-12-10T12:06:15Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTU5NA==", "bodyText": "it's checked that the state is active", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543771594", "createdAt": "2020-12-15T23:50:34Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNTQ4MQ=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTU2NDA3OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowOTo0N1rOIDGKhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1MDo0OFrOIGlMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNzYzNg==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540117636", "createdAt": "2020-12-10T12:09:47Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MTcxNw==", "bodyText": "same", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543771717", "createdAt": "2020-12-15T23:50:48Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExNzYzNg=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjU1NDk2OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozNDo1MlrOIDPRbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1MjozMFrOIGlPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2Njg2Mw==", "bodyText": "just curious - why 4 signals?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540266863", "createdAt": "2020-12-10T15:34:52Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MjU3Mg==", "bodyText": "no special reason, just testing the subprocess can be launched N times", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543772572", "createdAt": "2020-12-15T23:52:30Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2Njg2Mw=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjU3ODU1OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozOToxMFrOIDPfig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozOToxMFrOIDPfig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3MDQ3NA==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540270474", "createdAt": "2020-12-10T15:39:10Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjU4NjUxOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo0MDozNlrOIDPkTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1MzoxN1rOIGlQ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3MTY5Mg==", "bodyText": "maybe we can startup just a few less processes instead of 20? Just wondering in case 10secs is not enough for starting up 20 processes sequentially, just in case - wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540271692", "createdAt": "2020-12-10T15:40:36Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MjkxNQ==", "bodyText": "decreased to 5", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543772915", "createdAt": "2020-12-15T23:53:17Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3MTY5Mg=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjU4ODY0OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo0MDo1OVrOIDPliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo0MDo1OVrOIDPliw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3MjAxMQ==", "bodyText": "same as before", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540272011", "createdAt": "2020-12-10T15:40:59Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single signal for the all processes\n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessageMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTgwMDA5OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzoxNzozNlrOIDsDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1NDoxNFrOIGlScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczODQxNg==", "bodyText": "you could use method reference\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    map.put(topic, filenames.stream().map(x -> readData(x)).collect(Collectors.toList()));\n          \n          \n            \n                    map.put(topic, filenames.stream().map(this::readData).collect(Collectors.toList()));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540738416", "createdAt": "2020-12-11T07:17:36Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single signal for the all processes\n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessageMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single message for the all processes\n+        //Notice that message is for peer-to-peer communication, but here it works like a signal (broadcast)\n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojo() throws InterruptedException {\n+        startMessagePojoParam(MONEY_DATA_EVENT, AMOUNT_294, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_AMOUNT_EVENT, null, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_CURRENCY_EVENT, AMOUNT_294, null);\n+        startMessagePojoParam(MONEY_DATA_NULL_BOTH_EVENT, null, null);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessageComplexPojo() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_COMPLEX_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_COMPLEX_POJO, REIMBURSEMENT_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        Map<String, Object> map = getVariableMap(pid, \"assignedReimbursement\");\n+        \n+        assertEquals(2, ((List<?>)map.get(\"expenses\")).size());\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignalsTransactional() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 4);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_SIGNAL, \n+                Arrays.asList(USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(4, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagesTransactionalMalformedEvents() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 2);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_MESSAGE, \n+                Arrays.asList(MALFORMED_EVENT, USELESS_DATA_EVENT, MALFORMED_EVENT,\n+                USELESS_DATA_EVENT, MALFORMED_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(2, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testStartSignalsAndMessagesTransactional() throws InterruptedException {\n+        int numOfEvents = 12;\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, numOfEvents*2);\n+        \n+        List<String> events = new ArrayList<>();\n+        \n+        for (int i=0; i<numOfEvents; i++) {\n+            events.add(USELESS_DATA_EVENT);\n+        }\n+        \n+        Map<String, List<String>> map = createTopicEventsMap(START_SIGNAL, events);\n+        \n+        map.putAll(createTopicEventsMap(START_MESSAGE, events));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(numOfEvents*2, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoMismatchedInput() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, USELESS_DATA_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, MismatchedInputException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoMalformedData() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, MALFORMED_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, JsonEOFException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoWrongType() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, MONEY_DATA_WRONG_TYPE_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, InvalidFormatException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoClassNotFound() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO_CLASS_NOT_FOUND, MONEY_DATA_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, ClassNotFoundException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessageParseException() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, MONEY_DATA_WRONG_DATE_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, ParseException.class);\n+    }\n+\n+    public void startMessagePojoParam(String dataFile, String amount, String currency) throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, dataFile);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertAssignedMoney(pid, amount, currency);\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    protected void assertExceptionInLogs(ListAppender<ILoggingEvent> listAppender, Class<?> clazz) throws InterruptedException {\n+        countDownListener.getCountDown().await(2, TimeUnit.SECONDS);\n+        \n+        Optional<ILoggingEvent> logEvent = getLog(listAppender);\n+        assertEquals(clazz.getCanonicalName(), logEvent.get().getThrowableProxy().getClassName());\n+        \n+        assertEquals(0, countDownListener.getIds().size());\n+    }\n+\n+    protected Long startAndAssertProcess(String processId) {\n+        Long pid1 = processService.startProcess(deploymentId, processId);\n+        assertNotNull(pid1);\n+        assertTrue(pid1 > 0);\n+        return pid1;\n+    }\n+    \n+    protected void autocompleteSingleTask() {\n+        List<TaskSummary> tasks =  runtimeDataService.getTasksAssignedAsPotentialOwner(\"john\", new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), \"john\", emptyMap());\n+    }\n+\n+    protected Long[] startAndAssertProcesses(String processId, int numOfProcesses) {\n+        Long[] pids = new Long[numOfProcesses];\n+        \n+        for (int i = 0; i < numOfProcesses; i++)\n+            pids[i] = startAndAssertProcess(processId);\n+        return pids;\n+    }\n+    \n+    protected void sendEvent(String topic, String filename) {\n+        sendRecord(topic, readData(filename));\n+    }\n+    \n+    protected Map<String, List<String>> createTopicEventsMap(String topic, List<String> filenames) {\n+        Map<String, List<String>> map = new HashMap<>();\n+        map.put(topic, filenames.stream().map(x -> readData(x)).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 497}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzI5OA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543773298", "createdAt": "2020-12-15T23:54:14Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single signal for the all processes\n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessageMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single message for the all processes\n+        //Notice that message is for peer-to-peer communication, but here it works like a signal (broadcast)\n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojo() throws InterruptedException {\n+        startMessagePojoParam(MONEY_DATA_EVENT, AMOUNT_294, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_AMOUNT_EVENT, null, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_CURRENCY_EVENT, AMOUNT_294, null);\n+        startMessagePojoParam(MONEY_DATA_NULL_BOTH_EVENT, null, null);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessageComplexPojo() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_COMPLEX_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_COMPLEX_POJO, REIMBURSEMENT_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        Map<String, Object> map = getVariableMap(pid, \"assignedReimbursement\");\n+        \n+        assertEquals(2, ((List<?>)map.get(\"expenses\")).size());\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignalsTransactional() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 4);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_SIGNAL, \n+                Arrays.asList(USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(4, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagesTransactionalMalformedEvents() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 2);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_MESSAGE, \n+                Arrays.asList(MALFORMED_EVENT, USELESS_DATA_EVENT, MALFORMED_EVENT,\n+                USELESS_DATA_EVENT, MALFORMED_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(2, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testStartSignalsAndMessagesTransactional() throws InterruptedException {\n+        int numOfEvents = 12;\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, numOfEvents*2);\n+        \n+        List<String> events = new ArrayList<>();\n+        \n+        for (int i=0; i<numOfEvents; i++) {\n+            events.add(USELESS_DATA_EVENT);\n+        }\n+        \n+        Map<String, List<String>> map = createTopicEventsMap(START_SIGNAL, events);\n+        \n+        map.putAll(createTopicEventsMap(START_MESSAGE, events));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(numOfEvents*2, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoMismatchedInput() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, USELESS_DATA_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, MismatchedInputException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoMalformedData() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, MALFORMED_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, JsonEOFException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoWrongType() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, MONEY_DATA_WRONG_TYPE_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, InvalidFormatException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojoClassNotFound() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_CLASS_NOT_FOUND_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO_CLASS_NOT_FOUND, MONEY_DATA_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, ClassNotFoundException.class);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessageParseException() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, MONEY_DATA_WRONG_DATE_EVENT);\n+        \n+        assertExceptionInLogs(listAppender, ParseException.class);\n+    }\n+\n+    public void startMessagePojoParam(String dataFile, String amount, String currency) throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_POJO, dataFile);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertAssignedMoney(pid, amount, currency);\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    protected void assertExceptionInLogs(ListAppender<ILoggingEvent> listAppender, Class<?> clazz) throws InterruptedException {\n+        countDownListener.getCountDown().await(2, TimeUnit.SECONDS);\n+        \n+        Optional<ILoggingEvent> logEvent = getLog(listAppender);\n+        assertEquals(clazz.getCanonicalName(), logEvent.get().getThrowableProxy().getClassName());\n+        \n+        assertEquals(0, countDownListener.getIds().size());\n+    }\n+\n+    protected Long startAndAssertProcess(String processId) {\n+        Long pid1 = processService.startProcess(deploymentId, processId);\n+        assertNotNull(pid1);\n+        assertTrue(pid1 > 0);\n+        return pid1;\n+    }\n+    \n+    protected void autocompleteSingleTask() {\n+        List<TaskSummary> tasks =  runtimeDataService.getTasksAssignedAsPotentialOwner(\"john\", new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), \"john\", emptyMap());\n+    }\n+\n+    protected Long[] startAndAssertProcesses(String processId, int numOfProcesses) {\n+        Long[] pids = new Long[numOfProcesses];\n+        \n+        for (int i = 0; i < numOfProcesses; i++)\n+            pids[i] = startAndAssertProcess(processId);\n+        return pids;\n+    }\n+    \n+    protected void sendEvent(String topic, String filename) {\n+        sendRecord(topic, readData(filename));\n+    }\n+    \n+    protected Map<String, List<String>> createTopicEventsMap(String topic, List<String> filenames) {\n+        Map<String, List<String>> map = new HashMap<>();\n+        map.put(topic, filenames.stream().map(x -> readData(x)).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczODQxNg=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 497}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjE2MjAwOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo1OToxNlrOIDvNFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzo1Njo0MFrOIGlWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5MDAzNw==", "bodyText": "As mentioned before, maybe we can decrease the number of events to send, and thus reduce the timeout as well - don't know, wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540790037", "createdAt": "2020-12-11T08:59:16Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single signal for the all processes\n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessageMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single message for the all processes\n+        //Notice that message is for peer-to-peer communication, but here it works like a signal (broadcast)\n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojo() throws InterruptedException {\n+        startMessagePojoParam(MONEY_DATA_EVENT, AMOUNT_294, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_AMOUNT_EVENT, null, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_CURRENCY_EVENT, AMOUNT_294, null);\n+        startMessagePojoParam(MONEY_DATA_NULL_BOTH_EVENT, null, null);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessageComplexPojo() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_COMPLEX_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_COMPLEX_POJO, REIMBURSEMENT_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        Map<String, Object> map = getVariableMap(pid, \"assignedReimbursement\");\n+        \n+        assertEquals(2, ((List<?>)map.get(\"expenses\")).size());\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignalsTransactional() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 4);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_SIGNAL, \n+                Arrays.asList(USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(4, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagesTransactionalMalformedEvents() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 2);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_MESSAGE, \n+                Arrays.asList(MALFORMED_EVENT, USELESS_DATA_EVENT, MALFORMED_EVENT,\n+                USELESS_DATA_EVENT, MALFORMED_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(2, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testStartSignalsAndMessagesTransactional() throws InterruptedException {\n+        int numOfEvents = 12;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDI2OA==", "bodyText": "the idea is to check that engine can process several messages received in a single transaction", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543774268", "createdAt": "2020-12-15T23:56:40Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/KafkaConsumerHappyPathTest.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyMap;\n+import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.IOUtils;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.kie.server.springboot.samples.listeners.CountDownLatchEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import com.fasterxml.jackson.core.io.JsonEOFException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-kafka.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaConsumerHappyPathTest extends KafkaFixture {\n+    \n+    private static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n+    private static final String USELESS_DATA_EVENT = \"useless-data-event.json\";\n+    private static final String MALFORMED_EVENT = \"malformed-event.json\";\n+    private static final String MONEY_DATA_EVENT = \"money-data-event.json\";\n+    private static final String MONEY_DATA_NULL_AMOUNT_EVENT = \"money-data-null-amount-event.json\";\n+    private static final String MONEY_DATA_NULL_CURRENCY_EVENT = \"money-data-null-currency-event.json\";\n+    private static final String MONEY_DATA_NULL_BOTH_EVENT = \"money-data-null-both-event.json\";\n+    private static final String MONEY_DATA_WRONG_TYPE_EVENT = \"money-data-wrong-type-event.json\";\n+    private static final String MONEY_DATA_WRONG_DATE_EVENT = \"money-data-wrong-date-event.json\";\n+    private static final String REIMBURSEMENT_DATA_EVENT = \"reimbursement-data-event.json\";\n+\n+    private static final String CURRENCY_EUR = \"EUR\";\n+\n+    private static final String AMOUNT_294 = \"294\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerHappyPathTest.class);\n+\n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Rule\n+    public TestRule watcher = new TestWatcher() {\n+       protected void starting(Description description) {\n+          logger.info(\">>> Starting test: \" + description.getMethodName());\n+       }\n+    };\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    @Autowired\n+    protected CountDownLatchEventListener countDownListener;\n+    \n+    protected String deploymentId;\n+    \n+    protected ListAppender<ILoggingEvent> listAppender;\n+    \n+    @BeforeClass\n+    public static void beforeClass() {\n+        //for the transactional tests\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR\", \"1\");\n+        kafka.addEnv(\"KAFKA_TRANSACTION_STATE_LOG_MIN_ISR\", \"1\");\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        \n+        System.setProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        System.setProperty(KAFKA_EXTENSION_PREFIX+\"signals.mapping\", \"AUTO\");\n+        generalSetup();\n+    }\n+    \n+    \n+    @Before\n+    public void setup() throws Exception {\n+        deploymentId = setup(deploymentService, SIGNALLING_PROJECT);\n+        listAppender = addLogAppender();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(KAFKA_EXTENSION_PREFIX+BOOTSTRAP_SERVERS_CONFIG);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignal() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(START_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessage() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        assertThat(processService.getProcessInstance(deploymentId, pid).getState(), is(STATE_ACTIVE));\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignal() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessage() throws InterruptedException {\n+        Long processInstanceId = startAndAssertProcess(BOUNDARY_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, 1);\n+        \n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventSignal() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_SIGNAL_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_SIGNAL, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testIntermediateCatchEventMessage() throws Exception {\n+        Long processInstanceId = startAndAssertProcess(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configure(INTERMEDIATE_CATCH_EVENT_MESSAGE_PROCESS_ID, 1);\n+        \n+        autocompleteSingleTask();\n+        \n+        sendEvent(INTERMEDIATE_MESSAGE, USELESS_DATA_EVENT);\n+        countDownListener.getCountDown().await();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessSignal() throws Exception {\n+        int numOfSignals = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_SIGNAL_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_SIGNAL_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfSignals);\n+        \n+        for(int i = 0; i < numOfSignals; i++)\n+            sendEvent(SUBPROCESS_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testSubprocessMessage() throws Exception {\n+        int numOfMessages = 4;\n+        Long processInstanceId = startAndAssertProcess(SUBPROCESS_MESSAGE_PROCESS_ID);\n+        \n+        countDownListener.configureNode(SUBPROCESS_MESSAGE_PROCESS_ID, SUBPROCESS_SCRIPT_NODE, numOfMessages);\n+        \n+        for(int i = 0; i < numOfMessages; i++)\n+            sendEvent(SUBPROCESS_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        autocompleteSingleTask();\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundarySignalMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_SIGNAL_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single signal for the all processes\n+        sendEvent(BOUNDARY_SIGNAL, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testBoundaryMessageMultipleProcesses() throws InterruptedException {\n+        int numOfProcesses = 20;\n+        \n+        Long[] pids = startAndAssertProcesses(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        countDownListener.configure(BOUNDARY_MESSAGE_PROCESS_ID, numOfProcesses);\n+        \n+        //Just a single message for the all processes\n+        //Notice that message is for peer-to-peer communication, but here it works like a signal (broadcast)\n+        sendEvent(BOUNDARY_MESSAGE, USELESS_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        assertNullProcesses(numOfProcesses, pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagePojo() throws InterruptedException {\n+        startMessagePojoParam(MONEY_DATA_EVENT, AMOUNT_294, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_AMOUNT_EVENT, null, CURRENCY_EUR);\n+        startMessagePojoParam(MONEY_DATA_NULL_CURRENCY_EVENT, AMOUNT_294, null);\n+        startMessagePojoParam(MONEY_DATA_NULL_BOTH_EVENT, null, null);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessageComplexPojo() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_COMPLEX_POJO_PROCESS_ID, 1);\n+        \n+        sendEvent(START_MESSAGE_COMPLEX_POJO, REIMBURSEMENT_DATA_EVENT);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        Long pid = countDownListener.getIds().get(0);\n+        Map<String, Object> map = getVariableMap(pid, \"assignedReimbursement\");\n+        \n+        assertEquals(2, ((List<?>)map.get(\"expenses\")).size());\n+        \n+        processService.abortProcessInstance(pid);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartSignalsTransactional() throws InterruptedException {\n+        countDownListener.configure(START_SIGNAL_PROCESS_ID, 4);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_SIGNAL, \n+                Arrays.asList(USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT, USELESS_DATA_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(4, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 10000)\n+    public void testStartMessagesTransactionalMalformedEvents() throws InterruptedException {\n+        countDownListener.configure(START_MESSAGE_PROCESS_ID, 2);\n+        \n+        Map<String, List<String>> map =createTopicEventsMap(START_MESSAGE, \n+                Arrays.asList(MALFORMED_EVENT, USELESS_DATA_EVENT, MALFORMED_EVENT,\n+                USELESS_DATA_EVENT, MALFORMED_EVENT));\n+        \n+        sendTransactionalRecords(map);\n+        \n+        countDownListener.getCountDown().await();\n+        \n+        List<Long> pids = countDownListener.getIds();\n+        assertEquals(2, pids.size());\n+        \n+        assertActiveProcessesAndAbort(pids);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testStartSignalsAndMessagesTransactional() throws InterruptedException {\n+        int numOfEvents = 12;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5MDAzNw=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 380}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIyMzE0OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxNDoxNlrOIDvwTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzozNzowMlrOIG3t6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5OTA1NQ==", "bodyText": "I believe, this was required to avoid some kind of issues with testcontainers or the kafka broker, but not sure. Can you please clarify? thanks!", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r540799055", "createdAt": "2020-12-11T09:14:16Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/pom.xml", "diffHunk": "@@ -133,6 +143,13 @@\n             </execution>\n           </executions>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-surefire-plugin</artifactId>\n+          <configuration>\n+            <reuseForks>false</reuseForks>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NTcwNA==", "bodyText": "reuseForks false executes each test class in its own JVM process (if not, clashes with other tests). According to the documentation, it creates the highest level of separation for the test execution", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r543775704", "createdAt": "2020-12-16T00:00:17Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/pom.xml", "diffHunk": "@@ -133,6 +143,13 @@\n             </execution>\n           </executions>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-surefire-plugin</artifactId>\n+          <configuration>\n+            <reuseForks>false</reuseForks>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5OTA1NQ=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NTI0MA==", "bodyText": "I know, I was wondering if there was any other particular reason for doing this specially in kafka tests? Maybe it was because of some issue when using kafka broker put in place by testcontainer? just curious.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r544075240", "createdAt": "2020-12-16T07:37:02Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/pom.xml", "diffHunk": "@@ -133,6 +143,13 @@\n             </execution>\n           </executions>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-surefire-plugin</artifactId>\n+          <configuration>\n+            <reuseForks>false</reuseForks>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5OTA1NQ=="}, "originalCommit": {"oid": "ba25d64955bd2770e678ab47107d35d4ca6686c8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDkyMzYzOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/workitems/SendTaskWIH.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowNjozMVrOIHt-Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjoyMzoxMVrOIH9p9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NDEzMA==", "bodyText": "I think you can remove this System.out", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r544964130", "createdAt": "2020-12-17T10:06:31Z", "author": {"login": "fjtirado"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/workitems/SendTaskWIH.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.kie.server.springboot.samples.workitems;\n+\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+import org.springframework.stereotype.Component;\n+\n+@Component(\"Send Task\")\n+public class SendTaskWIH implements WorkItemHandler {\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        System.out.println(\"@@ params wih:\"+workItem.getParameters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7135642bbdbd6ed9bd695fc460248f706686fd14"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMTExMQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2338#discussion_r545221111", "createdAt": "2020-12-17T16:23:11Z", "author": {"login": "gmunozfe"}, "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-sample/src/test/java/org/kie/server/springboot/samples/workitems/SendTaskWIH.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.kie.server.springboot.samples.workitems;\n+\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+import org.springframework.stereotype.Component;\n+\n+@Component(\"Send Task\")\n+public class SendTaskWIH implements WorkItemHandler {\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        System.out.println(\"@@ params wih:\"+workItem.getParameters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NDEzMA=="}, "originalCommit": {"oid": "7135642bbdbd6ed9bd695fc460248f706686fd14"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1892, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}