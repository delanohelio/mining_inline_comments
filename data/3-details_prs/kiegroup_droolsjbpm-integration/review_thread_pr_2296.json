{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NjE1MzA0", "number": 2296, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1ODo1MlrOEyRIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1ODo1MlrOEyRIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQ0OTI3OnYy", "diffSide": "RIGHT", "path": "kie-camel/src/test/java/org/kie/camel/embedded/camel/component/KieEmbeddedEndpointDMNTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1ODo1MlrOHoz2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoyMjozOFrOHo0zKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1NDYwNg==", "bodyText": "What about merge ToMapProcessor logic with ToDMNEvaluateAllCommandProcessor? Something like an additional optional parameter for the constructor to specify where to put the exchange body. If this value is not provided and the body is a Map we can use the whole object as input.\nWdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2296#discussion_r512554606", "createdAt": "2020-10-27T09:58:52Z", "author": {"login": "danielezonca"}, "path": "kie-camel/src/test/java/org/kie/camel/embedded/camel/component/KieEmbeddedEndpointDMNTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.camel.embedded.camel.component;\n+\n+import java.util.List;\n+\n+import javax.naming.Context;\n+import javax.naming.NamingException;\n+\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.model.ClaimCheckOperation;\n+import org.drools.compiler.kie.builder.impl.DrlProject;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.api.builder.Message;\n+import org.kie.api.io.KieResources;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.camel.embedded.dmn.DecisionsToHeadersProcessor;\n+import org.kie.camel.embedded.dmn.ToDMNEvaluateAllCommandProcessor;\n+import org.kie.camel.embedded.dmn.ToMapProcessor;\n+import org.kie.pipeline.camel.Person;\n+\n+public class KieEmbeddedEndpointDMNTest extends KieCamelTestSupport {\n+\n+    @Test\n+    public void testDMN() throws Exception {\n+        Person johnDoe = new Person(\"John Doe\", 47);\n+        Person alice = new Person(\"Alice\", 18);\n+        Person bob = new Person(\"Bob\", 17);\n+        Person charlie = new Person(\"Charlie\", 21);\n+\n+        MockEndpoint canDrink = getMockEndpoint(\"mock:canDrink\");\n+        canDrink.expectedMessageCount(3);\n+        canDrink.expectedBodiesReceived(johnDoe, alice, charlie);\n+\n+        MockEndpoint noDrink = getMockEndpoint(\"mock:noDrink\");\n+        noDrink.expectedMessageCount(1);\n+        noDrink.expectedBodiesReceived(bob);\n+\n+        template.requestBody(\"direct:start\", johnDoe);\n+        template.requestBody(\"direct:start\", alice);\n+        template.requestBody(\"direct:start\", bob);\n+        template.requestBody(\"direct:start\", charlie);\n+\n+        canDrink.assertIsSatisfied();\n+        noDrink.assertIsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        final Processor toMap = new ToMapProcessor(\"a person\");\n+        final Processor toDMNCommand = new ToDMNEvaluateAllCommandProcessor(\"https://kiegroup.org/dmn/_FD3D17D0-D23E-457E-B41A-380644F030A8\",\n+                                                                            \"Can Drink?\",\n+                                                                            \"dmnResult\");\n+        final Processor dmnToHeader = DecisionsToHeadersProcessor.builder(\"dmnResult\",\n+                                                                          \"canDrinkHeader\",\n+                                                                          \"Can Drink?\")\n+                                                                 .build();\n+\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(\"direct:start\").claimCheck(ClaimCheckOperation.Push)\n+                                    .process(toMap)\n+                                    .process(toDMNCommand)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420c2b97a723d3d558eb09e8de0107c21a79b641"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MDE1NA==", "bodyText": "I thought about that indeed, but at least in my experience Camel route is very similar to ETL, so you want the basic components/block to not do \"too much\" if possible.\nThis way:\n\nif the user want to collapse the two steps into one, can always do it since they are very trivial\nif the user has other steps or different steps, can compose the steps in the best fit: example, the user might be looking to transform the exchange into a Map as part of another ETL step.\n\nSo I see your point, but providing the basic steps and the basic version of the components, is the best approach in my limited Camel experience", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2296#discussion_r512570154", "createdAt": "2020-10-27T10:22:38Z", "author": {"login": "tarilabs"}, "path": "kie-camel/src/test/java/org/kie/camel/embedded/camel/component/KieEmbeddedEndpointDMNTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.camel.embedded.camel.component;\n+\n+import java.util.List;\n+\n+import javax.naming.Context;\n+import javax.naming.NamingException;\n+\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.model.ClaimCheckOperation;\n+import org.drools.compiler.kie.builder.impl.DrlProject;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.api.builder.Message;\n+import org.kie.api.io.KieResources;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.camel.embedded.dmn.DecisionsToHeadersProcessor;\n+import org.kie.camel.embedded.dmn.ToDMNEvaluateAllCommandProcessor;\n+import org.kie.camel.embedded.dmn.ToMapProcessor;\n+import org.kie.pipeline.camel.Person;\n+\n+public class KieEmbeddedEndpointDMNTest extends KieCamelTestSupport {\n+\n+    @Test\n+    public void testDMN() throws Exception {\n+        Person johnDoe = new Person(\"John Doe\", 47);\n+        Person alice = new Person(\"Alice\", 18);\n+        Person bob = new Person(\"Bob\", 17);\n+        Person charlie = new Person(\"Charlie\", 21);\n+\n+        MockEndpoint canDrink = getMockEndpoint(\"mock:canDrink\");\n+        canDrink.expectedMessageCount(3);\n+        canDrink.expectedBodiesReceived(johnDoe, alice, charlie);\n+\n+        MockEndpoint noDrink = getMockEndpoint(\"mock:noDrink\");\n+        noDrink.expectedMessageCount(1);\n+        noDrink.expectedBodiesReceived(bob);\n+\n+        template.requestBody(\"direct:start\", johnDoe);\n+        template.requestBody(\"direct:start\", alice);\n+        template.requestBody(\"direct:start\", bob);\n+        template.requestBody(\"direct:start\", charlie);\n+\n+        canDrink.assertIsSatisfied();\n+        noDrink.assertIsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        final Processor toMap = new ToMapProcessor(\"a person\");\n+        final Processor toDMNCommand = new ToDMNEvaluateAllCommandProcessor(\"https://kiegroup.org/dmn/_FD3D17D0-D23E-457E-B41A-380644F030A8\",\n+                                                                            \"Can Drink?\",\n+                                                                            \"dmnResult\");\n+        final Processor dmnToHeader = DecisionsToHeadersProcessor.builder(\"dmnResult\",\n+                                                                          \"canDrinkHeader\",\n+                                                                          \"Can Drink?\")\n+                                                                 .build();\n+\n+        return new RouteBuilder() {\n+            public void configure() throws Exception {\n+                from(\"direct:start\").claimCheck(ClaimCheckOperation.Push)\n+                                    .process(toMap)\n+                                    .process(toDMNCommand)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1NDYwNg=="}, "originalCommit": {"oid": "420c2b97a723d3d558eb09e8de0107c21a79b641"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1981, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}