{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MjMxNzQx", "number": 2193, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyMjoxN1rOEZWGEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyMjoxN1rOEZWGEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDExODU3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/AbstractKieServicesClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyMjoxN1rOHCGmuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDowNDo0OFrOHI3u7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2NzQxOQ==", "bodyText": "@bxf12315 This first part of the method is repeated many times, I guess if we can create a private method with this and call if from makeHttpGetRequestAndCreateCustomResponse, makeHttpGetRequestAndCreateCustomResponseWithHandleNotFound and makeHttpGetRequestAndCreateRawResponse. WDYT?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2193#discussion_r471967419", "createdAt": "2020-08-18T07:22:17Z", "author": {"login": "nmirasch"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/AbstractKieServicesClientImpl.java", "diffHunk": "@@ -210,6 +210,27 @@ public KieServerHttpRequest doOperation(String url) {\n         }\n     }\n \n+    protected <T> T makeHttpGetRequestAndCreateCustomResponseWithHandleNotFound(String uri, Class<T> resultType) {\n+        logger.debug(\"About to send GET request to '{}'\", uri);\n+        KieServerHttpRequest request = invoke(uri, new RemoteHttpOperation() {\n+            @Override\n+            public KieServerHttpRequest doOperation(String url) {\n+                return newRequest(url).get();\n+            }\n+        });\n+        KieServerHttpResponse response = request.response();\n+\n+        owner.setConversationId(response.header(KieServerConstants.KIE_CONVERSATION_ID_TYPE_HEADER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32aff15019546dd889fadcaa2cdec8e5cea5242b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2Mzc5MQ==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2193#discussion_r479063791", "createdAt": "2020-08-28T10:04:48Z", "author": {"login": "bxf12315"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/AbstractKieServicesClientImpl.java", "diffHunk": "@@ -210,6 +210,27 @@ public KieServerHttpRequest doOperation(String url) {\n         }\n     }\n \n+    protected <T> T makeHttpGetRequestAndCreateCustomResponseWithHandleNotFound(String uri, Class<T> resultType) {\n+        logger.debug(\"About to send GET request to '{}'\", uri);\n+        KieServerHttpRequest request = invoke(uri, new RemoteHttpOperation() {\n+            @Override\n+            public KieServerHttpRequest doOperation(String url) {\n+                return newRequest(url).get();\n+            }\n+        });\n+        KieServerHttpResponse response = request.response();\n+\n+        owner.setConversationId(response.header(KieServerConstants.KIE_CONVERSATION_ID_TYPE_HEADER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2NzQxOQ=="}, "originalCommit": {"oid": "32aff15019546dd889fadcaa2cdec8e5cea5242b"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2069, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}