{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NzE5NzAz", "number": 2262, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNDo0NlrOExHoIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxODoyNFrOExJQ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQwNjQxOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNDo0NlrOHnFPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNjo1M1rOHpi_dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjMxOQ==", "bodyText": "Should we not unmarshall eventPayload object based on the type parameter? otherwise these 2 parameters are not really used in the method.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510742319", "createdAt": "2020-10-23T09:04:46Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "diffHunk": "@@ -230,6 +231,29 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n \n     }\n \n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      String correlationKey,\n+                                                      String signalName,\n+                                                      String eventPayload,\n+                                                      String type) {\n+\n+        String[] correlationProperties = correlationKey.split(\":\");\n+        CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n+\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjk2Ng==", "bodyText": "This is the parameter convention used by JMS protocol so it is not possible to remove it. It has to be this way. (it is used by reflection)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513326966", "createdAt": "2020-10-28T10:16:53Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "diffHunk": "@@ -230,6 +231,29 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n \n     }\n \n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      String correlationKey,\n+                                                      String signalName,\n+                                                      String eventPayload,\n+                                                      String type) {\n+\n+        String[] correlationProperties = correlationKey.split(\":\");\n+        CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n+\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjMxOQ=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQwNzM2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNTowMlrOHnFPyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNzoxNVrOHpjAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjQ3Mw==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510742473", "createdAt": "2020-10-23T09:05:02Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "diffHunk": "@@ -230,6 +231,29 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n \n     }\n \n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      String correlationKey,\n+                                                      String signalName,\n+                                                      String eventPayload,\n+                                                      String type) {\n+\n+        String[] correlationProperties = correlationKey.split(\":\");\n+        CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n+\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);\n+    }\n+\n+    public void signalProcessInstancesByCorrelationKey(String containerId,\n+                                                       List<String> correlationKeys,\n+                                                       String signalName,\n+                                                       String eventPayload,\n+                                                       String type) {\n+        List<CorrelationKey> keys = correlationKeys.stream().map(e -> correlationKeyFactory.newCorrelationKey(Arrays.asList(e.split(\":\")))).collect(Collectors.toList());\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, null);\n+        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNzIyMA==", "bodyText": "This is JMS client protocol (same as the other.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513327220", "createdAt": "2020-10-28T10:17:15Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "diffHunk": "@@ -230,6 +231,29 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n \n     }\n \n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      String correlationKey,\n+                                                      String signalName,\n+                                                      String eventPayload,\n+                                                      String type) {\n+\n+        String[] correlationProperties = correlationKey.split(\":\");\n+        CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n+\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);\n+    }\n+\n+    public void signalProcessInstancesByCorrelationKey(String containerId,\n+                                                       List<String> correlationKeys,\n+                                                       String signalName,\n+                                                       String eventPayload,\n+                                                       String type) {\n+        List<CorrelationKey> keys = correlationKeys.stream().map(e -> correlationKeyFactory.newCorrelationKey(Arrays.asList(e.split(\":\")))).collect(Collectors.toList());\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, null);\n+        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjQ3Mw=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQyMjU2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowOToxNVrOHnFZPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNjowN1rOHpi9kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NDg5NA==", "bodyText": "typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @ApiParam(value = \"signal name to be send to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, \n          \n          \n            \n                        @ApiParam(value = \"signal name to be sent to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName,", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510744894", "createdAt": "2020-10-23T09:09:15Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -430,7 +431,44 @@ public Response signalProcessInstance(@javax.ws.rs.core.Context HttpHeaders head\n         }\n     }\n \n-    @ApiOperation(value = \"Signals multiple process instances with a specified signal name.\", response = Void.class, code = 200)\n+    @ApiOperation(value=\"Signals a specified process instance by correlation key with a specified signal name and optional signal data.\",\n+            response=Void.class, code=200)\n+            @ApiResponses(value = { @ApiResponse(code = 500, message = \"Unexpected error\"),\n+            @ApiResponse(code = 404, message = \"Process instance or Container Id not found\"),\n+            @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response signalProcessInstanceByCorrelationKey(@javax.ws.rs.core.Context HttpHeaders headers, \n+            @ApiParam(value = \"container id that process instance belongs to\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId,\n+            @ApiParam(value = \"correlation key of the process instance to be signaled\", required = true, example = \"123\") @PathParam(CORRELATION_KEY) String correlationKey, \n+            @ApiParam(value = \"signal name to be send to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjQ4Mg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513326482", "createdAt": "2020-10-28T10:16:07Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -430,7 +431,44 @@ public Response signalProcessInstance(@javax.ws.rs.core.Context HttpHeaders head\n         }\n     }\n \n-    @ApiOperation(value = \"Signals multiple process instances with a specified signal name.\", response = Void.class, code = 200)\n+    @ApiOperation(value=\"Signals a specified process instance by correlation key with a specified signal name and optional signal data.\",\n+            response=Void.class, code=200)\n+            @ApiResponses(value = { @ApiResponse(code = 500, message = \"Unexpected error\"),\n+            @ApiResponse(code = 404, message = \"Process instance or Container Id not found\"),\n+            @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response signalProcessInstanceByCorrelationKey(@javax.ws.rs.core.Context HttpHeaders headers, \n+            @ApiParam(value = \"container id that process instance belongs to\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId,\n+            @ApiParam(value = \"correlation key of the process instance to be signaled\", required = true, example = \"123\") @PathParam(CORRELATION_KEY) String correlationKey, \n+            @ApiParam(value = \"signal name to be send to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NDg5NA=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUwMDMwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyOToyM1rOHnGJCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxMzo0MlrOHpi3fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzEyOQ==", "bodyText": "Method reference can be used here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n          \n          \n            \n                    List<String> keys = correlationKeys.stream().map(CorrelationKey::toExternalForm).collect(Collectors.toList());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510757129", "createdAt": "2020-10-23T09:29:23Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "diffHunk": "@@ -592,6 +594,56 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n         }\n     }\n \n+    @Override\n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      CorrelationKey correlationKey,\n+                                                      String signalName,\n+                                                      Object event) {\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(CORRELATION_KEY, correlationKey.toExternalForm());\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI, valuesMap), event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstanceByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, correlationKey.toExternalForm(), signalName})));\n+            ServiceResponse<?> response = (ServiceResponse<?>) executeJmsCommand( script, DescriptorCommand.class.getName(), \"BPM\", containerId ).getResponses().get(0);\n+            throwExceptionOnFailure(response);\n+        }\n+    }\n+\n+    @Override\n+    public void signalProcessInstancesByCorrelationKeys(String containerId,\n+                                                        List<CorrelationKey> correlationKeys,\n+                                                        String signalName,\n+                                                        Object event) {\n+        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNDkyNg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513324926", "createdAt": "2020-10-28T10:13:42Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "diffHunk": "@@ -592,6 +594,56 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n         }\n     }\n \n+    @Override\n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      CorrelationKey correlationKey,\n+                                                      String signalName,\n+                                                      Object event) {\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(CORRELATION_KEY, correlationKey.toExternalForm());\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI, valuesMap), event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstanceByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, correlationKey.toExternalForm(), signalName})));\n+            ServiceResponse<?> response = (ServiceResponse<?>) executeJmsCommand( script, DescriptorCommand.class.getName(), \"BPM\", containerId ).getResponses().get(0);\n+            throwExceptionOnFailure(response);\n+        }\n+    }\n+\n+    @Override\n+    public void signalProcessInstancesByCorrelationKeys(String containerId,\n+                                                        List<CorrelationKey> correlationKeys,\n+                                                        String signalName,\n+                                                        Object event) {\n+        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzEyOQ=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUxNjcxOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozMzo1MlrOHnGTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNTozMlrOHpi8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTcyNw==", "bodyText": "This should signalProcessInstancesByCorrelationKeys instead (missing last s)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));\n          \n          \n            \n                                (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKeys\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510759727", "createdAt": "2020-10-23T09:33:52Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "diffHunk": "@@ -592,6 +594,56 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n         }\n     }\n \n+    @Override\n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      CorrelationKey correlationKey,\n+                                                      String signalName,\n+                                                      Object event) {\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(CORRELATION_KEY, correlationKey.toExternalForm());\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI, valuesMap), event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstanceByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, correlationKey.toExternalForm(), signalName})));\n+            ServiceResponse<?> response = (ServiceResponse<?>) executeJmsCommand( script, DescriptorCommand.class.getName(), \"BPM\", containerId ).getResponses().get(0);\n+            throwExceptionOnFailure(response);\n+        }\n+    }\n+\n+    @Override\n+    public void signalProcessInstancesByCorrelationKeys(String containerId,\n+                                                        List<CorrelationKey> correlationKeys,\n+                                                        String signalName,\n+                                                        Object event) {\n+        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+\n+            String queryStr = buildQueryString(\"correlationKeys\", keys);\n+\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_INSTANCES_PORT_URI, valuesMap) + queryStr\n+                    , event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjEyMw==", "bodyText": "This is correct. This has to do with the naming in the process service base.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513326123", "createdAt": "2020-10-28T10:15:32Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "diffHunk": "@@ -592,6 +594,56 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n         }\n     }\n \n+    @Override\n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      CorrelationKey correlationKey,\n+                                                      String signalName,\n+                                                      Object event) {\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(CORRELATION_KEY, correlationKey.toExternalForm());\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI, valuesMap), event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstanceByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, correlationKey.toExternalForm(), signalName})));\n+            ServiceResponse<?> response = (ServiceResponse<?>) executeJmsCommand( script, DescriptorCommand.class.getName(), \"BPM\", containerId ).getResponses().get(0);\n+            throwExceptionOnFailure(response);\n+        }\n+    }\n+\n+    @Override\n+    public void signalProcessInstancesByCorrelationKeys(String containerId,\n+                                                        List<CorrelationKey> correlationKeys,\n+                                                        String signalName,\n+                                                        Object event) {\n+        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+\n+            String queryStr = buildQueryString(\"correlationKeys\", keys);\n+\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_INSTANCES_PORT_URI, valuesMap) + queryStr\n+                    , event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTcyNw=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUyMzk4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozNTo1MVrOHnGXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNzo1OFrOHpjCKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MDg0Nw==", "bodyText": "Checked exception is not thrown within this method\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n          \n          \n            \n                public void testSignalProcessInstanceByCorrelationKey() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510760847", "createdAt": "2020-10-23T09:35:51Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNzY1Nw==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513327657", "createdAt": "2020-10-28T10:17:58Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MDg0Nw=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUyNTk5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozNjoyNVrOHnGYvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxODoyMFrOHpjC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MTE0OA==", "bodyText": "Unnecessary unboxing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                    assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510761148", "createdAt": "2020-10-23T09:36:25Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNzg2MA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513327860", "createdAt": "2020-10-28T10:18:20Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MTE0OA=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUzNTg4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozOToxN1rOHnGe4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoyNzozN1rOHpjaPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MjcyMA==", "bodyText": "Checked exception not thrown within this method\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n          \n          \n            \n                public void testSignalProcessInstancesByCorrelationKeys() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510762720", "createdAt": "2020-10-23T09:39:17Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzgyMw==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513333823", "createdAt": "2020-10-28T10:27:37Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MjcyMA=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUzNzc2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozOTo0M1rOHnGf5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoyNzo1MVrOHpjazw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2Mjk4MA==", "bodyText": "Unnecessary unboxing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                    assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510762980", "createdAt": "2020-10-23T09:39:43Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzk2Nw==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513333967", "createdAt": "2020-10-28T10:27:51Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2Mjk4MA=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUzODM2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozOTo1M1rOHnGgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0MTo1NVrOHpj8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MzA2OQ==", "bodyText": "same as above", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510763069", "createdAt": "2020-10-23T09:39:53Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        ProcessInstance pi1 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+\n+        Long processInstanceId2 = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+        assertNotNull(processInstanceId2);\n+        assertTrue(processInstanceId2.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjYxMQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513342611", "createdAt": "2020-10-28T10:41:55Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        ProcessInstance pi1 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+\n+        Long processInstanceId2 = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+        assertNotNull(processInstanceId2);\n+        assertTrue(processInstanceId2.longValue() > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MzA2OQ=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTU3NDgyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1MDowNlrOHnG2aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0MTozM1rOHpj7vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODc0NQ==", "bodyText": "Shouldn't we verify the bpm process is completed after sending these signals? so by that we make sure the signals were successfully processed? Maybe we could verify both event objects are also received", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510768745", "createdAt": "2020-10-23T09:50:06Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjM5OQ==", "bodyText": "assert that process is finished. only can happen when both signal were processed.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513342399", "createdAt": "2020-10-28T10:41:33Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODc0NQ=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTU3NTM2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1MDoxNFrOHnG2tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0MTo0M1rOHpj8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODgyMA==", "bodyText": "Shouldn't we verify that both bpm processes are completed after sending these signals? so by that we make sure the signals were successfully processed? Maybe we could verify both event objects are also received", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510768820", "createdAt": "2020-10-23T09:50:14Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        ProcessInstance pi1 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+\n+        Long processInstanceId2 = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+        assertNotNull(processInstanceId2);\n+        assertTrue(processInstanceId2.longValue() > 0);\n+        ProcessInstance pi2 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId2);\n+        \n+\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey1 = correlationKeyFactory.newCorrelationKey(pi1.getCorrelationKey());\n+        CorrelationKey correlationKey2 = correlationKeyFactory.newCorrelationKey(pi2.getCorrelationKey());\n+\n+        List<CorrelationKey> correlationKeys = new ArrayList<>();\n+        correlationKeys.add(correlationKey1);\n+        correlationKeys.add(correlationKey2);\n+\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId2);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstancesByCorrelationKeys(CONTAINER_ID, correlationKeys, \"Signal1\", person);\n+\n+            processClient.signalProcessInstancesByCorrelationKeys(CONTAINER_ID, correlationKeys, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId2);\n+            fail(e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjQ3OQ==", "bodyText": "assert that process is finished. only can happen when both signal were processed.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513342479", "createdAt": "2020-10-28T10:41:43Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        ProcessInstance pi1 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+\n+        Long processInstanceId2 = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+        assertNotNull(processInstanceId2);\n+        assertTrue(processInstanceId2.longValue() > 0);\n+        ProcessInstance pi2 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId2);\n+        \n+\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey1 = correlationKeyFactory.newCorrelationKey(pi1.getCorrelationKey());\n+        CorrelationKey correlationKey2 = correlationKeyFactory.newCorrelationKey(pi2.getCorrelationKey());\n+\n+        List<CorrelationKey> correlationKeys = new ArrayList<>();\n+        correlationKeys.add(correlationKey1);\n+        correlationKeys.add(correlationKey2);\n+\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId2);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstancesByCorrelationKeys(CONTAINER_ID, correlationKeys, \"Signal1\", person);\n+\n+            processClient.signalProcessInstancesByCorrelationKeys(CONTAINER_ID, correlationKeys, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId2);\n+            fail(e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODgyMA=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY2NTc1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/build/revapi-config.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxNjowOFrOHnHtbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo1OToyNVrOHpf6YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MjgzMQ==", "bodyText": "These is not needed. These changes are already in 7.44 final version.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            {\n          \n          \n            \n                                \"code\": \"java.method.addedToInterface\",\n          \n          \n            \n                                \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstances(java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n          \n          \n            \n                                \"package\": \"org.kie.server.client\",\n          \n          \n            \n                                \"classSimpleName\": \"CaseServicesClient\",\n          \n          \n            \n                                \"methodName\": \"getCaseInstances\",\n          \n          \n            \n                                \"elementKind\": \"method\",\n          \n          \n            \n                                \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"code\": \"java.method.addedToInterface\",\n          \n          \n            \n                                \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesOwnedBy(java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n          \n          \n            \n                                \"package\": \"org.kie.server.client\",\n          \n          \n            \n                                \"classSimpleName\": \"CaseServicesClient\",\n          \n          \n            \n                                \"methodName\": \"getCaseInstancesOwnedBy\",\n          \n          \n            \n                                \"elementKind\": \"method\",\n          \n          \n            \n                                \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"code\": \"java.method.addedToInterface\",\n          \n          \n            \n                                \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesByDefinition(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n          \n          \n            \n                                \"package\": \"org.kie.server.client\",\n          \n          \n            \n                                \"classSimpleName\": \"CaseServicesClient\",\n          \n          \n            \n                                \"methodName\": \"getCaseInstancesByDefinition\",\n          \n          \n            \n                                \"elementKind\": \"method\",\n          \n          \n            \n                                \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"code\": \"java.method.addedToInterface\",\n          \n          \n            \n                                \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesByContainer(java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n          \n          \n            \n                                \"package\": \"org.kie.server.client\",\n          \n          \n            \n                                \"classSimpleName\": \"CaseServicesClient\",\n          \n          \n            \n                                \"methodName\": \"getCaseInstancesByContainer\",\n          \n          \n            \n                                \"elementKind\": \"method\",\n          \n          \n            \n                                \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n          \n          \n            \n                            },", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510782831", "createdAt": "2020-10-23T10:16:08Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/build/revapi-config.json", "diffHunk": "@@ -41,7 +41,63 @@\n     \"ignores\": {\n         \"revapi\": {\n             \"_comment\": \"Changes between 7.44.0.Final and the current branch. These changes are desired and thus ignored.\",\n-            \"ignore\": []\n+            \"ignore\": [\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstances(java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstances\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesOwnedBy(java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstancesOwnedBy\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesByDefinition(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstancesByDefinition\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesByContainer(java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstancesByContainer\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3NjUxMg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513276512", "createdAt": "2020-10-28T08:59:25Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/build/revapi-config.json", "diffHunk": "@@ -41,7 +41,63 @@\n     \"ignores\": {\n         \"revapi\": {\n             \"_comment\": \"Changes between 7.44.0.Final and the current branch. These changes are desired and thus ignored.\",\n-            \"ignore\": []\n+            \"ignore\": [\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstances(java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstances\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesOwnedBy(java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstancesOwnedBy\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesByDefinition(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstancesByDefinition\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.List<org.kie.server.api.model.cases.CaseInstance> org.kie.server.client.CaseServicesClient::getCaseInstancesByContainer(java.lang.String, java.util.List<java.lang.String>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, boolean)\",\n+                    \"package\": \"org.kie.server.client\",\n+                    \"classSimpleName\": \"CaseServicesClient\",\n+                    \"methodName\": \"getCaseInstancesByContainer\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"https://issues.redhat.com/browse/JBPM-9223\"\n+                },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MjgzMQ=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY3NDcwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/build/revapi-config.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxODoyNFrOHnHynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo1ODoxNFrOHpkiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4NDE1Ng==", "bodyText": "This ignore section is not needed, changes are already in 7.44. final version. Please remove.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.attributeValueChanged\",\n          \n          \n            \n                               \"old\": \"parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.admin.UserTaskAdminResource::notify(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, boolean, ===java.lang.String===)\",\n          \n          \n            \n                               \"new\": \"parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.admin.UserTaskAdminResource::notify(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, boolean, ===java.lang.String===)\",\n          \n          \n            \n                               \"annotationType\": \"io.swagger.annotations.ApiParam\",\n          \n          \n            \n                               \"annotation\": \"@io.swagger.annotations.ApiParam(value = \\\"email notification details, as EmailNotification type\\\", required = true, examples = @io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")}))\",\n          \n          \n            \n                               \"attribute\": \"examples\",\n          \n          \n            \n                               \"oldValue\": \"@io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")})\",\n          \n          \n            \n                               \"newValue\": \"@io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")})\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm.admin\",\n          \n          \n            \n                               \"classSimpleName\": \"UserTaskAdminResource\",\n          \n          \n            \n                               \"methodName\": \"notify\",\n          \n          \n            \n                               \"parameterIndex\": \"6\",\n          \n          \n            \n                               \"elementKind\": \"parameter\",\n          \n          \n            \n                               \"justification\": \"added email organization entity in notifications\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.field.constantValueChanged\",\n          \n          \n            \n                               \"old\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_JSON\",\n          \n          \n            \n                               \"new\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_JSON\",\n          \n          \n            \n                               \"oldValue\": \"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\",\n          \n          \n            \n                               \"newValue\": \"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm.docs\",\n          \n          \n            \n                               \"classSimpleName\": \"ParameterSamples\",\n          \n          \n            \n                               \"fieldName\": \"EMAIL_NOTIFICATION_JSON\",\n          \n          \n            \n                               \"elementKind\": \"field\",\n          \n          \n            \n                               \"justification\": \"added email organization entity in notifications\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.field.constantValueChanged\",\n          \n          \n            \n                               \"old\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_XML\",\n          \n          \n            \n                               \"new\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_XML\",\n          \n          \n            \n                               \"oldValue\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\",\n          \n          \n            \n                               \"newValue\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm.docs\",\n          \n          \n            \n                               \"classSimpleName\": \"ParameterSamples\",\n          \n          \n            \n                               \"fieldName\": \"EMAIL_NOTIFICATION_XML\",\n          \n          \n            \n                               \"elementKind\": \"field\",\n          \n          \n            \n                               \"justification\": \"added email organization entity in notifications\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.added\",\n          \n          \n            \n                               \"old\": \"class org.kie.server.remote.rest.jbpm.QueryDataResource\",\n          \n          \n            \n                               \"new\": \"class org.kie.server.remote.rest.jbpm.QueryDataResource\",\n          \n          \n            \n                               \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n          \n          \n            \n                               \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm\",\n          \n          \n            \n                               \"classSimpleName\": \"QueryDataResource\",\n          \n          \n            \n                               \"elementKind\": \"class\",\n          \n          \n            \n                               \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.added\",\n          \n          \n            \n                               \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n          \n          \n            \n                               \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries processes by variables\\\")\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm\",\n          \n          \n            \n                               \"classSimpleName\": \"RuntimeDataResource\",\n          \n          \n            \n                               \"methodName\": \"queryProcessesByVariables\",\n          \n          \n            \n                               \"elementKind\": \"method\",\n          \n          \n            \n                               \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.added\",\n          \n          \n            \n                               \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n          \n          \n            \n                               \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm\",\n          \n          \n            \n                               \"classSimpleName\": \"RuntimeDataResource\",\n          \n          \n            \n                               \"methodName\": \"queryProcessesByVariables\",\n          \n          \n            \n                               \"elementKind\": \"method\",\n          \n          \n            \n                               \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.added\",\n          \n          \n            \n                               \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n          \n          \n            \n                               \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries process tasks by variables\\\")\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm\",\n          \n          \n            \n                               \"classSimpleName\": \"RuntimeDataResource\",\n          \n          \n            \n                               \"methodName\": \"queryUserTasksByVariables\",\n          \n          \n            \n                               \"elementKind\": \"method\",\n          \n          \n            \n                               \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.added\",\n          \n          \n            \n                               \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n          \n          \n            \n                               \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm\",\n          \n          \n            \n                               \"classSimpleName\": \"RuntimeDataResource\",\n          \n          \n            \n                               \"methodName\": \"queryUserTasksByVariables\",\n          \n          \n            \n                               \"elementKind\": \"method\",\n          \n          \n            \n                               \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n          \n          \n            \n                             },\n          \n          \n            \n                             {\n          \n          \n            \n                               \"code\": \"java.annotation.added\",\n          \n          \n            \n                               \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n          \n          \n            \n                               \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n          \n          \n            \n                               \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries processes by variables and tasks\\\")\",\n          \n          \n            \n                               \"package\": \"org.kie.server.remote.rest.jbpm\",\n          \n          \n            \n                               \"classSimpleName\": \"RuntimeDataResource\",\n          \n          \n            \n                               \"methodName\": \"queryProcessesByVariables\",\n          \n          \n            \n                               \"elementKind\": \"method\",\n          \n          \n            \n                               \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n          \n          \n            \n                             },", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510784156", "createdAt": "2020-10-23T10:18:24Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/build/revapi-config.json", "diffHunk": "@@ -28,7 +28,278 @@\n     \"ignores\": {\n         \"revapi\": {\n             \"_comment\": \"Changes between 7.44.0.Final and the current branch. These changes are desired and thus ignored.\",\n-            \"ignore\": []\n+            \"ignore\": [\n+                 {\n+                   \"code\": \"java.annotation.attributeValueChanged\",\n+                   \"old\": \"parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.admin.UserTaskAdminResource::notify(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, boolean, ===java.lang.String===)\",\n+                   \"new\": \"parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.admin.UserTaskAdminResource::notify(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, boolean, ===java.lang.String===)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiParam\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiParam(value = \\\"email notification details, as EmailNotification type\\\", required = true, examples = @io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")}))\",\n+                   \"attribute\": \"examples\",\n+                   \"oldValue\": \"@io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")})\",\n+                   \"newValue\": \"@io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm.admin\",\n+                   \"classSimpleName\": \"UserTaskAdminResource\",\n+                   \"methodName\": \"notify\",\n+                   \"parameterIndex\": \"6\",\n+                   \"elementKind\": \"parameter\",\n+                   \"justification\": \"added email organization entity in notifications\"\n+                 },\n+                 {\n+                   \"code\": \"java.field.constantValueChanged\",\n+                   \"old\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_JSON\",\n+                   \"new\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_JSON\",\n+                   \"oldValue\": \"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\",\n+                   \"newValue\": \"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm.docs\",\n+                   \"classSimpleName\": \"ParameterSamples\",\n+                   \"fieldName\": \"EMAIL_NOTIFICATION_JSON\",\n+                   \"elementKind\": \"field\",\n+                   \"justification\": \"added email organization entity in notifications\"\n+                 },\n+                 {\n+                   \"code\": \"java.field.constantValueChanged\",\n+                   \"old\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_XML\",\n+                   \"new\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_XML\",\n+                   \"oldValue\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\",\n+                   \"newValue\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm.docs\",\n+                   \"classSimpleName\": \"ParameterSamples\",\n+                   \"fieldName\": \"EMAIL_NOTIFICATION_XML\",\n+                   \"elementKind\": \"field\",\n+                   \"justification\": \"added email organization entity in notifications\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"class org.kie.server.remote.rest.jbpm.QueryDataResource\",\n+                   \"new\": \"class org.kie.server.remote.rest.jbpm.QueryDataResource\",\n+                   \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n+                   \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"QueryDataResource\",\n+                   \"elementKind\": \"class\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries processes by variables\\\")\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryProcessesByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n+                   \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryProcessesByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries process tasks by variables\\\")\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryUserTasksByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n+                   \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryUserTasksByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries processes by variables and tasks\\\")\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryProcessesByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MjI0Mg==", "bodyText": "removed.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513352242", "createdAt": "2020-10-28T10:58:14Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/build/revapi-config.json", "diffHunk": "@@ -28,7 +28,278 @@\n     \"ignores\": {\n         \"revapi\": {\n             \"_comment\": \"Changes between 7.44.0.Final and the current branch. These changes are desired and thus ignored.\",\n-            \"ignore\": []\n+            \"ignore\": [\n+                 {\n+                   \"code\": \"java.annotation.attributeValueChanged\",\n+                   \"old\": \"parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.admin.UserTaskAdminResource::notify(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, boolean, ===java.lang.String===)\",\n+                   \"new\": \"parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.admin.UserTaskAdminResource::notify(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, boolean, ===java.lang.String===)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiParam\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiParam(value = \\\"email notification details, as EmailNotification type\\\", required = true, examples = @io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")}))\",\n+                   \"attribute\": \"examples\",\n+                   \"oldValue\": \"@io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")})\",\n+                   \"newValue\": \"@io.swagger.annotations.Example({@io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/json\\\", value = \\\"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\\\"), @io.swagger.annotations.ExampleProperty(mediaType = \\\"application\\/xml\\\", value = \\\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\\\")})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm.admin\",\n+                   \"classSimpleName\": \"UserTaskAdminResource\",\n+                   \"methodName\": \"notify\",\n+                   \"parameterIndex\": \"6\",\n+                   \"elementKind\": \"parameter\",\n+                   \"justification\": \"added email organization entity in notifications\"\n+                 },\n+                 {\n+                   \"code\": \"java.field.constantValueChanged\",\n+                   \"old\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_JSON\",\n+                   \"new\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_JSON\",\n+                   \"oldValue\": \"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\",\n+                   \"newValue\": \"{\\n  \\\"from\\\" : \\\"test@jbpm.org\\\",\\n  \\\"reply-to\\\" : \\\"no-reply@jbpm.org\\\",\\n  \\\"users\\\" : [ \\\"john\\\" ],\\n  \\\"emails\\\" : [ \\\"emails@jbpm.org\\\" ],\\n  \\\"groups\\\" : null,\\n  \\\"subject\\\" : \\\"reminder\\\",\\n  \\\"body\\\" : \\\"my test content\\\"\\n}\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm.docs\",\n+                   \"classSimpleName\": \"ParameterSamples\",\n+                   \"fieldName\": \"EMAIL_NOTIFICATION_JSON\",\n+                   \"elementKind\": \"field\",\n+                   \"justification\": \"added email organization entity in notifications\"\n+                 },\n+                 {\n+                   \"code\": \"java.field.constantValueChanged\",\n+                   \"old\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_XML\",\n+                   \"new\": \"field org.kie.server.remote.rest.jbpm.docs.ParameterSamples.EMAIL_NOTIFICATION_XML\",\n+                   \"oldValue\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\",\n+                   \"newValue\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<email-notification>\\n    <from>test@jbpm.org<\\/from>\\n    <reply-to>no-reply@jbpm.org<\\/reply-to>\\n    <users>john<\\/users>\\n    <emails>email@jbpm.olrg<\\/emails>    <subject>reminder<\\/subject>\\n    <body>my test content<\\/body>\\n<\\/email-notification>\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm.docs\",\n+                   \"classSimpleName\": \"ParameterSamples\",\n+                   \"fieldName\": \"EMAIL_NOTIFICATION_XML\",\n+                   \"elementKind\": \"field\",\n+                   \"justification\": \"added email organization entity in notifications\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"class org.kie.server.remote.rest.jbpm.QueryDataResource\",\n+                   \"new\": \"class org.kie.server.remote.rest.jbpm.QueryDataResource\",\n+                   \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n+                   \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"QueryDataResource\",\n+                   \"elementKind\": \"class\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries processes by variables\\\")\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryProcessesByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n+                   \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryProcessesByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries process tasks by variables\\\")\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryUserTasksByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryUserTasksByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"org.kie.server.remote.rest.common.marker.KieServerEndpoint\",\n+                   \"annotation\": \"@org.kie.server.remote.rest.common.marker.KieServerEndpoint(categories = {org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.DEFAULT, org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType.HISTORY})\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryUserTasksByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },\n+                 {\n+                   \"code\": \"java.annotation.added\",\n+                   \"old\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"new\": \"method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::queryProcessesByVariables(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer)\",\n+                   \"annotationType\": \"io.swagger.annotations.ApiOperation\",\n+                   \"annotation\": \"@io.swagger.annotations.ApiOperation(\\\"Queries processes by variables and tasks\\\")\",\n+                   \"package\": \"org.kie.server.remote.rest.jbpm\",\n+                   \"classSimpleName\": \"RuntimeDataResource\",\n+                   \"methodName\": \"queryProcessesByVariables\",\n+                   \"elementKind\": \"method\",\n+                   \"justification\": \"JBPM-9296 Self contained Audit/History module\"\n+                 },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4NDE1Ng=="}, "originalCommit": {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1958, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}