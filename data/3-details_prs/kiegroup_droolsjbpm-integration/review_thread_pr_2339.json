{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODA2MTk2", "number": 2339, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo1OTowOFrOFDY6vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozNzo1OFrOFD7GWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDk4MzAyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo1OTowOFrOIDA6GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo1OTowOFrOIDA6GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMTUxMw==", "bodyText": "just set this as debug. We don't really care about this.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2339#discussion_r540031513", "createdAt": "2020-12-10T09:59:08Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -248,8 +248,13 @@ public void onDeploy(DeploymentEvent event) {\n \n     @Override\n     public void onUnDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .removeEventListener(this);\n+        try {\n+            event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n+                    .removeEventListener(this);\n+        } catch (Exception ex) {\n+            // it is very likely that Runtime Manager is already closed at this stage\n+            logger.info(\"ProcessEventListener cannot be removed. {}\", ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6cc81aeb6358f8109386ab59cede93cf76ba9c4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjU0Mzg4OnYy", "diffSide": "LEFT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoyODo0MVrOIDypGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoxODoyNVrOID6uqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjM2Mg==", "bodyText": "Just curious - if we are now not removing the listeners, shouldn't we try to avoid adding listener twice in case of a new onDeploy event?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2339#discussion_r540846362", "createdAt": "2020-12-11T10:28:41Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -241,15 +242,13 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void onDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .addEventListener(this);\n+        ((InternalRegisterableItemsFactory) ((InternalRuntimeManager) event.getDeployedUnit().getRuntimeManager())\n+                .getEnvironment().getRegisterableItemsFactory()).addProcessListener(this);\n         updateRegistration(event, this::updateTopics);\n     }\n \n     @Override\n     public void onUnDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .removeEventListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4387dddb0986c1078ec751898900f63fa092528"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3NTU1OA==", "bodyText": "When Kjar is undeployed, the list of listeners is clear up. So when ondeploy is invoked againd, the list will be empty\nActually if we try to remove the listener on undeploy, we will get an exception because the deployment is already closed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2339#discussion_r540975558", "createdAt": "2020-12-11T14:14:10Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -241,15 +242,13 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void onDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .addEventListener(this);\n+        ((InternalRegisterableItemsFactory) ((InternalRuntimeManager) event.getDeployedUnit().getRuntimeManager())\n+                .getEnvironment().getRegisterableItemsFactory()).addProcessListener(this);\n         updateRegistration(event, this::updateTopics);\n     }\n \n     @Override\n     public void onUnDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .removeEventListener(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjM2Mg=="}, "originalCommit": {"oid": "a4387dddb0986c1078ec751898900f63fa092528"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3ODg1OA==", "bodyText": "I see - thanks", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2339#discussion_r540978858", "createdAt": "2020-12-11T14:18:25Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -241,15 +242,13 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void onDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .addEventListener(this);\n+        ((InternalRegisterableItemsFactory) ((InternalRuntimeManager) event.getDeployedUnit().getRuntimeManager())\n+                .getEnvironment().getRegisterableItemsFactory()).addProcessListener(this);\n         updateRegistration(event, this::updateTopics);\n     }\n \n     @Override\n     public void onUnDeploy(DeploymentEvent event) {\n-        event.getDeployedUnit().getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .removeEventListener(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjM2Mg=="}, "originalCommit": {"oid": "a4387dddb0986c1078ec751898900f63fa092528"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjU4MzMxOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/KafkaServerExtensionProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozNzo1OFrOIDy_aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoxNDo1MlrOID6jnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MjA3Mg==", "bodyText": "you can just use only forEach, but no need to change anything here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    itemsFactory.getProcessEventListeners(runtimeEngine).stream().forEach(l -> l.onMessage(new MessageEventImpl(\n          \n          \n            \n                    itemsFactory.getProcessEventListeners(runtimeEngine).forEach(l -> l.onMessage(new MessageEventImpl(", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2339#discussion_r540852072", "createdAt": "2020-12-11T10:37:58Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/KafkaServerExtensionProducerTest.java", "diffHunk": "@@ -129,7 +131,9 @@ public void close() {\n     @Test \n     public void testMessageSent() throws IOException, ParseException {\n         extension.onDeploy(new DeploymentEvent(\"MyDeploy1\", deployedUnit));\n-        extension.onMessage(new MessageEventImpl(pInstance, runtime, nInstance, \"MyMessage\", \"Javierito\"));\n+        itemsFactory.getProcessEventListeners(runtimeEngine).stream().forEach(l -> l.onMessage(new MessageEventImpl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4387dddb0986c1078ec751898900f63fa092528"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3NjAyOA==", "bodyText": "I took note for the next one, but I prefer to avoid a push just for that", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2339#discussion_r540976028", "createdAt": "2020-12-11T14:14:52Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/KafkaServerExtensionProducerTest.java", "diffHunk": "@@ -129,7 +131,9 @@ public void close() {\n     @Test \n     public void testMessageSent() throws IOException, ParseException {\n         extension.onDeploy(new DeploymentEvent(\"MyDeploy1\", deployedUnit));\n-        extension.onMessage(new MessageEventImpl(pInstance, runtime, nInstance, \"MyMessage\", \"Javierito\"));\n+        itemsFactory.getProcessEventListeners(runtimeEngine).stream().forEach(l -> l.onMessage(new MessageEventImpl(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MjA3Mg=="}, "originalCommit": {"oid": "a4387dddb0986c1078ec751898900f63fa092528"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1895, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}