{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjU4Njk1", "number": 2322, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo0ODo0NVrOE9iJXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODowNTowMVrOE_fvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTU4MDQ0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo0ODo0NVrOH6RQEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo0ODo0NVrOH6RQEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2MjA5Ng==", "bodyText": "Could you add a system property for \"max.block.ms\" (similar than in the Kafka Emitter) with 2000 ms as default value?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r530862096", "createdAt": "2020-11-26T08:48:45Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -180,13 +199,30 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         return new KafkaConsumer<>(props, new StringDeserializer(), new ByteArrayDeserializer());\n     }\n \n+    protected Producer<String, byte[]> getKafkaProducer() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, System.getProperty(\n+                KAFKA_EXTENSION_PREFIX + \"boopstrap.servers\", \"localhost:9092\"));\n+        String acks = System.getProperty(KAFKA_EXTENSION_PREFIX + \"acks\");\n+        if (acks != null) {\n+            configs.put(ProducerConfig.ACKS_CONFIG, acks);\n+        }\n+        String clientId = System.getProperty(KAFKA_EXTENSION_PREFIX + \"client.id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8474534fe94b7e06b96e880b69f02b4b10bbce3b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTYwOTY5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo1NTo1MFrOH6RhSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTozNDowN1rOH6TA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NjUwNQ==", "bodyText": "Shouldn't producer be closed here too if producerReady is true?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r530866505", "createdAt": "2020-11-26T08:55:50Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -180,13 +199,30 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         return new KafkaConsumer<>(props, new StringDeserializer(), new ByteArrayDeserializer());\n     }\n \n+    protected Producer<String, byte[]> getKafkaProducer() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, System.getProperty(\n+                KAFKA_EXTENSION_PREFIX + \"boopstrap.servers\", \"localhost:9092\"));\n+        String acks = System.getProperty(KAFKA_EXTENSION_PREFIX + \"acks\");\n+        if (acks != null) {\n+            configs.put(ProducerConfig.ACKS_CONFIG, acks);\n+        }\n+        String clientId = System.getProperty(KAFKA_EXTENSION_PREFIX + \"client.id\");\n+        if (clientId != null) {\n+            configs.put(ProducerConfig.CLIENT_ID_CONFIG, clientId);\n+        }\n+        return new KafkaProducer<>(configs, new StringSerializer(), new ByteArraySerializer());\n+    }\n+\n     @Override\n     public void onDeploy(DeploymentEvent event) {\n+        processService.addProcessEventListener(event.getDeploymentId(), this);\n         updateRegistration(event, this::updateTopics);\n     }\n \n     @Override\n     public void onUnDeploy(DeploymentEvent event) {\n+        processService.removeProcessEventListener(event.getDeploymentId(), this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8474534fe94b7e06b96e880b69f02b4b10bbce3b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5MDk2Nw==", "bodyText": "It should be closed on destroy. There are other deployments that might use it.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r530890967", "createdAt": "2020-11-26T09:34:07Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -180,13 +199,30 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         return new KafkaConsumer<>(props, new StringDeserializer(), new ByteArrayDeserializer());\n     }\n \n+    protected Producer<String, byte[]> getKafkaProducer() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, System.getProperty(\n+                KAFKA_EXTENSION_PREFIX + \"boopstrap.servers\", \"localhost:9092\"));\n+        String acks = System.getProperty(KAFKA_EXTENSION_PREFIX + \"acks\");\n+        if (acks != null) {\n+            configs.put(ProducerConfig.ACKS_CONFIG, acks);\n+        }\n+        String clientId = System.getProperty(KAFKA_EXTENSION_PREFIX + \"client.id\");\n+        if (clientId != null) {\n+            configs.put(ProducerConfig.CLIENT_ID_CONFIG, clientId);\n+        }\n+        return new KafkaProducer<>(configs, new StringSerializer(), new ByteArraySerializer());\n+    }\n+\n     @Override\n     public void onDeploy(DeploymentEvent event) {\n+        processService.addProcessEventListener(event.getDeploymentId(), this);\n         updateRegistration(event, this::updateTopics);\n     }\n \n     @Override\n     public void onUnDeploy(DeploymentEvent event) {\n+        processService.removeProcessEventListener(event.getDeploymentId(), this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NjUwNQ=="}, "originalCommit": {"oid": "8474534fe94b7e06b96e880b69f02b4b10bbce3b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTY1MDI3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTowNjowMFrOH6R6Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTowNjowMFrOH6R6Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg3Mjg5NA==", "bodyText": "In this method, T is not used, you can remove the generics\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static <T extends SignalDescBase> String topicFromSignal(String name) {\n          \n          \n            \n                private static String topicFromSignal(String name) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r530872894", "createdAt": "2020-11-26T09:06:00Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -301,18 +339,13 @@ private void unsubscribe() {\n     }\n \n     private static <T extends SignalDescBase> String topicFromSignal(T signal) {\n-        return System.getProperty(TOPIC_PREFIX + signal.getName(), signal.getName());\n+        return topicFromSignal(signal.getName());\n     }\n-\n-    @Override\n-    public void serverStarted() {\n-        // will use lazy initialization for consumer\n+    \n+    private static <T extends SignalDescBase> String topicFromSignal(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8474534fe94b7e06b96e880b69f02b4b10bbce3b"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDQzOTUzOnYy", "diffSide": "LEFT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/CloudEventTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjoyOTo0N1rOH6Zc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTowNDozMVrOH7Gitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5NjQ0OQ==", "bodyText": "I'm missing a similar approach to test write new method in CloudEvent class", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r530996449", "createdAt": "2020-11-26T12:29:47Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/CloudEventTest.java", "diffHunk": "@@ -34,7 +34,7 @@ public void testStringCloudEventDeserialization() throws IOException, ParseExcep\n         assertEquals(\"javi\",event.getId());\n         assertEquals(\"one\",event.getType());\n         assertEquals(\"pepe\",event.getSource());\n-        assertEquals(\"1.0\",event.getSpecVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0ODcwOQ==", "bodyText": "Im waiting for the result of a discussion with Enrique to add unit test, thats why this still a draft", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531148709", "createdAt": "2020-11-26T16:57:39Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/CloudEventTest.java", "diffHunk": "@@ -34,7 +34,7 @@ public void testStringCloudEventDeserialization() throws IOException, ParseExcep\n         assertEquals(\"javi\",event.getId());\n         assertEquals(\"one\",event.getType());\n         assertEquals(\"pepe\",event.getSource());\n-        assertEquals(\"1.0\",event.getSpecVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5NjQ0OQ=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNzQzMA==", "bodyText": "ok - let me know once it's done or request a new review from me.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531427430", "createdAt": "2020-11-27T07:40:33Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/CloudEventTest.java", "diffHunk": "@@ -34,7 +34,7 @@ public void testStringCloudEventDeserialization() throws IOException, ParseExcep\n         assertEquals(\"javi\",event.getId());\n         assertEquals(\"one\",event.getType());\n         assertEquals(\"pepe\",event.getSource());\n-        assertEquals(\"1.0\",event.getSpecVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5NjQ0OQ=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNTIyMg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531735222", "createdAt": "2020-11-27T19:04:31Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/test/java/org/kie/server/services/jbpm/kafka/CloudEventTest.java", "diffHunk": "@@ -34,7 +34,7 @@ public void testStringCloudEventDeserialization() throws IOException, ParseExcep\n         assertEquals(\"javi\",event.getId());\n         assertEquals(\"one\",event.getType());\n         assertEquals(\"pepe\",event.getSource());\n-        assertEquals(\"1.0\",event.getSpecVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5NjQ0OQ=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDY3MDAxOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzozMzoxN1rOH6boEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTowNDoxOVrOH7GiYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMjA4Mg==", "bodyText": "Why are we only taking into account incomingNodes and not outgoing ones? if for instance an EndEventHandler node is processed, we are not considering this to be updated accordingly in the list of topics? - am I missing something here? can you please clarify?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531032082", "createdAt": "2020-11-26T13:33:17Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -214,8 +257,10 @@ private void removeTopics(String deploymentId, ProcessDefinition processDefiniti\n                                                          String deploymentId,\n                                                          Collection<T> signals) {\n         for (T signal : signals) {\n-            topic2SignalBase.computeIfAbsent(topicFromSignal(signal), k -> new HashMap<>()).computeIfAbsent(\n-                    signal, k -> new ArrayList<>()).add(deploymentId);\n+            if (!signal.getIncomingNodes().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0ODE5NA==", "bodyText": "this is for subscription, we are only interested on the signals which are input, not output", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531148194", "createdAt": "2020-11-26T16:56:40Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -214,8 +257,10 @@ private void removeTopics(String deploymentId, ProcessDefinition processDefiniti\n                                                          String deploymentId,\n                                                          Collection<T> signals) {\n         for (T signal : signals) {\n-            topic2SignalBase.computeIfAbsent(topicFromSignal(signal), k -> new HashMap<>()).computeIfAbsent(\n-                    signal, k -> new ArrayList<>()).add(deploymentId);\n+            if (!signal.getIncomingNodes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMjA4Mg=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMTM1MQ==", "bodyText": "when you say subscription, you mean for the kafka consumer? or? - I mean this method is also used by Kafka producer, so we will still need to know what topic we will send the record to when publishing from the producer? sorry about that, I don't mean it's wrong, it's just that I'm trying to fully understand.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531431351", "createdAt": "2020-11-27T07:50:52Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -214,8 +257,10 @@ private void removeTopics(String deploymentId, ProcessDefinition processDefiniti\n                                                          String deploymentId,\n                                                          Collection<T> signals) {\n         for (T signal : signals) {\n-            topic2SignalBase.computeIfAbsent(topicFromSignal(signal), k -> new HashMap<>()).computeIfAbsent(\n-                    signal, k -> new ArrayList<>()).add(deploymentId);\n+            if (!signal.getIncomingNodes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMjA4Mg=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNTEzNg==", "bodyText": "this method is only used for consuming, to calculate the topics the extension needs to be subbsribed, for this calculation only signal or mesagges associated with incoming nodes are really needed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531735136", "createdAt": "2020-11-27T19:04:19Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -214,8 +257,10 @@ private void removeTopics(String deploymentId, ProcessDefinition processDefiniti\n                                                          String deploymentId,\n                                                          Collection<T> signals) {\n         for (T signal : signals) {\n-            topic2SignalBase.computeIfAbsent(topicFromSignal(signal), k -> new HashMap<>()).computeIfAbsent(\n-                    signal, k -> new ArrayList<>()).add(deploymentId);\n+            if (!signal.getIncomingNodes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMjA4Mg=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTAxNTY1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTowMTowMVrOH6e5yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo1MToxN1rOH60AgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NTc3MA==", "bodyText": "Shouldn't we try to flush first? or right after sending a record? wdyt?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        producer.close();\n          \n          \n            \n                        producer.flush();\n          \n          \n            \n                        producer.close();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531085770", "createdAt": "2020-11-26T15:01:01Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0OTg3OQ==", "bodyText": "as far as I know, close internally invoke flush (in reality it waits for the acks till a timeout is reach) so it will be redudant to call flush here", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531149879", "createdAt": "2020-11-26T17:00:19Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NTc3MA=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMTU1Mw==", "bodyText": "I see, thanks for that", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531431553", "createdAt": "2020-11-27T07:51:17Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NTc3MA=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTAyMDk2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTowMjoyNFrOH6e83w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTowMjo1OVrOH7GhUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NjU1OQ==", "bodyText": "also, shouldn't it be beneficial to call close with a timeout? maybe configurable through a system property - wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531086559", "createdAt": "2020-11-26T15:02:24Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MDUyNw==", "bodyText": "I would normally agree, but this is destroy, which is invoked only when server is closed, default timeout wil be fine, we do not want to give the user to specify a long one and interfere on the server cleanup procedure", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531150527", "createdAt": "2020-11-26T17:01:44Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NjU1OQ=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNDAyNQ==", "bodyText": "then, maybe we should actually invoke the close(Duration timeout) instead passing a low value cause the default timeout for the close() method is pretty high (it's Long.MAX_VALUE):\nhttps://github.com/apache/kafka/blob/2.6/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java#L1158", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531434025", "createdAt": "2020-11-27T07:57:14Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NjU1OQ=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDg2NA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r531734864", "createdAt": "2020-11-27T19:02:59Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -140,6 +159,10 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n         if (deploymentService != null) {\n             deploymentService.removeListener(this);\n         }\n+        if (producerReady.compareAndSet(true, false)) {\n+            producer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NjU1OQ=="}, "originalCommit": {"oid": "7a94cdd54bee359c7ea97fbac56468e2f8b6aced"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDE0NjM2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODowMTozOFrOH9Ok4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozODozMFrOH9ZAXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2NDAwMw==", "bodyText": "we need two properties here.\nKAFKA_EXTENSION_PREFIX.signals.mapping=(NONE) -> (by default or AUTO)\nKAFKA_EXTENSION_PREFIX.messages.mapping=AUTO -> (or NONE)\nthe idea would be that in the future we can say extends which signals we need to map", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r533964003", "createdAt": "2020-12-02T08:01:38Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -67,16 +82,20 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class KafkaServerExtension implements KieServerExtension, DeploymentEventListener, Runnable {\n+public class KafkaServerExtension implements KieServerExtension, DeploymentEventListener, ProcessEventListener,\n+                                  Runnable {\n \n     public static final String EXTENSION_NAME = \"Kafka\";\n     static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n     static final String TOPIC_PREFIX = KAFKA_EXTENSION_PREFIX + \"topics.\";\n+    static final String SIGNALS_ENABLED = KAFKA_EXTENSION_PREFIX + \"enableSignals\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c0d17284c78317d142a2359ca40eba6fb106be"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzNDg3Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r534134877", "createdAt": "2020-12-02T12:38:30Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -67,16 +82,20 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class KafkaServerExtension implements KieServerExtension, DeploymentEventListener, Runnable {\n+public class KafkaServerExtension implements KieServerExtension, DeploymentEventListener, ProcessEventListener,\n+                                  Runnable {\n \n     public static final String EXTENSION_NAME = \"Kafka\";\n     static final String KAFKA_EXTENSION_PREFIX = \"org.kie.server.jbpm-kafka.ext.\";\n     static final String TOPIC_PREFIX = KAFKA_EXTENSION_PREFIX + \"topics.\";\n+    static final String SIGNALS_ENABLED = KAFKA_EXTENSION_PREFIX + \"enableSignals\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2NDAwMw=="}, "originalCommit": {"oid": "18c0d17284c78317d142a2359ca40eba6fb106be"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDE1NzA3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODowNTowMVrOH9OrRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozODo0NlrOH9ZA8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2NTYzOQ==", "bodyText": "right now we have the metadata in the signal node regarding this so the behaviour should be like this.\nif the signal map property is AUTO... we should MAP unless the implementation exists says otherthing than kafka\nif it is none we should not map unless the property says kafka.\nmetadata overrides the flags.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r533965639", "createdAt": "2020-12-02T08:05:01Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -201,21 +249,27 @@ public void onDeactivate(DeploymentEvent event) {\n     }\n \n     private void updateTopics(String deploymentId, ProcessDefinition processDefinition) {\n-        updateTopics(topic2Signal, deploymentId, processDefinition.getSignalsDesc());\n+        if (Boolean.getBoolean(SIGNALS_ENABLED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c0d17284c78317d142a2359ca40eba6fb106be"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzNTAyNw==", "bodyText": "not including metadata at the moment", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2322#discussion_r534135027", "createdAt": "2020-12-02T12:38:46Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-kafka/src/main/java/org/kie/server/services/jbpm/kafka/KafkaServerExtension.java", "diffHunk": "@@ -201,21 +249,27 @@ public void onDeactivate(DeploymentEvent event) {\n     }\n \n     private void updateTopics(String deploymentId, ProcessDefinition processDefinition) {\n-        updateTopics(topic2Signal, deploymentId, processDefinition.getSignalsDesc());\n+        if (Boolean.getBoolean(SIGNALS_ENABLED)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2NTYzOQ=="}, "originalCommit": {"oid": "18c0d17284c78317d142a2359ca40eba6fb106be"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1879, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}