{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODk3NjEw", "number": 2080, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNjo1MFrOD-7e1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMDo1NlrOD__A7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEyODU1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/filtered-resources/kjars-sources/restart-project/src/main/resources/.gitignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNjo1MFrOGZVCMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzozNzozOFrOGaSI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjIxMA==", "bodyText": "Please remove this file. It's empty and a .gitignore file is already in place at project level", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429212210", "createdAt": "2020-05-22T12:16:50Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/filtered-resources/kjars-sources/restart-project/src/main/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+# empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxMzM1MA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430213350", "createdAt": "2020-05-26T07:37:38Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/filtered-resources/kjars-sources/restart-project/src/main/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+# empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMjIxMA=="}, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzM1MTI5OnYy", "diffSide": "RIGHT", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzozMjoyNFrOGZXL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0MjowNVrOGaSR6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzQ2OQ==", "bodyText": "Please remove auto-generated TODO comment.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429247469", "createdAt": "2020-05-22T13:32:24Z", "author": {"login": "afalhambra"}, "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -78,6 +78,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }\n+\n+            @Override\n+            public String getNodeUniqueId() {\n+                // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNTY1Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430215656", "createdAt": "2020-05-26T07:42:05Z", "author": {"login": "elguardian"}, "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -78,6 +78,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }\n+\n+            @Override\n+            public String getNodeUniqueId() {\n+                // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzQ2OQ=="}, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzM1MTgwOnYy", "diffSide": "RIGHT", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzozMjozMFrOGZXMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzozMjozMFrOGZXMOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzU0NA==", "bodyText": "Please remove auto-generated TODO comment.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429247544", "createdAt": "2020-05-22T13:32:30Z", "author": {"login": "afalhambra"}, "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -136,6 +148,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }\n+\n+            @Override\n+            public String getNodeUniqueId() {\n+                // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzU5MjE2OnYy", "diffSide": "RIGHT", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozNzo1MlrOGZZiDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozNzo1MlrOGZZiDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4NTkwMA==", "bodyText": "Please remove this. There is no such method defined in interface Node", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429285900", "createdAt": "2020-05-22T14:37:52Z", "author": {"login": "afalhambra"}, "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -78,6 +78,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzU5OTI4OnYy", "diffSide": "RIGHT", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozOTozOVrOGZZmVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozOTozOVrOGZZmVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4Njk5OQ==", "bodyText": "Same here. No such method defined in interface Node", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429286999", "createdAt": "2020-05-22T14:39:39Z", "author": {"login": "afalhambra"}, "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -136,6 +148,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njk5NDM0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDozMVrOGZ4ZaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDozMVrOGZ4ZaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTU5Mw==", "bodyText": "Why startProcessWithCorrelationKeyFromNodeIds method name? why not startProcessFromNodeIds method name for consistency and coherency across classes?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429791593", "createdAt": "2020-05-25T08:04:31Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -196,6 +199,96 @@ public Response startProcess(@javax.ws.rs.core.Context HttpHeaders headers,\n         }\n     }\n \n+    @ApiOperation(value = \"Starts a new process instance from the specific nodes\",\n+            response=Long.class, code=201)\n+    @ApiResponses(value = {@ApiResponse(code = 201, response = Long.class, message = \"Process instance created\",\n+                                        examples = @Example(value = {@ExampleProperty(mediaType = JSON, value = LONG_RESPONSE_JSON),\n+                                                                     @ExampleProperty(mediaType = XML, value = LONG_RESPONSE_XML)})),\n+            @ApiResponse(code = 500, message = \"Unexpected error\"),\n+            @ApiResponse(code = 404, message = \"Process ID or Container Id not found\"),\n+            @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(START_PROCESS_FROM_NODES_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response startProcessFromNodeIds(@javax.ws.rs.core.Context HttpHeaders headers,\n+            @ApiParam(value = \"container id where the process definition resides\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId, \n+            @ApiParam(value = \"process instance id that new instance should be created from\", required = true, example = \"evaluation\") @PathParam(PROCESS_ID) String processId, \n+                                            @ApiParam(value = \"optional map of process variables\", required = false) @DefaultValue(\"\") String payload) {\n+\n+        Variant v = getVariant(headers);\n+        String type = getContentType(headers);\n+        Header conversationIdHeader = buildConversationIdHeader(containerId, context, headers);\n+        \n+        try {\n+            String response = processServiceBase.startProcessFromNodeIds(containerId, processId, payload, type);\n+\n+            logger.debug(\"Returning CREATED response with content '{}'\", response);\n+            return createResponse(response, v, Response.Status.CREATED, conversationIdHeader);\n+        } catch (DeploymentNotActiveException e) {\n+            return badRequest(\n+                    e.getMessage(), v);\n+        } catch (DeploymentNotFoundException e) {\n+            return notFound(\n+                    MessageFormat.format(CONTAINER_NOT_FOUND, containerId), v);\n+        } catch (ProcessDefinitionNotFoundException e) {\n+            return notFound(\n+                    MessageFormat.format(PROCESS_DEFINITION_NOT_FOUND, processId, containerId), v);\n+        } catch (SecurityException e) {\n+            return forbidden(errorMessage(e, e.getMessage()), v, conversationIdHeader);\n+        } catch (Exception e) {\n+            logger.error(\"Unexpected error during processing {}\", e.getMessage(), e);\n+            return internalServerError(\n+                    MessageFormat.format(CREATE_RESPONSE_ERROR, e.getMessage()), v);\n+        }\n+    }\n+\n+    @ApiOperation(value = \"Starts a new process instance from the specific nodes\",\n+                  response = Long.class, code = 201)\n+    @ApiResponses(value = {@ApiResponse(code = 201, response = Long.class, message = \"Process instance created\",\n+                                        examples = @Example(value = {@ExampleProperty(mediaType = JSON, value = LONG_RESPONSE_JSON),\n+                                                                     @ExampleProperty(mediaType = XML, value = LONG_RESPONSE_XML)})),\n+                           @ApiResponse(code = 500, message = \"Unexpected error\"),\n+                           @ApiResponse(code = 404, message = \"Process ID or Container Id not found\"),\n+                           @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(START_PROCESS_FROM_NODES_WITH_CORRELATION_KEY_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response startProcessWithCorrelationKeyFromNodeIds(@javax.ws.rs.core.Context HttpHeaders headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzI0NjY0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyNDozN1rOGZ62pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODowNDoxNVrOGaTD8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMTg0Nw==", "bodyText": "Not really useful as it will print out memory address only - no toString method is implemented in NodeInstanceList class", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429831847", "createdAt": "2020-05-25T09:24:37Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java", "diffHunk": "@@ -289,6 +290,18 @@ public NodeInstanceList getProcessInstanceHistory(long processInstanceId, Boolea\n         return nodeInstanceList;\n     }\n \n+    public NodeInstanceList getProcessInstanceFullHistoryByType(long processInstanceId, String entryType, Integer page, Integer pageSize) {\n+\n+        logger.debug(\"About to search for node instances with page {} and page size {}\", page, pageSize);\n+        Collection<NodeInstanceDesc> result = null;\n+\n+        result = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.valueOf(entryType), buildQueryContext(page, pageSize));\n+\n+        NodeInstanceList nodeInstanceList = convertToNodeInstanceList(result);\n+        logger.debug(\"Returning result of node instances search: {}\", nodeInstanceList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIyODQ2NA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430228464", "createdAt": "2020-05-26T08:04:15Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java", "diffHunk": "@@ -289,6 +290,18 @@ public NodeInstanceList getProcessInstanceHistory(long processInstanceId, Boolea\n         return nodeInstanceList;\n     }\n \n+    public NodeInstanceList getProcessInstanceFullHistoryByType(long processInstanceId, String entryType, Integer page, Integer pageSize) {\n+\n+        logger.debug(\"About to search for node instances with page {} and page size {}\", page, pageSize);\n+        Collection<NodeInstanceDesc> result = null;\n+\n+        result = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.valueOf(entryType), buildQueryContext(page, pageSize));\n+\n+        NodeInstanceList nodeInstanceList = convertToNodeInstanceList(result);\n+        logger.debug(\"Returning result of node instances search: {}\", nodeInstanceList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMTg0Nw=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMwMjczOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MzowNlrOGZ7aDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MzowNlrOGZ7aDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MDkxMQ==", "bodyText": "Unnecessary unboxing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                        assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429840911", "createdAt": "2020-05-25T09:43:06Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMwMzg0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MzozMFrOGZ7axw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MzozMFrOGZ7axw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTA5NQ==", "bodyText": "Unnecessary unboxing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                        assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429841095", "createdAt": "2020-05-25T09:43:30Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMwNjE4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0NDoyMlrOGZ7cVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0MzozMVrOGaSU8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTQ5Mw==", "bodyText": "Can be replaced with method reference\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n          \n          \n            \n                        String[] nodeIds = list.stream().map(NodeInstance::getNodeId).toArray(String[]::new);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429841493", "createdAt": "2020-05-25T09:44:22Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjQzMg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430216432", "createdAt": "2020-05-26T07:43:31Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTQ5Mw=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMwNzkzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0NDo1MlrOGZ7dXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NDoxOVrOGaSWjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTc1Nw==", "bodyText": "Can be replaced with method reference\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n          \n          \n            \n                        String[] nodeIds = list.stream().map(NodeInstance::getNodeId).toArray(String[]::new);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429841757", "createdAt": "2020-05-25T09:44:52Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjg0NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430216845", "createdAt": "2020-05-26T07:44:19Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTc1Nw=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMxMDI0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0NTozNVrOGZ7exA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0Mzo1MlrOGaSVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MjExNg==", "bodyText": "Member field never used. Please remove.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429842116", "createdAt": "2020-05-25T09:45:35Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjU4Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430216586", "createdAt": "2020-05-26T07:43:52Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MjExNg=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMxOTM4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0ODoyN1rOGZ7kbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NDozN1rOGaSXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MzU2Ng==", "bodyText": "Redundant type declaration\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429843566", "createdAt": "2020-05-25T09:48:27Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzAyNg==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430217026", "createdAt": "2020-05-26T07:44:37Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MzU2Ng=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMyMTQ0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0OTowNlrOGZ7lqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0OTowNlrOGZ7lqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0Mzg4MA==", "bodyText": "Redundant type declaration\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429843880", "createdAt": "2020-05-25T09:49:06Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYxODg2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMDo0NFrOGaRUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NjowOFrOGaSa2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5OTk2OA==", "bodyText": "Can you please add assertions making sure that the process is running and the nodes supplied above are active?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430199968", "createdAt": "2020-05-26T07:10:44Z", "author": {"login": "sutaakar"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzk0Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430217947", "createdAt": "2020-05-26T07:46:08Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5OTk2OA=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYyNDIyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMjozMVrOGaRX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMjozMVrOGaRX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMDgyOQ==", "bodyText": "Please move the fail statement after process instance abortion, this way the process instance is not aborted when an exception is thrown.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430200829", "createdAt": "2020-05-26T07:12:31Z", "author": {"login": "sutaakar"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYyNjY1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMzoxNFrOGaRZew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMzoxNFrOGaRZew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMTIxMQ==", "bodyText": "Same as above.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430201211", "createdAt": "2020-05-26T07:13:14Z", "author": {"login": "sutaakar"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+            CorrelationKey firstKey = correlationKeyFactory.newCorrelationKey(\"mysimlekey\");\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, firstKey, parameters, nodeIds);\n+\n+            ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertThat(pi.getCorrelationKey(), is(\"mysimlekey\"));\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYzMjgwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxNToyNlrOGaRdbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NTowNVrOGaSYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMjIyMw==", "bodyText": "May be better to rename the test method to something like testStartProcessFromNodeId to distinguish it from usual process start.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430202223", "createdAt": "2020-05-26T07:15:26Z", "author": {"login": "sutaakar"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzI5Mg==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430217292", "createdAt": "2020-05-26T07:45:05Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMjIyMw=="}, "originalCommit": {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDE5MzA4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMDo1NlrOGa-hKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoyMDo1NlrOGa-hKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MDQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                          @ApiParam(value = \"entry type from the history\", required = false,\n          \n          \n            \n                                                                    example = \"123\") @QueryParam(PROCESS_INST_HISTORY_TYPE) String processInstHistoryType,\n          \n          \n            \n                       @ApiParam(value = \"entry type from the history\", required = false, example = \"START\") @QueryParam(PROCESS_INST_HISTORY_TYPE) String processInstHistoryType,", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430940459", "createdAt": "2020-05-27T08:20:56Z", "author": {"login": "sutaakar"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -824,13 +917,20 @@ public Response getProcessInstanceHistory(@Context HttpHeaders headers, @PathPar\n             @ApiParam(value = \"identifier of the process instance that history should be collected for\", required = true, example = \"123\") @PathParam(PROCESS_INST_ID) long processInstanceId,\n             @ApiParam(value = \"instructs if active nodes only should be collected, defaults to false\", required = false) @QueryParam(\"activeOnly\")Boolean active, \n             @ApiParam(value = \"instructs if completed nodes only should be collected, defaults to false\", required = false) @QueryParam(\"completedOnly\")Boolean completed,\n+                                              @ApiParam(value = \"entry type from the history\", required = false,\n+                                                        example = \"123\") @QueryParam(PROCESS_INST_HISTORY_TYPE) String processInstHistoryType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c5868299940325538a2df7ddfc880c98b14e96"}, "originalPosition": 244}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2149, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}