{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNTg0NTQw", "number": 2226, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowNDowNFrOEhMXow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyOTowNlrOEhnBrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQxMTIzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowNDowNFrOHOX3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoxODoxNlrOHOcaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMzE5OA==", "bodyText": "https://www.youtube.com/watch?v=VFA2d4G9q30", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484833198", "createdAt": "2020-09-08T11:04:04Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -41,29 +45,36 @@\n import org.kie.server.api.model.instance.RequestInfoInstance;\n import org.kie.server.api.model.instance.TaskInstance;\n import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.api.model.instance.VariableInstance;\n import org.kie.server.api.model.instance.WorkItemInstance;\n-import org.kie.server.api.KieServerConstants;\n-import org.kie.server.api.exception.KieServicesException;\n import org.kie.server.integrationtests.category.Smoke;\n import org.kie.server.integrationtests.category.UnstableOnJenkinsPrBuilder;\n import org.kie.server.integrationtests.config.TestConfig;\n-\n-import static org.junit.Assert.*;\n-import org.kie.server.api.model.instance.VariableInstance;\n import org.kie.server.integrationtests.shared.KieServerAssert;\n import org.kie.server.integrationtests.shared.KieServerDeployer;\n import org.kie.server.integrationtests.shared.KieServerReflections;\n import org.kie.server.integrationtests.shared.KieServerSynchronization;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n \n public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n \n     private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+    \n+    private static final String FUNNY_CONTAINER_ID = \"manic miner forever\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwNzYwNw==", "bodyText": "It will take me \"forever\" to complete that tricky game", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484907607", "createdAt": "2020-09-08T13:18:16Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -41,29 +45,36 @@\n import org.kie.server.api.model.instance.RequestInfoInstance;\n import org.kie.server.api.model.instance.TaskInstance;\n import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.api.model.instance.VariableInstance;\n import org.kie.server.api.model.instance.WorkItemInstance;\n-import org.kie.server.api.KieServerConstants;\n-import org.kie.server.api.exception.KieServicesException;\n import org.kie.server.integrationtests.category.Smoke;\n import org.kie.server.integrationtests.category.UnstableOnJenkinsPrBuilder;\n import org.kie.server.integrationtests.config.TestConfig;\n-\n-import static org.junit.Assert.*;\n-import org.kie.server.api.model.instance.VariableInstance;\n import org.kie.server.integrationtests.shared.KieServerAssert;\n import org.kie.server.integrationtests.shared.KieServerDeployer;\n import org.kie.server.integrationtests.shared.KieServerReflections;\n import org.kie.server.integrationtests.shared.KieServerSynchronization;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n \n public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n \n     private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+    \n+    private static final String FUNNY_CONTAINER_ID = \"manic miner forever\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMzE5OA=="}, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQxNDk3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowNToxN1rOHOX6CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowNToxN1rOHOX6CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMzgwMA==", "bodyText": "unnecessary unboxing.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                        assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484833800", "createdAt": "2020-09-08T11:05:17Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -178,6 +189,28 @@ public void testAbortExistingProcess() {\n             fail(e.getMessage());\n         }\n     }\n+    \n+    @Test()\n+    public void testAbortExistingProcessWrongContainer() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQyOTA1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowOTozOFrOHOYCjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowOTozOFrOHOYCjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzNTk4Mg==", "bodyText": "Explicit arguments are not really needed\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484835982", "createdAt": "2020-09-08T11:09:38Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -178,6 +189,28 @@ public void testAbortExistingProcess() {\n             fail(e.getMessage());\n         }\n     }\n+    \n+    @Test()\n+    public void testAbortExistingProcessWrongContainer() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQzNTUwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxMToyNFrOHOYGNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxMToyNFrOHOYGNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzNjkxNg==", "bodyText": "Checked exceptions are never thrown in this test\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalProcessInstanceWrongContainer() throws Exception {\n          \n          \n            \n                public void testSignalProcessInstanceWrongContainer() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484836916", "createdAt": "2020-09-08T11:11:24Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -236,7 +269,24 @@ public void testSignalProcessInstance() throws Exception {\n             processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n             fail(e.getMessage());\n         }\n+    }\n+    \n+    @Test\n+    public void testSignalProcessInstanceWrongContainer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQzNjk1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxMTo1MlrOHOYHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxMTo1MlrOHOYHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzNzE0OQ==", "bodyText": "Unnecessary unboxing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                    assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484837149", "createdAt": "2020-09-08T11:11:52Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -236,7 +269,24 @@ public void testSignalProcessInstance() throws Exception {\n             processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n             fail(e.getMessage());\n         }\n+    }\n+    \n+    @Test\n+    public void testSignalProcessInstanceWrongContainer() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ0NTM2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNDo0OFrOHOYMXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNDo0OFrOHOYMXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzODQ5NA==", "bodyText": "Checked exceptions are never thrown within this test\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testManipulateProcessVariableWrongContainer() throws Exception {\n          \n          \n            \n                public void testManipulateProcessVariableWrongContainer() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484838494", "createdAt": "2020-09-08T11:14:48Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -353,6 +403,32 @@ public void testManipulateProcessVariable() throws Exception {\n         }\n \n     }\n+    \n+    public void testManipulateProcessVariableWrongContainer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ0Nzg3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNToyNlrOHOYNzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNToyNlrOHOYNzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzODg2Mw==", "bodyText": "Test annotation is missing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testManipulateProcessVariableWrongContainer() throws Exception {\n          \n          \n            \n                @Test\n          \n          \n            \n                public void testManipulateProcessVariableWrongContainer() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484838863", "createdAt": "2020-09-08T11:15:26Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -353,6 +403,32 @@ public void testManipulateProcessVariable() throws Exception {\n         }\n \n     }\n+    \n+    public void testManipulateProcessVariableWrongContainer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ0OTU3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNjowNVrOHOYO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNjowNVrOHOYO7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzOTE0OQ==", "bodyText": "same as previous", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484839149", "createdAt": "2020-09-08T11:16:05Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -353,6 +403,32 @@ public void testManipulateProcessVariable() throws Exception {\n         }\n \n     }\n+    \n+    public void testManipulateProcessVariableWrongContainer() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ1NjU2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxODoxM1rOHOYS_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxODoxM1rOHOYS_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MDE4OA==", "bodyText": "I would add below to make sure personVar is not null\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        exceptionRule.expect(KieServicesException.class);\n          \n          \n            \n                        assertNotNull(personVar);\n          \n          \n            \n                        exceptionRule.expect(KieServicesException.class);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484840188", "createdAt": "2020-09-08T11:18:13Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -353,6 +403,32 @@ public void testManipulateProcessVariable() throws Exception {\n         }\n \n     }\n+    \n+    public void testManipulateProcessVariableWrongContainer() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+\n+        try {\n+            Object personVar = null;\n+            try {\n+                personVar = processClient.getProcessInstanceVariable(CONTAINER_ID, processInstanceId, \"personData\");\n+                fail(\"Should fail as there is no process variable personData set yet\");\n+            } catch (KieServicesException e) {\n+                // expected\n+            }\n+            assertNull(personVar);\n+\n+            personVar = createPersonInstance(USER_JOHN);\n+            exceptionRule.expect(KieServicesException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ2MDAxOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxOToxNlrOHOYU7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxOToxNlrOHOYU7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MDY4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testGetProcessInstanceWrongContainer() {\n          \n          \n            \n                @Test\n          \n          \n            \n                public void testGetProcessInstanceWrongContainer() {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484840687", "createdAt": "2020-09-08T11:19:16Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -423,6 +499,27 @@ public void testGetProcessInstance() throws Exception {\n         }\n \n     }\n+    \n+        \n+    public void testGetProcessInstanceWrongContainer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ2MjA3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxOTo0OVrOHOYWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxOTo0OVrOHOYWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MDk5OA==", "bodyText": "Explicit type parameters are not required\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484840998", "createdAt": "2020-09-08T11:19:49Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -423,6 +499,27 @@ public void testGetProcessInstance() throws Exception {\n         }\n \n     }\n+    \n+        \n+    public void testGetProcessInstanceWrongContainer() {\n+        \n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ2NjcwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMToyMlrOHOYY-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMToyMlrOHOYY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTcyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484841722", "createdAt": "2020-09-08T11:21:22Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ2NzUyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMTozOFrOHOYZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMTozOFrOHOYZfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                        assertTrue(processInstanceId > 0);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484841854", "createdAt": "2020-09-08T11:21:38Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ2OTcwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMjoyMFrOHOYayw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMjoyMFrOHOYayw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MjE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> status = Arrays.asList(Status.Ready.toString());\n          \n          \n            \n                        List<String> status = Collections.singletonList(Status.Ready.toString());", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484842187", "createdAt": "2020-09-08T11:22:20Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Completing human task so we can move in process flow to work item.\n+            // User task shouldn't be handled as work item because in such case it doesn't behave consistently:\n+            // i.e. leaving open tasks after finishing process instance.\n+            List<String> status = Arrays.asList(Status.Ready.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ4MDA1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyNTozOFrOHOYg0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozNTozMVrOHOdfeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MzczMA==", "bodyText": "I don't think this is needed - what do you think?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484843730", "createdAt": "2020-09-08T11:25:38Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Completing human task so we can move in process flow to work item.\n+            // User task shouldn't be handled as work item because in such case it doesn't behave consistently:\n+            // i.e. leaving open tasks after finishing process instance.\n+            List<String> status = Arrays.asList(Status.Ready.toString());\n+            List<TaskSummary> taskList = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, status, 0, 10);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+            taskClient.completeTask(CONTAINER_ID, taskSummary.getId(), USER_YODA, null);\n+\n+            TaskInstance userTask = taskClient.findTaskById(taskSummary.getId());\n+            assertNotNull(userTask);\n+            assertEquals(\"Evaluate items?\", userTask.getName());\n+            assertEquals(Status.Completed.toString(), userTask.getStatus());\n+\n+            List<WorkItemInstance> workItems = processClient.getWorkItemByProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(workItems);\n+            assertEquals(1, workItems.size());\n+\n+            WorkItemInstance workItemInstance = workItems.get(0);\n+            assertNotNull(workItemInstance);\n+\n+            exceptionRule.expect(KieServicesException.class);\n+            processClient.completeWorkItem(FUNNY_CONTAINER_ID, processInstanceId, workItemInstance.getId(), parameters);\n+        } finally {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            changeUser(TestConfig.getUsername());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwOTEyMw==", "bodyText": "I think we need to abort process instance always (probably it should a clean task for every test, but that will be a bigger change and will imply reviweing all test cases)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484909123", "createdAt": "2020-09-08T13:20:11Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Completing human task so we can move in process flow to work item.\n+            // User task shouldn't be handled as work item because in such case it doesn't behave consistently:\n+            // i.e. leaving open tasks after finishing process instance.\n+            List<String> status = Arrays.asList(Status.Ready.toString());\n+            List<TaskSummary> taskList = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, status, 0, 10);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+            taskClient.completeTask(CONTAINER_ID, taskSummary.getId(), USER_YODA, null);\n+\n+            TaskInstance userTask = taskClient.findTaskById(taskSummary.getId());\n+            assertNotNull(userTask);\n+            assertEquals(\"Evaluate items?\", userTask.getName());\n+            assertEquals(Status.Completed.toString(), userTask.getStatus());\n+\n+            List<WorkItemInstance> workItems = processClient.getWorkItemByProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(workItems);\n+            assertEquals(1, workItems.size());\n+\n+            WorkItemInstance workItemInstance = workItems.get(0);\n+            assertNotNull(workItemInstance);\n+\n+            exceptionRule.expect(KieServicesException.class);\n+            processClient.completeWorkItem(FUNNY_CONTAINER_ID, processInstanceId, workItemInstance.getId(), parameters);\n+        } finally {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            changeUser(TestConfig.getUsername());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MzczMA=="}, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxOTA5MA==", "bodyText": "mmm I was talking about the changeUser method call - I believe it's not needed here", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484919090", "createdAt": "2020-09-08T13:28:41Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Completing human task so we can move in process flow to work item.\n+            // User task shouldn't be handled as work item because in such case it doesn't behave consistently:\n+            // i.e. leaving open tasks after finishing process instance.\n+            List<String> status = Arrays.asList(Status.Ready.toString());\n+            List<TaskSummary> taskList = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, status, 0, 10);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+            taskClient.completeTask(CONTAINER_ID, taskSummary.getId(), USER_YODA, null);\n+\n+            TaskInstance userTask = taskClient.findTaskById(taskSummary.getId());\n+            assertNotNull(userTask);\n+            assertEquals(\"Evaluate items?\", userTask.getName());\n+            assertEquals(Status.Completed.toString(), userTask.getStatus());\n+\n+            List<WorkItemInstance> workItems = processClient.getWorkItemByProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(workItems);\n+            assertEquals(1, workItems.size());\n+\n+            WorkItemInstance workItemInstance = workItems.get(0);\n+            assertNotNull(workItemInstance);\n+\n+            exceptionRule.expect(KieServicesException.class);\n+            processClient.completeWorkItem(FUNNY_CONTAINER_ID, processInstanceId, workItemInstance.getId(), parameters);\n+        } finally {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            changeUser(TestConfig.getUsername());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MzczMA=="}, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyNTMwNA==", "bodyText": "I think that is needed (it was already present in existing code) to leave the user as it was before the execution of the test", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484925304", "createdAt": "2020-09-08T13:35:31Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +689,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Completing human task so we can move in process flow to work item.\n+            // User task shouldn't be handled as work item because in such case it doesn't behave consistently:\n+            // i.e. leaving open tasks after finishing process instance.\n+            List<String> status = Arrays.asList(Status.Ready.toString());\n+            List<TaskSummary> taskList = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, status, 0, 10);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+            taskClient.completeTask(CONTAINER_ID, taskSummary.getId(), USER_YODA, null);\n+\n+            TaskInstance userTask = taskClient.findTaskById(taskSummary.getId());\n+            assertNotNull(userTask);\n+            assertEquals(\"Evaluate items?\", userTask.getName());\n+            assertEquals(Status.Completed.toString(), userTask.getStatus());\n+\n+            List<WorkItemInstance> workItems = processClient.getWorkItemByProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(workItems);\n+            assertEquals(1, workItems.size());\n+\n+            WorkItemInstance workItemInstance = workItems.get(0);\n+            assertNotNull(workItemInstance);\n+\n+            exceptionRule.expect(KieServicesException.class);\n+            processClient.completeWorkItem(FUNNY_CONTAINER_ID, processInstanceId, workItemInstance.getId(), parameters);\n+        } finally {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            changeUser(TestConfig.getUsername());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MzczMA=="}, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ4MTE1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyNjowM1rOHOYhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyNjowM1rOHOYhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MzkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r484843907", "createdAt": "2020-09-08T11:26:03Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -943,6 +1085,22 @@ public void testFindVariableInstances() {\n         }\n \n     }\n+    \n+    @Test\n+    public void testFindVariableInstancesWrongContainer() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a7bbd64d7f1ca86fdfd4202f7f8302b6ac2ecc"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjczMTIzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxNTowM1rOHPAkpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMDo1MVrOHPCpHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMDA3MA==", "bodyText": "Shouldn't it be also inside the if-clause?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485500070", "createdAt": "2020-09-09T10:15:03Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -81,15 +85,14 @@ public static ProcessInstanceList convertToProcessInstanceWithVarsList(Collectio\n             return new ProcessInstanceList(new org.kie.server.api.model.instance.ProcessInstance[0]);\n         }\n \n-        List<ProcessInstance> processInstances = new ArrayList<ProcessInstance>(instances.size());\n+        List<ProcessInstance> processInstances = new ArrayList<>(instances.size());\n         for (ProcessInstanceWithVarsDesc pi : instances) {\n             org.kie.server.api.model.instance.ProcessInstance instance = convertToProcessInstance(pi);\n-\n-            instance.setVariables(pi.getVariables());\n-\n+            if (instance != null) {\n+                instance.setVariables(pi.getVariables());\n+            }\n             processInstances.add(instance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMzk4MA==", "bodyText": "I maitanined the behaviour of convertToProcessInstanceList, which includes the null item in the returned list, though Im not sure if this is the rigth approach, but it will be out of the scope of the jira anyway. I just made this change becuase there is an objetive and clear clystal risk of a null pointer exception being launch here, so I feel the need to fix it right away", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485533980", "createdAt": "2020-09-09T11:20:51Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -81,15 +85,14 @@ public static ProcessInstanceList convertToProcessInstanceWithVarsList(Collectio\n             return new ProcessInstanceList(new org.kie.server.api.model.instance.ProcessInstance[0]);\n         }\n \n-        List<ProcessInstance> processInstances = new ArrayList<ProcessInstance>(instances.size());\n+        List<ProcessInstance> processInstances = new ArrayList<>(instances.size());\n         for (ProcessInstanceWithVarsDesc pi : instances) {\n             org.kie.server.api.model.instance.ProcessInstance instance = convertToProcessInstance(pi);\n-\n-            instance.setVariables(pi.getVariables());\n-\n+            if (instance != null) {\n+                instance.setVariables(pi.getVariables());\n+            }\n             processInstances.add(instance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMDA3MA=="}, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc0MzYwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxODo0OVrOHPAsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMTowNFrOHPCphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMjAyNA==", "bodyText": "placeholder {} is not needed here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ProcessInstanceNotFoundException(\"process instance \" + variableDesc.getProcessInstanceId() + \" does not belong to container {}\" + containerId);\n          \n          \n            \n                        throw new ProcessInstanceNotFoundException(\"process instance \" + variableDesc.getProcessInstanceId() + \" does not belong to container \" + containerId);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485502024", "createdAt": "2020-09-09T10:18:49Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -352,29 +322,34 @@ public static NodeInstanceList convertToNodeInstanceList(Collection<NodeInstance\n     }\n \n     public static VariableInstance convertToVariable(VariableDesc variableDesc) {\n-        VariableInstance instance = VariableInstance.builder()\n+        return convertToVariable(variableDesc, null);\n+    }\n+\n+    public static VariableInstance convertToVariable(VariableDesc variableDesc, String containerId) {\n+        if (containerId != null && !variableDesc.getDeploymentId().equals(containerId)) {\n+            throw new ProcessInstanceNotFoundException(\"process instance \" + variableDesc.getProcessInstanceId() + \" does not belong to container {}\" + containerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDA4NA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485534084", "createdAt": "2020-09-09T11:21:04Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -352,29 +322,34 @@ public static NodeInstanceList convertToNodeInstanceList(Collection<NodeInstance\n     }\n \n     public static VariableInstance convertToVariable(VariableDesc variableDesc) {\n-        VariableInstance instance = VariableInstance.builder()\n+        return convertToVariable(variableDesc, null);\n+    }\n+\n+    public static VariableInstance convertToVariable(VariableDesc variableDesc, String containerId) {\n+        if (containerId != null && !variableDesc.getDeploymentId().equals(containerId)) {\n+            throw new ProcessInstanceNotFoundException(\"process instance \" + variableDesc.getProcessInstanceId() + \" does not belong to container {}\" + containerId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMjAyNA=="}, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc3MzY3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNzo0MlrOHPA-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyNDowMFrOHPCvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNjY4Nw==", "bodyText": "Why don't add also\nexceptionRule.expectMessage(FUNNY_CONTAINER_ID);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485506687", "createdAt": "2020-09-09T10:27:42Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -178,6 +189,28 @@ public void testAbortExistingProcess() {\n             fail(e.getMessage());\n         }\n     }\n+    \n+    @Test()\n+    public void testAbortExistingProcessWrongContainer() {\n+        Map<String, Object> parameters = new HashMap<>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+            exceptionRule.expect(KieServicesException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNTQ4OA==", "bodyText": "hmmm, not really, if the container exist, but it is different from the one that the process intance was created into, the exception being launched will not necessarily contain the contaner id. The engine will locate a session, but that session will not include the id.\nSince this is implementation detail, I thik I will remove expect message from the test in what it was used.\nI will alsotry to  test the scenario in which the container exist but does not hold that processInstance", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485535488", "createdAt": "2020-09-09T11:24:00Z", "author": {"login": "fjtirado"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -178,6 +189,28 @@ public void testAbortExistingProcess() {\n             fail(e.getMessage());\n         }\n     }\n+    \n+    @Test()\n+    public void testAbortExistingProcessWrongContainer() {\n+        Map<String, Object> parameters = new HashMap<>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+            exceptionRule.expect(KieServicesException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNjY4Nw=="}, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc3NDM4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNzo1NFrOHPA-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNzo1NFrOHPA-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNjc4Nw==", "bodyText": "Same here", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485506787", "createdAt": "2020-09-09T10:27:54Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -236,7 +269,24 @@ public void testSignalProcessInstance() throws Exception {\n             processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n             fail(e.getMessage());\n         }\n+    }\n+    \n+    @Test\n+    public void testSignalProcessInstanceWrongContainer() {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n \n+            Object person = createPersonInstance(USER_JOHN);\n+            exceptionRule.expect(KieServicesException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc3NTkyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyODoyNVrOHPA_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyODoyNVrOHPA_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNzA0OQ==", "bodyText": "Same here", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485507049", "createdAt": "2020-09-09T10:28:25Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -353,6 +403,34 @@ public void testManipulateProcessVariable() throws Exception {\n         }\n \n     }\n+    \n+    @Test\n+    public void testManipulateProcessVariableWrongContainer() {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+\n+        try {\n+            Object personVar = null;\n+            try {\n+                personVar = processClient.getProcessInstanceVariable(CONTAINER_ID, processInstanceId, \"personData\");\n+                fail(\"Should fail as there is no process variable personData set yet\");\n+            } catch (KieServicesException e) {\n+                // expected\n+            }\n+            assertNull(personVar);\n+\n+            personVar = createPersonInstance(USER_JOHN);\n+            assertNotNull(personVar);\n+            exceptionRule.expect(KieServicesException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc3NzY3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyODo0NlrOHPBA4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyODo0NlrOHPBA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNzI5OQ==", "bodyText": "Same here", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485507299", "createdAt": "2020-09-09T10:28:46Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -589,6 +692,48 @@ public void testWorkItemOperationComplete() throws Exception {\n             changeUser(TestConfig.getUsername());\n         }\n     }\n+    \n+    @Test\n+    public void testWorkItemOperationCompleteWrongContainer() throws Exception {\n+\n+        Map<String, Object> parameters = new HashMap<>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId > 0);\n+\n+            // Completing human task so we can move in process flow to work item.\n+            // User task shouldn't be handled as work item because in such case it doesn't behave consistently:\n+            // i.e. leaving open tasks after finishing process instance.\n+            List<String> status = Collections.singletonList(Status.Ready.toString());\n+            List<TaskSummary> taskList = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, status, 0, 10);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+            taskClient.completeTask(CONTAINER_ID, taskSummary.getId(), USER_YODA, null);\n+\n+            TaskInstance userTask = taskClient.findTaskById(taskSummary.getId());\n+            assertNotNull(userTask);\n+            assertEquals(\"Evaluate items?\", userTask.getName());\n+            assertEquals(Status.Completed.toString(), userTask.getStatus());\n+\n+            List<WorkItemInstance> workItems = processClient.getWorkItemByProcessInstance(CONTAINER_ID, processInstanceId);\n+            assertNotNull(workItems);\n+            assertEquals(1, workItems.size());\n+\n+            WorkItemInstance workItemInstance = workItems.get(0);\n+            assertNotNull(workItemInstance);\n+\n+            exceptionRule.expect(KieServicesException.class);\n+            processClient.completeWorkItem(FUNNY_CONTAINER_ID, processInstanceId, workItemInstance.getId(), parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc3ODcwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyOTowNlrOHPBBiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyOTowNlrOHPBBiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNzQ2Nw==", "bodyText": "Same here", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2226#discussion_r485507467", "createdAt": "2020-09-09T10:29:06Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -943,6 +1088,21 @@ public void testFindVariableInstances() {\n         }\n \n     }\n+    \n+    @Test\n+    public void testFindVariableInstancesWrongContainer() {\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+        try {\n+            exceptionRule.expect(KieServicesException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0960af0661fcd87497189c10f3e6d9e3dfe6d8e"}, "originalPosition": 252}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1911, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}