{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzI1MDEy", "number": 2220, "title": "[JBPM-9178] Immutable SpringBoot Deployment / Adding controller conne\u2026", "bodyText": "under test.", "createdAt": "2020-09-02T10:29:49Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220", "merged": true, "mergeCommit": {"oid": "1df0eeb9c4260eb5cbddb7f4f8e347c47206f4ab"}, "closed": true, "closedAt": "2020-09-08T06:31:02Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFmCgNgFqTQ4MjQzNjAzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGgGuGgFqTQ4MzQyODc4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDM2MDM3", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#pullrequestreview-482436037", "createdAt": "2020-09-04T07:52:08Z", "commit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1MjowOFrOHNDcWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNzo1OVrOHNLntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0OTk0Ng==", "bodyText": "Red Hat header/copyright is missing", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483449946", "createdAt": "2020-09-04T07:52:08Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/EmbeddedKieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.kie.server.springboot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjU0Nw==", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployments\", havingValue=\"false\", matchIfMissing = true)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483466547", "createdAt": "2020-09-04T08:23:52Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjczMQ==", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployments\", havingValue = \"true\")", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483466731", "createdAt": "2020-09-04T08:24:12Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4MTkzMg==", "bodyText": "might be done in a functional way\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(resource.isPresent()) {\n          \n          \n            \n                                files.add(resource.get());\n          \n          \n            \n                            }\n          \n          \n            \n                            resource.ifPresent(files::add);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483481932", "createdAt": "2020-09-04T08:51:59Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NzkzNA==", "bodyText": "out must be closed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483497934", "createdAt": "2020-09-04T09:20:59Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return files;\n+    }\n+\n+    private Optional<KieContainerResource> scanPossibleDeployment(InputStream inputStream) {\n+        boolean isDeployable = false;\n+        KieContainerResource resource = null;\n+        ZipEntry entry = null;\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                if(\"META-INF/kmodule.xml\".contentEquals(entry.getName())) {\n+                    isDeployable = true;\n+                }\n+                if(entry.getName().startsWith(\"META-INF/maven\") && entry.getName().endsWith(\"pom.xml\")) {\n+                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                    byte[] buffer = new byte[1024];\n+\n+                    int read = 0;\n+                    while ((read = zipFile.read(buffer)) > 0) {\n+                        out.write(buffer, 0, read);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMDU5Ng==", "bodyText": "If it is deployable=true, it never should empty? I mean Optional.ofNullable(resource) might be returned an optional empty element. If that's the case, shouldn't we raise an exception instead?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483500596", "createdAt": "2020-09-04T09:25:54Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return files;\n+    }\n+\n+    private Optional<KieContainerResource> scanPossibleDeployment(InputStream inputStream) {\n+        boolean isDeployable = false;\n+        KieContainerResource resource = null;\n+        ZipEntry entry = null;\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                if(\"META-INF/kmodule.xml\".contentEquals(entry.getName())) {\n+                    isDeployable = true;\n+                }\n+                if(entry.getName().startsWith(\"META-INF/maven\") && entry.getName().endsWith(\"pom.xml\")) {\n+                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                    byte[] buffer = new byte[1024];\n+\n+                    int read = 0;\n+                    while ((read = zipFile.read(buffer)) > 0) {\n+                        out.write(buffer, 0, read);\n+                    }\n+\n+                    PomModel model = MinimalPomParser.parse(entry.getName(), new ByteArrayInputStream(out.toByteArray()));\n+                    AFReleaseId pomReleaseId = model.getReleaseId();\n+                    ReleaseId releaseId = new ReleaseId(pomReleaseId.getGroupId(), pomReleaseId.getArtifactId(), pomReleaseId.getVersion());\n+                    resource = new KieContainerResource(releaseId);\n+                    resource.setContainerId(releaseId.getArtifactId() + \"-\" + releaseId.getVersion());\n+                    resource.setStatus(KieContainerStatus.STARTED);\n+                    resource.setResolvedReleaseId(releaseId);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return isDeployable ? Optional.ofNullable(resource) : Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTUyMw==", "bodyText": "out must be closed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483501523", "createdAt": "2020-09-04T09:27:43Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDQ2Mw==", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class InmutableContainerStartupStrategy implements StartupStrategy {\n          \n          \n            \n            public class ImmutableContainerStartupStrategy implements StartupStrategy {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483504463", "createdAt": "2020-09-04T09:33:21Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -16,31 +16,65 @@\n \n package org.kie.server.services.impl;\n \n+import static java.util.stream.Collectors.toSet;\n+\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.kie.server.api.KieServerConstants;\n import org.kie.server.api.model.KieContainerResource;\n import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.KieServerController;\n import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieControllerNotConnectedException;\n+import org.kie.server.services.api.KieControllerNotDefinedException;\n import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.controller.ControllerConnectRunnable;\n import org.kie.server.services.impl.storage.KieServerState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class InmutableContainerStartupStrategy implements StartupStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNTAyMw==", "bodyText": "could also use below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.kieContainers = kieContainer.stream().collect(toSet());\n          \n          \n            \n                    this.kieContainers = new HashSet<>(kieContainer);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483505023", "createdAt": "2020-09-04T09:34:19Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -16,31 +16,65 @@\n \n package org.kie.server.services.impl;\n \n+import static java.util.stream.Collectors.toSet;\n+\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.kie.server.api.KieServerConstants;\n import org.kie.server.api.model.KieContainerResource;\n import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.KieServerController;\n import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieControllerNotConnectedException;\n+import org.kie.server.services.api.KieControllerNotDefinedException;\n import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.controller.ControllerConnectRunnable;\n import org.kie.server.services.impl.storage.KieServerState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class InmutableContainerStartupStrategy implements StartupStrategy {\n \n+    private static final Logger logger = LoggerFactory.getLogger(InmutableContainerStartupStrategy.class);\n+\n+    private Set<KieContainerResource> kieContainers;\n+\n+    public InmutableContainerStartupStrategy(List<KieContainerResource> kieContainer) {\n+        this.kieContainers = kieContainer.stream().collect(toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxOTkyNw==", "bodyText": "Not sure about this change, why are we removing this from the list? Shouldn't it be available for the ServiceLoader?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483519927", "createdAt": "2020-09-04T10:03:49Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/resources/META-INF/services/org.kie.server.services.api.StartupStrategy", "diffHunk": "@@ -1,2 +1 @@\n org.kie.server.services.impl.LocalContainersStartupStrategy\n-org.kie.server.services.impl.InmutableContainerStartupStrategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMTc3NQ==", "bodyText": "why this change?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483521775", "createdAt": "2020-09-04T10:07:43Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/storage/memory/InMemoryKieServerStateRepository.java", "diffHunk": "@@ -42,7 +42,6 @@ public KieServerState load(String serverId) {\n             KieServerState newState = new KieServerState();\n             newState.setConfiguration(new KieServerConfig());\n             newState.setContainers(new HashSet<>());\n-            newState.setControllers(new HashSet<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzU2OQ==", "bodyText": "I would remove matchIfMissing. By default, if this property is not set it should autoScan deployments\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\")", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483583569", "createdAt": "2020-09-04T12:27:14Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzkyNA==", "bodyText": "Same as before, by default, it should scan deployments automatically when this property is not set\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\", matchIfMissing = true)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483583924", "createdAt": "2020-09-04T12:27:59Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/d304d7b94fccd5b39a8e02a22411f588791288d6", "committedDate": "2020-09-03T10:28:33Z", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments"}, "afterCommit": {"oid": "4d13074990bb63e52a6e142e28c85936f049ba72", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4d13074990bb63e52a6e142e28c85936f049ba72", "committedDate": "2020-09-07T08:08:44Z", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNDA0NjUw", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#pullrequestreview-483404650", "createdAt": "2020-09-07T09:32:13Z", "commit": {"oid": "4d13074990bb63e52a6e142e28c85936f049ba72"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTozMjoxM1rOHN4ENQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTozNDowOVrOHN4IeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjExNw==", "bodyText": "this not resolved yet", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484312117", "createdAt": "2020-09-07T09:32:13Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -16,31 +16,65 @@\n \n package org.kie.server.services.impl;\n \n+import static java.util.stream.Collectors.toSet;\n+\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.kie.server.api.KieServerConstants;\n import org.kie.server.api.model.KieContainerResource;\n import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.KieServerController;\n import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieControllerNotConnectedException;\n+import org.kie.server.services.api.KieControllerNotDefinedException;\n import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.controller.ControllerConnectRunnable;\n import org.kie.server.services.impl.storage.KieServerState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class InmutableContainerStartupStrategy implements StartupStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDQ2Mw=="}, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjYzMw==", "bodyText": "this is not changed yet", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484312633", "createdAt": "2020-09-07T09:33:10Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4MTkzMg=="}, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjgyMw==", "bodyText": "not closed yet", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484312823", "createdAt": "2020-09-07T09:33:28Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTUyMw=="}, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMzIwOQ==", "bodyText": "what about this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484313209", "createdAt": "2020-09-07T09:34:09Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return files;\n+    }\n+\n+    private Optional<KieContainerResource> scanPossibleDeployment(InputStream inputStream) {\n+        boolean isDeployable = false;\n+        KieContainerResource resource = null;\n+        ZipEntry entry = null;\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                if(\"META-INF/kmodule.xml\".contentEquals(entry.getName())) {\n+                    isDeployable = true;\n+                }\n+                if(entry.getName().startsWith(\"META-INF/maven\") && entry.getName().endsWith(\"pom.xml\")) {\n+                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                    byte[] buffer = new byte[1024];\n+\n+                    int read = 0;\n+                    while ((read = zipFile.read(buffer)) > 0) {\n+                        out.write(buffer, 0, read);\n+                    }\n+\n+                    PomModel model = MinimalPomParser.parse(entry.getName(), new ByteArrayInputStream(out.toByteArray()));\n+                    AFReleaseId pomReleaseId = model.getReleaseId();\n+                    ReleaseId releaseId = new ReleaseId(pomReleaseId.getGroupId(), pomReleaseId.getArtifactId(), pomReleaseId.getVersion());\n+                    resource = new KieContainerResource(releaseId);\n+                    resource.setContainerId(releaseId.getArtifactId() + \"-\" + releaseId.getVersion());\n+                    resource.setStatus(KieContainerStatus.STARTED);\n+                    resource.setResolvedReleaseId(releaseId);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return isDeployable ? Optional.ofNullable(resource) : Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMDU5Ng=="}, "originalCommit": {"oid": "d304d7b94fccd5b39a8e02a22411f588791288d6"}, "originalPosition": 138}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d13074990bb63e52a6e142e28c85936f049ba72", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4d13074990bb63e52a6e142e28c85936f049ba72", "committedDate": "2020-09-07T08:08:44Z", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments"}, "afterCommit": {"oid": "e99a279d1d8f1fb5e67f63a5bf6de469b178658a", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e99a279d1d8f1fb5e67f63a5bf6de469b178658a", "committedDate": "2020-09-07T09:50:03Z", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223415ef3fa95e36dc8046c16b4367931cde09a5", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/223415ef3fa95e36dc8046c16b4367931cde09a5", "committedDate": "2020-09-07T09:59:54Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment / Adding controller connection capabilities"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e99a279d1d8f1fb5e67f63a5bf6de469b178658a", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e99a279d1d8f1fb5e67f63a5bf6de469b178658a", "committedDate": "2020-09-07T09:50:03Z", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments"}, "afterCommit": {"oid": "223415ef3fa95e36dc8046c16b4367931cde09a5", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/223415ef3fa95e36dc8046c16b4367931cde09a5", "committedDate": "2020-09-07T09:59:54Z", "message": "[JBPM-9178] Immutable SpringBoot Deployment / Adding controller connection capabilities"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNDI4Nzg1", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#pullrequestreview-483428785", "createdAt": "2020-09-07T10:05:05Z", "commit": {"oid": "223415ef3fa95e36dc8046c16b4367931cde09a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1153, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}