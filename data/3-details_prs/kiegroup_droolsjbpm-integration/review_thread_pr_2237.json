{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODk1MjM1", "number": 2237, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyNToxMVrOEm1GvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyNToxMVrOEm1GvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTUxNDIwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-controller/kie-server-controller-rest/src/main/java/org/kie/server/controller/rest/RestKieServerControllerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyNToxMVrOHXFlfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo0NzozOVrOHYyH_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDgxNQ==", "bodyText": "There's a problem when returning ACCEPTED, because in the client side, when that response is processed at makeHttpPostRequestAndCreateCustomResponse method, is considered as an exception:\nException encountered while syncing with controller at http://localhost:8080/business-central/rest/controller/server/test9-rest-2965 error Error while sending POST request to http://localhost:8080/business-central/rest/controller/server/test9-rest-2965 response code 202\nSo, add ACCEPTED to the expected results in the makeHttpPostRequestAndCreateCustomResponse (not sure if will affect other tests) or return OK (200) in this scenario.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2237#discussion_r493970815", "createdAt": "2020-09-24T00:25:11Z", "author": {"login": "gmunozfe"}, "path": "kie-server-parent/kie-server-controller/kie-server-controller-rest/src/main/java/org/kie/server/controller/rest/RestKieServerControllerImpl.java", "diffHunk": "@@ -49,7 +49,24 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(RestKieServerControllerImpl.class);\n \n-    private KieServerControllerStorage storage = InMemoryKieServerControllerStorage.getInstance();\n+    @POST\n+    @Path(\"server/{serverInstanceId}\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response updatetKieServer(@Context HttpHeaders headers,\n+                                     @PathParam(\"serverInstanceId\") String id,\n+                                     String serverInfoPayload) {\n+        String contentType = getContentType(headers);\n+        logger.debug(\"Received connect request from server with id {}\", id);\n+        KieServerStateInfo kieServerStateInfo = unmarshal(serverInfoPayload, contentType, KieServerStateInfo.class);\n+\n+        logger.debug(\"Server info update {}\", kieServerStateInfo);\n+        KieServerSetup serverSetup = update(kieServerStateInfo);\n+\n+        String response = marshal(contentType, serverSetup);\n+        logger.debug(\"Returning response for connect of server '{}': {}\", id, response);\n+        return createCorrectVariant(response, headers, serverSetup.hasNoErrors() ? Response.Status.ACCEPTED : Response.Status.BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd985ef3b8b273a9d399b478a15d79f2f4eeeed"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0OTExNw==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2237#discussion_r495749117", "createdAt": "2020-09-28T07:47:39Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-controller/kie-server-controller-rest/src/main/java/org/kie/server/controller/rest/RestKieServerControllerImpl.java", "diffHunk": "@@ -49,7 +49,24 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(RestKieServerControllerImpl.class);\n \n-    private KieServerControllerStorage storage = InMemoryKieServerControllerStorage.getInstance();\n+    @POST\n+    @Path(\"server/{serverInstanceId}\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response updatetKieServer(@Context HttpHeaders headers,\n+                                     @PathParam(\"serverInstanceId\") String id,\n+                                     String serverInfoPayload) {\n+        String contentType = getContentType(headers);\n+        logger.debug(\"Received connect request from server with id {}\", id);\n+        KieServerStateInfo kieServerStateInfo = unmarshal(serverInfoPayload, contentType, KieServerStateInfo.class);\n+\n+        logger.debug(\"Server info update {}\", kieServerStateInfo);\n+        KieServerSetup serverSetup = update(kieServerStateInfo);\n+\n+        String response = marshal(contentType, serverSetup);\n+        logger.debug(\"Returning response for connect of server '{}': {}\", id, response);\n+        return createCorrectVariant(response, headers, serverSetup.hasNoErrors() ? Response.Status.ACCEPTED : Response.Status.BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDgxNQ=="}, "originalCommit": {"oid": "ffd985ef3b8b273a9d399b478a15d79f2f4eeeed"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}