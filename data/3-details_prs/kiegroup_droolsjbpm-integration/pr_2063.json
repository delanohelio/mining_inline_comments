{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTY3NTUx", "number": 2063, "title": "PLANNER-1913: [Task assignment] Uses information synchronization", "bodyText": "", "createdAt": "2020-04-10T16:02:29Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063", "merged": true, "mergeCommit": {"oid": "6f04c6b8b9ff88838b3f8dd6fb138e2c2a6380ff"}, "closed": true, "closedAt": "2020-04-17T13:06:40Z", "author": {"login": "wmedvede"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWiO33AH2gAyNDAxOTY3NTUxOjEwNjE4NGE3MjFiNjI5ZTA0N2U5MGY5NTA4Y2VlNDhlMjJmNTU4MGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYdJQGgFqTM5NTI2NjExMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/106184a721b629e047e90f9508cee48e22f5580b", "committedDate": "2020-04-11T09:25:26Z", "message": "PLANNER-1913: [Task assignment] Uses information synchronization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88d0458f4be44ba357bd30afa3413fec2f766421", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/88d0458f4be44ba357bd30afa3413fec2f766421", "committedDate": "2020-04-10T15:51:55Z", "message": "PLANNER-1913: [Task assignment] Uses information synchronization"}, "afterCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/106184a721b629e047e90f9508cee48e22f5580b", "committedDate": "2020-04-11T09:25:26Z", "message": "PLANNER-1913: [Task assignment] Uses information synchronization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODA0MTM2", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#pullrequestreview-391804136", "createdAt": "2020-04-11T22:10:15Z", "commit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoxMDoxNVrOGEQaSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoxOTozM1rOGEQdVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjM2Mg==", "bodyText": "If this method returned a Stream, hasPinnedTasks(...) could be made more efficient by using anyMatch().", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407116362", "createdAt": "2020-04-11T22:10:15Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java", "diffHunk": "@@ -93,16 +94,38 @@ public static int countMatchingLabels(Task task, User user, String labelName) {\n     }\n \n     /**\n+     * Gets the list of tasks linked to a TaskOrUser.\n      * @param taskOrUser a TaskOrUser instance for the evaluation.\n      * @return a list with the tasks linked to the taskOrUser.\n      */\n-    public static List<Task> extractTaskList(TaskOrUser taskOrUser) {\n-        List<Task> result = new ArrayList<>();\n-        Task task = taskOrUser.getNextTask();\n-        while (task != null) {\n-            result.add(task);\n-            task = task.getNextTask();\n+    public static List<Task> extractTasks(TaskOrUser taskOrUser) {\n+        return extractTasks(taskOrUser, testedTask -> true);\n+    }\n+\n+    /**\n+     * Gets the list of tasks linked to a TaskOrUser.\n+     * @param taskOrUser a TaskOrUser instance for the evaluation.\n+     * @param predicate a predicate for filtering the tasks that will be included in the result.\n+     * @return a list with the tasks linked to the taskOrUser that verifies the filtering predicate.\n+     */\n+    public static List<Task> extractTasks(TaskOrUser taskOrUser, Predicate<Task> predicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjQ2MQ==", "bodyText": "In order for this method to be properly lazy, it'd have to use Stream.generate() here.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407116461", "createdAt": "2020-04-11T22:11:50Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java", "diffHunk": "@@ -93,16 +94,38 @@ public static int countMatchingLabels(Task task, User user, String labelName) {\n     }\n \n     /**\n+     * Gets the list of tasks linked to a TaskOrUser.\n      * @param taskOrUser a TaskOrUser instance for the evaluation.\n      * @return a list with the tasks linked to the taskOrUser.\n      */\n-    public static List<Task> extractTaskList(TaskOrUser taskOrUser) {\n-        List<Task> result = new ArrayList<>();\n-        Task task = taskOrUser.getNextTask();\n-        while (task != null) {\n-            result.add(task);\n-            task = task.getNextTask();\n+    public static List<Task> extractTasks(TaskOrUser taskOrUser) {\n+        return extractTasks(taskOrUser, testedTask -> true);\n+    }\n+\n+    /**\n+     * Gets the list of tasks linked to a TaskOrUser.\n+     * @param taskOrUser a TaskOrUser instance for the evaluation.\n+     * @param predicate a predicate for filtering the tasks that will be included in the result.\n+     * @return a list with the tasks linked to the taskOrUser that verifies the filtering predicate.\n+     */\n+    public static List<Task> extractTasks(TaskOrUser taskOrUser, Predicate<Task> predicate) {\n+        final List<Task> result = new ArrayList<>();\n+        Task nextTask = taskOrUser != null ? taskOrUser.getNextTask() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjYzOA==", "bodyText": "I prefer the following:\nif (workingUser == null) {\n    return;\n}\n...\n\nAvoids nesting, and therefore allows for code that is easier to understand.\nBut this is purely optional.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407116638", "createdAt": "2020-04-11T22:13:42Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/realtime/DisableUserProblemFactChange.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.core.model.solver.realtime;\n+\n+import org.kie.server.services.taskassigning.core.model.TaskAssigningSolution;\n+import org.kie.server.services.taskassigning.core.model.User;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.solver.ProblemFactChange;\n+\n+import static org.kie.server.services.taskassigning.core.model.solver.realtime.ProblemFactChangeUtil.releaseNonPinnedTasks;\n+\n+public class DisableUserProblemFactChange implements ProblemFactChange<TaskAssigningSolution> {\n+\n+    private User user;\n+\n+    public DisableUserProblemFactChange(User user) {\n+        this.user = user;\n+    }\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    @Override\n+    public void doChange(ScoreDirector<TaskAssigningSolution> scoreDirector) {\n+        final User workingUser = scoreDirector.lookUpWorkingObjectOrReturnNull(user);\n+        if (workingUser != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjcxMg==", "bodyText": "Any reason why the iteration needs to be backwards?\nOtherwise may be replaced by tasks.forEach(...).", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407116712", "createdAt": "2020-04-11T22:14:32Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/realtime/ProblemFactChangeUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.core.model.solver.realtime;\n+\n+import java.util.List;\n+\n+import org.kie.server.services.taskassigning.core.model.Task;\n+import org.kie.server.services.taskassigning.core.model.TaskAssigningSolution;\n+import org.kie.server.services.taskassigning.core.model.User;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n+\n+import static org.kie.server.services.taskassigning.core.model.Task.PREVIOUS_TASK_OR_USER;\n+import static org.kie.server.services.taskassigning.core.model.solver.TaskHelper.extractTasks;\n+\n+public class ProblemFactChangeUtil {\n+\n+    private ProblemFactChangeUtil() {\n+    }\n+\n+    /**\n+     * Releases all the tasks linked to a given user.\n+     * @param workingUser a user instance to get the tasks from. Important! the user must belong to the solution\n+     * currently managed by the scoreDirector, i.e. the scoreDirector.getWorkingSolution().\n+     * @param scoreDirector a scoreDirector instance for executing the required beforeVariableChanged and\n+     * afterVariableChanged methods.\n+     */\n+    public static void releaseAllTasks(User workingUser, ScoreDirector<TaskAssigningSolution> scoreDirector) {\n+        releaseTasks(workingUser, true, scoreDirector);\n+    }\n+\n+    /**\n+     * Releases all the non-pinned tasks linked to a given user.\n+     * @param workingUser a user instance to get the tasks from. Important! the user must belong to the solution\n+     * currently managed by the scoreDirector, i.e. the scoreDirector.getWorkingSolution().\n+     * @param scoreDirector a scoreDirector instance for executing the required beforeVariableChanged and\n+     * afterVariableChanged methods.\n+     */\n+    public static void releaseNonPinnedTasks(User workingUser, ScoreDirector<TaskAssigningSolution> scoreDirector) {\n+        releaseTasks(workingUser, false, scoreDirector);\n+    }\n+\n+    private static void releaseTasks(User workingUser, boolean includePinnedTasks, ScoreDirector<TaskAssigningSolution> scoreDirector) {\n+        final List<Task> tasks = extractTasks(workingUser, testedTask -> includePinnedTasks || !testedTask.isPinned());\n+        Task task;\n+        for (int index = tasks.size() - 1; index >= 0; index--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjg3OA==", "bodyText": "Same suggestion regarding nesting.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407116878", "createdAt": "2020-04-11T22:16:26Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/realtime/RemoveUserProblemFactChange.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.core.model.solver.realtime;\n+\n+import java.util.ArrayList;\n+\n+import org.kie.server.services.taskassigning.core.model.TaskAssigningSolution;\n+import org.kie.server.services.taskassigning.core.model.User;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.solver.ProblemFactChange;\n+\n+import static org.kie.server.services.taskassigning.core.model.solver.realtime.ProblemFactChangeUtil.releaseAllTasks;\n+\n+public class RemoveUserProblemFactChange implements ProblemFactChange<TaskAssigningSolution> {\n+\n+    private User user;\n+\n+    public RemoveUserProblemFactChange(User user) {\n+        this.user = user;\n+    }\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    @Override\n+    public void doChange(ScoreDirector<TaskAssigningSolution> scoreDirector) {\n+        final TaskAssigningSolution workingSolution = scoreDirector.getWorkingSolution();\n+        final User workingUser = scoreDirector.lookUpWorkingObjectOrReturnNull(user);\n+        if (workingUser != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjg5MQ==", "bodyText": "Same suggestion regarding nesting.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407116891", "createdAt": "2020-04-11T22:16:42Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/realtime/UserPropertyChangeProblemFactChange.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.core.model.solver.realtime;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.kie.server.services.taskassigning.core.model.Group;\n+import org.kie.server.services.taskassigning.core.model.TaskAssigningSolution;\n+import org.kie.server.services.taskassigning.core.model.User;\n+import org.optaplanner.core.impl.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.solver.ProblemFactChange;\n+\n+import static org.kie.server.services.taskassigning.core.model.solver.realtime.ProblemFactChangeUtil.releaseNonPinnedTasks;\n+\n+public class UserPropertyChangeProblemFactChange implements ProblemFactChange<TaskAssigningSolution> {\n+\n+    private User user;\n+\n+    private boolean enabled;\n+\n+    private Map<String, Object> attributes;\n+\n+    private Map<String, Set<Object>> labelValues;\n+\n+    private Set<Group> groups;\n+\n+    public UserPropertyChangeProblemFactChange(User user, boolean enabled, Map<String, Object> attributes,\n+                                               Map<String, Set<Object>> labelValues, Set<Group> groups) {\n+        this.user = user;\n+        this.enabled = enabled;\n+        this.attributes = attributes;\n+        this.labelValues = labelValues;\n+        this.groups = groups;\n+    }\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public Map<String, Object> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public Map<String, Set<Object>> getLabelValues() {\n+        return labelValues;\n+    }\n+\n+    public Set<Group> getGroups() {\n+        return groups;\n+    }\n+\n+    @Override\n+    public void doChange(ScoreDirector<TaskAssigningSolution> scoreDirector) {\n+        final User workingUser = scoreDirector.lookUpWorkingObjectOrReturnNull(user);\n+        if (workingUser != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzE0Mw==", "bodyText": "You can avoid creating the updatedUserList if you move the for cycle below into a forEach() here.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r407117143", "createdAt": "2020-04-11T22:19:33Z", "author": {"login": "triceo"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/SolutionChangesBuilder.java", "diffHunk": "@@ -267,6 +298,54 @@ private void addTaskChanges(final Task task,\n         }\n     }\n \n+    private void addUserChanges(final Map<String, User> usersById,\n+                                final List<AddUserProblemFactChange> newUserChanges,\n+                                final List<ProblemFactChange<TaskAssigningSolution>> updateUserChanges) {\n+\n+        final List<User> updatedUserList = filterDuplicates(externalUserList)\n+                .filter(externalUser -> !IS_PLANNING_USER.test(externalUser.getId()))\n+                .map(UserUtil::fromExternalUser)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDk3MTc4", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#pullrequestreview-393497178", "createdAt": "2020-04-15T06:49:30Z", "commit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0OTozMVrOGFr_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0OTozMVrOGFr_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNjgwNg==", "bodyText": "Java streams offer a method distinct [1] to avoid duplicate objects in the stream.  The only prerequisite here is that the User class has the equals method based on the id.\n[1] https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#distinct--", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#discussion_r408616806", "createdAt": "2020-04-15T06:49:31Z", "author": {"login": "rsynek"}, "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/util/UserUtil.java", "diffHunk": "@@ -50,15 +50,31 @@ public static boolean isUser(String userType) {\n         return UserType.USER.equals(userType);\n     }\n \n-    public static List<Task> extractTasks(User user, Predicate<Task> predicate) {\n-        List<Task> result = new ArrayList<>();\n-        Task nextTask = user != null ? user.getNextTask() : null;\n-        while (nextTask != null) {\n-            if (predicate.test(nextTask)) {\n-                result.add(nextTask);\n-            }\n-            nextTask = nextTask.getNextTask();\n+    /**\n+     * Given a Collection of external users, normally returned by the UserSystemService, produces the filtering of the\n+     * elements with the following criteria:\n+     * 1) Null elements are removed from the result.\n+     * 2) Duplicate users are removed from the result. Since the external users implementation is unknown and the identifier\n+     * of a user is the \"id\", two users are considered to be the same if they have the same \"id\". Meaning that if two users\n+     * with the same \"id\" are encountered only one instance will be included in the result, typically the first instance\n+     * found.\n+     * @param externalUsers a collection with the external users to filter.\n+     * @return a Stream with the filtered users.\n+     */\n+    public static Stream<org.kie.server.services.taskassigning.user.system.api.User> filterDuplicates(Collection<org.kie.server.services.taskassigning.user.system.api.User> externalUsers) {\n+        if (externalUsers == null) {\n+            return Stream.empty();\n+        } else {\n+            final Set<String> included = new HashSet<>();\n+            return externalUsers.stream()\n+                    .filter(Objects::nonNull)\n+                    .filter(externalUser -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106184a721b629e047e90f9508cee48e22f5580b"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db961ad923f57b04e70f9ccf27b38b7ed799d827", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/db961ad923f57b04e70f9ccf27b38b7ed799d827", "committedDate": "2020-04-16T08:21:50Z", "message": "PLANNER-1913: [Task assignment] Uses information synchronization\n    - Revision suggestions I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjY2MTEy", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2063#pullrequestreview-395266112", "createdAt": "2020-04-17T08:37:37Z", "commit": {"oid": "db961ad923f57b04e70f9ccf27b38b7ed799d827"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1388, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}