{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjA1Nzc3", "number": 2119, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMjo0MVrOEHfLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyMToyNVrOEIaimA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjg2MjQzOnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ArtifactItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMjo0MVrOGm3_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyMDo0M1rOGni5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNjUxMw==", "bodyText": "Copyright header is missing", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443416513", "createdAt": "2020-06-22T09:02:41Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ArtifactItem.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.kie.maven.plugin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExOTM0NA==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444119344", "createdAt": "2020-06-23T10:20:43Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ArtifactItem.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.kie.maven.plugin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNjUxMw=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjk0MzUyOnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOToyNTo0NFrOGm4zPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyMToyNlrOGni62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyOTY5Mw==", "bodyText": "Do you really wanna keep it with default access modifier? shouldn't be private?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443429693", "createdAt": "2020-06-22T09:25:44Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");\n+            if (!outputFolder.exists()) {\n+                outputFolder.mkdirs();\n+            }\n+            getLog().info(\"Create directory: \" + outputFolder);\n+\n+            for (ArtifactItem artifactItem : artifactItems) {\n+                DefaultDependableCoordinate coordinate = new DefaultDependableCoordinate();\n+                coordinate.setArtifactId(artifactItem.getArtifactId());\n+                coordinate.setGroupId(artifactItem.getGroupId());\n+                coordinate.setVersion(artifactItem.getVersion());\n+                coordinate.setClassifier(artifactItem.getClassifier());\n+                coordinate.setType(artifactItem.getType());\n+\n+                getLog().info(\"Resolving \" + coordinate + \" with transitive dependencies\");\n+\n+                ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n+                Settings settings = session.getSettings();\n+                repositorySystem.injectMirror(repoList, settings.getMirrors());\n+                repositorySystem.injectProxy(repoList, settings.getProxies());\n+                repositorySystem.injectAuthentication(repoList, settings.getServers());\n+                buildingRequest.setRemoteRepositories(repoList);\n+\n+                Iterable<ArtifactResult> results = dependencyResolver.resolveDependencies(buildingRequest, coordinate, null);\n+                for (ArtifactResult artifact : results) {\n+                    getLog().info(\"Copying dependencies: \" + artifact.getArtifact());\n+                    ArtifactResult artifactResolverResult = artifactResolver.resolveArtifact(buildingRequest, toArtifactCoordinate(artifact.getArtifact()));\n+                    Artifact artifactResolved = artifactResolverResult.getArtifact();\n+                    File local = artifactResolved.getFile();\n+                    Files.copy(local, new File(outputFolder, local.getName()));\n+                }\n+ \n+            }\n+        } catch (IOException | ArtifactResolverException | DependencyResolverException e) {\n+            throw new MojoExecutionException(\"Couldn't download artifact: \" + e.getMessage(), e);\n+        }\n+\n+    }\n+\n+    private ArtifactCoordinate toArtifactCoordinate(Artifact dependableCoordinate) {\n+        ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler(dependableCoordinate.getType());\n+        DefaultArtifactCoordinate artifactCoordinate = new DefaultArtifactCoordinate();\n+        artifactCoordinate.setGroupId(dependableCoordinate.getGroupId());\n+        artifactCoordinate.setArtifactId(dependableCoordinate.getArtifactId());\n+        artifactCoordinate.setVersion(dependableCoordinate.getVersion());\n+        artifactCoordinate.setClassifier(dependableCoordinate.getClassifier());\n+        artifactCoordinate.setExtension(artifactHandler.getExtension());\n+        return artifactCoordinate;\n+    }\n+\n+    ArtifactRepository parseRepository(String repo, ArtifactRepositoryPolicy policy) throws MojoFailureException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExOTc3MQ==", "bodyText": "changed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444119771", "createdAt": "2020-06-23T10:21:26Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");\n+            if (!outputFolder.exists()) {\n+                outputFolder.mkdirs();\n+            }\n+            getLog().info(\"Create directory: \" + outputFolder);\n+\n+            for (ArtifactItem artifactItem : artifactItems) {\n+                DefaultDependableCoordinate coordinate = new DefaultDependableCoordinate();\n+                coordinate.setArtifactId(artifactItem.getArtifactId());\n+                coordinate.setGroupId(artifactItem.getGroupId());\n+                coordinate.setVersion(artifactItem.getVersion());\n+                coordinate.setClassifier(artifactItem.getClassifier());\n+                coordinate.setType(artifactItem.getType());\n+\n+                getLog().info(\"Resolving \" + coordinate + \" with transitive dependencies\");\n+\n+                ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n+                Settings settings = session.getSettings();\n+                repositorySystem.injectMirror(repoList, settings.getMirrors());\n+                repositorySystem.injectProxy(repoList, settings.getProxies());\n+                repositorySystem.injectAuthentication(repoList, settings.getServers());\n+                buildingRequest.setRemoteRepositories(repoList);\n+\n+                Iterable<ArtifactResult> results = dependencyResolver.resolveDependencies(buildingRequest, coordinate, null);\n+                for (ArtifactResult artifact : results) {\n+                    getLog().info(\"Copying dependencies: \" + artifact.getArtifact());\n+                    ArtifactResult artifactResolverResult = artifactResolver.resolveArtifact(buildingRequest, toArtifactCoordinate(artifact.getArtifact()));\n+                    Artifact artifactResolved = artifactResolverResult.getArtifact();\n+                    File local = artifactResolved.getFile();\n+                    Files.copy(local, new File(outputFolder, local.getName()));\n+                }\n+ \n+            }\n+        } catch (IOException | ArtifactResolverException | DependencyResolverException e) {\n+            throw new MojoExecutionException(\"Couldn't download artifact: \" + e.getMessage(), e);\n+        }\n+\n+    }\n+\n+    private ArtifactCoordinate toArtifactCoordinate(Artifact dependableCoordinate) {\n+        ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler(dependableCoordinate.getType());\n+        DefaultArtifactCoordinate artifactCoordinate = new DefaultArtifactCoordinate();\n+        artifactCoordinate.setGroupId(dependableCoordinate.getGroupId());\n+        artifactCoordinate.setArtifactId(dependableCoordinate.getArtifactId());\n+        artifactCoordinate.setVersion(dependableCoordinate.getVersion());\n+        artifactCoordinate.setClassifier(dependableCoordinate.getClassifier());\n+        artifactCoordinate.setExtension(artifactHandler.getExtension());\n+        return artifactCoordinate;\n+    }\n+\n+    ArtifactRepository parseRepository(String repo, ArtifactRepositoryPolicy policy) throws MojoFailureException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyOTY5Mw=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjk1MDU2OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOToyNzo0MlrOGm43mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyMjowMlrOGni8Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMDgxMQ==", "bodyText": "Wouldn't make more sense to rename this class to more specific name such as PackageKjarDependenciesMojo or PackageDependenciesMojo?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443430811", "createdAt": "2020-06-22T09:27:42Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageMojo extends AbstractKieMojo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMDA5OQ==", "bodyText": "PackageKjarDependenciesMojo sounds good.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444120099", "createdAt": "2020-06-23T10:22:02Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageMojo extends AbstractKieMojo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMDgxMQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQwOTIzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo1Mjo1OFrOGm9WfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyMzoxN1rOGni-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNDI1Mg==", "bodyText": "Maybe default access modifier is more suitable here, instead of public as this method is only used within all classes in this package?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443504252", "createdAt": "2020-06-22T11:52:58Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -223,7 +224,7 @@ public void destroy() {\n         return this.context.getServerExtensions();\n     }\n \n-    protected KieServerInfo getInfoInternal() {\n+    public KieServerInfo getInfoInternal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMDc0MA==", "bodyText": "removed a set as protected", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444120740", "createdAt": "2020-06-23T10:23:17Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -223,7 +224,7 @@ public void destroy() {\n         return this.context.getServerExtensions();\n     }\n \n-    protected KieServerInfo getInfoInternal() {\n+    public KieServerInfo getInfoInternal() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNDI1Mg=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQzMTE4OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjowMDowNlrOGm9kWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNDoyMVrOGnjA7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNzgwMQ==", "bodyText": "Please remove metadata parameter as it's not used.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443507801", "createdAt": "2020-06-22T12:00:06Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -360,6 +362,14 @@ protected KieServerInfo getInfoInternal() {\n         }\n     }\n \n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new KieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTMyNg==", "bodyText": "metadata is required for inmutable spring boot create Internal Kie Container.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444121326", "createdAt": "2020-06-23T10:24:21Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -360,6 +362,14 @@ protected KieServerInfo getInfoInternal() {\n         }\n     }\n \n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new KieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNzgwMQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ2MTQ5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxMDoxMFrOGm93bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1NjoyOVrOGpZMqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMjY4NA==", "bodyText": "Shouldn't we pass metadata to the getReleaseUpdateParameters call? Otherwise, metadata param won't be used and should be removed from here.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443512684", "createdAt": "2020-06-22T12:10:10Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -974,8 +989,8 @@ private Message updateKieContainerToVersion(KieContainerInstanceImpl kci, Releas\n         return response;\n     }\n \n-    private void prepareUpdateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n-        Map<String, Object> parameters = getReleaseUpdateParameters(releaseId, messages, resetBeforeUpdate);\n+    private void prepareUpdateExtensions(KieModuleMetaData metadata, KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n+        Map<String, Object> parameters = getReleaseUpdateParameters(null, releaseId, kci.getKieContainer(), messages, resetBeforeUpdate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2ODA4Nw==", "bodyText": "any update here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444968087", "createdAt": "2020-06-24T15:10:34Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -974,8 +989,8 @@ private Message updateKieContainerToVersion(KieContainerInstanceImpl kci, Releas\n         return response;\n     }\n \n-    private void prepareUpdateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n-        Map<String, Object> parameters = getReleaseUpdateParameters(releaseId, messages, resetBeforeUpdate);\n+    private void prepareUpdateExtensions(KieModuleMetaData metadata, KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n+        Map<String, Object> parameters = getReleaseUpdateParameters(null, releaseId, kci.getKieContainer(), messages, resetBeforeUpdate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMjY4NA=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1NzY0MA==", "bodyText": "changed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446057640", "createdAt": "2020-06-26T08:56:29Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -974,8 +989,8 @@ private Message updateKieContainerToVersion(KieContainerInstanceImpl kci, Releas\n         return response;\n     }\n \n-    private void prepareUpdateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n-        Map<String, Object> parameters = getReleaseUpdateParameters(releaseId, messages, resetBeforeUpdate);\n+    private void prepareUpdateExtensions(KieModuleMetaData metadata, KieContainerInstanceImpl kci, ReleaseId releaseId, List<Message> messages, boolean resetBeforeUpdate) {\n+        Map<String, Object> parameters = getReleaseUpdateParameters(null, releaseId, kci.getKieContainer(), messages, resetBeforeUpdate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMjY4NA=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ3MDY5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxMzowNFrOGm985w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxMTo1M1rOGoWwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNDA4Nw==", "bodyText": "It's only use within classes in the same package, so maybe it's better to use default access modifier instead.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443514087", "createdAt": "2020-06-22T12:13:04Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -1029,7 +1052,7 @@ private void updateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId,\n         return parameters;\n     }\n \n-    protected KieServerController getController() {\n+    public KieServerController getController() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2OTA1MQ==", "bodyText": "any update here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444969051", "createdAt": "2020-06-24T15:11:53Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/KieServerImpl.java", "diffHunk": "@@ -1029,7 +1052,7 @@ private void updateExtensions(KieContainerInstanceImpl kci, ReleaseId releaseId,\n         return parameters;\n     }\n \n-    protected KieServerController getController() {\n+    public KieServerController getController() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNDA4Nw=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ5OTUwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMTo0NVrOGm-OrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1Mzo0NFrOGpZHGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODYzNg==", "bodyText": "Can be replaced with method reference\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));\n          \n          \n            \n                    String str = containers.stream().map(KieContainerResource::toString).collect(Collectors.joining(\"\\n\\t\"));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443518636", "createdAt": "2020-06-22T12:21:45Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/ContainerManager.java", "diffHunk": "@@ -34,11 +35,14 @@ public void installContainers(KieServerImpl kieServer, Set<KieContainerResource>\n     }\n \n     public void installContainersSync(KieServerImpl kieServer, Set<KieContainerResource> containers, KieServerState currentState, KieServerSetup kieServerSetup) {\n-        logger.info(\"About to install containers '{}' on kie server '{}'\", containers, kieServer);\n         if (containers == null) {\n             kieServer.markAsReady();\n             return;\n         }\n+\n+        String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NDUwMA==", "bodyText": "any update on this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444974500", "createdAt": "2020-06-24T15:19:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/ContainerManager.java", "diffHunk": "@@ -34,11 +35,14 @@ public void installContainers(KieServerImpl kieServer, Set<KieContainerResource>\n     }\n \n     public void installContainersSync(KieServerImpl kieServer, Set<KieContainerResource> containers, KieServerState currentState, KieServerSetup kieServerSetup) {\n-        logger.info(\"About to install containers '{}' on kie server '{}'\", containers, kieServer);\n         if (containers == null) {\n             kieServer.markAsReady();\n             return;\n         }\n+\n+        String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODYzNg=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1NjIxOQ==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446056219", "createdAt": "2020-06-26T08:53:44Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/ContainerManager.java", "diffHunk": "@@ -34,11 +35,14 @@ public void installContainers(KieServerImpl kieServer, Set<KieContainerResource>\n     }\n \n     public void installContainersSync(KieServerImpl kieServer, Set<KieContainerResource> containers, KieServerState currentState, KieServerSetup kieServerSetup) {\n-        logger.info(\"About to install containers '{}' on kie server '{}'\", containers, kieServer);\n         if (containers == null) {\n             kieServer.markAsReady();\n             return;\n         }\n+\n+        String str = containers.stream().map(e -> e.toString()).collect(Collectors.joining(\"\\n\\t\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODYzNg=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzgxNzMyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo0Njo0M1rOGnBVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1NDozN1rOGpZI3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU2OTU3MA==", "bodyText": "installContainersSync and installContainers methods are doing the same, with same parameters. I know it's already doing this way in some other classes, but just out of curiosity - this is only in case we wanted to separate some logic methods for doing it async/sync way? such as:\nhttps://github.com/kiegroup/droolsjbpm-integration/blob/master/kie-server-parent/kie-server-remote/kie-server-jms/src/main/java/org/kie/server/jms/ContainerManagerEJB.java#L38\n(though it will call the installContainersSync method at the end)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443569570", "createdAt": "2020-06-22T13:46:43Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.impl;\n+\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.storage.KieServerState;\n+\n+\n+public class InmutableContainerStartupStrategy implements StartupStrategy {\n+\n+    @Override\n+    public void startup(KieServerImpl kieServer, ContainerManager containerManager, KieServerState currentState, AtomicBoolean kieServerActive) {\n+        KieServerInfo kieServerInfo = kieServer.getInfoInternal();\n+        KieServerSetup kieServerSetup = kieServer.getController().connect(kieServerInfo);\n+\n+        Set<KieContainerResource> containers = kieServerSetup.getContainers();\n+\n+        kieServer.addServerStatusMessage(kieServerInfo);\n+        if (Boolean.parseBoolean(currentState.getConfiguration().getConfigItemValue(KieServerConstants.CFG_SYNC_DEPLOYMENT, \"false\"))) {\n+            containerManager.installContainersSync(kieServer, containers, currentState, kieServerSetup);\n+        } else {\n+            containerManager.installContainers(kieServer, containers, currentState, kieServerSetup);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1NjY2OQ==", "bodyText": "mimic the rest of the startup strategy containers.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446056669", "createdAt": "2020-06-26T08:54:37Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.impl;\n+\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.storage.KieServerState;\n+\n+\n+public class InmutableContainerStartupStrategy implements StartupStrategy {\n+\n+    @Override\n+    public void startup(KieServerImpl kieServer, ContainerManager containerManager, KieServerState currentState, AtomicBoolean kieServerActive) {\n+        KieServerInfo kieServerInfo = kieServer.getInfoInternal();\n+        KieServerSetup kieServerSetup = kieServer.getController().connect(kieServerInfo);\n+\n+        Set<KieContainerResource> containers = kieServerSetup.getContainers();\n+\n+        kieServer.addServerStatusMessage(kieServerInfo);\n+        if (Boolean.parseBoolean(currentState.getConfiguration().getConfigItemValue(KieServerConstants.CFG_SYNC_DEPLOYMENT, \"false\"))) {\n+            containerManager.installContainersSync(kieServer, containers, currentState, kieServerSetup);\n+        } else {\n+            containerManager.installContainers(kieServer, containers, currentState, kieServerSetup);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU2OTU3MA=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzkzMjc3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-drools/src/main/java/org/kie/server/services/drools/DroolsKieServerExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoxMzoxNVrOGnCdrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxOToxMVrOGoXEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODAxNQ==", "bodyText": "Why skipping this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443588015", "createdAt": "2020-06-22T14:13:15Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-drools/src/main/java/org/kie/server/services/drools/DroolsKieServerExtension.java", "diffHunk": "@@ -89,12 +89,16 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+\n         // do any other bootstrapping rule service requires\n         Set<Class<?>> extraClasses = new HashSet<Class<?>>();\n \n         // create kbases so declared types can be created\n         Collection<String> kbases = kieContainerInstance.getKieContainer().getKieBaseNames();\n         for (String kbase : kbases) {\n+            if (kbase.startsWith(\"KiePMML\")) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NDI2Ng==", "bodyText": "any update on this?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444974266", "createdAt": "2020-06-24T15:19:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-drools/src/main/java/org/kie/server/services/drools/DroolsKieServerExtension.java", "diffHunk": "@@ -89,12 +89,16 @@ public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {\n \n     @Override\n     public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {\n+\n         // do any other bootstrapping rule service requires\n         Set<Class<?>> extraClasses = new HashSet<Class<?>>();\n \n         // create kbases so declared types can be created\n         Collection<String> kbases = kieContainerInstance.getKieContainer().getKieBaseNames();\n         for (String kbase : kbases) {\n+            if (kbase.startsWith(\"KiePMML\")) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODAxNQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA3MDIwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0MDozMlrOGnDwmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1Njo1MlrOGpZNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (ksession != null) {\n          \n          \n            \n                        if (ksession != null && !ksession.isEmpty()) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443609241", "createdAt": "2020-06-22T14:40:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MDA4NA==", "bodyText": "any update here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444970084", "createdAt": "2020-06-24T15:13:20Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTI0MQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1Nzg0Nw==", "bodyText": "that should not be possible.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446057847", "createdAt": "2020-06-26T08:56:52Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTI0MQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA3MzExOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0MTowOFrOGnDyZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNToyMVrOGnjDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (kbase != null) {\n          \n          \n            \n                        if (kbase != null && !kbase.isEmpty()) {", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443609701", "createdAt": "2020-06-22T14:41:08Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {\n+                unit.setKsessionName(ksession);\n+            }\n             String kbase = config.getConfigItemValue(KieServerConstants.PCFG_KIE_BASE);\n-            unit.setKbaseName(kbase);\n+            if (kbase != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTkwMw==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444121903", "createdAt": "2020-06-23T10:25:21Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/JbpmKieServerExtension.java", "diffHunk": "@@ -420,9 +423,13 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance\n                 unit.setMergeMode(MergeMode.valueOf(mergeMode));\n             }\n             String ksession = config.getConfigItemValue(KieServerConstants.PCFG_KIE_SESSION);\n-            unit.setKsessionName(ksession);\n+            if (ksession != null) {\n+                unit.setKsessionName(ksession);\n+            }\n             String kbase = config.getConfigItemValue(KieServerConstants.PCFG_KIE_BASE);\n-            unit.setKbaseName(kbase);\n+            if (kbase != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwOTcwMQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDIxNzg0OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieContainerInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxMzoyN1rOGnFObA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNToxM1rOGnjC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMzI2MA==", "bodyText": "why false?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443633260", "createdAt": "2020-06-22T15:13:27Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieContainerInstanceImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.KieServerImpl;\n+\n+\n+public class InmutableSpringBootKieContainerInstanceImpl extends KieContainerInstanceImpl {\n+\n+    public InmutableSpringBootKieContainerInstanceImpl(String containerId, KieContainerStatus status, InternalKieContainer kieContainer, ReleaseId releaseId, KieServerImpl kieServer) {\n+        super(containerId, status, kieContainer, releaseId, kieServer);\n+    }\n+\n+    @Override\n+    protected boolean updateReleaseId() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTgxMg==", "bodyText": "class path container does not allow updates.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444121812", "createdAt": "2020-06-23T10:25:13Z", "author": {"login": "elguardian"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieContainerInstanceImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.KieServerImpl;\n+\n+\n+public class InmutableSpringBootKieContainerInstanceImpl extends KieContainerInstanceImpl {\n+\n+    public InmutableSpringBootKieContainerInstanceImpl(String containerId, KieContainerStatus status, InternalKieContainer kieContainer, ReleaseId releaseId, KieServerImpl kieServer) {\n+        super(containerId, status, kieContainer, releaseId, kieServer);\n+    }\n+\n+    @Override\n+    protected boolean updateReleaseId() {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMzI2MA=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDIzMjczOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxNzowOFrOGnFYAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNjoxNFrOGnjFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNTcxNQ==", "bodyText": "Lambda can be replaced with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        serverSetup.setContainers(containers.stream().collect(Collectors.toSet()));\n          \n          \n            \n                        serverSetup.setContainers(new HashSet<>(containers));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443635715", "createdAt": "2020-06-22T15:17:08Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {\n+\n+        @Override\n+        public void disconnect(KieServerInfo serverInfo) {}\n+\n+        @Override\n+        public KieServerSetup connect(KieServerInfo serverInfo) {\n+            KieServerSetup serverSetup = new KieServerSetup();\n+            serverSetup.setContainers(containers.stream().collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMjM5MA==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444122390", "createdAt": "2020-06-23T10:26:14Z", "author": {"login": "elguardian"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {\n+\n+        @Override\n+        public void disconnect(KieServerInfo serverInfo) {}\n+\n+        @Override\n+        public KieServerSetup connect(KieServerInfo serverInfo) {\n+            KieServerSetup serverSetup = new KieServerSetup();\n+            serverSetup.setContainers(containers.stream().collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNTcxNQ=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI0OTE3OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyMTowNlrOGnFitg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyMTowNlrOGnFitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzODQ1NA==", "bodyText": "Shouldn't we restrict access to this inner class? maybe private instead?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443638454", "createdAt": "2020-06-22T15:21:06Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI3MDExOnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyNTo1N1rOGnFv9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNjo0MlrOGnjF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MTg0Nw==", "bodyText": "Just add a small comment stating why this method body is empty.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r443641847", "createdAt": "2020-06-22T15:25:57Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {\n+\n+        @Override\n+        public void disconnect(KieServerInfo serverInfo) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMjYxMw==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444122613", "createdAt": "2020-06-23T10:26:42Z", "author": {"login": "elguardian"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/InmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class InmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public InmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {\n+\n+        @Override\n+        public void disconnect(KieServerInfo serverInfo) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MTg0Nw=="}, "originalCommit": {"oid": "8416d2db1f2b1768b4297a7d41b6a2c1f8bd5ac4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTE0NDg1OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo1MDo1OFrOGoI_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxNzo1MlrOGpWS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MzUwOQ==", "bodyText": "outputDirectory should be readonly otherwise, if this is modified, dependencies might not necessarily be packaged in the generated jar file afterwards in line:\n\n  \n    \n      droolsjbpm-integration/kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java\n    \n    \n         Line 168\n      in\n      968e8d0\n    \n    \n    \n    \n\n        \n          \n           Files.copy(local, new File(outputFolder, local.getName()));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444743509", "createdAt": "2020-06-24T08:50:58Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDA2NQ==", "bodyText": "sure", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446010065", "createdAt": "2020-06-26T07:17:52Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MzUwOQ=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTIzMjQyOnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNDo0OFrOGoJ2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxODowMVrOGpWTHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzU5NQ==", "bodyText": "maven build is packaging deps in BOOT-INF/classes/KIE-INF/lib/, having following folder structure inside the jar:\n\nBOO-INF\n- classes/KIE-INF/lib\nMETA-INF\n\nwould it make more sense to have a folder structure like instead:\n\nBOO-INF\nKIE-INF\nMETA-INF\n\nOr why not just moving deps to the BOOT-INF/lib folder instead of creating a new folder structure? any potential issue with the classloader?\nwdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444757595", "createdAt": "2020-06-24T09:14:48Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMzU4NA==", "bodyText": "I will check if it is possible to workaround spring boot plugin. don't commit to anything", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r445433584", "createdAt": "2020-06-25T09:37:31Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzU5NQ=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNjIzNQ==", "bodyText": "sure, thanks", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r445436235", "createdAt": "2020-06-25T09:42:10Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzU5NQ=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDE0Mw==", "bodyText": "nope", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446010143", "createdAt": "2020-06-26T07:18:01Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();\n+\n+    @Component\n+    private ArtifactResolver artifactResolver;\n+\n+    @Component\n+    private DependencyResolver dependencyResolver;\n+\n+    @Parameter(defaultValue = \"${project.remoteArtifactRepositories}\", readonly = true, required = true)\n+    private List<ArtifactRepository> pomRemoteRepositories;\n+\n+    @Parameter(property = \"remoteRepositories\")\n+    private String remoteRepositories;\n+\n+    @Component\n+    private RepositorySystem repositorySystem;\n+\n+    @Component\n+    private ArtifactHandlerManager artifactHandlerManager;\n+\n+    @Component(role = ArtifactRepositoryLayout.class)\n+    private Map<String, ArtifactRepositoryLayout> repositoryLayouts;\n+\n+    @Parameter\n+    private List<ArtifactItem> artifactItems;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            if (artifactItems == null || artifactItems.isEmpty()) {\n+                getLog().info(\"Skipping plugin execution\");\n+                return;\n+            }\n+\n+            ArtifactRepositoryPolicy always =\n+                    new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,\n+                                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);\n+\n+            List<ArtifactRepository> repoList = new ArrayList<>();\n+\n+            if (pomRemoteRepositories != null) {\n+                repoList.addAll(pomRemoteRepositories);\n+            }\n+\n+            if (remoteRepositories != null) {\n+                // Use the same format as in the deploy plugin id::layout::url\n+                String[] repos = StringUtils.split(remoteRepositories, \",\");\n+                for (String repo : repos) {\n+                    repoList.add(parseRepository(repo, always));\n+                }\n+            }\n+\n+            File outputFolder = new File(outputDirectory + \"/KIE-INF/lib\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzU5NQ=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI2NjA3OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMTo1NVrOGoT9ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMTo1NVrOGoT9ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzIzNw==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444923237", "createdAt": "2020-06-24T14:11:55Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI2Nzc5OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMjoyMVrOGoT-hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMjoyMVrOGoT-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzUyNw==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444923527", "createdAt": "2020-06-24T14:12:21Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI3MjY2OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMzoyNVrOGoUBoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxODoyMlrOGpWTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDMyMA==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444924320", "createdAt": "2020-06-24T14:13:25Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDI5NQ==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446010295", "createdAt": "2020-06-26T07:18:22Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDMyMA=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI3NTc5OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNDowOFrOGoUDog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxODozNlrOGpWUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDgzNA==", "bodyText": "member not used in the code.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444924834", "createdAt": "2020-06-24T14:14:08Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDM4Nw==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446010387", "createdAt": "2020-06-26T07:18:36Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNDgzNA=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI4NDU4OnYy", "diffSide": "RIGHT", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNjowMVrOGoUJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxOTowOVrOGpWU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjIyOQ==", "bodyText": "member not used in the code.\nIf removed, we should remove dep from pom.xml:\n\n  \n    \n      droolsjbpm-integration/kie-maven-plugin/pom.xml\n    \n    \n        Lines 35 to 38\n      in\n      968e8d0\n    \n    \n    \n    \n\n        \n          \n           <dependency> \n        \n\n        \n          \n             <groupId>org.apache.maven</groupId> \n        \n\n        \n          \n             <artifactId>maven-archiver</artifactId> \n        \n\n        \n          \n           </dependency> \n        \n    \n  \n\n\nand from pom.xml:\nhttps://github.com/kiegroup/droolsjbpm-build-bootstrap/blob/f3a7669517d9ae0f0b3b3ace5983662c87f9982e/pom.xml#L3200-L3204", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444926229", "createdAt": "2020-06-24T14:16:01Z", "author": {"login": "afalhambra"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDU5Mw==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446010593", "createdAt": "2020-06-26T07:19:09Z", "author": {"login": "elguardian"}, "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/PackageKjarDependenciesMojo.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.io.Files;\n+import org.apache.maven.archiver.MavenArchiveConfiguration;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n+import org.apache.maven.artifact.repository.MavenArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DefaultProjectBuildingRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.MavenProjectHelper;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.repository.RepositorySystem;\n+import org.apache.maven.settings.Settings;\n+import org.apache.maven.shared.artifact.ArtifactCoordinate;\n+import org.apache.maven.shared.artifact.DefaultArtifactCoordinate;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;\n+import org.apache.maven.shared.artifact.resolve.ArtifactResult;\n+import org.apache.maven.shared.dependencies.DefaultDependableCoordinate;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolver;\n+import org.apache.maven.shared.dependencies.resolve.DependencyResolverException;\n+import org.apache.maven.shared.utils.StringUtils;\n+import org.codehaus.plexus.archiver.manager.ArchiverManager;\n+\n+@Mojo(name = \"package-dependencies-kjar\",\n+      defaultPhase = LifecyclePhase.PREPARE_PACKAGE,\n+      threadSafe = true,\n+      requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class PackageKjarDependenciesMojo extends AbstractKieMojo {\n+\n+    private static final Pattern ALT_REPO_SYNTAX_PATTERN = Pattern.compile(\"(.+)::(.*)::(.+)\");\n+\n+    @Parameter(defaultValue = \"${project.build.outputDirectory}\", required = true)\n+    private String outputDirectory;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    private MavenProject project;\n+\n+    @Parameter\n+    private String classifier;\n+\n+    @Component\n+    private MavenProjectHelper projectHelper;\n+\n+    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n+    private MavenSession session;\n+\n+    @Component(role = ArchiverManager.class)\n+    private ArchiverManager archiverManager;\n+\n+    @Parameter\n+    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjIyOQ=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjU4OTA0OnYy", "diffSide": "RIGHT", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/ImmutableSpringBootKieServerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToyMToyNVrOGoXK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoyMToxMlrOGpWYRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NTgyNg==", "bodyText": "Shouldn't we restrict access modifier? it's only used internally, so maybe it's better to declare as private?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r444975826", "createdAt": "2020-06-24T15:21:25Z", "author": {"login": "afalhambra"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/ImmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class ImmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public ImmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public ImmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMTQ2MA==", "bodyText": "sure", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2119#discussion_r446011460", "createdAt": "2020-06-26T07:21:12Z", "author": {"login": "elguardian"}, "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/ImmutableSpringBootKieServerImpl.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.drools.core.impl.InternalKieContainer;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.scanner.KieModuleMetaData;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieContainerStatus;\n+import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.controller.api.KieServerController;\n+import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieServerExtension;\n+import org.kie.server.services.impl.InmutableContainerStartupStrategy;\n+import org.kie.server.services.impl.KieContainerInstanceImpl;\n+import org.kie.server.services.impl.storage.memory.InMemoryKieServerStateRepository;\n+\n+public class ImmutableSpringBootKieServerImpl extends SpringBootKieServerImpl {\n+\n+    private List<KieContainerResource> containers;\n+    \n+    public ImmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider) {\n+        this(extensions, identityProvider, Collections.emptyList());\n+    }\n+\n+    public ImmutableSpringBootKieServerImpl(List<KieServerExtension> extensions, IdentityProvider identityProvider, List<KieContainerResource> containers) {\n+        super(extensions, identityProvider, new InMemoryKieServerStateRepository());\n+        this.containers = containers;\n+    }\n+\n+\n+    @Override\n+    protected InternalKieContainer createInternalKieContainer(String containerId, ReleaseId releaseId, KieModuleMetaData metaData) {\n+        return (InternalKieContainer) ks.newKieClasspathContainer(containerId, metaData.getClassLoader(), releaseId);\n+    }\n+\n+    @Override\n+    protected KieContainerInstanceImpl createContainerInstanceImpl(String containerId, ReleaseId releaseId) {\n+        return new InmutableSpringBootKieContainerInstanceImpl(containerId, KieContainerStatus.CREATING, null, releaseId, this);\n+    }\n+\n+    public class SpringBootKieServerController implements KieServerController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3NTgyNg=="}, "originalCommit": {"oid": "968e8d0e6183e2119d2ca5743c3ac942cd96e83b"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2003, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}