{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTczNzkz", "number": 2053, "title": "[RHPAM-2552] Ability to Search for tasks by multiple task variables and / or process variables via the kie-server api.", "bodyText": "", "createdAt": "2020-03-31T08:46:53Z", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053", "merged": true, "mergeCommit": {"oid": "97bab97a26ff4223009d2d0f4220795db5bf3460"}, "closed": true, "closedAt": "2020-04-20T14:46:15Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTAs_TgBqjMxODI2NjMyNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZfGF5AFqTM5NjQ1MTUzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0d41381270121b62f36f262765fb3976796d0ea", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b0d41381270121b62f36f262765fb3976796d0ea", "committedDate": "2020-03-31T08:45:05Z", "message": "move to convert utils"}, "afterCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "committedDate": "2020-03-31T10:37:42Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTI2MTYx", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#pullrequestreview-388126161", "createdAt": "2020-04-06T10:36:02Z", "commit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDozNjowMlrOGBRsYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozMzoyMFrOGBauCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MTY1MQ==", "bodyText": "As per BAPL-1526 description (queryCaseTaks), I'm missing the following attributes/members:\n\nprocessDefinitionId\nprocessInstanceId", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403991651", "createdAt": "2020-04-06T10:36:02Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String caseDefinitionId;\n+\n+    private String caseId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    private Map<String, Object> caseVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MjQ5NA==", "bodyText": "Shouldn't these members be annotated with the @xmlelement(name = \"..\") annotation like CaseInstanceCustomVars class?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403992494", "createdAt": "2020-04-06T10:37:37Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String caseDefinitionId;\n+\n+    private String caseId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    private Map<String, Object> caseVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MzQyNQ==", "bodyText": "Are we not providing more detailed info than what it is expected as per BAPL-1526 (queryCases)? or am I missing something?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403993425", "createdAt": "2020-04-06T10:39:22Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.server.api.model.cases;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+import org.kie.server.api.model.instance.TaskSummaryList;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-instance-custom\")\n+public class CaseInstanceCustomVars {\n+\n+    @XmlElement(name = \"process-instance-id\")\n+    private Long id;\n+    @XmlElement(name = \"case-id\")\n+    private String caseId;\n+    @XmlElement(name = \"case-definition-id\")\n+    private String caseDefinitionId;\n+    @XmlElement(name = \"process-name\")\n+    private String processName;\n+    @XmlElement(name = \"process-version\")\n+    private String processVersion;\n+    @XmlElement(name = \"process-instance-state\")\n+    private Integer state;\n+    @XmlElement(name = \"container-id\")\n+    private String containerId;\n+    @XmlElement(name = \"initiator\")\n+    private String initiator;\n+    @XmlElement(name = \"start-date\")\n+    private Date date;\n+    @XmlElement(name = \"process-instance-desc\")\n+    private String processInstanceDescription;\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+    @XmlElement(name = \"parent-instance-id\")\n+    private Long parentId;\n+    @XmlElement(name = \"last-modification-date\")\n+    private Date lastModificationDate;\n+\n+    @XmlElement(name = \"active-user-tasks\")\n+    private TaskSummaryList activeUserTasks;\n+\n+    @XmlElement(name = \"process-instance-variables\")\n+    private Map<String, Object> processVariables;\n+\n+    @XmlElement(name = \"case-instance-variables\")\n+    private Map<String, Object> caseVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5NTY1MQ==", "bodyText": "Shouldn't these members be annotated with the @xmlelement(name = \"..\") annotation like CaseInstanceCustomVars class?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403995651", "createdAt": "2020-04-06T10:43:53Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    List<String> potentialOwners;\n+\n+    String processDefinitionId;\n+\n+    Long processInstanceId;\n+\n+    Map<String,Object> inputVariables;\n+\n+    Map<String, Object> processVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5NjU2Nw==", "bodyText": "Shouldn't these members be declared as private accesor instead of default?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403996567", "createdAt": "2020-04-06T10:45:32Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    List<String> potentialOwners;\n+\n+    String processDefinitionId;\n+\n+    Long processInstanceId;\n+\n+    Map<String,Object> inputVariables;\n+\n+    Map<String, Object> processVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5OTE3MA==", "bodyText": "If this class is the equivalent for queryProcessTasks (as per BAPL-1526), I'm missing some attributes like:\n\ncaseDefinitionId (maybe this is not valid as this is a process and not a case?)\ncaseInstanceId (maybe this is not valid as this is a process and not a case?)\ntaskInputVariables - I guess this is matched with inputVariables member of this class? wouldn't make sense to rename it to taskInputVariable? wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403999170", "createdAt": "2020-04-06T10:50:31Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    List<String> potentialOwners;\n+\n+    String processDefinitionId;\n+\n+    Long processInstanceId;\n+\n+    Map<String,Object> inputVariables;\n+\n+    Map<String, Object> processVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMTg2NA==", "bodyText": "I'm missing a class for the queryProcess query as per BAPL-1526.\nSo far we have defined the following classes:\n\nCaseInstanceCustomVars class - for queryCases search.\nCaseUserTaskWithVariables class - for queryCaseTasks search.\nProcessInstanceUserTaskWithVariables class for queryProcessTasks search.\n\nWhat about a class for \"queryProcesses\" search?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404001864", "createdAt": "2020-04-06T10:55:21Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNTk2MA==", "bodyText": "Just out of curiosity, why these are not supported?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404005960", "createdAt": "2020-04-06T11:03:19Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-controller/kie-server-controller-websocket/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerClient.java", "diffHunk": "@@ -354,6 +357,16 @@ public NodeInstance findNodeInstanceByWorkItemId(Long processInstanceId, Long wo\n                 public List<ProcessInstance> findProcessInstancesByProcessIdAndInitiator(String processId, String initiator, List<Integer> status, Integer page, Integer pageSize, String sort, boolean sortOrder) {\n                     return throwUnsupportedException();\n                 }\n+\n+                @Override\n+                public ProcessInstanceCustomVarsList queryProcessesByVariables(SearchQueryFilterSpec spec) {\n+                    return throwUnsupportedException();\n+                }\n+\n+                @Override\n+                public ProcessInstanceUserTaskWithVariablesList queryUserTaskByVariables(SearchQueryFilterSpec spec) {\n+                    return throwUnsupportedException();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxNTk5Mw==", "bodyText": "Doesn't make sense to implement toString method? - since I see some of these objects are logged when log level is set to debug (to avoid printing a useless message)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404015993", "createdAt": "2020-04-06T11:22:56Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariablesList.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+import org.kie.server.api.model.ItemList;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"user-task-variable-instance-list\")\n+public class ProcessInstanceUserTaskWithVariablesList implements ItemList<ProcessInstanceUserTaskWithVariables> {\n+\n+    @XmlElement(name = \"user-task-with-vars-instance\")\n+    private ProcessInstanceUserTaskWithVariables[] userTaskWithVariables;\n+\n+    public ProcessInstanceUserTaskWithVariablesList() {\n+    }\n+\n+    public ProcessInstanceUserTaskWithVariablesList(ProcessInstanceUserTaskWithVariables[] variableInstances) {\n+        this.userTaskWithVariables = variableInstances;\n+    }\n+\n+    public ProcessInstanceUserTaskWithVariablesList(List<ProcessInstanceUserTaskWithVariables> variableInstances) {\n+        this.userTaskWithVariables = variableInstances.toArray(new ProcessInstanceUserTaskWithVariables[variableInstances.size()]);\n+    }\n+\n+    public ProcessInstanceUserTaskWithVariables[] getUserTaskWithVariables() {\n+        return userTaskWithVariables;\n+    }\n+\n+    public void setUserTaskWithVariables(ProcessInstanceUserTaskWithVariables[] variableInstances) {\n+        this.userTaskWithVariables = variableInstances;\n+    }\n+\n+    @Override\n+    public List<ProcessInstanceUserTaskWithVariables> getItems() {\n+        if (userTaskWithVariables == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList(userTaskWithVariables);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyODczMg==", "bodyText": "Shouldn't we call to something meaningful like convertToCaseInstanceCustomVarsList? convertToProcessInstanceCustomVarsList is not really what this method returns.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404028732", "createdAt": "2020-04-06T11:47:31Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/CaseManagementRuntimeDataServiceBase.java", "diffHunk": "@@ -438,4 +446,26 @@ protected String safeProcessInstanceSort(String sort) {\n \n         return actualSort;\n     }\n+\n+    public CaseInstanceCustomVarsList queryCasesByVariables(String payload, String payloadType) {\n+        SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n+        if (payload != null) {\n+            filter = marshallerHelper.unmarshal(payload, payloadType, SearchQueryFilterSpec.class);\n+        }\n+        return ConvertUtils.convertToProcessInstanceCustomVarsList(advanceCaseRuntimeDataService.queryCaseByVariables(filter.getAttributesQueryParams(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyOTkyOQ==", "bodyText": "Shouldn't this method be renamed to something meaningful like convertToCaseInstanceCustomVarsList? It doesn't return a ProcessInstanceCustomVarsList object.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404029929", "createdAt": "2020-04-06T11:49:42Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java", "diffHunk": "@@ -455,4 +461,43 @@ public static  CaseMigrationReportInstance convertCaseMigrationReport(String cas\n         }\n         return reports;\n     }\n+\n+    public static CaseUserTaskWithVariablesList convertToCaseUserTaskWithVariablesList(List<UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables) {\n+        List<CaseUserTaskWithVariables> data = new ArrayList<>();\n+        for (UserTaskInstanceWithPotOwnerDesc desc : queryUserTasksByVariables) {\n+            CaseUserTaskWithVariables var = new CaseUserTaskWithVariables();\n+            var.setId(desc.getTaskId());\n+            var.setName(desc.getName());\n+            var.setCorrelationKey(desc.getCorrelationKey());\n+            var.setActualOwner(desc.getActualOwner());\n+            var.setCaseDefinitionId(desc.getProcessId());\n+            var.setPotentialOwners(desc.getPotentialOwners());\n+            var.setCaseId(desc.getCorrelationKey());\n+            var.setProcessVariables(desc.getProcessVariables());\n+            var.setInputVariables(desc.getInputdata());\n+            var.setCaseVariables(desc.getExtraData());\n+            data.add(var);\n+        }\n+\n+        CaseUserTaskWithVariablesList result = new CaseUserTaskWithVariablesList();\n+        result.setCaseUserTaskWithVariables(data.parallelStream().toArray(CaseUserTaskWithVariables[]::new));\n+        return result;\n+    }\n+\n+    public static CaseInstanceCustomVarsList convertToProcessInstanceCustomVarsList(List<ProcessInstanceWithVarsDesc> queryCaseByVariables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzMzkzNA==", "bodyText": "can't we use parallelStrem()?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404033934", "createdAt": "2020-04-06T11:57:13Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -538,6 +540,41 @@ public static QueryDefinitionList convertToQueryDefinitionList(Collection<org.jb\n         return new QueryDefinitionList(instances);\n     }\n \n+    public static ProcessInstanceCustomVarsList convertToProcessInstanceCustomVarsList(List<ProcessInstanceWithVarsDesc> data) {\n+        List<ProcessInstanceCustomVars> processInstances = new ArrayList<>();\n+        for (ProcessInstanceWithVarsDesc proc : data) {\n+            ProcessInstanceCustomVars tmp = new ProcessInstanceCustomVars();\n+            tmp.setId(proc.getId());\n+            tmp.setVariables(proc.getVariables());\n+            tmp.setProcessId(proc.getProcessId());\n+            tmp.setCorrelationKey(proc.getCorrelationKey());\n+            processInstances.add(tmp);\n+        }\n+        ProcessInstanceCustomVarsList result = new ProcessInstanceCustomVarsList();\n+        result.setProcessInstances(processInstances.stream().toArray(ProcessInstanceCustomVars[]::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzOTg0NQ==", "bodyText": "I would add some search criteria in both queries, just to make sure queries are returning expected values, like attributes, task input variables, process variables, etc.\nI would also add some pagination.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404039845", "createdAt": "2020-04-06T12:07:57Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1834,38 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+\n+        try {\n+\n+            List<TaskSummary> tasks = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10, \"Status\", false);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n+            ProcessInstanceCustomVarsList listProcesses = queryClient.queryProcessesByVariables(spec);\n+            assertNotNull(listProcesses);\n+            ProcessInstanceUserTaskWithVariablesList listTasks = queryClient.queryUserTaskByVariables(spec);\n+            assertNotNull(listTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzOTk4Nw==", "bodyText": "I would add some search criteria in both queries, just to make sure queries are returning expected values, like attributes, task input variables, process variables, etc.\nI would also add some pagination.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404039987", "createdAt": "2020-04-06T12:08:15Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +730,39 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+        CaseInstanceCustomVarsList caseInstanceCustomVarsList = caseClient.queryCasesByVariables(new SearchQueryFilterSpec());\n+        assertNotNull(caseInstanceCustomVarsList);\n+        CaseUserTaskWithVariablesList caseUserTaskWithVariablesList = caseClient.queryUserTaskByVariables(new SearchQueryFilterSpec());\n+        assertNotNull(caseUserTaskWithVariablesList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzOTUzMA==", "bodyText": "Would it make sense to have a name like \"cases\" rather than \"processes\"? wdyt?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404139530", "createdAt": "2020-04-06T14:33:20Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -362,4 +372,47 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                     return createCorrectVariant(response, headers, Response.Status.OK, customHeaders);\n                 });\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryProcessesByVariables(@Context HttpHeaders headers, String payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2"}, "originalPosition": 104}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "committedDate": "2020-03-31T10:37:42Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "committedDate": "2020-04-08T18:11:47Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "committedDate": "2020-04-08T18:11:47Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "ee53ecb141c28744b35c291c162195f8a84e6bb6", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ee53ecb141c28744b35c291c162195f8a84e6bb6", "committedDate": "2020-04-09T14:31:36Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee53ecb141c28744b35c291c162195f8a84e6bb6", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ee53ecb141c28744b35c291c162195f8a84e6bb6", "committedDate": "2020-04-09T14:31:36Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "65e2bd25962a92072ca10b818a5a531b15d5c983", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/65e2bd25962a92072ca10b818a5a531b15d5c983", "committedDate": "2020-04-09T14:46:18Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65e2bd25962a92072ca10b818a5a531b15d5c983", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/65e2bd25962a92072ca10b818a5a531b15d5c983", "committedDate": "2020-04-09T14:46:18Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "61ca3330a99d5b6243ce15e5d39b1f67147b3f5d", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/61ca3330a99d5b6243ce15e5d39b1f67147b3f5d", "committedDate": "2020-04-09T15:41:21Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61ca3330a99d5b6243ce15e5d39b1f67147b3f5d", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/61ca3330a99d5b6243ce15e5d39b1f67147b3f5d", "committedDate": "2020-04-09T15:41:21Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "committedDate": "2020-04-09T19:59:19Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODM3OTk0", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#pullrequestreview-393837994", "createdAt": "2020-04-15T14:37:17Z", "commit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozNzoxN1rOGF81LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo0ODowOFrOGGbDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MjcxNg==", "bodyText": "Should be \"Copyright 2020\"", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408892716", "createdAt": "2020-04-15T14:37:17Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5Mjg4NQ==", "bodyText": "Should be \"Copyright 2020\"", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408892885", "createdAt": "2020-04-15T14:37:30Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVarsList.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDI4MA==", "bodyText": "XmlElement annotation is missing for potentialOwners attribute\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<String> potentialOwners;\n          \n          \n            \n                @XmlElement(name = \"potential-owners\")\n          \n          \n            \n                private List<String> potentialOwners;", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408894280", "createdAt": "2020-04-15T14:39:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    @XmlElement(name = \"id\")\n+    private Long id;\n+\n+    @XmlElement(name = \"name\")\n+    private String name;\n+\n+    @XmlElement(name = \"actual-owner\")\n+    private String actualOwner;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMjMzMg==", "bodyText": "Would be nice to have some builder pattern implemented, so it would be easier and more readable when creating an object of these, so it is a homogeneous behavior like ProcessInstanceCustomVars class - only a suggestion.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408912332", "createdAt": "2020-04-15T15:01:39Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.server.api.model.cases;\n+\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-instance-vars\")\n+public class CaseInstanceCustomVars {\n+\n+    @XmlElement(name = \"process-instance-id\")\n+    private Long processInstanceId;\n+\n+    @XmlElement(name = \"case-id\")\n+    private String caseId;\n+\n+    @XmlElement(name = \"case-definition-id\")\n+    private String caseDefinitionId;\n+\n+    @XmlElement(name = \"process-name\")\n+    private String processName;\n+\n+    @XmlElement(name = \"process-version\")\n+    private String processVersion;\n+\n+    @XmlElement(name = \"process-instance-state\")\n+    private Integer state;\n+\n+    @XmlElement(name = \"container-id\")\n+    private String containerId;\n+\n+    @XmlElement(name = \"initiator\")\n+    private String initiator;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+\n+    @XmlElement(name = \"process-instance-variables\")\n+    private Map<String, Object> processVariables;\n+\n+    @XmlElement(name = \"case-instance-variables\")\n+    private Map<String, Object> caseVariables;\n+\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long id) {\n+        this.processInstanceId = id;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getCaseDefinitionId() {\n+        return caseDefinitionId;\n+    }\n+\n+    public void setCaseDefinitionId(String caseDefinitionId) {\n+        this.caseDefinitionId = caseDefinitionId;\n+    }\n+    public String getProcessName() {\n+        return processName;\n+    }\n+\n+    public void setProcessName(String processName) {\n+        this.processName = processName;\n+    }\n+\n+    public String getProcessVersion() {\n+        return processVersion;\n+    }\n+\n+    public void setProcessVersion(String processVersion) {\n+        this.processVersion = processVersion;\n+    }\n+\n+    public Integer getState() {\n+        return state;\n+    }\n+\n+    public void setState(Integer state) {\n+        this.state = state;\n+    }\n+\n+    public String getContainerId() {\n+        return containerId;\n+    }\n+\n+    public void setContainerId(String containerId) {\n+        this.containerId = containerId;\n+    }\n+\n+    public String getInitiator() {\n+        return initiator;\n+    }\n+\n+    public void setInitiator(String initiator) {\n+        this.initiator = initiator;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+    public Map<String, Object> getCaseVariables() {\n+        return caseVariables;\n+    }\n+\n+    public void setCaseVariables(Map<String, Object> caseVariables) {\n+        this.caseVariables = caseVariables;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CaseInstanceCustomVars [id=\" + processInstanceId + \", caseId=\" + caseId + \", caseDefinitionId=\" + caseDefinitionId + \", processName=\" + processName + \", processVersion=\" + processVersion + \", state=\" +\n+               state +\n+               \", containerId=\" + containerId + \", correlationKey=\" + correlationKey + \"]\";\n+    }\n+\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMjc0NA==", "bodyText": "Would be nice to have some builder pattern implemented, so it would be easier and more readable when creating an object of these, so it is a homogeneous behavior like ProcessInstanceCustomVars class - only a suggestion.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408912744", "createdAt": "2020-04-15T15:02:12Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    @XmlElement(name = \"id\")\n+    private Long id;\n+\n+    @XmlElement(name = \"name\")\n+    private String name;\n+\n+    @XmlElement(name = \"actual-owner\")\n+    private String actualOwner;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    @XmlElement(name = \"case-definition-id\")\n+    private String caseDefinitionId;\n+\n+    @XmlElement(name = \"process-instance-id\")\n+    private Long processInstanceId;\n+\n+    @XmlElement(name = \"case-id\")\n+    private String caseId;\n+\n+    @XmlElement(name = \"task-instance-input-variables\")\n+    private Map<String, Object> inputVariables;\n+\n+    @XmlElement(name = \"process-instance-variables\")\n+    private Map<String, Object> processVariables;\n+\n+    @XmlElement(name = \"case-instance-variables\")\n+    private Map<String, Object> caseVariables;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getActualOwner() {\n+        return actualOwner;\n+    }\n+\n+    public void setActualOwner(String actualOwner) {\n+        this.actualOwner = actualOwner;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public List<String> getPotentialOwners() {\n+        return potentialOwners;\n+    }\n+\n+    public void setPotentialOwners(List<String> potentialOwners) {\n+        this.potentialOwners = potentialOwners;\n+    }\n+\n+\n+    public String getCaseDefinitionId() {\n+        return caseDefinitionId;\n+    }\n+\n+    public void setCaseDefinitionId(String caseDefinitionId) {\n+        this.caseDefinitionId = caseDefinitionId;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public void setCaseVariables(Map<String, Object> caseVariables) {\n+        this.caseVariables = caseVariables;\n+    }\n+\n+    public Map<String, Object> getCaseVariables() {\n+        return caseVariables;\n+    }\n+\n+    public Map<String, Object> getInputVariables() {\n+        return inputVariables;\n+    }\n+\n+    public void setInputVariables(Map<String, Object> inputVariables) {\n+        this.inputVariables = inputVariables;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CaseUserTaskWithVariables [id=\" + id + \", name=\" + name + \", actualOwner=\" + actualOwner + \", correlationKey=\" + correlationKey + \", potentialOwners=\" + potentialOwners + \", caseDefinitionId=\" +\n+               caseDefinitionId + \", processInstanceId=\" + processInstanceId + \", caseId=\" + caseId + \", inputVariables=\" + inputVariables + \", processVariables=\" + processVariables + \", caseVariables=\" + caseVariables +\n+               \"]\";\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDU1OA==", "bodyText": "I'm missing XmlElement annotation for these attributes.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408914558", "createdAt": "2020-04-15T15:04:35Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String processDefinitionId;\n+\n+    private Long processInstanceId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDg2OA==", "bodyText": "Doesn't make sense to implement toString method? - since I see some of these objects are logged when log level is set to debug (to avoid printing a useless message)", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408914868", "createdAt": "2020-04-15T15:04:58Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String processDefinitionId;\n+\n+    private Long processInstanceId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getActualOwner() {\n+        return actualOwner;\n+    }\n+\n+    public void setActualOwner(String actualOwner) {\n+        this.actualOwner = actualOwner;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public List<String> getPotentialOwners() {\n+        return potentialOwners;\n+    }\n+\n+    public void setPotentialOwners(List<String> potentialOwners) {\n+        this.potentialOwners = potentialOwners;\n+    }\n+\n+    public String getProcessDefinitionId() {\n+        return processDefinitionId;\n+    }\n+\n+    public void setProcessDefinitionId(String processDefinitionId) {\n+        this.processDefinitionId = processDefinitionId;\n+    }\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n+\n+    public Map<String, Object> getInputVariables() {\n+        return inputVariables;\n+    }\n+\n+    public void setInputVariables(Map<String, Object> inputVariables) {\n+        this.inputVariables = inputVariables;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNTAxNQ==", "bodyText": "Would be nice to have some builder pattern implemented, so it would be easier and more readable when creating an object of these, so it is a homogeneous behavior like ProcessInstanceCustomVars class - only a suggestion.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408915015", "createdAt": "2020-04-15T15:05:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String processDefinitionId;\n+\n+    private Long processInstanceId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getActualOwner() {\n+        return actualOwner;\n+    }\n+\n+    public void setActualOwner(String actualOwner) {\n+        this.actualOwner = actualOwner;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public List<String> getPotentialOwners() {\n+        return potentialOwners;\n+    }\n+\n+    public void setPotentialOwners(List<String> potentialOwners) {\n+        this.potentialOwners = potentialOwners;\n+    }\n+\n+    public String getProcessDefinitionId() {\n+        return processDefinitionId;\n+    }\n+\n+    public void setProcessDefinitionId(String processDefinitionId) {\n+        this.processDefinitionId = processDefinitionId;\n+    }\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n+\n+    public Map<String, Object> getInputVariables() {\n+        return inputVariables;\n+    }\n+\n+    public void setInputVariables(Map<String, Object> inputVariables) {\n+        this.inputVariables = inputVariables;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDcxNg==", "bodyText": "Log message shouldn't be something like \"cases search\" instead of \"process\"?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408924716", "createdAt": "2020-04-15T15:17:58Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -362,4 +373,52 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                     return createCorrectVariant(response, headers, Response.Status.OK, customHeaders);\n                 });\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryCaseByVariables(@Context HttpHeaders headers, String payload,\n+                                         @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                         @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzYwOA==", "bodyText": "Log message shouldn't be something like \"case tasks search\" instead of \"process search\"?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408927608", "createdAt": "2020-04-15T15:21:43Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -362,4 +373,52 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                     return createCorrectVariant(response, headers, Response.Status.OK, customHeaders);\n                 });\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryCaseByVariables(@Context HttpHeaders headers, String payload,\n+                                         @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                         @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n+\n+            return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n+\n+        } catch (Exception e) {\n+            logger.error(\"Unexpected error during processing {}\", e.getMessage(), e);\n+            return internalServerError(errorMessage(e), v, conversationIdHeader);\n+        }\n+\n+    }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_TASKS_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryCaseUserTasksByVariables(@Context HttpHeaders headers,\n+                                                  String payload,\n+                                                  @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                                  @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            CaseUserTaskWithVariablesList taskVariableSummaryList = caseManagementRuntimeDataServiceBase.queryUserTasksByVariables(payload, type, new QueryContext((page * pageSize), pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", taskVariableSummaryList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODgzNg==", "bodyText": "Shouldn't be log message more related to \"process tasks search\" rather than same log message as queryProcessesByVariables method? Just to differentiate from \"queryProcessesByVariables\" method.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408928836", "createdAt": "2020-04-15T15:23:19Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java", "diffHunk": "@@ -762,4 +768,51 @@ public Response getTasksByVariables(@Context HttpHeaders headers,\n             return internalServerError(errorMessage(e), v, conversationIdHeader);\n         }\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_PROCESSES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryProcessesByVariables(@Context HttpHeaders headers, String payload,\n+                                              @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                              @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            ProcessInstanceCustomVarsList processVariableSummaryList = runtimeDataServiceBase.queryProcessesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n+\n+            return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n+\n+        } catch (Exception e) {\n+            logger.error(\"Unexpected error during processing {}\", e.getMessage(), e);\n+            return internalServerError(errorMessage(e), v, conversationIdHeader);\n+        }\n+\n+    }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_TASKS_PROCESSES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryUserTasksByVariables(@Context HttpHeaders headers, String payload,\n+                                              @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                              @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            ProcessInstanceUserTaskWithVariablesList taskVariableSummaryList = runtimeDataServiceBase.queryUserTasksByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", taskVariableSummaryList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNjMyMw==", "bodyText": "Why are we using parallelStream here?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408936323", "createdAt": "2020-04-15T15:32:53Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java", "diffHunk": "@@ -455,4 +462,54 @@ public static  CaseMigrationReportInstance convertCaseMigrationReport(String cas\n         }\n         return reports;\n     }\n+\n+    public static CaseUserTaskWithVariablesList convertToCaseUserTaskWithVariablesList(List<UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables) {\n+        List<CaseUserTaskWithVariables> data = new ArrayList<>();\n+        for (UserTaskInstanceWithPotOwnerDesc desc : queryUserTasksByVariables) {\n+            CaseUserTaskWithVariables var = new CaseUserTaskWithVariables();\n+            var.setId(desc.getTaskId());\n+            var.setName(desc.getName());\n+            var.setProcessInstanceId(desc.getProcessInstanceId());\n+            var.setCorrelationKey(desc.getCorrelationKey());\n+            var.setActualOwner(desc.getActualOwner());\n+            var.setCaseDefinitionId(desc.getProcessId());\n+            var.setPotentialOwners(desc.getPotentialOwners());\n+            var.setCaseId(desc.getCorrelationKey());\n+            var.setProcessVariables(desc.getProcessVariables());\n+            var.setInputVariables(desc.getInputdata());\n+            var.setCaseVariables(desc.getExtraData());\n+            data.add(var);\n+        }\n+\n+        CaseUserTaskWithVariablesList result = new CaseUserTaskWithVariablesList();\n+        result.setCaseUserTaskWithVariables(data.parallelStream().toArray(CaseUserTaskWithVariables[]::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0MDgzOQ==", "bodyText": "Would just be nice to add some search criteria rather an empty one.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409340839", "createdAt": "2020-04-16T07:31:51Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +736,54 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        Assume.assumeTrue(configuration.isRest());\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+\n+        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n+        filter.setAttributesQueryParams(attrs);\n+        List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n+        assertNotNull(caseInstanceCustomVarsList);\n+        Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n+\n+        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n+        filter = new SearchQueryFilterSpec();\n+        filter.setAttributesQueryParams(attrs);\n+        caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n+        assertNotNull(caseInstanceCustomVarsList);\n+        caseInstanceCustomVarsList.stream().forEach(e -> assertTrue(e.getCaseId().startsWith(CLAIM_CASE_ID_PREFIX)));\n+\n+        List<CaseUserTaskWithVariables> caseUserTaskWithVariablesList = caseClient.queryUserTaskByVariables(new SearchQueryFilterSpec(), 0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3Njg0Nw==", "bodyText": "No need to throw Exception - never thrown in this method.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409376847", "createdAt": "2020-04-16T08:30:45Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NzI0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409377246", "createdAt": "2020-04-16T08:31:24Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Assume.assumeTrue(configuration.isRest());\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NjU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        spec.setAttributesQueryParams(list(equalsTo(\"PROCESS_DEPLOYMENT_ID\", CONTAINER_ID)));\n          \n          \n            \n                        spec.setAttributesQueryParams(list(equalsTo(AdvanceRuntimeDataService.PROCESS_DEPLOYMENT_ID, CONTAINER_ID)));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409386558", "createdAt": "2020-04-16T08:46:01Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Assume.assumeTrue(configuration.isRest());\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+\n+        try {\n+\n+            List<TaskSummary> tasks = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10, \"Status\", false);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n+            spec.setAttributesQueryParams(list(equalsTo(\"PROCESS_DEPLOYMENT_ID\", CONTAINER_ID)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Njc1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        spec.setAttributesQueryParams(list(in(\"PROCESS_DEFINITION_ID\", PROCESS_ID_USERTASK)));\n          \n          \n            \n                        spec.setAttributesQueryParams(list(in(AdvanceRuntimeDataService.PROCESS_DEFINITION_ID, PROCESS_ID_USERTASK)));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409386756", "createdAt": "2020-04-16T08:46:22Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Assume.assumeTrue(configuration.isRest());\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+\n+        try {\n+\n+            List<TaskSummary> tasks = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10, \"Status\", false);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n+            spec.setAttributesQueryParams(list(equalsTo(\"PROCESS_DEPLOYMENT_ID\", CONTAINER_ID)));\n+            List<ProcessInstanceCustomVars> listProcesses = queryClient.queryProcessesByVariables(spec, 0, 2);\n+            assertNotNull(listProcesses);\n+            listProcesses.stream().forEach(e -> assertEquals(CONTAINER_ID, e.getContainerId()));\n+\n+            spec = new SearchQueryFilterSpec();\n+            spec.setAttributesQueryParams(list(in(\"PROCESS_DEFINITION_ID\", PROCESS_ID_USERTASK)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NzYxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n          \n          \n            \n                    List<QueryParam> attrs = list(equalsTo(AdvanceCaseRuntimeDataService.CASE_ATTR_CORRELATION_KEY, caseId));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409387616", "createdAt": "2020-04-16T08:47:46Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +736,54 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        Assume.assumeTrue(configuration.isRest());\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+\n+        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Nzg2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n          \n          \n            \n                    attrs = list(likeTo(AdvanceCaseRuntimeDataService.CASE_ATTR_CORRELATION_KEY, false, CLAIM_CASE_ID_PREFIX + \"%\"));", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409387862", "createdAt": "2020-04-16T08:48:08Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +736,54 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        Assume.assumeTrue(configuration.isRest());\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+\n+        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n+        filter.setAttributesQueryParams(attrs);\n+        List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n+        assertNotNull(caseInstanceCustomVarsList);\n+        Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n+\n+        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "committedDate": "2020-04-09T19:59:19Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "committedDate": "2020-04-17T08:04:23Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "committedDate": "2020-04-20T09:52:56Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "committedDate": "2020-04-17T08:04:23Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}, "afterCommit": {"oid": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "author": {"user": null}, "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "committedDate": "2020-04-20T09:52:56Z", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDUxNTM1", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#pullrequestreview-396451535", "createdAt": "2020-04-20T13:27:54Z", "commit": {"oid": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}