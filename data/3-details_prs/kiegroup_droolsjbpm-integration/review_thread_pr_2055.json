{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjQ1Nzgy", "number": 2055, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozNzozMVrODvet3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNDozNFrODxkAJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTEyOTI2OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/UserTaskServicesClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozNzozMVrOGB7UAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozNzo1MFrOGDPGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MzUzNg==", "bodyText": "I would rename \"id\" to \"taskId\" to keep it similar to \"saveTaskContent\" method above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Long saveTaskContent(String containerId, Long id, String userId, Map<String, Object> content);\n          \n          \n            \n                Long saveTaskContent(String containerId, Long taskId, String userId, Map<String, Object> content);", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404673536", "createdAt": "2020-04-07T09:37:31Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/UserTaskServicesClient.java", "diffHunk": "@@ -73,6 +73,8 @@\n \n     Long saveTaskContent(String containerId, Long taskId, Map<String, Object> values);\n \n+    Long saveTaskContent(String containerId, Long id, String userId, Map<String, Object> content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564f313f343e81d003797b17c4b14ec3f2f9334c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NjM4Mw==", "bodyText": "done", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406046383", "createdAt": "2020-04-09T08:37:50Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/UserTaskServicesClient.java", "diffHunk": "@@ -73,6 +73,8 @@\n \n     Long saveTaskContent(String containerId, Long taskId, Map<String, Object> values);\n \n+    Long saveTaskContent(String containerId, Long id, String userId, Map<String, Object> content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MzUzNg=="}, "originalCommit": {"oid": "564f313f343e81d003797b17c4b14ec3f2f9334c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTE2NjAwOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/UserTaskResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo0NzowM1rOGB7q0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozOTo1MFrOGDPLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3OTM3Nw==", "bodyText": "Too much indent tabulation.\n\"required = false\" is not really needed, but for clarity sake I think it's ok. wdyt?\n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            @ApiParam(value = \"optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled\", required = false) @QueryParam(\"user\") String userId,\n          \n          \n            \n                        @ApiParam(value = \"optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled\") @QueryParam(\"user\") String userId,", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404679377", "createdAt": "2020-04-07T09:47:03Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/UserTaskResource.java", "diffHunk": "@@ -707,6 +707,7 @@ public Response setDescription(@Context HttpHeaders headers,\n     public Response saveContent(@Context HttpHeaders headers, \n             @ApiParam(value = \"container id that task instance belongs to\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId,\n             @ApiParam(value = \"identifier of the task instance that data should be saved into\", required = true, example = \"123\") @PathParam(TASK_INSTANCE_ID) Long taskId, \n+                                @ApiParam(value = \"optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled\", required = false) @QueryParam(\"user\") String userId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NzQ5Mg==", "bodyText": "just left it", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406047492", "createdAt": "2020-04-09T08:39:50Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/UserTaskResource.java", "diffHunk": "@@ -707,6 +707,7 @@ public Response setDescription(@Context HttpHeaders headers,\n     public Response saveContent(@Context HttpHeaders headers, \n             @ApiParam(value = \"container id that task instance belongs to\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId,\n             @ApiParam(value = \"identifier of the task instance that data should be saved into\", required = true, example = \"123\") @PathParam(TASK_INSTANCE_ID) Long taskId, \n+                                @ApiParam(value = \"optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled\", required = false) @QueryParam(\"user\") String userId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3OTM3Nw=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTI2Nzc5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/UserTaskServiceBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDoxNDoxMVrOGB8q5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTowNzoxOFrOGDQJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NTc4Mw==", "bodyText": "Not really sure whether we need to pass \"containerId\" as it was done before? Why it is not required now from a functional point of view?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404695783", "createdAt": "2020-04-07T10:14:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/UserTaskServiceBase.java", "diffHunk": "@@ -258,12 +256,17 @@ public void setDescription(String containerId, Number taskId, String description\n     }\n \n     public String saveContent(String containerId, Number taskId, String payload, String marshallingType) {\n+        return saveContent(containerId, null, taskId, payload, marshallingType);\n+    }\n+\n+    public String saveContent(String containerId, String userId, Number taskId, String payload, String marshallingType) {\n+        userId = getUser(userId);\n         containerId = context.getContainerId(containerId, new ByTaskIdContainerLocator(taskId.longValue()));\n         logger.debug(\"About to unmarshal task content parameters from payload: '{}'\", payload);\n         Map<String, Object> parameters = marshallerHelper.unmarshal(containerId, payload, marshallingType, Map.class);\n \n         logger.debug(\"About to set content of a task with id '{}' with data {}\", taskId, parameters);\n-        Long contentId = userTaskService.saveContent(containerId, taskId.longValue(), parameters);\n+        Long contentId = userTaskService.saveContentFromUser(taskId.longValue(), userId, parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2MzUxOA==", "bodyText": "not really needed when you have the task id", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406063518", "createdAt": "2020-04-09T09:07:18Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/UserTaskServiceBase.java", "diffHunk": "@@ -258,12 +256,17 @@ public void setDescription(String containerId, Number taskId, String description\n     }\n \n     public String saveContent(String containerId, Number taskId, String payload, String marshallingType) {\n+        return saveContent(containerId, null, taskId, payload, marshallingType);\n+    }\n+\n+    public String saveContent(String containerId, String userId, Number taskId, String payload, String marshallingType) {\n+        userId = getUser(userId);\n         containerId = context.getContainerId(containerId, new ByTaskIdContainerLocator(taskId.longValue()));\n         logger.debug(\"About to unmarshal task content parameters from payload: '{}'\", payload);\n         Map<String, Object> parameters = marshallerHelper.unmarshal(containerId, payload, marshallingType, Map.class);\n \n         logger.debug(\"About to set content of a task with id '{}' with data {}\", taskId, parameters);\n-        Long contentId = userTaskService.saveContent(containerId, taskId.longValue(), parameters);\n+        Long contentId = userTaskService.saveContentFromUser(taskId.longValue(), userId, parameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NTc4Mw=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTI5Mjk0OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDoyMDo1NlrOGB86Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MDo0M1rOGDPNLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5OTcxOQ==", "bodyText": "unboxing not needed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404699719", "createdAt": "2020-04-07T10:20:56Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODA0Nw==", "bodyText": "ok", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406048047", "createdAt": "2020-04-09T08:40:43Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5OTcxOQ=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTMyODgyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDozMTowM1rOGB9Q2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MDo1N1rOGDPNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNTQ5Ng==", "bodyText": "Why is it marked as Smoke category? couldn't find any test suite to execute this category", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404705496", "createdAt": "2020-04-07T10:31:03Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODE3Nw==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406048177", "createdAt": "2020-04-09T08:40:57Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNTQ5Ng=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTQwNTAzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1MzoxMVrOGB9_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MTozMFrOGDPO2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzQzMQ==", "bodyText": "not sure why \"events.size() - 1\"? shouldn't we get always events.size = 1? if not, why events.size - 1 would return \"admin\" as userId?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404717431", "createdAt": "2020-04-07T10:53:11Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        try {\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertNotNull(taskList);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            assertEquals(\"First task\", taskSummary.getName());\n+\n+            // startTask and completeTask task\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+\n+            Map<String, Object> taskOutcome = new HashMap<String, Object>();\n+            taskOutcome.put(\"string_\", \"my custom data\");\n+            taskOutcome.put(\"person_\", createPersonInstance(USER_MARY));\n+\n+            Map<String, Object> content = new HashMap<>();\n+            content.put(\"name\", \"joda\");\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"admin\", content);\n+            List<TaskEventInstance> events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"admin\", events.get(events.size() - 1).getUserId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODQ3Mg==", "bodyText": "it is the lasts event. We are checking that the last event modification is by the user being impersonated.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406048472", "createdAt": "2020-04-09T08:41:30Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        try {\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertNotNull(taskList);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            assertEquals(\"First task\", taskSummary.getName());\n+\n+            // startTask and completeTask task\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+\n+            Map<String, Object> taskOutcome = new HashMap<String, Object>();\n+            taskOutcome.put(\"string_\", \"my custom data\");\n+            taskOutcome.put(\"person_\", createPersonInstance(USER_MARY));\n+\n+            Map<String, Object> content = new HashMap<>();\n+            content.put(\"name\", \"joda\");\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"admin\", content);\n+            List<TaskEventInstance> events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"admin\", events.get(events.size() - 1).getUserId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzQzMQ=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTQwNTY1OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1MzoyM1rOGB9_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MTo1NVrOGDPPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzUyMQ==", "bodyText": "same as previous comment", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404717521", "createdAt": "2020-04-07T10:53:23Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        try {\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertNotNull(taskList);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            assertEquals(\"First task\", taskSummary.getName());\n+\n+            // startTask and completeTask task\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+\n+            Map<String, Object> taskOutcome = new HashMap<String, Object>();\n+            taskOutcome.put(\"string_\", \"my custom data\");\n+            taskOutcome.put(\"person_\", createPersonInstance(USER_MARY));\n+\n+            Map<String, Object> content = new HashMap<>();\n+            content.put(\"name\", \"joda\");\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"admin\", content);\n+            List<TaskEventInstance> events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"admin\", events.get(events.size() - 1).getUserId());\n+\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"other\", content);\n+            events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"other\", events.get(events.size() - 1).getUserId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODcxMg==", "bodyText": "checking the last event is by the user being impersonated.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406048712", "createdAt": "2020-04-09T08:41:55Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        try {\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertNotNull(taskList);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            assertEquals(\"First task\", taskSummary.getName());\n+\n+            // startTask and completeTask task\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+\n+            Map<String, Object> taskOutcome = new HashMap<String, Object>();\n+            taskOutcome.put(\"string_\", \"my custom data\");\n+            taskOutcome.put(\"person_\", createPersonInstance(USER_MARY));\n+\n+            Map<String, Object> content = new HashMap<>();\n+            content.put(\"name\", \"joda\");\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"admin\", content);\n+            List<TaskEventInstance> events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"admin\", events.get(events.size() - 1).getUserId());\n+\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"other\", content);\n+            events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"other\", events.get(events.size() - 1).getUserId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzUyMQ=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTQwODEzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1NDowNFrOGB-BRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MjowNVrOGDPQGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzg5NQ==", "bodyText": "this method doesn't throw any exception", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404717895", "createdAt": "2020-04-07T10:54:04Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0ODc5NQ==", "bodyText": "removed", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r406048795", "createdAt": "2020-04-09T08:42:05Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzg5NQ=="}, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTQxMTIyOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1NTowMFrOGB-DNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDo1NTowMFrOGB-DNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxODM4OA==", "bodyText": "These 4 methods are never used", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r404718388", "createdAt": "2020-04-07T10:55:00Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ByPassUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.kie.api.KieServices;\n+import org.kie.api.task.model.Status;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.TaskEventInstance;\n+import org.kie.server.api.model.instance.TaskInstance;\n+import org.kie.server.api.model.instance.TaskSummary;\n+import org.kie.server.integrationtests.category.Smoke;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+import org.kie.server.integrationtests.shared.KieServerReflections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ByPassUserTaskServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"definition-project\",\n+            \"1.0.0.Final\");\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/definition-project\");\n+\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+\n+    @Override\n+    protected void addExtraCustomClasses(Map<String, Class<?>> extraClasses) throws Exception {\n+        extraClasses.put(PERSON_CLASS_NAME, Class.forName(PERSON_CLASS_NAME, true, kieContainer.getClassLoader()));\n+    }\n+\n+    @Test\n+    @Category(Smoke.class)\n+    public void testProcessWithUserTasks() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        try {\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertNotNull(taskList);\n+\n+            assertEquals(1, taskList.size());\n+            TaskSummary taskSummary = taskList.get(0);\n+            assertEquals(\"First task\", taskSummary.getName());\n+\n+            // startTask and completeTask task\n+            taskClient.startTask(CONTAINER_ID, taskSummary.getId(), USER_YODA);\n+\n+            Map<String, Object> taskOutcome = new HashMap<String, Object>();\n+            taskOutcome.put(\"string_\", \"my custom data\");\n+            taskOutcome.put(\"person_\", createPersonInstance(USER_MARY));\n+\n+            Map<String, Object> content = new HashMap<>();\n+            content.put(\"name\", \"joda\");\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"admin\", content);\n+            List<TaskEventInstance> events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"admin\", events.get(events.size() - 1).getUserId());\n+\n+            taskClient.saveTaskContent(CONTAINER_ID, taskSummary.getId(), \"other\", content);\n+            events = taskClient.findTaskEvents(taskSummary.getId(), 0, 10);\n+            assertEquals(\"other\", events.get(events.size() - 1).getUserId());\n+\n+            taskClient.completeTask(CONTAINER_ID, taskSummary.getId(), USER_YODA, taskOutcome);\n+\n+            // check if task outcomes are properly set as process variables\n+            Object personVar = processClient.getProcessInstanceVariable(CONTAINER_ID, processInstanceId, \"personData\");\n+            assertNotNull(personVar);\n+            assertEquals(USER_MARY, KieServerReflections.valueOf(personVar, \"name\"));\n+\n+            String stringVar = (String) processClient.getProcessInstanceVariable(CONTAINER_ID, processInstanceId, \"stringData\");\n+            assertNotNull(personVar);\n+            assertEquals(\"my custom data\", stringVar);\n+\n+            taskList = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, 0, 10);\n+            assertNotNull(taskList);\n+\n+            assertEquals(1, taskList.size());\n+            taskSummary = taskList.get(0);\n+            assertEquals(\"Second task\", taskSummary.getName());\n+\n+        } finally {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+        }\n+    }\n+    \n+    \n+    \n+    private void assertTaskEventInstance(TaskEventInstance expected, TaskEventInstance actual) {\n+        assertNotNull(actual);\n+        assertEquals(expected.getType(), actual.getType());\n+        assertEquals(expected.getProcessInstanceId(), actual.getProcessInstanceId());\n+        assertEquals(expected.getTaskId(), actual.getTaskId());\n+        assertEquals(expected.getUserId(), actual.getUserId());\n+        assertNotNull(actual.getId());\n+        assertNotNull(actual.getLogTime());\n+        assertNotNull(actual.getWorkItemId());\n+    }\n+\n+    private void checkTaskNameAndStatus(TaskSummary taskSummary, String name, Status status) {\n+        assertNotNull(taskSummary);\n+        assertEquals(name, taskSummary.getName());\n+        assertEquals(status.toString(), taskSummary.getStatus());\n+    }\n+\n+    private void checkTaskStatusAndOwners(String containerId, Long taskId, Status status, String actualOwner, String potentialOwner) {\n+        TaskInstance task = taskClient.getTaskInstance(containerId, taskId, false, false, true);\n+        checkTaskStatusAndActualOwner(containerId, taskId, status, actualOwner);\n+        assertEquals(1, task.getPotentialOwners().size());\n+        assertEquals(potentialOwner, task.getPotentialOwners().get(0));\n+    }\n+\n+    private void checkTaskStatusAndActualOwner(String containerId, Long taskId, Status status, String actualOwner) {\n+        TaskInstance task = taskClient.getTaskInstance(containerId, taskId);\n+        assertEquals(taskId, task.getId());\n+        assertEquals(status.toString(), task.getStatus());\n+        assertEquals(actualOwner, task.getActualOwner());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f834b09634412fa509706843a352a9b45282569"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjk2MzQzOnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozMzozOFrOGFGRbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo0OToyNVrOGFG5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5ODgyOQ==", "bodyText": "Not sure why the property is specified in the cargo plugin?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r407998829", "createdAt": "2020-04-14T09:33:38Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "diffHunk": "@@ -268,6 +268,7 @@\n           <configuration>\n             <systemPropertyVariables>\n               <!-- Values are supplied by specific profiles -->\n+              <org.kie.server.bypass.auth.user>true</org.kie.server.bypass.auth.user>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6709a5590c1f47be13eec6c9e93f1c789e5820"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwOTAwMQ==", "bodyText": "it is requires for the server to enable by pass user. Otherwise does not work.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r408009001", "createdAt": "2020-04-14T09:49:25Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "diffHunk": "@@ -268,6 +268,7 @@\n           <configuration>\n             <systemPropertyVariables>\n               <!-- Values are supplied by specific profiles -->\n+              <org.kie.server.bypass.auth.user>true</org.kie.server.bypass.auth.user>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5ODgyOQ=="}, "originalCommit": {"oid": "3d6709a5590c1f47be13eec6c9e93f1c789e5820"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjk2NTI3OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNDowOVrOGFGSqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo0OTo1NVrOGFG6gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5OTE0Ng==", "bodyText": "Same here. Why is the property specified in the integration test plugin?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r407999146", "createdAt": "2020-04-14T09:34:09Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "diffHunk": "@@ -326,6 +327,7 @@\n         <configuration>\n           <container>\n             <systemProperties>\n+              <org.kie.server.bypass.auth.user>true</org.kie.server.bypass.auth.user>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6709a5590c1f47be13eec6c9e93f1c789e5820"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwOTM0Nw==", "bodyText": "same as with cargo. this is for enabling client bypass client", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r408009347", "createdAt": "2020-04-14T09:49:55Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/pom.xml", "diffHunk": "@@ -326,6 +327,7 @@\n         <configuration>\n           <container>\n             <systemProperties>\n+              <org.kie.server.bypass.auth.user>true</org.kie.server.bypass.auth.user>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5OTE0Ng=="}, "originalCommit": {"oid": "3d6709a5590c1f47be13eec6c9e93f1c789e5820"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjk2Njc5OnYy", "diffSide": "RIGHT", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RollingUpdateUserTaskServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNDozNFrOGFGTmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1MDo1M1rOGFG84w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5OTM4Nw==", "bodyText": "Why this change?", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r407999387", "createdAt": "2020-04-14T09:34:34Z", "author": {"login": "afalhambra"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RollingUpdateUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -64,7 +64,7 @@ public void testGetTaskInputAndOutputWithAlias() throws Exception {\n             ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ALIAS, pid);\n             assertThat(processInstance).isNotNull();\n \n-            List<TaskSummary> taskList = taskClient.findTasksAssignedAsBusinessAdministrator(USER_YODA, 0, 10);\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsBusinessAdministrator(USER_ADMINISTRATOR, 0, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6709a5590c1f47be13eec6c9e93f1c789e5820"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwOTk1NQ==", "bodyText": "this is a faulty test.  before it was working because the bypass was on false. But when I changed it the the administrator user was the right one to set.", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2055#discussion_r408009955", "createdAt": "2020-04-14T09:50:53Z", "author": {"login": "elguardian"}, "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RollingUpdateUserTaskServiceIntegrationTest.java", "diffHunk": "@@ -64,7 +64,7 @@ public void testGetTaskInputAndOutputWithAlias() throws Exception {\n             ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ALIAS, pid);\n             assertThat(processInstance).isNotNull();\n \n-            List<TaskSummary> taskList = taskClient.findTasksAssignedAsBusinessAdministrator(USER_YODA, 0, 10);\n+            List<TaskSummary> taskList = taskClient.findTasksAssignedAsBusinessAdministrator(USER_ADMINISTRATOR, 0, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5OTM4Nw=="}, "originalCommit": {"oid": "3d6709a5590c1f47be13eec6c9e93f1c789e5820"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2119, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}